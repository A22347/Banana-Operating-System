
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 6d 7b 00 00       	call   c0007b8d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a4 43 02 c0       	mov    eax,0xc00243a4
c0000025:	3d a4 43 02 c0       	cmp    eax,0xc00243a4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a4 43 02 c0       	push   0xc00243a4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a4 43 02 c0       	mov    eax,0xc00243a4
c0000051:	2d a4 43 02 c0       	sub    eax,0xc00243a4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a4 43 02 c0       	push   0xc00243a4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb fc 04 02 c0       	mov    ebx,0xc00204fc
c0000097:	81 eb f8 04 02 c0    	sub    ebx,0xc00204f8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be f8 04 02 c0       	mov    esi,0xc00204f8
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a4 43 02 c0       	push   0xc00243a4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 a4 43 02 c0       	push   0xc00243a4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 f7 56 01 00       	call   c00159a4 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 5c a4 00 00       	call   c000a721 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 d5 56 01 00       	call   c00159a4 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 e2 5b 01 00       	call   c0015ed0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 7d 62 01 00       	call   c0016574 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 ab 12 01 00       	jmp    c001162a <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 00 05 02 c0 02 	test   BYTE PTR [edx-0x3ffdfb00],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 00 05 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb00],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 00 05 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb00],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 00 05 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb00],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 00 05 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfb00],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 00 05 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb00],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 03 6b 00 00       	call   c0007a08 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 5e 6a 00 00       	call   c0007a08 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 48 6a 00 00       	call   c0007a08 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 46 69 00 00       	call   c0007a08 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00011af:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001206:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c000124f:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c000126a:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001324:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000132a:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001331:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013f7:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013fd:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001404:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001552:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 04 06 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf9fc]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 66 7d 01 00       	jmp    c0019b40 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 90 7d 01 00       	jmp    c0019b80 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 b1 7d 01 00       	jmp    c0019bc0 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 60 07 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf8a0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 60 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf8a0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba b8 2f 02 c0       	mov    edx,0xc0022fb8
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 1c 06 02 c0       	mov    edx,0xc002061c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 22 06 02 c0       	mov    eax,0xc0020622
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf e0 06 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf920]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 2b 06 02 c0       	mov    eax,0xc002062b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 60 07 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf8a0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 b0 06 02 c0       	mov    eax,0xc00206b0
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb a0 06 02 c0       	mov    ebx,0xc00206a0
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 80 06 02 c0       	mov    eax,0xc0020680
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 90 06 02 c0       	mov    eax,0xc0020690
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 32 06 02 c0       	mov    edx,0xc0020632
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 3e 06 02 c0       	mov    edx,0xc002063e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 52 06 02 c0       	mov    edx,0xc0020652
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 d0 1e 00 00       	call   c0007b33 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 c8 1e 00 00       	call   c0007b43 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 80 0a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020a80
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 80 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a80
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 80 08 02 c0       	mov    eax,0xc0020880
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 c0 07 02 c0       	mov    eax,0xc00207c0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 80 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf880]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 80 0b 02 c0       	push   0xc0020b80
c0006147:	e8 98 43 01 00       	call   c001a4e4 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 8e 0b 02 c0       	push   0xc0020b8e
c000617f:	e8 60 43 01 00       	call   c001a4e4 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 c9 42 01 00       	call   c001a488 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 9d 0b 02 c0       	push   0xc0020b9d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000657b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006585:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000659d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006616:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c00066ad:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c000670f:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000674c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c000680c:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 a0 0b 02 c0       	push   0xc0020ba0
c000682f:	e8 b0 3c 01 00       	call   c001a4e4 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 be 3c 01 00       	call   c001a500 <iso_kprintfd>
c0006842:	c7 04 24 a5 0b 02 c0 	mov    DWORD PTR [esp],0xc0020ba5
c0006849:	e8 96 3c 01 00       	call   c001a4e4 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006855:	e8 a6 3c 01 00       	call   c001a500 <iso_kprintfd>
c000685a:	c7 04 24 ab 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bab
c0006861:	e8 7e 3c 01 00       	call   c001a4e4 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c000686d:	e8 8e 3c 01 00       	call   c001a500 <iso_kprintfd>
c0006872:	c7 04 24 b1 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bb1
c0006879:	e8 66 3c 01 00       	call   c001a4e4 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006885:	e8 76 3c 01 00       	call   c001a500 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068eb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 9d 0b 02 c0       	push   0xc0020b9d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a2a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a30:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 ba 0b 02 c0       	push   0xc0020bba
c0006a52:	e8 8d 3a 01 00       	call   c001a4e4 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a87:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 c5 0b 02 c0       	push   0xc0020bc5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 cc 0b 02 c0       	push   0xc0020bcc
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b25:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b48:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 d3 0b 02 c0       	push   0xc0020bd3
c0006b69:	e8 76 39 01 00       	call   c001a4e4 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 de 0b 02 c0       	push   0xc0020bde
c0006b84:	e8 5b 39 01 00       	call   c001a4e4 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 65 02 c0       	push   0xc0026540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 80 0f 00 00       	call   c0007b33 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006bbf:	e8 6f 0f 00 00       	call   c0007b33 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 5a 0f 00 00       	call   c0007b33 <malloc>
c0006bd9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 41 0f 00 00       	call   c0007b33 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006c1f:	e8 1f 0f 00 00       	call   c0007b43 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 11 0f 00 00       	call   c0007b43 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 f7 0e 00 00       	call   c0007b43 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 e2 0e 00 00       	call   c0007b43 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	83 ec 0c             	sub    esp,0xc
c0006c8a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0006c8e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006c92:	68 ef 0b 02 c0       	push   0xc0020bef
c0006c97:	e8 ce 3c 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0006c9c:	e8 c1 a1 00 00       	call   c0010e62 <KeExecuteAtexit()>
c0006ca1:	c7 04 24 fd 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bfd
c0006ca8:	e8 bd 3c 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0006cad:	8b 93 68 01 00 00    	mov    edx,DWORD PTR [ebx+0x168]
c0006cb3:	58                   	pop    eax
c0006cb4:	52                   	push   edx
c0006cb5:	e8 64 5e 00 00       	call   c000cb1e <Device::closeAll()>
c0006cba:	fa                   	cli    
c0006cbb:	c7 04 24 0a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c0a
c0006cc2:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0006cc8:	83 c1 01             	add    ecx,0x1
c0006ccb:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0006cd1:	e8 94 3c 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0006cd6:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006cdc:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cde:	57                   	push   edi
c0006cdf:	68 0f 27 00 00       	push   0x270f
c0006ce4:	56                   	push   esi
c0006ce5:	50                   	push   eax
c0006ce6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006ce9:	83 c4 14             	add    esp,0x14
c0006cec:	57                   	push   edi
c0006ced:	68 0f 27 00 00       	push   0x270f
c0006cf2:	56                   	push   esi
c0006cf3:	50                   	push   eax
c0006cf4:	89 c3                	mov    ebx,eax
c0006cf6:	68 44 0d 02 c0       	push   0xc0020d44
c0006cfb:	e8 6a 3c 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0006d00:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0006d05:	83 c4 20             	add    esp,0x20
c0006d08:	8d 50 ff             	lea    edx,[eax-0x1]
c0006d0b:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0006d11:	85 d2                	test   edx,edx
c0006d13:	75 01                	jne    c0006d16 <Computer::close(int, int, void*)+0x96>
c0006d15:	fb                   	sti    
c0006d16:	83 ec 0c             	sub    esp,0xc
c0006d19:	68 19 0c 02 c0       	push   0xc0020c19
c0006d1e:	e8 1c a9 00 00       	call   c001163f <KePanic(char const*)>
c0006d23:	83 c4 10             	add    esp,0x10
c0006d26:	89 d8                	mov    eax,ebx
c0006d28:	5b                   	pop    ebx
c0006d29:	5e                   	pop    esi
c0006d2a:	5f                   	pop    edi
c0006d2b:	c3                   	ret    

c0006d2c <Krnl::firstTask()>:
c0006d2c:	53                   	push   ebx
c0006d2d:	83 ec 14             	sub    esp,0x14
c0006d30:	fb                   	sti    
c0006d31:	68 2f 0c 02 c0       	push   0xc0020c2f
c0006d36:	e8 06 a2 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c0006d3b:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006d42:	e8 ec 0d 00 00       	call   c0007b33 <malloc>
c0006d47:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006d4e:	89 c3                	mov    ebx,eax
c0006d50:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006d55:	50                   	push   eax
c0006d56:	68 48 0c 02 c0       	push   0xc0020c48
c0006d5b:	6a 01                	push   0x1
c0006d5d:	53                   	push   ebx
c0006d5e:	e8 99 ef 00 00       	call   c0015cfc <Process::Process(bool, char const*, Process*, char**)>
c0006d63:	83 c4 20             	add    esp,0x20
c0006d66:	68 ff 00 00 00       	push   0xff
c0006d6b:	6a 00                	push   0x0
c0006d6d:	68 7f 75 00 c0       	push   0xc000757f
c0006d72:	53                   	push   ebx
c0006d73:	e8 a8 f1 00 00       	call   c0015f20 <Process::createThread(void (*)(void*), void*, int)>
c0006d78:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d7e:	6a 7a                	push   0x7a
c0006d80:	6a 00                	push   0x0
c0006d82:	68 e4 69 01 c0       	push   0xc00169e4
c0006d87:	52                   	push   edx
c0006d88:	e8 93 f1 00 00       	call   c0015f20 <Process::createThread(void (*)(void*), void*, int)>
c0006d8d:	83 c4 14             	add    esp,0x14
c0006d90:	68 6c 0d 02 c0       	push   0xc0020d6c
c0006d95:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d9a:	e8 a2 a1 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c0006d9f:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006da6:	e8 4b aa 00 00       	call   c00117f6 <KeInitRand()>
c0006dab:	e8 57 00 01 00       	call   c0016e07 <Vm::initialise8086()>
c0006db0:	e8 97 4a 00 00       	call   c000b84c <Fs::initVFS()>
c0006db5:	c7 04 24 55 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c55
c0006dbc:	e8 80 a1 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c0006dc1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006dc6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006dcc:	8b 10                	mov    edx,DWORD PTR [eax]
c0006dce:	6a 00                	push   0x0
c0006dd0:	6a 00                	push   0x0
c0006dd2:	6a 00                	push   0x0
c0006dd4:	50                   	push   eax
c0006dd5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006dd8:	83 c4 14             	add    esp,0x14
c0006ddb:	68 6c 0d 02 c0       	push   0xc0020d6c
c0006de0:	e8 5c a1 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c0006de5:	e8 fc 41 00 00       	call   c000afe6 <KeInitialiseSymlinks()>
c0006dea:	e8 b3 a6 00 00       	call   c00114a2 <KeLoadSystemEnv()>
c0006def:	e8 10 a9 00 00       	call   c0011704 <KeSetupPowerManager()>
c0006df4:	83 c4 0c             	add    esp,0xc
c0006df7:	6a 3a                	push   0x3a
c0006df9:	68 6f 0c 02 c0       	push   0xc0020c6f
c0006dfe:	68 78 0c 02 c0       	push   0xc0020c78
c0006e03:	e8 b2 d0 00 00       	call   c0013eba <Reg::readIntWithDefault(char*, char*, int)>
c0006e08:	89 04 24             	mov    DWORD PTR [esp],eax
c0006e0b:	e8 68 56 00 00       	call   c000c478 <User::loadClockSettings(int)>
c0006e10:	c7 04 24 90 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d90
c0006e17:	e8 25 a1 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c0006e1c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006e21:	59                   	pop    ecx
c0006e22:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006e28:	53                   	push   ebx
c0006e29:	e8 ee 5c 00 00       	call   c000cb1c <Device::loadDriversForAll()>
c0006e2e:	c7 04 24 80 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c80
c0006e35:	e8 07 a1 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c0006e3a:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006e40:	58                   	pop    eax
c0006e41:	5a                   	pop    edx
c0006e42:	6a 01                	push   0x1
c0006e44:	68 91 0c 02 c0       	push   0xc0020c91
c0006e49:	e8 b5 e8 00 00       	call   c0015703 <Thr::loadDLL(char const*, bool)>
c0006e4e:	59                   	pop    ecx
c0006e4f:	5a                   	pop    edx
c0006e50:	53                   	push   ebx
c0006e51:	50                   	push   eax
c0006e52:	e8 ec ea 00 00       	call   c0015943 <Thr::executeDLL(unsigned long, void*)>
c0006e57:	83 c4 10             	add    esp,0x10
c0006e5a:	83 ec 0c             	sub    esp,0xc
c0006e5d:	6a 02                	push   0x2
c0006e5f:	e8 08 f5 00 00       	call   c001636c <blockTask(TaskState)>
c0006e64:	83 c4 10             	add    esp,0x10
c0006e67:	eb f1                	jmp    c0006e5a <Krnl::firstTask()+0x12e>
c0006e69:	90                   	nop

c0006e6a <Computer::Computer()>:
c0006e6a:	83 ec 0c             	sub    esp,0xc
c0006e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e71:	83 ec 08             	sub    esp,0x8
c0006e74:	68 ad 0c 02 c0       	push   0xc0020cad
c0006e79:	50                   	push   eax
c0006e7a:	e8 19 5d 00 00       	call   c000cb98 <Device::Device(char const*)>
c0006e7f:	83 c4 10             	add    esp,0x10
c0006e82:	ba dc 0d 02 c0       	mov    edx,0xc0020ddc
c0006e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8b:	89 10                	mov    DWORD PTR [eax],edx
c0006e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e91:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ead:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006eb3:	83 ca 04             	or     edx,0x4
c0006eb6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ec0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ec6:	0f b6 d0             	movzx  edx,al
c0006ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ecd:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ede:	0f b6 d0             	movzx  edx,al
c0006ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ee5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ef4:	8d 50 01             	lea    edx,[eax+0x1]
c0006ef7:	88 d1                	mov    cl,dl
c0006ef9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006efd:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006f03:	0f b6 d0             	movzx  edx,al
c0006f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f0a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006f0e:	83 e1 3f             	and    ecx,0x3f
c0006f11:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006f15:	90                   	nop
c0006f16:	83 c4 0c             	add    esp,0xc
c0006f19:	c3                   	ret    

c0006f1a <Computer::setBootMessage(char const*)>:
c0006f1a:	c3                   	ret    
c0006f1b:	90                   	nop

c0006f1c <Computer::detectFeatures()>:
c0006f1c:	55                   	push   ebp
c0006f1d:	57                   	push   edi
c0006f1e:	56                   	push   esi
c0006f1f:	53                   	push   ebx
c0006f20:	83 ec 1c             	sub    esp,0x1c
c0006f23:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f27:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006f2d:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006f33:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006f39:	e8 bb 92 ff ff       	call   c00001f9 <detectCPUID>
c0006f3e:	31 d2                	xor    edx,edx
c0006f40:	85 c0                	test   eax,eax
c0006f42:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f48:	0f 95 c2             	setne  dl
c0006f4b:	d1 e2                	shl    edx,1
c0006f4d:	83 e0 fd             	and    eax,0xfffffffd
c0006f50:	09 d0                	or     eax,edx
c0006f52:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f58:	a8 02                	test   al,0x2
c0006f5a:	75 51                	jne    c0006fad <Computer::detectFeatures()+0x91>
c0006f5c:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f63:	74 0f                	je     c0006f74 <Computer::detectFeatures()+0x58>
c0006f65:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f6b:	83 e0 fb             	and    eax,0xfffffffb
c0006f6e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f74:	e8 7d 85 01 00       	call   c001f4f6 <x87Detect>
c0006f79:	83 e0 01             	and    eax,0x1
c0006f7c:	c1 e0 04             	shl    eax,0x4
c0006f7f:	89 c2                	mov    edx,eax
c0006f81:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f87:	83 e0 ef             	and    eax,0xffffffef
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f92:	a8 10                	test   al,0x10
c0006f94:	88 c2                	mov    dl,al
c0006f96:	0f 85 33 01 00 00    	jne    c00070cf <Computer::detectFeatures()+0x1b3>
c0006f9c:	80 e2 80             	and    dl,0x80
c0006f9f:	0f 85 4c 01 00 00    	jne    c00070f1 <Computer::detectFeatures()+0x1d5>
c0006fa5:	83 c4 1c             	add    esp,0x1c
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	5f                   	pop    edi
c0006fab:	5d                   	pop    ebp
c0006fac:	c3                   	ret    
c0006fad:	83 ec 0c             	sub    esp,0xc
c0006fb0:	6a 20                	push   0x20
c0006fb2:	e8 c3 93 00 00       	call   c001037a <CPU::cpuidCheckEDX(unsigned int)>
c0006fb7:	83 e0 01             	and    eax,0x1
c0006fba:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006fc1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fc7:	83 e0 f7             	and    eax,0xfffffff7
c0006fca:	09 d0                	or     eax,edx
c0006fcc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd2:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006fd9:	e8 9c 93 00 00       	call   c001037a <CPU::cpuidCheckEDX(unsigned int)>
c0006fde:	89 c2                	mov    edx,eax
c0006fe0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fe6:	83 e2 01             	and    edx,0x1
c0006fe9:	83 e0 fe             	and    eax,0xfffffffe
c0006fec:	09 d0                	or     eax,edx
c0006fee:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ff4:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006ffb:	e8 7a 93 00 00       	call   c001037a <CPU::cpuidCheckEDX(unsigned int)>
c0007000:	89 c2                	mov    edx,eax
c0007002:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007008:	c1 e2 07             	shl    edx,0x7
c000700b:	83 e0 7f             	and    eax,0x7f
c000700e:	09 d0                	or     eax,edx
c0007010:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007016:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000701d:	e8 58 93 00 00       	call   c001037a <CPU::cpuidCheckEDX(unsigned int)>
c0007022:	83 c4 10             	add    esp,0x10
c0007025:	83 e0 01             	and    eax,0x1
c0007028:	c1 e0 05             	shl    eax,0x5
c000702b:	89 c2                	mov    edx,eax
c000702d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007033:	83 e0 df             	and    eax,0xffffffdf
c0007036:	09 d0                	or     eax,edx
c0007038:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0007042:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007048:	0f 84 c9 00 00 00    	je     c0007117 <Computer::detectFeatures()+0x1fb>
c000704e:	83 e0 fe             	and    eax,0xfffffffe
c0007051:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007057:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000705d:	89 c2                	mov    edx,eax
c000705f:	83 e2 09             	and    edx,0x9
c0007062:	83 fa 01             	cmp    edx,0x1
c0007065:	75 09                	jne    c0007070 <Computer::detectFeatures()+0x154>
c0007067:	83 e0 fe             	and    eax,0xfffffffe
c000706a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007070:	83 ec 0c             	sub    esp,0xc
c0007073:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007077:	50                   	push   eax
c0007078:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000707c:	55                   	push   ebp
c000707d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007081:	57                   	push   edi
c0007082:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007086:	56                   	push   esi
c0007087:	68 00 00 00 80       	push   0x80000000
c000708c:	e8 65 92 00 00       	call   c00102f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007091:	83 c4 20             	add    esp,0x20
c0007094:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000709b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000709f:	0f 86 b7 fe ff ff    	jbe    c0006f5c <Computer::detectFeatures()+0x40>
c00070a5:	83 ec 0c             	sub    esp,0xc
c00070a8:	50                   	push   eax
c00070a9:	55                   	push   ebp
c00070aa:	57                   	push   edi
c00070ab:	56                   	push   esi
c00070ac:	68 01 00 00 80       	push   0x80000001
c00070b1:	e8 40 92 00 00       	call   c00102f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00070b6:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00070bc:	83 c4 20             	add    esp,0x20
c00070bf:	25 bf ff fc ff       	and    eax,0xfffcffbf
c00070c4:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00070ca:	e9 8d fe ff ff       	jmp    c0006f5c <Computer::detectFeatures()+0x40>
c00070cf:	e8 dc 83 01 00       	call   c001f4b0 <absolutelyNoChanceInHell>
c00070d4:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c00070da:	83 e2 7f             	and    edx,0x7f
c00070dd:	c1 e0 07             	shl    eax,0x7
c00070e0:	09 c2                	or     edx,eax
c00070e2:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c00070e8:	80 e2 80             	and    dl,0x80
c00070eb:	0f 84 b4 fe ff ff    	je     c0006fa5 <Computer::detectFeatures()+0x89>
c00070f1:	e8 2a 80 01 00       	call   c001f120 <avxDetect>
c00070f6:	83 e0 01             	and    eax,0x1
c00070f9:	c1 e0 05             	shl    eax,0x5
c00070fc:	89 c2                	mov    edx,eax
c00070fe:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007104:	83 e0 df             	and    eax,0xffffffdf
c0007107:	09 d0                	or     eax,edx
c0007109:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000710f:	83 c4 1c             	add    esp,0x1c
c0007112:	5b                   	pop    ebx
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	5d                   	pop    ebp
c0007116:	c3                   	ret    
c0007117:	83 ec 0c             	sub    esp,0xc
c000711a:	68 00 02 00 00       	push   0x200
c000711f:	e8 56 92 00 00       	call   c001037a <CPU::cpuidCheckEDX(unsigned int)>
c0007124:	83 c4 10             	add    esp,0x10
c0007127:	89 c2                	mov    edx,eax
c0007129:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000712f:	83 e2 01             	and    edx,0x1
c0007132:	83 e0 fe             	and    eax,0xfffffffe
c0007135:	09 d0                	or     eax,edx
c0007137:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000713d:	e9 15 ff ff ff       	jmp    c0007057 <Computer::detectFeatures()+0x13b>

c0007142 <Computer::displayFeatures()>:
c0007142:	c3                   	ret    
c0007143:	90                   	nop

c0007144 <Computer::rdmsr(unsigned int)>:
c0007144:	83 ec 0c             	sub    esp,0xc
c0007147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000714b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007152:	74 0a                	je     c000715e <Computer::rdmsr(unsigned int)+0x1a>
c0007154:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007158:	0f 32                	rdmsr  
c000715a:	83 c4 0c             	add    esp,0xc
c000715d:	c3                   	ret    
c000715e:	83 ec 0c             	sub    esp,0xc
c0007161:	68 b6 0c 02 c0       	push   0xc0020cb6
c0007166:	e8 d4 a4 00 00       	call   c001163f <KePanic(char const*)>
c000716b:	83 c4 10             	add    esp,0x10
c000716e:	eb e4                	jmp    c0007154 <Computer::rdmsr(unsigned int)+0x10>

c0007170 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007170:	57                   	push   edi
c0007171:	56                   	push   esi
c0007172:	83 ec 04             	sub    esp,0x4
c0007175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007179:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000717d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007181:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007188:	74 10                	je     c000719a <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c000718a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000718e:	89 f0                	mov    eax,esi
c0007190:	89 fa                	mov    edx,edi
c0007192:	0f 30                	wrmsr  
c0007194:	83 c4 04             	add    esp,0x4
c0007197:	5e                   	pop    esi
c0007198:	5f                   	pop    edi
c0007199:	c3                   	ret    
c000719a:	83 ec 0c             	sub    esp,0xc
c000719d:	68 bc 0c 02 c0       	push   0xc0020cbc
c00071a2:	e8 98 a4 00 00       	call   c001163f <KePanic(char const*)>
c00071a7:	83 c4 10             	add    esp,0x10
c00071aa:	eb de                	jmp    c000718a <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c00071ac <Computer::shutdown()>:
c00071ac:	83 ec 0c             	sub    esp,0xc
c00071af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00071b5:	6a 00                	push   0x0
c00071b7:	6a 00                	push   0x0
c00071b9:	6a 00                	push   0x0
c00071bb:	50                   	push   eax
c00071bc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00071bf:	83 c4 1c             	add    esp,0x1c
c00071c2:	c3                   	ret    
c00071c3:	90                   	nop

c00071c4 <Computer::restart()>:
c00071c4:	83 ec 0c             	sub    esp,0xc
c00071c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00071cd:	6a 00                	push   0x0
c00071cf:	6a 00                	push   0x0
c00071d1:	6a 01                	push   0x1
c00071d3:	50                   	push   eax
c00071d4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00071d7:	83 c4 1c             	add    esp,0x1c
c00071da:	c3                   	ret    
c00071db:	90                   	nop

c00071dc <Computer::sleep()>:
c00071dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071e0:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00071e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00071ea:	e9 5d 8c 00 00       	jmp    c000fe4c <ACPI::sleep()>
c00071ef:	90                   	nop

c00071f0 <Computer::nmiEnabled()>:
c00071f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071f4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c00071fa:	c3                   	ret    
c00071fb:	90                   	nop

c00071fc <Computer::readCMOS(unsigned char)>:
c00071fc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007200:	31 d2                	xor    edx,edx
c0007202:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007206:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c000720d:	75 02                	jne    c0007211 <Computer::readCMOS(unsigned char)+0x15>
c000720f:	b2 80                	mov    dl,0x80
c0007211:	09 d0                	or     eax,edx
c0007213:	e6 70                	out    0x70,al
c0007215:	e4 71                	in     al,0x71
c0007217:	c3                   	ret    

c0007218 <Computer::enableNMI(bool)>:
c0007218:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000721c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007220:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0007226:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000722e:	eb cc                	jmp    c00071fc <Computer::readCMOS(unsigned char)>

c0007230 <Computer::open(int, int, void*)>:
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	83 ec 10             	sub    esp,0x10
c0007235:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c000723c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007240:	68 c2 0c 02 c0       	push   0xc0020cc2
c0007245:	0f 94 05 00 38 02 c0 	sete   BYTE PTR ds:0xc0023800
c000724c:	e8 f0 9c 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c0007251:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0007258:	e8 d6 08 00 00       	call   c0007b33 <malloc>
c000725d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007260:	89 c6                	mov    esi,eax
c0007262:	e8 59 87 00 00       	call   c000f9c0 <ACPI::ACPI()>
c0007267:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000726d:	58                   	pop    eax
c000726e:	5a                   	pop    edx
c000726f:	56                   	push   esi
c0007270:	53                   	push   ebx
c0007271:	e8 8a 57 00 00       	call   c000ca00 <Device::addChild(Device*)>
c0007276:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007279:	e8 9e fc ff ff       	call   c0006f1c <Computer::detectFeatures()>
c000727e:	59                   	pop    ecx
c000727f:	5e                   	pop    esi
c0007280:	6a 01                	push   0x1
c0007282:	53                   	push   ebx
c0007283:	e8 90 ff ff ff       	call   c0007218 <Computer::enableNMI(bool)>
c0007288:	c7 04 24 da 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cda
c000728f:	e8 ad 9c 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c0007294:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000729b:	e8 93 08 00 00       	call   c0007b33 <malloc>
c00072a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00072a3:	89 c6                	mov    esi,eax
c00072a5:	e8 88 91 00 00       	call   c0010432 <CPU::CPU()>
c00072aa:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00072b0:	58                   	pop    eax
c00072b1:	5a                   	pop    edx
c00072b2:	56                   	push   esi
c00072b3:	53                   	push   ebx
c00072b4:	e8 47 57 00 00       	call   c000ca00 <Device::addChild(Device*)>
c00072b9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00072bf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00072c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00072c5:	51                   	push   ecx
c00072c6:	6a 00                	push   0x0
c00072c8:	6a 00                	push   0x0
c00072ca:	50                   	push   eax
c00072cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00072ce:	83 c4 14             	add    esp,0x14
c00072d1:	68 b0 0d 02 c0       	push   0xc0020db0
c00072d6:	e8 66 9c 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c00072db:	e8 6e 0d 01 00       	call   c001804e <HalInitialiseCoprocessor()>
c00072e0:	c7 04 24 f4 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cf4
c00072e7:	e8 55 9c 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c00072ec:	c7 04 24 2c 6d 00 c0 	mov    DWORD PTR [esp],0xc0006d2c
c00072f3:	e8 50 ed 00 00       	call   c0016048 <setupMultitasking(void (*)())>
c00072f8:	83 c4 14             	add    esp,0x14
c00072fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007300:	5b                   	pop    ebx
c0007301:	5e                   	pop    esi
c0007302:	c3                   	ret    
c0007303:	90                   	nop

c0007304 <Computer::disableNMI()>:
c0007304:	6a 00                	push   0x0
c0007306:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000730a:	50                   	push   eax
c000730b:	e8 08 ff ff ff       	call   c0007218 <Computer::enableNMI(bool)>
c0007310:	5a                   	pop    edx
c0007311:	59                   	pop    ecx
c0007312:	c3                   	ret    
c0007313:	90                   	nop

c0007314 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007314:	53                   	push   ebx
c0007315:	b2 80                	mov    dl,0x80
c0007317:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000731b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000731f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007323:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c000732a:	74 02                	je     c000732e <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c000732c:	31 d2                	xor    edx,edx
c000732e:	09 d0                	or     eax,edx
c0007330:	e6 70                	out    0x70,al
c0007332:	88 c8                	mov    al,cl
c0007334:	e6 71                	out    0x71,al
c0007336:	5b                   	pop    ebx
c0007337:	c3                   	ret    

c0007338 <Computer::handleNMI()>:
c0007338:	56                   	push   esi
c0007339:	53                   	push   ebx
c000733a:	83 ec 10             	sub    esp,0x10
c000733d:	e4 92                	in     al,0x92
c000733f:	89 c6                	mov    esi,eax
c0007341:	e4 61                	in     al,0x61
c0007343:	68 0f 0d 02 c0       	push   0xc0020d0f
c0007348:	88 c3                	mov    bl,al
c000734a:	e8 1b 36 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000734f:	83 c4 10             	add    esp,0x10
c0007352:	83 e6 10             	and    esi,0x10
c0007355:	75 10                	jne    c0007367 <Computer::handleNMI()+0x2f>
c0007357:	f6 c3 40             	test   bl,0x40
c000735a:	75 20                	jne    c000737c <Computer::handleNMI()+0x44>
c000735c:	80 e3 80             	and    bl,0x80
c000735f:	75 30                	jne    c0007391 <Computer::handleNMI()+0x59>
c0007361:	83 c4 04             	add    esp,0x4
c0007364:	5b                   	pop    ebx
c0007365:	5e                   	pop    esi
c0007366:	c3                   	ret    
c0007367:	83 ec 0c             	sub    esp,0xc
c000736a:	68 20 0d 02 c0       	push   0xc0020d20
c000736f:	e8 cb a2 00 00       	call   c001163f <KePanic(char const*)>
c0007374:	83 c4 10             	add    esp,0x10
c0007377:	f6 c3 40             	test   bl,0x40
c000737a:	74 e0                	je     c000735c <Computer::handleNMI()+0x24>
c000737c:	83 ec 0c             	sub    esp,0xc
c000737f:	68 2d 0d 02 c0       	push   0xc0020d2d
c0007384:	e8 b6 a2 00 00       	call   c001163f <KePanic(char const*)>
c0007389:	83 c4 10             	add    esp,0x10
c000738c:	80 e3 80             	and    bl,0x80
c000738f:	74 d0                	je     c0007361 <Computer::handleNMI()+0x29>
c0007391:	c7 44 24 10 37 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d37
c0007399:	83 c4 04             	add    esp,0x4
c000739c:	5b                   	pop    ebx
c000739d:	5e                   	pop    esi
c000739e:	e9 9c a2 00 00       	jmp    c001163f <KePanic(char const*)>
c00073a3:	90                   	nop

c00073a4 <GDTEntry::setBase(unsigned int)>:
c00073a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073ac:	89 c1                	mov    ecx,eax
c00073ae:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00073b2:	c1 e9 10             	shr    ecx,0x10
c00073b5:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00073b8:	c1 e8 18             	shr    eax,0x18
c00073bb:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00073be:	c3                   	ret    
c00073bf:	90                   	nop

c00073c0 <GDTEntry::setLimit(unsigned int)>:
c00073c0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00073c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073c8:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00073cb:	66 89 01             	mov    WORD PTR [ecx],ax
c00073ce:	c1 e8 10             	shr    eax,0x10
c00073d1:	83 e0 0f             	and    eax,0xf
c00073d4:	83 e2 f0             	and    edx,0xfffffff0
c00073d7:	09 d0                	or     eax,edx
c00073d9:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00073dc:	c3                   	ret    
c00073dd:	90                   	nop

c00073de <GDT::GDT()>:
c00073de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073f2:	90                   	nop
c00073f3:	c3                   	ret    

c00073f4 <GDT::addEntry(GDTEntry)>:
c00073f4:	53                   	push   ebx
c00073f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00073f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007401:	8b 02                	mov    eax,DWORD PTR [edx]
c0007403:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007407:	8d 48 01             	lea    ecx,[eax+0x1]
c000740a:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000740e:	c1 e0 03             	shl    eax,0x3
c0007411:	89 0a                	mov    DWORD PTR [edx],ecx
c0007413:	5b                   	pop    ebx
c0007414:	c3                   	ret    
c0007415:	90                   	nop

c0007416 <GDT::getNumberOfEntries()>:
c0007416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000741a:	8b 00                	mov    eax,DWORD PTR [eax]
c000741c:	c3                   	ret    
c000741d:	90                   	nop

c000741e <GDT::flush()>:
c000741e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007422:	8b 10                	mov    edx,DWORD PTR [eax]
c0007424:	83 c0 04             	add    eax,0x4
c0007427:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c000742c:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007433:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c000743a:	e9 1b 8f ff ff       	jmp    c000035a <loadGDT>
c000743f:	90                   	nop

c0007440 <GDT::setup()>:
c0007440:	57                   	push   edi
c0007441:	56                   	push   esi
c0007442:	53                   	push   ebx
c0007443:	83 ec 30             	sub    esp,0x30
c0007446:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000744a:	6a 00                	push   0x0
c000744c:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007450:	56                   	push   esi
c0007451:	e8 4e ff ff ff       	call   c00073a4 <GDTEntry::setBase(unsigned int)>
c0007456:	6a 00                	push   0x0
c0007458:	56                   	push   esi
c0007459:	e8 62 ff ff ff       	call   c00073c0 <GDTEntry::setLimit(unsigned int)>
c000745e:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007466:	6a 00                	push   0x0
c0007468:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000746c:	56                   	push   esi
c000746d:	e8 32 ff ff ff       	call   c00073a4 <GDTEntry::setBase(unsigned int)>
c0007472:	68 ff ff ff 00       	push   0xffffff
c0007477:	56                   	push   esi
c0007478:	e8 43 ff ff ff       	call   c00073c0 <GDTEntry::setLimit(unsigned int)>
c000747d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007481:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007485:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000748a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000748e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007493:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007497:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000749b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000749f:	89 f8                	mov    eax,edi
c00074a1:	89 fa                	mov    edx,edi
c00074a3:	80 e4 f7             	and    ah,0xf7
c00074a6:	80 ce 60             	or     dh,0x60
c00074a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00074ad:	89 c7                	mov    edi,eax
c00074af:	80 cc 60             	or     ah,0x60
c00074b2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00074b6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00074ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074be:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	83 c4 20             	add    esp,0x20
c00074c9:	6a 00                	push   0x0
c00074cb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00074cf:	50                   	push   eax
c00074d0:	e8 cf fe ff ff       	call   c00073a4 <GDTEntry::setBase(unsigned int)>
c00074d5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00074d9:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00074dd:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c00074e1:	83 e0 3f             	and    eax,0x3f
c00074e4:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c00074e8:	6a 00                	push   0x0
c00074ea:	8d 44 24 34          	lea    eax,[esp+0x34]
c00074ee:	50                   	push   eax
c00074ef:	e8 b0 fe ff ff       	call   c00073a4 <GDTEntry::setBase(unsigned int)>
c00074f4:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c00074f8:	83 e0 3f             	and    eax,0x3f
c00074fb:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c00074ff:	83 c4 0c             	add    esp,0xc
c0007502:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007506:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000750a:	53                   	push   ebx
c000750b:	e8 e4 fe ff ff       	call   c00073f4 <GDT::addEntry(GDTEntry)>
c0007510:	83 c4 0c             	add    esp,0xc
c0007513:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007517:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000751b:	53                   	push   ebx
c000751c:	e8 d3 fe ff ff       	call   c00073f4 <GDT::addEntry(GDTEntry)>
c0007521:	83 c4 0c             	add    esp,0xc
c0007524:	57                   	push   edi
c0007525:	56                   	push   esi
c0007526:	53                   	push   ebx
c0007527:	e8 c8 fe ff ff       	call   c00073f4 <GDT::addEntry(GDTEntry)>
c000752c:	83 c4 0c             	add    esp,0xc
c000752f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007533:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007537:	53                   	push   ebx
c0007538:	e8 b7 fe ff ff       	call   c00073f4 <GDT::addEntry(GDTEntry)>
c000753d:	83 c4 0c             	add    esp,0xc
c0007540:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007544:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007548:	53                   	push   ebx
c0007549:	e8 a6 fe ff ff       	call   c00073f4 <GDT::addEntry(GDTEntry)>
c000754e:	83 c4 0c             	add    esp,0xc
c0007551:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007555:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007559:	53                   	push   ebx
c000755a:	e8 95 fe ff ff       	call   c00073f4 <GDT::addEntry(GDTEntry)>
c000755f:	83 c4 0c             	add    esp,0xc
c0007562:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007566:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000756a:	53                   	push   ebx
c000756b:	e8 84 fe ff ff       	call   c00073f4 <GDT::addEntry(GDTEntry)>
c0007570:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007573:	e8 a6 fe ff ff       	call   c000741e <GDT::flush()>
c0007578:	83 c4 40             	add    esp,0x40
c000757b:	5b                   	pop    ebx
c000757c:	5e                   	pop    esi
c000757d:	5f                   	pop    edi
c000757e:	c3                   	ret    

c000757f <idleFunction(void*)>:
c000757f:	83 ec 0c             	sub    esp,0xc
c0007582:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007587:	48                   	dec    eax
c0007588:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000758d:	75 01                	jne    c0007590 <idleFunction(void*)+0x11>
c000758f:	fb                   	sti    
c0007590:	e8 85 07 01 00       	call   c0017d1a <HalSystemIdle()>
c0007595:	e8 18 85 01 00       	call   c001fab2 <idleCommon()>
c000759a:	eb f4                	jmp    c0007590 <idleFunction(void*)+0x11>

c000759c <IDTEntry::IDTEntry(bool)>:
c000759c:	53                   	push   ebx
c000759d:	83 ec 04             	sub    esp,0x4
c00075a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075a4:	88 04 24             	mov    BYTE PTR [esp],al
c00075a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075ab:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00075b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075b5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00075b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075bd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075c0:	83 e2 f0             	and    edx,0xfffffff0
c00075c3:	83 ca 0e             	or     edx,0xe
c00075c6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075cd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075d0:	83 e2 ef             	and    edx,0xffffffef
c00075d3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075d6:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c00075da:	85 c0                	test   eax,eax
c00075dc:	74 06                	je     c00075e4 <IDTEntry::IDTEntry(bool)+0x48>
c00075de:	b2 03                	mov    dl,0x3
c00075e0:	eb 06                	jmp    c00075e8 <IDTEntry::IDTEntry(bool)+0x4c>
c00075e2:	66 90                	xchg   ax,ax
c00075e4:	b2 00                	mov    dl,0x0
c00075e6:	66 90                	xchg   ax,ax
c00075e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075ec:	83 e2 03             	and    edx,0x3
c00075ef:	89 d3                	mov    ebx,edx
c00075f1:	c1 e3 05             	shl    ebx,0x5
c00075f4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075f7:	83 e2 9f             	and    edx,0xffffff9f
c00075fa:	88 d1                	mov    cl,dl
c00075fc:	88 da                	mov    dl,bl
c00075fe:	09 ca                	or     edx,ecx
c0007600:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007603:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007607:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000760a:	83 ca 80             	or     edx,0xffffff80
c000760d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007610:	90                   	nop
c0007611:	83 c4 04             	add    esp,0x4
c0007614:	5b                   	pop    ebx
c0007615:	c3                   	ret    

c0007616 <IDTEntry::setOffset(unsigned int)>:
c0007616:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000761a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000761e:	66 89 02             	mov    WORD PTR [edx],ax
c0007621:	c1 e8 10             	shr    eax,0x10
c0007624:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007628:	c3                   	ret    
c0007629:	90                   	nop
c000762a:	66 90                	xchg   ax,ax

c000762c <IDT::IDT()>:
c000762c:	90                   	nop
c000762d:	c3                   	ret    

c000762e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000762e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007632:	83 c0 30             	add    eax,0x30
c0007635:	c3                   	ret    

c0007636 <IDT::addEntry(IDTEntry, int)>:
c0007636:	53                   	push   ebx
c0007637:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000763f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007643:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007647:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000764a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000764e:	5b                   	pop    ebx
c000764f:	c3                   	ret    

c0007650 <IDT::addEntry(int, void (*)(), bool)>:
c0007650:	53                   	push   ebx
c0007651:	83 ec 10             	sub    esp,0x10
c0007654:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007659:	50                   	push   eax
c000765a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000765e:	53                   	push   ebx
c000765f:	e8 38 ff ff ff       	call   c000759c <IDTEntry::IDTEntry(bool)>
c0007664:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007668:	53                   	push   ebx
c0007669:	e8 a8 ff ff ff       	call   c0007616 <IDTEntry::setOffset(unsigned int)>
c000766e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007672:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007676:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000767a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000767e:	e8 b3 ff ff ff       	call   c0007636 <IDT::addEntry(IDTEntry, int)>
c0007683:	83 c4 30             	add    esp,0x30
c0007686:	5b                   	pop    ebx
c0007687:	c3                   	ret    

c0007688 <IDT::flush()>:
c0007688:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007695:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000769a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c00076a1:	c3                   	ret    

c00076a2 <IDT::setup()>:
c00076a2:	57                   	push   edi
c00076a3:	56                   	push   esi
c00076a4:	53                   	push   ebx
c00076a5:	83 ec 10             	sub    esp,0x10
c00076a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00076ac:	6a 00                	push   0x0
c00076ae:	68 b0 f1 01 c0       	push   0xc001f1b0
c00076b3:	6a 00                	push   0x0
c00076b5:	53                   	push   ebx
c00076b6:	e8 95 ff ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00076bb:	6a 00                	push   0x0
c00076bd:	68 c0 f1 01 c0       	push   0xc001f1c0
c00076c2:	6a 01                	push   0x1
c00076c4:	53                   	push   ebx
c00076c5:	e8 86 ff ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00076ca:	83 c4 20             	add    esp,0x20
c00076cd:	6a 00                	push   0x0
c00076cf:	68 ca f1 01 c0       	push   0xc001f1ca
c00076d4:	6a 02                	push   0x2
c00076d6:	53                   	push   ebx
c00076d7:	e8 74 ff ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00076dc:	6a 00                	push   0x0
c00076de:	68 d4 f1 01 c0       	push   0xc001f1d4
c00076e3:	6a 03                	push   0x3
c00076e5:	53                   	push   ebx
c00076e6:	e8 65 ff ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00076eb:	83 c4 20             	add    esp,0x20
c00076ee:	6a 00                	push   0x0
c00076f0:	68 de f1 01 c0       	push   0xc001f1de
c00076f5:	6a 04                	push   0x4
c00076f7:	53                   	push   ebx
c00076f8:	e8 53 ff ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00076fd:	6a 00                	push   0x0
c00076ff:	68 e8 f1 01 c0       	push   0xc001f1e8
c0007704:	6a 05                	push   0x5
c0007706:	53                   	push   ebx
c0007707:	e8 44 ff ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c000770c:	83 c4 20             	add    esp,0x20
c000770f:	6a 00                	push   0x0
c0007711:	68 f2 f1 01 c0       	push   0xc001f1f2
c0007716:	6a 06                	push   0x6
c0007718:	53                   	push   ebx
c0007719:	e8 32 ff ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c000771e:	6a 00                	push   0x0
c0007720:	68 fc f1 01 c0       	push   0xc001f1fc
c0007725:	6a 07                	push   0x7
c0007727:	53                   	push   ebx
c0007728:	e8 23 ff ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c000772d:	83 c4 20             	add    esp,0x20
c0007730:	6a 00                	push   0x0
c0007732:	68 06 f2 01 c0       	push   0xc001f206
c0007737:	6a 08                	push   0x8
c0007739:	53                   	push   ebx
c000773a:	e8 11 ff ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c000773f:	6a 00                	push   0x0
c0007741:	68 0e f2 01 c0       	push   0xc001f20e
c0007746:	6a 09                	push   0x9
c0007748:	53                   	push   ebx
c0007749:	e8 02 ff ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c000774e:	83 c4 20             	add    esp,0x20
c0007751:	6a 00                	push   0x0
c0007753:	68 18 f2 01 c0       	push   0xc001f218
c0007758:	6a 0a                	push   0xa
c000775a:	53                   	push   ebx
c000775b:	e8 f0 fe ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c0007760:	6a 00                	push   0x0
c0007762:	68 20 f2 01 c0       	push   0xc001f220
c0007767:	6a 0b                	push   0xb
c0007769:	53                   	push   ebx
c000776a:	e8 e1 fe ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c000776f:	83 c4 20             	add    esp,0x20
c0007772:	6a 00                	push   0x0
c0007774:	68 28 f2 01 c0       	push   0xc001f228
c0007779:	6a 0c                	push   0xc
c000777b:	53                   	push   ebx
c000777c:	e8 cf fe ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c0007781:	6a 00                	push   0x0
c0007783:	68 30 f2 01 c0       	push   0xc001f230
c0007788:	6a 0d                	push   0xd
c000778a:	53                   	push   ebx
c000778b:	e8 c0 fe ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c0007790:	83 c4 20             	add    esp,0x20
c0007793:	6a 00                	push   0x0
c0007795:	68 4a f2 01 c0       	push   0xc001f24a
c000779a:	6a 0e                	push   0xe
c000779c:	53                   	push   ebx
c000779d:	e8 ae fe ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00077a2:	6a 00                	push   0x0
c00077a4:	68 52 f2 01 c0       	push   0xc001f252
c00077a9:	6a 0f                	push   0xf
c00077ab:	53                   	push   ebx
c00077ac:	e8 9f fe ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00077b1:	83 c4 20             	add    esp,0x20
c00077b4:	6a 00                	push   0x0
c00077b6:	68 5c f2 01 c0       	push   0xc001f25c
c00077bb:	6a 10                	push   0x10
c00077bd:	53                   	push   ebx
c00077be:	e8 8d fe ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00077c3:	6a 00                	push   0x0
c00077c5:	68 66 f2 01 c0       	push   0xc001f266
c00077ca:	6a 11                	push   0x11
c00077cc:	53                   	push   ebx
c00077cd:	e8 7e fe ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00077d2:	83 c4 20             	add    esp,0x20
c00077d5:	6a 00                	push   0x0
c00077d7:	68 70 f2 01 c0       	push   0xc001f270
c00077dc:	6a 12                	push   0x12
c00077de:	53                   	push   ebx
c00077df:	e8 6c fe ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00077e4:	6a 01                	push   0x1
c00077e6:	68 0a f3 01 c0       	push   0xc001f30a
c00077eb:	6a 60                	push   0x60
c00077ed:	53                   	push   ebx
c00077ee:	e8 5d fe ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00077f3:	83 c4 20             	add    esp,0x20
c00077f6:	6a 00                	push   0x0
c00077f8:	68 11 f3 01 c0       	push   0xc001f311
c00077fd:	6a 20                	push   0x20
c00077ff:	53                   	push   ebx
c0007800:	e8 4b fe ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c0007805:	6a 00                	push   0x0
c0007807:	68 fc f2 01 c0       	push   0xc001f2fc
c000780c:	6a 21                	push   0x21
c000780e:	53                   	push   ebx
c000780f:	e8 3c fe ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c0007814:	83 c4 20             	add    esp,0x20
c0007817:	6a 00                	push   0x0
c0007819:	68 03 f3 01 c0       	push   0xc001f303
c000781e:	6a 22                	push   0x22
c0007820:	53                   	push   ebx
c0007821:	e8 2a fe ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c0007826:	6a 00                	push   0x0
c0007828:	68 7a f2 01 c0       	push   0xc001f27a
c000782d:	6a 23                	push   0x23
c000782f:	53                   	push   ebx
c0007830:	e8 1b fe ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c0007835:	83 c4 20             	add    esp,0x20
c0007838:	6a 00                	push   0x0
c000783a:	68 84 f2 01 c0       	push   0xc001f284
c000783f:	6a 24                	push   0x24
c0007841:	53                   	push   ebx
c0007842:	e8 09 fe ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c0007847:	6a 00                	push   0x0
c0007849:	68 8e f2 01 c0       	push   0xc001f28e
c000784e:	6a 25                	push   0x25
c0007850:	53                   	push   ebx
c0007851:	e8 fa fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c0007856:	83 c4 20             	add    esp,0x20
c0007859:	6a 00                	push   0x0
c000785b:	68 98 f2 01 c0       	push   0xc001f298
c0007860:	6a 26                	push   0x26
c0007862:	53                   	push   ebx
c0007863:	e8 e8 fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c0007868:	6a 00                	push   0x0
c000786a:	68 a2 f2 01 c0       	push   0xc001f2a2
c000786f:	6a 27                	push   0x27
c0007871:	53                   	push   ebx
c0007872:	e8 d9 fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c0007877:	83 c4 20             	add    esp,0x20
c000787a:	6a 00                	push   0x0
c000787c:	68 ac f2 01 c0       	push   0xc001f2ac
c0007881:	6a 28                	push   0x28
c0007883:	53                   	push   ebx
c0007884:	e8 c7 fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c0007889:	6a 00                	push   0x0
c000788b:	68 b6 f2 01 c0       	push   0xc001f2b6
c0007890:	6a 29                	push   0x29
c0007892:	53                   	push   ebx
c0007893:	e8 b8 fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c0007898:	83 c4 20             	add    esp,0x20
c000789b:	6a 00                	push   0x0
c000789d:	68 c0 f2 01 c0       	push   0xc001f2c0
c00078a2:	6a 2a                	push   0x2a
c00078a4:	53                   	push   ebx
c00078a5:	e8 a6 fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00078aa:	6a 00                	push   0x0
c00078ac:	68 ca f2 01 c0       	push   0xc001f2ca
c00078b1:	6a 2b                	push   0x2b
c00078b3:	53                   	push   ebx
c00078b4:	e8 97 fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00078b9:	83 c4 20             	add    esp,0x20
c00078bc:	6a 00                	push   0x0
c00078be:	68 d4 f2 01 c0       	push   0xc001f2d4
c00078c3:	6a 2c                	push   0x2c
c00078c5:	53                   	push   ebx
c00078c6:	e8 85 fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00078cb:	6a 00                	push   0x0
c00078cd:	68 de f2 01 c0       	push   0xc001f2de
c00078d2:	6a 2d                	push   0x2d
c00078d4:	53                   	push   ebx
c00078d5:	e8 76 fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00078da:	83 c4 20             	add    esp,0x20
c00078dd:	6a 00                	push   0x0
c00078df:	68 e8 f2 01 c0       	push   0xc001f2e8
c00078e4:	6a 2e                	push   0x2e
c00078e6:	53                   	push   ebx
c00078e7:	e8 64 fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00078ec:	6a 00                	push   0x0
c00078ee:	68 f2 f2 01 c0       	push   0xc001f2f2
c00078f3:	6a 2f                	push   0x2f
c00078f5:	53                   	push   ebx
c00078f6:	e8 55 fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c00078fb:	83 c4 20             	add    esp,0x20
c00078fe:	6a 00                	push   0x0
c0007900:	68 4c f4 01 c0       	push   0xc001f44c
c0007905:	6a 30                	push   0x30
c0007907:	53                   	push   ebx
c0007908:	e8 43 fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c000790d:	6a 00                	push   0x0
c000790f:	68 56 f4 01 c0       	push   0xc001f456
c0007914:	6a 31                	push   0x31
c0007916:	53                   	push   ebx
c0007917:	e8 34 fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c000791c:	83 c4 20             	add    esp,0x20
c000791f:	6a 00                	push   0x0
c0007921:	68 60 f4 01 c0       	push   0xc001f460
c0007926:	6a 32                	push   0x32
c0007928:	53                   	push   ebx
c0007929:	e8 22 fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c000792e:	6a 00                	push   0x0
c0007930:	68 6a f4 01 c0       	push   0xc001f46a
c0007935:	6a 33                	push   0x33
c0007937:	53                   	push   ebx
c0007938:	e8 13 fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c000793d:	83 c4 20             	add    esp,0x20
c0007940:	6a 00                	push   0x0
c0007942:	68 74 f4 01 c0       	push   0xc001f474
c0007947:	6a 34                	push   0x34
c0007949:	53                   	push   ebx
c000794a:	e8 01 fd ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c000794f:	6a 00                	push   0x0
c0007951:	68 7e f4 01 c0       	push   0xc001f47e
c0007956:	6a 35                	push   0x35
c0007958:	53                   	push   ebx
c0007959:	e8 f2 fc ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c000795e:	83 c4 20             	add    esp,0x20
c0007961:	6a 00                	push   0x0
c0007963:	68 88 f4 01 c0       	push   0xc001f488
c0007968:	6a 36                	push   0x36
c000796a:	53                   	push   ebx
c000796b:	e8 e0 fc ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c0007970:	6a 00                	push   0x0
c0007972:	68 92 f4 01 c0       	push   0xc001f492
c0007977:	6a 37                	push   0x37
c0007979:	53                   	push   ebx
c000797a:	e8 d1 fc ff ff       	call   c0007650 <IDT::addEntry(int, void (*)(), bool)>
c000797f:	83 c4 1c             	add    esp,0x1c
c0007982:	6a 03                	push   0x3
c0007984:	6a 02                	push   0x2
c0007986:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000798c:	e8 d5 24 00 00       	call   c0009e66 <VAS::allocatePages(int, int)>
c0007991:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007998:	89 c6                	mov    esi,eax
c000799a:	e8 94 01 00 00       	call   c0007b33 <malloc>
c000799f:	81 c6 00 20 00 00    	add    esi,0x2000
c00079a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a8:	89 c7                	mov    edi,eax
c00079aa:	e8 dd 15 00 00       	call   c0008f8c <TSS::TSS()>
c00079af:	83 c4 0c             	add    esp,0xc
c00079b2:	68 06 f2 01 c0       	push   0xc001f206
c00079b7:	56                   	push   esi
c00079b8:	57                   	push   edi
c00079b9:	e8 12 16 00 00       	call   c0008fd0 <TSS::setup(unsigned long, unsigned long)>
c00079be:	89 c6                	mov    esi,eax
c00079c0:	58                   	pop    eax
c00079c1:	5a                   	pop    edx
c00079c2:	6a 00                	push   0x0
c00079c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00079c8:	50                   	push   eax
c00079c9:	e8 ce fb ff ff       	call   c000759c <IDTEntry::IDTEntry(bool)>
c00079ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079d2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00079d7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00079de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079e2:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00079e8:	80 ce 05             	or     dh,0x5
c00079eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079ef:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00079f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079f6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00079f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00079fc:	e8 87 fc ff ff       	call   c0007688 <IDT::flush()>
c0007a01:	83 c4 20             	add    esp,0x20
c0007a04:	5b                   	pop    ebx
c0007a05:	5e                   	pop    esi
c0007a06:	5f                   	pop    edi
c0007a07:	c3                   	ret    

c0007a08 <sbrk>:
c0007a08:	55                   	push   ebp
c0007a09:	57                   	push   edi
c0007a0a:	56                   	push   esi
c0007a0b:	53                   	push   ebx
c0007a0c:	83 ec 1c             	sub    esp,0x1c
c0007a0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007a13:	85 c0                	test   eax,eax
c0007a15:	74 66                	je     c0007a7d <sbrk+0x75>
c0007a17:	78 6b                	js     c0007a84 <sbrk+0x7c>
c0007a19:	8b 15 e8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237e8
c0007a1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007a23:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c0007a29:	05 ff 0f 00 00       	add    eax,0xfff
c0007a2e:	0f 49 e8             	cmovns ebp,eax
c0007a31:	c1 fd 0c             	sar    ebp,0xc
c0007a34:	bb 00 00 00 00       	mov    ebx,0x0
c0007a39:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c0007a3f:	8b 3d e8 37 02 c0    	mov    edi,DWORD PTR ds:0xc00237e8
c0007a45:	e8 f8 03 00 00       	call   c0007e42 <Phys::allocatePage()>
c0007a4a:	68 01 04 00 00       	push   0x401
c0007a4f:	57                   	push   edi
c0007a50:	50                   	push   eax
c0007a51:	56                   	push   esi
c0007a52:	e8 07 23 00 00       	call   c0009d5e <VAS::mapPage(unsigned long, unsigned long, int)>
c0007a57:	81 05 e8 37 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00237e8,0x1000
c0007a61:	83 c3 01             	add    ebx,0x1
c0007a64:	83 c4 10             	add    esp,0x10
c0007a67:	39 dd                	cmp    ebp,ebx
c0007a69:	75 ce                	jne    c0007a39 <sbrk+0x31>
c0007a6b:	0f 20 d8             	mov    eax,cr3
c0007a6e:	0f 22 d8             	mov    cr3,eax
c0007a71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a75:	83 c4 1c             	add    esp,0x1c
c0007a78:	5b                   	pop    ebx
c0007a79:	5e                   	pop    esi
c0007a7a:	5f                   	pop    edi
c0007a7b:	5d                   	pop    ebp
c0007a7c:	c3                   	ret    
c0007a7d:	a1 e8 37 02 c0       	mov    eax,ds:0xc00237e8
c0007a82:	eb f1                	jmp    c0007a75 <sbrk+0x6d>
c0007a84:	83 ec 08             	sub    esp,0x8
c0007a87:	50                   	push   eax
c0007a88:	68 00 0e 02 c0       	push   0xc0020e00
c0007a8d:	e8 d8 2e 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0007a92:	83 c4 10             	add    esp,0x10
c0007a95:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a9a:	eb d9                	jmp    c0007a75 <sbrk+0x6d>

c0007a9c <mmap>:
c0007a9c:	83 ec 18             	sub    esp,0x18
c0007a9f:	68 30 0e 02 c0       	push   0xc0020e30
c0007aa4:	e8 96 9b 00 00       	call   c001163f <KePanic(char const*)>
c0007aa9:	b8 00 00 00 00       	mov    eax,0x0
c0007aae:	83 c4 1c             	add    esp,0x1c
c0007ab1:	c3                   	ret    

c0007ab2 <munmap>:
c0007ab2:	83 ec 18             	sub    esp,0x18
c0007ab5:	68 35 0e 02 c0       	push   0xc0020e35
c0007aba:	e8 80 9b 00 00       	call   c001163f <KePanic(char const*)>
c0007abf:	b8 00 00 00 00       	mov    eax,0x0
c0007ac4:	83 c4 1c             	add    esp,0x1c
c0007ac7:	c3                   	ret    

c0007ac8 <liballoc_lock()>:
c0007ac8:	fa                   	cli    
c0007ac9:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007ad0:	b8 00 00 00 00       	mov    eax,0x0
c0007ad5:	c3                   	ret    

c0007ad6 <liballoc_unlock()>:
c0007ad6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007adb:	83 e8 01             	sub    eax,0x1
c0007ade:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ae3:	75 01                	jne    c0007ae6 <liballoc_unlock()+0x10>
c0007ae5:	fb                   	sti    
c0007ae6:	b8 00 00 00 00       	mov    eax,0x0
c0007aeb:	c3                   	ret    

c0007aec <liballoc_alloc(int)>:
c0007aec:	83 ec 10             	sub    esp,0x10
c0007aef:	6a 01                	push   0x1
c0007af1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007af5:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007afb:	e8 66 23 00 00       	call   c0009e66 <VAS::allocatePages(int, int)>
c0007b00:	83 c4 1c             	add    esp,0x1c
c0007b03:	c3                   	ret    

c0007b04 <liballoc_free(void*, int)>:
c0007b04:	83 ec 14             	sub    esp,0x14
c0007b07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007b0b:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007b11:	e8 90 1f 00 00       	call   c0009aa6 <VAS::freeAllocatedPages(unsigned long)>
c0007b16:	b8 00 00 00 00       	mov    eax,0x0
c0007b1b:	83 c4 1c             	add    esp,0x1c
c0007b1e:	c3                   	ret    

c0007b1f <realloc>:
c0007b1f:	83 ec 14             	sub    esp,0x14
c0007b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b2a:	e8 f2 9a ff ff       	call   c0001621 <dlrealloc>
c0007b2f:	83 c4 1c             	add    esp,0x1c
c0007b32:	c3                   	ret    

c0007b33 <malloc>:
c0007b33:	83 ec 18             	sub    esp,0x18
c0007b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b3a:	e8 a5 95 ff ff       	call   c00010e4 <dlmalloc>
c0007b3f:	83 c4 1c             	add    esp,0x1c
c0007b42:	c3                   	ret    

c0007b43 <free>:
c0007b43:	83 ec 18             	sub    esp,0x18
c0007b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b4a:	e8 37 92 ff ff       	call   c0000d86 <dlfree>
c0007b4f:	83 c4 1c             	add    esp,0x1c
c0007b52:	c3                   	ret    

c0007b53 <rfree>:
c0007b53:	83 ec 18             	sub    esp,0x18
c0007b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b5a:	e8 27 92 ff ff       	call   c0000d86 <dlfree>
c0007b5f:	83 c4 1c             	add    esp,0x1c
c0007b62:	c3                   	ret    

c0007b63 <calloc>:
c0007b63:	56                   	push   esi
c0007b64:	53                   	push   ebx
c0007b65:	83 ec 10             	sub    esp,0x10
c0007b68:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b6c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b71:	53                   	push   ebx
c0007b72:	e8 bc ff ff ff       	call   c0007b33 <malloc>
c0007b77:	89 c6                	mov    esi,eax
c0007b79:	83 c4 0c             	add    esp,0xc
c0007b7c:	53                   	push   ebx
c0007b7d:	6a 00                	push   0x0
c0007b7f:	50                   	push   eax
c0007b80:	e8 6b 89 ff ff       	call   c00004f0 <memset>
c0007b85:	89 f0                	mov    eax,esi
c0007b87:	83 c4 14             	add    esp,0x14
c0007b8a:	5b                   	pop    ebx
c0007b8b:	5e                   	pop    esi
c0007b8c:	c3                   	ret    

c0007b8d <KeEntryPoint>:
c0007b8d:	57                   	push   edi
c0007b8e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b93:	56                   	push   esi
c0007b94:	31 f6                	xor    esi,esi
c0007b96:	53                   	push   ebx
c0007b97:	89 fa                	mov    edx,edi
c0007b99:	83 ec 2c             	sub    esp,0x2c
c0007b9c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007ba1:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007ba6:	89 f0                	mov    eax,esi
c0007ba8:	ee                   	out    dx,al
c0007ba9:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007bae:	b0 80                	mov    al,0x80
c0007bb0:	89 da                	mov    edx,ebx
c0007bb2:	ee                   	out    dx,al
c0007bb3:	b1 03                	mov    cl,0x3
c0007bb5:	ba f8 03 00 00       	mov    edx,0x3f8
c0007bba:	88 c8                	mov    al,cl
c0007bbc:	ee                   	out    dx,al
c0007bbd:	89 f0                	mov    eax,esi
c0007bbf:	89 fa                	mov    edx,edi
c0007bc1:	ee                   	out    dx,al
c0007bc2:	88 c8                	mov    al,cl
c0007bc4:	89 da                	mov    edx,ebx
c0007bc6:	ee                   	out    dx,al
c0007bc7:	b0 c7                	mov    al,0xc7
c0007bc9:	ba fa 03 00 00       	mov    edx,0x3fa
c0007bce:	ee                   	out    dx,al
c0007bcf:	b0 0b                	mov    al,0xb
c0007bd1:	ba fc 03 00 00       	mov    edx,0x3fc
c0007bd6:	ee                   	out    dx,al
c0007bd7:	68 3c 0e 02 c0       	push   0xc0020e3c
c0007bdc:	e8 89 2d 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0007be1:	e8 df 92 00 00       	call   c0010ec5 <KeDisplaySplashScreen()>
c0007be6:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007beb:	05 ff 0f 00 00       	add    eax,0xfff
c0007bf0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007bf5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bf8:	e8 b3 03 00 00       	call   c0007fb0 <Phys::physicalMemorySetup(unsigned int)>
c0007bfd:	e8 27 1c 00 00       	call   c0009829 <Virt::virtualMemorySetup()>
c0007c02:	e8 08 92 00 00       	call   c0010e0f <KeInitialiseAtexit()>
c0007c07:	58                   	pop    eax
c0007c08:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007c0c:	53                   	push   ebx
c0007c0d:	e8 14 1f 00 00       	call   c0009b26 <VAS::VAS()>
c0007c12:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007c18:	e8 2d 7e 01 00       	call   c001fa4a <_init>
c0007c1d:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007c24:	e8 0a ff ff ff       	call   c0007b33 <malloc>
c0007c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c2c:	89 c6                	mov    esi,eax
c0007c2e:	e8 37 f2 ff ff       	call   c0006e6a <Computer::Computer()>
c0007c33:	53                   	push   ebx
c0007c34:	6a 00                	push   0x0
c0007c36:	6a 00                	push   0x0
c0007c38:	56                   	push   esi
c0007c39:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007c3f:	e8 ec f5 ff ff       	call   c0007230 <Computer::open(int, int, void*)>
c0007c44:	83 c4 14             	add    esp,0x14
c0007c47:	53                   	push   ebx
c0007c48:	e8 a3 1f 00 00       	call   c0009bf0 <VAS::~VAS()>
c0007c4d:	83 c4 30             	add    esp,0x30
c0007c50:	5b                   	pop    ebx
c0007c51:	5e                   	pop    esi
c0007c52:	5f                   	pop    edi
c0007c53:	c3                   	ret    

c0007c54 <Phys::allocateDMA(unsigned long)>:
c0007c54:	55                   	push   ebp
c0007c55:	31 ed                	xor    ebp,ebp
c0007c57:	57                   	push   edi
c0007c58:	56                   	push   esi
c0007c59:	31 f6                	xor    esi,esi
c0007c5b:	53                   	push   ebx
c0007c5c:	31 db                	xor    ebx,ebx
c0007c5e:	83 ec 1c             	sub    esp,0x1c
c0007c61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c65:	05 ff 0f 00 00       	add    eax,0xfff
c0007c6a:	c1 e8 0c             	shr    eax,0xc
c0007c6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c71:	31 c0                	xor    eax,eax
c0007c73:	eb 1b                	jmp    c0007c90 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c75:	8d 78 01             	lea    edi,[eax+0x1]
c0007c78:	85 c0                	test   eax,eax
c0007c7a:	0f 44 eb             	cmove  ebp,ebx
c0007c7d:	0f 44 f3             	cmove  esi,ebx
c0007c80:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c84:	74 37                	je     c0007cbd <Phys::allocateDMA(unsigned long)+0x69>
c0007c86:	89 f8                	mov    eax,edi
c0007c88:	83 c3 01             	add    ebx,0x1
c0007c8b:	83 fb 0f             	cmp    ebx,0xf
c0007c8e:	7f 13                	jg     c0007ca3 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c90:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c97:	74 dc                	je     c0007c75 <Phys::allocateDMA(unsigned long)+0x21>
c0007c99:	31 c0                	xor    eax,eax
c0007c9b:	83 c3 01             	add    ebx,0x1
c0007c9e:	83 fb 0f             	cmp    ebx,0xf
c0007ca1:	7e ed                	jle    c0007c90 <Phys::allocateDMA(unsigned long)+0x3c>
c0007ca3:	83 ec 0c             	sub    esp,0xc
c0007ca6:	68 54 0e 02 c0       	push   0xc0020e54
c0007cab:	e8 8f 99 00 00       	call   c001163f <KePanic(char const*)>
c0007cb0:	83 c4 10             	add    esp,0x10
c0007cb3:	31 c0                	xor    eax,eax
c0007cb5:	83 c4 1c             	add    esp,0x1c
c0007cb8:	5b                   	pop    ebx
c0007cb9:	5e                   	pop    esi
c0007cba:	5f                   	pop    edi
c0007cbb:	5d                   	pop    ebp
c0007cbc:	c3                   	ret    
c0007cbd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007cc1:	89 f2                	mov    edx,esi
c0007cc3:	c1 fa 04             	sar    edx,0x4
c0007cc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cca:	01 f1                	add    ecx,esi
c0007ccc:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007ccf:	83 e9 01             	sub    ecx,0x1
c0007cd2:	0f 48 ca             	cmovs  ecx,edx
c0007cd5:	c1 f9 04             	sar    ecx,0x4
c0007cd8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007cdc:	74 06                	je     c0007ce4 <Phys::allocateDMA(unsigned long)+0x90>
c0007cde:	89 eb                	mov    ebx,ebp
c0007ce0:	31 c0                	xor    eax,eax
c0007ce2:	eb b7                	jmp    c0007c9b <Phys::allocateDMA(unsigned long)+0x47>
c0007ce4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ce8:	85 d2                	test   edx,edx
c0007cea:	74 17                	je     c0007d03 <Phys::allocateDMA(unsigned long)+0xaf>
c0007cec:	8d 96 ec 6e 02 c0    	lea    edx,[esi-0x3ffd9114]
c0007cf2:	8d 84 06 ed 6e 02 c0 	lea    eax,[esi+eax*1-0x3ffd9113]
c0007cf9:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007cfc:	83 c2 01             	add    edx,0x1
c0007cff:	39 d0                	cmp    eax,edx
c0007d01:	75 f6                	jne    c0007cf9 <Phys::allocateDMA(unsigned long)+0xa5>
c0007d03:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007d09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d11:	01 c2                	add    edx,eax
c0007d13:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007d19:	85 c9                	test   ecx,ecx
c0007d1b:	74 17                	je     c0007d34 <Phys::allocateDMA(unsigned long)+0xe0>
c0007d1d:	83 ec 0c             	sub    esp,0xc
c0007d20:	68 54 0e 02 c0       	push   0xc0020e54
c0007d25:	e8 15 99 00 00       	call   c001163f <KePanic(char const*)>
c0007d2a:	83 c4 10             	add    esp,0x10
c0007d2d:	89 f8                	mov    eax,edi
c0007d2f:	e9 54 ff ff ff       	jmp    c0007c88 <Phys::allocateDMA(unsigned long)+0x34>
c0007d34:	c1 e6 0c             	shl    esi,0xc
c0007d37:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007d3d:	e9 73 ff ff ff       	jmp    c0007cb5 <Phys::allocateDMA(unsigned long)+0x61>

c0007d42 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007d42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d46:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007d4c:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d51:	c1 ea 0c             	shr    edx,0xc
c0007d54:	29 d0                	sub    eax,edx
c0007d56:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d5f:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d64:	c1 e8 0c             	shr    eax,0xc
c0007d67:	85 d2                	test   edx,edx
c0007d69:	74 11                	je     c0007d7c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d6b:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d70:	01 c2                	add    edx,eax
c0007d72:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d75:	83 c0 01             	add    eax,0x1
c0007d78:	39 d0                	cmp    eax,edx
c0007d7a:	75 f6                	jne    c0007d72 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d7c:	c3                   	ret    

c0007d7d <Phys::setPageState(unsigned long, bool)>:
c0007d7d:	57                   	push   edi
c0007d7e:	56                   	push   esi
c0007d7f:	8b 35 ec 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237ec
c0007d85:	53                   	push   ebx
c0007d86:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d93:	89 ca                	mov    edx,ecx
c0007d95:	83 e1 07             	and    ecx,0x7
c0007d98:	c1 ea 03             	shr    edx,0x3
c0007d9b:	0f b6 c0             	movzx  eax,al
c0007d9e:	d3 c3                	rol    ebx,cl
c0007da0:	01 d6                	add    esi,edx
c0007da2:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007da5:	d3 e0                	shl    eax,cl
c0007da7:	21 fb                	and    ebx,edi
c0007da9:	88 1e                	mov    BYTE PTR [esi],bl
c0007dab:	8b 1d ec 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237ec
c0007db1:	01 da                	add    edx,ebx
c0007db3:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007db5:	09 c8                	or     eax,ecx
c0007db7:	88 02                	mov    BYTE PTR [edx],al
c0007db9:	5b                   	pop    ebx
c0007dba:	5e                   	pop    esi
c0007dbb:	5f                   	pop    edi
c0007dbc:	c3                   	ret    

c0007dbd <Phys::getPageState(unsigned long)>:
c0007dbd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dc1:	8b 15 ec 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237ec
c0007dc7:	89 c8                	mov    eax,ecx
c0007dc9:	83 e1 07             	and    ecx,0x7
c0007dcc:	c1 e8 03             	shr    eax,0x3
c0007dcf:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007dd3:	d3 f8                	sar    eax,cl
c0007dd5:	83 e0 01             	and    eax,0x1
c0007dd8:	c3                   	ret    

c0007dd9 <Phys::freePage(unsigned long)>:
c0007dd9:	53                   	push   ebx
c0007dda:	83 ec 08             	sub    esp,0x8
c0007ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007de1:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007de7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007ded:	76 41                	jbe    c0007e30 <Phys::freePage(unsigned long)+0x57>
c0007def:	c1 e8 0c             	shr    eax,0xc
c0007df2:	50                   	push   eax
c0007df3:	89 c3                	mov    ebx,eax
c0007df5:	e8 c3 ff ff ff       	call   c0007dbd <Phys::getPageState(unsigned long)>
c0007dfa:	5a                   	pop    edx
c0007dfb:	84 c0                	test   al,al
c0007dfd:	74 20                	je     c0007e1f <Phys::freePage(unsigned long)+0x46>
c0007dff:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007e04:	83 ec 08             	sub    esp,0x8
c0007e07:	6a 00                	push   0x0
c0007e09:	53                   	push   ebx
c0007e0a:	83 e8 01             	sub    eax,0x1
c0007e0d:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007e12:	e8 66 ff ff ff       	call   c0007d7d <Phys::setPageState(unsigned long, bool)>
c0007e17:	83 c4 10             	add    esp,0x10
c0007e1a:	83 c4 08             	add    esp,0x8
c0007e1d:	5b                   	pop    ebx
c0007e1e:	c3                   	ret    
c0007e1f:	c7 44 24 10 f9 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ef9
c0007e27:	83 c4 08             	add    esp,0x8
c0007e2a:	5b                   	pop    ebx
c0007e2b:	e9 0f 98 00 00       	jmp    c001163f <KePanic(char const*)>
c0007e30:	68 00 10 00 00       	push   0x1000
c0007e35:	50                   	push   eax
c0007e36:	e8 07 ff ff ff       	call   c0007d42 <Phys::freeDMA(unsigned long, unsigned long)>
c0007e3b:	59                   	pop    ecx
c0007e3c:	5b                   	pop    ebx
c0007e3d:	83 c4 08             	add    esp,0x8
c0007e40:	5b                   	pop    ebx
c0007e41:	c3                   	ret    

c0007e42 <Phys::allocatePage()>:
c0007e42:	56                   	push   esi
c0007e43:	53                   	push   ebx
c0007e44:	83 ec 14             	sub    esp,0x14
c0007e47:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007e4d:	89 f3                	mov    ebx,esi
c0007e4f:	eb 0a                	jmp    c0007e5b <Phys::allocatePage()+0x19>
c0007e51:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007e57:	39 de                	cmp    esi,ebx
c0007e59:	74 26                	je     c0007e81 <Phys::allocatePage()+0x3f>
c0007e5b:	53                   	push   ebx
c0007e5c:	e8 5c ff ff ff       	call   c0007dbd <Phys::getPageState(unsigned long)>
c0007e61:	5a                   	pop    edx
c0007e62:	84 c0                	test   al,al
c0007e64:	74 67                	je     c0007ecd <Phys::allocatePage()+0x8b>
c0007e66:	83 c3 01             	add    ebx,0x1
c0007e69:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e6f:	75 e0                	jne    c0007e51 <Phys::allocatePage()+0xf>
c0007e71:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e7b:	31 db                	xor    ebx,ebx
c0007e7d:	39 de                	cmp    esi,ebx
c0007e7f:	75 da                	jne    c0007e5b <Phys::allocatePage()+0x19>
c0007e81:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e86:	83 ec 0c             	sub    esp,0xc
c0007e89:	83 f0 01             	xor    eax,0x1
c0007e8c:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e99:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e9f:	50                   	push   eax
c0007ea0:	e8 79 27 00 00       	call   c000a61e <VAS::scanForEviction()>
c0007ea5:	83 c4 10             	add    esp,0x10
c0007ea8:	85 c0                	test   eax,eax
c0007eaa:	75 48                	jne    c0007ef4 <Phys::allocatePage()+0xb2>
c0007eac:	83 ec 0c             	sub    esp,0xc
c0007eaf:	68 7c 0e 02 c0       	push   0xc0020e7c
c0007eb4:	e8 86 97 00 00       	call   c001163f <KePanic(char const*)>
c0007eb9:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007ebf:	83 c4 10             	add    esp,0x10
c0007ec2:	53                   	push   ebx
c0007ec3:	e8 f5 fe ff ff       	call   c0007dbd <Phys::getPageState(unsigned long)>
c0007ec8:	5a                   	pop    edx
c0007ec9:	84 c0                	test   al,al
c0007ecb:	75 99                	jne    c0007e66 <Phys::allocatePage()+0x24>
c0007ecd:	6a 01                	push   0x1
c0007ecf:	53                   	push   ebx
c0007ed0:	e8 a8 fe ff ff       	call   c0007d7d <Phys::setPageState(unsigned long, bool)>
c0007ed5:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007edb:	59                   	pop    ecx
c0007edc:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007ee1:	5b                   	pop    ebx
c0007ee2:	83 c2 01             	add    edx,0x1
c0007ee5:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007eeb:	c1 e0 0c             	shl    eax,0xc
c0007eee:	83 c4 14             	add    esp,0x14
c0007ef1:	5b                   	pop    ebx
c0007ef2:	5e                   	pop    esi
c0007ef3:	c3                   	ret    
c0007ef4:	83 ec 08             	sub    esp,0x8
c0007ef7:	89 c2                	mov    edx,eax
c0007ef9:	6a 01                	push   0x1
c0007efb:	c1 ea 0c             	shr    edx,0xc
c0007efe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007f02:	52                   	push   edx
c0007f03:	e8 75 fe ff ff       	call   c0007d7d <Phys::setPageState(unsigned long, bool)>
c0007f08:	83 c4 10             	add    esp,0x10
c0007f0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0f:	eb dd                	jmp    c0007eee <Phys::allocatePage()+0xac>

c0007f11 <Phys::allocateContiguousPages(int)>:
c0007f11:	57                   	push   edi
c0007f12:	56                   	push   esi
c0007f13:	53                   	push   ebx
c0007f14:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007f18:	fa                   	cli    
c0007f19:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007f1e:	31 db                	xor    ebx,ebx
c0007f20:	83 c0 01             	add    eax,0x1
c0007f23:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f28:	85 db                	test   ebx,ebx
c0007f2a:	75 11                	jne    c0007f3d <Phys::allocateContiguousPages(int)+0x2c>
c0007f2c:	e8 11 ff ff ff       	call   c0007e42 <Phys::allocatePage()>
c0007f31:	83 fe 01             	cmp    esi,0x1
c0007f34:	89 c7                	mov    edi,eax
c0007f36:	74 21                	je     c0007f59 <Phys::allocateContiguousPages(int)+0x48>
c0007f38:	bb 01 00 00 00       	mov    ebx,0x1
c0007f3d:	e8 00 ff ff ff       	call   c0007e42 <Phys::allocatePage()>
c0007f42:	89 da                	mov    edx,ebx
c0007f44:	c1 e2 0c             	shl    edx,0xc
c0007f47:	01 fa                	add    edx,edi
c0007f49:	39 c2                	cmp    edx,eax
c0007f4b:	74 22                	je     c0007f6f <Phys::allocateContiguousPages(int)+0x5e>
c0007f4d:	83 fe 01             	cmp    esi,0x1
c0007f50:	bb 01 00 00 00       	mov    ebx,0x1
c0007f55:	89 c7                	mov    edi,eax
c0007f57:	75 e4                	jne    c0007f3d <Phys::allocateContiguousPages(int)+0x2c>
c0007f59:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007f5e:	83 e8 01             	sub    eax,0x1
c0007f61:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f66:	75 01                	jne    c0007f69 <Phys::allocateContiguousPages(int)+0x58>
c0007f68:	fb                   	sti    
c0007f69:	5b                   	pop    ebx
c0007f6a:	89 f8                	mov    eax,edi
c0007f6c:	5e                   	pop    esi
c0007f6d:	5f                   	pop    edi
c0007f6e:	c3                   	ret    
c0007f6f:	83 c3 01             	add    ebx,0x1
c0007f72:	39 f3                	cmp    ebx,esi
c0007f74:	75 b2                	jne    c0007f28 <Phys::allocateContiguousPages(int)+0x17>
c0007f76:	eb e1                	jmp    c0007f59 <Phys::allocateContiguousPages(int)+0x48>

c0007f78 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f78:	56                   	push   esi
c0007f79:	53                   	push   ebx
c0007f7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f7e:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f84:	73 06                	jae    c0007f8c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f86:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f90:	c1 eb 0c             	shr    ebx,0xc
c0007f93:	c1 e8 0c             	shr    eax,0xc
c0007f96:	39 d8                	cmp    eax,ebx
c0007f98:	73 13                	jae    c0007fad <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f9a:	6a 00                	push   0x0
c0007f9c:	50                   	push   eax
c0007f9d:	8d 70 01             	lea    esi,[eax+0x1]
c0007fa0:	e8 d8 fd ff ff       	call   c0007d7d <Phys::setPageState(unsigned long, bool)>
c0007fa5:	39 f3                	cmp    ebx,esi
c0007fa7:	89 f0                	mov    eax,esi
c0007fa9:	5a                   	pop    edx
c0007faa:	59                   	pop    ecx
c0007fab:	75 ed                	jne    c0007f9a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007fad:	5b                   	pop    ebx
c0007fae:	5e                   	pop    esi
c0007faf:	c3                   	ret    

c0007fb0 <Phys::physicalMemorySetup(unsigned int)>:
c0007fb0:	55                   	push   ebp
c0007fb1:	57                   	push   edi
c0007fb2:	56                   	push   esi
c0007fb3:	53                   	push   ebx
c0007fb4:	31 db                	xor    ebx,ebx
c0007fb6:	83 ec 40             	sub    esp,0x40
c0007fb9:	6a 10                	push   0x10
c0007fbb:	6a 00                	push   0x0
c0007fbd:	68 ec 6e 02 c0       	push   0xc0026eec
c0007fc2:	e8 29 85 ff ff       	call   c00004f0 <memset>
c0007fc7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007fcb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007fd0:	05 00 10 00 00       	add    eax,0x1000
c0007fd5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007fd9:	5a                   	pop    edx
c0007fda:	59                   	pop    ecx
c0007fdb:	50                   	push   eax
c0007fdc:	68 0f 0f 02 c0       	push   0xc0020f0f
c0007fe1:	e8 84 29 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0007fe6:	83 c4 10             	add    esp,0x10
c0007fe9:	83 ec 08             	sub    esp,0x8
c0007fec:	6a 01                	push   0x1
c0007fee:	53                   	push   ebx
c0007fef:	83 c3 01             	add    ebx,0x1
c0007ff2:	e8 86 fd ff ff       	call   c0007d7d <Phys::setPageState(unsigned long, bool)>
c0007ff7:	83 c4 10             	add    esp,0x10
c0007ffa:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0008000:	75 e7                	jne    c0007fe9 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0008002:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0008009:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0008010:	c1 e0 08             	shl    eax,0x8
c0008013:	09 c2                	or     edx,eax
c0008015:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0008019:	0f 84 43 01 00 00    	je     c0008162 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c000801f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0008027:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000802c:	e9 82 00 00 00       	jmp    c00080b3 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0008031:	ba 00 00 08 00       	mov    edx,0x80000
c0008036:	89 c1                	mov    ecx,eax
c0008038:	39 f2                	cmp    edx,esi
c000803a:	19 f9                	sbb    ecx,edi
c000803c:	0f 82 c0 00 00 00    	jb     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0008042:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008046:	89 c5                	mov    ebp,eax
c0008048:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000804c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008050:	19 cd                	sbb    ebp,ecx
c0008052:	0f 83 af 00 00 00    	jae    c0008107 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0008058:	89 d6                	mov    esi,edx
c000805a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000805f:	39 f2                	cmp    edx,esi
c0008061:	89 cf                	mov    edi,ecx
c0008063:	19 c8                	sbb    eax,ecx
c0008065:	73 07                	jae    c000806e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008067:	be 00 00 0a 00       	mov    esi,0xa0000
c000806c:	31 ff                	xor    edi,edi
c000806e:	89 f2                	mov    edx,esi
c0008070:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008075:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000807b:	89 f9                	mov    ecx,edi
c000807d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008081:	83 d1 ff             	adc    ecx,0xffffffff
c0008084:	39 d0                	cmp    eax,edx
c0008086:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000808a:	b8 00 00 00 00       	mov    eax,0x0
c000808f:	19 c8                	sbb    eax,ecx
c0008091:	0f 82 9d 01 00 00    	jb     c0008234 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008097:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000809b:	83 c3 18             	add    ebx,0x18
c000809e:	83 c6 01             	add    esi,0x1
c00080a1:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00080a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00080a9:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00080ad:	0f 84 bf 00 00 00    	je     c0008172 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c00080b3:	8b 33                	mov    esi,DWORD PTR [ebx]
c00080b5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00080b8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00080bb:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00080be:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00080c2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00080c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00080c9:	01 f0                	add    eax,esi
c00080cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00080cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00080d3:	55                   	push   ebp
c00080d4:	11 fa                	adc    edx,edi
c00080d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080da:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00080de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080e2:	50                   	push   eax
c00080e3:	56                   	push   esi
c00080e4:	68 ac 0e 02 c0       	push   0xc0020eac
c00080e9:	e8 7c 28 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c00080ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00080f2:	83 c4 10             	add    esp,0x10
c00080f5:	09 f8                	or     eax,edi
c00080f7:	75 79                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c00080f9:	83 fd 01             	cmp    ebp,0x1
c00080fc:	0f 84 2f ff ff ff    	je     c0008031 <Phys::physicalMemorySetup(unsigned int)+0x81>
c0008102:	83 fd 01             	cmp    ebp,0x1
c0008105:	75 90                	jne    c0008097 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008107:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000810b:	31 d2                	xor    edx,edx
c000810d:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0008111:	89 c8                	mov    eax,ecx
c0008113:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008117:	19 d1                	sbb    ecx,edx
c0008119:	0f 82 78 ff ff ff    	jb     c0008097 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000811f:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0008124:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c0008128:	b9 00 00 00 00       	mov    ecx,0x0
c000812d:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0008131:	0f 83 60 ff ff ff    	jae    c0008097 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008137:	39 c6                	cmp    esi,eax
c0008139:	19 d7                	sbb    edi,edx
c000813b:	0f 83 ff 00 00 00    	jae    c0008240 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008141:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008145:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008149:	29 c7                	sub    edi,eax
c000814b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000814f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008153:	19 d5                	sbb    ebp,edx
c0008155:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008159:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000815d:	e9 de 00 00 00       	jmp    c0008240 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008162:	83 ec 0c             	sub    esp,0xc
c0008165:	68 27 0f 02 c0       	push   0xc0020f27
c000816a:	e8 d0 94 00 00       	call   c001163f <KePanic(char const*)>
c000816f:	83 c4 10             	add    esp,0x10
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	bb 60 00 00 00       	mov    ebx,0x60
c000817a:	6a 00                	push   0x0
c000817c:	6a 06                	push   0x6
c000817e:	e8 fa fb ff ff       	call   c0007d7d <Phys::setPageState(unsigned long, bool)>
c0008183:	58                   	pop    eax
c0008184:	5a                   	pop    edx
c0008185:	6a 00                	push   0x0
c0008187:	6a 07                	push   0x7
c0008189:	e8 ef fb ff ff       	call   c0007d7d <Phys::setPageState(unsigned long, bool)>
c000818e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008194:	83 c4 10             	add    esp,0x10
c0008197:	83 c1 02             	add    ecx,0x2
c000819a:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c00081a0:	83 ec 08             	sub    esp,0x8
c00081a3:	6a 00                	push   0x0
c00081a5:	53                   	push   ebx
c00081a6:	83 c3 01             	add    ebx,0x1
c00081a9:	e8 cf fb ff ff       	call   c0007d7d <Phys::setPageState(unsigned long, bool)>
c00081ae:	83 c4 10             	add    esp,0x10
c00081b1:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00081b7:	75 e7                	jne    c00081a0 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c00081b9:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081be:	bb 40 01 00 00       	mov    ebx,0x140
c00081c3:	83 c0 20             	add    eax,0x20
c00081c6:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081cb:	eb 26                	jmp    c00081f3 <Phys::physicalMemorySetup(unsigned int)+0x243>
c00081cd:	83 ec 08             	sub    esp,0x8
c00081d0:	6a 00                	push   0x0
c00081d2:	53                   	push   ebx
c00081d3:	83 c3 01             	add    ebx,0x1
c00081d6:	e8 a2 fb ff ff       	call   c0007d7d <Phys::setPageState(unsigned long, bool)>
c00081db:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081e0:	83 c4 10             	add    esp,0x10
c00081e3:	83 c0 01             	add    eax,0x1
c00081e6:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081ec:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081f1:	74 07                	je     c00081fa <Phys::physicalMemorySetup(unsigned int)+0x24a>
c00081f3:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081f8:	7e d3                	jle    c00081cd <Phys::physicalMemorySetup(unsigned int)+0x21d>
c00081fa:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081ff:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008204:	7f 26                	jg     c000822c <Phys::physicalMemorySetup(unsigned int)+0x27c>
c0008206:	83 ec 08             	sub    esp,0x8
c0008209:	6a 00                	push   0x0
c000820b:	53                   	push   ebx
c000820c:	83 c3 01             	add    ebx,0x1
c000820f:	e8 69 fb ff ff       	call   c0007d7d <Phys::setPageState(unsigned long, bool)>
c0008214:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008219:	83 c4 10             	add    esp,0x10
c000821c:	83 c0 01             	add    eax,0x1
c000821f:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0008225:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000822a:	75 d3                	jne    c00081ff <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000822c:	83 c4 3c             	add    esp,0x3c
c000822f:	5b                   	pop    ebx
c0008230:	5e                   	pop    esi
c0008231:	5f                   	pop    edi
c0008232:	5d                   	pop    ebp
c0008233:	c3                   	ret    
c0008234:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0008238:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0008240:	83 ec 04             	sub    esp,0x4
c0008243:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0008247:	56                   	push   esi
c0008248:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000824c:	57                   	push   edi
c000824d:	68 d0 0e 02 c0       	push   0xc0020ed0
c0008252:	e8 13 27 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0008257:	5d                   	pop    ebp
c0008258:	58                   	pop    eax
c0008259:	56                   	push   esi
c000825a:	57                   	push   edi
c000825b:	e8 18 fd ff ff       	call   c0007f78 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008260:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008264:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008268:	83 c4 0c             	add    esp,0xc
c000826b:	8b 35 e8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ee8
c0008271:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008275:	01 f0                	add    eax,esi
c0008277:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000827c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008283:	52                   	push   edx
c0008284:	50                   	push   eax
c0008285:	68 35 0f 02 c0       	push   0xc0020f35
c000828a:	e8 db 26 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000828f:	83 c4 10             	add    esp,0x10
c0008292:	e9 00 fe ff ff       	jmp    c0008097 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008297:	90                   	nop

c0008298 <Pipe::isAtty()>:
c0008298:	31 c0                	xor    eax,eax
c000829a:	c3                   	ret    
c000829b:	90                   	nop

c000829c <Pipe::~Pipe()>:
c000829c:	83 ec 0c             	sub    esp,0xc
c000829f:	ba 94 0f 02 c0       	mov    edx,0xc0020f94
c00082a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082a8:	89 10                	mov    DWORD PTR [eax],edx
c00082aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082ae:	83 ec 0c             	sub    esp,0xc
c00082b1:	50                   	push   eax
c00082b2:	e8 35 11 00 00       	call   c00093ec <UnixFile::~UnixFile()>
c00082b7:	83 c4 10             	add    esp,0x10
c00082ba:	90                   	nop
c00082bb:	83 c4 0c             	add    esp,0xc
c00082be:	c3                   	ret    
c00082bf:	90                   	nop

c00082c0 <Pipe::~Pipe()>:
c00082c0:	83 ec 0c             	sub    esp,0xc
c00082c3:	83 ec 0c             	sub    esp,0xc
c00082c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082ca:	e8 cd ff ff ff       	call   c000829c <Pipe::~Pipe()>
c00082cf:	83 c4 10             	add    esp,0x10
c00082d2:	83 ec 08             	sub    esp,0x8
c00082d5:	6a 20                	push   0x20
c00082d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082db:	e8 8c 25 00 00       	call   c000a86c <operator delete(void*, unsigned long)>
c00082e0:	83 c4 10             	add    esp,0x10
c00082e3:	83 c4 0c             	add    esp,0xc
c00082e6:	c3                   	ret    
c00082e7:	90                   	nop

c00082e8 <Pipe::write(unsigned long long, void*, int*)>:
c00082e8:	55                   	push   ebp
c00082e9:	57                   	push   edi
c00082ea:	56                   	push   esi
c00082eb:	53                   	push   ebx
c00082ec:	83 ec 1c             	sub    esp,0x1c
c00082ef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00082f3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00082f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00082fb:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00082fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008302:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008305:	89 04 24             	mov    DWORD PTR [esp],eax
c0008308:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000830c:	89 d8                	mov    eax,ebx
c000830e:	89 d6                	mov    esi,edx
c0008310:	89 d7                	mov    edi,edx
c0008312:	c1 ff 1f             	sar    edi,0x1f
c0008315:	03 34 24             	add    esi,DWORD PTR [esp]
c0008318:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000831c:	c1 f8 1f             	sar    eax,0x1f
c000831f:	39 f3                	cmp    ebx,esi
c0008321:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008325:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008329:	19 f8                	sbb    eax,edi
c000832b:	b8 01 00 00 00       	mov    eax,0x1
c0008330:	72 72                	jb     c00083a4 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0008332:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008335:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0008339:	01 d0                	add    eax,edx
c000833b:	99                   	cdq    
c000833c:	f7 fb                	idiv   ebx
c000833e:	89 d8                	mov    eax,ebx
c0008340:	29 d0                	sub    eax,edx
c0008342:	89 d6                	mov    esi,edx
c0008344:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008347:	89 c3                	mov    ebx,eax
c0008349:	c1 fb 1f             	sar    ebx,0x1f
c000834c:	39 c2                	cmp    edx,eax
c000834e:	19 df                	sbb    edi,ebx
c0008350:	bb 00 00 00 00       	mov    ebx,0x0
c0008355:	72 04                	jb     c000835b <Pipe::write(unsigned long long, void*, int*)+0x73>
c0008357:	89 d3                	mov    ebx,edx
c0008359:	29 c3                	sub    ebx,eax
c000835b:	89 d0                	mov    eax,edx
c000835d:	29 d8                	sub    eax,ebx
c000835f:	74 0d                	je     c000836e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008361:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008364:	89 c1                	mov    ecx,eax
c0008366:	01 f7                	add    edi,esi
c0008368:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000836c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000836e:	85 db                	test   ebx,ebx
c0008370:	74 0d                	je     c000837f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008372:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008376:	89 d9                	mov    ecx,ebx
c0008378:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000837b:	89 c6                	mov    esi,eax
c000837d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000837f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008382:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008387:	75 10                	jne    c0008399 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008389:	83 ec 0c             	sub    esp,0xc
c000838c:	68 51 0f 02 c0       	push   0xc0020f51
c0008391:	e8 a9 92 00 00       	call   c001163f <KePanic(char const*)>
c0008396:	83 c4 10             	add    esp,0x10
c0008399:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000839d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00083a0:	89 08                	mov    DWORD PTR [eax],ecx
c00083a2:	31 c0                	xor    eax,eax
c00083a4:	83 c4 1c             	add    esp,0x1c
c00083a7:	5b                   	pop    ebx
c00083a8:	5e                   	pop    esi
c00083a9:	5f                   	pop    edi
c00083aa:	5d                   	pop    ebp
c00083ab:	c3                   	ret    

c00083ac <Pipe::read(unsigned long long, void*, int*)>:
c00083ac:	55                   	push   ebp
c00083ad:	57                   	push   edi
c00083ae:	56                   	push   esi
c00083af:	53                   	push   ebx
c00083b0:	83 ec 1c             	sub    esp,0x1c
c00083b3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00083b7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00083bb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00083bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00083c2:	89 c8                	mov    eax,ecx
c00083c4:	99                   	cdq    
c00083c5:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00083c9:	74 24                	je     c00083ef <Pipe::read(unsigned long long, void*, int*)+0x43>
c00083cb:	39 f9                	cmp    ecx,edi
c00083cd:	89 d1                	mov    ecx,edx
c00083cf:	19 f1                	sbb    ecx,esi
c00083d1:	73 1c                	jae    c00083ef <Pipe::read(unsigned long long, void*, int*)+0x43>
c00083d3:	fa                   	cli    
c00083d4:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00083da:	e8 8d dd 00 00       	call   c001616c <schedule()>
c00083df:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00083e4:	48                   	dec    eax
c00083e5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00083ea:	75 d3                	jne    c00083bf <Pipe::read(unsigned long long, void*, int*)+0x13>
c00083ec:	fb                   	sti    
c00083ed:	eb d0                	jmp    c00083bf <Pipe::read(unsigned long long, void*, int*)+0x13>
c00083ef:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00083f3:	39 f8                	cmp    eax,edi
c00083f5:	89 d1                	mov    ecx,edx
c00083f7:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00083fb:	19 f1                	sbb    ecx,esi
c00083fd:	73 08                	jae    c0008407 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c00083ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008403:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008407:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000840a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000840d:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0008411:	29 f7                	sub    edi,esi
c0008413:	89 f8                	mov    eax,edi
c0008415:	99                   	cdq    
c0008416:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000841a:	89 d0                	mov    eax,edx
c000841c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008420:	19 c2                	sbb    edx,eax
c0008422:	89 f8                	mov    eax,edi
c0008424:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0008429:	89 ea                	mov    edx,ebp
c000842b:	29 c2                	sub    edx,eax
c000842d:	85 c0                	test   eax,eax
c000842f:	74 0b                	je     c000843c <Pipe::read(unsigned long long, void*, int*)+0x90>
c0008431:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008434:	89 c1                	mov    ecx,eax
c0008436:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000843a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000843c:	85 d2                	test   edx,edx
c000843e:	74 0d                	je     c000844d <Pipe::read(unsigned long long, void*, int*)+0xa1>
c0008440:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008444:	89 d1                	mov    ecx,edx
c0008446:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008449:	89 c7                	mov    edi,eax
c000844b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000844d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008450:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008453:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008456:	99                   	cdq    
c0008457:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000845b:	89 f7                	mov    edi,esi
c000845d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008461:	c1 ff 1f             	sar    edi,0x1f
c0008464:	57                   	push   edi
c0008465:	56                   	push   esi
c0008466:	52                   	push   edx
c0008467:	50                   	push   eax
c0008468:	e8 c3 74 01 00       	call   c001f930 <__umoddi3>
c000846d:	83 c4 10             	add    esp,0x10
c0008470:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008475:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008478:	75 10                	jne    c000848a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000847a:	83 ec 0c             	sub    esp,0xc
c000847d:	68 6e 0f 02 c0       	push   0xc0020f6e
c0008482:	e8 b8 91 00 00       	call   c001163f <KePanic(char const*)>
c0008487:	83 c4 10             	add    esp,0x10
c000848a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000848e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008492:	89 10                	mov    DWORD PTR [eax],edx
c0008494:	83 c4 1c             	add    esp,0x1c
c0008497:	31 c0                	xor    eax,eax
c0008499:	5b                   	pop    ebx
c000849a:	5e                   	pop    esi
c000849b:	5f                   	pop    edi
c000849c:	5d                   	pop    ebp
c000849d:	c3                   	ret    

c000849e <Pipe::Pipe(int)>:
c000849e:	83 ec 0c             	sub    esp,0xc
c00084a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a5:	83 ec 08             	sub    esp,0x8
c00084a8:	6a 00                	push   0x0
c00084aa:	50                   	push   eax
c00084ab:	e8 56 0d 00 00       	call   c0009206 <UnixFile::UnixFile(int)>
c00084b0:	83 c4 10             	add    esp,0x10
c00084b3:	ba 94 0f 02 c0       	mov    edx,0xc0020f94
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	89 10                	mov    DWORD PTR [eax],edx
c00084be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00084c6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00084c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084cd:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00084d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084d8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00084df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084e3:	83 ec 0c             	sub    esp,0xc
c00084e6:	50                   	push   eax
c00084e7:	e8 47 f6 ff ff       	call   c0007b33 <malloc>
c00084ec:	83 c4 10             	add    esp,0x10
c00084ef:	89 c2                	mov    edx,eax
c00084f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084f5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00084f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084fc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008500:	90                   	nop
c0008501:	83 c4 0c             	add    esp,0xc
c0008504:	c3                   	ret    
c0008505:	90                   	nop

c0008506 <VgaText::isAtty()>:
c0008506:	b0 01                	mov    al,0x1
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::~VgaText()>:
c000850a:	83 ec 0c             	sub    esp,0xc
c000850d:	ba dc 0f 02 c0       	mov    edx,0xc0020fdc
c0008512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008516:	89 10                	mov    DWORD PTR [eax],edx
c0008518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000851c:	83 ec 0c             	sub    esp,0xc
c000851f:	50                   	push   eax
c0008520:	e8 c7 0e 00 00       	call   c00093ec <UnixFile::~UnixFile()>
c0008525:	83 c4 10             	add    esp,0x10
c0008528:	90                   	nop
c0008529:	83 c4 0c             	add    esp,0xc
c000852c:	c3                   	ret    
c000852d:	90                   	nop

c000852e <VgaText::~VgaText()>:
c000852e:	83 ec 0c             	sub    esp,0xc
c0008531:	83 ec 0c             	sub    esp,0xc
c0008534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008538:	e8 cd ff ff ff       	call   c000850a <VgaText::~VgaText()>
c000853d:	83 c4 10             	add    esp,0x10
c0008540:	83 ec 08             	sub    esp,0x8
c0008543:	68 84 01 00 00       	push   0x184
c0008548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000854c:	e8 1b 23 00 00       	call   c000a86c <operator delete(void*, unsigned long)>
c0008551:	83 c4 10             	add    esp,0x10
c0008554:	83 c4 0c             	add    esp,0xc
c0008557:	c3                   	ret    

c0008558 <VgaText::read(unsigned long long, void*, int*)>:
c0008558:	83 ec 10             	sub    esp,0x10
c000855b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000855f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008563:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008567:	e8 76 53 00 00       	call   c000d8e2 <readKeyboard(VgaText*, char*, unsigned long)>
c000856c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008570:	89 02                	mov    DWORD PTR [edx],eax
c0008572:	31 c0                	xor    eax,eax
c0008574:	83 c4 1c             	add    esp,0x1c
c0008577:	c3                   	ret    

c0008578 <setTerminalScrollLock(bool)>:
c0008578:	c3                   	ret    

c0008579 <doTerminalCycle()>:
c0008579:	c3                   	ret    

c000857a <addToTerminalCycle(VgaText*)>:
c000857a:	c3                   	ret    

c000857b <scrollTerminalScrollLock(int)>:
c000857b:	c3                   	ret    

c000857c <VgaText::updateTitle()>:
c000857c:	c3                   	ret    
c000857d:	90                   	nop

c000857e <VgaText::load()>:
c000857e:	c3                   	ret    
c000857f:	90                   	nop

c0008580 <VgaText::updateCursor()>:
c0008580:	83 ec 14             	sub    esp,0x14
c0008583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008587:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000858a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000858d:	e8 7a 09 01 00       	call   c0018f0c <HalConsoleCursorUpdate(int, int)>
c0008592:	83 c4 1c             	add    esp,0x1c
c0008595:	c3                   	ret    

c0008596 <VgaText::doANSI_SGR(int)>:
c0008596:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000859e:	85 d2                	test   edx,edx
c00085a0:	75 0b                	jne    c00085ad <VgaText::doANSI_SGR(int)+0x17>
c00085a2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00085a5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085a8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00085ab:	eb 59                	jmp    c0008606 <VgaText::doANSI_SGR(int)+0x70>
c00085ad:	83 fa 07             	cmp    edx,0x7
c00085b0:	75 0b                	jne    c00085bd <VgaText::doANSI_SGR(int)+0x27>
c00085b2:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00085b5:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00085b8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00085bb:	eb 49                	jmp    c0008606 <VgaText::doANSI_SGR(int)+0x70>
c00085bd:	83 fa 1b             	cmp    edx,0x1b
c00085c0:	74 e0                	je     c00085a2 <VgaText::doANSI_SGR(int)+0xc>
c00085c2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00085c5:	83 f9 07             	cmp    ecx,0x7
c00085c8:	77 09                	ja     c00085d3 <VgaText::doANSI_SGR(int)+0x3d>
c00085ca:	8b 14 8d 20 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc7e0]
c00085d1:	eb 20                	jmp    c00085f3 <VgaText::doANSI_SGR(int)+0x5d>
c00085d3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00085d6:	83 f9 07             	cmp    ecx,0x7
c00085d9:	77 09                	ja     c00085e4 <VgaText::doANSI_SGR(int)+0x4e>
c00085db:	8b 14 8d 20 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc7e0]
c00085e2:	eb 22                	jmp    c0008606 <VgaText::doANSI_SGR(int)+0x70>
c00085e4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00085e7:	83 f9 07             	cmp    ecx,0x7
c00085ea:	77 0b                	ja     c00085f7 <VgaText::doANSI_SGR(int)+0x61>
c00085ec:	8b 14 95 d8 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc928]
c00085f3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085f6:	c3                   	ret    
c00085f7:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00085fa:	83 f9 07             	cmp    ecx,0x7
c00085fd:	77 0a                	ja     c0008609 <VgaText::doANSI_SGR(int)+0x73>
c00085ff:	8b 14 95 b0 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc950]
c0008606:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008609:	c3                   	ret    

c000860a <VgaText::setDefaultBgColour(VgaColour)>:
c000860a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000860e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008612:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008615:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008618:	c3                   	ret    
c0008619:	90                   	nop

c000861a <VgaText::setDefaultFgColour(VgaColour)>:
c000861a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000861e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008622:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008625:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008628:	c3                   	ret    
c0008629:	90                   	nop

c000862a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000862a:	53                   	push   ebx
c000862b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000862f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008633:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008637:	51                   	push   ecx
c0008638:	e8 cd ff ff ff       	call   c000860a <VgaText::setDefaultBgColour(VgaColour)>
c000863d:	58                   	pop    eax
c000863e:	5a                   	pop    edx
c000863f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008643:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008647:	5b                   	pop    ebx
c0008648:	eb d0                	jmp    c000861a <VgaText::setDefaultFgColour(VgaColour)>

c000864a <VgaText::setTitleTextColour(VgaColour)>:
c000864a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000864e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008652:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008655:	c3                   	ret    

c0008656 <VgaText::setTitleColour(VgaColour)>:
c0008656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000865a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000865e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008661:	c3                   	ret    

c0008662 <VgaText::setTitle(char*)>:
c0008662:	c3                   	ret    
c0008663:	90                   	nop

c0008664 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008668:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000866d:	83 e0 0f             	and    eax,0xf
c0008670:	c1 e2 04             	shl    edx,0x4
c0008673:	09 d0                	or     eax,edx
c0008675:	c3                   	ret    

c0008676 <VgaText::scrollScreen()>:
c0008676:	55                   	push   ebp
c0008677:	57                   	push   edi
c0008678:	56                   	push   esi
c0008679:	be 01 00 00 00       	mov    esi,0x1
c000867e:	53                   	push   ebx
c000867f:	83 ec 0c             	sub    esp,0xc
c0008682:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008686:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008689:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000868f:	31 ff                	xor    edi,edi
c0008691:	01 e9                	add    ecx,ebp
c0008693:	8a 01                	mov    al,BYTE PTR [ecx]
c0008695:	83 fe 18             	cmp    esi,0x18
c0008698:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000869e:	75 20                	jne    c00086c0 <VgaText::scrollScreen()+0x4a>
c00086a0:	f7 c7 01 00 00 00    	test   edi,0x1
c00086a6:	74 15                	je     c00086bd <VgaText::scrollScreen()+0x47>
c00086a8:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00086ac:	50                   	push   eax
c00086ad:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00086b1:	50                   	push   eax
c00086b2:	e8 ad ff ff ff       	call   c0008664 <VgaText::combineColours(unsigned char, unsigned char)>
c00086b7:	5a                   	pop    edx
c00086b8:	5a                   	pop    edx
c00086b9:	88 01                	mov    BYTE PTR [ecx],al
c00086bb:	eb 03                	jmp    c00086c0 <VgaText::scrollScreen()+0x4a>
c00086bd:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00086c0:	47                   	inc    edi
c00086c1:	41                   	inc    ecx
c00086c2:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00086c8:	75 c9                	jne    c0008693 <VgaText::scrollScreen()+0x1d>
c00086ca:	46                   	inc    esi
c00086cb:	83 fe 19             	cmp    esi,0x19
c00086ce:	75 b9                	jne    c0008689 <VgaText::scrollScreen()+0x13>
c00086d0:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c00086d6:	75 1f                	jne    c00086f7 <VgaText::scrollScreen()+0x81>
c00086d8:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00086dc:	74 05                	je     c00086e3 <VgaText::scrollScreen()+0x6d>
c00086de:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00086e1:	eb 14                	jmp    c00086f7 <VgaText::scrollScreen()+0x81>
c00086e3:	50                   	push   eax
c00086e4:	50                   	push   eax
c00086e5:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00086e9:	50                   	push   eax
c00086ea:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00086ee:	50                   	push   eax
c00086ef:	e8 ac 06 01 00       	call   c0018da0 <HalConsoleScroll(int, int)>
c00086f4:	83 c4 10             	add    esp,0x10
c00086f7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00086fb:	83 c4 0c             	add    esp,0xc
c00086fe:	5b                   	pop    ebx
c00086ff:	5e                   	pop    esi
c0008700:	5f                   	pop    edi
c0008701:	5d                   	pop    ebp
c0008702:	e9 79 fe ff ff       	jmp    c0008580 <VgaText::updateCursor()>
c0008707:	90                   	nop

c0008708 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008708:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000870d:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0008712:	c1 e0 08             	shl    eax,0x8
c0008715:	09 d0                	or     eax,edx
c0008717:	c3                   	ret    

c0008718 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008718:	55                   	push   ebp
c0008719:	57                   	push   edi
c000871a:	56                   	push   esi
c000871b:	53                   	push   ebx
c000871c:	83 ec 1c             	sub    esp,0x1c
c000871f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008723:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008727:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000872b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000872f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008733:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008737:	0f b6 c3             	movzx  eax,bl
c000873a:	50                   	push   eax
c000873b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008740:	50                   	push   eax
c0008741:	e8 1e ff ff ff       	call   c0008664 <VgaText::combineColours(unsigned char, unsigned char)>
c0008746:	5a                   	pop    edx
c0008747:	59                   	pop    ecx
c0008748:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000874d:	0f b6 c0             	movzx  eax,al
c0008750:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008754:	50                   	push   eax
c0008755:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008759:	e8 aa ff ff ff       	call   c0008708 <VgaText::combineCharAndColour(char, unsigned char)>
c000875e:	5a                   	pop    edx
c000875f:	6b d7 50             	imul   edx,edi,0x50
c0008762:	59                   	pop    ecx
c0008763:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008766:	01 f2                	add    edx,esi
c0008768:	0f b7 d2             	movzx  edx,dx
c000876b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000876f:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008775:	75 28                	jne    c000879f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008777:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000877b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000877f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008783:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008787:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000878b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000878f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008793:	83 c4 1c             	add    esp,0x1c
c0008796:	5b                   	pop    ebx
c0008797:	5e                   	pop    esi
c0008798:	5f                   	pop    edi
c0008799:	5d                   	pop    ebp
c000879a:	e9 09 07 01 00       	jmp    c0018ea8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000879f:	83 c4 1c             	add    esp,0x1c
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::getCursorX()>:
c00087a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087ac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00087af:	c3                   	ret    

c00087b0 <VgaText::getCursorY()>:
c00087b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00087b7:	c3                   	ret    

c00087b8 <VgaText::setCursor(int, int)>:
c00087b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00087c0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00087c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00087c7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00087ca:	e9 b1 fd ff ff       	jmp    c0008580 <VgaText::updateCursor()>

c00087cf <setActiveTerminal(VgaText*)>:
c00087cf:	53                   	push   ebx
c00087d0:	83 ec 08             	sub    esp,0x8
c00087d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087d7:	85 db                	test   ebx,ebx
c00087d9:	75 11                	jne    c00087ec <setActiveTerminal(VgaText*)+0x1d>
c00087db:	c7 44 24 10 a8 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020fa8
c00087e3:	83 c4 08             	add    esp,0x8
c00087e6:	5b                   	pop    ebx
c00087e7:	e9 53 8e 00 00       	jmp    c001163f <KePanic(char const*)>
c00087ec:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00087f1:	85 c0                	test   eax,eax
c00087f3:	74 0c                	je     c0008801 <setActiveTerminal(VgaText*)+0x32>
c00087f5:	83 ec 0c             	sub    esp,0xc
c00087f8:	50                   	push   eax
c00087f9:	e8 82 fd ff ff       	call   c0008580 <VgaText::updateCursor()>
c00087fe:	83 c4 10             	add    esp,0x10
c0008801:	50                   	push   eax
c0008802:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008805:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c000880b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000880e:	53                   	push   ebx
c000880f:	e8 a4 ff ff ff       	call   c00087b8 <VgaText::setCursor(int, int)>
c0008814:	83 c4 18             	add    esp,0x18
c0008817:	5b                   	pop    ebx
c0008818:	c3                   	ret    
c0008819:	90                   	nop

c000881a <VgaText::clearScreen()>:
c000881a:	57                   	push   edi
c000881b:	56                   	push   esi
c000881c:	31 f6                	xor    esi,esi
c000881e:	53                   	push   ebx
c000881f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008823:	52                   	push   edx
c0008824:	6a 00                	push   0x0
c0008826:	6a 00                	push   0x0
c0008828:	53                   	push   ebx
c0008829:	e8 8a ff ff ff       	call   c00087b8 <VgaText::setCursor(int, int)>
c000882e:	83 c4 10             	add    esp,0x10
c0008831:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008838:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000883b:	7e 20                	jle    c000885d <VgaText::clearScreen()+0x43>
c000883d:	31 ff                	xor    edi,edi
c000883f:	50                   	push   eax
c0008840:	50                   	push   eax
c0008841:	56                   	push   esi
c0008842:	57                   	push   edi
c0008843:	47                   	inc    edi
c0008844:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008847:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000884a:	6a 20                	push   0x20
c000884c:	53                   	push   ebx
c000884d:	e8 c6 fe ff ff       	call   c0008718 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008852:	83 c4 20             	add    esp,0x20
c0008855:	83 ff 50             	cmp    edi,0x50
c0008858:	75 e5                	jne    c000883f <VgaText::clearScreen()+0x25>
c000885a:	46                   	inc    esi
c000885b:	eb db                	jmp    c0008838 <VgaText::clearScreen()+0x1e>
c000885d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008864:	5b                   	pop    ebx
c0008865:	5e                   	pop    esi
c0008866:	5f                   	pop    edi
c0008867:	c3                   	ret    

c0008868 <VgaText::setCursorX(int)>:
c0008868:	83 ec 10             	sub    esp,0x10
c000886b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000886f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008876:	50                   	push   eax
c0008877:	e8 3c ff ff ff       	call   c00087b8 <VgaText::setCursor(int, int)>
c000887c:	83 c4 1c             	add    esp,0x1c
c000887f:	c3                   	ret    

c0008880 <VgaText::setCursorY(int)>:
c0008880:	83 ec 10             	sub    esp,0x10
c0008883:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008887:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000888b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000888e:	50                   	push   eax
c000888f:	e8 24 ff ff ff       	call   c00087b8 <VgaText::setCursor(int, int)>
c0008894:	83 c4 1c             	add    esp,0x1c
c0008897:	c3                   	ret    

c0008898 <VgaText::incrementCursor(bool)>:
c0008898:	56                   	push   esi
c0008899:	53                   	push   ebx
c000889a:	51                   	push   ecx
c000889b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000889f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00088a6:	40                   	inc    eax
c00088a7:	83 f8 50             	cmp    eax,0x50
c00088aa:	74 05                	je     c00088b1 <VgaText::incrementCursor(bool)+0x19>
c00088ac:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00088af:	eb 24                	jmp    c00088d5 <VgaText::incrementCursor(bool)+0x3d>
c00088b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088b8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088bb:	8d 50 01             	lea    edx,[eax+0x1]
c00088be:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088c1:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088c4:	75 0f                	jne    c00088d5 <VgaText::incrementCursor(bool)+0x3d>
c00088c6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088c9:	83 ec 0c             	sub    esp,0xc
c00088cc:	53                   	push   ebx
c00088cd:	e8 a4 fd ff ff       	call   c0008676 <VgaText::scrollScreen()>
c00088d2:	83 c4 10             	add    esp,0x10
c00088d5:	89 f0                	mov    eax,esi
c00088d7:	84 c0                	test   al,al
c00088d9:	74 0c                	je     c00088e7 <VgaText::incrementCursor(bool)+0x4f>
c00088db:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00088df:	5a                   	pop    edx
c00088e0:	5b                   	pop    ebx
c00088e1:	5e                   	pop    esi
c00088e2:	e9 99 fc ff ff       	jmp    c0008580 <VgaText::updateCursor()>
c00088e7:	58                   	pop    eax
c00088e8:	5b                   	pop    ebx
c00088e9:	5e                   	pop    esi
c00088ea:	c3                   	ret    
c00088eb:	90                   	nop

c00088ec <VgaText::decrementCursor(bool)>:
c00088ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00088f4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088f7:	85 c0                	test   eax,eax
c00088f9:	74 04                	je     c00088ff <VgaText::decrementCursor(bool)+0x13>
c00088fb:	48                   	dec    eax
c00088fc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00088ff:	84 c9                	test   cl,cl
c0008901:	74 09                	je     c000890c <VgaText::decrementCursor(bool)+0x20>
c0008903:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008907:	e9 74 fc ff ff       	jmp    c0008580 <VgaText::updateCursor()>
c000890c:	c3                   	ret    
c000890d:	90                   	nop

c000890e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000890e:	53                   	push   ebx
c000890f:	83 ec 08             	sub    esp,0x8
c0008912:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0008917:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000891b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000891f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008923:	83 f8 07             	cmp    eax,0x7
c0008926:	75 21                	jne    c0008949 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0008928:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008930:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008938:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008940:	83 c4 08             	add    esp,0x8
c0008943:	5b                   	pop    ebx
c0008944:	e9 d6 3a 00 00       	jmp    c000c41f <Krnl::beep(int, int, bool)>
c0008949:	83 f8 0d             	cmp    eax,0xd
c000894c:	75 09                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c000894e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008955:	eb 2d                	jmp    c0008984 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0008957:	83 f8 0a             	cmp    eax,0xa
c000895a:	75 31                	jne    c000898d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c000895c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008963:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008966:	8d 50 01             	lea    edx,[eax+0x1]
c0008969:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000896c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000896f:	75 0f                	jne    c0008980 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008971:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008974:	83 ec 0c             	sub    esp,0xc
c0008977:	53                   	push   ebx
c0008978:	e8 f9 fc ff ff       	call   c0008676 <VgaText::scrollScreen()>
c000897d:	83 c4 10             	add    esp,0x10
c0008980:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008984:	83 c4 08             	add    esp,0x8
c0008987:	5b                   	pop    ebx
c0008988:	e9 f3 fb ff ff       	jmp    c0008580 <VgaText::updateCursor()>
c000898d:	83 f8 08             	cmp    eax,0x8
c0008990:	75 25                	jne    c00089b7 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008992:	50                   	push   eax
c0008993:	50                   	push   eax
c0008994:	6a 01                	push   0x1
c0008996:	53                   	push   ebx
c0008997:	e8 50 ff ff ff       	call   c00088ec <VgaText::decrementCursor(bool)>
c000899c:	5a                   	pop    edx
c000899d:	59                   	pop    ecx
c000899e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00089a1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00089a4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089a7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00089aa:	6a 20                	push   0x20
c00089ac:	53                   	push   ebx
c00089ad:	e8 66 fd ff ff       	call   c0008718 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00089b2:	83 c4 28             	add    esp,0x28
c00089b5:	5b                   	pop    ebx
c00089b6:	c3                   	ret    
c00089b7:	83 ec 08             	sub    esp,0x8
c00089ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00089bd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00089c0:	51                   	push   ecx
c00089c1:	52                   	push   edx
c00089c2:	50                   	push   eax
c00089c3:	53                   	push   ebx
c00089c4:	e8 4f fd ff ff       	call   c0008718 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00089c9:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00089cd:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00089d5:	83 c4 28             	add    esp,0x28
c00089d8:	5b                   	pop    ebx
c00089d9:	e9 ba fe ff ff       	jmp    c0008898 <VgaText::incrementCursor(bool)>

c00089de <VgaText::putchar(char)>:
c00089de:	57                   	push   edi
c00089df:	56                   	push   esi
c00089e0:	53                   	push   ebx
c00089e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00089e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00089e9:	0f be c2             	movsx  eax,dl
c00089ec:	83 f8 5b             	cmp    eax,0x5b
c00089ef:	75 18                	jne    c0008a09 <VgaText::putchar(char)+0x2b>
c00089f1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00089f5:	74 20                	je     c0008a17 <VgaText::putchar(char)+0x39>
c00089f7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00089fd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008a04:	e9 b8 00 00 00       	jmp    c0008ac1 <VgaText::putchar(char)+0xe3>
c0008a09:	83 f8 1b             	cmp    eax,0x1b
c0008a0c:	75 09                	jne    c0008a17 <VgaText::putchar(char)+0x39>
c0008a0e:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008a12:	e9 aa 00 00 00       	jmp    c0008ac1 <VgaText::putchar(char)+0xe3>
c0008a17:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0008a1b:	89 f9                	mov    ecx,edi
c0008a1d:	84 c9                	test   cl,cl
c0008a1f:	0f 84 8c 00 00 00    	je     c0008ab1 <VgaText::putchar(char)+0xd3>
c0008a25:	8d 4a c0             	lea    ecx,[edx-0x40]
c0008a28:	80 f9 3e             	cmp    cl,0x3e
c0008a2b:	77 70                	ja     c0008a9d <VgaText::putchar(char)+0xbf>
c0008a2d:	83 f8 6d             	cmp    eax,0x6d
c0008a30:	75 3f                	jne    c0008a71 <VgaText::putchar(char)+0x93>
c0008a32:	31 f6                	xor    esi,esi
c0008a34:	31 d2                	xor    edx,edx
c0008a36:	31 c0                	xor    eax,eax
c0008a38:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008a3b:	7e 25                	jle    c0008a62 <VgaText::putchar(char)+0x84>
c0008a3d:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008a42:	83 fa 3b             	cmp    edx,0x3b
c0008a45:	75 0f                	jne    c0008a56 <VgaText::putchar(char)+0x78>
c0008a47:	50                   	push   eax
c0008a48:	53                   	push   ebx
c0008a49:	e8 48 fb ff ff       	call   c0008596 <VgaText::doANSI_SGR(int)>
c0008a4e:	31 d2                	xor    edx,edx
c0008a50:	59                   	pop    ecx
c0008a51:	58                   	pop    eax
c0008a52:	31 c0                	xor    eax,eax
c0008a54:	eb 09                	jmp    c0008a5f <VgaText::putchar(char)+0x81>
c0008a56:	6b c0 0a             	imul   eax,eax,0xa
c0008a59:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008a5d:	89 fa                	mov    edx,edi
c0008a5f:	46                   	inc    esi
c0008a60:	eb d6                	jmp    c0008a38 <VgaText::putchar(char)+0x5a>
c0008a62:	84 d2                	test   dl,dl
c0008a64:	74 2f                	je     c0008a95 <VgaText::putchar(char)+0xb7>
c0008a66:	50                   	push   eax
c0008a67:	53                   	push   ebx
c0008a68:	e8 29 fb ff ff       	call   c0008596 <VgaText::doANSI_SGR(int)>
c0008a6d:	58                   	pop    eax
c0008a6e:	5a                   	pop    edx
c0008a6f:	eb 24                	jmp    c0008a95 <VgaText::putchar(char)+0xb7>
c0008a71:	83 f8 4a             	cmp    eax,0x4a
c0008a74:	75 1f                	jne    c0008a95 <VgaText::putchar(char)+0xb7>
c0008a76:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a7a:	75 19                	jne    c0008a95 <VgaText::putchar(char)+0xb7>
c0008a7c:	83 ec 0c             	sub    esp,0xc
c0008a7f:	53                   	push   ebx
c0008a80:	e8 95 fd ff ff       	call   c000881a <VgaText::clearScreen()>
c0008a85:	83 c4 0c             	add    esp,0xc
c0008a88:	6a 00                	push   0x0
c0008a8a:	6a 00                	push   0x0
c0008a8c:	53                   	push   ebx
c0008a8d:	e8 26 fd ff ff       	call   c00087b8 <VgaText::setCursor(int, int)>
c0008a92:	83 c4 10             	add    esp,0x10
c0008a95:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a9b:	eb 24                	jmp    c0008ac1 <VgaText::putchar(char)+0xe3>
c0008a9d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008aa0:	83 f8 0e             	cmp    eax,0xe
c0008aa3:	7f 1c                	jg     c0008ac1 <VgaText::putchar(char)+0xe3>
c0008aa5:	8d 48 01             	lea    ecx,[eax+0x1]
c0008aa8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008aab:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008aaf:	eb 10                	jmp    c0008ac1 <VgaText::putchar(char)+0xe3>
c0008ab1:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ab4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ab7:	50                   	push   eax
c0008ab8:	53                   	push   ebx
c0008ab9:	e8 50 fe ff ff       	call   c000890e <VgaText::putchar(char, VgaColour, VgaColour)>
c0008abe:	83 c4 10             	add    esp,0x10
c0008ac1:	5b                   	pop    ebx
c0008ac2:	5e                   	pop    esi
c0008ac3:	5f                   	pop    edi
c0008ac4:	c3                   	ret    
c0008ac5:	90                   	nop

c0008ac6 <VgaText::putx(unsigned int)>:
c0008ac6:	57                   	push   edi
c0008ac7:	b9 11 00 00 00       	mov    ecx,0x11
c0008acc:	56                   	push   esi
c0008acd:	be b6 0f 02 c0       	mov    esi,0xc0020fb6
c0008ad2:	53                   	push   ebx
c0008ad3:	83 ec 20             	sub    esp,0x20
c0008ad6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008ada:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008ade:	fc                   	cld    
c0008adf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008ae1:	be 08 00 00 00       	mov    esi,0x8
c0008ae6:	50                   	push   eax
c0008ae7:	50                   	push   eax
c0008ae8:	89 d8                	mov    eax,ebx
c0008aea:	c1 e8 1c             	shr    eax,0x1c
c0008aed:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008af2:	c1 e3 04             	shl    ebx,0x4
c0008af5:	50                   	push   eax
c0008af6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008afa:	e8 df fe ff ff       	call   c00089de <VgaText::putchar(char)>
c0008aff:	83 c4 10             	add    esp,0x10
c0008b02:	4e                   	dec    esi
c0008b03:	75 e1                	jne    c0008ae6 <VgaText::putx(unsigned int)+0x20>
c0008b05:	83 c4 20             	add    esp,0x20
c0008b08:	5b                   	pop    ebx
c0008b09:	5e                   	pop    esi
c0008b0a:	5f                   	pop    edi
c0008b0b:	c3                   	ret    

c0008b0c <VgaText::puts(char const*)>:
c0008b0c:	53                   	push   ebx
c0008b0d:	83 ec 08             	sub    esp,0x8
c0008b10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008b14:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008b17:	85 c0                	test   eax,eax
c0008b19:	74 12                	je     c0008b2d <VgaText::puts(char const*)+0x21>
c0008b1b:	51                   	push   ecx
c0008b1c:	43                   	inc    ebx
c0008b1d:	51                   	push   ecx
c0008b1e:	50                   	push   eax
c0008b1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b23:	e8 b6 fe ff ff       	call   c00089de <VgaText::putchar(char)>
c0008b28:	83 c4 10             	add    esp,0x10
c0008b2b:	eb e7                	jmp    c0008b14 <VgaText::puts(char const*)+0x8>
c0008b2d:	83 c4 08             	add    esp,0x8
c0008b30:	5b                   	pop    ebx
c0008b31:	c3                   	ret    

c0008b32 <VgaText::write(unsigned long long, void*, int*)>:
c0008b32:	55                   	push   ebp
c0008b33:	57                   	push   edi
c0008b34:	56                   	push   esi
c0008b35:	53                   	push   ebx
c0008b36:	83 ec 0c             	sub    esp,0xc
c0008b39:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008b3d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b41:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008b45:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008b4c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008b4f:	39 eb                	cmp    ebx,ebp
c0008b51:	74 13                	je     c0008b66 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008b53:	50                   	push   eax
c0008b54:	43                   	inc    ebx
c0008b55:	50                   	push   eax
c0008b56:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	e8 7d fe ff ff       	call   c00089de <VgaText::putchar(char)>
c0008b61:	83 c4 10             	add    esp,0x10
c0008b64:	eb e9                	jmp    c0008b4f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b66:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b71:	89 38                	mov    DWORD PTR [eax],edi
c0008b73:	83 c4 0c             	add    esp,0xc
c0008b76:	31 c0                	xor    eax,eax
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	5f                   	pop    edi
c0008b7b:	5d                   	pop    ebp
c0008b7c:	c3                   	ret    
c0008b7d:	90                   	nop

c0008b7e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b7e:	55                   	push   ebp
c0008b7f:	57                   	push   edi
c0008b80:	56                   	push   esi
c0008b81:	53                   	push   ebx
c0008b82:	83 ec 0c             	sub    esp,0xc
c0008b85:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b89:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b8e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b95:	50                   	push   eax
c0008b96:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b9b:	50                   	push   eax
c0008b9c:	e8 c3 fa ff ff       	call   c0008664 <VgaText::combineColours(unsigned char, unsigned char)>
c0008ba1:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008ba5:	5a                   	pop    edx
c0008ba6:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008ba9:	59                   	pop    ecx
c0008baa:	0f b6 f8             	movzx  edi,al
c0008bad:	0f b7 db             	movzx  ebx,bx
c0008bb0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008bbc:	85 c0                	test   eax,eax
c0008bbe:	0f 84 ef 00 00 00    	je     c0008cb3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008bc4:	83 f8 0d             	cmp    eax,0xd
c0008bc7:	75 0c                	jne    c0008bd5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008bc9:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008bd0:	e9 d8 00 00 00       	jmp    c0008cad <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bd5:	83 f8 0a             	cmp    eax,0xa
c0008bd8:	75 44                	jne    c0008c1e <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008bda:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008be1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008be4:	8d 48 01             	lea    ecx,[eax+0x1]
c0008be7:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008bea:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008bed:	75 0f                	jne    c0008bfe <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008bef:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008bf2:	83 ec 0c             	sub    esp,0xc
c0008bf5:	55                   	push   ebp
c0008bf6:	e8 7b fa ff ff       	call   c0008676 <VgaText::scrollScreen()>
c0008bfb:	83 c4 10             	add    esp,0x10
c0008bfe:	83 ec 0c             	sub    esp,0xc
c0008c01:	55                   	push   ebp
c0008c02:	e8 79 f9 ff ff       	call   c0008580 <VgaText::updateCursor()>
c0008c07:	83 c4 10             	add    esp,0x10
c0008c0a:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c0e:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008c11:	0f b7 db             	movzx  ebx,bx
c0008c14:	01 db                	add    ebx,ebx
c0008c16:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c19:	e9 8f 00 00 00       	jmp    c0008cad <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c1e:	83 f8 08             	cmp    eax,0x8
c0008c21:	75 34                	jne    c0008c57 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008c23:	51                   	push   ecx
c0008c24:	51                   	push   ecx
c0008c25:	6a 01                	push   0x1
c0008c27:	55                   	push   ebp
c0008c28:	e8 bf fc ff ff       	call   c00088ec <VgaText::decrementCursor(bool)>
c0008c2d:	5b                   	pop    ebx
c0008c2e:	58                   	pop    eax
c0008c2f:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c32:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c35:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008c38:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008c3b:	6a 20                	push   0x20
c0008c3d:	55                   	push   ebp
c0008c3e:	e8 d5 fa ff ff       	call   c0008718 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c43:	83 c4 20             	add    esp,0x20
c0008c46:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c4a:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008c4d:	0f b7 db             	movzx  ebx,bx
c0008c50:	01 db                	add    ebx,ebx
c0008c52:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c55:	eb 56                	jmp    c0008cad <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c57:	52                   	push   edx
c0008c58:	52                   	push   edx
c0008c59:	57                   	push   edi
c0008c5a:	50                   	push   eax
c0008c5b:	e8 a8 fa ff ff       	call   c0008708 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c60:	83 c4 10             	add    esp,0x10
c0008c63:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c66:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008c6c:	75 1d                	jne    c0008c8b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c6e:	83 ec 0c             	sub    esp,0xc
c0008c71:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c74:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c77:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c7b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c7f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c82:	50                   	push   eax
c0008c83:	e8 20 02 01 00       	call   c0018ea8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c88:	83 c4 20             	add    esp,0x20
c0008c8b:	50                   	push   eax
c0008c8c:	83 c3 02             	add    ebx,0x2
c0008c8f:	50                   	push   eax
c0008c90:	6a 00                	push   0x0
c0008c92:	55                   	push   ebp
c0008c93:	e8 00 fc ff ff       	call   c0008898 <VgaText::incrementCursor(bool)>
c0008c98:	83 c4 10             	add    esp,0x10
c0008c9b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c9f:	75 0c                	jne    c0008cad <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008ca1:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008ca5:	0f b7 db             	movzx  ebx,bx
c0008ca8:	01 db                	add    ebx,ebx
c0008caa:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008cad:	46                   	inc    esi
c0008cae:	e9 06 ff ff ff       	jmp    c0008bb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008cb3:	83 ec 0c             	sub    esp,0xc
c0008cb6:	55                   	push   ebp
c0008cb7:	e8 c4 f8 ff ff       	call   c0008580 <VgaText::updateCursor()>
c0008cbc:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008cc3:	83 c4 1c             	add    esp,0x1c
c0008cc6:	5b                   	pop    ebx
c0008cc7:	5e                   	pop    esi
c0008cc8:	5f                   	pop    edi
c0008cc9:	5d                   	pop    ebp
c0008cca:	c3                   	ret    
c0008ccb:	90                   	nop

c0008ccc <VgaText::VgaText(char const*)>:
c0008ccc:	56                   	push   esi
c0008ccd:	53                   	push   ebx
c0008cce:	83 ec 04             	sub    esp,0x4
c0008cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd5:	83 ec 08             	sub    esp,0x8
c0008cd8:	6a 00                	push   0x0
c0008cda:	50                   	push   eax
c0008cdb:	e8 26 05 00 00       	call   c0009206 <UnixFile::UnixFile(int)>
c0008ce0:	83 c4 10             	add    esp,0x10
c0008ce3:	ba dc 0f 02 c0       	mov    edx,0xc0020fdc
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	89 10                	mov    DWORD PTR [eax],edx
c0008cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfd:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d08:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d10:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d18:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d2e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d39:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d44:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008d4b:	83 ec 0c             	sub    esp,0xc
c0008d4e:	6a 01                	push   0x1
c0008d50:	e8 00 09 00 00       	call   c0009655 <Virt::allocateKernelVirtualPages(int)>
c0008d55:	83 c4 10             	add    esp,0x10
c0008d58:	89 c2                	mov    edx,eax
c0008d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d5e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d61:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d6e:	89 c6                	mov    esi,eax
c0008d70:	e8 cd f0 ff ff       	call   c0007e42 <Phys::allocatePage()>
c0008d75:	68 05 0c 00 00       	push   0xc05
c0008d7a:	56                   	push   esi
c0008d7b:	50                   	push   eax
c0008d7c:	53                   	push   ebx
c0008d7d:	e8 dc 0f 00 00       	call   c0009d5e <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d82:	83 c4 10             	add    esp,0x10
c0008d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d8c:	83 ec 04             	sub    esp,0x4
c0008d8f:	68 a0 0f 00 00       	push   0xfa0
c0008d94:	6a 00                	push   0x0
c0008d96:	50                   	push   eax
c0008d97:	e8 54 77 ff ff       	call   c00004f0 <memset>
c0008d9c:	83 c4 10             	add    esp,0x10
c0008d9f:	83 ec 04             	sub    esp,0x4
c0008da2:	6a 00                	push   0x0
c0008da4:	6a 07                	push   0x7
c0008da6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008daa:	e8 7b f8 ff ff       	call   c000862a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	83 ec 04             	sub    esp,0x4
c0008db5:	6a 00                	push   0x0
c0008db7:	6a 00                	push   0x0
c0008db9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008dbd:	e8 f6 f9 ff ff       	call   c00087b8 <VgaText::setCursor(int, int)>
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 ec 0c             	sub    esp,0xc
c0008dc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008dcc:	e8 49 fa ff ff       	call   c000881a <VgaText::clearScreen()>
c0008dd1:	83 c4 10             	add    esp,0x10
c0008dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dd8:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008de0:	05 82 00 00 00       	add    eax,0x82
c0008de5:	83 ec 04             	sub    esp,0x4
c0008de8:	68 80 00 00 00       	push   0x80
c0008ded:	6a 00                	push   0x0
c0008def:	50                   	push   eax
c0008df0:	e8 fb 76 ff ff       	call   c00004f0 <memset>
c0008df5:	83 c4 10             	add    esp,0x10
c0008df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dfc:	05 02 01 00 00       	add    eax,0x102
c0008e01:	83 ec 04             	sub    esp,0x4
c0008e04:	68 80 00 00 00       	push   0x80
c0008e09:	6a 00                	push   0x0
c0008e0b:	50                   	push   eax
c0008e0c:	e8 df 76 ff ff       	call   c00004f0 <memset>
c0008e11:	83 c4 10             	add    esp,0x10
c0008e14:	90                   	nop
c0008e15:	83 c4 04             	add    esp,0x4
c0008e18:	5b                   	pop    ebx
c0008e19:	5e                   	pop    esi
c0008e1a:	c3                   	ret    
c0008e1b:	90                   	nop

c0008e1c <VgaText::receiveKey(unsigned char)>:
c0008e1c:	55                   	push   ebp
c0008e1d:	57                   	push   edi
c0008e1e:	56                   	push   esi
c0008e1f:	53                   	push   ebx
c0008e20:	83 ec 2c             	sub    esp,0x2c
c0008e23:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008e27:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008e2b:	89 fd                	mov    ebp,edi
c0008e2d:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008e33:	0f 84 48 01 00 00    	je     c0008f81 <VgaText::receiveKey(unsigned char)+0x165>
c0008e39:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008e3f:	83 fd 08             	cmp    ebp,0x8
c0008e42:	75 6a                	jne    c0008eae <VgaText::receiveKey(unsigned char)+0x92>
c0008e44:	83 ec 0c             	sub    esp,0xc
c0008e47:	56                   	push   esi
c0008e48:	e8 33 77 ff ff       	call   c0000580 <strlen>
c0008e4d:	83 c4 10             	add    esp,0x10
c0008e50:	85 c0                	test   eax,eax
c0008e52:	0f 84 ef 00 00 00    	je     c0008f47 <VgaText::receiveKey(unsigned char)+0x12b>
c0008e58:	50                   	push   eax
c0008e59:	50                   	push   eax
c0008e5a:	6a 08                	push   0x8
c0008e5c:	53                   	push   ebx
c0008e5d:	e8 7c fb ff ff       	call   c00089de <VgaText::putchar(char)>
c0008e62:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e65:	e8 16 77 ff ff       	call   c0000580 <strlen>
c0008e6a:	83 c4 10             	add    esp,0x10
c0008e6d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e75:	83 fa 1f             	cmp    edx,0x1f
c0008e78:	89 d0                	mov    eax,edx
c0008e7a:	7f 1c                	jg     c0008e98 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e7c:	83 e8 08             	sub    eax,0x8
c0008e7f:	3c 02                	cmp    al,0x2
c0008e81:	76 15                	jbe    c0008e98 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e83:	83 fa 0d             	cmp    edx,0xd
c0008e86:	74 10                	je     c0008e98 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e88:	57                   	push   edi
c0008e89:	57                   	push   edi
c0008e8a:	68 c7 0f 02 c0       	push   0xc0020fc7
c0008e8f:	53                   	push   ebx
c0008e90:	e8 77 fc ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c0008e95:	83 c4 10             	add    esp,0x10
c0008e98:	83 ec 0c             	sub    esp,0xc
c0008e9b:	56                   	push   esi
c0008e9c:	e8 df 76 ff ff       	call   c0000580 <strlen>
c0008ea1:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ea9:	e9 96 00 00 00       	jmp    c0008f44 <VgaText::receiveKey(unsigned char)+0x128>
c0008eae:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008eb4:	83 ec 0c             	sub    esp,0xc
c0008eb7:	50                   	push   eax
c0008eb8:	e8 c3 76 ff ff       	call   c0000580 <strlen>
c0008ebd:	89 34 24             	mov    DWORD PTR [esp],esi
c0008ec0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ec4:	e8 b7 76 ff ff       	call   c0000580 <strlen>
c0008ec9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008ecd:	83 c4 10             	add    esp,0x10
c0008ed0:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008ed4:	3d 80 00 00 00       	cmp    eax,0x80
c0008ed9:	0f 87 a2 00 00 00    	ja     c0008f81 <VgaText::receiveKey(unsigned char)+0x165>
c0008edf:	8d 47 ff             	lea    eax,[edi-0x1]
c0008ee2:	3c 1e                	cmp    al,0x1e
c0008ee4:	77 35                	ja     c0008f1b <VgaText::receiveKey(unsigned char)+0xff>
c0008ee6:	8d 47 f7             	lea    eax,[edi-0x9]
c0008ee9:	3c 01                	cmp    al,0x1
c0008eeb:	76 2e                	jbe    c0008f1b <VgaText::receiveKey(unsigned char)+0xff>
c0008eed:	83 fd 0d             	cmp    ebp,0xd
c0008ef0:	74 29                	je     c0008f1b <VgaText::receiveKey(unsigned char)+0xff>
c0008ef2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ef5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ef8:	68 cd 0f 02 c0       	push   0xc0020fcd
c0008efd:	53                   	push   ebx
c0008efe:	e8 7b fc ff ff       	call   c0008b7e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008f03:	8d 47 40             	lea    eax,[edi+0x40]
c0008f06:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008f09:	0f b6 c0             	movzx  eax,al
c0008f0c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008f0f:	50                   	push   eax
c0008f10:	53                   	push   ebx
c0008f11:	e8 f8 f9 ff ff       	call   c000890e <VgaText::putchar(char, VgaColour, VgaColour)>
c0008f16:	83 c4 20             	add    esp,0x20
c0008f19:	eb 11                	jmp    c0008f2c <VgaText::receiveKey(unsigned char)+0x110>
c0008f1b:	51                   	push   ecx
c0008f1c:	89 f8                	mov    eax,edi
c0008f1e:	51                   	push   ecx
c0008f1f:	0f be c0             	movsx  eax,al
c0008f22:	50                   	push   eax
c0008f23:	53                   	push   ebx
c0008f24:	e8 b5 fa ff ff       	call   c00089de <VgaText::putchar(char)>
c0008f29:	83 c4 10             	add    esp,0x10
c0008f2c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008f31:	89 f8                	mov    eax,edi
c0008f33:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008f37:	52                   	push   edx
c0008f38:	52                   	push   edx
c0008f39:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008f3d:	50                   	push   eax
c0008f3e:	56                   	push   esi
c0008f3f:	e8 2c 79 ff ff       	call   c0000870 <strcat>
c0008f44:	83 c4 10             	add    esp,0x10
c0008f47:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008f4e:	75 0f                	jne    c0008f5f <VgaText::receiveKey(unsigned char)+0x143>
c0008f50:	83 fd 1c             	cmp    ebp,0x1c
c0008f53:	77 2c                	ja     c0008f81 <VgaText::receiveKey(unsigned char)+0x165>
c0008f55:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f5a:	0f a3 e8             	bt     eax,ebp
c0008f5d:	73 22                	jae    c0008f81 <VgaText::receiveKey(unsigned char)+0x165>
c0008f5f:	50                   	push   eax
c0008f60:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f66:	50                   	push   eax
c0008f67:	56                   	push   esi
c0008f68:	53                   	push   ebx
c0008f69:	e8 02 79 ff ff       	call   c0000870 <strcat>
c0008f6e:	83 c4 0c             	add    esp,0xc
c0008f71:	68 80 00 00 00       	push   0x80
c0008f76:	6a 00                	push   0x0
c0008f78:	56                   	push   esi
c0008f79:	e8 72 75 ff ff       	call   c00004f0 <memset>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	83 c4 2c             	add    esp,0x2c
c0008f84:	5b                   	pop    ebx
c0008f85:	5e                   	pop    esi
c0008f86:	5f                   	pop    edi
c0008f87:	5d                   	pop    ebp
c0008f88:	c3                   	ret    
c0008f89:	90                   	nop

c0008f8a <VgaText::doUpdate()>:
c0008f8a:	c3                   	ret    
c0008f8b:	90                   	nop

c0008f8c <TSS::TSS()>:
c0008f8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f90:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f97:	90                   	nop
c0008f98:	c3                   	ret    
c0008f99:	90                   	nop
c0008f9a:	66 90                	xchg   ax,ax

c0008f9c <TSS::setESP(unsigned long)>:
c0008f9c:	55                   	push   ebp
c0008f9d:	89 e5                	mov    ebp,esp
c0008f9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fa8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fab:	90                   	nop
c0008fac:	5d                   	pop    ebp
c0008fad:	c3                   	ret    
c0008fae:	66 90                	xchg   ax,ax

c0008fb0 <TSS::flush()>:
c0008fb0:	55                   	push   ebp
c0008fb1:	89 e5                	mov    ebp,esp
c0008fb3:	83 ec 10             	sub    esp,0x10
c0008fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fbb:	83 c8 03             	or     eax,0x3
c0008fbe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008fc2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008fc6:	66 89 d0             	mov    ax,dx
c0008fc9:	0f 00 d8             	ltr    ax
c0008fcc:	90                   	nop
c0008fcd:	c9                   	leave  
c0008fce:	c3                   	ret    
c0008fcf:	90                   	nop

c0008fd0 <TSS::setup(unsigned long, unsigned long)>:
c0008fd0:	55                   	push   ebp
c0008fd1:	89 e5                	mov    ebp,esp
c0008fd3:	83 ec 18             	sub    esp,0x18
c0008fd6:	83 ec 0c             	sub    esp,0xc
c0008fd9:	6a 68                	push   0x68
c0008fdb:	e8 53 eb ff ff       	call   c0007b33 <malloc>
c0008fe0:	83 c4 10             	add    esp,0x10
c0008fe3:	89 c2                	mov    edx,eax
c0008fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008feb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff1:	83 ec 04             	sub    esp,0x4
c0008ff4:	6a 68                	push   0x68
c0008ff6:	6a 00                	push   0x0
c0008ff8:	50                   	push   eax
c0008ff9:	e8 f2 74 ff ff       	call   c00004f0 <memset>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009064:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009067:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000906d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009070:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009073:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009076:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000907c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000907f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009082:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009088:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000908b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009092:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009095:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009098:	0f 20 da             	mov    edx,cr3
c000909b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000909e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00090a1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00090a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090aa:	83 ec 08             	sub    esp,0x8
c00090ad:	50                   	push   eax
c00090ae:	8d 45 ec             	lea    eax,[ebp-0x14]
c00090b1:	50                   	push   eax
c00090b2:	e8 ed e2 ff ff       	call   c00073a4 <GDTEntry::setBase(unsigned int)>
c00090b7:	83 c4 10             	add    esp,0x10
c00090ba:	83 ec 08             	sub    esp,0x8
c00090bd:	6a 68                	push   0x68
c00090bf:	8d 45 ec             	lea    eax,[ebp-0x14]
c00090c2:	50                   	push   eax
c00090c3:	e8 f8 e2 ff ff       	call   c00073c0 <GDTEntry::setLimit(unsigned int)>
c00090c8:	83 c4 10             	add    esp,0x10
c00090cb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00090cf:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090d2:	83 e0 0f             	and    eax,0xf
c00090d5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090d8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090db:	83 c8 40             	or     eax,0x40
c00090de:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090e1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090ec:	05 78 01 00 00       	add    eax,0x178
c00090f1:	83 ec 04             	sub    esp,0x4
c00090f4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090f7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090fa:	50                   	push   eax
c00090fb:	e8 f4 e2 ff ff       	call   c00073f4 <GDT::addEntry(GDTEntry)>
c0009100:	83 c4 10             	add    esp,0x10
c0009103:	89 c2                	mov    edx,eax
c0009105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009108:	89 10                	mov    DWORD PTR [eax],edx
c000910a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000910f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009115:	05 78 01 00 00       	add    eax,0x178
c000911a:	83 ec 0c             	sub    esp,0xc
c000911d:	50                   	push   eax
c000911e:	e8 fb e2 ff ff       	call   c000741e <GDT::flush()>
c0009123:	83 c4 10             	add    esp,0x10
c0009126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009129:	8b 00                	mov    eax,DWORD PTR [eax]
c000912b:	c9                   	leave  
c000912c:	c3                   	ret    
c000912d:	90                   	nop

c000912e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000912e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009132:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009136:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009139:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000913e:	75 08                	jne    c0009148 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009140:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009146:	eb 38                	jmp    c0009180 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009148:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000914d:	75 17                	jne    c0009166 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000914f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009154:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009157:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000915d:	8b 10                	mov    edx,DWORD PTR [eax]
c000915f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009163:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009166:	89 c1                	mov    ecx,eax
c0009168:	83 e1 fd             	and    ecx,0xfffffffd
c000916b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009171:	74 cd                	je     c0009140 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009173:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009178:	83 e0 ef             	and    eax,0xffffffef
c000917b:	83 f8 08             	cmp    eax,0x8
c000917e:	76 c0                	jbe    c0009140 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009180:	31 c0                	xor    eax,eax
c0009182:	c3                   	ret    
c0009183:	90                   	nop

c0009184 <ReservedFilename::isAtty()>:
c0009184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009188:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000918b:	31 c0                	xor    eax,eax
c000918d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009193:	74 09                	je     c000919e <ReservedFilename::isAtty()+0x1a>
c0009195:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000919b:	0f 94 c0             	sete   al
c000919e:	c3                   	ret    
c000919f:	90                   	nop

c00091a0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00091a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00091a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00091ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091af:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00091b4:	75 08                	jne    c00091be <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00091b6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00091bc:	eb 3d                	jmp    c00091fb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091be:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00091c3:	75 17                	jne    c00091dc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00091c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00091ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00091cd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00091d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00091d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091d9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091dc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091e1:	75 04                	jne    c00091e7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091e3:	89 0a                	mov    DWORD PTR [edx],ecx
c00091e5:	eb 14                	jmp    c00091fb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091e7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091ec:	74 c8                	je     c00091b6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091ee:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091f3:	83 e0 ef             	and    eax,0xffffffef
c00091f6:	83 f8 08             	cmp    eax,0x8
c00091f9:	76 bb                	jbe    c00091b6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091fb:	31 c0                	xor    eax,eax
c00091fd:	c3                   	ret    

c00091fe <UnixFile::getFileDescriptor()>:
c00091fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009202:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009205:	c3                   	ret    

c0009206 <UnixFile::UnixFile(int)>:
c0009206:	53                   	push   ebx
c0009207:	83 ec 28             	sub    esp,0x28
c000920a:	ba a4 10 02 c0       	mov    edx,0xc00210a4
c000920f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009213:	89 10                	mov    DWORD PTR [eax],edx
c0009215:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000921d:	0f 8f 90 01 00 00    	jg     c00093b3 <UnixFile::UnixFile(int)+0x1ad>
c0009223:	a1 60 38 02 c0       	mov    eax,ds:0xc0023860
c0009228:	8d 50 01             	lea    edx,[eax+0x1]
c000922b:	89 15 60 38 02 c0    	mov    DWORD PTR ds:0xc0023860,edx
c0009231:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009235:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009238:	83 ec 08             	sub    esp,0x8
c000923b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000923f:	68 98 6f 02 c0       	push   0xc0026f98
c0009244:	e8 cf 68 01 00       	call   c001fb18 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009249:	83 c4 10             	add    esp,0x10
c000924c:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009251:	83 f0 01             	xor    eax,0x1
c0009254:	0f b6 c0             	movzx  eax,al
c0009257:	85 c0                	test   eax,eax
c0009259:	0f 84 55 01 00 00    	je     c00093b4 <UnixFile::UnixFile(int)+0x1ae>
c000925f:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c0009266:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009275:	e8 b9 e8 ff ff       	call   c0007b33 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 03 ff ff 0f       	push   0xfffff03
c0009287:	53                   	push   ebx
c0009288:	e8 2d 01 00 00       	call   c00093ba <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c0009296:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a5:	e8 89 e8 ff ff       	call   c0007b33 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 01 ff ff 0f       	push   0xfffff01
c00092b7:	53                   	push   ebx
c00092b8:	e8 fd 00 00 00       	call   c00093ba <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c00092c6:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00092ce:	83 ec 0c             	sub    esp,0xc
c00092d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092d5:	e8 59 e8 ff ff       	call   c0007b33 <malloc>
c00092da:	83 c4 10             	add    esp,0x10
c00092dd:	89 c3                	mov    ebx,eax
c00092df:	83 ec 08             	sub    esp,0x8
c00092e2:	68 00 ff ff 0f       	push   0xfffff00
c00092e7:	53                   	push   ebx
c00092e8:	e8 cd 00 00 00       	call   c00093ba <ReservedFilename::ReservedFilename(int)>
c00092ed:	83 c4 10             	add    esp,0x10
c00092f0:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092f6:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092fe:	83 ec 0c             	sub    esp,0xc
c0009301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009305:	e8 29 e8 ff ff       	call   c0007b33 <malloc>
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	89 c3                	mov    ebx,eax
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	68 02 ff ff 0f       	push   0xfffff02
c0009317:	53                   	push   ebx
c0009318:	e8 9d 00 00 00       	call   c00093ba <ReservedFilename::ReservedFilename(int)>
c000931d:	83 c4 10             	add    esp,0x10
c0009320:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c0009326:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000932e:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009333:	7f 7f                	jg     c00093b4 <UnixFile::UnixFile(int)+0x1ae>
c0009335:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000933d:	83 ec 0c             	sub    esp,0xc
c0009340:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009344:	e8 ea e7 ff ff       	call   c0007b33 <malloc>
c0009349:	83 c4 10             	add    esp,0x10
c000934c:	89 c3                	mov    ebx,eax
c000934e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009352:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009357:	83 ec 08             	sub    esp,0x8
c000935a:	50                   	push   eax
c000935b:	53                   	push   ebx
c000935c:	e8 59 00 00 00       	call   c00093ba <ReservedFilename::ReservedFilename(int)>
c0009361:	83 c4 10             	add    esp,0x10
c0009364:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009368:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c000936f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009377:	83 ec 0c             	sub    esp,0xc
c000937a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937e:	e8 b0 e7 ff ff       	call   c0007b33 <malloc>
c0009383:	83 c4 10             	add    esp,0x10
c0009386:	89 c3                	mov    ebx,eax
c0009388:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000938c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009391:	83 ec 08             	sub    esp,0x8
c0009394:	50                   	push   eax
c0009395:	53                   	push   ebx
c0009396:	e8 1f 00 00 00       	call   c00093ba <ReservedFilename::ReservedFilename(int)>
c000939b:	83 c4 10             	add    esp,0x10
c000939e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00093a2:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c00093a9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00093ae:	e9 7b ff ff ff       	jmp    c000932e <UnixFile::UnixFile(int)+0x128>
c00093b3:	90                   	nop
c00093b4:	83 c4 28             	add    esp,0x28
c00093b7:	5b                   	pop    ebx
c00093b8:	c3                   	ret    
c00093b9:	90                   	nop

c00093ba <ReservedFilename::ReservedFilename(int)>:
c00093ba:	83 ec 0c             	sub    esp,0xc
c00093bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c1:	83 ec 08             	sub    esp,0x8
c00093c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093c8:	50                   	push   eax
c00093c9:	e8 38 fe ff ff       	call   c0009206 <UnixFile::UnixFile(int)>
c00093ce:	83 c4 10             	add    esp,0x10
c00093d1:	ba c0 10 02 c0       	mov    edx,0xc00210c0
c00093d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093da:	89 10                	mov    DWORD PTR [eax],edx
c00093dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00093e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093e7:	90                   	nop
c00093e8:	83 c4 0c             	add    esp,0xc
c00093eb:	c3                   	ret    

c00093ec <UnixFile::~UnixFile()>:
c00093ec:	83 ec 1c             	sub    esp,0x1c
c00093ef:	ba a4 10 02 c0       	mov    edx,0xc00210a4
c00093f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093f8:	89 10                	mov    DWORD PTR [eax],edx
c00093fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009401:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009406:	7f 76                	jg     c000947e <UnixFile::~UnixFile()+0x92>
c0009408:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009410:	83 ec 0c             	sub    esp,0xc
c0009413:	68 98 6f 02 c0       	push   0xc0026f98
c0009418:	e8 cf 67 01 00       	call   c001fbec <LinkedList<UnixFile>::getFirstElement()>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 98 6f 02 c0       	push   0xc0026f98
c000942c:	e8 c3 67 01 00       	call   c001fbf4 <LinkedList<UnixFile>::removeFirst()>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009438:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000943c:	74 43                	je     c0009481 <UnixFile::~UnixFile()+0x95>
c000943e:	83 ec 08             	sub    esp,0x8
c0009441:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009445:	68 98 6f 02 c0       	push   0xc0026f98
c000944a:	e8 c9 66 01 00       	call   c001fb18 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009456:	8d 50 01             	lea    edx,[eax+0x1]
c0009459:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009462:	0f 94 c0             	sete   al
c0009465:	0f b6 c0             	movzx  eax,al
c0009468:	85 c0                	test   eax,eax
c000946a:	74 a4                	je     c0009410 <UnixFile::~UnixFile()+0x24>
c000946c:	83 ec 0c             	sub    esp,0xc
c000946f:	68 7c 10 02 c0       	push   0xc002107c
c0009474:	e8 c6 81 00 00       	call   c001163f <KePanic(char const*)>
c0009479:	83 c4 10             	add    esp,0x10
c000947c:	eb 92                	jmp    c0009410 <UnixFile::~UnixFile()+0x24>
c000947e:	90                   	nop
c000947f:	eb 01                	jmp    c0009482 <UnixFile::~UnixFile()+0x96>
c0009481:	90                   	nop
c0009482:	90                   	nop
c0009483:	83 c4 1c             	add    esp,0x1c
c0009486:	c3                   	ret    
c0009487:	90                   	nop

c0009488 <UnixFile::~UnixFile()>:
c0009488:	83 ec 0c             	sub    esp,0xc
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009492:	e8 55 ff ff ff       	call   c00093ec <UnixFile::~UnixFile()>
c0009497:	83 c4 10             	add    esp,0x10
c000949a:	83 ec 08             	sub    esp,0x8
c000949d:	6a 0c                	push   0xc
c000949f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a3:	e8 c4 13 00 00       	call   c000a86c <operator delete(void*, unsigned long)>
c00094a8:	83 c4 10             	add    esp,0x10
c00094ab:	83 c4 0c             	add    esp,0xc
c00094ae:	c3                   	ret    
c00094af:	90                   	nop

c00094b0 <ReservedFilename::~ReservedFilename()>:
c00094b0:	83 ec 0c             	sub    esp,0xc
c00094b3:	ba c0 10 02 c0       	mov    edx,0xc00210c0
c00094b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094bc:	89 10                	mov    DWORD PTR [eax],edx
c00094be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c2:	83 ec 0c             	sub    esp,0xc
c00094c5:	50                   	push   eax
c00094c6:	e8 21 ff ff ff       	call   c00093ec <UnixFile::~UnixFile()>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	90                   	nop
c00094cf:	83 c4 0c             	add    esp,0xc
c00094d2:	c3                   	ret    
c00094d3:	90                   	nop

c00094d4 <ReservedFilename::~ReservedFilename()>:
c00094d4:	83 ec 0c             	sub    esp,0xc
c00094d7:	83 ec 0c             	sub    esp,0xc
c00094da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094de:	e8 cd ff ff ff       	call   c00094b0 <ReservedFilename::~ReservedFilename()>
c00094e3:	83 c4 10             	add    esp,0x10
c00094e6:	83 ec 08             	sub    esp,0x8
c00094e9:	6a 0c                	push   0xc
c00094eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094ef:	e8 78 13 00 00       	call   c000a86c <operator delete(void*, unsigned long)>
c00094f4:	83 c4 10             	add    esp,0x10
c00094f7:	83 c4 0c             	add    esp,0xc
c00094fa:	c3                   	ret    

c00094fb <KeGetFileFromDescriptor(int)>:
c00094fb:	53                   	push   ebx
c00094fc:	83 ec 08             	sub    esp,0x8
c00094ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009503:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009509:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000950f:	7f 2c                	jg     c000953d <KeGetFileFromDescriptor(int)+0x42>
c0009511:	83 ec 0c             	sub    esp,0xc
c0009514:	68 98 6f 02 c0       	push   0xc0026f98
c0009519:	e8 ce 66 01 00       	call   c001fbec <LinkedList<UnixFile>::getFirstElement()>
c000951e:	83 c4 10             	add    esp,0x10
c0009521:	85 c0                	test   eax,eax
c0009523:	75 04                	jne    c0009529 <KeGetFileFromDescriptor(int)+0x2e>
c0009525:	31 c0                	xor    eax,eax
c0009527:	eb 6e                	jmp    c0009597 <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000952c:	74 69                	je     c0009597 <KeGetFileFromDescriptor(int)+0x9c>
c000952e:	52                   	push   edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	68 98 6f 02 c0       	push   0xc0026f98
c0009536:	e8 5b 67 01 00       	call   c001fc96 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000953b:	eb e1                	jmp    c000951e <KeGetFileFromDescriptor(int)+0x23>
c000953d:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009543:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c0009548:	74 4d                	je     c0009597 <KeGetFileFromDescriptor(int)+0x9c>
c000954a:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009550:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009555:	74 40                	je     c0009597 <KeGetFileFromDescriptor(int)+0x9c>
c0009557:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000955d:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009562:	74 33                	je     c0009597 <KeGetFileFromDescriptor(int)+0x9c>
c0009564:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000956a:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c000956f:	74 26                	je     c0009597 <KeGetFileFromDescriptor(int)+0x9c>
c0009571:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009577:	83 f8 08             	cmp    eax,0x8
c000957a:	77 09                	ja     c0009585 <KeGetFileFromDescriptor(int)+0x8a>
c000957c:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c0009583:	eb 12                	jmp    c0009597 <KeGetFileFromDescriptor(int)+0x9c>
c0009585:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000958b:	83 fb 08             	cmp    ebx,0x8
c000958e:	77 95                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x2a>
c0009590:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c0009597:	83 c4 08             	add    esp,0x8
c000959a:	5b                   	pop    ebx
c000959b:	c3                   	ret    

c000959c <__static_initialization_and_destruction_0(int, int)>:
c000959c:	83 ec 0c             	sub    esp,0xc
c000959f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00095a4:	75 34                	jne    c00095da <__static_initialization_and_destruction_0(int, int)+0x3e>
c00095a6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00095ae:	75 2a                	jne    c00095da <__static_initialization_and_destruction_0(int, int)+0x3e>
c00095b0:	83 ec 0c             	sub    esp,0xc
c00095b3:	68 98 6f 02 c0       	push   0xc0026f98
c00095b8:	e8 19 65 01 00       	call   c001fad6 <LinkedList<UnixFile>::LinkedList()>
c00095bd:	83 c4 10             	add    esp,0x10
c00095c0:	83 ec 04             	sub    esp,0x4
c00095c3:	68 e4 37 02 c0       	push   0xc00237e4
c00095c8:	68 98 6f 02 c0       	push   0xc0026f98
c00095cd:	68 d4 fa 01 c0       	push   0xc001fad4
c00095d2:	e8 45 12 00 00       	call   c000a81c <__cxa_atexit>
c00095d7:	83 c4 10             	add    esp,0x10
c00095da:	90                   	nop
c00095db:	83 c4 0c             	add    esp,0xc
c00095de:	c3                   	ret    

c00095df <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00095df:	83 ec 0c             	sub    esp,0xc
c00095e2:	83 ec 08             	sub    esp,0x8
c00095e5:	68 ff ff 00 00       	push   0xffff
c00095ea:	6a 01                	push   0x1
c00095ec:	e8 ab ff ff ff       	call   c000959c <__static_initialization_and_destruction_0(int, int)>
c00095f1:	83 c4 10             	add    esp,0x10
c00095f4:	83 c4 0c             	add    esp,0xc
c00095f7:	c3                   	ret    

c00095f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095f8:	53                   	push   ebx
c00095f9:	8b 15 68 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023868
c00095ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009603:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009607:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c000960d:	89 d8                	mov    eax,ebx
c000960f:	d1 e8                	shr    eax,1
c0009611:	01 d0                	add    eax,edx
c0009613:	80 e3 01             	and    bl,0x1
c0009616:	8a 10                	mov    dl,BYTE PTR [eax]
c0009618:	75 09                	jne    c0009623 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000961a:	83 e2 f0             	and    edx,0xfffffff0
c000961d:	09 ca                	or     edx,ecx
c000961f:	88 10                	mov    BYTE PTR [eax],dl
c0009621:	5b                   	pop    ebx
c0009622:	c3                   	ret    
c0009623:	0f b6 c9             	movzx  ecx,cl
c0009626:	83 e2 0f             	and    edx,0xf
c0009629:	c1 e1 04             	shl    ecx,0x4
c000962c:	09 ca                	or     edx,ecx
c000962e:	88 10                	mov    BYTE PTR [eax],dl
c0009630:	5b                   	pop    ebx
c0009631:	c3                   	ret    

c0009632 <Virt::getPageState(unsigned long)>:
c0009632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009636:	8b 0d 68 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023868
c000963c:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009642:	89 d0                	mov    eax,edx
c0009644:	d1 e8                	shr    eax,1
c0009646:	80 e2 01             	and    dl,0x1
c0009649:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000964c:	74 03                	je     c0009651 <Virt::getPageState(unsigned long)+0x1f>
c000964e:	c1 e8 04             	shr    eax,0x4
c0009651:	83 e0 0f             	and    eax,0xf
c0009654:	c3                   	ret    

c0009655 <Virt::allocateKernelVirtualPages(int)>:
c0009655:	55                   	push   ebp
c0009656:	57                   	push   edi
c0009657:	56                   	push   esi
c0009658:	31 f6                	xor    esi,esi
c000965a:	53                   	push   ebx
c000965b:	31 db                	xor    ebx,ebx
c000965d:	83 ec 1c             	sub    esp,0x1c
c0009660:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009665:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009669:	8b 2d 64 38 02 c0    	mov    ebp,DWORD PTR ds:0xc0023864
c000966f:	55                   	push   ebp
c0009670:	e8 bd ff ff ff       	call   c0009632 <Virt::getPageState(unsigned long)>
c0009675:	5a                   	pop    edx
c0009676:	84 c0                	test   al,al
c0009678:	75 3d                	jne    c00096b7 <Virt::allocateKernelVirtualPages(int)+0x62>
c000967a:	85 db                	test   ebx,ebx
c000967c:	0f 44 f5             	cmove  esi,ebp
c000967f:	83 c3 01             	add    ebx,0x1
c0009682:	39 fb                	cmp    ebx,edi
c0009684:	74 5e                	je     c00096e4 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009686:	83 c5 01             	add    ebp,0x1
c0009689:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000968f:	76 33                	jbe    c00096c4 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009691:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009696:	c7 05 64 38 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023864,0xc8000
c00096a0:	75 2a                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0x77>
c00096a2:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00096a7:	bd 00 80 0c 00       	mov    ebp,0xc8000
c00096ac:	55                   	push   ebp
c00096ad:	e8 80 ff ff ff       	call   c0009632 <Virt::getPageState(unsigned long)>
c00096b2:	5a                   	pop    edx
c00096b3:	84 c0                	test   al,al
c00096b5:	74 c3                	je     c000967a <Virt::allocateKernelVirtualPages(int)+0x25>
c00096b7:	83 c5 01             	add    ebp,0x1
c00096ba:	31 db                	xor    ebx,ebx
c00096bc:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00096c2:	77 cd                	ja     c0009691 <Virt::allocateKernelVirtualPages(int)+0x3c>
c00096c4:	89 2d 64 38 02 c0    	mov    DWORD PTR ds:0xc0023864,ebp
c00096ca:	eb a3                	jmp    c000966f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00096cc:	83 ec 0c             	sub    esp,0xc
c00096cf:	68 d4 10 02 c0       	push   0xc00210d4
c00096d4:	e8 66 7f 00 00       	call   c001163f <KePanic(char const*)>
c00096d9:	8b 2d 64 38 02 c0    	mov    ebp,DWORD PTR ds:0xc0023864
c00096df:	83 c4 10             	add    esp,0x10
c00096e2:	eb 8b                	jmp    c000966f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00096e4:	89 35 64 38 02 c0    	mov    DWORD PTR ds:0xc0023864,esi
c00096ea:	83 fb 01             	cmp    ebx,0x1
c00096ed:	74 63                	je     c0009752 <Virt::allocateKernelVirtualPages(int)+0xfd>
c00096ef:	85 ff                	test   edi,edi
c00096f1:	74 41                	je     c0009734 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096f3:	89 f0                	mov    eax,esi
c00096f5:	31 db                	xor    ebx,ebx
c00096f7:	8d 6f ff             	lea    ebp,[edi-0x1]
c00096fa:	eb 16                	jmp    c0009712 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00096fc:	6a 01                	push   0x1
c00096fe:	83 c3 01             	add    ebx,0x1
c0009701:	50                   	push   eax
c0009702:	e8 f1 fe ff ff       	call   c00095f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009707:	39 fb                	cmp    ebx,edi
c0009709:	58                   	pop    eax
c000970a:	5a                   	pop    edx
c000970b:	74 27                	je     c0009734 <Virt::allocateKernelVirtualPages(int)+0xdf>
c000970d:	a1 64 38 02 c0       	mov    eax,ds:0xc0023864
c0009712:	8d 50 01             	lea    edx,[eax+0x1]
c0009715:	85 db                	test   ebx,ebx
c0009717:	89 15 64 38 02 c0    	mov    DWORD PTR ds:0xc0023864,edx
c000971d:	74 22                	je     c0009741 <Virt::allocateKernelVirtualPages(int)+0xec>
c000971f:	39 dd                	cmp    ebp,ebx
c0009721:	75 d9                	jne    c00096fc <Virt::allocateKernelVirtualPages(int)+0xa7>
c0009723:	6a 03                	push   0x3
c0009725:	83 c3 01             	add    ebx,0x1
c0009728:	50                   	push   eax
c0009729:	e8 ca fe ff ff       	call   c00095f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000972e:	39 fb                	cmp    ebx,edi
c0009730:	59                   	pop    ecx
c0009731:	58                   	pop    eax
c0009732:	75 d9                	jne    c000970d <Virt::allocateKernelVirtualPages(int)+0xb8>
c0009734:	83 c4 1c             	add    esp,0x1c
c0009737:	89 f0                	mov    eax,esi
c0009739:	5b                   	pop    ebx
c000973a:	c1 e0 0c             	shl    eax,0xc
c000973d:	5e                   	pop    esi
c000973e:	5f                   	pop    edi
c000973f:	5d                   	pop    ebp
c0009740:	c3                   	ret    
c0009741:	6a 02                	push   0x2
c0009743:	bb 01 00 00 00       	mov    ebx,0x1
c0009748:	50                   	push   eax
c0009749:	e8 aa fe ff ff       	call   c00095f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000974e:	58                   	pop    eax
c000974f:	5a                   	pop    edx
c0009750:	eb bb                	jmp    c000970d <Virt::allocateKernelVirtualPages(int)+0xb8>
c0009752:	6a 04                	push   0x4
c0009754:	56                   	push   esi
c0009755:	8d 46 01             	lea    eax,[esi+0x1]
c0009758:	a3 64 38 02 c0       	mov    ds:0xc0023864,eax
c000975d:	e8 96 fe ff ff       	call   c00095f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009762:	89 f0                	mov    eax,esi
c0009764:	59                   	pop    ecx
c0009765:	c1 e0 0c             	shl    eax,0xc
c0009768:	5b                   	pop    ebx
c0009769:	83 c4 1c             	add    esp,0x1c
c000976c:	5b                   	pop    ebx
c000976d:	5e                   	pop    esi
c000976e:	5f                   	pop    edi
c000976f:	5d                   	pop    ebp
c0009770:	c3                   	ret    

c0009771 <Virt::freeSwapfilePage(unsigned long)>:
c0009771:	53                   	push   ebx
c0009772:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009778:	b8 01 00 00 00       	mov    eax,0x1
c000977d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009781:	d3 e0                	shl    eax,cl
c0009783:	89 cb                	mov    ebx,ecx
c0009785:	c1 eb 05             	shr    ebx,0x5
c0009788:	f7 d0                	not    eax
c000978a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000978d:	21 c1                	and    ecx,eax
c000978f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009792:	5b                   	pop    ebx
c0009793:	c3                   	ret    

c0009794 <Virt::swapIDToSector(unsigned long)>:
c0009794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009798:	8b 15 6c 38 02 c0    	mov    edx,DWORD PTR ds:0xc002386c
c000979e:	8b 0d 74 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023874
c00097a4:	0f af c2             	imul   eax,edx
c00097a7:	01 c8                	add    eax,ecx
c00097a9:	c3                   	ret    

c00097aa <Virt::allocateSwapfilePage()>:
c00097aa:	55                   	push   ebp
c00097ab:	31 d2                	xor    edx,edx
c00097ad:	57                   	push   edi
c00097ae:	56                   	push   esi
c00097af:	53                   	push   ebx
c00097b0:	83 ec 0c             	sub    esp,0xc
c00097b3:	8b 1d 70 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023870
c00097b9:	8b 0d 6c 38 02 c0    	mov    ecx,DWORD PTR ds:0xc002386c
c00097bf:	89 d8                	mov    eax,ebx
c00097c1:	f7 f1                	div    ecx
c00097c3:	39 cb                	cmp    ebx,ecx
c00097c5:	72 2f                	jb     c00097f6 <Virt::allocateSwapfilePage()+0x4c>
c00097c7:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c00097cd:	8b 16                	mov    edx,DWORD PTR [esi]
c00097cf:	f6 c2 01             	test   dl,0x1
c00097d2:	74 3e                	je     c0009812 <Virt::allocateSwapfilePage()+0x68>
c00097d4:	31 c9                	xor    ecx,ecx
c00097d6:	bf 01 00 00 00       	mov    edi,0x1
c00097db:	eb 12                	jmp    c00097ef <Virt::allocateSwapfilePage()+0x45>
c00097dd:	89 ca                	mov    edx,ecx
c00097df:	89 fd                	mov    ebp,edi
c00097e1:	c1 ea 05             	shr    edx,0x5
c00097e4:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097e7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097e9:	d3 e5                	shl    ebp,cl
c00097eb:	85 ea                	test   edx,ebp
c00097ed:	74 2c                	je     c000981b <Virt::allocateSwapfilePage()+0x71>
c00097ef:	83 c1 01             	add    ecx,0x1
c00097f2:	39 c8                	cmp    eax,ecx
c00097f4:	77 e7                	ja     c00097dd <Virt::allocateSwapfilePage()+0x33>
c00097f6:	83 ec 0c             	sub    esp,0xc
c00097f9:	68 68 13 02 c0       	push   0xc0021368
c00097fe:	e8 3c 7e 00 00       	call   c001163f <KePanic(char const*)>
c0009803:	83 c4 10             	add    esp,0x10
c0009806:	31 c9                	xor    ecx,ecx
c0009808:	83 c4 0c             	add    esp,0xc
c000980b:	89 c8                	mov    eax,ecx
c000980d:	5b                   	pop    ebx
c000980e:	5e                   	pop    esi
c000980f:	5f                   	pop    edi
c0009810:	5d                   	pop    ebp
c0009811:	c3                   	ret    
c0009812:	89 f3                	mov    ebx,esi
c0009814:	bd 01 00 00 00       	mov    ebp,0x1
c0009819:	31 c9                	xor    ecx,ecx
c000981b:	09 ea                	or     edx,ebp
c000981d:	89 c8                	mov    eax,ecx
c000981f:	89 13                	mov    DWORD PTR [ebx],edx
c0009821:	83 c4 0c             	add    esp,0xc
c0009824:	5b                   	pop    ebx
c0009825:	5e                   	pop    esi
c0009826:	5f                   	pop    edi
c0009827:	5d                   	pop    ebp
c0009828:	c3                   	ret    

c0009829 <Virt::virtualMemorySetup()>:
c0009829:	53                   	push   ebx
c000982a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000982f:	6a 0f                	push   0xf
c0009831:	53                   	push   ebx
c0009832:	83 c3 01             	add    ebx,0x1
c0009835:	e8 be fd ff ff       	call   c00095f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000983a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009840:	58                   	pop    eax
c0009841:	5a                   	pop    edx
c0009842:	75 eb                	jne    c000982f <Virt::virtualMemorySetup()+0x6>
c0009844:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009849:	6a 00                	push   0x0
c000984b:	53                   	push   ebx
c000984c:	83 c3 01             	add    ebx,0x1
c000984f:	e8 a4 fd ff ff       	call   c00095f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009854:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000985a:	59                   	pop    ecx
c000985b:	58                   	pop    eax
c000985c:	75 eb                	jne    c0009849 <Virt::virtualMemorySetup()+0x20>
c000985e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009863:	6a 0f                	push   0xf
c0009865:	53                   	push   ebx
c0009866:	83 c3 01             	add    ebx,0x1
c0009869:	e8 8a fd ff ff       	call   c00095f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000986e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009874:	58                   	pop    eax
c0009875:	5a                   	pop    edx
c0009876:	75 eb                	jne    c0009863 <Virt::virtualMemorySetup()+0x3a>
c0009878:	5b                   	pop    ebx
c0009879:	c3                   	ret    

c000987a <Virt::setupPageSwapping(int)>:
c000987a:	53                   	push   ebx
c000987b:	83 ec 0c             	sub    esp,0xc
c000987e:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009883:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009887:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000988d:	8b 10                	mov    edx,DWORD PTR [eax]
c000988f:	53                   	push   ebx
c0009890:	68 7f 13 02 c0       	push   0xc002137f
c0009895:	50                   	push   eax
c0009896:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009899:	c1 e3 0b             	shl    ebx,0xb
c000989c:	89 1d 70 38 02 c0    	mov    DWORD PTR ds:0xc0023870,ebx
c00098a2:	c1 eb 08             	shr    ebx,0x8
c00098a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00098a8:	c6 05 78 38 02 c0 43 	mov    BYTE PTR ds:0xc0023878,0x43
c00098af:	c7 05 6c 38 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002386c,0x8
c00098b9:	a3 74 38 02 c0       	mov    ds:0xc0023874,eax
c00098be:	e8 70 e2 ff ff       	call   c0007b33 <malloc>
c00098c3:	31 d2                	xor    edx,edx
c00098c5:	83 c4 0c             	add    esp,0xc
c00098c8:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c00098cd:	89 c1                	mov    ecx,eax
c00098cf:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c00098d4:	f7 35 6c 38 02 c0    	div    DWORD PTR ds:0xc002386c
c00098da:	c1 e8 05             	shr    eax,0x5
c00098dd:	50                   	push   eax
c00098de:	6a 00                	push   0x0
c00098e0:	51                   	push   ecx
c00098e1:	e8 0a 6c ff ff       	call   c00004f0 <memset>
c00098e6:	83 c4 18             	add    esp,0x18
c00098e9:	5b                   	pop    ebx
c00098ea:	c3                   	ret    
c00098eb:	90                   	nop

c00098ec <VAS::setCPUSpecific(unsigned long)>:
c00098ec:	c3                   	ret    
c00098ed:	90                   	nop

c00098ee <VAS::VAS(VAS*)>:
c00098ee:	83 ec 0c             	sub    esp,0xc
c00098f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009900:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009907:	83 ec 0c             	sub    esp,0xc
c000990a:	68 f4 10 02 c0       	push   0xc00210f4
c000990f:	e8 2b 7d 00 00       	call   c001163f <KePanic(char const*)>
c0009914:	83 c4 10             	add    esp,0x10
c0009917:	90                   	nop
c0009918:	83 c4 0c             	add    esp,0xc
c000991b:	c3                   	ret    

c000991c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000991c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009920:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0009925:	89 c2                	mov    edx,eax
c0009927:	c1 ea 16             	shr    edx,0x16
c000992a:	c1 e8 0a             	shr    eax,0xa
c000992d:	83 f9 01             	cmp    ecx,0x1
c0009930:	19 c9                	sbb    ecx,ecx
c0009932:	25 fc 0f 00 00       	and    eax,0xffc
c0009937:	c1 e2 0c             	shl    edx,0xc
c000993a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009940:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009947:	01 d0                	add    eax,edx
c0009949:	c3                   	ret    

c000994a <VAS::getPageTableEntry(unsigned long)>:
c000994a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000994e:	89 ca                	mov    edx,ecx
c0009950:	c1 ea 16             	shr    edx,0x16
c0009953:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009959:	c1 e9 0a             	shr    ecx,0xa
c000995c:	c1 e0 0c             	shl    eax,0xc
c000995f:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009965:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009968:	c3                   	ret    

c0009969 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009969:	55                   	push   ebp
c000996a:	57                   	push   edi
c000996b:	bf 01 00 00 00       	mov    edi,0x1
c0009970:	56                   	push   esi
c0009971:	53                   	push   ebx
c0009972:	83 ec 1c             	sub    esp,0x1c
c0009975:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009979:	c1 ee 0c             	shr    esi,0xc
c000997c:	eb 48                	jmp    c00099c6 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000997e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009983:	83 ec 08             	sub    esp,0x8
c0009986:	55                   	push   ebp
c0009987:	50                   	push   eax
c0009988:	e8 bd ff ff ff       	call   c000994a <VAS::getPageTableEntry(unsigned long)>
c000998d:	83 c4 10             	add    esp,0x10
c0009990:	8b 10                	mov    edx,DWORD PTR [eax]
c0009992:	f6 c6 04             	test   dh,0x4
c0009995:	75 70                	jne    c0009a07 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009997:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000999d:	83 fb 04             	cmp    ebx,0x4
c00099a0:	0f 84 8a 00 00 00    	je     c0009a30 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00099a6:	83 fb 02             	cmp    ebx,0x2
c00099a9:	0f 84 9a 00 00 00    	je     c0009a49 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00099af:	83 fb 03             	cmp    ebx,0x3
c00099b2:	0f 84 be 00 00 00    	je     c0009a76 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00099b8:	83 fb 01             	cmp    ebx,0x1
c00099bb:	0f 84 a2 00 00 00    	je     c0009a63 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099c1:	83 c6 01             	add    esi,0x1
c00099c4:	31 ff                	xor    edi,edi
c00099c6:	56                   	push   esi
c00099c7:	89 f5                	mov    ebp,esi
c00099c9:	e8 64 fc ff ff       	call   c0009632 <Virt::getPageState(unsigned long)>
c00099ce:	c1 e5 0c             	shl    ebp,0xc
c00099d1:	5a                   	pop    edx
c00099d2:	0f b6 d8             	movzx  ebx,al
c00099d5:	85 db                	test   ebx,ebx
c00099d7:	75 a5                	jne    c000997e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00099d9:	83 ec 0c             	sub    esp,0xc
c00099dc:	68 96 13 02 c0       	push   0xc0021396
c00099e1:	e8 59 7c 00 00       	call   c001163f <KePanic(char const*)>
c00099e6:	5a                   	pop    edx
c00099e7:	59                   	pop    ecx
c00099e8:	55                   	push   ebp
c00099e9:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099ef:	55                   	push   ebp
c00099f0:	e8 55 ff ff ff       	call   c000994a <VAS::getPageTableEntry(unsigned long)>
c00099f5:	83 c4 10             	add    esp,0x10
c00099f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00099fa:	f6 c6 04             	test   dh,0x4
c00099fd:	75 08                	jne    c0009a07 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a05:	eb ba                	jmp    c00099c1 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a0b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0009a11:	83 ec 0c             	sub    esp,0xc
c0009a14:	52                   	push   edx
c0009a15:	e8 bf e3 ff ff       	call   c0007dd9 <Phys::freePage(unsigned long)>
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	83 fb 04             	cmp    ebx,0x4
c0009a20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a2a:	0f 85 76 ff ff ff    	jne    c00099a6 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0009a30:	83 e7 01             	and    edi,0x1
c0009a33:	75 46                	jne    c0009a7b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0009a35:	c7 44 24 30 18 11 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021118
c0009a3d:	83 c4 1c             	add    esp,0x1c
c0009a40:	5b                   	pop    ebx
c0009a41:	5e                   	pop    esi
c0009a42:	5f                   	pop    edi
c0009a43:	5d                   	pop    ebp
c0009a44:	e9 f6 7b 00 00       	jmp    c001163f <KePanic(char const*)>
c0009a49:	83 e7 01             	and    edi,0x1
c0009a4c:	75 15                	jne    c0009a63 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a4e:	83 ec 0c             	sub    esp,0xc
c0009a51:	68 b2 13 02 c0       	push   0xc00213b2
c0009a56:	e8 e4 7b 00 00       	call   c001163f <KePanic(char const*)>
c0009a5b:	83 c4 10             	add    esp,0x10
c0009a5e:	e9 5e ff ff ff       	jmp    c00099c1 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a63:	83 ec 08             	sub    esp,0x8
c0009a66:	6a 00                	push   0x0
c0009a68:	56                   	push   esi
c0009a69:	e8 8a fb ff ff       	call   c00095f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a6e:	83 c4 10             	add    esp,0x10
c0009a71:	e9 4b ff ff ff       	jmp    c00099c1 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a76:	83 e7 01             	and    edi,0x1
c0009a79:	75 16                	jne    c0009a91 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a7b:	83 ec 08             	sub    esp,0x8
c0009a7e:	6a 00                	push   0x0
c0009a80:	56                   	push   esi
c0009a81:	e8 72 fb ff ff       	call   c00095f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a86:	83 c4 10             	add    esp,0x10
c0009a89:	83 c4 1c             	add    esp,0x1c
c0009a8c:	5b                   	pop    ebx
c0009a8d:	5e                   	pop    esi
c0009a8e:	5f                   	pop    edi
c0009a8f:	5d                   	pop    ebp
c0009a90:	c3                   	ret    
c0009a91:	c7 44 24 30 ce 13 02 c0 	mov    DWORD PTR [esp+0x30],0xc00213ce
c0009a99:	83 c4 1c             	add    esp,0x1c
c0009a9c:	5b                   	pop    ebx
c0009a9d:	5e                   	pop    esi
c0009a9e:	5f                   	pop    edi
c0009a9f:	5d                   	pop    ebp
c0009aa0:	e9 9a 7b 00 00       	jmp    c001163f <KePanic(char const*)>
c0009aa5:	90                   	nop

c0009aa6 <VAS::freeAllocatedPages(unsigned long)>:
c0009aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009aae:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009ab2:	74 09                	je     c0009abd <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009ab4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009ab8:	e9 ac fe ff ff       	jmp    c0009969 <Virt::freeKernelVirtualPages(unsigned long)>
c0009abd:	c7 44 24 04 3c 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002113c
c0009ac5:	e9 a0 0e 00 00       	jmp    c000a96a <Dbg::kprintf(char const*, ...)>

c0009aca <VAS::virtualToPhysical(unsigned long)>:
c0009aca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ace:	50                   	push   eax
c0009acf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ad3:	52                   	push   edx
c0009ad4:	e8 71 fe ff ff       	call   c000994a <VAS::getPageTableEntry(unsigned long)>
c0009ad9:	59                   	pop    ecx
c0009ada:	5a                   	pop    edx
c0009adb:	8b 00                	mov    eax,DWORD PTR [eax]
c0009add:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ae2:	c3                   	ret    
c0009ae3:	90                   	nop

c0009ae4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009ae4:	55                   	push   ebp
c0009ae5:	57                   	push   edi
c0009ae6:	56                   	push   esi
c0009ae7:	53                   	push   ebx
c0009ae8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aec:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009af0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009af4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009af8:	85 db                	test   ebx,ebx
c0009afa:	7e 24                	jle    c0009b20 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009afc:	c1 e3 0c             	shl    ebx,0xc
c0009aff:	01 f3                	add    ebx,esi
c0009b01:	56                   	push   esi
c0009b02:	81 c6 00 10 00 00    	add    esi,0x1000
c0009b08:	55                   	push   ebp
c0009b09:	e8 3c fe ff ff       	call   c000994a <VAS::getPageTableEntry(unsigned long)>
c0009b0e:	5a                   	pop    edx
c0009b0f:	59                   	pop    ecx
c0009b10:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009b12:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009b16:	21 f9                	and    ecx,edi
c0009b18:	09 d1                	or     ecx,edx
c0009b1a:	39 f3                	cmp    ebx,esi
c0009b1c:	89 08                	mov    DWORD PTR [eax],ecx
c0009b1e:	75 e1                	jne    c0009b01 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009b20:	5b                   	pop    ebx
c0009b21:	5e                   	pop    esi
c0009b22:	5f                   	pop    edi
c0009b23:	5d                   	pop    ebp
c0009b24:	c3                   	ret    
c0009b25:	90                   	nop

c0009b26 <VAS::VAS()>:
c0009b26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009b31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b35:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009b3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b40:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b49:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b51:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b58:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b5f:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b64:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b69:	29 c2                	sub    edx,eax
c0009b6b:	89 d0                	mov    eax,edx
c0009b6d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b72:	c1 e8 0c             	shr    eax,0xc
c0009b75:	89 c2                	mov    edx,eax
c0009b77:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b7c:	6a 04                	push   0x4
c0009b7e:	6a ff                	push   0xffffffff
c0009b80:	52                   	push   edx
c0009b81:	50                   	push   eax
c0009b82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b86:	e8 59 ff ff ff       	call   c0009ae4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b8b:	83 c4 14             	add    esp,0x14
c0009b8e:	90                   	nop
c0009b8f:	c3                   	ret    

c0009b90 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b90:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b95:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b9b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009ba2:	75 01                	jne    c0009ba5 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009ba4:	c3                   	ret    
c0009ba5:	68 80 00 00 00       	push   0x80
c0009baa:	6a ff                	push   0xffffffff
c0009bac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009bb0:	50                   	push   eax
c0009bb1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009bb5:	52                   	push   edx
c0009bb6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009bba:	51                   	push   ecx
c0009bbb:	e8 24 ff ff ff       	call   c0009ae4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009bc0:	83 c4 14             	add    esp,0x14
c0009bc3:	c3                   	ret    

c0009bc4 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009bc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bc8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009bcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bcf:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009bd2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009bd7:	83 f8 01             	cmp    eax,0x1
c0009bda:	19 c0                	sbb    eax,eax
c0009bdc:	83 ca 03             	or     edx,0x3
c0009bdf:	83 e0 fc             	and    eax,0xfffffffc
c0009be2:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009be9:	0f 20 d8             	mov    eax,cr3
c0009bec:	0f 22 d8             	mov    cr3,eax
c0009bef:	c3                   	ret    

c0009bf0 <VAS::~VAS()>:
c0009bf0:	83 ec 2c             	sub    esp,0x2c
c0009bf3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bfb:	fa                   	cli    
c0009bfc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009c01:	83 c0 01             	add    eax,0x1
c0009c04:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009c09:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c10:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c13:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009c1d:	6a 01                	push   0x1
c0009c1f:	50                   	push   eax
c0009c20:	e8 9f ff ff ff       	call   c0009bc4 <VAS::mapOtherVASIn(bool, VAS*)>
c0009c25:	83 c4 0c             	add    esp,0xc
c0009c28:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009c30:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009c38:	0f 8f d8 00 00 00    	jg     c0009d16 <VAS::~VAS()+0x126>
c0009c3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c49:	c1 e2 02             	shl    edx,0x2
c0009c4c:	01 d0                	add    eax,edx
c0009c4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c58:	83 e0 01             	and    eax,0x1
c0009c5b:	0f 84 ab 00 00 00    	je     c0009d0c <VAS::~VAS()+0x11c>
c0009c61:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c69:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c71:	7f 74                	jg     c0009ce7 <VAS::~VAS()+0xf7>
c0009c73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c77:	c1 e0 0a             	shl    eax,0xa
c0009c7a:	89 c2                	mov    edx,eax
c0009c7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c80:	01 d0                	add    eax,edx
c0009c82:	c1 e0 0c             	shl    eax,0xc
c0009c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c89:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c93:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c99:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c9d:	6a 01                	push   0x1
c0009c9f:	50                   	push   eax
c0009ca0:	e8 77 fc ff ff       	call   c000991c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009ca5:	83 c4 0c             	add    esp,0xc
c0009ca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009cb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009cb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cba:	25 01 04 00 00       	and    eax,0x401
c0009cbf:	3d 01 04 00 00       	cmp    eax,0x401
c0009cc4:	75 1a                	jne    c0009ce0 <VAS::~VAS()+0xf0>
c0009cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cca:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ccf:	83 ec 0c             	sub    esp,0xc
c0009cd2:	50                   	push   eax
c0009cd3:	e8 01 e1 ff ff       	call   c0007dd9 <Phys::freePage(unsigned long)>
c0009cd8:	83 c4 10             	add    esp,0x10
c0009cdb:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce0:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ce5:	eb 82                	jmp    c0009c69 <VAS::~VAS()+0x79>
c0009ce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ceb:	25 00 04 00 00       	and    eax,0x400
c0009cf0:	74 1a                	je     c0009d0c <VAS::~VAS()+0x11c>
c0009cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cf6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cfb:	83 ec 0c             	sub    esp,0xc
c0009cfe:	50                   	push   eax
c0009cff:	e8 d5 e0 ff ff       	call   c0007dd9 <Phys::freePage(unsigned long)>
c0009d04:	83 c4 10             	add    esp,0x10
c0009d07:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d0c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009d11:	e9 1a ff ff ff       	jmp    c0009c30 <VAS::~VAS()+0x40>
c0009d16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d1d:	83 ec 0c             	sub    esp,0xc
c0009d20:	50                   	push   eax
c0009d21:	e8 43 fc ff ff       	call   c0009969 <Virt::freeKernelVirtualPages(unsigned long)>
c0009d26:	83 c4 10             	add    esp,0x10
c0009d29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d2d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009d30:	83 ec 0c             	sub    esp,0xc
c0009d33:	50                   	push   eax
c0009d34:	e8 a0 e0 ff ff       	call   c0007dd9 <Phys::freePage(unsigned long)>
c0009d39:	83 c4 10             	add    esp,0x10
c0009d3c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d41:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d46:	83 e8 01             	sub    eax,0x1
c0009d49:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d4e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d53:	85 c0                	test   eax,eax
c0009d55:	75 01                	jne    c0009d58 <VAS::~VAS()+0x168>
c0009d57:	fb                   	sti    
c0009d58:	90                   	nop
c0009d59:	83 c4 2c             	add    esp,0x2c
c0009d5c:	c3                   	ret    
c0009d5d:	90                   	nop

c0009d5e <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d5e:	55                   	push   ebp
c0009d5f:	57                   	push   edi
c0009d60:	56                   	push   esi
c0009d61:	53                   	push   ebx
c0009d62:	83 ec 1c             	sub    esp,0x1c
c0009d65:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d69:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d6d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d71:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d77:	77 08                	ja     c0009d81 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d79:	0f 20 d8             	mov    eax,cr3
c0009d7c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d7f:	75 43                	jne    c0009dc4 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d81:	89 d8                	mov    eax,ebx
c0009d83:	09 f8                	or     eax,edi
c0009d85:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d8a:	75 53                	jne    c0009ddf <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d8f:	89 de                	mov    esi,ebx
c0009d91:	c1 ee 16             	shr    esi,0x16
c0009d94:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d9b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d9f:	74 50                	je     c0009df1 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009da1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009da5:	c1 eb 0a             	shr    ebx,0xa
c0009da8:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009dae:	c1 e6 0c             	shl    esi,0xc
c0009db1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009db7:	09 c7                	or     edi,eax
c0009db9:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009dbc:	83 c4 1c             	add    esp,0x1c
c0009dbf:	5b                   	pop    ebx
c0009dc0:	5e                   	pop    esi
c0009dc1:	5f                   	pop    edi
c0009dc2:	5d                   	pop    ebp
c0009dc3:	c3                   	ret    
c0009dc4:	83 ec 0c             	sub    esp,0xc
c0009dc7:	68 60 11 02 c0       	push   0xc0021160
c0009dcc:	e8 99 0b 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0009dd1:	89 d8                	mov    eax,ebx
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	09 f8                	or     eax,edi
c0009dd8:	a9 ff 0f 00 00       	test   eax,0xfff
c0009ddd:	74 ad                	je     c0009d8c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009ddf:	83 ec 0c             	sub    esp,0xc
c0009de2:	68 c8 11 02 c0       	push   0xc00211c8
c0009de7:	e8 53 78 00 00       	call   c001163f <KePanic(char const*)>
c0009dec:	83 c4 10             	add    esp,0x10
c0009def:	eb 9b                	jmp    c0009d8c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009df1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009df5:	e8 48 e0 ff ff       	call   c0007e42 <Phys::allocatePage()>
c0009dfa:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009e00:	83 ec 0c             	sub    esp,0xc
c0009e03:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009e07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009e0b:	6a 01                	push   0x1
c0009e0d:	e8 43 f8 ff ff       	call   c0009655 <Virt::allocateKernelVirtualPages(int)>
c0009e12:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009e19:	6a 01                	push   0x1
c0009e1b:	50                   	push   eax
c0009e1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e20:	52                   	push   edx
c0009e21:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e25:	51                   	push   ecx
c0009e26:	e8 3d 01 00 00       	call   c0009f68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e2b:	83 c4 1c             	add    esp,0x1c
c0009e2e:	68 00 10 00 00       	push   0x1000
c0009e33:	6a 00                	push   0x0
c0009e35:	50                   	push   eax
c0009e36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e3a:	e8 b1 66 ff ff       	call   c00004f0 <memset>
c0009e3f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e43:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e46:	e8 1e fb ff ff       	call   c0009969 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e4f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e53:	83 c4 10             	add    esp,0x10
c0009e56:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009e59:	0d 07 04 00 00       	or     eax,0x407
c0009e5e:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e61:	e9 3b ff ff ff       	jmp    c0009da1 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e66 <VAS::allocatePages(int, int)>:
c0009e66:	55                   	push   ebp
c0009e67:	57                   	push   edi
c0009e68:	56                   	push   esi
c0009e69:	53                   	push   ebx
c0009e6a:	83 ec 1c             	sub    esp,0x1c
c0009e6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e71:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e75:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e79:	75 75                	jne    c0009ef0 <VAS::allocatePages(int, int)+0x8a>
c0009e7b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e82:	85 c0                	test   eax,eax
c0009e84:	74 49                	je     c0009ecf <VAS::allocatePages(int, int)+0x69>
c0009e86:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e8a:	89 d5                	mov    ebp,edx
c0009e8c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e90:	c1 e5 0c             	shl    ebp,0xc
c0009e93:	01 dd                	add    ebp,ebx
c0009e95:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e98:	81 cf 00 04 00 00    	or     edi,0x400
c0009e9e:	85 d2                	test   edx,edx
c0009ea0:	7e 1b                	jle    c0009ebd <VAS::allocatePages(int, int)+0x57>
c0009ea2:	e8 9b df ff ff       	call   c0007e42 <Phys::allocatePage()>
c0009ea7:	57                   	push   edi
c0009ea8:	53                   	push   ebx
c0009ea9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009eaf:	50                   	push   eax
c0009eb0:	56                   	push   esi
c0009eb1:	e8 a8 fe ff ff       	call   c0009d5e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eb6:	83 c4 10             	add    esp,0x10
c0009eb9:	39 dd                	cmp    ebp,ebx
c0009ebb:	75 e5                	jne    c0009ea2 <VAS::allocatePages(int, int)+0x3c>
c0009ebd:	0f 20 d8             	mov    eax,cr3
c0009ec0:	0f 22 d8             	mov    cr3,eax
c0009ec3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ec7:	83 c4 1c             	add    esp,0x1c
c0009eca:	5b                   	pop    ebx
c0009ecb:	5e                   	pop    esi
c0009ecc:	5f                   	pop    edi
c0009ecd:	5d                   	pop    ebp
c0009ece:	c3                   	ret    
c0009ecf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009ed3:	83 ec 0c             	sub    esp,0xc
c0009ed6:	68 ec 11 02 c0       	push   0xc00211ec
c0009edb:	e8 5f 77 00 00       	call   c001163f <KePanic(char const*)>
c0009ee0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ee3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ee7:	83 c4 10             	add    esp,0x10
c0009eea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009eee:	eb 96                	jmp    c0009e86 <VAS::allocatePages(int, int)+0x20>
c0009ef0:	83 ec 0c             	sub    esp,0xc
c0009ef3:	52                   	push   edx
c0009ef4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009ef8:	e8 58 f7 ff ff       	call   c0009655 <Virt::allocateKernelVirtualPages(int)>
c0009efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f01:	83 c4 10             	add    esp,0x10
c0009f04:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f09:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f0d:	77 38                	ja     c0009f47 <VAS::allocatePages(int, int)+0xe1>
c0009f0f:	85 d2                	test   edx,edx
c0009f11:	7e aa                	jle    c0009ebd <VAS::allocatePages(int, int)+0x57>
c0009f13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f17:	c1 e2 0c             	shl    edx,0xc
c0009f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009f1e:	81 cf 00 04 00 00    	or     edi,0x400
c0009f24:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009f27:	e8 16 df ff ff       	call   c0007e42 <Phys::allocatePage()>
c0009f2c:	57                   	push   edi
c0009f2d:	53                   	push   ebx
c0009f2e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f34:	50                   	push   eax
c0009f35:	56                   	push   esi
c0009f36:	e8 23 fe ff ff       	call   c0009d5e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f3b:	83 c4 10             	add    esp,0x10
c0009f3e:	39 dd                	cmp    ebp,ebx
c0009f40:	75 e5                	jne    c0009f27 <VAS::allocatePages(int, int)+0xc1>
c0009f42:	e9 76 ff ff ff       	jmp    c0009ebd <VAS::allocatePages(int, int)+0x57>
c0009f47:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009f4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f52:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f59:	74 b4                	je     c0009f0f <VAS::allocatePages(int, int)+0xa9>
c0009f5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f5f:	80 cc 01             	or     ah,0x1
c0009f62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f66:	eb a7                	jmp    c0009f0f <VAS::allocatePages(int, int)+0xa9>

c0009f68 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f68:	55                   	push   ebp
c0009f69:	57                   	push   edi
c0009f6a:	56                   	push   esi
c0009f6b:	53                   	push   ebx
c0009f6c:	83 ec 1c             	sub    esp,0x1c
c0009f6f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f73:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f77:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f7b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f7f:	85 db                	test   ebx,ebx
c0009f81:	7e 2c                	jle    c0009faf <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f83:	c1 e3 0c             	shl    ebx,0xc
c0009f86:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f89:	89 f3                	mov    ebx,esi
c0009f8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f8f:	55                   	push   ebp
c0009f90:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f94:	29 f2                	sub    edx,esi
c0009f96:	01 da                	add    edx,ebx
c0009f98:	52                   	push   edx
c0009f99:	53                   	push   ebx
c0009f9a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fa0:	57                   	push   edi
c0009fa1:	e8 b8 fd ff ff       	call   c0009d5e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fa6:	83 c4 10             	add    esp,0x10
c0009fa9:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009fad:	75 e0                	jne    c0009f8f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009faf:	0f 20 d8             	mov    eax,cr3
c0009fb2:	0f 22 d8             	mov    cr3,eax
c0009fb5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fb9:	83 c4 1c             	add    esp,0x1c
c0009fbc:	5b                   	pop    ebx
c0009fbd:	5e                   	pop    esi
c0009fbe:	5f                   	pop    edi
c0009fbf:	5d                   	pop    ebp
c0009fc0:	c3                   	ret    
c0009fc1:	90                   	nop

c0009fc2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009fc2:	55                   	push   ebp
c0009fc3:	57                   	push   edi
c0009fc4:	56                   	push   esi
c0009fc5:	53                   	push   ebx
c0009fc6:	83 ec 1c             	sub    esp,0x1c
c0009fc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009fcd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009fd1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009fd5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009fd9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009fdd:	09 d8                	or     eax,ebx
c0009fdf:	a9 ff 0f 00 00       	test   eax,0xfff
c0009fe4:	75 4b                	jne    c000a031 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009fe6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009fe9:	89 de                	mov    esi,ebx
c0009feb:	c1 ee 16             	shr    esi,0x16
c0009fee:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009ff5:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009ff9:	74 48                	je     c000a043 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009ffb:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c000a000:	c1 eb 0a             	shr    ebx,0xa
c000a003:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000a007:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a00b:	83 ff 01             	cmp    edi,0x1
c000a00e:	19 c0                	sbb    eax,eax
c000a010:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a016:	c1 e6 0c             	shl    esi,0xc
c000a019:	25 00 00 c0 ff       	and    eax,0xffc00000
c000a01e:	01 f3                	add    ebx,esi
c000a020:	09 ca                	or     edx,ecx
c000a022:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c000a029:	83 c4 1c             	add    esp,0x1c
c000a02c:	5b                   	pop    ebx
c000a02d:	5e                   	pop    esi
c000a02e:	5f                   	pop    edi
c000a02f:	5d                   	pop    ebp
c000a030:	c3                   	ret    
c000a031:	83 ec 0c             	sub    esp,0xc
c000a034:	68 18 12 02 c0       	push   0xc0021218
c000a039:	e8 01 76 00 00       	call   c001163f <KePanic(char const*)>
c000a03e:	83 c4 10             	add    esp,0x10
c000a041:	eb a3                	jmp    c0009fe6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c000a043:	e8 fa dd ff ff       	call   c0007e42 <Phys::allocatePage()>
c000a048:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a04e:	83 ec 0c             	sub    esp,0xc
c000a051:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000a055:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a059:	6a 01                	push   0x1
c000a05b:	e8 f5 f5 ff ff       	call   c0009655 <Virt::allocateKernelVirtualPages(int)>
c000a060:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a067:	6a 01                	push   0x1
c000a069:	50                   	push   eax
c000a06a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a06e:	50                   	push   eax
c000a06f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a073:	51                   	push   ecx
c000a074:	e8 ef fe ff ff       	call   c0009f68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a079:	83 c4 1c             	add    esp,0x1c
c000a07c:	68 00 10 00 00       	push   0x1000
c000a081:	6a 00                	push   0x0
c000a083:	50                   	push   eax
c000a084:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a088:	e8 63 64 ff ff       	call   c00004f0 <memset>
c000a08d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a091:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a094:	e8 d0 f8 ff ff       	call   c0009969 <Virt::freeKernelVirtualPages(unsigned long)>
c000a099:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a0a3:	81 ca 07 04 00 00    	or     edx,0x407
c000a0a9:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a0ac:	e9 4a ff ff ff       	jmp    c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a0b1:	90                   	nop

c000a0b2 <VAS::VAS(bool)>:
c000a0b2:	53                   	push   ebx
c000a0b3:	83 ec 28             	sub    esp,0x28
c000a0b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0ba:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a0be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a0c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0cd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a0d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a0dc:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a0df:	e8 5e dd ff ff       	call   c0007e42 <Phys::allocatePage()>
c000a0e4:	89 c2                	mov    edx,eax
c000a0e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0ed:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0f3:	83 ec 0c             	sub    esp,0xc
c000a0f6:	6a 01                	push   0x1
c000a0f8:	e8 58 f5 ff ff       	call   c0009655 <Virt::allocateKernelVirtualPages(int)>
c000a0fd:	83 c4 10             	add    esp,0x10
c000a100:	89 c2                	mov    edx,eax
c000a102:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a106:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a109:	83 ec 0c             	sub    esp,0xc
c000a10c:	6a 03                	push   0x3
c000a10e:	6a 01                	push   0x1
c000a110:	52                   	push   edx
c000a111:	50                   	push   eax
c000a112:	53                   	push   ebx
c000a113:	e8 50 fe ff ff       	call   c0009f68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a118:	83 c4 20             	add    esp,0x20
c000a11b:	89 c2                	mov    edx,eax
c000a11d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a121:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a124:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a12c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a134:	7f 1d                	jg     c000a153 <VAS::VAS(bool)+0xa1>
c000a136:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a13a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a13d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a141:	c1 e2 02             	shl    edx,0x2
c000a144:	01 d0                	add    eax,edx
c000a146:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a14c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a151:	eb d9                	jmp    c000a12c <VAS::VAS(bool)+0x7a>
c000a153:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a15b:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a163:	7f 7e                	jg     c000a1e3 <VAS::VAS(bool)+0x131>
c000a165:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a169:	2d 00 02 00 00       	sub    eax,0x200
c000a16e:	c1 e0 0c             	shl    eax,0xc
c000a171:	83 c8 05             	or     eax,0x5
c000a174:	89 c2                	mov    edx,eax
c000a176:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a17b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a181:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a187:	83 e0 10             	and    eax,0x10
c000a18a:	0f b6 c0             	movzx  eax,al
c000a18d:	85 c0                	test   eax,eax
c000a18f:	74 07                	je     c000a198 <VAS::VAS(bool)+0xe6>
c000a191:	b8 00 01 00 00       	mov    eax,0x100
c000a196:	eb 05                	jmp    c000a19d <VAS::VAS(bool)+0xeb>
c000a198:	b8 00 00 00 00       	mov    eax,0x0
c000a19d:	09 d0                	or     eax,edx
c000a19f:	89 c1                	mov    ecx,eax
c000a1a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a1ac:	c1 e2 02             	shl    edx,0x2
c000a1af:	01 d0                	add    eax,edx
c000a1b1:	89 ca                	mov    edx,ecx
c000a1b3:	89 10                	mov    DWORD PTR [eax],edx
c000a1b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a1b9:	2d 40 03 00 00       	sub    eax,0x340
c000a1be:	83 f8 7f             	cmp    eax,0x7f
c000a1c1:	77 16                	ja     c000a1d9 <VAS::VAS(bool)+0x127>
c000a1c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a1ce:	c1 e2 02             	shl    edx,0x2
c000a1d1:	01 d0                	add    eax,edx
c000a1d3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a1d9:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a1de:	e9 78 ff ff ff       	jmp    c000a15b <VAS::VAS(bool)+0xa9>
c000a1e3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1ee:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1f4:	83 e0 10             	and    eax,0x10
c000a1f7:	0f b6 c0             	movzx  eax,al
c000a1fa:	85 c0                	test   eax,eax
c000a1fc:	74 07                	je     c000a205 <VAS::VAS(bool)+0x153>
c000a1fe:	b8 03 41 00 00       	mov    eax,0x4103
c000a203:	eb 05                	jmp    c000a20a <VAS::VAS(bool)+0x158>
c000a205:	b8 03 40 00 00       	mov    eax,0x4003
c000a20a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a20e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a211:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a217:	89 02                	mov    DWORD PTR [edx],eax
c000a219:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a21d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a220:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a225:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a22b:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a231:	83 e0 10             	and    eax,0x10
c000a234:	0f b6 c0             	movzx  eax,al
c000a237:	85 c0                	test   eax,eax
c000a239:	74 07                	je     c000a242 <VAS::VAS(bool)+0x190>
c000a23b:	b8 00 01 00 00       	mov    eax,0x100
c000a240:	eb 05                	jmp    c000a247 <VAS::VAS(bool)+0x195>
c000a242:	b8 00 00 00 00       	mov    eax,0x0
c000a247:	09 c2                	or     edx,eax
c000a249:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a24d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a250:	05 fc 0f 00 00       	add    eax,0xffc
c000a255:	83 ca 03             	or     edx,0x3
c000a258:	89 10                	mov    DWORD PTR [eax],edx
c000a25a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a25f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a265:	83 ec 0c             	sub    esp,0xc
c000a268:	50                   	push   eax
c000a269:	e8 26 2a 00 00       	call   c000cc94 <Device::getName()>
c000a26e:	83 c4 10             	add    esp,0x10
c000a271:	83 ec 08             	sub    esp,0x8
c000a274:	68 e8 13 02 c0       	push   0xc00213e8
c000a279:	50                   	push   eax
c000a27a:	e8 01 65 ff ff       	call   c0000780 <strcmp>
c000a27f:	83 c4 10             	add    esp,0x10
c000a282:	85 c0                	test   eax,eax
c000a284:	0f 94 c0             	sete   al
c000a287:	0f b6 c0             	movzx  eax,al
c000a28a:	85 c0                	test   eax,eax
c000a28c:	74 68                	je     c000a2f6 <VAS::VAS(bool)+0x244>
c000a28e:	fa                   	cli    
c000a28f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a294:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a29a:	05 7c 09 00 00       	add    eax,0x97c
c000a29f:	83 ec 0c             	sub    esp,0xc
c000a2a2:	50                   	push   eax
c000a2a3:	e8 86 d3 ff ff       	call   c000762e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2b0:	89 c3                	mov    ebx,eax
c000a2b2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a2b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2bd:	05 7c 09 00 00       	add    eax,0x97c
c000a2c2:	83 ec 0c             	sub    esp,0xc
c000a2c5:	50                   	push   eax
c000a2c6:	e8 63 d3 ff ff       	call   c000762e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a2cb:	83 c4 10             	add    esp,0x10
c000a2ce:	83 ec 08             	sub    esp,0x8
c000a2d1:	50                   	push   eax
c000a2d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2d6:	e8 6f f6 ff ff       	call   c000994a <VAS::getPageTableEntry(unsigned long)>
c000a2db:	83 c4 10             	add    esp,0x10
c000a2de:	8b 00                	mov    eax,DWORD PTR [eax]
c000a2e0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2e5:	6a 11                	push   0x11
c000a2e7:	53                   	push   ebx
c000a2e8:	50                   	push   eax
c000a2e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2ed:	e8 6c fa ff ff       	call   c0009d5e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2f2:	83 c4 10             	add    esp,0x10
c000a2f5:	fb                   	sti    
c000a2f6:	90                   	nop
c000a2f7:	83 c4 28             	add    esp,0x28
c000a2fa:	5b                   	pop    ebx
c000a2fb:	c3                   	ret    

c000a2fc <VAS::evict(unsigned long)>:
c000a2fc:	55                   	push   ebp
c000a2fd:	57                   	push   edi
c000a2fe:	56                   	push   esi
c000a2ff:	53                   	push   ebx
c000a300:	83 ec 1c             	sub    esp,0x1c
c000a303:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a307:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a30b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a30f:	e8 96 f4 ff ff       	call   c00097aa <Virt::allocateSwapfilePage()>
c000a314:	89 c7                	mov    edi,eax
c000a316:	a1 6c 38 02 c0       	mov    eax,ds:0xc002386c
c000a31b:	85 c0                	test   eax,eax
c000a31d:	7e 40                	jle    c000a35f <VAS::evict(unsigned long)+0x63>
c000a31f:	89 ee                	mov    esi,ebp
c000a321:	31 db                	xor    ebx,ebx
c000a323:	83 ec 0c             	sub    esp,0xc
c000a326:	57                   	push   edi
c000a327:	e8 68 f4 ff ff       	call   c0009794 <Virt::swapIDToSector(unsigned long)>
c000a32c:	31 d2                	xor    edx,edx
c000a32e:	89 34 24             	mov    DWORD PTR [esp],esi
c000a331:	81 c6 00 02 00 00    	add    esi,0x200
c000a337:	6a 01                	push   0x1
c000a339:	52                   	push   edx
c000a33a:	01 d8                	add    eax,ebx
c000a33c:	83 c3 01             	add    ebx,0x1
c000a33f:	50                   	push   eax
c000a340:	0f be 05 78 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023878
c000a347:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a34e:	50                   	push   eax
c000a34f:	e8 02 3b 00 00       	call   c000de56 <LogicalDisk::write(unsigned long long, int, void*)>
c000a354:	83 c4 20             	add    esp,0x20
c000a357:	39 1d 6c 38 02 c0    	cmp    DWORD PTR ds:0xc002386c,ebx
c000a35d:	7f c4                	jg     c000a323 <VAS::evict(unsigned long)+0x27>
c000a35f:	c1 e7 0c             	shl    edi,0xc
c000a362:	83 ec 08             	sub    esp,0x8
c000a365:	55                   	push   ebp
c000a366:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a36a:	50                   	push   eax
c000a36b:	e8 da f5 ff ff       	call   c000994a <VAS::getPageTableEntry(unsigned long)>
c000a370:	8b 10                	mov    edx,DWORD PTR [eax]
c000a372:	89 d3                	mov    ebx,edx
c000a374:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a37a:	09 d7                	or     edi,edx
c000a37c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a382:	89 38                	mov    DWORD PTR [eax],edi
c000a384:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a387:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a38d:	83 c2 01             	add    edx,0x1
c000a390:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a396:	e8 3e da ff ff       	call   c0007dd9 <Phys::freePage(unsigned long)>
c000a39b:	0f 20 d8             	mov    eax,cr3
c000a39e:	0f 22 d8             	mov    cr3,eax
c000a3a1:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a3a7:	51                   	push   ecx
c000a3a8:	55                   	push   ebp
c000a3a9:	53                   	push   ebx
c000a3aa:	68 3c 12 02 c0       	push   0xc002123c
c000a3af:	e8 b6 05 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000a3b4:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a3b9:	c7 44 24 50 f6 13 02 c0 	mov    DWORD PTR [esp+0x50],0xc00213f6
c000a3c1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a3c5:	8d 50 01             	lea    edx,[eax+0x1]
c000a3c8:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a3ce:	83 c4 3c             	add    esp,0x3c
c000a3d1:	5b                   	pop    ebx
c000a3d2:	5e                   	pop    esi
c000a3d3:	5f                   	pop    edi
c000a3d4:	5d                   	pop    ebp
c000a3d5:	e9 90 05 00 00       	jmp    c000a96a <Dbg::kprintf(char const*, ...)>

c000a3da <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a3da:	55                   	push   ebp
c000a3db:	57                   	push   edi
c000a3dc:	56                   	push   esi
c000a3dd:	53                   	push   ebx
c000a3de:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a3e4:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a3eb:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a3f1:	77 78                	ja     c000a46b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a3f3:	83 ec 08             	sub    esp,0x8
c000a3f6:	53                   	push   ebx
c000a3f7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3fd:	68 19 14 02 c0       	push   0xc0021419
c000a402:	e8 63 05 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000a407:	58                   	pop    eax
c000a408:	5a                   	pop    edx
c000a409:	53                   	push   ebx
c000a40a:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a411:	51                   	push   ecx
c000a412:	e8 33 f5 ff ff       	call   c000994a <VAS::getPageTableEntry(unsigned long)>
c000a417:	83 c4 10             	add    esp,0x10
c000a41a:	85 c0                	test   eax,eax
c000a41c:	89 c5                	mov    ebp,eax
c000a41e:	0f 95 c0             	setne  al
c000a421:	85 db                	test   ebx,ebx
c000a423:	0f 95 c2             	setne  dl
c000a426:	21 d0                	and    eax,edx
c000a428:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a42c:	a8 01                	test   al,0x1
c000a42e:	75 0f                	jne    c000a43f <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a430:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a434:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a43a:	5b                   	pop    ebx
c000a43b:	5e                   	pop    esi
c000a43c:	5f                   	pop    edi
c000a43d:	5d                   	pop    ebp
c000a43e:	c3                   	ret    
c000a43f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a442:	f6 c4 02             	test   ah,0x2
c000a445:	75 39                	jne    c000a480 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a447:	89 c2                	mov    edx,eax
c000a449:	81 e2 01 04 00 00    	and    edx,0x401
c000a44f:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a455:	74 73                	je     c000a4ca <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a457:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a45c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a460:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a466:	5b                   	pop    ebx
c000a467:	5e                   	pop    esi
c000a468:	5f                   	pop    edi
c000a469:	5d                   	pop    ebp
c000a46a:	c3                   	ret    
c000a46b:	83 ec 0c             	sub    esp,0xc
c000a46e:	68 07 14 02 c0       	push   0xc0021407
c000a473:	e8 c7 71 00 00       	call   c001163f <KePanic(char const*)>
c000a478:	83 c4 10             	add    esp,0x10
c000a47b:	e9 73 ff ff ff       	jmp    c000a3f3 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a480:	83 ec 0c             	sub    esp,0xc
c000a483:	89 de                	mov    esi,ebx
c000a485:	68 6c 12 02 c0       	push   0xc002126c
c000a48a:	e8 db 04 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000a48f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a493:	e8 aa d9 ff ff       	call   c0007e42 <Phys::allocatePage()>
c000a498:	ba 00 10 00 00       	mov    edx,0x1000
c000a49d:	89 d1                	mov    ecx,edx
c000a49f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4a1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a4a4:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a4aa:	09 c8                	or     eax,ecx
c000a4ac:	83 c8 02             	or     eax,0x2
c000a4af:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a4b2:	0f 20 d8             	mov    eax,cr3
c000a4b5:	0f 22 d8             	mov    cr3,eax
c000a4b8:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a4bc:	89 df                	mov    edi,ebx
c000a4be:	89 d1                	mov    ecx,edx
c000a4c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4c2:	83 c4 10             	add    esp,0x10
c000a4c5:	e9 66 ff ff ff       	jmp    c000a430 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a4ca:	c1 e8 0c             	shr    eax,0xc
c000a4cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4d1:	e8 6c d9 ff ff       	call   c0007e42 <Phys::allocatePage()>
c000a4d6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a4d9:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a4df:	09 c2                	or     edx,eax
c000a4e1:	81 ca 01 08 00 00    	or     edx,0x801
c000a4e7:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a4ea:	a1 6c 38 02 c0       	mov    eax,ds:0xc002386c
c000a4ef:	85 c0                	test   eax,eax
c000a4f1:	7e 44                	jle    c000a537 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a4f3:	89 df                	mov    edi,ebx
c000a4f5:	31 f6                	xor    esi,esi
c000a4f7:	83 ec 0c             	sub    esp,0xc
c000a4fa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a4fe:	51                   	push   ecx
c000a4ff:	e8 90 f2 ff ff       	call   c0009794 <Virt::swapIDToSector(unsigned long)>
c000a504:	31 d2                	xor    edx,edx
c000a506:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a509:	81 c7 00 02 00 00    	add    edi,0x200
c000a50f:	6a 01                	push   0x1
c000a511:	52                   	push   edx
c000a512:	01 f0                	add    eax,esi
c000a514:	83 c6 01             	add    esi,0x1
c000a517:	50                   	push   eax
c000a518:	0f be 05 78 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023878
c000a51f:	8b 2c 85 7c b7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4884]
c000a526:	55                   	push   ebp
c000a527:	e8 be 38 00 00       	call   c000ddea <LogicalDisk::read(unsigned long long, int, void*)>
c000a52c:	83 c4 20             	add    esp,0x20
c000a52f:	39 35 6c 38 02 c0    	cmp    DWORD PTR ds:0xc002386c,esi
c000a535:	7f c0                	jg     c000a4f7 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a537:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a53c:	83 ec 04             	sub    esp,0x4
c000a53f:	83 e8 01             	sub    eax,0x1
c000a542:	50                   	push   eax
c000a543:	53                   	push   ebx
c000a544:	68 2c 14 02 c0       	push   0xc002142c
c000a549:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a54e:	e8 17 04 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000a553:	58                   	pop    eax
c000a554:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a558:	52                   	push   edx
c000a559:	e8 13 f2 ff ff       	call   c0009771 <Virt::freeSwapfilePage(unsigned long)>
c000a55e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a563:	83 c4 10             	add    esp,0x10
c000a566:	83 e8 01             	sub    eax,0x1
c000a569:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a56e:	85 c0                	test   eax,eax
c000a570:	75 01                	jne    c000a573 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a572:	fb                   	sti    
c000a573:	0f 20 d8             	mov    eax,cr3
c000a576:	0f 22 d8             	mov    cr3,eax
c000a579:	e9 b2 fe ff ff       	jmp    c000a430 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a57e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a57e:	55                   	push   ebp
c000a57f:	57                   	push   edi
c000a580:	56                   	push   esi
c000a581:	53                   	push   ebx
c000a582:	83 ec 28             	sub    esp,0x28
c000a585:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a589:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a58d:	50                   	push   eax
c000a58e:	e8 c2 f0 ff ff       	call   c0009655 <Virt::allocateKernelVirtualPages(int)>
c000a593:	83 c4 0c             	add    esp,0xc
c000a596:	6a 07                	push   0x7
c000a598:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a59c:	52                   	push   edx
c000a59d:	89 c5                	mov    ebp,eax
c000a59f:	53                   	push   ebx
c000a5a0:	e8 c1 f8 ff ff       	call   c0009e66 <VAS::allocatePages(int, int)>
c000a5a5:	83 c4 10             	add    esp,0x10
c000a5a8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a5ac:	89 c7                	mov    edi,eax
c000a5ae:	85 c9                	test   ecx,ecx
c000a5b0:	74 2f                	je     c000a5e1 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a5b2:	31 f6                	xor    esi,esi
c000a5b4:	e8 89 d8 ff ff       	call   c0007e42 <Phys::allocatePage()>
c000a5b9:	83 c6 01             	add    esi,0x1
c000a5bc:	6a 03                	push   0x3
c000a5be:	55                   	push   ebp
c000a5bf:	50                   	push   eax
c000a5c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5c4:	53                   	push   ebx
c000a5c5:	e8 94 f7 ff ff       	call   c0009d5e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a5ca:	6a 07                	push   0x7
c000a5cc:	57                   	push   edi
c000a5cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a5d1:	50                   	push   eax
c000a5d2:	53                   	push   ebx
c000a5d3:	e8 86 f7 ff ff       	call   c0009d5e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a5d8:	83 c4 20             	add    esp,0x20
c000a5db:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a5df:	75 d3                	jne    c000a5b4 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a5e1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a5e5:	89 28                	mov    DWORD PTR [eax],ebp
c000a5e7:	83 c4 1c             	add    esp,0x1c
c000a5ea:	89 f8                	mov    eax,edi
c000a5ec:	5b                   	pop    ebx
c000a5ed:	5e                   	pop    esi
c000a5ee:	5f                   	pop    edi
c000a5ef:	5d                   	pop    ebp
c000a5f0:	c3                   	ret    
c000a5f1:	90                   	nop

c000a5f2 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a5f2:	53                   	push   ebx
c000a5f3:	83 ec 14             	sub    esp,0x14
c000a5f6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5fa:	68 8c 12 02 c0       	push   0xc002128c
c000a5ff:	e8 66 03 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000a604:	c7 04 24 ec 12 02 c0 	mov    DWORD PTR [esp],0xc00212ec
c000a60b:	e8 5a 03 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000a610:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a614:	83 c4 18             	add    esp,0x18
c000a617:	5b                   	pop    ebx
c000a618:	e9 4c f3 ff ff       	jmp    c0009969 <Virt::freeKernelVirtualPages(unsigned long)>
c000a61d:	90                   	nop

c000a61e <VAS::scanForEviction()>:
c000a61e:	57                   	push   edi
c000a61f:	56                   	push   esi
c000a620:	31 f6                	xor    esi,esi
c000a622:	53                   	push   ebx
c000a623:	83 ec 10             	sub    esp,0x10
c000a626:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a62a:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a62d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a633:	75 0e                	jne    c000a643 <VAS::scanForEviction()+0x25>
c000a635:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a638:	89 da                	mov    edx,ebx
c000a63a:	c1 ea 16             	shr    edx,0x16
c000a63d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a641:	74 57                	je     c000a69a <VAS::scanForEviction()+0x7c>
c000a643:	53                   	push   ebx
c000a644:	57                   	push   edi
c000a645:	e8 00 f3 ff ff       	call   c000994a <VAS::getPageTableEntry(unsigned long)>
c000a64a:	5a                   	pop    edx
c000a64b:	59                   	pop    ecx
c000a64c:	8b 10                	mov    edx,DWORD PTR [eax]
c000a64e:	89 d1                	mov    ecx,edx
c000a650:	c1 e9 0c             	shr    ecx,0xc
c000a653:	74 10                	je     c000a665 <VAS::scanForEviction()+0x47>
c000a655:	89 d1                	mov    ecx,edx
c000a657:	81 e1 01 08 00 00    	and    ecx,0x801
c000a65d:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a663:	74 40                	je     c000a6a5 <VAS::scanForEviction()+0x87>
c000a665:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a66b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a671:	76 2d                	jbe    c000a6a0 <VAS::scanForEviction()+0x82>
c000a673:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a67a:	83 c6 01             	add    esi,0x1
c000a67d:	83 fe 03             	cmp    esi,0x3
c000a680:	74 32                	je     c000a6b4 <VAS::scanForEviction()+0x96>
c000a682:	31 db                	xor    ebx,ebx
c000a684:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a68a:	75 b7                	jne    c000a643 <VAS::scanForEviction()+0x25>
c000a68c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a68f:	89 da                	mov    edx,ebx
c000a691:	c1 ea 16             	shr    edx,0x16
c000a694:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a698:	75 a9                	jne    c000a643 <VAS::scanForEviction()+0x25>
c000a69a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a6a0:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a6a3:	eb 88                	jmp    c000a62d <VAS::scanForEviction()+0xf>
c000a6a5:	f6 c2 20             	test   dl,0x20
c000a6a8:	74 13                	je     c000a6bd <VAS::scanForEviction()+0x9f>
c000a6aa:	83 e2 df             	and    edx,0xffffffdf
c000a6ad:	89 10                	mov    DWORD PTR [eax],edx
c000a6af:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a6b2:	eb b1                	jmp    c000a665 <VAS::scanForEviction()+0x47>
c000a6b4:	83 c4 10             	add    esp,0x10
c000a6b7:	31 c0                	xor    eax,eax
c000a6b9:	5b                   	pop    ebx
c000a6ba:	5e                   	pop    esi
c000a6bb:	5f                   	pop    edi
c000a6bc:	c3                   	ret    
c000a6bd:	89 d0                	mov    eax,edx
c000a6bf:	83 ec 08             	sub    esp,0x8
c000a6c2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6cb:	53                   	push   ebx
c000a6cc:	68 41 14 02 c0       	push   0xc0021441
c000a6d1:	e8 94 02 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000a6d6:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6d9:	58                   	pop    eax
c000a6da:	5a                   	pop    edx
c000a6db:	51                   	push   ecx
c000a6dc:	57                   	push   edi
c000a6dd:	e8 1a fc ff ff       	call   c000a2fc <VAS::evict(unsigned long)>
c000a6e2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a6e5:	5b                   	pop    ebx
c000a6e6:	5e                   	pop    esi
c000a6e7:	50                   	push   eax
c000a6e8:	68 55 14 02 c0       	push   0xc0021455
c000a6ed:	e8 78 02 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000a6f2:	58                   	pop    eax
c000a6f3:	5a                   	pop    edx
c000a6f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6f8:	50                   	push   eax
c000a6f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6fd:	68 68 14 02 c0       	push   0xc0021468
c000a702:	e8 63 02 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000a707:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a70a:	83 c4 10             	add    esp,0x10
c000a70d:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a713:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a716:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a71a:	83 c4 10             	add    esp,0x10
c000a71d:	5b                   	pop    ebx
c000a71e:	5e                   	pop    esi
c000a71f:	5f                   	pop    edi
c000a720:	c3                   	ret    

c000a721 <mapVASFirstTime>:
c000a721:	55                   	push   ebp
c000a722:	57                   	push   edi
c000a723:	56                   	push   esi
c000a724:	53                   	push   ebx
c000a725:	83 ec 0c             	sub    esp,0xc
c000a728:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a72d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a730:	83 fa 01             	cmp    edx,0x1
c000a733:	0f 84 cb 00 00 00    	je     c000a804 <mapVASFirstTime+0xe3>
c000a739:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a73c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a741:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a746:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a749:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a74f:	c1 e5 15             	shl    ebp,0x15
c000a752:	29 eb                	sub    ebx,ebp
c000a754:	29 ef                	sub    edi,ebp
c000a756:	e8 e7 d6 ff ff       	call   c0007e42 <Phys::allocatePage()>
c000a75b:	83 ec 0c             	sub    esp,0xc
c000a75e:	68 03 04 00 00       	push   0x403
c000a763:	6a 01                	push   0x1
c000a765:	53                   	push   ebx
c000a766:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a76c:	50                   	push   eax
c000a76d:	56                   	push   esi
c000a76e:	e8 f5 f7 ff ff       	call   c0009f68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a773:	83 c4 20             	add    esp,0x20
c000a776:	39 fb                	cmp    ebx,edi
c000a778:	75 dc                	jne    c000a756 <mapVASFirstTime+0x35>
c000a77a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a77f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a784:	29 eb                	sub    ebx,ebp
c000a786:	29 ef                	sub    edi,ebp
c000a788:	e8 b5 d6 ff ff       	call   c0007e42 <Phys::allocatePage()>
c000a78d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a791:	83 fa 01             	cmp    edx,0x1
c000a794:	19 d2                	sbb    edx,edx
c000a796:	83 ec 0c             	sub    esp,0xc
c000a799:	83 e2 04             	and    edx,0x4
c000a79c:	81 c2 03 04 00 00    	add    edx,0x403
c000a7a2:	52                   	push   edx
c000a7a3:	6a 01                	push   0x1
c000a7a5:	53                   	push   ebx
c000a7a6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7ac:	50                   	push   eax
c000a7ad:	56                   	push   esi
c000a7ae:	e8 b5 f7 ff ff       	call   c0009f68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7b3:	83 c4 20             	add    esp,0x20
c000a7b6:	39 df                	cmp    edi,ebx
c000a7b8:	75 ce                	jne    c000a788 <mapVASFirstTime+0x67>
c000a7ba:	83 ec 0c             	sub    esp,0xc
c000a7bd:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a7c2:	6a 04                	push   0x4
c000a7c4:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a7ca:	6a ff                	push   0xffffffff
c000a7cc:	c1 eb 0c             	shr    ebx,0xc
c000a7cf:	53                   	push   ebx
c000a7d0:	68 00 50 02 c0       	push   0xc0025000
c000a7d5:	56                   	push   esi
c000a7d6:	e8 09 f3 ff ff       	call   c0009ae4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7db:	83 c4 14             	add    esp,0x14
c000a7de:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a7e3:	6a 04                	push   0x4
c000a7e5:	6a ff                	push   0xffffffff
c000a7e7:	53                   	push   ebx
c000a7e8:	68 00 50 02 c0       	push   0xc0025000
c000a7ed:	50                   	push   eax
c000a7ee:	e8 f1 f2 ff ff       	call   c0009ae4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7f3:	0f 20 d8             	mov    eax,cr3
c000a7f6:	0f 22 d8             	mov    cr3,eax
c000a7f9:	83 c4 20             	add    esp,0x20
c000a7fc:	83 c4 0c             	add    esp,0xc
c000a7ff:	5b                   	pop    ebx
c000a800:	5e                   	pop    esi
c000a801:	5f                   	pop    edi
c000a802:	5d                   	pop    ebp
c000a803:	c3                   	ret    
c000a804:	83 ec 0c             	sub    esp,0xc
c000a807:	68 75 14 02 c0       	push   0xc0021475
c000a80c:	e8 59 01 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000a811:	83 c4 10             	add    esp,0x10
c000a814:	83 c4 0c             	add    esp,0xc
c000a817:	5b                   	pop    ebx
c000a818:	5e                   	pop    esi
c000a819:	5f                   	pop    edi
c000a81a:	5d                   	pop    ebp
c000a81b:	c3                   	ret    

c000a81c <__cxa_atexit>:
c000a81c:	31 c0                	xor    eax,eax
c000a81e:	c3                   	ret    

c000a81f <__cxa_finalize>:
c000a81f:	c3                   	ret    

c000a820 <__stack_chk_fail>:
c000a820:	55                   	push   ebp
c000a821:	89 e5                	mov    ebp,esp
c000a823:	83 ec 10             	sub    esp,0x10
c000a826:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a829:	68 8e 14 02 c0       	push   0xc002148e
c000a82e:	e8 37 01 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000a833:	58                   	pop    eax
c000a834:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a837:	5a                   	pop    edx
c000a838:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a83b:	68 8e 14 02 c0       	push   0xc002148e
c000a840:	e8 25 01 00 00       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000a845:	c7 04 24 96 14 02 c0 	mov    DWORD PTR [esp],0xc0021496
c000a84c:	e8 ee 6d 00 00       	call   c001163f <KePanic(char const*)>
c000a851:	83 c4 10             	add    esp,0x10
c000a854:	c9                   	leave  
c000a855:	c3                   	ret    

c000a856 <__cxa_pure_virtual>:
c000a856:	83 ec 18             	sub    esp,0x18
c000a859:	68 ae 14 02 c0       	push   0xc00214ae
c000a85e:	e8 dc 6d 00 00       	call   c001163f <KePanic(char const*)>
c000a863:	83 c4 1c             	add    esp,0x1c
c000a866:	c3                   	ret    

c000a867 <operator new[](unsigned long)>:
c000a867:	e9 c7 d2 ff ff       	jmp    c0007b33 <malloc>

c000a86c <operator delete(void*, unsigned long)>:
c000a86c:	e9 e2 d2 ff ff       	jmp    c0007b53 <rfree>

c000a871 <operator delete[](void*)>:
c000a871:	e9 dd d2 ff ff       	jmp    c0007b53 <rfree>

c000a876 <operator delete[](void*, unsigned long)>:
c000a876:	e9 d8 d2 ff ff       	jmp    c0007b53 <rfree>

c000a87b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a87b:	55                   	push   ebp
c000a87c:	57                   	push   edi
c000a87d:	56                   	push   esi
c000a87e:	53                   	push   ebx
c000a87f:	83 ec 20             	sub    esp,0x20
c000a882:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a886:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a88e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a892:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a89a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a89e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a8a6:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a8ae:	89 f7                	mov    edi,esi
c000a8b0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a8b5:	89 eb                	mov    ebx,ebp
c000a8b7:	eb 02                	jmp    c000a8bb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a8b9:	89 c7                	mov    edi,eax
c000a8bb:	31 d2                	xor    edx,edx
c000a8bd:	89 f8                	mov    eax,edi
c000a8bf:	f7 f1                	div    ecx
c000a8c1:	83 c3 01             	add    ebx,0x1
c000a8c4:	39 cf                	cmp    edi,ecx
c000a8c6:	73 f1                	jae    c000a8b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a8c8:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a8cb:	eb 02                	jmp    c000a8cf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a8cd:	89 c6                	mov    esi,eax
c000a8cf:	31 d2                	xor    edx,edx
c000a8d1:	89 f0                	mov    eax,esi
c000a8d3:	f7 f1                	div    ecx
c000a8d5:	83 eb 01             	sub    ebx,0x1
c000a8d8:	39 ce                	cmp    esi,ecx
c000a8da:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8de:	88 13                	mov    BYTE PTR [ebx],dl
c000a8e0:	73 eb                	jae    c000a8cd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a8e2:	83 c4 20             	add    esp,0x20
c000a8e5:	89 e8                	mov    eax,ebp
c000a8e7:	5b                   	pop    ebx
c000a8e8:	5e                   	pop    esi
c000a8e9:	5f                   	pop    edi
c000a8ea:	5d                   	pop    ebp
c000a8eb:	c3                   	ret    

c000a8ec <Dbg::logc(char)>:
c000a8ec:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8f3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8f7:	75 12                	jne    c000a90b <Dbg::logc(char)+0x1f>
c000a8f9:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8fe:	ec                   	in     al,dx
c000a8ff:	a8 20                	test   al,0x20
c000a901:	74 fb                	je     c000a8fe <Dbg::logc(char)+0x12>
c000a903:	ba f8 03 00 00       	mov    edx,0x3f8
c000a908:	88 c8                	mov    al,cl
c000a90a:	ee                   	out    dx,al
c000a90b:	c3                   	ret    

c000a90c <Dbg::logs(char*)>:
c000a90c:	53                   	push   ebx
c000a90d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a911:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a914:	85 c0                	test   eax,eax
c000a916:	74 11                	je     c000a929 <Dbg::logs(char*)+0x1d>
c000a918:	50                   	push   eax
c000a919:	83 c3 01             	add    ebx,0x1
c000a91c:	e8 cb ff ff ff       	call   c000a8ec <Dbg::logc(char)>
c000a921:	58                   	pop    eax
c000a922:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a925:	85 c0                	test   eax,eax
c000a927:	75 ef                	jne    c000a918 <Dbg::logs(char*)+0xc>
c000a929:	5b                   	pop    ebx
c000a92a:	c3                   	ret    

c000a92b <Dbg::logWriteInt(unsigned int)>:
c000a92b:	83 ec 10             	sub    esp,0x10
c000a92e:	6a 0a                	push   0xa
c000a930:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a934:	50                   	push   eax
c000a935:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a939:	50                   	push   eax
c000a93a:	e8 3c ff ff ff       	call   c000a87b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93f:	50                   	push   eax
c000a940:	e8 c7 ff ff ff       	call   c000a90c <Dbg::logs(char*)>
c000a945:	83 c4 20             	add    esp,0x20
c000a948:	c3                   	ret    

c000a949 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a949:	83 ec 10             	sub    esp,0x10
c000a94c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a950:	50                   	push   eax
c000a951:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a955:	50                   	push   eax
c000a956:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a95a:	52                   	push   edx
c000a95b:	e8 1b ff ff ff       	call   c000a87b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a960:	50                   	push   eax
c000a961:	e8 a6 ff ff ff       	call   c000a90c <Dbg::logs(char*)>
c000a966:	83 c4 20             	add    esp,0x20
c000a969:	c3                   	ret    

c000a96a <Dbg::kprintf(char const*, ...)>:
c000a96a:	55                   	push   ebp
c000a96b:	57                   	push   edi
c000a96c:	56                   	push   esi
c000a96d:	53                   	push   ebx
c000a96e:	83 ec 0c             	sub    esp,0xc
c000a971:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a978:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a97c:	74 08                	je     c000a986 <Dbg::kprintf(char const*, ...)+0x1c>
c000a97e:	83 c4 0c             	add    esp,0xc
c000a981:	5b                   	pop    ebx
c000a982:	5e                   	pop    esi
c000a983:	5f                   	pop    edi
c000a984:	5d                   	pop    ebp
c000a985:	c3                   	ret    
c000a986:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a98a:	31 ff                	xor    edi,edi
c000a98c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a990:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a993:	85 c0                	test   eax,eax
c000a995:	74 e7                	je     c000a97e <Dbg::kprintf(char const*, ...)+0x14>
c000a997:	8d 77 01             	lea    esi,[edi+0x1]
c000a99a:	83 f8 25             	cmp    eax,0x25
c000a99d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9a0:	75 47                	jne    c000a9e9 <Dbg::kprintf(char const*, ...)+0x7f>
c000a9a2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a9a5:	83 c7 02             	add    edi,0x2
c000a9a8:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a9ab:	83 e8 25             	sub    eax,0x25
c000a9ae:	0f b6 c0             	movzx  eax,al
c000a9b1:	83 f8 53             	cmp    eax,0x53
c000a9b4:	0f 87 ce 00 00 00    	ja     c000aa88 <Dbg::kprintf(char const*, ...)+0x11e>
c000a9ba:	ff 24 85 c4 14 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeb3c]
c000a9c1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9c5:	89 c8                	mov    eax,ecx
c000a9c7:	83 c1 04             	add    ecx,0x4
c000a9ca:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9d0:	55                   	push   ebp
c000a9d1:	e8 55 ff ff ff       	call   c000a92b <Dbg::logWriteInt(unsigned int)>
c000a9d6:	58                   	pop    eax
c000a9d7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9da:	85 c0                	test   eax,eax
c000a9dc:	74 a0                	je     c000a97e <Dbg::kprintf(char const*, ...)+0x14>
c000a9de:	8d 77 01             	lea    esi,[edi+0x1]
c000a9e1:	83 f8 25             	cmp    eax,0x25
c000a9e4:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9e7:	74 b9                	je     c000a9a2 <Dbg::kprintf(char const*, ...)+0x38>
c000a9e9:	50                   	push   eax
c000a9ea:	89 f7                	mov    edi,esi
c000a9ec:	e8 fb fe ff ff       	call   c000a8ec <Dbg::logc(char)>
c000a9f1:	89 ee                	mov    esi,ebp
c000a9f3:	58                   	pop    eax
c000a9f4:	eb e1                	jmp    c000a9d7 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9f6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9fa:	89 c8                	mov    eax,ecx
c000a9fc:	83 c1 04             	add    ecx,0x4
c000a9ff:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa03:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa05:	50                   	push   eax
c000aa06:	e8 01 ff ff ff       	call   c000a90c <Dbg::logs(char*)>
c000aa0b:	58                   	pop    eax
c000aa0c:	eb c9                	jmp    c000a9d7 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa0e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa12:	89 d0                	mov    eax,edx
c000aa14:	83 c2 04             	add    edx,0x4
c000aa17:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa1b:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa1d:	50                   	push   eax
c000aa1e:	e8 08 ff ff ff       	call   c000a92b <Dbg::logWriteInt(unsigned int)>
c000aa23:	58                   	pop    eax
c000aa24:	eb b1                	jmp    c000a9d7 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa26:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa2a:	89 d0                	mov    eax,edx
c000aa2c:	83 c2 04             	add    edx,0x4
c000aa2f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa33:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa36:	50                   	push   eax
c000aa37:	e8 b0 fe ff ff       	call   c000a8ec <Dbg::logc(char)>
c000aa3c:	58                   	pop    eax
c000aa3d:	eb 98                	jmp    c000a9d7 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa43:	89 c8                	mov    eax,ecx
c000aa45:	83 c1 04             	add    ecx,0x4
c000aa48:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa4c:	6a 10                	push   0x10
c000aa4e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa50:	51                   	push   ecx
c000aa51:	e8 f3 fe ff ff       	call   c000a949 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa56:	5d                   	pop    ebp
c000aa57:	58                   	pop    eax
c000aa58:	e9 7a ff ff ff       	jmp    c000a9d7 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa5d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa61:	89 d0                	mov    eax,edx
c000aa63:	83 c2 08             	add    edx,0x8
c000aa66:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa6a:	6a 10                	push   0x10
c000aa6c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 d5 fe ff ff       	call   c000a949 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa74:	58                   	pop    eax
c000aa75:	5a                   	pop    edx
c000aa76:	e9 5c ff ff ff       	jmp    c000a9d7 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	6a 25                	push   0x25
c000aa7d:	e8 6a fe ff ff       	call   c000a8ec <Dbg::logc(char)>
c000aa82:	5a                   	pop    edx
c000aa83:	e9 4f ff ff ff       	jmp    c000a9d7 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa88:	6a 25                	push   0x25
c000aa8a:	e8 5d fe ff ff       	call   c000a8ec <Dbg::logc(char)>
c000aa8f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa93:	50                   	push   eax
c000aa94:	e8 53 fe ff ff       	call   c000a8ec <Dbg::logc(char)>
c000aa99:	5a                   	pop    edx
c000aa9a:	59                   	pop    ecx
c000aa9b:	e9 37 ff ff ff       	jmp    c000a9d7 <Dbg::kprintf(char const*, ...)+0x6d>

c000aaa0 <KiUbsanPrintDetails(char const*, void*)>:
c000aaa0:	83 ec 1c             	sub    esp,0x1c
c000aaa3:	83 ec 08             	sub    esp,0x8
c000aaa6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aaaa:	68 14 16 02 c0       	push   0xc0021614
c000aaaf:	e8 b6 fe ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000aab4:	83 c4 10             	add    esp,0x10
c000aab7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aabb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aabf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aac3:	8b 00                	mov    eax,DWORD PTR [eax]
c000aac5:	83 ec 08             	sub    esp,0x8
c000aac8:	50                   	push   eax
c000aac9:	68 28 16 02 c0       	push   0xc0021628
c000aace:	e8 97 fe ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000aad3:	83 c4 10             	add    esp,0x10
c000aad6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aada:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aadd:	83 ec 08             	sub    esp,0x8
c000aae0:	50                   	push   eax
c000aae1:	68 32 16 02 c0       	push   0xc0021632
c000aae6:	e8 7f fe ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000aaeb:	83 c4 10             	add    esp,0x10
c000aaee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aaf2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aaf5:	83 ec 08             	sub    esp,0x8
c000aaf8:	50                   	push   eax
c000aaf9:	68 3c 16 02 c0       	push   0xc002163c
c000aafe:	e8 67 fe ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000ab03:	83 c4 10             	add    esp,0x10
c000ab06:	90                   	nop
c000ab07:	83 c4 1c             	add    esp,0x1c
c000ab0a:	c3                   	ret    
c000ab0b:	90                   	nop

c000ab0c <__ubsan_handle_type_mismatch_v1>:
c000ab0c:	83 ec 0c             	sub    esp,0xc
c000ab0f:	83 ec 08             	sub    esp,0x8
c000ab12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab16:	68 80 17 02 c0       	push   0xc0021780
c000ab1b:	e8 80 ff ff ff       	call   c000aaa0 <KiUbsanPrintDetails(char const*, void*)>
c000ab20:	83 c4 10             	add    esp,0x10
c000ab23:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab28:	75 16                	jne    c000ab40 <__ubsan_handle_type_mismatch_v1+0x34>
c000ab2a:	83 ec 0c             	sub    esp,0xc
c000ab2d:	68 46 16 02 c0       	push   0xc0021646
c000ab32:	e8 33 fe ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	e9 91 00 00 00       	jmp    c000abd0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab3f:	90                   	nop
c000ab40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab44:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab47:	85 c0                	test   eax,eax
c000ab49:	74 29                	je     c000ab74 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab52:	83 e8 01             	sub    eax,0x1
c000ab55:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab59:	75 19                	jne    c000ab74 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab5b:	83 ec 08             	sub    esp,0x8
c000ab5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab62:	68 a0 17 02 c0       	push   0xc00217a0
c000ab67:	e8 fe fd ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000ab6c:	83 c4 10             	add    esp,0x10
c000ab6f:	eb 5f                	jmp    c000abd0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab71:	8d 76 00             	lea    esi,[esi+0x0]
c000ab74:	83 ec 0c             	sub    esp,0xc
c000ab77:	68 5b 16 02 c0       	push   0xc002165b
c000ab7c:	e8 e9 fd ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000ab81:	83 c4 10             	add    esp,0x10
c000ab84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab88:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab8b:	0f b6 c0             	movzx  eax,al
c000ab8e:	83 ec 08             	sub    esp,0x8
c000ab91:	50                   	push   eax
c000ab92:	68 75 16 02 c0       	push   0xc0021675
c000ab97:	e8 ce fd ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aba6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000aba9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000abad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abb1:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000abb4:	0f b6 c0             	movzx  eax,al
c000abb7:	8b 04 85 80 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc780]
c000abbe:	51                   	push   ecx
c000abbf:	52                   	push   edx
c000abc0:	50                   	push   eax
c000abc1:	68 c8 17 02 c0       	push   0xc00217c8
c000abc6:	e8 9f fd ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000abcb:	83 c4 10             	add    esp,0x10
c000abce:	66 90                	xchg   ax,ax
c000abd0:	83 ec 0c             	sub    esp,0xc
c000abd3:	68 80 17 02 c0       	push   0xc0021780
c000abd8:	e8 62 6a 00 00       	call   c001163f <KePanic(char const*)>
c000abdd:	83 c4 10             	add    esp,0x10
c000abe0:	90                   	nop
c000abe1:	83 c4 0c             	add    esp,0xc
c000abe4:	c3                   	ret    
c000abe5:	8d 76 00             	lea    esi,[esi+0x0]

c000abe8 <__ubsan_handle_pointer_overflow>:
c000abe8:	83 ec 0c             	sub    esp,0xc
c000abeb:	83 ec 08             	sub    esp,0x8
c000abee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abf2:	68 10 18 02 c0       	push   0xc0021810
c000abf7:	e8 a4 fe ff ff       	call   c000aaa0 <KiUbsanPrintDetails(char const*, void*)>
c000abfc:	83 c4 10             	add    esp,0x10
c000abff:	83 ec 0c             	sub    esp,0xc
c000ac02:	68 10 18 02 c0       	push   0xc0021810
c000ac07:	e8 33 6a 00 00       	call   c001163f <KePanic(char const*)>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	90                   	nop
c000ac10:	83 c4 0c             	add    esp,0xc
c000ac13:	c3                   	ret    

c000ac14 <__ubsan_handle_out_of_bounds>:
c000ac14:	83 ec 0c             	sub    esp,0xc
c000ac17:	83 ec 08             	sub    esp,0x8
c000ac1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac1e:	68 80 16 02 c0       	push   0xc0021680
c000ac23:	e8 78 fe ff ff       	call   c000aaa0 <KiUbsanPrintDetails(char const*, void*)>
c000ac28:	83 c4 10             	add    esp,0x10
c000ac2b:	83 ec 0c             	sub    esp,0xc
c000ac2e:	68 80 16 02 c0       	push   0xc0021680
c000ac33:	e8 07 6a 00 00       	call   c001163f <KePanic(char const*)>
c000ac38:	83 c4 10             	add    esp,0x10
c000ac3b:	90                   	nop
c000ac3c:	83 c4 0c             	add    esp,0xc
c000ac3f:	c3                   	ret    

c000ac40 <__ubsan_handle_add_overflow>:
c000ac40:	83 ec 0c             	sub    esp,0xc
c000ac43:	83 ec 08             	sub    esp,0x8
c000ac46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac4a:	68 9d 16 02 c0       	push   0xc002169d
c000ac4f:	e8 4c fe ff ff       	call   c000aaa0 <KiUbsanPrintDetails(char const*, void*)>
c000ac54:	83 c4 10             	add    esp,0x10
c000ac57:	83 ec 0c             	sub    esp,0xc
c000ac5a:	68 9d 16 02 c0       	push   0xc002169d
c000ac5f:	e8 db 69 00 00       	call   c001163f <KePanic(char const*)>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	90                   	nop
c000ac68:	83 c4 0c             	add    esp,0xc
c000ac6b:	c3                   	ret    

c000ac6c <__ubsan_handle_load_invalid_value>:
c000ac6c:	83 ec 0c             	sub    esp,0xc
c000ac6f:	83 ec 08             	sub    esp,0x8
c000ac72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac76:	68 30 18 02 c0       	push   0xc0021830
c000ac7b:	e8 20 fe ff ff       	call   c000aaa0 <KiUbsanPrintDetails(char const*, void*)>
c000ac80:	83 c4 10             	add    esp,0x10
c000ac83:	83 ec 0c             	sub    esp,0xc
c000ac86:	68 30 18 02 c0       	push   0xc0021830
c000ac8b:	e8 af 69 00 00       	call   c001163f <KePanic(char const*)>
c000ac90:	83 c4 10             	add    esp,0x10
c000ac93:	90                   	nop
c000ac94:	83 c4 0c             	add    esp,0xc
c000ac97:	c3                   	ret    

c000ac98 <__ubsan_handle_divrem_overflow>:
c000ac98:	83 ec 0c             	sub    esp,0xc
c000ac9b:	83 ec 08             	sub    esp,0x8
c000ac9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aca2:	68 54 18 02 c0       	push   0xc0021854
c000aca7:	e8 f4 fd ff ff       	call   c000aaa0 <KiUbsanPrintDetails(char const*, void*)>
c000acac:	83 c4 10             	add    esp,0x10
c000acaf:	83 ec 0c             	sub    esp,0xc
c000acb2:	68 54 18 02 c0       	push   0xc0021854
c000acb7:	e8 83 69 00 00       	call   c001163f <KePanic(char const*)>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	90                   	nop
c000acc0:	83 c4 0c             	add    esp,0xc
c000acc3:	c3                   	ret    

c000acc4 <__ubsan_handle_mul_overflow>:
c000acc4:	83 ec 0c             	sub    esp,0xc
c000acc7:	83 ec 08             	sub    esp,0x8
c000acca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acce:	68 b9 16 02 c0       	push   0xc00216b9
c000acd3:	e8 c8 fd ff ff       	call   c000aaa0 <KiUbsanPrintDetails(char const*, void*)>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	83 ec 0c             	sub    esp,0xc
c000acde:	68 b9 16 02 c0       	push   0xc00216b9
c000ace3:	e8 57 69 00 00       	call   c001163f <KePanic(char const*)>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	90                   	nop
c000acec:	83 c4 0c             	add    esp,0xc
c000acef:	c3                   	ret    

c000acf0 <__ubsan_handle_sub_overflow>:
c000acf0:	83 ec 0c             	sub    esp,0xc
c000acf3:	83 ec 08             	sub    esp,0x8
c000acf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acfa:	68 d5 16 02 c0       	push   0xc00216d5
c000acff:	e8 9c fd ff ff       	call   c000aaa0 <KiUbsanPrintDetails(char const*, void*)>
c000ad04:	83 c4 10             	add    esp,0x10
c000ad07:	83 ec 0c             	sub    esp,0xc
c000ad0a:	68 d5 16 02 c0       	push   0xc00216d5
c000ad0f:	e8 2b 69 00 00       	call   c001163f <KePanic(char const*)>
c000ad14:	83 c4 10             	add    esp,0x10
c000ad17:	90                   	nop
c000ad18:	83 c4 0c             	add    esp,0xc
c000ad1b:	c3                   	ret    

c000ad1c <__ubsan_handle_shift_out_of_bounds>:
c000ad1c:	83 ec 0c             	sub    esp,0xc
c000ad1f:	83 ec 08             	sub    esp,0x8
c000ad22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad26:	68 74 18 02 c0       	push   0xc0021874
c000ad2b:	e8 70 fd ff ff       	call   c000aaa0 <KiUbsanPrintDetails(char const*, void*)>
c000ad30:	83 c4 10             	add    esp,0x10
c000ad33:	83 ec 0c             	sub    esp,0xc
c000ad36:	68 74 18 02 c0       	push   0xc0021874
c000ad3b:	e8 ff 68 00 00       	call   c001163f <KePanic(char const*)>
c000ad40:	83 c4 10             	add    esp,0x10
c000ad43:	90                   	nop
c000ad44:	83 c4 0c             	add    esp,0xc
c000ad47:	c3                   	ret    

c000ad48 <__ubsan_handle_negate_overflow>:
c000ad48:	83 ec 0c             	sub    esp,0xc
c000ad4b:	83 ec 08             	sub    esp,0x8
c000ad4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad52:	68 98 18 02 c0       	push   0xc0021898
c000ad57:	e8 44 fd ff ff       	call   c000aaa0 <KiUbsanPrintDetails(char const*, void*)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	83 ec 0c             	sub    esp,0xc
c000ad62:	68 98 18 02 c0       	push   0xc0021898
c000ad67:	e8 d3 68 00 00       	call   c001163f <KePanic(char const*)>
c000ad6c:	83 c4 10             	add    esp,0x10
c000ad6f:	90                   	nop
c000ad70:	83 c4 0c             	add    esp,0xc
c000ad73:	c3                   	ret    

c000ad74 <KiIsHashInTable(unsigned short)>:
c000ad74:	0f b7 d0             	movzx  edx,ax
c000ad77:	83 e0 07             	and    eax,0x7
c000ad7a:	c1 fa 03             	sar    edx,0x3
c000ad7d:	88 c1                	mov    cl,al
c000ad7f:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad86:	d3 fa                	sar    edx,cl
c000ad88:	89 d0                	mov    eax,edx
c000ad8a:	83 e0 01             	and    eax,0x1
c000ad8d:	c3                   	ret    

c000ad8e <KiSetHashInTable(unsigned short, bool)>:
c000ad8e:	56                   	push   esi
c000ad8f:	53                   	push   ebx
c000ad90:	0f b7 d8             	movzx  ebx,ax
c000ad93:	c1 fb 03             	sar    ebx,0x3
c000ad96:	83 e0 07             	and    eax,0x7
c000ad99:	89 c1                	mov    ecx,eax
c000ad9b:	b8 01 00 00 00       	mov    eax,0x1
c000ada0:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ada7:	d3 e0                	shl    eax,cl
c000ada9:	84 d2                	test   dl,dl
c000adab:	74 04                	je     c000adb1 <KiSetHashInTable(unsigned short, bool)+0x23>
c000adad:	09 f0                	or     eax,esi
c000adaf:	eb 04                	jmp    c000adb5 <KiSetHashInTable(unsigned short, bool)+0x27>
c000adb1:	f7 d0                	not    eax
c000adb3:	21 f0                	and    eax,esi
c000adb5:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000adbb:	5b                   	pop    ebx
c000adbc:	5e                   	pop    esi
c000adbd:	c3                   	ret    

c000adbe <KiFlushSymlinkChanges()>:
c000adbe:	57                   	push   edi
c000adbf:	56                   	push   esi
c000adc0:	53                   	push   ebx
c000adc1:	83 ec 1c             	sub    esp,0x1c
c000adc4:	68 14 01 00 00       	push   0x114
c000adc9:	e8 65 cd ff ff       	call   c0007b33 <malloc>
c000adce:	83 c4 0c             	add    esp,0xc
c000add1:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000add7:	68 b7 18 02 c0       	push   0xc00218b7
c000addc:	50                   	push   eax
c000addd:	89 c3                	mov    ebx,eax
c000addf:	e8 9e 0d 00 00       	call   c000bb82 <File::File(char const*, Process*)>
c000ade4:	83 c4 10             	add    esp,0x10
c000ade7:	85 db                	test   ebx,ebx
c000ade9:	75 10                	jne    c000adfb <KiFlushSymlinkChanges()+0x3d>
c000adeb:	83 ec 0c             	sub    esp,0xc
c000adee:	68 d5 18 02 c0       	push   0xc00218d5
c000adf3:	e8 47 68 00 00       	call   c001163f <KePanic(char const*)>
c000adf8:	83 c4 10             	add    esp,0x10
c000adfb:	50                   	push   eax
c000adfc:	50                   	push   eax
c000adfd:	6a 06                	push   0x6
c000adff:	53                   	push   ebx
c000ae00:	e8 9b 0d 00 00       	call   c000bba0 <File::open(FileOpenMode)>
c000ae05:	83 c4 10             	add    esp,0x10
c000ae08:	85 c0                	test   eax,eax
c000ae0a:	74 10                	je     c000ae1c <KiFlushSymlinkChanges()+0x5e>
c000ae0c:	83 ec 0c             	sub    esp,0xc
c000ae0f:	68 ef 18 02 c0       	push   0xc00218ef
c000ae14:	e8 26 68 00 00       	call   c001163f <KePanic(char const*)>
c000ae19:	83 c4 10             	add    esp,0x10
c000ae1c:	31 f6                	xor    esi,esi
c000ae1e:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae24:	7e 70                	jle    c000ae96 <KiFlushSymlinkChanges()+0xd8>
c000ae26:	83 ec 0c             	sub    esp,0xc
c000ae29:	89 f0                	mov    eax,esi
c000ae2b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae2d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae31:	c1 e0 08             	shl    eax,0x8
c000ae34:	57                   	push   edi
c000ae35:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae3a:	50                   	push   eax
c000ae3b:	6a 00                	push   0x0
c000ae3d:	68 00 01 00 00       	push   0x100
c000ae42:	53                   	push   ebx
c000ae43:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae46:	83 c4 20             	add    esp,0x20
c000ae49:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae51:	74 10                	je     c000ae63 <KiFlushSymlinkChanges()+0xa5>
c000ae53:	83 ec 0c             	sub    esp,0xc
c000ae56:	68 09 19 02 c0       	push   0xc0021909
c000ae5b:	e8 df 67 00 00       	call   c001163f <KePanic(char const*)>
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae65:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae6c:	83 ec 0c             	sub    esp,0xc
c000ae6f:	57                   	push   edi
c000ae70:	52                   	push   edx
c000ae71:	6a 00                	push   0x0
c000ae73:	6a 08                	push   0x8
c000ae75:	53                   	push   ebx
c000ae76:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae79:	83 c4 20             	add    esp,0x20
c000ae7c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae81:	74 10                	je     c000ae93 <KiFlushSymlinkChanges()+0xd5>
c000ae83:	83 ec 0c             	sub    esp,0xc
c000ae86:	68 23 19 02 c0       	push   0xc0021923
c000ae8b:	e8 af 67 00 00       	call   c001163f <KePanic(char const*)>
c000ae90:	83 c4 10             	add    esp,0x10
c000ae93:	46                   	inc    esi
c000ae94:	eb 88                	jmp    c000ae1e <KiFlushSymlinkChanges()+0x60>
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	53                   	push   ebx
c000ae9a:	e8 5f 0d 00 00       	call   c000bbfe <File::close()>
c000ae9f:	83 c4 10             	add    esp,0x10
c000aea2:	85 db                	test   ebx,ebx
c000aea4:	74 0c                	je     c000aeb2 <KiFlushSymlinkChanges()+0xf4>
c000aea6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aea8:	83 ec 0c             	sub    esp,0xc
c000aeab:	53                   	push   ebx
c000aeac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aeaf:	83 c4 10             	add    esp,0x10
c000aeb2:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000aebc:	83 c4 10             	add    esp,0x10
c000aebf:	5b                   	pop    ebx
c000aec0:	5e                   	pop    esi
c000aec1:	5f                   	pop    edi
c000aec2:	c3                   	ret    

c000aec3 <KiDeinitialiseSymlinks(void*)>:
c000aec3:	e9 f6 fe ff ff       	jmp    c000adbe <KiFlushSymlinkChanges()>

c000aec8 <KiGetSymlinkHash(char const*)>:
c000aec8:	53                   	push   ebx
c000aec9:	89 c3                	mov    ebx,eax
c000aecb:	83 ec 14             	sub    esp,0x14
c000aece:	50                   	push   eax
c000aecf:	e8 ac 56 ff ff       	call   c0000580 <strlen>
c000aed4:	5a                   	pop    edx
c000aed5:	59                   	pop    ecx
c000aed6:	50                   	push   eax
c000aed7:	53                   	push   ebx
c000aed8:	e8 e4 60 00 00       	call   c0010fc1 <KeCalculateCRC32(unsigned char*, int)>
c000aedd:	83 c4 18             	add    esp,0x18
c000aee0:	5b                   	pop    ebx
c000aee1:	89 c2                	mov    edx,eax
c000aee3:	c1 ea 10             	shr    edx,0x10
c000aee6:	31 d0                	xor    eax,edx
c000aee8:	c3                   	ret    

c000aee9 <KiCreateSymlinkID()>:
c000aee9:	55                   	push   ebp
c000aeea:	57                   	push   edi
c000aeeb:	56                   	push   esi
c000aeec:	53                   	push   ebx
c000aeed:	31 db                	xor    ebx,ebx
c000aeef:	83 ec 1c             	sub    esp,0x1c
c000aef2:	e8 96 68 00 00       	call   c001178d <KeRand()>
c000aef7:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aefd:	31 d2                	xor    edx,edx
c000aeff:	43                   	inc    ebx
c000af00:	31 ff                	xor    edi,edi
c000af02:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000af05:	89 ee                	mov    esi,ebp
c000af07:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000af0d:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000af11:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af15:	c1 e0 1f             	shl    eax,0x1f
c000af18:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af22:	75 10                	jne    c000af34 <KiCreateSymlinkID()+0x4b>
c000af24:	83 ec 0c             	sub    esp,0xc
c000af27:	68 3d 19 02 c0       	push   0xc002193d
c000af2c:	e8 0e 67 00 00       	call   c001163f <KePanic(char const*)>
c000af31:	83 c4 10             	add    esp,0x10
c000af34:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000af38:	75 06                	jne    c000af40 <KiCreateSymlinkID()+0x57>
c000af3a:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000af3e:	74 b2                	je     c000aef2 <KiCreateSymlinkID()+0x9>
c000af40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af48:	83 c4 1c             	add    esp,0x1c
c000af4b:	5b                   	pop    ebx
c000af4c:	31 f0                	xor    eax,esi
c000af4e:	5e                   	pop    esi
c000af4f:	31 fa                	xor    edx,edi
c000af51:	5f                   	pop    edi
c000af52:	5d                   	pop    ebp
c000af53:	c3                   	ret    

c000af54 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af54:	53                   	push   ebx
c000af55:	83 ec 0c             	sub    esp,0xc
c000af58:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af60:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af65:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af69:	68 00 01 00 00       	push   0x100
c000af6e:	6a 00                	push   0x0
c000af70:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af77:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af7e:	c1 e0 08             	shl    eax,0x8
c000af81:	05 00 70 02 c0       	add    eax,0xc0027000
c000af86:	50                   	push   eax
c000af87:	e8 64 55 ff ff       	call   c00004f0 <memset>
c000af8c:	58                   	pop    eax
c000af8d:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af92:	5a                   	pop    edx
c000af93:	c1 e0 08             	shl    eax,0x8
c000af96:	53                   	push   ebx
c000af97:	05 00 70 02 c0       	add    eax,0xc0027000
c000af9c:	50                   	push   eax
c000af9d:	e8 ae 56 ff ff       	call   c0000650 <strcpy>
c000afa2:	89 d8                	mov    eax,ebx
c000afa4:	e8 1f ff ff ff       	call   c000aec8 <KiGetSymlinkHash(char const*)>
c000afa9:	59                   	pop    ecx
c000afaa:	0f b7 d8             	movzx  ebx,ax
c000afad:	58                   	pop    eax
c000afae:	53                   	push   ebx
c000afaf:	68 46 19 02 c0       	push   0xc0021946
c000afb4:	e8 b1 f9 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000afb9:	89 d8                	mov    eax,ebx
c000afbb:	ba 01 00 00 00       	mov    edx,0x1
c000afc0:	e8 c9 fd ff ff       	call   c000ad8e <KiSetHashInTable(unsigned short, bool)>
c000afc5:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	40                   	inc    eax
c000afce:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afd3:	83 f8 03             	cmp    eax,0x3
c000afd6:	7e 09                	jle    c000afe1 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c000afd8:	83 c4 08             	add    esp,0x8
c000afdb:	5b                   	pop    ebx
c000afdc:	e9 dd fd ff ff       	jmp    c000adbe <KiFlushSymlinkChanges()>
c000afe1:	83 c4 08             	add    esp,0x8
c000afe4:	5b                   	pop    ebx
c000afe5:	c3                   	ret    

c000afe6 <KeInitialiseSymlinks()>:
c000afe6:	57                   	push   edi
c000afe7:	56                   	push   esi
c000afe8:	53                   	push   ebx
c000afe9:	81 ec 14 01 00 00    	sub    esp,0x114
c000afef:	68 00 20 00 00       	push   0x2000
c000aff4:	6a 00                	push   0x0
c000aff6:	68 00 74 02 c0       	push   0xc0027400
c000affb:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000b005:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b00f:	e8 dc 54 ff ff       	call   c00004f0 <memset>
c000b014:	59                   	pop    ecx
c000b015:	5b                   	pop    ebx
c000b016:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000b01c:	68 5a 19 02 c0       	push   0xc002195a
c000b021:	e8 44 f9 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000b026:	5e                   	pop    esi
c000b027:	5f                   	pop    edi
c000b028:	6a 00                	push   0x0
c000b02a:	68 c3 ae 00 c0       	push   0xc000aec3
c000b02f:	e8 fa 5d 00 00       	call   c0010e2e <KeRegisterAtexit(void (*)(void*), void*)>
c000b034:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b03b:	e8 f3 ca ff ff       	call   c0007b33 <malloc>
c000b040:	83 c4 0c             	add    esp,0xc
c000b043:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b049:	68 b7 18 02 c0       	push   0xc00218b7
c000b04e:	50                   	push   eax
c000b04f:	89 c3                	mov    ebx,eax
c000b051:	e8 2c 0b 00 00       	call   c000bb82 <File::File(char const*, Process*)>
c000b056:	83 c4 10             	add    esp,0x10
c000b059:	85 db                	test   ebx,ebx
c000b05b:	75 10                	jne    c000b06d <KeInitialiseSymlinks()+0x87>
c000b05d:	83 ec 0c             	sub    esp,0xc
c000b060:	68 77 19 02 c0       	push   0xc0021977
c000b065:	e8 d5 65 00 00       	call   c001163f <KePanic(char const*)>
c000b06a:	83 c4 10             	add    esp,0x10
c000b06d:	83 ec 0c             	sub    esp,0xc
c000b070:	53                   	push   ebx
c000b071:	e8 ee 0d 00 00       	call   c000be64 <File::exists()>
c000b076:	83 c4 10             	add    esp,0x10
c000b079:	84 c0                	test   al,al
c000b07b:	75 3a                	jne    c000b0b7 <KeInitialiseSymlinks()+0xd1>
c000b07d:	52                   	push   edx
c000b07e:	52                   	push   edx
c000b07f:	6a 12                	push   0x12
c000b081:	53                   	push   ebx
c000b082:	e8 19 0b 00 00       	call   c000bba0 <File::open(FileOpenMode)>
c000b087:	83 c4 10             	add    esp,0x10
c000b08a:	85 c0                	test   eax,eax
c000b08c:	74 10                	je     c000b09e <KeInitialiseSymlinks()+0xb8>
c000b08e:	83 ec 0c             	sub    esp,0xc
c000b091:	68 94 19 02 c0       	push   0xc0021994
c000b096:	e8 a4 65 00 00       	call   c001163f <KePanic(char const*)>
c000b09b:	83 c4 10             	add    esp,0x10
c000b09e:	83 ec 0c             	sub    esp,0xc
c000b0a1:	53                   	push   ebx
c000b0a2:	e8 57 0b 00 00       	call   c000bbfe <File::close()>
c000b0a7:	83 c4 10             	add    esp,0x10
c000b0aa:	85 db                	test   ebx,ebx
c000b0ac:	0f 84 9e 00 00 00    	je     c000b150 <KeInitialiseSymlinks()+0x16a>
c000b0b2:	e9 8d 00 00 00       	jmp    c000b144 <KeInitialiseSymlinks()+0x15e>
c000b0b7:	50                   	push   eax
c000b0b8:	50                   	push   eax
c000b0b9:	6a 01                	push   0x1
c000b0bb:	53                   	push   ebx
c000b0bc:	e8 df 0a 00 00       	call   c000bba0 <File::open(FileOpenMode)>
c000b0c1:	83 c4 10             	add    esp,0x10
c000b0c4:	85 c0                	test   eax,eax
c000b0c6:	74 10                	je     c000b0d8 <KeInitialiseSymlinks()+0xf2>
c000b0c8:	83 ec 0c             	sub    esp,0xc
c000b0cb:	68 b1 19 02 c0       	push   0xc00219b1
c000b0d0:	e8 6a 65 00 00       	call   c001163f <KePanic(char const*)>
c000b0d5:	83 c4 10             	add    esp,0x10
c000b0d8:	ff 05 00 94 02 c0    	inc    DWORD PTR ds:0xc0029400
c000b0de:	83 ec 0c             	sub    esp,0xc
c000b0e1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b0e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0e7:	57                   	push   edi
c000b0e8:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b0ec:	56                   	push   esi
c000b0ed:	6a 00                	push   0x0
c000b0ef:	68 00 01 00 00       	push   0x100
c000b0f4:	53                   	push   ebx
c000b0f5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0f8:	83 c4 20             	add    esp,0x20
c000b0fb:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b103:	75 33                	jne    c000b138 <KeInitialiseSymlinks()+0x152>
c000b105:	83 ec 0c             	sub    esp,0xc
c000b108:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b10a:	57                   	push   edi
c000b10b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b10f:	52                   	push   edx
c000b110:	6a 00                	push   0x0
c000b112:	6a 08                	push   0x8
c000b114:	53                   	push   ebx
c000b115:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b118:	83 c4 20             	add    esp,0x20
c000b11b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b120:	75 16                	jne    c000b138 <KeInitialiseSymlinks()+0x152>
c000b122:	89 f0                	mov    eax,esi
c000b124:	e8 9f fd ff ff       	call   c000aec8 <KiGetSymlinkHash(char const*)>
c000b129:	ba 01 00 00 00       	mov    edx,0x1
c000b12e:	0f b7 c0             	movzx  eax,ax
c000b131:	e8 58 fc ff ff       	call   c000ad8e <KiSetHashInTable(unsigned short, bool)>
c000b136:	eb a0                	jmp    c000b0d8 <KeInitialiseSymlinks()+0xf2>
c000b138:	83 ec 0c             	sub    esp,0xc
c000b13b:	53                   	push   ebx
c000b13c:	e8 bd 0a 00 00       	call   c000bbfe <File::close()>
c000b141:	83 c4 10             	add    esp,0x10
c000b144:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b146:	83 ec 0c             	sub    esp,0xc
c000b149:	53                   	push   ebx
c000b14a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b14d:	83 c4 10             	add    esp,0x10
c000b150:	81 c4 10 01 00 00    	add    esp,0x110
c000b156:	5b                   	pop    ebx
c000b157:	5e                   	pop    esi
c000b158:	5f                   	pop    edi
c000b159:	c3                   	ret    

c000b15a <KiIsSymlinkRegistered(char const*)>:
c000b15a:	55                   	push   ebp
c000b15b:	57                   	push   edi
c000b15c:	56                   	push   esi
c000b15d:	53                   	push   ebx
c000b15e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b164:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b16b:	89 f0                	mov    eax,esi
c000b16d:	e8 56 fd ff ff       	call   c000aec8 <KiGetSymlinkHash(char const*)>
c000b172:	53                   	push   ebx
c000b173:	56                   	push   esi
c000b174:	0f b7 c0             	movzx  eax,ax
c000b177:	50                   	push   eax
c000b178:	68 cc 19 02 c0       	push   0xc00219cc
c000b17d:	e8 e8 f7 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000b182:	89 f0                	mov    eax,esi
c000b184:	e8 3f fd ff ff       	call   c000aec8 <KiGetSymlinkHash(char const*)>
c000b189:	0f b7 c0             	movzx  eax,ax
c000b18c:	e8 e3 fb ff ff       	call   c000ad74 <KiIsHashInTable(unsigned short)>
c000b191:	83 c4 10             	add    esp,0x10
c000b194:	31 d2                	xor    edx,edx
c000b196:	88 c1                	mov    cl,al
c000b198:	31 c0                	xor    eax,eax
c000b19a:	84 c9                	test   cl,cl
c000b19c:	0f 84 31 01 00 00    	je     c000b2d3 <KiIsSymlinkRegistered(char const*)+0x179>
c000b1a2:	31 db                	xor    ebx,ebx
c000b1a4:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b1aa:	7e 30                	jle    c000b1dc <KiIsSymlinkRegistered(char const*)+0x82>
c000b1ac:	89 d8                	mov    eax,ebx
c000b1ae:	c1 e0 08             	shl    eax,0x8
c000b1b1:	51                   	push   ecx
c000b1b2:	05 00 70 02 c0       	add    eax,0xc0027000
c000b1b7:	51                   	push   ecx
c000b1b8:	50                   	push   eax
c000b1b9:	56                   	push   esi
c000b1ba:	e8 c1 55 ff ff       	call   c0000780 <strcmp>
c000b1bf:	83 c4 10             	add    esp,0x10
c000b1c2:	85 c0                	test   eax,eax
c000b1c4:	75 13                	jne    c000b1d9 <KiIsSymlinkRegistered(char const*)+0x7f>
c000b1c6:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b1cd:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b1d4:	e9 fa 00 00 00       	jmp    c000b2d3 <KiIsSymlinkRegistered(char const*)+0x179>
c000b1d9:	43                   	inc    ebx
c000b1da:	eb c8                	jmp    c000b1a4 <KiIsSymlinkRegistered(char const*)+0x4a>
c000b1dc:	83 ec 0c             	sub    esp,0xc
c000b1df:	68 14 01 00 00       	push   0x114
c000b1e4:	e8 4a c9 ff ff       	call   c0007b33 <malloc>
c000b1e9:	83 c4 0c             	add    esp,0xc
c000b1ec:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b1f2:	68 b7 18 02 c0       	push   0xc00218b7
c000b1f7:	50                   	push   eax
c000b1f8:	89 c3                	mov    ebx,eax
c000b1fa:	e8 83 09 00 00       	call   c000bb82 <File::File(char const*, Process*)>
c000b1ff:	83 c4 10             	add    esp,0x10
c000b202:	85 db                	test   ebx,ebx
c000b204:	75 12                	jne    c000b218 <KiIsSymlinkRegistered(char const*)+0xbe>
c000b206:	83 ec 0c             	sub    esp,0xc
c000b209:	68 e1 19 02 c0       	push   0xc00219e1
c000b20e:	e8 2c 64 00 00       	call   c001163f <KePanic(char const*)>
c000b213:	83 c4 10             	add    esp,0x10
c000b216:	eb 10                	jmp    c000b228 <KiIsSymlinkRegistered(char const*)+0xce>
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	53                   	push   ebx
c000b21c:	e8 43 0c 00 00       	call   c000be64 <File::exists()>
c000b221:	83 c4 10             	add    esp,0x10
c000b224:	84 c0                	test   al,al
c000b226:	74 de                	je     c000b206 <KiIsSymlinkRegistered(char const*)+0xac>
c000b228:	52                   	push   edx
c000b229:	52                   	push   edx
c000b22a:	6a 01                	push   0x1
c000b22c:	53                   	push   ebx
c000b22d:	e8 6e 09 00 00       	call   c000bba0 <File::open(FileOpenMode)>
c000b232:	83 c4 10             	add    esp,0x10
c000b235:	85 c0                	test   eax,eax
c000b237:	74 10                	je     c000b249 <KiIsSymlinkRegistered(char const*)+0xef>
c000b239:	83 ec 0c             	sub    esp,0xc
c000b23c:	68 fc 19 02 c0       	push   0xc00219fc
c000b241:	e8 f9 63 00 00       	call   c001163f <KePanic(char const*)>
c000b246:	83 c4 10             	add    esp,0x10
c000b249:	83 ec 0c             	sub    esp,0xc
c000b24c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b24e:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b252:	55                   	push   ebp
c000b253:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b257:	57                   	push   edi
c000b258:	6a 00                	push   0x0
c000b25a:	68 00 01 00 00       	push   0x100
c000b25f:	53                   	push   ebx
c000b260:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b263:	83 c4 20             	add    esp,0x20
c000b266:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b26e:	75 4b                	jne    c000b2bb <KiIsSymlinkRegistered(char const*)+0x161>
c000b270:	83 ec 0c             	sub    esp,0xc
c000b273:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b275:	55                   	push   ebp
c000b276:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b27a:	52                   	push   edx
c000b27b:	6a 00                	push   0x0
c000b27d:	6a 08                	push   0x8
c000b27f:	53                   	push   ebx
c000b280:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b283:	83 c4 20             	add    esp,0x20
c000b286:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b28b:	75 2e                	jne    c000b2bb <KiIsSymlinkRegistered(char const*)+0x161>
c000b28d:	50                   	push   eax
c000b28e:	50                   	push   eax
c000b28f:	57                   	push   edi
c000b290:	56                   	push   esi
c000b291:	e8 ea 54 ff ff       	call   c0000780 <strcmp>
c000b296:	83 c4 10             	add    esp,0x10
c000b299:	85 c0                	test   eax,eax
c000b29b:	75 ac                	jne    c000b249 <KiIsSymlinkRegistered(char const*)+0xef>
c000b29d:	83 ec 0c             	sub    esp,0xc
c000b2a0:	53                   	push   ebx
c000b2a1:	e8 58 09 00 00       	call   c000bbfe <File::close()>
c000b2a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b2b6:	83 c4 10             	add    esp,0x10
c000b2b9:	eb 18                	jmp    c000b2d3 <KiIsSymlinkRegistered(char const*)+0x179>
c000b2bb:	83 ec 0c             	sub    esp,0xc
c000b2be:	53                   	push   ebx
c000b2bf:	e8 3a 09 00 00       	call   c000bbfe <File::close()>
c000b2c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2cc:	83 c4 10             	add    esp,0x10
c000b2cf:	31 c0                	xor    eax,eax
c000b2d1:	31 d2                	xor    edx,edx
c000b2d3:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b2d9:	5b                   	pop    ebx
c000b2da:	5e                   	pop    esi
c000b2db:	5f                   	pop    edi
c000b2dc:	5d                   	pop    ebp
c000b2dd:	c3                   	ret    

c000b2de <KeDereferenceSymlink(char const*, char*)>:
c000b2de:	55                   	push   ebp
c000b2df:	57                   	push   edi
c000b2e0:	56                   	push   esi
c000b2e1:	53                   	push   ebx
c000b2e2:	83 ec 48             	sub    esp,0x48
c000b2e5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b2e9:	56                   	push   esi
c000b2ea:	e8 6b fe ff ff       	call   c000b15a <KiIsSymlinkRegistered(char const*)>
c000b2ef:	83 c4 10             	add    esp,0x10
c000b2f2:	89 c7                	mov    edi,eax
c000b2f4:	89 d0                	mov    eax,edx
c000b2f6:	09 f8                	or     eax,edi
c000b2f8:	75 07                	jne    c000b301 <KeDereferenceSymlink(char const*, char*)+0x23>
c000b2fa:	31 c0                	xor    eax,eax
c000b2fc:	e9 7c 01 00 00       	jmp    c000b47d <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b301:	83 ec 0c             	sub    esp,0xc
c000b304:	89 d5                	mov    ebp,edx
c000b306:	68 14 01 00 00       	push   0x114
c000b30b:	e8 23 c8 ff ff       	call   c0007b33 <malloc>
c000b310:	83 c4 0c             	add    esp,0xc
c000b313:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b319:	56                   	push   esi
c000b31a:	50                   	push   eax
c000b31b:	89 c3                	mov    ebx,eax
c000b31d:	e8 60 08 00 00       	call   c000bb82 <File::File(char const*, Process*)>
c000b322:	83 c4 10             	add    esp,0x10
c000b325:	85 db                	test   ebx,ebx
c000b327:	0f 84 32 01 00 00    	je     c000b45f <KeDereferenceSymlink(char const*, char*)+0x181>
c000b32d:	56                   	push   esi
c000b32e:	56                   	push   esi
c000b32f:	6a 01                	push   0x1
c000b331:	53                   	push   ebx
c000b332:	e8 69 08 00 00       	call   c000bba0 <File::open(FileOpenMode)>
c000b337:	83 c4 10             	add    esp,0x10
c000b33a:	85 c0                	test   eax,eax
c000b33c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b33e:	74 09                	je     c000b349 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b340:	83 ec 0c             	sub    esp,0xc
c000b343:	53                   	push   ebx
c000b344:	e9 10 01 00 00       	jmp    c000b459 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b349:	83 ec 0c             	sub    esp,0xc
c000b34c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b350:	56                   	push   esi
c000b351:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b355:	52                   	push   edx
c000b356:	6a 00                	push   0x0
c000b358:	6a 08                	push   0x8
c000b35a:	53                   	push   ebx
c000b35b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b35e:	83 c4 20             	add    esp,0x20
c000b361:	85 c0                	test   eax,eax
c000b363:	0f 85 e2 00 00 00    	jne    c000b44b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b369:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b36e:	0f 85 d7 00 00 00    	jne    c000b44b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b374:	83 ec 0c             	sub    esp,0xc
c000b377:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b379:	56                   	push   esi
c000b37a:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b37e:	52                   	push   edx
c000b37f:	6a 00                	push   0x0
c000b381:	6a 08                	push   0x8
c000b383:	53                   	push   ebx
c000b384:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b387:	83 c4 20             	add    esp,0x20
c000b38a:	85 c0                	test   eax,eax
c000b38c:	0f 85 b9 00 00 00    	jne    c000b44b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b392:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b397:	0f 85 ae 00 00 00    	jne    c000b44b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b39d:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b3a1:	0f 85 53 ff ff ff    	jne    c000b2fa <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b3a7:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b3ab:	0f 85 49 ff ff ff    	jne    c000b2fa <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b3b1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b3b9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b3c1:	51                   	push   ecx
c000b3c2:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b3c6:	50                   	push   eax
c000b3c7:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b3cb:	50                   	push   eax
c000b3cc:	53                   	push   ebx
c000b3cd:	e8 d0 0a 00 00       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c000b3d2:	83 c4 10             	add    esp,0x10
c000b3d5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b3da:	75 6f                	jne    c000b44b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b3e0:	31 c9                	xor    ecx,ecx
c000b3e2:	bf 0f 00 00 00       	mov    edi,0xf
c000b3e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b3eb:	39 c7                	cmp    edi,eax
c000b3ed:	89 cf                	mov    edi,ecx
c000b3ef:	19 d7                	sbb    edi,edx
c000b3f1:	73 58                	jae    c000b44b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3f3:	83 c0 f0             	add    eax,0xfffffff0
c000b3f6:	bf ff 00 00 00       	mov    edi,0xff
c000b3fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b3ff:	83 d2 ff             	adc    edx,0xffffffff
c000b402:	39 c7                	cmp    edi,eax
c000b404:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b408:	19 d1                	sbb    ecx,edx
c000b40a:	72 53                	jb     c000b45f <KeDereferenceSymlink(char const*, char*)+0x181>
c000b40c:	40                   	inc    eax
c000b40d:	52                   	push   edx
c000b40e:	50                   	push   eax
c000b40f:	6a 00                	push   0x0
c000b411:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b415:	e8 d6 50 ff ff       	call   c00004f0 <memset>
c000b41a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b41c:	89 34 24             	mov    DWORD PTR [esp],esi
c000b41f:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b423:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b427:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b42b:	53                   	push   ebx
c000b42c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b42f:	83 c4 20             	add    esp,0x20
c000b432:	85 c0                	test   eax,eax
c000b434:	75 15                	jne    c000b44b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b436:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b43a:	89 c7                	mov    edi,eax
c000b43c:	c1 ff 1f             	sar    edi,0x1f
c000b43f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b443:	75 06                	jne    c000b44b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b445:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b449:	74 19                	je     c000b464 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b44b:	83 ec 0c             	sub    esp,0xc
c000b44e:	53                   	push   ebx
c000b44f:	e8 aa 07 00 00       	call   c000bbfe <File::close()>
c000b454:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b456:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b459:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b45c:	83 c4 10             	add    esp,0x10
c000b45f:	83 c8 ff             	or     eax,0xffffffff
c000b462:	eb 19                	jmp    c000b47d <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b464:	83 ec 0c             	sub    esp,0xc
c000b467:	53                   	push   ebx
c000b468:	e8 91 07 00 00       	call   c000bbfe <File::close()>
c000b46d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b46f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b472:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b475:	83 c4 10             	add    esp,0x10
c000b478:	b8 01 00 00 00       	mov    eax,0x1
c000b47d:	83 c4 3c             	add    esp,0x3c
c000b480:	5b                   	pop    ebx
c000b481:	5e                   	pop    esi
c000b482:	5f                   	pop    edi
c000b483:	5d                   	pop    ebp
c000b484:	c3                   	ret    

c000b485 <KeCreateSymlink(char const*, char const*)>:
c000b485:	55                   	push   ebp
c000b486:	57                   	push   edi
c000b487:	56                   	push   esi
c000b488:	53                   	push   ebx
c000b489:	83 ec 38             	sub    esp,0x38
c000b48c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b490:	68 14 01 00 00       	push   0x114
c000b495:	e8 99 c6 ff ff       	call   c0007b33 <malloc>
c000b49a:	6a 00                	push   0x0
c000b49c:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b4a2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b4a6:	89 c3                	mov    ebx,eax
c000b4a8:	50                   	push   eax
c000b4a9:	e8 f6 05 00 00       	call   c000baa4 <File::File(char const*, Process*, bool)>
c000b4ae:	83 c4 20             	add    esp,0x20
c000b4b1:	85 db                	test   ebx,ebx
c000b4b3:	b8 01 00 00 00       	mov    eax,0x1
c000b4b8:	0f 84 19 01 00 00    	je     c000b5d7 <KeCreateSymlink(char const*, char const*)+0x152>
c000b4be:	52                   	push   edx
c000b4bf:	52                   	push   edx
c000b4c0:	6a 12                	push   0x12
c000b4c2:	53                   	push   ebx
c000b4c3:	e8 d8 06 00 00       	call   c000bba0 <File::open(FileOpenMode)>
c000b4c8:	83 c4 10             	add    esp,0x10
c000b4cb:	85 c0                	test   eax,eax
c000b4cd:	74 0b                	je     c000b4da <KeCreateSymlink(char const*, char const*)+0x55>
c000b4cf:	83 ec 0c             	sub    esp,0xc
c000b4d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4d4:	53                   	push   ebx
c000b4d5:	e9 f2 00 00 00       	jmp    c000b5cc <KeCreateSymlink(char const*, char const*)+0x147>
c000b4da:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b4de:	be 49 1a 02 c0       	mov    esi,0xc0021a49
c000b4e3:	b9 09 00 00 00       	mov    ecx,0x9
c000b4e8:	fc                   	cld    
c000b4e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b4eb:	83 ec 0c             	sub    esp,0xc
c000b4ee:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b4f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4f4:	56                   	push   esi
c000b4f5:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b4f9:	52                   	push   edx
c000b4fa:	6a 00                	push   0x0
c000b4fc:	6a 08                	push   0x8
c000b4fe:	53                   	push   ebx
c000b4ff:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b502:	83 c4 20             	add    esp,0x20
c000b505:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b50a:	0f 85 ae 00 00 00    	jne    c000b5be <KeCreateSymlink(char const*, char const*)+0x139>
c000b510:	85 c0                	test   eax,eax
c000b512:	0f 85 a6 00 00 00    	jne    c000b5be <KeCreateSymlink(char const*, char const*)+0x139>
c000b518:	e8 cc f9 ff ff       	call   c000aee9 <KiCreateSymlinkID()>
c000b51d:	83 ec 0c             	sub    esp,0xc
c000b520:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b524:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b528:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b52a:	56                   	push   esi
c000b52b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b52f:	52                   	push   edx
c000b530:	6a 00                	push   0x0
c000b532:	6a 08                	push   0x8
c000b534:	53                   	push   ebx
c000b535:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b538:	83 c4 20             	add    esp,0x20
c000b53b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b540:	75 7c                	jne    c000b5be <KeCreateSymlink(char const*, char const*)+0x139>
c000b542:	85 c0                	test   eax,eax
c000b544:	75 78                	jne    c000b5be <KeCreateSymlink(char const*, char const*)+0x139>
c000b546:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b548:	83 ec 0c             	sub    esp,0xc
c000b54b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b54e:	55                   	push   ebp
c000b54f:	e8 2c 50 ff ff       	call   c0000580 <strlen>
c000b554:	31 d2                	xor    edx,edx
c000b556:	89 34 24             	mov    DWORD PTR [esp],esi
c000b559:	55                   	push   ebp
c000b55a:	52                   	push   edx
c000b55b:	50                   	push   eax
c000b55c:	53                   	push   ebx
c000b55d:	ff d7                	call   edi
c000b55f:	83 c4 14             	add    esp,0x14
c000b562:	55                   	push   ebp
c000b563:	89 c6                	mov    esi,eax
c000b565:	e8 16 50 ff ff       	call   c0000580 <strlen>
c000b56a:	83 c4 10             	add    esp,0x10
c000b56d:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b571:	75 4b                	jne    c000b5be <KeCreateSymlink(char const*, char const*)+0x139>
c000b573:	85 f6                	test   esi,esi
c000b575:	75 47                	jne    c000b5be <KeCreateSymlink(char const*, char const*)+0x139>
c000b577:	50                   	push   eax
c000b578:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b57c:	55                   	push   ebp
c000b57d:	68 17 1a 02 c0       	push   0xc0021a17
c000b582:	e8 e3 f3 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000b587:	83 c4 0c             	add    esp,0xc
c000b58a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b58e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b592:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b596:	e8 b9 f9 ff ff       	call   c000af54 <KeRegisterSymlink(char const*, unsigned long long)>
c000b59b:	c7 04 24 3c 1a 02 c0 	mov    DWORD PTR [esp],0xc0021a3c
c000b5a2:	e8 c3 f3 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000b5a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5aa:	e8 4f 06 00 00       	call   c000bbfe <File::close()>
c000b5af:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5b7:	83 c4 10             	add    esp,0x10
c000b5ba:	31 c0                	xor    eax,eax
c000b5bc:	eb 19                	jmp    c000b5d7 <KeCreateSymlink(char const*, char const*)+0x152>
c000b5be:	83 ec 0c             	sub    esp,0xc
c000b5c1:	53                   	push   ebx
c000b5c2:	e8 37 06 00 00       	call   c000bbfe <File::close()>
c000b5c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5cf:	83 c4 10             	add    esp,0x10
c000b5d2:	b8 01 00 00 00       	mov    eax,0x1
c000b5d7:	83 c4 2c             	add    esp,0x2c
c000b5da:	5b                   	pop    ebx
c000b5db:	5e                   	pop    esi
c000b5dc:	5f                   	pop    edi
c000b5dd:	5d                   	pop    ebp
c000b5de:	c3                   	ret    
c000b5df:	90                   	nop

c000b5e0 <File::read(unsigned long long, void*, int*)>:
c000b5e0:	53                   	push   ebx
c000b5e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5e9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5f0:	83 f8 19             	cmp    eax,0x19
c000b5f3:	77 35                	ja     c000b62a <File::read(unsigned long long, void*, int*)+0x4a>
c000b5f5:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5fc:	85 c0                	test   eax,eax
c000b5fe:	74 2a                	je     c000b62a <File::read(unsigned long long, void*, int*)+0x4a>
c000b600:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b606:	85 c0                	test   eax,eax
c000b608:	74 20                	je     c000b62a <File::read(unsigned long long, void*, int*)+0x4a>
c000b60a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b60e:	74 21                	je     c000b631 <File::read(unsigned long long, void*, int*)+0x51>
c000b610:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b612:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b616:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b61c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b620:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b624:	5b                   	pop    ebx
c000b625:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b628:	ff e0                	jmp    eax
c000b62a:	b8 0b 00 00 00       	mov    eax,0xb
c000b62f:	eb 05                	jmp    c000b636 <File::read(unsigned long long, void*, int*)+0x56>
c000b631:	b8 05 00 00 00       	mov    eax,0x5
c000b636:	5b                   	pop    ebx
c000b637:	c3                   	ret    

c000b638 <File::write(unsigned long long, void*, int*)>:
c000b638:	53                   	push   ebx
c000b639:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b63d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b641:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b648:	83 f8 19             	cmp    eax,0x19
c000b64b:	77 35                	ja     c000b682 <File::write(unsigned long long, void*, int*)+0x4a>
c000b64d:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b654:	85 c0                	test   eax,eax
c000b656:	74 2a                	je     c000b682 <File::write(unsigned long long, void*, int*)+0x4a>
c000b658:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b65e:	85 c0                	test   eax,eax
c000b660:	74 20                	je     c000b682 <File::write(unsigned long long, void*, int*)+0x4a>
c000b662:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b666:	74 21                	je     c000b689 <File::write(unsigned long long, void*, int*)+0x51>
c000b668:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b66a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b66e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b674:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67c:	5b                   	pop    ebx
c000b67d:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b680:	ff e0                	jmp    eax
c000b682:	b8 0b 00 00 00       	mov    eax,0xb
c000b687:	eb 05                	jmp    c000b68e <File::write(unsigned long long, void*, int*)+0x56>
c000b689:	b8 05 00 00 00       	mov    eax,0x5
c000b68e:	5b                   	pop    ebx
c000b68f:	c3                   	ret    

c000b690 <Directory::read(unsigned long long, void*, int*)>:
c000b690:	53                   	push   ebx
c000b691:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b695:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b699:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b6a0:	83 f8 19             	cmp    eax,0x19
c000b6a3:	77 35                	ja     c000b6da <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6a5:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b6ac:	85 c0                	test   eax,eax
c000b6ae:	74 2a                	je     c000b6da <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6b0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b6b6:	85 c0                	test   eax,eax
c000b6b8:	74 20                	je     c000b6da <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6ba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6be:	74 21                	je     c000b6e1 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b6c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6c2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6c6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6d4:	5b                   	pop    ebx
c000b6d5:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b6d8:	ff e0                	jmp    eax
c000b6da:	b8 0b 00 00 00       	mov    eax,0xb
c000b6df:	eb 05                	jmp    c000b6e6 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b6e1:	b8 05 00 00 00       	mov    eax,0x5
c000b6e6:	5b                   	pop    ebx
c000b6e7:	c3                   	ret    

c000b6e8 <Directory::write(unsigned long long, void*, int*)>:
c000b6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6ec:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b6f3:	b8 0b 00 00 00       	mov    eax,0xb
c000b6f8:	83 fa 19             	cmp    edx,0x19
c000b6fb:	77 18                	ja     c000b715 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6fd:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b704:	85 d2                	test   edx,edx
c000b706:	74 0d                	je     c000b715 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b708:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b70f:	19 c0                	sbb    eax,eax
c000b711:	83 e0 0a             	and    eax,0xa
c000b714:	40                   	inc    eax
c000b715:	c3                   	ret    

c000b716 <File::isAtty()>:
c000b716:	31 c0                	xor    eax,eax
c000b718:	c3                   	ret    
c000b719:	90                   	nop

c000b71a <Directory::isAtty()>:
c000b71a:	31 c0                	xor    eax,eax
c000b71c:	c3                   	ret    
c000b71d:	90                   	nop

c000b71e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b71e:	b8 0a 00 00 00       	mov    eax,0xa
c000b723:	c3                   	ret    

c000b724 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b724:	b8 0a 00 00 00       	mov    eax,0xa
c000b729:	c3                   	ret    

c000b72a <Filesystem::allocateSwapfile(char const*, int)>:
c000b72a:	31 c0                	xor    eax,eax
c000b72c:	31 d2                	xor    edx,edx
c000b72e:	c3                   	ret    
c000b72f:	90                   	nop

c000b730 <File::~File()>:
c000b730:	83 ec 0c             	sub    esp,0xc
c000b733:	ba 08 1b 02 c0       	mov    edx,0xc0021b08
c000b738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b73c:	89 10                	mov    DWORD PTR [eax],edx
c000b73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	50                   	push   eax
c000b746:	e8 a1 dc ff ff       	call   c00093ec <UnixFile::~UnixFile()>
c000b74b:	83 c4 10             	add    esp,0x10
c000b74e:	90                   	nop
c000b74f:	83 c4 0c             	add    esp,0xc
c000b752:	c3                   	ret    
c000b753:	90                   	nop

c000b754 <File::~File()>:
c000b754:	83 ec 0c             	sub    esp,0xc
c000b757:	83 ec 0c             	sub    esp,0xc
c000b75a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b75e:	e8 cd ff ff ff       	call   c000b730 <File::~File()>
c000b763:	83 c4 10             	add    esp,0x10
c000b766:	83 ec 08             	sub    esp,0x8
c000b769:	68 14 01 00 00       	push   0x114
c000b76e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b772:	e8 f5 f0 ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000b777:	83 c4 10             	add    esp,0x10
c000b77a:	83 c4 0c             	add    esp,0xc
c000b77d:	c3                   	ret    

c000b77e <Directory::~Directory()>:
c000b77e:	83 ec 0c             	sub    esp,0xc
c000b781:	ba 24 1b 02 c0       	mov    edx,0xc0021b24
c000b786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b78a:	89 10                	mov    DWORD PTR [eax],edx
c000b78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b790:	83 ec 0c             	sub    esp,0xc
c000b793:	50                   	push   eax
c000b794:	e8 53 dc ff ff       	call   c00093ec <UnixFile::~UnixFile()>
c000b799:	83 c4 10             	add    esp,0x10
c000b79c:	90                   	nop
c000b79d:	83 c4 0c             	add    esp,0xc
c000b7a0:	c3                   	ret    
c000b7a1:	90                   	nop

c000b7a2 <Directory::~Directory()>:
c000b7a2:	83 ec 0c             	sub    esp,0xc
c000b7a5:	83 ec 0c             	sub    esp,0xc
c000b7a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7ac:	e8 cd ff ff ff       	call   c000b77e <Directory::~Directory()>
c000b7b1:	83 c4 10             	add    esp,0x10
c000b7b4:	83 ec 08             	sub    esp,0x8
c000b7b7:	68 14 01 00 00       	push   0x114
c000b7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7c0:	e8 a7 f0 ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000b7c5:	83 c4 10             	add    esp,0x10
c000b7c8:	83 c4 0c             	add    esp,0xc
c000b7cb:	c3                   	ret    

c000b7cc <Filesystem::Filesystem()>:
c000b7cc:	ba 9c 1a 02 c0       	mov    edx,0xc0021a9c
c000b7d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d5:	89 10                	mov    DWORD PTR [eax],edx
c000b7d7:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b7dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7e1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b7e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7e8:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b7ed:	90                   	nop
c000b7ee:	c3                   	ret    
c000b7ef:	90                   	nop

c000b7f0 <Filesystem::~Filesystem()>:
c000b7f0:	ba 9c 1a 02 c0       	mov    edx,0xc0021a9c
c000b7f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f9:	89 10                	mov    DWORD PTR [eax],edx
c000b7fb:	90                   	nop
c000b7fc:	c3                   	ret    
c000b7fd:	90                   	nop

c000b7fe <Filesystem::~Filesystem()>:
c000b7fe:	83 ec 0c             	sub    esp,0xc
c000b801:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b805:	e8 e6 ff ff ff       	call   c000b7f0 <Filesystem::~Filesystem()>
c000b80a:	83 c4 04             	add    esp,0x4
c000b80d:	83 ec 08             	sub    esp,0x8
c000b810:	6a 08                	push   0x8
c000b812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b816:	e8 51 f0 ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000b81b:	83 c4 10             	add    esp,0x10
c000b81e:	83 c4 0c             	add    esp,0xc
c000b821:	c3                   	ret    

c000b822 <Fs::getcwd(Process*, char*, int)>:
c000b822:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b826:	31 c0                	xor    eax,eax
c000b828:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b82c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b82f:	7d 15                	jge    c000b846 <Fs::getcwd(Process*, char*, int)+0x24>
c000b831:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b835:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b83c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b83f:	84 c9                	test   cl,cl
c000b841:	74 06                	je     c000b849 <Fs::getcwd(Process*, char*, int)+0x27>
c000b843:	40                   	inc    eax
c000b844:	eb e2                	jmp    c000b828 <Fs::getcwd(Process*, char*, int)+0x6>
c000b846:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b849:	31 c0                	xor    eax,eax
c000b84b:	c3                   	ret    

c000b84c <Fs::initVFS()>:
c000b84c:	83 ec 18             	sub    esp,0x18
c000b84f:	6a 08                	push   0x8
c000b851:	e8 dd c2 ff ff       	call   c0007b33 <malloc>
c000b856:	89 04 24             	mov    DWORD PTR [esp],eax
c000b859:	e8 82 e4 00 00       	call   c0019ce0 <FAT::FAT()>
c000b85e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b865:	e8 c9 c2 ff ff       	call   c0007b33 <malloc>
c000b86a:	89 04 24             	mov    DWORD PTR [esp],eax
c000b86d:	e8 9c f3 00 00       	call   c001ac0e <ISO9660::ISO9660()>
c000b872:	83 c4 1c             	add    esp,0x1c
c000b875:	c3                   	ret    

c000b876 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b876:	55                   	push   ebp
c000b877:	57                   	push   edi
c000b878:	56                   	push   esi
c000b879:	53                   	push   ebx
c000b87a:	81 ec 20 04 00 00    	sub    esp,0x420
c000b880:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b887:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b88e:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b895:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b89c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b8a0:	68 00 04 00 00       	push   0x400
c000b8a5:	6a 00                	push   0x0
c000b8a7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b8ab:	57                   	push   edi
c000b8ac:	e8 3f 4c ff ff       	call   c00004f0 <memset>
c000b8b1:	83 c4 10             	add    esp,0x10
c000b8b4:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b8b8:	75 0b                	jne    c000b8c5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b8ba:	50                   	push   eax
c000b8bb:	50                   	push   eax
c000b8bc:	56                   	push   esi
c000b8bd:	57                   	push   edi
c000b8be:	e8 8d 4d ff ff       	call   c0000650 <strcpy>
c000b8c3:	eb 45                	jmp    c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b8c5:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b8c8:	83 f8 2f             	cmp    eax,0x2f
c000b8cb:	74 05                	je     c000b8d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b8cd:	83 f8 5c             	cmp    eax,0x5c
c000b8d0:	75 19                	jne    c000b8eb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b8d2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b8d5:	3c 60                	cmp    al,0x60
c000b8d7:	7e 03                	jle    c000b8dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b8d9:	83 e8 20             	sub    eax,0x20
c000b8dc:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b8e0:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b8e7:	50                   	push   eax
c000b8e8:	50                   	push   eax
c000b8e9:	eb 18                	jmp    c000b903 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b8eb:	50                   	push   eax
c000b8ec:	50                   	push   eax
c000b8ed:	55                   	push   ebp
c000b8ee:	57                   	push   edi
c000b8ef:	e8 5c 4d ff ff       	call   c0000650 <strcpy>
c000b8f4:	58                   	pop    eax
c000b8f5:	5a                   	pop    edx
c000b8f6:	68 d7 2a 02 c0       	push   0xc0022ad7
c000b8fb:	57                   	push   edi
c000b8fc:	e8 6f 4f ff ff       	call   c0000870 <strcat>
c000b901:	59                   	pop    ecx
c000b902:	5d                   	pop    ebp
c000b903:	56                   	push   esi
c000b904:	57                   	push   edi
c000b905:	e8 66 4f ff ff       	call   c0000870 <strcat>
c000b90a:	83 c4 10             	add    esp,0x10
c000b90d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b911:	3c 60                	cmp    al,0x60
c000b913:	7e 03                	jle    c000b918 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b915:	83 e8 20             	sub    eax,0x20
c000b918:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b91c:	be 03 00 00 00       	mov    esi,0x3
c000b921:	88 03                	mov    BYTE PTR [ebx],al
c000b923:	b8 03 00 00 00       	mov    eax,0x3
c000b928:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b92f:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b935:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b939:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b93e:	89 fa                	mov    edx,edi
c000b940:	0f be ea             	movsx  ebp,dl
c000b943:	85 ed                	test   ebp,ebp
c000b945:	0f 84 a1 00 00 00    	je     c000b9ec <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b94b:	8d 56 01             	lea    edx,[esi+0x1]
c000b94e:	83 fd 2f             	cmp    ebp,0x2f
c000b951:	74 05                	je     c000b958 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b953:	83 fd 5c             	cmp    ebp,0x5c
c000b956:	75 12                	jne    c000b96a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b958:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b95d:	89 c5                	mov    ebp,eax
c000b95f:	74 09                	je     c000b96a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b961:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b965:	40                   	inc    eax
c000b966:	89 d6                	mov    esi,edx
c000b968:	eb cf                	jmp    c000b939 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b96a:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b96f:	89 f9                	mov    ecx,edi
c000b971:	0f be e9             	movsx  ebp,cl
c000b974:	75 61                	jne    c000b9d7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b976:	83 fd 2e             	cmp    ebp,0x2e
c000b979:	75 5c                	jne    c000b9d7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b97b:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b980:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b985:	74 19                	je     c000b9a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b987:	83 fd 2e             	cmp    ebp,0x2e
c000b98a:	74 55                	je     c000b9e1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b98c:	89 f2                	mov    edx,esi
c000b98e:	42                   	inc    edx
c000b98f:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b994:	83 f9 2f             	cmp    ecx,0x2f
c000b997:	74 f5                	je     c000b98e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b999:	83 f9 5c             	cmp    ecx,0x5c
c000b99c:	74 f0                	je     c000b98e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b99e:	eb c6                	jmp    c000b966 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9a0:	83 fd 2e             	cmp    ebp,0x2e
c000b9a3:	74 3c                	je     c000b9e1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b9a5:	83 f8 03             	cmp    eax,0x3
c000b9a8:	74 bc                	je     c000b966 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9aa:	42                   	inc    edx
c000b9ab:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b9b0:	83 f9 2f             	cmp    ecx,0x2f
c000b9b3:	74 f5                	je     c000b9aa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b9b5:	83 f9 5c             	cmp    ecx,0x5c
c000b9b8:	74 f0                	je     c000b9aa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b9ba:	48                   	dec    eax
c000b9bb:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b9bf:	75 06                	jne    c000b9c7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b9c1:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b9c5:	eb f3                	jmp    c000b9ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b9c7:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b9cb:	74 07                	je     c000b9d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b9cd:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b9d1:	48                   	dec    eax
c000b9d2:	eb f3                	jmp    c000b9c7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b9d4:	40                   	inc    eax
c000b9d5:	eb 8f                	jmp    c000b966 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9d7:	83 fd 2f             	cmp    ebp,0x2f
c000b9da:	74 8a                	je     c000b966 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9dc:	83 fd 5c             	cmp    ebp,0x5c
c000b9df:	74 85                	je     c000b966 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9e1:	89 f9                	mov    ecx,edi
c000b9e3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b9e6:	40                   	inc    eax
c000b9e7:	e9 7a ff ff ff       	jmp    c000b966 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9ec:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b9f0:	83 ec 0c             	sub    esp,0xc
c000b9f3:	53                   	push   ebx
c000b9f4:	e8 87 4b ff ff       	call   c0000580 <strlen>
c000b9f9:	83 c4 10             	add    esp,0x10
c000b9fc:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ba01:	74 1c                	je     c000ba1f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000ba03:	83 ec 0c             	sub    esp,0xc
c000ba06:	53                   	push   ebx
c000ba07:	e8 74 4b ff ff       	call   c0000580 <strlen>
c000ba0c:	83 c4 10             	add    esp,0x10
c000ba0f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ba14:	74 09                	je     c000ba1f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000ba16:	31 ff                	xor    edi,edi
c000ba18:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000ba1d:	eb 5c                	jmp    c000ba7b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000ba1f:	83 ec 0c             	sub    esp,0xc
c000ba22:	53                   	push   ebx
c000ba23:	e8 58 4b ff ff       	call   c0000580 <strlen>
c000ba28:	83 c4 10             	add    esp,0x10
c000ba2b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ba30:	74 e4                	je     c000ba16 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000ba32:	83 ec 0c             	sub    esp,0xc
c000ba35:	53                   	push   ebx
c000ba36:	e8 45 4b ff ff       	call   c0000580 <strlen>
c000ba3b:	83 c4 10             	add    esp,0x10
c000ba3e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ba43:	eb ab                	jmp    c000b9f0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000ba45:	52                   	push   edx
c000ba46:	52                   	push   edx
c000ba47:	53                   	push   ebx
c000ba48:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ba4c:	55                   	push   ebp
c000ba4d:	e8 fe 4b ff ff       	call   c0000650 <strcpy>
c000ba52:	59                   	pop    ecx
c000ba53:	58                   	pop    eax
c000ba54:	53                   	push   ebx
c000ba55:	55                   	push   ebp
c000ba56:	e8 83 f8 ff ff       	call   c000b2de <KeDereferenceSymlink(char const*, char*)>
c000ba5b:	83 c4 10             	add    esp,0x10
c000ba5e:	48                   	dec    eax
c000ba5f:	75 37                	jne    c000ba98 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000ba61:	50                   	push   eax
c000ba62:	53                   	push   ebx
c000ba63:	55                   	push   ebp
c000ba64:	68 52 1a 02 c0       	push   0xc0021a52
c000ba69:	e8 fc ee ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000ba6e:	8d 47 01             	lea    eax,[edi+0x1]
c000ba71:	83 c4 10             	add    esp,0x10
c000ba74:	83 ff 14             	cmp    edi,0x14
c000ba77:	74 08                	je     c000ba81 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000ba79:	89 c7                	mov    edi,eax
c000ba7b:	85 f6                	test   esi,esi
c000ba7d:	75 c6                	jne    c000ba45 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000ba7f:	eb 17                	jmp    c000ba98 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000ba81:	83 ec 0c             	sub    esp,0xc
c000ba84:	bf 15 00 00 00       	mov    edi,0x15
c000ba89:	68 6d 1a 02 c0       	push   0xc0021a6d
c000ba8e:	e8 ac 5b 00 00       	call   c001163f <KePanic(char const*)>
c000ba93:	83 c4 10             	add    esp,0x10
c000ba96:	eb e3                	jmp    c000ba7b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000ba98:	81 c4 1c 04 00 00    	add    esp,0x41c
c000ba9e:	5b                   	pop    ebx
c000ba9f:	5e                   	pop    esi
c000baa0:	5f                   	pop    edi
c000baa1:	5d                   	pop    ebp
c000baa2:	c3                   	ret    
c000baa3:	90                   	nop

c000baa4 <File::File(char const*, Process*, bool)>:
c000baa4:	83 ec 1c             	sub    esp,0x1c
c000baa7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000baaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab3:	83 ec 08             	sub    esp,0x8
c000bab6:	6a 00                	push   0x0
c000bab8:	50                   	push   eax
c000bab9:	e8 48 d7 ff ff       	call   c0009206 <UnixFile::UnixFile(int)>
c000babe:	83 c4 10             	add    esp,0x10
c000bac1:	ba 08 1b 02 c0       	mov    edx,0xc0021b08
c000bac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baca:	89 10                	mov    DWORD PTR [eax],edx
c000bacc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000bad1:	85 c0                	test   eax,eax
c000bad3:	74 0f                	je     c000bae4 <File::File(char const*, Process*, bool)+0x40>
c000bad5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bada:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000bade:	74 04                	je     c000bae4 <File::File(char const*, Process*, bool)+0x40>
c000bae0:	b0 01                	mov    al,0x1
c000bae2:	eb 02                	jmp    c000bae6 <File::File(char const*, Process*, bool)+0x42>
c000bae4:	b0 00                	mov    al,0x0
c000bae6:	0f b6 c0             	movzx  eax,al
c000bae9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baed:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000baf3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000baf7:	83 c2 0d             	add    edx,0xd
c000bafa:	50                   	push   eax
c000bafb:	51                   	push   ecx
c000bafc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb00:	52                   	push   edx
c000bb01:	e8 70 fd ff ff       	call   c000b876 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bb06:	83 c4 10             	add    esp,0x10
c000bb09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb0d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bb10:	83 e8 41             	sub    eax,0x41
c000bb13:	88 c2                	mov    dl,al
c000bb15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb19:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bb1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb23:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bb27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb2b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb31:	0f b6 c0             	movzx  eax,al
c000bb34:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb3b:	85 c0                	test   eax,eax
c000bb3d:	74 3e                	je     c000bb7d <File::File(char const*, Process*, bool)+0xd9>
c000bb3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb43:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb49:	0f b6 c0             	movzx  eax,al
c000bb4c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb53:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb59:	85 c0                	test   eax,eax
c000bb5b:	75 20                	jne    c000bb7d <File::File(char const*, Process*, bool)+0xd9>
c000bb5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb61:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb67:	0f b6 c0             	movzx  eax,al
c000bb6a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb71:	83 ec 0c             	sub    esp,0xc
c000bb74:	50                   	push   eax
c000bb75:	e8 ae 21 00 00       	call   c000dd28 <LogicalDisk::mount()>
c000bb7a:	83 c4 10             	add    esp,0x10
c000bb7d:	90                   	nop
c000bb7e:	83 c4 1c             	add    esp,0x1c
c000bb81:	c3                   	ret    

c000bb82 <File::File(char const*, Process*)>:
c000bb82:	83 ec 0c             	sub    esp,0xc
c000bb85:	6a 01                	push   0x1
c000bb87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb93:	e8 0c ff ff ff       	call   c000baa4 <File::File(char const*, Process*, bool)>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	90                   	nop
c000bb9c:	83 c4 0c             	add    esp,0xc
c000bb9f:	c3                   	ret    

c000bba0 <File::open(FileOpenMode)>:
c000bba0:	53                   	push   ebx
c000bba1:	b8 0b 00 00 00       	mov    eax,0xb
c000bba6:	83 ec 08             	sub    esp,0x8
c000bba9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbad:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bbb4:	83 fa 19             	cmp    edx,0x19
c000bbb7:	77 40                	ja     c000bbf9 <File::open(FileOpenMode)+0x59>
c000bbb9:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bbc0:	85 d2                	test   edx,edx
c000bbc2:	74 35                	je     c000bbf9 <File::open(FileOpenMode)+0x59>
c000bbc4:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bbca:	85 d2                	test   edx,edx
c000bbcc:	74 2b                	je     c000bbf9 <File::open(FileOpenMode)+0x59>
c000bbce:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bbd2:	b8 06 00 00 00       	mov    eax,0x6
c000bbd7:	75 20                	jne    c000bbf9 <File::open(FileOpenMode)+0x59>
c000bbd9:	8b 02                	mov    eax,DWORD PTR [edx]
c000bbdb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bbe1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbe5:	51                   	push   ecx
c000bbe6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bbe9:	51                   	push   ecx
c000bbea:	52                   	push   edx
c000bbeb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	85 c0                	test   eax,eax
c000bbf3:	75 04                	jne    c000bbf9 <File::open(FileOpenMode)+0x59>
c000bbf5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bbf9:	83 c4 08             	add    esp,0x8
c000bbfc:	5b                   	pop    ebx
c000bbfd:	c3                   	ret    

c000bbfe <File::close()>:
c000bbfe:	53                   	push   ebx
c000bbff:	b8 0b 00 00 00       	mov    eax,0xb
c000bc04:	83 ec 08             	sub    esp,0x8
c000bc07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc0b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc12:	83 f9 19             	cmp    ecx,0x19
c000bc15:	77 41                	ja     c000bc58 <File::close()+0x5a>
c000bc17:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bc1e:	85 db                	test   ebx,ebx
c000bc20:	74 36                	je     c000bc58 <File::close()+0x5a>
c000bc22:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bc29:	74 2d                	je     c000bc58 <File::close()+0x5a>
c000bc2b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc2f:	b8 05 00 00 00       	mov    eax,0x5
c000bc34:	74 22                	je     c000bc58 <File::close()+0x5a>
c000bc36:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc3a:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc41:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc47:	53                   	push   ebx
c000bc48:	53                   	push   ebx
c000bc49:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc4b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc51:	50                   	push   eax
c000bc52:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc55:	83 c4 10             	add    esp,0x10
c000bc58:	83 c4 08             	add    esp,0x8
c000bc5b:	5b                   	pop    ebx
c000bc5c:	c3                   	ret    
c000bc5d:	90                   	nop

c000bc5e <File::seek(unsigned long long)>:
c000bc5e:	56                   	push   esi
c000bc5f:	b8 0b 00 00 00       	mov    eax,0xb
c000bc64:	53                   	push   ebx
c000bc65:	51                   	push   ecx
c000bc66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc6a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc6e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc72:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc79:	83 fa 19             	cmp    edx,0x19
c000bc7c:	77 31                	ja     c000bcaf <File::seek(unsigned long long)+0x51>
c000bc7e:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc85:	85 d2                	test   edx,edx
c000bc87:	74 26                	je     c000bcaf <File::seek(unsigned long long)+0x51>
c000bc89:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc8f:	85 d2                	test   edx,edx
c000bc91:	74 1c                	je     c000bcaf <File::seek(unsigned long long)+0x51>
c000bc93:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc97:	b8 05 00 00 00       	mov    eax,0x5
c000bc9c:	74 11                	je     c000bcaf <File::seek(unsigned long long)+0x51>
c000bc9e:	8b 02                	mov    eax,DWORD PTR [edx]
c000bca0:	53                   	push   ebx
c000bca1:	51                   	push   ecx
c000bca2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bca8:	52                   	push   edx
c000bca9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bcac:	83 c4 10             	add    esp,0x10
c000bcaf:	5a                   	pop    edx
c000bcb0:	5b                   	pop    ebx
c000bcb1:	5e                   	pop    esi
c000bcb2:	c3                   	ret    
c000bcb3:	90                   	nop

c000bcb4 <File::truncate(unsigned long long)>:
c000bcb4:	56                   	push   esi
c000bcb5:	b8 0b 00 00 00       	mov    eax,0xb
c000bcba:	53                   	push   ebx
c000bcbb:	51                   	push   ecx
c000bcbc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bcc0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bcc4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bcc8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bccf:	83 fa 19             	cmp    edx,0x19
c000bcd2:	77 31                	ja     c000bd05 <File::truncate(unsigned long long)+0x51>
c000bcd4:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcdb:	85 d2                	test   edx,edx
c000bcdd:	74 26                	je     c000bd05 <File::truncate(unsigned long long)+0x51>
c000bcdf:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bce5:	85 d2                	test   edx,edx
c000bce7:	74 1c                	je     c000bd05 <File::truncate(unsigned long long)+0x51>
c000bce9:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bced:	b8 05 00 00 00       	mov    eax,0x5
c000bcf2:	74 11                	je     c000bd05 <File::truncate(unsigned long long)+0x51>
c000bcf4:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcf6:	53                   	push   ebx
c000bcf7:	51                   	push   ecx
c000bcf8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcfe:	52                   	push   edx
c000bcff:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bd02:	83 c4 10             	add    esp,0x10
c000bd05:	5a                   	pop    edx
c000bd06:	5b                   	pop    ebx
c000bd07:	5e                   	pop    esi
c000bd08:	c3                   	ret    
c000bd09:	90                   	nop

c000bd0a <File::tell(unsigned long long*)>:
c000bd0a:	83 ec 0c             	sub    esp,0xc
c000bd0d:	b8 0b 00 00 00       	mov    eax,0xb
c000bd12:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd16:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bd1d:	83 fa 19             	cmp    edx,0x19
c000bd20:	77 34                	ja     c000bd56 <File::tell(unsigned long long*)+0x4c>
c000bd22:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd29:	85 d2                	test   edx,edx
c000bd2b:	74 29                	je     c000bd56 <File::tell(unsigned long long*)+0x4c>
c000bd2d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd33:	85 d2                	test   edx,edx
c000bd35:	74 1f                	je     c000bd56 <File::tell(unsigned long long*)+0x4c>
c000bd37:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd3b:	b8 05 00 00 00       	mov    eax,0x5
c000bd40:	74 14                	je     c000bd56 <File::tell(unsigned long long*)+0x4c>
c000bd42:	50                   	push   eax
c000bd43:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd49:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd4f:	52                   	push   edx
c000bd50:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd53:	83 c4 10             	add    esp,0x10
c000bd56:	83 c4 0c             	add    esp,0xc
c000bd59:	c3                   	ret    

c000bd5a <File::rewind()>:
c000bd5a:	83 ec 10             	sub    esp,0x10
c000bd5d:	6a 00                	push   0x0
c000bd5f:	6a 00                	push   0x0
c000bd61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd65:	e8 f4 fe ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c000bd6a:	83 c4 1c             	add    esp,0x1c
c000bd6d:	c3                   	ret    

c000bd6e <File::unlink()>:
c000bd6e:	83 ec 0c             	sub    esp,0xc
c000bd71:	b8 0b 00 00 00       	mov    eax,0xb
c000bd76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd7a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd81:	83 f9 19             	cmp    ecx,0x19
c000bd84:	77 2f                	ja     c000bdb5 <File::unlink()+0x47>
c000bd86:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd8d:	85 c9                	test   ecx,ecx
c000bd8f:	74 24                	je     c000bdb5 <File::unlink()+0x47>
c000bd91:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd97:	85 c9                	test   ecx,ecx
c000bd99:	74 1a                	je     c000bdb5 <File::unlink()+0x47>
c000bd9b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd9f:	b8 06 00 00 00       	mov    eax,0x6
c000bda4:	75 0f                	jne    c000bdb5 <File::unlink()+0x47>
c000bda6:	50                   	push   eax
c000bda7:	83 c2 0d             	add    edx,0xd
c000bdaa:	50                   	push   eax
c000bdab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdad:	52                   	push   edx
c000bdae:	51                   	push   ecx
c000bdaf:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bdb2:	83 c4 10             	add    esp,0x10
c000bdb5:	83 c4 0c             	add    esp,0xc
c000bdb8:	c3                   	ret    
c000bdb9:	90                   	nop

c000bdba <File::rename(char const*)>:
c000bdba:	83 ec 0c             	sub    esp,0xc
c000bdbd:	b8 0b 00 00 00       	mov    eax,0xb
c000bdc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdc6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdcd:	83 f9 19             	cmp    ecx,0x19
c000bdd0:	77 32                	ja     c000be04 <File::rename(char const*)+0x4a>
c000bdd2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdd9:	85 c9                	test   ecx,ecx
c000bddb:	74 27                	je     c000be04 <File::rename(char const*)+0x4a>
c000bddd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bde3:	85 c9                	test   ecx,ecx
c000bde5:	74 1d                	je     c000be04 <File::rename(char const*)+0x4a>
c000bde7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdeb:	b8 06 00 00 00       	mov    eax,0x6
c000bdf0:	75 12                	jne    c000be04 <File::rename(char const*)+0x4a>
c000bdf2:	50                   	push   eax
c000bdf3:	83 c2 0d             	add    edx,0xd
c000bdf6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdf8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdfc:	52                   	push   edx
c000bdfd:	51                   	push   ecx
c000bdfe:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be01:	83 c4 10             	add    esp,0x10
c000be04:	83 c4 0c             	add    esp,0xc
c000be07:	c3                   	ret    

c000be08 <File::chfatattr(unsigned char, unsigned char)>:
c000be08:	57                   	push   edi
c000be09:	b8 0b 00 00 00       	mov    eax,0xb
c000be0e:	56                   	push   esi
c000be0f:	53                   	push   ebx
c000be10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be14:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be18:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be1c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be23:	83 f9 19             	cmp    ecx,0x19
c000be26:	77 37                	ja     c000be5f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be28:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be2f:	85 c9                	test   ecx,ecx
c000be31:	74 2c                	je     c000be5f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be33:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be39:	85 c9                	test   ecx,ecx
c000be3b:	74 22                	je     c000be5f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be3d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be41:	b8 06 00 00 00       	mov    eax,0x6
c000be46:	75 17                	jne    c000be5f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be48:	89 f0                	mov    eax,esi
c000be4a:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be4c:	0f b6 db             	movzx  ebx,bl
c000be4f:	0f b6 f0             	movzx  esi,al
c000be52:	83 c2 0d             	add    edx,0xd
c000be55:	56                   	push   esi
c000be56:	53                   	push   ebx
c000be57:	52                   	push   edx
c000be58:	51                   	push   ecx
c000be59:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be5c:	83 c4 10             	add    esp,0x10
c000be5f:	5b                   	pop    ebx
c000be60:	5e                   	pop    esi
c000be61:	5f                   	pop    edi
c000be62:	c3                   	ret    
c000be63:	90                   	nop

c000be64 <File::exists()>:
c000be64:	83 ec 0c             	sub    esp,0xc
c000be67:	31 c0                	xor    eax,eax
c000be69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be6d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be74:	83 f9 19             	cmp    ecx,0x19
c000be77:	77 24                	ja     c000be9d <File::exists()+0x39>
c000be79:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be80:	85 c9                	test   ecx,ecx
c000be82:	74 19                	je     c000be9d <File::exists()+0x39>
c000be84:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be8a:	85 c9                	test   ecx,ecx
c000be8c:	74 0f                	je     c000be9d <File::exists()+0x39>
c000be8e:	50                   	push   eax
c000be8f:	83 c2 0d             	add    edx,0xd
c000be92:	50                   	push   eax
c000be93:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be95:	52                   	push   edx
c000be96:	51                   	push   ecx
c000be97:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be9a:	83 c4 10             	add    esp,0x10
c000be9d:	83 c4 0c             	add    esp,0xc
c000bea0:	c3                   	ret    
c000bea1:	90                   	nop

c000bea2 <File::stat(unsigned long long*, bool*)>:
c000bea2:	56                   	push   esi
c000bea3:	53                   	push   ebx
c000bea4:	50                   	push   eax
c000bea5:	b8 0b 00 00 00       	mov    eax,0xb
c000beaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000beae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000beb2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000beb6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bebd:	83 f9 19             	cmp    ecx,0x19
c000bec0:	77 3d                	ja     c000beff <File::stat(unsigned long long*, bool*)+0x5d>
c000bec2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bec9:	85 c9                	test   ecx,ecx
c000becb:	74 32                	je     c000beff <File::stat(unsigned long long*, bool*)+0x5d>
c000becd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bed3:	85 c9                	test   ecx,ecx
c000bed5:	74 28                	je     c000beff <File::stat(unsigned long long*, bool*)+0x5d>
c000bed7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bedb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bedd:	74 13                	je     c000bef2 <File::stat(unsigned long long*, bool*)+0x50>
c000bedf:	83 ec 04             	sub    esp,0x4
c000bee2:	56                   	push   esi
c000bee3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bee9:	51                   	push   ecx
c000beea:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000beed:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bef0:	eb 0a                	jmp    c000befc <File::stat(unsigned long long*, bool*)+0x5a>
c000bef2:	53                   	push   ebx
c000bef3:	83 c2 0d             	add    edx,0xd
c000bef6:	56                   	push   esi
c000bef7:	52                   	push   edx
c000bef8:	51                   	push   ecx
c000bef9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000befc:	83 c4 10             	add    esp,0x10
c000beff:	5a                   	pop    edx
c000bf00:	5b                   	pop    ebx
c000bf01:	5e                   	pop    esi
c000bf02:	c3                   	ret    

c000bf03 <Fs::setcwd(Process*, char*)>:
c000bf03:	55                   	push   ebp
c000bf04:	57                   	push   edi
c000bf05:	56                   	push   esi
c000bf06:	53                   	push   ebx
c000bf07:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bf0d:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bf14:	6a 00                	push   0x0
c000bf16:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bf1c:	57                   	push   edi
c000bf1d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bf24:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bf28:	56                   	push   esi
c000bf29:	e8 48 f9 ff ff       	call   c000b876 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bf2e:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf31:	e8 4a 46 ff ff       	call   c0000580 <strlen>
c000bf36:	83 c4 10             	add    esp,0x10
c000bf39:	83 f8 02             	cmp    eax,0x2
c000bf3c:	77 15                	ja     c000bf53 <Fs::setcwd(Process*, char*)+0x50>
c000bf3e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf43:	83 eb 41             	sub    ebx,0x41
c000bf46:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf4d:	85 c0                	test   eax,eax
c000bf4f:	75 1c                	jne    c000bf6d <Fs::setcwd(Process*, char*)+0x6a>
c000bf51:	eb 2f                	jmp    c000bf82 <Fs::setcwd(Process*, char*)+0x7f>
c000bf53:	83 ec 0c             	sub    esp,0xc
c000bf56:	56                   	push   esi
c000bf57:	e8 24 46 ff ff       	call   c0000580 <strlen>
c000bf5c:	83 c4 10             	add    esp,0x10
c000bf5f:	83 f8 03             	cmp    eax,0x3
c000bf62:	75 57                	jne    c000bfbb <Fs::setcwd(Process*, char*)+0xb8>
c000bf64:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf69:	75 50                	jne    c000bfbb <Fs::setcwd(Process*, char*)+0xb8>
c000bf6b:	eb d1                	jmp    c000bf3e <Fs::setcwd(Process*, char*)+0x3b>
c000bf6d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf74:	75 0c                	jne    c000bf82 <Fs::setcwd(Process*, char*)+0x7f>
c000bf76:	83 ec 0c             	sub    esp,0xc
c000bf79:	50                   	push   eax
c000bf7a:	e8 a9 1d 00 00       	call   c000dd28 <LogicalDisk::mount()>
c000bf7f:	83 c4 10             	add    esp,0x10
c000bf82:	83 fb 19             	cmp    ebx,0x19
c000bf85:	b8 03 00 00 00       	mov    eax,0x3
c000bf8a:	0f 87 c6 00 00 00    	ja     c000c056 <Fs::setcwd(Process*, char*)+0x153>
c000bf90:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf97:	b8 05 00 00 00       	mov    eax,0x5
c000bf9c:	85 d2                	test   edx,edx
c000bf9e:	0f 84 b2 00 00 00    	je     c000c056 <Fs::setcwd(Process*, char*)+0x153>
c000bfa4:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bfab:	b8 06 00 00 00       	mov    eax,0x6
c000bfb0:	0f 85 92 00 00 00    	jne    c000c048 <Fs::setcwd(Process*, char*)+0x145>
c000bfb6:	e9 9b 00 00 00       	jmp    c000c056 <Fs::setcwd(Process*, char*)+0x153>
c000bfbb:	83 ec 0c             	sub    esp,0xc
c000bfbe:	68 14 01 00 00       	push   0x114
c000bfc3:	e8 6b bb ff ff       	call   c0007b33 <malloc>
c000bfc8:	83 c4 0c             	add    esp,0xc
c000bfcb:	55                   	push   ebp
c000bfcc:	56                   	push   esi
c000bfcd:	50                   	push   eax
c000bfce:	89 c3                	mov    ebx,eax
c000bfd0:	e8 ad fb ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c000bfd5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bfda:	83 c4 0c             	add    esp,0xc
c000bfdd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bfe1:	50                   	push   eax
c000bfe2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bfe6:	50                   	push   eax
c000bfe7:	53                   	push   ebx
c000bfe8:	e8 b5 fe ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c000bfed:	83 c4 10             	add    esp,0x10
c000bff0:	83 f8 02             	cmp    eax,0x2
c000bff3:	74 27                	je     c000c01c <Fs::setcwd(Process*, char*)+0x119>
c000bff5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bffa:	75 1c                	jne    c000c018 <Fs::setcwd(Process*, char*)+0x115>
c000bffc:	85 db                	test   ebx,ebx
c000bffe:	b8 02 00 00 00       	mov    eax,0x2
c000c003:	74 51                	je     c000c056 <Fs::setcwd(Process*, char*)+0x153>
c000c005:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c007:	83 ec 0c             	sub    esp,0xc
c000c00a:	53                   	push   ebx
c000c00b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c00e:	83 c4 10             	add    esp,0x10
c000c011:	b8 02 00 00 00       	mov    eax,0x2
c000c016:	eb 3e                	jmp    c000c056 <Fs::setcwd(Process*, char*)+0x153>
c000c018:	85 c0                	test   eax,eax
c000c01a:	74 1c                	je     c000c038 <Fs::setcwd(Process*, char*)+0x135>
c000c01c:	85 db                	test   ebx,ebx
c000c01e:	b8 01 00 00 00       	mov    eax,0x1
c000c023:	74 31                	je     c000c056 <Fs::setcwd(Process*, char*)+0x153>
c000c025:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c027:	83 ec 0c             	sub    esp,0xc
c000c02a:	53                   	push   ebx
c000c02b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c02e:	83 c4 10             	add    esp,0x10
c000c031:	b8 01 00 00 00       	mov    eax,0x1
c000c036:	eb 1e                	jmp    c000c056 <Fs::setcwd(Process*, char*)+0x153>
c000c038:	85 db                	test   ebx,ebx
c000c03a:	74 0c                	je     c000c048 <Fs::setcwd(Process*, char*)+0x145>
c000c03c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	53                   	push   ebx
c000c042:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c045:	83 c4 10             	add    esp,0x10
c000c048:	50                   	push   eax
c000c049:	50                   	push   eax
c000c04a:	56                   	push   esi
c000c04b:	57                   	push   edi
c000c04c:	e8 ff 45 ff ff       	call   c0000650 <strcpy>
c000c051:	83 c4 10             	add    esp,0x10
c000c054:	31 c0                	xor    eax,eax
c000c056:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c05c:	5b                   	pop    ebx
c000c05d:	5e                   	pop    esi
c000c05e:	5f                   	pop    edi
c000c05f:	5d                   	pop    ebp
c000c060:	c3                   	ret    
c000c061:	90                   	nop

c000c062 <Directory::Directory(char const*, Process*)>:
c000c062:	83 ec 0c             	sub    esp,0xc
c000c065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c069:	83 ec 08             	sub    esp,0x8
c000c06c:	6a 00                	push   0x0
c000c06e:	50                   	push   eax
c000c06f:	e8 92 d1 ff ff       	call   c0009206 <UnixFile::UnixFile(int)>
c000c074:	83 c4 10             	add    esp,0x10
c000c077:	ba 24 1b 02 c0       	mov    edx,0xc0021b24
c000c07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c080:	89 10                	mov    DWORD PTR [eax],edx
c000c082:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c087:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c08b:	0f 95 c0             	setne  al
c000c08e:	0f b6 c0             	movzx  eax,al
c000c091:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c095:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c09b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c09f:	83 c2 0d             	add    edx,0xd
c000c0a2:	50                   	push   eax
c000c0a3:	51                   	push   ecx
c000c0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a8:	52                   	push   edx
c000c0a9:	e8 c8 f7 ff ff       	call   c000b876 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c0ae:	83 c4 10             	add    esp,0x10
c000c0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b5:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c0b8:	83 e8 41             	sub    eax,0x41
c000c0bb:	88 c2                	mov    dl,al
c000c0bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c1:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0cb:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0d9:	0f b6 c0             	movzx  eax,al
c000c0dc:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0e3:	85 c0                	test   eax,eax
c000c0e5:	74 3e                	je     c000c125 <Directory::Directory(char const*, Process*)+0xc3>
c000c0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0eb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0f1:	0f b6 c0             	movzx  eax,al
c000c0f4:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0fb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c101:	85 c0                	test   eax,eax
c000c103:	75 20                	jne    c000c125 <Directory::Directory(char const*, Process*)+0xc3>
c000c105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c109:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c10f:	0f b6 c0             	movzx  eax,al
c000c112:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c119:	83 ec 0c             	sub    esp,0xc
c000c11c:	50                   	push   eax
c000c11d:	e8 06 1c 00 00       	call   c000dd28 <LogicalDisk::mount()>
c000c122:	83 c4 10             	add    esp,0x10
c000c125:	90                   	nop
c000c126:	83 c4 0c             	add    esp,0xc
c000c129:	c3                   	ret    

c000c12a <Directory::open()>:
c000c12a:	53                   	push   ebx
c000c12b:	b8 0b 00 00 00       	mov    eax,0xb
c000c130:	83 ec 08             	sub    esp,0x8
c000c133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c137:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c13e:	83 fa 19             	cmp    edx,0x19
c000c141:	77 3d                	ja     c000c180 <Directory::open()+0x56>
c000c143:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c14a:	85 d2                	test   edx,edx
c000c14c:	74 32                	je     c000c180 <Directory::open()+0x56>
c000c14e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c154:	85 d2                	test   edx,edx
c000c156:	74 28                	je     c000c180 <Directory::open()+0x56>
c000c158:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c15c:	b8 06 00 00 00       	mov    eax,0x6
c000c161:	75 1d                	jne    c000c180 <Directory::open()+0x56>
c000c163:	50                   	push   eax
c000c164:	8b 02                	mov    eax,DWORD PTR [edx]
c000c166:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c16c:	51                   	push   ecx
c000c16d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c170:	51                   	push   ecx
c000c171:	52                   	push   edx
c000c172:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c175:	83 c4 10             	add    esp,0x10
c000c178:	85 c0                	test   eax,eax
c000c17a:	75 04                	jne    c000c180 <Directory::open()+0x56>
c000c17c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c180:	83 c4 08             	add    esp,0x8
c000c183:	5b                   	pop    ebx
c000c184:	c3                   	ret    
c000c185:	90                   	nop

c000c186 <Directory::close()>:
c000c186:	53                   	push   ebx
c000c187:	b8 0b 00 00 00       	mov    eax,0xb
c000c18c:	83 ec 08             	sub    esp,0x8
c000c18f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c193:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c19a:	83 f9 19             	cmp    ecx,0x19
c000c19d:	77 41                	ja     c000c1e0 <Directory::close()+0x5a>
c000c19f:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1a6:	85 db                	test   ebx,ebx
c000c1a8:	74 36                	je     c000c1e0 <Directory::close()+0x5a>
c000c1aa:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c1b1:	74 2d                	je     c000c1e0 <Directory::close()+0x5a>
c000c1b3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1b7:	b8 05 00 00 00       	mov    eax,0x5
c000c1bc:	74 22                	je     c000c1e0 <Directory::close()+0x5a>
c000c1be:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c1c2:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c1c9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c1cf:	53                   	push   ebx
c000c1d0:	53                   	push   ebx
c000c1d1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1d3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c1d9:	50                   	push   eax
c000c1da:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c1dd:	83 c4 10             	add    esp,0x10
c000c1e0:	83 c4 08             	add    esp,0x8
c000c1e3:	5b                   	pop    ebx
c000c1e4:	c3                   	ret    
c000c1e5:	90                   	nop

c000c1e6 <Directory::unlink()>:
c000c1e6:	83 ec 0c             	sub    esp,0xc
c000c1e9:	b8 0b 00 00 00       	mov    eax,0xb
c000c1ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1f2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1f9:	83 f9 19             	cmp    ecx,0x19
c000c1fc:	77 2f                	ja     c000c22d <Directory::unlink()+0x47>
c000c1fe:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c205:	85 c9                	test   ecx,ecx
c000c207:	74 24                	je     c000c22d <Directory::unlink()+0x47>
c000c209:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c20f:	85 c9                	test   ecx,ecx
c000c211:	74 1a                	je     c000c22d <Directory::unlink()+0x47>
c000c213:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c217:	b8 06 00 00 00       	mov    eax,0x6
c000c21c:	75 0f                	jne    c000c22d <Directory::unlink()+0x47>
c000c21e:	50                   	push   eax
c000c21f:	83 c2 0d             	add    edx,0xd
c000c222:	50                   	push   eax
c000c223:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c225:	52                   	push   edx
c000c226:	51                   	push   ecx
c000c227:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c22a:	83 c4 10             	add    esp,0x10
c000c22d:	83 c4 0c             	add    esp,0xc
c000c230:	c3                   	ret    
c000c231:	90                   	nop

c000c232 <Directory::rename(char const*)>:
c000c232:	83 ec 0c             	sub    esp,0xc
c000c235:	b8 0b 00 00 00       	mov    eax,0xb
c000c23a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c23e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c245:	83 f9 19             	cmp    ecx,0x19
c000c248:	77 32                	ja     c000c27c <Directory::rename(char const*)+0x4a>
c000c24a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c251:	85 c9                	test   ecx,ecx
c000c253:	74 27                	je     c000c27c <Directory::rename(char const*)+0x4a>
c000c255:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c25b:	85 c9                	test   ecx,ecx
c000c25d:	74 1d                	je     c000c27c <Directory::rename(char const*)+0x4a>
c000c25f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c263:	b8 06 00 00 00       	mov    eax,0x6
c000c268:	75 12                	jne    c000c27c <Directory::rename(char const*)+0x4a>
c000c26a:	50                   	push   eax
c000c26b:	83 c2 0d             	add    edx,0xd
c000c26e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c270:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c274:	52                   	push   edx
c000c275:	51                   	push   ecx
c000c276:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	83 c4 0c             	add    esp,0xc
c000c27f:	c3                   	ret    

c000c280 <Directory::exists()>:
c000c280:	83 ec 0c             	sub    esp,0xc
c000c283:	31 c0                	xor    eax,eax
c000c285:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c289:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c290:	83 f9 19             	cmp    ecx,0x19
c000c293:	77 24                	ja     c000c2b9 <Directory::exists()+0x39>
c000c295:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c29c:	85 c9                	test   ecx,ecx
c000c29e:	74 19                	je     c000c2b9 <Directory::exists()+0x39>
c000c2a0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2a6:	85 c9                	test   ecx,ecx
c000c2a8:	74 0f                	je     c000c2b9 <Directory::exists()+0x39>
c000c2aa:	50                   	push   eax
c000c2ab:	83 c2 0d             	add    edx,0xd
c000c2ae:	50                   	push   eax
c000c2af:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2b1:	52                   	push   edx
c000c2b2:	51                   	push   ecx
c000c2b3:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c2b6:	83 c4 10             	add    esp,0x10
c000c2b9:	83 c4 0c             	add    esp,0xc
c000c2bc:	c3                   	ret    
c000c2bd:	90                   	nop

c000c2be <Directory::read(dirent*)>:
c000c2be:	83 ec 1c             	sub    esp,0x1c
c000c2c1:	b8 0b 00 00 00       	mov    eax,0xb
c000c2c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c2ca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2d1:	83 f9 19             	cmp    ecx,0x19
c000c2d4:	77 30                	ja     c000c306 <Directory::read(dirent*)+0x48>
c000c2d6:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2dd:	85 c9                	test   ecx,ecx
c000c2df:	74 25                	je     c000c306 <Directory::read(dirent*)+0x48>
c000c2e1:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c2e8:	74 1c                	je     c000c306 <Directory::read(dirent*)+0x48>
c000c2ea:	83 ec 0c             	sub    esp,0xc
c000c2ed:	8b 02                	mov    eax,DWORD PTR [edx]
c000c2ef:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c2f3:	51                   	push   ecx
c000c2f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2f8:	6a 00                	push   0x0
c000c2fa:	68 10 01 00 00       	push   0x110
c000c2ff:	52                   	push   edx
c000c300:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c303:	83 c4 20             	add    esp,0x20
c000c306:	83 c4 1c             	add    esp,0x1c
c000c309:	c3                   	ret    

c000c30a <Directory::create()>:
c000c30a:	83 ec 0c             	sub    esp,0xc
c000c30d:	b8 0b 00 00 00       	mov    eax,0xb
c000c312:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c316:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c31d:	83 f9 19             	cmp    ecx,0x19
c000c320:	77 2f                	ja     c000c351 <Directory::create()+0x47>
c000c322:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c329:	85 c9                	test   ecx,ecx
c000c32b:	74 24                	je     c000c351 <Directory::create()+0x47>
c000c32d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c333:	85 c9                	test   ecx,ecx
c000c335:	74 1a                	je     c000c351 <Directory::create()+0x47>
c000c337:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c33b:	b8 06 00 00 00       	mov    eax,0x6
c000c340:	75 0f                	jne    c000c351 <Directory::create()+0x47>
c000c342:	50                   	push   eax
c000c343:	83 c2 0d             	add    edx,0xd
c000c346:	50                   	push   eax
c000c347:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c349:	52                   	push   edx
c000c34a:	51                   	push   ecx
c000c34b:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c34e:	83 c4 10             	add    esp,0x10
c000c351:	83 c4 0c             	add    esp,0xc
c000c354:	c3                   	ret    
c000c355:	90                   	nop

c000c356 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c356:	b8 0a 00 00 00       	mov    eax,0xa
c000c35b:	c3                   	ret    

c000c35c <Bus::Bus(char const*)>:
c000c35c:	83 ec 0c             	sub    esp,0xc
c000c35f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c363:	83 ec 08             	sub    esp,0x8
c000c366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36a:	50                   	push   eax
c000c36b:	e8 28 08 00 00       	call   c000cb98 <Device::Device(char const*)>
c000c370:	83 c4 10             	add    esp,0x10
c000c373:	ba 40 1b 02 c0       	mov    edx,0xc0021b40
c000c378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c37c:	89 10                	mov    DWORD PTR [eax],edx
c000c37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c382:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c38c:	90                   	nop
c000c38d:	83 c4 0c             	add    esp,0xc
c000c390:	c3                   	ret    
c000c391:	90                   	nop
c000c392:	66 90                	xchg   ax,ax

c000c394 <Bus::~Bus()>:
c000c394:	83 ec 0c             	sub    esp,0xc
c000c397:	ba 40 1b 02 c0       	mov    edx,0xc0021b40
c000c39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a0:	89 10                	mov    DWORD PTR [eax],edx
c000c3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a6:	83 ec 0c             	sub    esp,0xc
c000c3a9:	50                   	push   eax
c000c3aa:	e8 53 05 00 00       	call   c000c902 <Device::~Device()>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	90                   	nop
c000c3b3:	83 c4 0c             	add    esp,0xc
c000c3b6:	c3                   	ret    
c000c3b7:	90                   	nop

c000c3b8 <Bus::~Bus()>:
c000c3b8:	83 ec 0c             	sub    esp,0xc
c000c3bb:	83 ec 0c             	sub    esp,0xc
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	e8 cd ff ff ff       	call   c000c394 <Bus::~Bus()>
c000c3c7:	83 c4 10             	add    esp,0x10
c000c3ca:	83 ec 08             	sub    esp,0x8
c000c3cd:	68 58 01 00 00       	push   0x158
c000c3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d6:	e8 91 e4 ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000c3db:	83 c4 10             	add    esp,0x10
c000c3de:	83 c4 0c             	add    esp,0xc
c000c3e1:	c3                   	ret    

c000c3e2 <beepThread(void*)>:
c000c3e2:	83 ec 0c             	sub    esp,0xc
c000c3e5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c3ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3ee:	48                   	dec    eax
c000c3ef:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c3f4:	75 01                	jne    c000c3f7 <beepThread(void*)+0x15>
c000c3f6:	fb                   	sti    
c000c3f7:	6b c2 0a             	imul   eax,edx,0xa
c000c3fa:	83 ec 0c             	sub    esp,0xc
c000c3fd:	50                   	push   eax
c000c3fe:	e8 85 a0 00 00       	call   c0016488 <milliTenthSleep(unsigned int)>
c000c403:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c40a:	e8 d2 bf 00 00       	call   c00183e1 <HalMakeBeep(int)>
c000c40f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c417:	83 c4 1c             	add    esp,0x1c
c000c41a:	e9 4d 9f 00 00       	jmp    c001636c <blockTask(TaskState)>

c000c41f <Krnl::beep(int, int, bool)>:
c000c41f:	56                   	push   esi
c000c420:	53                   	push   ebx
c000c421:	83 ec 10             	sub    esp,0x10
c000c424:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c428:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c42c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c430:	e8 ac bf 00 00       	call   c00183e1 <HalMakeBeep(int)>
c000c435:	89 f0                	mov    eax,esi
c000c437:	83 c4 10             	add    esp,0x10
c000c43a:	84 c0                	test   al,al
c000c43c:	74 1e                	je     c000c45c <Krnl::beep(int, int, bool)+0x3d>
c000c43e:	6b db 0a             	imul   ebx,ebx,0xa
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	53                   	push   ebx
c000c445:	e8 3e a0 00 00       	call   c0016488 <milliTenthSleep(unsigned int)>
c000c44a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c452:	83 c4 14             	add    esp,0x14
c000c455:	5b                   	pop    ebx
c000c456:	5e                   	pop    esi
c000c457:	e9 85 bf 00 00       	jmp    c00183e1 <HalMakeBeep(int)>
c000c45c:	68 e6 00 00 00       	push   0xe6
c000c461:	53                   	push   ebx
c000c462:	68 e2 c3 00 c0       	push   0xc000c3e2
c000c467:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c46d:	e8 ae 9a 00 00       	call   c0015f20 <Process::createThread(void (*)(void*), void*, int)>
c000c472:	83 c4 14             	add    esp,0x14
c000c475:	5b                   	pop    ebx
c000c476:	5e                   	pop    esi
c000c477:	c3                   	ret    

c000c478 <User::loadClockSettings(int)>:
c000c478:	53                   	push   ebx
c000c479:	83 ec 14             	sub    esp,0x14
c000c47c:	68 14 01 00 00       	push   0x114
c000c481:	e8 ad b6 ff ff       	call   c0007b33 <malloc>
c000c486:	83 c4 0c             	add    esp,0xc
c000c489:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c48f:	68 64 1b 02 c0       	push   0xc0021b64
c000c494:	50                   	push   eax
c000c495:	89 c3                	mov    ebx,eax
c000c497:	e8 e6 f6 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c000c49c:	58                   	pop    eax
c000c49d:	5a                   	pop    edx
c000c49e:	6a 01                	push   0x1
c000c4a0:	53                   	push   ebx
c000c4a1:	e8 fa f6 ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c000c4a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c4a9:	e8 50 f7 ff ff       	call   c000bbfe <File::close()>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	85 db                	test   ebx,ebx
c000c4b3:	74 0f                	je     c000c4c4 <User::loadClockSettings(int)+0x4c>
c000c4b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4b7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c4bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c4be:	83 c4 08             	add    esp,0x8
c000c4c1:	5b                   	pop    ebx
c000c4c2:	ff e0                	jmp    eax
c000c4c4:	83 c4 08             	add    esp,0x8
c000c4c7:	5b                   	pop    ebx
c000c4c8:	c3                   	ret    
c000c4c9:	90                   	nop

c000c4ca <Clock::Clock(char const*)>:
c000c4ca:	83 ec 0c             	sub    esp,0xc
c000c4cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4d1:	83 ec 08             	sub    esp,0x8
c000c4d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4d8:	50                   	push   eax
c000c4d9:	e8 ba 06 00 00       	call   c000cb98 <Device::Device(char const*)>
c000c4de:	83 c4 10             	add    esp,0x10
c000c4e1:	ba 8c 1b 02 c0       	mov    edx,0xc0021b8c
c000c4e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ea:	89 10                	mov    DWORD PTR [eax],edx
c000c4ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4f0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c4fa:	90                   	nop
c000c4fb:	83 c4 0c             	add    esp,0xc
c000c4fe:	c3                   	ret    
c000c4ff:	90                   	nop

c000c500 <Clock::~Clock()>:
c000c500:	83 ec 0c             	sub    esp,0xc
c000c503:	ba 8c 1b 02 c0       	mov    edx,0xc0021b8c
c000c508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c50c:	89 10                	mov    DWORD PTR [eax],edx
c000c50e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c512:	83 ec 0c             	sub    esp,0xc
c000c515:	50                   	push   eax
c000c516:	e8 e7 03 00 00       	call   c000c902 <Device::~Device()>
c000c51b:	83 c4 10             	add    esp,0x10
c000c51e:	90                   	nop
c000c51f:	83 c4 0c             	add    esp,0xc
c000c522:	c3                   	ret    
c000c523:	90                   	nop

c000c524 <Clock::~Clock()>:
c000c524:	83 ec 0c             	sub    esp,0xc
c000c527:	83 ec 0c             	sub    esp,0xc
c000c52a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c52e:	e8 cd ff ff ff       	call   c000c500 <Clock::~Clock()>
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	83 ec 08             	sub    esp,0x8
c000c539:	68 58 01 00 00       	push   0x158
c000c53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c542:	e8 25 e3 ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000c547:	83 c4 10             	add    esp,0x10
c000c54a:	83 c4 0c             	add    esp,0xc
c000c54d:	c3                   	ret    

c000c54e <Clock::timeInSecondsLocal()>:
c000c54e:	53                   	push   ebx
c000c54f:	83 ec 14             	sub    esp,0x14
c000c552:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c556:	8b 10                	mov    edx,DWORD PTR [eax]
c000c558:	50                   	push   eax
c000c559:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c55c:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c563:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c569:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c56f:	89 cb                	mov    ebx,ecx
c000c571:	c1 fb 1f             	sar    ebx,0x1f
c000c574:	01 c8                	add    eax,ecx
c000c576:	11 da                	adc    edx,ebx
c000c578:	83 c4 10             	add    esp,0x10
c000c57b:	31 c9                	xor    ecx,ecx
c000c57d:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c584:	74 05                	je     c000c58b <Clock::timeInSecondsLocal()+0x3d>
c000c586:	b9 08 07 00 00       	mov    ecx,0x708
c000c58b:	31 db                	xor    ebx,ebx
c000c58d:	01 c8                	add    eax,ecx
c000c58f:	11 da                	adc    edx,ebx
c000c591:	83 c4 08             	add    esp,0x8
c000c594:	5b                   	pop    ebx
c000c595:	c3                   	ret    

c000c596 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c596:	57                   	push   edi
c000c597:	56                   	push   esi
c000c598:	53                   	push   ebx
c000c599:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c59d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5a1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c5a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c5a7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c5aa:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c5b1:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c5b7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c5bd:	99                   	cdq    
c000c5be:	29 c6                	sub    esi,eax
c000c5c0:	19 d7                	sbb    edi,edx
c000c5c2:	89 f0                	mov    eax,esi
c000c5c4:	31 f6                	xor    esi,esi
c000c5c6:	89 fa                	mov    edx,edi
c000c5c8:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5cf:	74 05                	je     c000c5d6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c5d1:	be 08 07 00 00       	mov    esi,0x708
c000c5d6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c5da:	31 ff                	xor    edi,edi
c000c5dc:	29 f0                	sub    eax,esi
c000c5de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c5e2:	19 fa                	sbb    edx,edi
c000c5e4:	89 d8                	mov    eax,ebx
c000c5e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c5ea:	5b                   	pop    ebx
c000c5eb:	5e                   	pop    esi
c000c5ec:	5f                   	pop    edi
c000c5ed:	ff e0                	jmp    eax

c000c5ef <datetimeToSeconds(datetime_t)>:
c000c5ef:	55                   	push   ebp
c000c5f0:	57                   	push   edi
c000c5f1:	56                   	push   esi
c000c5f2:	53                   	push   ebx
c000c5f3:	83 ec 0c             	sub    esp,0xc
c000c5f6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c5fa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c5fe:	89 f7                	mov    edi,esi
c000c600:	89 f0                	mov    eax,esi
c000c602:	0f b6 cf             	movzx  ecx,bh
c000c605:	0f b6 c4             	movzx  eax,ah
c000c608:	c1 ef 10             	shr    edi,0x10
c000c60b:	89 da                	mov    edx,ebx
c000c60d:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c610:	89 f9                	mov    ecx,edi
c000c612:	0f b6 f9             	movzx  edi,cl
c000c615:	89 f1                	mov    ecx,esi
c000c617:	6b c0 3c             	imul   eax,eax,0x3c
c000c61a:	0f b6 f1             	movzx  esi,cl
c000c61d:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c623:	0f b6 db             	movzx  ebx,bl
c000c626:	c1 ea 10             	shr    edx,0x10
c000c629:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c62f:	01 f8                	add    eax,edi
c000c631:	01 f0                	add    eax,esi
c000c633:	89 04 24             	mov    DWORD PTR [esp],eax
c000c636:	c1 f8 1f             	sar    eax,0x1f
c000c639:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c63d:	89 e8                	mov    eax,ebp
c000c63f:	0f b6 c0             	movzx  eax,al
c000c642:	8b 0c 85 c0 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde440]
c000c649:	83 f8 01             	cmp    eax,0x1
c000c64c:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c650:	0f b7 da             	movzx  ebx,dx
c000c653:	76 27                	jbe    c000c67c <datetimeToSeconds(datetime_t)+0x8d>
c000c655:	80 e2 03             	and    dl,0x3
c000c658:	75 22                	jne    c000c67c <datetimeToSeconds(datetime_t)+0x8d>
c000c65a:	31 d2                	xor    edx,edx
c000c65c:	be 64 00 00 00       	mov    esi,0x64
c000c661:	89 d8                	mov    eax,ebx
c000c663:	f7 f6                	div    esi
c000c665:	85 d2                	test   edx,edx
c000c667:	75 12                	jne    c000c67b <datetimeToSeconds(datetime_t)+0x8c>
c000c669:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c66f:	be 90 01 00 00       	mov    esi,0x190
c000c674:	99                   	cdq    
c000c675:	f7 fe                	idiv   esi
c000c677:	85 d2                	test   edx,edx
c000c679:	75 01                	jne    c000c67c <datetimeToSeconds(datetime_t)+0x8d>
c000c67b:	41                   	inc    ecx
c000c67c:	83 fb 46             	cmp    ebx,0x46
c000c67f:	76 48                	jbe    c000c6c9 <datetimeToSeconds(datetime_t)+0xda>
c000c681:	be 46 00 00 00       	mov    esi,0x46
c000c686:	bf 64 00 00 00       	mov    edi,0x64
c000c68b:	bd 90 01 00 00       	mov    ebp,0x190
c000c690:	f7 c6 03 00 00 00    	test   esi,0x3
c000c696:	b8 6d 01 00 00       	mov    eax,0x16d
c000c69b:	75 23                	jne    c000c6c0 <datetimeToSeconds(datetime_t)+0xd1>
c000c69d:	89 f0                	mov    eax,esi
c000c69f:	99                   	cdq    
c000c6a0:	f7 ff                	idiv   edi
c000c6a2:	b8 6e 01 00 00       	mov    eax,0x16e
c000c6a7:	85 d2                	test   edx,edx
c000c6a9:	75 15                	jne    c000c6c0 <datetimeToSeconds(datetime_t)+0xd1>
c000c6ab:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c6b1:	99                   	cdq    
c000c6b2:	f7 fd                	idiv   ebp
c000c6b4:	83 fa 01             	cmp    edx,0x1
c000c6b7:	19 c0                	sbb    eax,eax
c000c6b9:	f7 d0                	not    eax
c000c6bb:	05 6e 01 00 00       	add    eax,0x16e
c000c6c0:	46                   	inc    esi
c000c6c1:	01 c1                	add    ecx,eax
c000c6c3:	39 de                	cmp    esi,ebx
c000c6c5:	7c c9                	jl     c000c690 <datetimeToSeconds(datetime_t)+0xa1>
c000c6c7:	eb 34                	jmp    c000c6fd <datetimeToSeconds(datetime_t)+0x10e>
c000c6c9:	74 32                	je     c000c6fd <datetimeToSeconds(datetime_t)+0x10e>
c000c6cb:	b8 45 00 00 00       	mov    eax,0x45
c000c6d0:	89 c2                	mov    edx,eax
c000c6d2:	83 e2 03             	and    edx,0x3
c000c6d5:	39 d8                	cmp    eax,ebx
c000c6d7:	7e 0f                	jle    c000c6e8 <datetimeToSeconds(datetime_t)+0xf9>
c000c6d9:	83 fa 01             	cmp    edx,0x1
c000c6dc:	19 d2                	sbb    edx,edx
c000c6de:	48                   	dec    eax
c000c6df:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c6e6:	eb e8                	jmp    c000c6d0 <datetimeToSeconds(datetime_t)+0xe1>
c000c6e8:	85 d2                	test   edx,edx
c000c6ea:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6ef:	75 0a                	jne    c000c6fb <datetimeToSeconds(datetime_t)+0x10c>
c000c6f1:	83 fb 01             	cmp    ebx,0x1
c000c6f4:	19 c0                	sbb    eax,eax
c000c6f6:	05 6e 01 00 00       	add    eax,0x16e
c000c6fb:	29 c1                	sub    ecx,eax
c000c6fd:	b8 80 51 01 00       	mov    eax,0x15180
c000c702:	f7 e9                	imul   ecx
c000c704:	03 04 24             	add    eax,DWORD PTR [esp]
c000c707:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c70b:	83 c4 0c             	add    esp,0xc
c000c70e:	5b                   	pop    ebx
c000c70f:	5e                   	pop    esi
c000c710:	5f                   	pop    edi
c000c711:	5d                   	pop    ebp
c000c712:	c3                   	ret    
c000c713:	90                   	nop

c000c714 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c714:	57                   	push   edi
c000c715:	56                   	push   esi
c000c716:	53                   	push   ebx
c000c717:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c71b:	8b 06                	mov    eax,DWORD PTR [esi]
c000c71d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c720:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c724:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c728:	e8 c2 fe ff ff       	call   c000c5ef <datetimeToSeconds(datetime_t)>
c000c72d:	59                   	pop    ecx
c000c72e:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c735:	5b                   	pop    ebx
c000c736:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c73c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c742:	89 cb                	mov    ebx,ecx
c000c744:	c1 fb 1f             	sar    ebx,0x1f
c000c747:	29 c8                	sub    eax,ecx
c000c749:	19 da                	sbb    edx,ebx
c000c74b:	31 c9                	xor    ecx,ecx
c000c74d:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c754:	74 05                	je     c000c75b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c756:	b9 08 07 00 00       	mov    ecx,0x708
c000c75b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c75f:	31 db                	xor    ebx,ebx
c000c761:	29 c8                	sub    eax,ecx
c000c763:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c767:	19 da                	sbb    edx,ebx
c000c769:	89 f8                	mov    eax,edi
c000c76b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c76f:	5b                   	pop    ebx
c000c770:	5e                   	pop    esi
c000c771:	5f                   	pop    edi
c000c772:	ff e0                	jmp    eax

c000c774 <secondsToDatetime(unsigned long long)>:
c000c774:	55                   	push   ebp
c000c775:	57                   	push   edi
c000c776:	56                   	push   esi
c000c777:	53                   	push   ebx
c000c778:	83 ec 1c             	sub    esp,0x1c
c000c77b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c77f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c783:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c787:	6a 00                	push   0x0
c000c789:	68 80 51 01 00       	push   0x15180
c000c78e:	55                   	push   ebp
c000c78f:	57                   	push   edi
c000c790:	e8 9b 30 01 00       	call   c001f830 <__udivdi3>
c000c795:	83 c4 10             	add    esp,0x10
c000c798:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c7a2:	6a 00                	push   0x0
c000c7a4:	68 80 51 01 00       	push   0x15180
c000c7a9:	55                   	push   ebp
c000c7aa:	57                   	push   edi
c000c7ab:	bf 10 0e 00 00       	mov    edi,0xe10
c000c7b0:	e8 7b 31 01 00       	call   c001f930 <__umoddi3>
c000c7b5:	83 c4 10             	add    esp,0x10
c000c7b8:	99                   	cdq    
c000c7b9:	f7 ff                	idiv   edi
c000c7bb:	bf 3c 00 00 00       	mov    edi,0x3c
c000c7c0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c7c3:	89 d0                	mov    eax,edx
c000c7c5:	99                   	cdq    
c000c7c6:	f7 ff                	idiv   edi
c000c7c8:	85 db                	test   ebx,ebx
c000c7ca:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c7cd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c7d0:	79 11                	jns    c000c7e3 <secondsToDatetime(unsigned long long)+0x6f>
c000c7d2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c7d6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c7dc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7e1:	eb 07                	jmp    c000c7ea <secondsToDatetime(unsigned long long)+0x76>
c000c7e3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7e8:	89 d8                	mov    eax,ebx
c000c7ea:	99                   	cdq    
c000c7eb:	bf b4 05 00 00       	mov    edi,0x5b4
c000c7f0:	f7 f9                	idiv   ecx
c000c7f2:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c7f7:	31 d2                	xor    edx,edx
c000c7f9:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c7fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c802:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c80a:	01 c3                	add    ebx,eax
c000c80c:	89 d8                	mov    eax,ebx
c000c80e:	f7 f1                	div    ecx
c000c810:	31 d2                	xor    edx,edx
c000c812:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c815:	89 d8                	mov    eax,ebx
c000c817:	f7 f7                	div    edi
c000c819:	31 d2                	xor    edx,edx
c000c81b:	29 c1                	sub    ecx,eax
c000c81d:	89 d8                	mov    eax,ebx
c000c81f:	f7 f5                	div    ebp
c000c821:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c826:	31 d2                	xor    edx,edx
c000c828:	29 c1                	sub    ecx,eax
c000c82a:	89 c8                	mov    eax,ecx
c000c82c:	f7 f5                	div    ebp
c000c82e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c833:	31 d2                	xor    edx,edx
c000c835:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c839:	89 c8                	mov    eax,ecx
c000c83b:	f7 f5                	div    ebp
c000c83d:	31 d2                	xor    edx,edx
c000c83f:	01 c3                	add    ebx,eax
c000c841:	89 c8                	mov    eax,ecx
c000c843:	f7 f7                	div    edi
c000c845:	bf 99 00 00 00       	mov    edi,0x99
c000c84a:	31 d2                	xor    edx,edx
c000c84c:	29 c3                	sub    ebx,eax
c000c84e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c856:	29 c3                	sub    ebx,eax
c000c858:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c85b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c85e:	83 c1 02             	add    ecx,0x2
c000c861:	89 c8                	mov    eax,ecx
c000c863:	bb 05 00 00 00       	mov    ebx,0x5
c000c868:	f7 f7                	div    edi
c000c86a:	31 d2                	xor    edx,edx
c000c86c:	89 c7                	mov    edi,eax
c000c86e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c874:	83 c0 02             	add    eax,0x2
c000c877:	f7 f3                	div    ebx
c000c879:	89 eb                	mov    ebx,ebp
c000c87b:	29 c3                	sub    ebx,eax
c000c87d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c883:	88 1e                	mov    BYTE PTR [esi],bl
c000c885:	19 c0                	sbb    eax,eax
c000c887:	31 d2                	xor    edx,edx
c000c889:	83 e0 0c             	and    eax,0xc
c000c88c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c890:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c898:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c89c:	83 f9 01             	cmp    ecx,0x1
c000c89f:	0f 96 c2             	setbe  dl
c000c8a2:	41                   	inc    ecx
c000c8a3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c8a6:	01 d0                	add    eax,edx
c000c8a8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c8ac:	83 c4 1c             	add    esp,0x1c
c000c8af:	89 f0                	mov    eax,esi
c000c8b1:	5b                   	pop    ebx
c000c8b2:	5e                   	pop    esi
c000c8b3:	5f                   	pop    edi
c000c8b4:	5d                   	pop    ebp
c000c8b5:	c2 04 00             	ret    0x4

c000c8b8 <Clock::timeInDatetimeLocal()>:
c000c8b8:	53                   	push   ebx
c000c8b9:	83 ec 14             	sub    esp,0x14
c000c8bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c8c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8c4:	e8 85 fc ff ff       	call   c000c54e <Clock::timeInSecondsLocal()>
c000c8c9:	83 c4 0c             	add    esp,0xc
c000c8cc:	52                   	push   edx
c000c8cd:	50                   	push   eax
c000c8ce:	53                   	push   ebx
c000c8cf:	e8 a0 fe ff ff       	call   c000c774 <secondsToDatetime(unsigned long long)>
c000c8d4:	89 d8                	mov    eax,ebx
c000c8d6:	83 c4 14             	add    esp,0x14
c000c8d9:	5b                   	pop    ebx
c000c8da:	c2 04 00             	ret    0x4
c000c8dd:	90                   	nop

c000c8de <Device::hibernate()>:
c000c8de:	c3                   	ret    
c000c8df:	90                   	nop

c000c8e0 <Device::wake()>:
c000c8e0:	c3                   	ret    
c000c8e1:	90                   	nop

c000c8e2 <Device::detect()>:
c000c8e2:	c3                   	ret    
c000c8e3:	90                   	nop

c000c8e4 <Device::disableLegacy()>:
c000c8e4:	c3                   	ret    
c000c8e5:	90                   	nop

c000c8e6 <Device::powerSaving(PowerSavingLevel)>:
c000c8e6:	c3                   	ret    
c000c8e7:	90                   	nop

c000c8e8 <DriverlessDevice::close(int, int, void*)>:
c000c8e8:	31 c0                	xor    eax,eax
c000c8ea:	c3                   	ret    
c000c8eb:	90                   	nop

c000c8ec <DriverlessDevice::detect()>:
c000c8ec:	c3                   	ret    
c000c8ed:	90                   	nop

c000c8ee <DriverlessDevice::open(int, int, void*)>:
c000c8ee:	83 ec 18             	sub    esp,0x18
c000c8f1:	68 f0 1b 02 c0       	push   0xc0021bf0
c000c8f6:	e8 44 4d 00 00       	call   c001163f <KePanic(char const*)>
c000c8fb:	83 c8 ff             	or     eax,0xffffffff
c000c8fe:	83 c4 1c             	add    esp,0x1c
c000c901:	c3                   	ret    

c000c902 <Device::~Device()>:
c000c902:	ba 50 1c 02 c0       	mov    edx,0xc0021c50
c000c907:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c90b:	89 10                	mov    DWORD PTR [eax],edx
c000c90d:	90                   	nop
c000c90e:	c3                   	ret    
c000c90f:	90                   	nop

c000c910 <Device::~Device()>:
c000c910:	83 ec 0c             	sub    esp,0xc
c000c913:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c917:	e8 e6 ff ff ff       	call   c000c902 <Device::~Device()>
c000c91c:	83 c4 04             	add    esp,0x4
c000c91f:	83 ec 08             	sub    esp,0x8
c000c922:	68 58 01 00 00       	push   0x158
c000c927:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92b:	e8 3c df ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000c930:	83 c4 10             	add    esp,0x10
c000c933:	83 c4 0c             	add    esp,0xc
c000c936:	c3                   	ret    
c000c937:	90                   	nop

c000c938 <Device::findAndLoadDriver()>:
c000c938:	c7 44 24 04 0e 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c0e
c000c940:	e9 25 e0 ff ff       	jmp    c000a96a <Dbg::kprintf(char const*, ...)>
c000c945:	90                   	nop

c000c946 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c946:	57                   	push   edi
c000c947:	b9 09 00 00 00       	mov    ecx,0x9
c000c94c:	56                   	push   esi
c000c94d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c951:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c955:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c95f:	81 c7 18 01 00 00    	add    edi,0x118
c000c965:	fc                   	cld    
c000c966:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c968:	5e                   	pop    esi
c000c969:	5f                   	pop    edi
c000c96a:	c3                   	ret    
c000c96b:	90                   	nop

c000c96c <Device::preOpenACPI(void*, char*, char*)>:
c000c96c:	57                   	push   edi
c000c96d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c972:	56                   	push   esi
c000c973:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c977:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c97b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c97f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c989:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c98f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c995:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c997:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c99d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c9a1:	b9 0e 00 00 00       	mov    ecx,0xe
c000c9a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9a8:	5e                   	pop    esi
c000c9a9:	5f                   	pop    edi
c000c9aa:	c3                   	ret    
c000c9ab:	90                   	nop

c000c9ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c9ac:	53                   	push   ebx
c000c9ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c9bd:	0f b6 c0             	movzx  eax,al
c000c9c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9c8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c9cc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9d0:	5b                   	pop    ebx
c000c9d1:	e9 aa 05 00 00       	jmp    c000cf80 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c9d6 <Device::getParent()>:
c000c9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9da:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c9e0:	c3                   	ret    
c000c9e1:	90                   	nop

c000c9e2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c9e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9ea:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c9ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9fb:	e9 f7 06 00 00       	jmp    c000d0f7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ca00 <Device::addChild(Device*)>:
c000ca00:	53                   	push   ebx
c000ca01:	83 ec 08             	sub    esp,0x8
c000ca04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca0c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ca12:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ca18:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ca1a:	85 d2                	test   edx,edx
c000ca1c:	74 04                	je     c000ca22 <Device::addChild(Device*)+0x22>
c000ca1e:	89 d3                	mov    ebx,edx
c000ca20:	eb f6                	jmp    c000ca18 <Device::addChild(Device*)+0x18>
c000ca22:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ca25:	83 ec 0c             	sub    esp,0xc
c000ca28:	6a 08                	push   0x8
c000ca2a:	e8 04 b1 ff ff       	call   c0007b33 <malloc>
c000ca2f:	89 03                	mov    DWORD PTR [ebx],eax
c000ca31:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	5b                   	pop    ebx
c000ca42:	c3                   	ret    
c000ca43:	90                   	nop

c000ca44 <Device::removeAllChildren()>:
c000ca44:	56                   	push   esi
c000ca45:	53                   	push   ebx
c000ca46:	52                   	push   edx
c000ca47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca4b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca51:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca54:	74 17                	je     c000ca6d <Device::removeAllChildren()+0x29>
c000ca56:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca59:	85 c0                	test   eax,eax
c000ca5b:	74 0c                	je     c000ca69 <Device::removeAllChildren()+0x25>
c000ca5d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca5f:	83 ec 0c             	sub    esp,0xc
c000ca62:	50                   	push   eax
c000ca63:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca66:	83 c4 10             	add    esp,0x10
c000ca69:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca6b:	eb e4                	jmp    c000ca51 <Device::removeAllChildren()+0xd>
c000ca6d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca73:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca79:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca86:	58                   	pop    eax
c000ca87:	5b                   	pop    ebx
c000ca88:	5e                   	pop    esi
c000ca89:	c3                   	ret    

c000ca8a <Device::hibernateAll()>:
c000ca8a:	53                   	push   ebx
c000ca8b:	83 ec 14             	sub    esp,0x14
c000ca8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca92:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca94:	53                   	push   ebx
c000ca95:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca9e:	83 c4 10             	add    esp,0x10
c000caa1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caa4:	74 0f                	je     c000cab5 <Device::hibernateAll()+0x2b>
c000caa6:	83 ec 0c             	sub    esp,0xc
c000caa9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caac:	e8 d9 ff ff ff       	call   c000ca8a <Device::hibernateAll()>
c000cab1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cab3:	eb e9                	jmp    c000ca9e <Device::hibernateAll()+0x14>
c000cab5:	83 c4 08             	add    esp,0x8
c000cab8:	5b                   	pop    ebx
c000cab9:	c3                   	ret    

c000caba <Device::wakeAll()>:
c000caba:	53                   	push   ebx
c000cabb:	83 ec 14             	sub    esp,0x14
c000cabe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cac2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cac4:	53                   	push   ebx
c000cac5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000cac8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cace:	83 c4 10             	add    esp,0x10
c000cad1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cad4:	74 0f                	je     c000cae5 <Device::wakeAll()+0x2b>
c000cad6:	83 ec 0c             	sub    esp,0xc
c000cad9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cadc:	e8 d9 ff ff ff       	call   c000caba <Device::wakeAll()>
c000cae1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cae3:	eb e9                	jmp    c000cace <Device::wakeAll()+0x14>
c000cae5:	83 c4 08             	add    esp,0x8
c000cae8:	5b                   	pop    ebx
c000cae9:	c3                   	ret    

c000caea <Device::detectAll()>:
c000caea:	53                   	push   ebx
c000caeb:	83 ec 14             	sub    esp,0x14
c000caee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000caf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caf4:	53                   	push   ebx
c000caf5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000caf8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cafe:	83 c4 10             	add    esp,0x10
c000cb01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb04:	74 0f                	je     c000cb15 <Device::detectAll()+0x2b>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb0c:	e8 d9 ff ff ff       	call   c000caea <Device::detectAll()>
c000cb11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb13:	eb e9                	jmp    c000cafe <Device::detectAll()+0x14>
c000cb15:	83 c4 08             	add    esp,0x8
c000cb18:	5b                   	pop    ebx
c000cb19:	c3                   	ret    

c000cb1a <Device::disableLegacyAll()>:
c000cb1a:	c3                   	ret    
c000cb1b:	90                   	nop

c000cb1c <Device::loadDriversForAll()>:
c000cb1c:	c3                   	ret    
c000cb1d:	90                   	nop

c000cb1e <Device::closeAll()>:
c000cb1e:	53                   	push   ebx
c000cb1f:	83 ec 08             	sub    esp,0x8
c000cb22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb26:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb28:	6a 00                	push   0x0
c000cb2a:	6a 00                	push   0x0
c000cb2c:	6a 00                	push   0x0
c000cb2e:	53                   	push   ebx
c000cb2f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb32:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb38:	83 c4 10             	add    esp,0x10
c000cb3b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb3e:	74 0f                	je     c000cb4f <Device::closeAll()+0x31>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb46:	e8 d3 ff ff ff       	call   c000cb1e <Device::closeAll()>
c000cb4b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb4d:	eb e9                	jmp    c000cb38 <Device::closeAll()+0x1a>
c000cb4f:	83 c4 08             	add    esp,0x8
c000cb52:	5b                   	pop    ebx
c000cb53:	c3                   	ret    

c000cb54 <Device::powerSavingAll(PowerSavingLevel)>:
c000cb54:	56                   	push   esi
c000cb55:	53                   	push   ebx
c000cb56:	83 ec 0c             	sub    esp,0xc
c000cb59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb5d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb61:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb63:	56                   	push   esi
c000cb64:	53                   	push   ebx
c000cb65:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb68:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb6e:	83 c4 10             	add    esp,0x10
c000cb71:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb74:	74 0f                	je     c000cb85 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb76:	52                   	push   edx
c000cb77:	52                   	push   edx
c000cb78:	56                   	push   esi
c000cb79:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb7c:	e8 d3 ff ff ff       	call   c000cb54 <Device::powerSavingAll(PowerSavingLevel)>
c000cb81:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb83:	eb e9                	jmp    c000cb6e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb85:	58                   	pop    eax
c000cb86:	5b                   	pop    ebx
c000cb87:	5e                   	pop    esi
c000cb88:	c3                   	ret    
c000cb89:	90                   	nop

c000cb8a <Device::setName(char const*)>:
c000cb8a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb92:	e9 b9 3a ff ff       	jmp    c0000650 <strcpy>
c000cb97:	90                   	nop

c000cb98 <Device::Device(char const*)>:
c000cb98:	83 ec 1c             	sub    esp,0x1c
c000cb9b:	ba 50 1c 02 c0       	mov    edx,0xc0021c50
c000cba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba4:	89 10                	mov    DWORD PTR [eax],edx
c000cba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbaa:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cbb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cbc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbd4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cbde:	83 ec 08             	sub    esp,0x8
c000cbe1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe9:	e8 9c ff ff ff       	call   c000cb8a <Device::setName(char const*)>
c000cbee:	83 c4 10             	add    esp,0x10
c000cbf1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cbf9:	83 ec 0c             	sub    esp,0xc
c000cbfc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc00:	e8 2e af ff ff       	call   c0007b33 <malloc>
c000cc05:	83 c4 10             	add    esp,0x10
c000cc08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc15:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cc19:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cc1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc23:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc29:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc33:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc44:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc4f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc5a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc68:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc76:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc84:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc8e:	90                   	nop
c000cc8f:	83 c4 1c             	add    esp,0x1c
c000cc92:	c3                   	ret    
c000cc93:	90                   	nop

c000cc94 <Device::getName()>:
c000cc94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc98:	05 d0 00 00 00       	add    eax,0xd0
c000cc9d:	c3                   	ret    

c000cc9e <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc9e:	83 ec 0c             	sub    esp,0xc
c000cca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cca5:	83 ec 08             	sub    esp,0x8
c000cca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccac:	50                   	push   eax
c000ccad:	e8 e6 fe ff ff       	call   c000cb98 <Device::Device(char const*)>
c000ccb2:	83 c4 10             	add    esp,0x10
c000ccb5:	ba 7c 1c 02 c0       	mov    edx,0xc0021c7c
c000ccba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccbe:	89 10                	mov    DWORD PTR [eax],edx
c000ccc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccc4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ccce:	90                   	nop
c000cccf:	83 c4 0c             	add    esp,0xc
c000ccd2:	c3                   	ret    
c000ccd3:	90                   	nop

c000ccd4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ccd4:	57                   	push   edi
c000ccd5:	56                   	push   esi
c000ccd6:	53                   	push   ebx
c000ccd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccdb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ccdf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cce3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cce9:	75 0c                	jne    c000ccf7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cceb:	52                   	push   edx
c000ccec:	52                   	push   edx
c000cced:	53                   	push   ebx
c000ccee:	56                   	push   esi
c000ccef:	e8 ee 2f 01 00       	call   c001fce2 <LinkedList<Device>::addElement(Device*)>
c000ccf4:	83 c4 10             	add    esp,0x10
c000ccf7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ccfd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cd00:	74 12                	je     c000cd14 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cd02:	50                   	push   eax
c000cd03:	57                   	push   edi
c000cd04:	56                   	push   esi
c000cd05:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cd08:	e8 c7 ff ff ff       	call   c000ccd4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd0d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cd0f:	83 c4 10             	add    esp,0x10
c000cd12:	eb e9                	jmp    c000ccfd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cd14:	5b                   	pop    ebx
c000cd15:	5e                   	pop    esi
c000cd16:	5f                   	pop    edi
c000cd17:	c3                   	ret    

c000cd18 <getDevicesOfType(DeviceType)>:
c000cd18:	53                   	push   ebx
c000cd19:	83 ec 14             	sub    esp,0x14
c000cd1c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd20:	53                   	push   ebx
c000cd21:	e8 98 30 01 00       	call   c001fdbe <LinkedList<Device>::LinkedList()>
c000cd26:	83 c4 0c             	add    esp,0xc
c000cd29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd2d:	53                   	push   ebx
c000cd2e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd34:	e8 9b ff ff ff       	call   c000ccd4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd39:	83 c4 18             	add    esp,0x18
c000cd3c:	89 d8                	mov    eax,ebx
c000cd3e:	5b                   	pop    ebx
c000cd3f:	c2 04 00             	ret    0x4
c000cd42:	66 90                	xchg   ax,ax

c000cd44 <HardDiskController::HardDiskController(char const*)>:
c000cd44:	83 ec 0c             	sub    esp,0xc
c000cd47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4b:	83 ec 08             	sub    esp,0x8
c000cd4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd52:	50                   	push   eax
c000cd53:	e8 40 fe ff ff       	call   c000cb98 <Device::Device(char const*)>
c000cd58:	83 c4 10             	add    esp,0x10
c000cd5b:	ba a8 1c 02 c0       	mov    edx,0xc0021ca8
c000cd60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd64:	89 10                	mov    DWORD PTR [eax],edx
c000cd66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd6a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd74:	90                   	nop
c000cd75:	83 c4 0c             	add    esp,0xc
c000cd78:	c3                   	ret    
c000cd79:	90                   	nop
c000cd7a:	66 90                	xchg   ax,ax

c000cd7c <HardDiskController::~HardDiskController()>:
c000cd7c:	83 ec 0c             	sub    esp,0xc
c000cd7f:	ba a8 1c 02 c0       	mov    edx,0xc0021ca8
c000cd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd88:	89 10                	mov    DWORD PTR [eax],edx
c000cd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd8e:	83 ec 0c             	sub    esp,0xc
c000cd91:	50                   	push   eax
c000cd92:	e8 6b fb ff ff       	call   c000c902 <Device::~Device()>
c000cd97:	83 c4 10             	add    esp,0x10
c000cd9a:	90                   	nop
c000cd9b:	83 c4 0c             	add    esp,0xc
c000cd9e:	c3                   	ret    
c000cd9f:	90                   	nop

c000cda0 <HardDiskController::~HardDiskController()>:
c000cda0:	83 ec 0c             	sub    esp,0xc
c000cda3:	83 ec 0c             	sub    esp,0xc
c000cda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdaa:	e8 cd ff ff ff       	call   c000cd7c <HardDiskController::~HardDiskController()>
c000cdaf:	83 c4 10             	add    esp,0x10
c000cdb2:	83 ec 08             	sub    esp,0x8
c000cdb5:	68 58 01 00 00       	push   0x158
c000cdba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdbe:	e8 a9 da ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000cdc3:	83 c4 10             	add    esp,0x10
c000cdc6:	83 c4 0c             	add    esp,0xc
c000cdc9:	c3                   	ret    

c000cdca <PhysicalDisk::eject()>:
c000cdca:	83 c8 ff             	or     eax,0xffffffff
c000cdcd:	c3                   	ret    

c000cdce <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cdce:	83 ec 0c             	sub    esp,0xc
c000cdd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd5:	83 ec 08             	sub    esp,0x8
c000cdd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddc:	50                   	push   eax
c000cddd:	e8 b6 fd ff ff       	call   c000cb98 <Device::Device(char const*)>
c000cde2:	83 c4 10             	add    esp,0x10
c000cde5:	ba d4 1c 02 c0       	mov    edx,0xc0021cd4
c000cdea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdee:	89 10                	mov    DWORD PTR [eax],edx
c000cdf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cdfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdff:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ce06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce0a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ce14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce18:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce1c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ce22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce26:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce30:	90                   	nop
c000ce31:	83 c4 0c             	add    esp,0xc
c000ce34:	c3                   	ret    
c000ce35:	90                   	nop

c000ce36 <PhysicalDisk::startCache()>:
c000ce36:	56                   	push   esi
c000ce37:	53                   	push   ebx
c000ce38:	83 ec 10             	sub    esp,0x10
c000ce3b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce3f:	6a 44                	push   0x44
c000ce41:	e8 ed ac ff ff       	call   c0007b33 <malloc>
c000ce46:	89 c6                	mov    esi,eax
c000ce48:	58                   	pop    eax
c000ce49:	5a                   	pop    edx
c000ce4a:	53                   	push   ebx
c000ce4b:	56                   	push   esi
c000ce4c:	e8 83 17 00 00       	call   c000e5d4 <VCache::VCache(PhysicalDisk*)>
c000ce51:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce57:	83 c4 14             	add    esp,0x14
c000ce5a:	5b                   	pop    ebx
c000ce5b:	5e                   	pop    esi
c000ce5c:	c3                   	ret    
c000ce5d:	90                   	nop

c000ce5e <PhysicalDisk::~PhysicalDisk()>:
c000ce5e:	83 ec 0c             	sub    esp,0xc
c000ce61:	ba d4 1c 02 c0       	mov    edx,0xc0021cd4
c000ce66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce6a:	89 10                	mov    DWORD PTR [eax],edx
c000ce6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce70:	83 ec 0c             	sub    esp,0xc
c000ce73:	50                   	push   eax
c000ce74:	e8 89 fa ff ff       	call   c000c902 <Device::~Device()>
c000ce79:	83 c4 10             	add    esp,0x10
c000ce7c:	90                   	nop
c000ce7d:	83 c4 0c             	add    esp,0xc
c000ce80:	c3                   	ret    
c000ce81:	90                   	nop

c000ce82 <PhysicalDisk::~PhysicalDisk()>:
c000ce82:	83 ec 0c             	sub    esp,0xc
c000ce85:	83 ec 0c             	sub    esp,0xc
c000ce88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce8c:	e8 cd ff ff ff       	call   c000ce5e <PhysicalDisk::~PhysicalDisk()>
c000ce91:	83 c4 10             	add    esp,0x10
c000ce94:	83 ec 08             	sub    esp,0x8
c000ce97:	68 6c 01 00 00       	push   0x16c
c000ce9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea0:	e8 c7 d9 ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000cea5:	83 c4 10             	add    esp,0x10
c000cea8:	83 c4 0c             	add    esp,0xc
c000ceab:	c3                   	ret    

c000ceac <int_handler>:
c000ceac:	55                   	push   ebp
c000cead:	57                   	push   edi
c000ceae:	56                   	push   esi
c000ceaf:	53                   	push   ebx
c000ceb0:	83 ec 0c             	sub    esp,0xc
c000ceb3:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ceba:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cebe:	74 0b                	je     c000cecb <int_handler+0x1f>
c000cec0:	fa                   	cli    
c000cec1:	f4                   	hlt    
c000cec2:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cec9:	75 f5                	jne    c000cec0 <int_handler+0x14>
c000cecb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cece:	8d 46 e0             	lea    eax,[esi-0x20]
c000ced1:	83 f8 17             	cmp    eax,0x17
c000ced4:	76 40                	jbe    c000cf16 <int_handler+0x6a>
c000ced6:	c1 e6 04             	shl    esi,0x4
c000ced9:	31 db                	xor    ebx,ebx
c000cedb:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000cee1:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cee7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ceeb:	85 c0                	test   eax,eax
c000ceed:	74 13                	je     c000cf02 <int_handler+0x56>
c000ceef:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cef3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cef6:	74 2c                	je     c000cf24 <int_handler+0x78>
c000cef8:	83 ec 08             	sub    esp,0x8
c000cefb:	52                   	push   edx
c000cefc:	57                   	push   edi
c000cefd:	ff d0                	call   eax
c000ceff:	83 c4 10             	add    esp,0x10
c000cf02:	83 c3 01             	add    ebx,0x1
c000cf05:	83 fb 04             	cmp    ebx,0x4
c000cf08:	75 dd                	jne    c000cee7 <int_handler+0x3b>
c000cf0a:	83 c4 0c             	add    esp,0xc
c000cf0d:	31 c0                	xor    eax,eax
c000cf0f:	5b                   	pop    ebx
c000cf10:	31 d2                	xor    edx,edx
c000cf12:	5e                   	pop    esi
c000cf13:	5f                   	pop    edi
c000cf14:	5d                   	pop    ebp
c000cf15:	c3                   	ret    
c000cf16:	83 ec 0c             	sub    esp,0xc
c000cf19:	50                   	push   eax
c000cf1a:	e8 ff b4 00 00       	call   c001841e <HalEndOfInterrupt(int)>
c000cf1f:	83 c4 10             	add    esp,0x10
c000cf22:	eb b2                	jmp    c000ced6 <int_handler+0x2a>
c000cf24:	83 ec 08             	sub    esp,0x8
c000cf27:	52                   	push   edx
c000cf28:	57                   	push   edi
c000cf29:	ff d0                	call   eax
c000cf2b:	83 c4 10             	add    esp,0x10
c000cf2e:	83 c4 0c             	add    esp,0xc
c000cf31:	5b                   	pop    ebx
c000cf32:	5e                   	pop    esi
c000cf33:	5f                   	pop    edi
c000cf34:	5d                   	pop    ebp
c000cf35:	c3                   	ret    

c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf36:	56                   	push   esi
c000cf37:	31 c0                	xor    eax,eax
c000cf39:	53                   	push   ebx
c000cf3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf42:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf46:	89 ca                	mov    edx,ecx
c000cf48:	c1 e2 04             	shl    edx,0x4
c000cf4b:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf53:	74 17                	je     c000cf6c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf55:	83 c0 01             	add    eax,0x1
c000cf58:	83 f8 04             	cmp    eax,0x4
c000cf5b:	75 ee                	jne    c000cf4b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf5d:	c7 44 24 0c 04 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021d04
c000cf65:	5b                   	pop    ebx
c000cf66:	5e                   	pop    esi
c000cf67:	e9 d3 46 00 00       	jmp    c001163f <KePanic(char const*)>
c000cf6c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf6f:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf76:	5b                   	pop    ebx
c000cf77:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf7e:	5e                   	pop    esi
c000cf7f:	c3                   	ret    

c000cf80 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf80:	55                   	push   ebp
c000cf81:	57                   	push   edi
c000cf82:	56                   	push   esi
c000cf83:	53                   	push   ebx
c000cf84:	83 ec 0c             	sub    esp,0xc
c000cf87:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf8d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cf91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf95:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf9c:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cf9f:	74 57                	je     c000cff8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cfa1:	84 c0                	test   al,al
c000cfa3:	89 c7                	mov    edi,eax
c000cfa5:	74 1d                	je     c000cfc4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cfa7:	83 fe 0f             	cmp    esi,0xf
c000cfaa:	0f 8f d9 00 00 00    	jg     c000d089 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cfb0:	0f b6 b6 a8 38 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc758]
c000cfb7:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cfbf:	d1 ef                	shr    edi,1
c000cfc1:	83 e7 01             	and    edi,0x1
c000cfc4:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfc9:	83 ec 08             	sub    esp,0x8
c000cfcc:	31 db                	xor    ebx,ebx
c000cfce:	50                   	push   eax
c000cfcf:	68 11 1d 02 c0       	push   0xc0021d11
c000cfd4:	e8 91 d9 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000cfd9:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfde:	83 c4 10             	add    esp,0x10
c000cfe1:	85 c0                	test   eax,eax
c000cfe3:	7f 59                	jg     c000d03e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cfe5:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cfe8:	83 ec 0c             	sub    esp,0xc
c000cfeb:	68 28 1d 02 c0       	push   0xc0021d28
c000cff0:	e8 4a 46 00 00       	call   c001163f <KePanic(char const*)>
c000cff5:	83 c4 10             	add    esp,0x10
c000cff8:	89 e8                	mov    eax,ebp
c000cffa:	31 d2                	xor    edx,edx
c000cffc:	c1 e0 04             	shl    eax,0x4
c000cfff:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000d006:	85 c9                	test   ecx,ecx
c000d008:	0f 84 92 00 00 00    	je     c000d0a0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000d00e:	83 c2 01             	add    edx,0x1
c000d011:	83 fa 04             	cmp    edx,0x4
c000d014:	75 e9                	jne    c000cfff <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000d016:	83 ec 0c             	sub    esp,0xc
c000d019:	68 7c 1d 02 c0       	push   0xc0021d7c
c000d01e:	e8 1c 46 00 00       	call   c001163f <KePanic(char const*)>
c000d023:	83 c4 10             	add    esp,0x10
c000d026:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d02b:	83 c4 0c             	add    esp,0xc
c000d02e:	5b                   	pop    ebx
c000d02f:	5e                   	pop    esi
c000d030:	5f                   	pop    edi
c000d031:	5d                   	pop    ebp
c000d032:	c3                   	ret    
c000d033:	83 c3 01             	add    ebx,0x1
c000d036:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d03c:	7e a7                	jle    c000cfe5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000d03e:	8b 2c 9d e0 d0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f20]
c000d045:	83 ec 08             	sub    esp,0x8
c000d048:	56                   	push   esi
c000d049:	55                   	push   ebp
c000d04a:	e8 b9 1b 01 00       	call   c001ec08 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d04f:	83 c4 10             	add    esp,0x10
c000d052:	84 c0                	test   al,al
c000d054:	74 dd                	je     c000d033 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000d056:	89 f8                	mov    eax,edi
c000d058:	83 ec 04             	sub    esp,0x4
c000d05b:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d062:	8d 6e 20             	lea    ebp,[esi+0x20]
c000d065:	0f b6 f8             	movzx  edi,al
c000d068:	57                   	push   edi
c000d069:	89 e8                	mov    eax,ebp
c000d06b:	6a 00                	push   0x0
c000d06d:	0f b6 c0             	movzx  eax,al
c000d070:	50                   	push   eax
c000d071:	89 f0                	mov    eax,esi
c000d073:	6a 00                	push   0x0
c000d075:	0f b6 c0             	movzx  eax,al
c000d078:	6a 00                	push   0x0
c000d07a:	50                   	push   eax
c000d07b:	53                   	push   ebx
c000d07c:	e8 f3 1c 01 00       	call   c001ed74 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d081:	83 c4 20             	add    esp,0x20
c000d084:	e9 6f ff ff ff       	jmp    c000cff8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d089:	83 ec 0c             	sub    esp,0xc
c000d08c:	31 ff                	xor    edi,edi
c000d08e:	68 44 1d 02 c0       	push   0xc0021d44
c000d093:	e8 a7 45 00 00       	call   c001163f <KePanic(char const*)>
c000d098:	83 c4 10             	add    esp,0x10
c000d09b:	e9 24 ff ff ff       	jmp    c000cfc4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000d0a0:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000d0a3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d0a7:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d0ae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d0b2:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d0b9:	83 c4 0c             	add    esp,0xc
c000d0bc:	89 f0                	mov    eax,esi
c000d0be:	5b                   	pop    ebx
c000d0bf:	5e                   	pop    esi
c000d0c0:	5f                   	pop    edi
c000d0c1:	5d                   	pop    ebp
c000d0c2:	c3                   	ret    

c000d0c3 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d0c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0cb:	c1 e0 04             	shl    eax,0x4
c000d0ce:	8d 50 10             	lea    edx,[eax+0x10]
c000d0d1:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d0d7:	74 08                	je     c000d0e1 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d0d9:	83 c0 04             	add    eax,0x4
c000d0dc:	39 d0                	cmp    eax,edx
c000d0de:	75 f1                	jne    c000d0d1 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d0e0:	c3                   	ret    
c000d0e1:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0eb:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0f5:	eb e2                	jmp    c000d0d9 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d0f7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d0f7:	56                   	push   esi
c000d0f8:	53                   	push   ebx
c000d0f9:	83 ec 04             	sub    esp,0x4
c000d0fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d101:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d105:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d109:	74 0e                	je     c000d119 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d10b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d110:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d117:	75 34                	jne    c000d14d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000d119:	8d 43 20             	lea    eax,[ebx+0x20]
c000d11c:	c1 e0 04             	shl    eax,0x4
c000d11f:	8d 50 10             	lea    edx,[eax+0x10]
c000d122:	39 b0 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],esi
c000d128:	74 0d                	je     c000d137 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000d12a:	83 c0 04             	add    eax,0x4
c000d12d:	39 d0                	cmp    eax,edx
c000d12f:	75 f1                	jne    c000d122 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000d131:	83 c4 04             	add    esp,0x4
c000d134:	5b                   	pop    ebx
c000d135:	5e                   	pop    esi
c000d136:	c3                   	ret    
c000d137:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d141:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d14b:	eb dd                	jmp    c000d12a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000d14d:	83 fb 0f             	cmp    ebx,0xf
c000d150:	7f 09                	jg     c000d15b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000d152:	0f b6 9b a8 38 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc758]
c000d159:	eb be                	jmp    c000d119 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d15b:	83 ec 0c             	sub    esp,0xc
c000d15e:	68 35 1d 02 c0       	push   0xc0021d35
c000d163:	e8 d7 44 00 00       	call   c001163f <KePanic(char const*)>
c000d168:	83 c4 10             	add    esp,0x10
c000d16b:	eb ac                	jmp    c000d119 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000d16d <setupINTS()>:
c000d16d:	31 c0                	xor    eax,eax
c000d16f:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d179:	83 c0 10             	add    eax,0x10
c000d17c:	c7 80 10 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bf0],0x0
c000d186:	c7 80 14 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bec],0x0
c000d190:	c7 80 14 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bec],0x0
c000d19a:	c7 80 18 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be8],0x0
c000d1a4:	c7 80 18 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be8],0x0
c000d1ae:	c7 80 1c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be4],0x0
c000d1b8:	c7 80 1c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be4],0x0
c000d1c2:	3d 00 10 00 00       	cmp    eax,0x1000
c000d1c7:	75 a6                	jne    c000d16f <setupINTS()+0x2>
c000d1c9:	c3                   	ret    

c000d1ca <convertLegacyIRQNumber(int)>:
c000d1ca:	83 ec 0c             	sub    esp,0xc
c000d1cd:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d1d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1d7:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d1de:	74 0c                	je     c000d1ec <convertLegacyIRQNumber(int)+0x22>
c000d1e0:	83 f8 0f             	cmp    eax,0xf
c000d1e3:	7f 0b                	jg     c000d1f0 <convertLegacyIRQNumber(int)+0x26>
c000d1e5:	0f b6 80 a8 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc758]
c000d1ec:	83 c4 0c             	add    esp,0xc
c000d1ef:	c3                   	ret    
c000d1f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1f4:	83 ec 0c             	sub    esp,0xc
c000d1f7:	68 44 1d 02 c0       	push   0xc0021d44
c000d1fc:	e8 3e 44 00 00       	call   c001163f <KePanic(char const*)>
c000d201:	83 c4 10             	add    esp,0x10
c000d204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d208:	83 c4 0c             	add    esp,0xc
c000d20b:	c3                   	ret    

c000d20c <startGUI(void*)>:
c000d20c:	55                   	push   ebp
c000d20d:	89 e5                	mov    ebp,esp
c000d20f:	53                   	push   ebx
c000d210:	83 ec 04             	sub    esp,0x4
c000d213:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d218:	83 e8 01             	sub    eax,0x1
c000d21b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d220:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d225:	85 c0                	test   eax,eax
c000d227:	75 01                	jne    c000d22a <startGUI(void*)+0x1e>
c000d229:	fb                   	sti    
c000d22a:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d230:	83 ec 08             	sub    esp,0x8
c000d233:	6a 01                	push   0x1
c000d235:	68 a1 1d 02 c0       	push   0xc0021da1
c000d23a:	e8 c4 84 00 00       	call   c0015703 <Thr::loadDLL(char const*, bool)>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	83 ec 08             	sub    esp,0x8
c000d245:	53                   	push   ebx
c000d246:	50                   	push   eax
c000d247:	e8 f7 86 00 00       	call   c0015943 <Thr::executeDLL(unsigned long, void*)>
c000d24c:	83 c4 10             	add    esp,0x10
c000d24f:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d255:	83 ec 08             	sub    esp,0x8
c000d258:	6a 01                	push   0x1
c000d25a:	68 bb 1d 02 c0       	push   0xc0021dbb
c000d25f:	e8 9f 84 00 00       	call   c0015703 <Thr::loadDLL(char const*, bool)>
c000d264:	83 c4 10             	add    esp,0x10
c000d267:	83 ec 08             	sub    esp,0x8
c000d26a:	53                   	push   ebx
c000d26b:	50                   	push   eax
c000d26c:	e8 d2 86 00 00       	call   c0015943 <Thr::executeDLL(unsigned long, void*)>
c000d271:	83 c4 10             	add    esp,0x10
c000d274:	90                   	nop
c000d275:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d278:	c9                   	leave  
c000d279:	c3                   	ret    

c000d27a <startGUIVESA(void*)>:
c000d27a:	55                   	push   ebp
c000d27b:	89 e5                	mov    ebp,esp
c000d27d:	53                   	push   ebx
c000d27e:	83 ec 04             	sub    esp,0x4
c000d281:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d286:	83 e8 01             	sub    eax,0x1
c000d289:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d28e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d293:	85 c0                	test   eax,eax
c000d295:	75 01                	jne    c000d298 <startGUIVESA(void*)+0x1e>
c000d297:	fb                   	sti    
c000d298:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d29e:	83 ec 08             	sub    esp,0x8
c000d2a1:	6a 01                	push   0x1
c000d2a3:	68 d9 1d 02 c0       	push   0xc0021dd9
c000d2a8:	e8 56 84 00 00       	call   c0015703 <Thr::loadDLL(char const*, bool)>
c000d2ad:	83 c4 10             	add    esp,0x10
c000d2b0:	83 ec 08             	sub    esp,0x8
c000d2b3:	53                   	push   ebx
c000d2b4:	50                   	push   eax
c000d2b5:	e8 89 86 00 00       	call   c0015943 <Thr::executeDLL(unsigned long, void*)>
c000d2ba:	83 c4 10             	add    esp,0x10
c000d2bd:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2c3:	83 ec 08             	sub    esp,0x8
c000d2c6:	6a 01                	push   0x1
c000d2c8:	68 bb 1d 02 c0       	push   0xc0021dbb
c000d2cd:	e8 31 84 00 00       	call   c0015703 <Thr::loadDLL(char const*, bool)>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	83 ec 08             	sub    esp,0x8
c000d2d8:	53                   	push   ebx
c000d2d9:	50                   	push   eax
c000d2da:	e8 64 86 00 00       	call   c0015943 <Thr::executeDLL(unsigned long, void*)>
c000d2df:	83 c4 10             	add    esp,0x10
c000d2e2:	90                   	nop
c000d2e3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2e6:	c9                   	leave  
c000d2e7:	c3                   	ret    

c000d2e8 <sendKeyToTerminal(unsigned char)>:
c000d2e8:	55                   	push   ebp
c000d2e9:	89 e5                	mov    ebp,esp
c000d2eb:	83 ec 28             	sub    esp,0x28
c000d2ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2f1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d2f4:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d2f9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d2fd:	83 ec 08             	sub    esp,0x8
c000d300:	52                   	push   edx
c000d301:	50                   	push   eax
c000d302:	e8 15 bb ff ff       	call   c0008e1c <VgaText::receiveKey(unsigned char)>
c000d307:	83 c4 10             	add    esp,0x10
c000d30a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d30e:	83 f8 0a             	cmp    eax,0xa
c000d311:	74 16                	je     c000d329 <sendKeyToTerminal(unsigned char)+0x41>
c000d313:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d317:	83 f8 03             	cmp    eax,0x3
c000d31a:	74 0d                	je     c000d329 <sendKeyToTerminal(unsigned char)+0x41>
c000d31c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d320:	83 f8 1c             	cmp    eax,0x1c
c000d323:	0f 85 97 00 00 00    	jne    c000d3c0 <sendKeyToTerminal(unsigned char)+0xd8>
c000d329:	fa                   	cli    
c000d32a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d32f:	83 c0 01             	add    eax,0x1
c000d332:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d337:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d33c:	83 c0 01             	add    eax,0x1
c000d33f:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d344:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d349:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d34c:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d356:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d35a:	74 1f                	je     c000d37b <sendKeyToTerminal(unsigned char)+0x93>
c000d35c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d35f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d362:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d365:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d368:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d36b:	83 ec 0c             	sub    esp,0xc
c000d36e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d371:	e8 ee 92 00 00       	call   c0016664 <unblockTask(ThreadControlBlock*)>
c000d376:	83 c4 10             	add    esp,0x10
c000d379:	eb db                	jmp    c000d356 <sendKeyToTerminal(unsigned char)+0x6e>
c000d37b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d380:	83 e8 01             	sub    eax,0x1
c000d383:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d388:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d38d:	85 c0                	test   eax,eax
c000d38f:	75 18                	jne    c000d3a9 <sendKeyToTerminal(unsigned char)+0xc1>
c000d391:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d396:	85 c0                	test   eax,eax
c000d398:	74 0f                	je     c000d3a9 <sendKeyToTerminal(unsigned char)+0xc1>
c000d39a:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d3a4:	e8 c3 8d 00 00       	call   c001616c <schedule()>
c000d3a9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3ae:	83 e8 01             	sub    eax,0x1
c000d3b1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d3b6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3bb:	85 c0                	test   eax,eax
c000d3bd:	75 01                	jne    c000d3c0 <sendKeyToTerminal(unsigned char)+0xd8>
c000d3bf:	fb                   	sti    
c000d3c0:	90                   	nop
c000d3c1:	c9                   	leave  
c000d3c2:	c3                   	ret    

c000d3c3 <sendKeyboardToken(KeyboardToken)>:
c000d3c3:	55                   	push   ebp
c000d3c4:	89 e5                	mov    ebp,esp
c000d3c6:	83 ec 18             	sub    esp,0x18
c000d3c9:	e8 c1 42 00 00       	call   c001168f <KeUserIOReceived()>
c000d3ce:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d3d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d4:	0f b7 c0             	movzx  eax,ax
c000d3d7:	83 f2 01             	xor    edx,0x1
c000d3da:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d3e0:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d3e5:	85 c0                	test   eax,eax
c000d3e7:	74 24                	je     c000d40d <sendKeyboardToken(KeyboardToken)+0x4a>
c000d3e9:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d3ef:	83 ec 04             	sub    esp,0x4
c000d3f2:	68 40 b4 02 c0       	push   0xc002b440
c000d3f7:	83 ec 08             	sub    esp,0x8
c000d3fa:	89 e0                	mov    eax,esp
c000d3fc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d3ff:	89 08                	mov    DWORD PTR [eax],ecx
c000d401:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d404:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d408:	ff d2                	call   edx
c000d40a:	83 c4 10             	add    esp,0x10
c000d40d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d411:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d414:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d419:	0f b6 d2             	movzx  edx,dl
c000d41c:	0f b6 c0             	movzx  eax,al
c000d41f:	39 c2                	cmp    edx,eax
c000d421:	74 1c                	je     c000d43f <sendKeyboardToken(KeyboardToken)+0x7c>
c000d423:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d426:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d42b:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d430:	0f b6 c0             	movzx  eax,al
c000d433:	83 ec 0c             	sub    esp,0xc
c000d436:	50                   	push   eax
c000d437:	e8 3c b1 ff ff       	call   c0008578 <setTerminalScrollLock(bool)>
c000d43c:	83 c4 10             	add    esp,0x10
c000d43f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d442:	0f b6 c0             	movzx  eax,al
c000d445:	85 c0                	test   eax,eax
c000d447:	0f 84 da 00 00 00    	je     c000d527 <sendKeyboardToken(KeyboardToken)+0x164>
c000d44d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d450:	0f b7 c0             	movzx  eax,ax
c000d453:	3d 18 03 00 00       	cmp    eax,0x318
c000d458:	75 06                	jne    c000d460 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d45a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d463:	0f b7 c0             	movzx  eax,ax
c000d466:	3d 19 03 00 00       	cmp    eax,0x319
c000d46b:	75 06                	jne    c000d473 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d46d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d476:	0f b7 c0             	movzx  eax,ax
c000d479:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d47e:	75 06                	jne    c000d486 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d480:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d489:	0f b7 c0             	movzx  eax,ax
c000d48c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d491:	75 06                	jne    c000d499 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d493:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d49c:	0f b7 c0             	movzx  eax,ax
c000d49f:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d4a4:	75 06                	jne    c000d4ac <sendKeyboardToken(KeyboardToken)+0xe9>
c000d4a6:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d4ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4af:	0f b7 c0             	movzx  eax,ax
c000d4b2:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d4b7:	75 06                	jne    c000d4bf <sendKeyboardToken(KeyboardToken)+0xfc>
c000d4b9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d4bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c2:	0f b7 c0             	movzx  eax,ax
c000d4c5:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d4ca:	75 06                	jne    c000d4d2 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d4cc:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d4d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d5:	0f b7 c0             	movzx  eax,ax
c000d4d8:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d4dd:	75 06                	jne    c000d4e5 <sendKeyboardToken(KeyboardToken)+0x122>
c000d4df:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d4e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e8:	0f b7 c0             	movzx  eax,ax
c000d4eb:	3d 20 03 00 00       	cmp    eax,0x320
c000d4f0:	75 06                	jne    c000d4f8 <sendKeyboardToken(KeyboardToken)+0x135>
c000d4f2:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d4f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4fb:	0f b7 c0             	movzx  eax,ax
c000d4fe:	3d 21 03 00 00       	cmp    eax,0x321
c000d503:	75 06                	jne    c000d50b <sendKeyboardToken(KeyboardToken)+0x148>
c000d505:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d50b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d50e:	0f b7 c0             	movzx  eax,ax
c000d511:	3d 22 03 00 00       	cmp    eax,0x322
c000d516:	0f 85 f1 00 00 00    	jne    c000d60d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d51c:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d522:	e9 e6 00 00 00       	jmp    c000d60d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d52a:	0f b7 c0             	movzx  eax,ax
c000d52d:	3d 18 03 00 00       	cmp    eax,0x318
c000d532:	75 0a                	jne    c000d53e <sendKeyboardToken(KeyboardToken)+0x17b>
c000d534:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d53a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d53e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d541:	0f b7 c0             	movzx  eax,ax
c000d544:	3d 19 03 00 00       	cmp    eax,0x319
c000d549:	75 0a                	jne    c000d555 <sendKeyboardToken(KeyboardToken)+0x192>
c000d54b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d551:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d558:	0f b7 c0             	movzx  eax,ax
c000d55b:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d560:	75 0a                	jne    c000d56c <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d562:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d568:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d56c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d56f:	0f b7 c0             	movzx  eax,ax
c000d572:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d577:	75 0a                	jne    c000d583 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d579:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d57f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d586:	0f b7 c0             	movzx  eax,ax
c000d589:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d58e:	75 0a                	jne    c000d59a <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d590:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d596:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d59a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d59d:	0f b7 c0             	movzx  eax,ax
c000d5a0:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d5a5:	75 0a                	jne    c000d5b1 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d5a7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d5ad:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b4:	0f b7 c0             	movzx  eax,ax
c000d5b7:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d5bc:	75 0a                	jne    c000d5c8 <sendKeyboardToken(KeyboardToken)+0x205>
c000d5be:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d5c4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5cb:	0f b7 c0             	movzx  eax,ax
c000d5ce:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d5d3:	75 0a                	jne    c000d5df <sendKeyboardToken(KeyboardToken)+0x21c>
c000d5d5:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d5db:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5e2:	0f b7 c0             	movzx  eax,ax
c000d5e5:	3d 20 03 00 00       	cmp    eax,0x320
c000d5ea:	75 0a                	jne    c000d5f6 <sendKeyboardToken(KeyboardToken)+0x233>
c000d5ec:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d5f2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5f9:	0f b7 c0             	movzx  eax,ax
c000d5fc:	3d 21 03 00 00       	cmp    eax,0x321
c000d601:	75 0a                	jne    c000d60d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d603:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d609:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d60d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d610:	0f b7 c0             	movzx  eax,ax
c000d613:	3d 00 02 00 00       	cmp    eax,0x200
c000d618:	75 2f                	jne    c000d649 <sendKeyboardToken(KeyboardToken)+0x286>
c000d61a:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d61f:	83 f0 01             	xor    eax,0x1
c000d622:	0f b6 c0             	movzx  eax,al
c000d625:	85 c0                	test   eax,eax
c000d627:	74 20                	je     c000d649 <sendKeyboardToken(KeyboardToken)+0x286>
c000d629:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d62e:	6a 01                	push   0x1
c000d630:	6a 00                	push   0x0
c000d632:	68 0c d2 00 c0       	push   0xc000d20c
c000d637:	50                   	push   eax
c000d638:	e8 e3 88 00 00       	call   c0015f20 <Process::createThread(void (*)(void*), void*, int)>
c000d63d:	83 c4 10             	add    esp,0x10
c000d640:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d647:	eb 3a                	jmp    c000d683 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d64c:	0f b7 c0             	movzx  eax,ax
c000d64f:	3d 01 02 00 00       	cmp    eax,0x201
c000d654:	75 2d                	jne    c000d683 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d656:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d65b:	83 f0 01             	xor    eax,0x1
c000d65e:	0f b6 c0             	movzx  eax,al
c000d661:	85 c0                	test   eax,eax
c000d663:	74 1e                	je     c000d683 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d665:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d66a:	6a 01                	push   0x1
c000d66c:	6a 00                	push   0x0
c000d66e:	68 7a d2 00 c0       	push   0xc000d27a
c000d673:	50                   	push   eax
c000d674:	e8 a7 88 00 00       	call   c0015f20 <Process::createThread(void (*)(void*), void*, int)>
c000d679:	83 c4 10             	add    esp,0x10
c000d67c:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d686:	0f b7 c0             	movzx  eax,ax
c000d689:	3d 25 03 00 00       	cmp    eax,0x325
c000d68e:	75 06                	jne    c000d696 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d690:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d699:	0f b7 c0             	movzx  eax,ax
c000d69c:	3d 24 03 00 00       	cmp    eax,0x324
c000d6a1:	75 06                	jne    c000d6a9 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d6a3:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d6a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ac:	0f b7 c0             	movzx  eax,ax
c000d6af:	3d 23 03 00 00       	cmp    eax,0x323
c000d6b4:	75 06                	jne    c000d6bc <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d6b6:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d6bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6bf:	0f b7 c0             	movzx  eax,ax
c000d6c2:	3d 26 03 00 00       	cmp    eax,0x326
c000d6c7:	75 06                	jne    c000d6cf <sendKeyboardToken(KeyboardToken)+0x30c>
c000d6c9:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d6cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d2:	0f b7 c0             	movzx  eax,ax
c000d6d5:	3d 27 03 00 00       	cmp    eax,0x327
c000d6da:	75 06                	jne    c000d6e2 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d6dc:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d6e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e5:	0f b7 c0             	movzx  eax,ax
c000d6e8:	3d 22 03 00 00       	cmp    eax,0x322
c000d6ed:	75 06                	jne    c000d6f5 <sendKeyboardToken(KeyboardToken)+0x332>
c000d6ef:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d6f5:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d6f9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d6fc:	83 f0 01             	xor    eax,0x1
c000d6ff:	0f b6 c0             	movzx  eax,al
c000d702:	85 c0                	test   eax,eax
c000d704:	74 7c                	je     c000d782 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d706:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d70b:	0f b6 c0             	movzx  eax,al
c000d70e:	85 c0                	test   eax,eax
c000d710:	74 43                	je     c000d755 <sendKeyboardToken(KeyboardToken)+0x392>
c000d712:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d716:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d71a:	85 c0                	test   eax,eax
c000d71c:	74 2b                	je     c000d749 <sendKeyboardToken(KeyboardToken)+0x386>
c000d71e:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d724:	89 d0                	mov    eax,edx
c000d726:	c1 e0 02             	shl    eax,0x2
c000d729:	01 d0                	add    eax,edx
c000d72b:	d1 e0                	shl    eax,1
c000d72d:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d735:	0f b7 c0             	movzx  eax,ax
c000d738:	8d 50 d0             	lea    edx,[eax-0x30]
c000d73b:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d740:	01 d0                	add    eax,edx
c000d742:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d747:	eb 71                	jmp    c000d7ba <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d749:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d753:	eb 65                	jmp    c000d7ba <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d755:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d75a:	85 c0                	test   eax,eax
c000d75c:	74 18                	je     c000d776 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d75e:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d763:	0f b6 c0             	movzx  eax,al
c000d766:	83 ec 0c             	sub    esp,0xc
c000d769:	50                   	push   eax
c000d76a:	e8 79 fb ff ff       	call   c000d2e8 <sendKeyToTerminal(unsigned char)>
c000d76f:	83 c4 10             	add    esp,0x10
c000d772:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d776:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d780:	eb 38                	jmp    c000d7ba <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d785:	0f b7 c0             	movzx  eax,ax
c000d788:	3d 01 01 00 00       	cmp    eax,0x101
c000d78d:	75 2b                	jne    c000d7ba <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d78f:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d794:	85 c0                	test   eax,eax
c000d796:	74 18                	je     c000d7b0 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d798:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d79d:	0f b6 c0             	movzx  eax,al
c000d7a0:	83 ec 0c             	sub    esp,0xc
c000d7a3:	50                   	push   eax
c000d7a4:	e8 3f fb ff ff       	call   c000d2e8 <sendKeyToTerminal(unsigned char)>
c000d7a9:	83 c4 10             	add    esp,0x10
c000d7ac:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7b0:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7ba:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7bd:	83 f0 01             	xor    eax,0x1
c000d7c0:	0f b6 c0             	movzx  eax,al
c000d7c3:	85 c0                	test   eax,eax
c000d7c5:	74 5a                	je     c000d821 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7c7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7ca:	83 f0 01             	xor    eax,0x1
c000d7cd:	0f b6 c0             	movzx  eax,al
c000d7d0:	85 c0                	test   eax,eax
c000d7d2:	74 4d                	je     c000d821 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7d4:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7d9:	83 f0 01             	xor    eax,0x1
c000d7dc:	0f b6 c0             	movzx  eax,al
c000d7df:	85 c0                	test   eax,eax
c000d7e1:	74 3e                	je     c000d821 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7e6:	0f b7 c0             	movzx  eax,ax
c000d7e9:	83 f8 1f             	cmp    eax,0x1f
c000d7ec:	76 0b                	jbe    c000d7f9 <sendKeyboardToken(KeyboardToken)+0x436>
c000d7ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7f1:	0f b7 c0             	movzx  eax,ax
c000d7f4:	83 f8 7e             	cmp    eax,0x7e
c000d7f7:	76 16                	jbe    c000d80f <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7fc:	0f b7 c0             	movzx  eax,ax
c000d7ff:	83 f8 0a             	cmp    eax,0xa
c000d802:	74 0b                	je     c000d80f <sendKeyboardToken(KeyboardToken)+0x44c>
c000d804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d807:	0f b7 c0             	movzx  eax,ax
c000d80a:	83 f8 08             	cmp    eax,0x8
c000d80d:	75 12                	jne    c000d821 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d80f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d812:	0f b6 c0             	movzx  eax,al
c000d815:	83 ec 0c             	sub    esp,0xc
c000d818:	50                   	push   eax
c000d819:	e8 ca fa ff ff       	call   c000d2e8 <sendKeyToTerminal(unsigned char)>
c000d81e:	83 c4 10             	add    esp,0x10
c000d821:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d824:	83 f0 01             	xor    eax,0x1
c000d827:	0f b6 c0             	movzx  eax,al
c000d82a:	85 c0                	test   eax,eax
c000d82c:	74 5d                	je     c000d88b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d82e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d831:	83 f0 01             	xor    eax,0x1
c000d834:	0f b6 c0             	movzx  eax,al
c000d837:	85 c0                	test   eax,eax
c000d839:	74 50                	je     c000d88b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d83b:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d840:	0f b6 c0             	movzx  eax,al
c000d843:	85 c0                	test   eax,eax
c000d845:	74 44                	je     c000d88b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d84a:	0f b7 c0             	movzx  eax,ax
c000d84d:	83 f8 3f             	cmp    eax,0x3f
c000d850:	76 39                	jbe    c000d88b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d855:	0f b7 c0             	movzx  eax,ax
c000d858:	83 f8 7f             	cmp    eax,0x7f
c000d85b:	77 2e                	ja     c000d88b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d85d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d860:	88 c2                	mov    dl,al
c000d862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d865:	0f b7 c0             	movzx  eax,ax
c000d868:	83 f8 5f             	cmp    eax,0x5f
c000d86b:	76 04                	jbe    c000d871 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d86d:	b0 20                	mov    al,0x20
c000d86f:	eb 02                	jmp    c000d873 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d871:	b0 00                	mov    al,0x0
c000d873:	89 d1                	mov    ecx,edx
c000d875:	29 c1                	sub    ecx,eax
c000d877:	89 c8                	mov    eax,ecx
c000d879:	83 e8 40             	sub    eax,0x40
c000d87c:	0f b6 c0             	movzx  eax,al
c000d87f:	83 ec 0c             	sub    esp,0xc
c000d882:	50                   	push   eax
c000d883:	e8 60 fa ff ff       	call   c000d2e8 <sendKeyToTerminal(unsigned char)>
c000d888:	83 c4 10             	add    esp,0x10
c000d88b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d88e:	0f b7 c0             	movzx  eax,ax
c000d891:	3d 00 03 00 00       	cmp    eax,0x300
c000d896:	75 12                	jne    c000d8aa <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d898:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d89b:	83 f0 01             	xor    eax,0x1
c000d89e:	0f b6 c0             	movzx  eax,al
c000d8a1:	85 c0                	test   eax,eax
c000d8a3:	74 05                	je     c000d8aa <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8a5:	e8 cf ac ff ff       	call   c0008579 <doTerminalCycle()>
c000d8aa:	90                   	nop
c000d8ab:	c9                   	leave  
c000d8ac:	c3                   	ret    

c000d8ad <clearInternalKeybuffer(VgaText*)>:
c000d8ad:	55                   	push   ebp
c000d8ae:	89 e5                	mov    ebp,esp
c000d8b0:	83 ec 08             	sub    esp,0x8
c000d8b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8b6:	05 02 01 00 00       	add    eax,0x102
c000d8bb:	83 ec 0c             	sub    esp,0xc
c000d8be:	50                   	push   eax
c000d8bf:	e8 bc 2c ff ff       	call   c0000580 <strlen>
c000d8c4:	83 c4 10             	add    esp,0x10
c000d8c7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8ca:	81 c2 02 01 00 00    	add    edx,0x102
c000d8d0:	83 ec 04             	sub    esp,0x4
c000d8d3:	50                   	push   eax
c000d8d4:	6a 00                	push   0x0
c000d8d6:	52                   	push   edx
c000d8d7:	e8 14 2c ff ff       	call   c00004f0 <memset>
c000d8dc:	83 c4 10             	add    esp,0x10
c000d8df:	90                   	nop
c000d8e0:	c9                   	leave  
c000d8e1:	c3                   	ret    

c000d8e2 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d8e2:	55                   	push   ebp
c000d8e3:	89 e5                	mov    ebp,esp
c000d8e5:	83 ec 18             	sub    esp,0x18
c000d8e8:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d8ed:	85 c0                	test   eax,eax
c000d8ef:	74 2a                	je     c000d91b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d8f1:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d8f7:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d8fd:	83 ec 04             	sub    esp,0x4
c000d900:	68 40 b4 02 c0       	push   0xc002b440
c000d905:	83 ec 08             	sub    esp,0x8
c000d908:	89 e0                	mov    eax,esp
c000d90a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d90d:	89 08                	mov    DWORD PTR [eax],ecx
c000d90f:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d912:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d916:	ff d2                	call   edx
c000d918:	83 c4 10             	add    esp,0x10
c000d91b:	fb                   	sti    
c000d91c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d923:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d927:	0f 84 0d 01 00 00    	je     c000da3a <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d92d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d930:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d936:	0f be c0             	movsx  eax,al
c000d939:	85 c0                	test   eax,eax
c000d93b:	75 2c                	jne    c000d969 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d93d:	fa                   	cli    
c000d93e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d943:	83 c0 01             	add    eax,0x1
c000d946:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d94b:	e8 1c 88 00 00       	call   c001616c <schedule()>
c000d950:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d955:	83 e8 01             	sub    eax,0x1
c000d958:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d95d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d962:	85 c0                	test   eax,eax
c000d964:	75 c7                	jne    c000d92d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d966:	fb                   	sti    
c000d967:	eb c4                	jmp    c000d92d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d969:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d96c:	8d 50 01             	lea    edx,[eax+0x1]
c000d96f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d972:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d975:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d97b:	88 10                	mov    BYTE PTR [eax],dl
c000d97d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d980:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d986:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d989:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d98d:	83 f8 03             	cmp    eax,0x3
c000d990:	75 1e                	jne    c000d9b0 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d992:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d997:	8b 00                	mov    eax,DWORD PTR [eax]
c000d999:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d99c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9a2:	83 ec 08             	sub    esp,0x8
c000d9a5:	6a 02                	push   0x2
c000d9a7:	50                   	push   eax
c000d9a8:	e8 2e 41 00 00       	call   c0011adb <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9ad:	83 c4 10             	add    esp,0x10
c000d9b0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9b4:	83 f8 1c             	cmp    eax,0x1c
c000d9b7:	75 1e                	jne    c000d9d7 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d9b9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9be:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9c3:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9c9:	83 ec 08             	sub    esp,0x8
c000d9cc:	6a 09                	push   0x9
c000d9ce:	50                   	push   eax
c000d9cf:	e8 07 41 00 00       	call   c0011adb <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9d4:	83 c4 10             	add    esp,0x10
c000d9d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9da:	05 02 01 00 00       	add    eax,0x102
c000d9df:	83 ec 0c             	sub    esp,0xc
c000d9e2:	50                   	push   eax
c000d9e3:	e8 98 2b ff ff       	call   c0000580 <strlen>
c000d9e8:	83 c4 10             	add    esp,0x10
c000d9eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9ee:	81 c2 02 01 00 00    	add    edx,0x102
c000d9f4:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d9f7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9fa:	81 c2 02 01 00 00    	add    edx,0x102
c000da00:	83 ec 04             	sub    esp,0x4
c000da03:	50                   	push   eax
c000da04:	51                   	push   ecx
c000da05:	52                   	push   edx
c000da06:	e8 c5 29 ff ff       	call   c00003d0 <memmove>
c000da0b:	83 c4 10             	add    esp,0x10
c000da0e:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000da12:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000da16:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da1a:	83 f8 0a             	cmp    eax,0xa
c000da1d:	74 16                	je     c000da35 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da1f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da23:	83 f8 03             	cmp    eax,0x3
c000da26:	74 0d                	je     c000da35 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da28:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da2c:	83 f8 1c             	cmp    eax,0x1c
c000da2f:	0f 85 ee fe ff ff    	jne    c000d923 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da38:	eb 03                	jmp    c000da3d <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da3d:	c9                   	leave  
c000da3e:	c3                   	ret    
c000da3f:	90                   	nop

c000da40 <Keyboard::Keyboard(char const*)>:
c000da40:	83 ec 0c             	sub    esp,0xc
c000da43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da47:	83 ec 08             	sub    esp,0x8
c000da4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4e:	50                   	push   eax
c000da4f:	e8 44 f1 ff ff       	call   c000cb98 <Device::Device(char const*)>
c000da54:	83 c4 10             	add    esp,0x10
c000da57:	ba fc 1d 02 c0       	mov    edx,0xc0021dfc
c000da5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da60:	89 10                	mov    DWORD PTR [eax],edx
c000da62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da66:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da70:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da77:	90                   	nop
c000da78:	83 c4 0c             	add    esp,0xc
c000da7b:	c3                   	ret    

c000da7c <Keyboard::~Keyboard()>:
c000da7c:	83 ec 0c             	sub    esp,0xc
c000da7f:	ba fc 1d 02 c0       	mov    edx,0xc0021dfc
c000da84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da88:	89 10                	mov    DWORD PTR [eax],edx
c000da8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da8e:	83 ec 0c             	sub    esp,0xc
c000da91:	50                   	push   eax
c000da92:	e8 6b ee ff ff       	call   c000c902 <Device::~Device()>
c000da97:	83 c4 10             	add    esp,0x10
c000da9a:	90                   	nop
c000da9b:	83 c4 0c             	add    esp,0xc
c000da9e:	c3                   	ret    
c000da9f:	90                   	nop

c000daa0 <Keyboard::~Keyboard()>:
c000daa0:	83 ec 0c             	sub    esp,0xc
c000daa3:	83 ec 0c             	sub    esp,0xc
c000daa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daaa:	e8 cd ff ff ff       	call   c000da7c <Keyboard::~Keyboard()>
c000daaf:	83 c4 10             	add    esp,0x10
c000dab2:	83 ec 08             	sub    esp,0x8
c000dab5:	68 5c 01 00 00       	push   0x15c
c000daba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dabe:	e8 a9 cd ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000dac3:	83 c4 10             	add    esp,0x10
c000dac6:	83 c4 0c             	add    esp,0xc
c000dac9:	c3                   	ret    

c000daca <LogicalDisk::close(int, int, void*)>:
c000daca:	83 c8 ff             	or     eax,0xffffffff
c000dacd:	c3                   	ret    

c000dace <LogicalDisk::~LogicalDisk()>:
c000dace:	83 ec 0c             	sub    esp,0xc
c000dad1:	ba 74 1e 02 c0       	mov    edx,0xc0021e74
c000dad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dada:	89 10                	mov    DWORD PTR [eax],edx
c000dadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae0:	83 ec 0c             	sub    esp,0xc
c000dae3:	50                   	push   eax
c000dae4:	e8 19 ee ff ff       	call   c000c902 <Device::~Device()>
c000dae9:	83 c4 10             	add    esp,0x10
c000daec:	90                   	nop
c000daed:	83 c4 0c             	add    esp,0xc
c000daf0:	c3                   	ret    
c000daf1:	90                   	nop

c000daf2 <LogicalDisk::~LogicalDisk()>:
c000daf2:	83 ec 0c             	sub    esp,0xc
c000daf5:	83 ec 0c             	sub    esp,0xc
c000daf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dafc:	e8 cd ff ff ff       	call   c000dace <LogicalDisk::~LogicalDisk()>
c000db01:	83 c4 10             	add    esp,0x10
c000db04:	83 ec 08             	sub    esp,0x8
c000db07:	68 78 01 00 00       	push   0x178
c000db0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db10:	e8 57 cd ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000db15:	83 c4 10             	add    esp,0x10
c000db18:	83 c4 0c             	add    esp,0xc
c000db1b:	c3                   	ret    

c000db1c <LogicalDisk::open(int, int, void*)>:
c000db1c:	83 ec 18             	sub    esp,0x18
c000db1f:	68 28 1e 02 c0       	push   0xc0021e28
c000db24:	e8 16 3b 00 00       	call   c001163f <KePanic(char const*)>
c000db29:	83 c8 ff             	or     eax,0xffffffff
c000db2c:	83 c4 1c             	add    esp,0x1c
c000db2f:	c3                   	ret    

c000db30 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db30:	53                   	push   ebx
c000db31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db3d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db43:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db49:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db4f:	77 10                	ja     c000db61 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db51:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db57:	89 d3                	mov    ebx,edx
c000db59:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db5f:	72 05                	jb     c000db66 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db61:	83 c8 ff             	or     eax,0xffffffff
c000db64:	89 c2                	mov    edx,eax
c000db66:	5b                   	pop    ebx
c000db67:	c3                   	ret    

c000db68 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db68:	56                   	push   esi
c000db69:	83 c8 ff             	or     eax,0xffffffff
c000db6c:	53                   	push   ebx
c000db6d:	89 c2                	mov    edx,eax
c000db6f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db73:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db7b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db81:	77 27                	ja     c000dbaa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db83:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db89:	89 d8                	mov    eax,ebx
c000db8b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db91:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db96:	89 c2                	mov    edx,eax
c000db98:	73 10                	jae    c000dbaa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db9a:	89 c8                	mov    eax,ecx
c000db9c:	89 da                	mov    edx,ebx
c000db9e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000dba4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000dbaa:	5b                   	pop    ebx
c000dbab:	5e                   	pop    esi
c000dbac:	c3                   	ret    
c000dbad:	90                   	nop

c000dbae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbae:	83 ec 1c             	sub    esp,0x1c
c000dbb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dbb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dbbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbc8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd4:	83 ec 08             	sub    esp,0x8
c000dbd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbdb:	50                   	push   eax
c000dbdc:	e8 b7 ef ff ff       	call   c000cb98 <Device::Device(char const*)>
c000dbe1:	83 c4 10             	add    esp,0x10
c000dbe4:	ba 74 1e 02 c0       	mov    edx,0xc0021e74
c000dbe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbed:	89 10                	mov    DWORD PTR [eax],edx
c000dbef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbf3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbfe:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dc05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc09:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc14:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dc1e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc2a:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc30:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc36:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc3d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc41:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc47:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc55:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5f:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc69:	90                   	nop
c000dc6a:	83 c4 1c             	add    esp,0x1c
c000dc6d:	c3                   	ret    

c000dc6e <LogicalDisk::assignDriveLetter()>:
c000dc6e:	55                   	push   ebp
c000dc6f:	57                   	push   edi
c000dc70:	56                   	push   esi
c000dc71:	53                   	push   ebx
c000dc72:	83 ec 14             	sub    esp,0x14
c000dc75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc79:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc7f:	b0 41                	mov    al,0x41
c000dc81:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc87:	84 d2                	test   dl,dl
c000dc89:	75 02                	jne    c000dc8d <LogicalDisk::assignDriveLetter()+0x1f>
c000dc8b:	b0 43                	mov    al,0x43
c000dc8d:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc93:	0f b6 ca             	movzx  ecx,dl
c000dc96:	0f be e8             	movsx  ebp,al
c000dc99:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc9d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dca1:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dca7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dcab:	3c 43                	cmp    al,0x43
c000dcad:	75 10                	jne    c000dcbf <LogicalDisk::assignDriveLetter()+0x51>
c000dcaf:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dcb6:	75 5a                	jne    c000dd12 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcb8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dcbd:	75 53                	jne    c000dd12 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcbf:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dcc2:	ba 01 00 00 00       	mov    edx,0x1
c000dcc7:	89 34 24             	mov    DWORD PTR [esp],esi
c000dcca:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dccd:	d3 e2                	shl    edx,cl
c000dccf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcd3:	89 d7                	mov    edi,edx
c000dcd5:	89 d6                	mov    esi,edx
c000dcd7:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dcdb:	c1 ff 1f             	sar    edi,0x1f
c000dcde:	21 f9                	and    ecx,edi
c000dce0:	09 d1                	or     ecx,edx
c000dce2:	75 2e                	jne    c000dd12 <LogicalDisk::assignDriveLetter()+0xa4>
c000dce4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dce8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dcec:	09 f2                	or     edx,esi
c000dcee:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dcf1:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dcf7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcfb:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dd01:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dd08:	09 fa                	or     edx,edi
c000dd0a:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dd10:	eb 0d                	jmp    c000dd1f <LogicalDisk::assignDriveLetter()+0xb1>
c000dd12:	8d 50 01             	lea    edx,[eax+0x1]
c000dd15:	45                   	inc    ebp
c000dd16:	80 fa 5b             	cmp    dl,0x5b
c000dd19:	88 d0                	mov    al,dl
c000dd1b:	75 8e                	jne    c000dcab <LogicalDisk::assignDriveLetter()+0x3d>
c000dd1d:	31 c0                	xor    eax,eax
c000dd1f:	83 c4 14             	add    esp,0x14
c000dd22:	5b                   	pop    ebx
c000dd23:	5e                   	pop    esi
c000dd24:	5f                   	pop    edi
c000dd25:	5d                   	pop    ebp
c000dd26:	c3                   	ret    
c000dd27:	90                   	nop

c000dd28 <LogicalDisk::mount()>:
c000dd28:	56                   	push   esi
c000dd29:	53                   	push   ebx
c000dd2a:	53                   	push   ebx
c000dd2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd2f:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd35:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	74 27                	je     c000dd6a <LogicalDisk::mount()+0x42>
c000dd43:	51                   	push   ecx
c000dd44:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd4b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd4d:	83 e8 41             	sub    eax,0x41
c000dd50:	50                   	push   eax
c000dd51:	56                   	push   esi
c000dd52:	53                   	push   ebx
c000dd53:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd56:	83 c4 10             	add    esp,0x10
c000dd59:	84 c0                	test   al,al
c000dd5b:	74 08                	je     c000dd65 <LogicalDisk::mount()+0x3d>
c000dd5d:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd63:	eb 07                	jmp    c000dd6c <LogicalDisk::mount()+0x44>
c000dd65:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd68:	eb d5                	jmp    c000dd3f <LogicalDisk::mount()+0x17>
c000dd6a:	31 c0                	xor    eax,eax
c000dd6c:	5a                   	pop    edx
c000dd6d:	5b                   	pop    ebx
c000dd6e:	5e                   	pop    esi
c000dd6f:	c3                   	ret    

c000dd70 <LogicalDisk::unmount()>:
c000dd70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd74:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd7e:	c3                   	ret    
c000dd7f:	90                   	nop

c000dd80 <LogicalDisk::eject()>:
c000dd80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd84:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd8a:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd90:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd93:	90                   	nop

c000dd94 <LogicalDisk::unassignDriveLetter()>:
c000dd94:	57                   	push   edi
c000dd95:	56                   	push   esi
c000dd96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd9a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dda1:	85 c9                	test   ecx,ecx
c000dda3:	75 0f                	jne    c000ddb4 <LogicalDisk::unassignDriveLetter()+0x20>
c000dda5:	c7 44 24 0c 4c 1e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021e4c
c000ddad:	5e                   	pop    esi
c000ddae:	5f                   	pop    edi
c000ddaf:	e9 8b 38 00 00       	jmp    c001163f <KePanic(char const*)>
c000ddb4:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ddbb:	83 e9 41             	sub    ecx,0x41
c000ddbe:	b8 01 00 00 00       	mov    eax,0x1
c000ddc3:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000ddce:	d3 e0                	shl    eax,cl
c000ddd0:	89 c7                	mov    edi,eax
c000ddd2:	f7 d0                	not    eax
c000ddd4:	c1 ff 1f             	sar    edi,0x1f
c000ddd7:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dddd:	89 fe                	mov    esi,edi
c000dddf:	f7 d6                	not    esi
c000dde1:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000dde7:	5e                   	pop    esi
c000dde8:	5f                   	pop    edi
c000dde9:	c3                   	ret    

c000ddea <LogicalDisk::read(unsigned long long, int, void*)>:
c000ddea:	57                   	push   edi
c000ddeb:	56                   	push   esi
c000ddec:	53                   	push   ebx
c000dded:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ddf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ddf5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddfd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de03:	77 41                	ja     c000de46 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000de05:	99                   	cdq    
c000de06:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de0c:	01 c8                	add    eax,ecx
c000de0e:	11 da                	adc    edx,ebx
c000de10:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de16:	19 d7                	sbb    edi,edx
c000de18:	72 33                	jb     c000de4d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000de1a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de20:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de26:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de2a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de2e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de34:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de3e:	5b                   	pop    ebx
c000de3f:	5e                   	pop    esi
c000de40:	5f                   	pop    edi
c000de41:	e9 d4 0a 00 00       	jmp    c000e91a <VCache::read(unsigned long long, int, void*)>
c000de46:	b8 05 00 00 00       	mov    eax,0x5
c000de4b:	eb 05                	jmp    c000de52 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de4d:	b8 07 00 00 00       	mov    eax,0x7
c000de52:	5b                   	pop    ebx
c000de53:	5e                   	pop    esi
c000de54:	5f                   	pop    edi
c000de55:	c3                   	ret    

c000de56 <LogicalDisk::write(unsigned long long, int, void*)>:
c000de56:	57                   	push   edi
c000de57:	56                   	push   esi
c000de58:	53                   	push   ebx
c000de59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de61:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de69:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de6f:	77 41                	ja     c000deb2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de71:	99                   	cdq    
c000de72:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de78:	01 c8                	add    eax,ecx
c000de7a:	11 da                	adc    edx,ebx
c000de7c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de82:	19 d7                	sbb    edi,edx
c000de84:	72 33                	jb     c000deb9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de86:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de8c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de92:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de96:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de9a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dea0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dea6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deaa:	5b                   	pop    ebx
c000deab:	5e                   	pop    esi
c000deac:	5f                   	pop    edi
c000dead:	e9 6e 09 00 00       	jmp    c000e820 <VCache::write(unsigned long long, int, void*)>
c000deb2:	b8 05 00 00 00       	mov    eax,0x5
c000deb7:	eb 05                	jmp    c000debe <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000deb9:	b8 07 00 00 00       	mov    eax,0x7
c000debe:	5b                   	pop    ebx
c000debf:	5e                   	pop    esi
c000dec0:	5f                   	pop    edi
c000dec1:	c3                   	ret    
c000dec2:	66 90                	xchg   ax,ax

c000dec4 <Mouse::Mouse(char const*)>:
c000dec4:	83 ec 0c             	sub    esp,0xc
c000dec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000decb:	83 ec 08             	sub    esp,0x8
c000dece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ded2:	50                   	push   eax
c000ded3:	e8 c0 ec ff ff       	call   c000cb98 <Device::Device(char const*)>
c000ded8:	83 c4 10             	add    esp,0x10
c000dedb:	ba a0 1e 02 c0       	mov    edx,0xc0021ea0
c000dee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee4:	89 10                	mov    DWORD PTR [eax],edx
c000dee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deea:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000def4:	90                   	nop
c000def5:	83 c4 0c             	add    esp,0xc
c000def8:	c3                   	ret    
c000def9:	90                   	nop
c000defa:	66 90                	xchg   ax,ax

c000defc <Mouse::~Mouse()>:
c000defc:	83 ec 0c             	sub    esp,0xc
c000deff:	ba a0 1e 02 c0       	mov    edx,0xc0021ea0
c000df04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df08:	89 10                	mov    DWORD PTR [eax],edx
c000df0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df0e:	83 ec 0c             	sub    esp,0xc
c000df11:	50                   	push   eax
c000df12:	e8 eb e9 ff ff       	call   c000c902 <Device::~Device()>
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	90                   	nop
c000df1b:	83 c4 0c             	add    esp,0xc
c000df1e:	c3                   	ret    
c000df1f:	90                   	nop

c000df20 <Mouse::~Mouse()>:
c000df20:	83 ec 0c             	sub    esp,0xc
c000df23:	83 ec 0c             	sub    esp,0xc
c000df26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df2a:	e8 cd ff ff ff       	call   c000defc <Mouse::~Mouse()>
c000df2f:	83 c4 10             	add    esp,0x10
c000df32:	83 ec 08             	sub    esp,0x8
c000df35:	68 58 01 00 00       	push   0x158
c000df3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df3e:	e8 29 c9 ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000df43:	83 c4 10             	add    esp,0x10
c000df46:	83 c4 0c             	add    esp,0xc
c000df49:	c3                   	ret    

c000df4a <NIC::getMAC()>:
c000df4a:	31 c0                	xor    eax,eax
c000df4c:	31 d2                	xor    edx,edx
c000df4e:	c3                   	ret    
c000df4f:	90                   	nop

c000df50 <NIC::write(int, unsigned char*, int*)>:
c000df50:	b8 01 00 00 00       	mov    eax,0x1
c000df55:	c3                   	ret    

c000df56 <NIC::NIC(char const*)>:
c000df56:	83 ec 0c             	sub    esp,0xc
c000df59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5d:	83 ec 08             	sub    esp,0x8
c000df60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df64:	50                   	push   eax
c000df65:	e8 2e ec ff ff       	call   c000cb98 <Device::Device(char const*)>
c000df6a:	83 c4 10             	add    esp,0x10
c000df6d:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c000df72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df76:	89 10                	mov    DWORD PTR [eax],edx
c000df78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df86:	90                   	nop
c000df87:	83 c4 0c             	add    esp,0xc
c000df8a:	c3                   	ret    
c000df8b:	90                   	nop

c000df8c <NIC::~NIC()>:
c000df8c:	83 ec 0c             	sub    esp,0xc
c000df8f:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c000df94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df98:	89 10                	mov    DWORD PTR [eax],edx
c000df9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9e:	83 ec 0c             	sub    esp,0xc
c000dfa1:	50                   	push   eax
c000dfa2:	e8 5b e9 ff ff       	call   c000c902 <Device::~Device()>
c000dfa7:	83 c4 10             	add    esp,0x10
c000dfaa:	90                   	nop
c000dfab:	83 c4 0c             	add    esp,0xc
c000dfae:	c3                   	ret    
c000dfaf:	90                   	nop

c000dfb0 <NIC::~NIC()>:
c000dfb0:	83 ec 0c             	sub    esp,0xc
c000dfb3:	83 ec 0c             	sub    esp,0xc
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 cd ff ff ff       	call   c000df8c <NIC::~NIC()>
c000dfbf:	83 c4 10             	add    esp,0x10
c000dfc2:	83 ec 08             	sub    esp,0x8
c000dfc5:	68 58 01 00 00       	push   0x158
c000dfca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfce:	e8 99 c8 ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000dfd3:	83 c4 10             	add    esp,0x10
c000dfd6:	83 c4 0c             	add    esp,0xc
c000dfd9:	c3                   	ret    

c000dfda <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dfda:	55                   	push   ebp
c000dfdb:	57                   	push   edi
c000dfdc:	56                   	push   esi
c000dfdd:	53                   	push   ebx
c000dfde:	81 ec 28 01 00 00    	sub    esp,0x128
c000dfe4:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dfeb:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dff2:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dff9:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000e000:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e004:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e008:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e00f:	e8 80 ec ff ff       	call   c000cc94 <Device::getName()>
c000e014:	5a                   	pop    edx
c000e015:	59                   	pop    ecx
c000e016:	50                   	push   eax
c000e017:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e01b:	55                   	push   ebp
c000e01c:	e8 2f 26 ff ff       	call   c0000650 <strcpy>
c000e021:	5b                   	pop    ebx
c000e022:	58                   	pop    eax
c000e023:	68 f8 1e 02 c0       	push   0xc0021ef8
c000e028:	55                   	push   ebp
c000e029:	e8 42 28 ff ff       	call   c0000870 <strcat>
c000e02e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e035:	e8 f9 9a ff ff       	call   c0007b33 <malloc>
c000e03a:	83 c4 0c             	add    esp,0xc
c000e03d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e041:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e045:	89 c3                	mov    ebx,eax
c000e047:	57                   	push   edi
c000e048:	56                   	push   esi
c000e049:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e050:	55                   	push   ebp
c000e051:	50                   	push   eax
c000e052:	e8 57 fb ff ff       	call   c000dbae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e057:	83 c4 14             	add    esp,0x14
c000e05a:	53                   	push   ebx
c000e05b:	e8 0e fc ff ff       	call   c000dc6e <LogicalDisk::assignDriveLetter()>
c000e060:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e063:	e8 c0 fc ff ff       	call   c000dd28 <LogicalDisk::mount()>
c000e068:	58                   	pop    eax
c000e069:	5a                   	pop    edx
c000e06a:	53                   	push   ebx
c000e06b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e072:	e8 89 e9 ff ff       	call   c000ca00 <Device::addChild(Device*)>
c000e077:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e07d:	5b                   	pop    ebx
c000e07e:	5e                   	pop    esi
c000e07f:	5f                   	pop    edi
c000e080:	5d                   	pop    ebp
c000e081:	c3                   	ret    

c000e082 <createPartitionsForDisk(PhysicalDisk*)>:
c000e082:	55                   	push   ebp
c000e083:	57                   	push   edi
c000e084:	56                   	push   esi
c000e085:	53                   	push   ebx
c000e086:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e08c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e093:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e099:	3d 00 02 00 00       	cmp    eax,0x200
c000e09e:	74 27                	je     c000e0c7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e0a0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e0a6:	83 ec 10             	sub    esp,0x10
c000e0a9:	99                   	cdq    
c000e0aa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e0b0:	52                   	push   edx
c000e0b1:	50                   	push   eax
c000e0b2:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e0b6:	c1 e6 0a             	shl    esi,0xa
c000e0b9:	89 fd                	mov    ebp,edi
c000e0bb:	55                   	push   ebp
c000e0bc:	56                   	push   esi
c000e0bd:	e8 6e 17 01 00       	call   c001f830 <__udivdi3>
c000e0c2:	e9 b9 00 00 00       	jmp    c000e180 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0c7:	83 ec 0c             	sub    esp,0xc
c000e0ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0cc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e0d0:	56                   	push   esi
c000e0d1:	6a 01                	push   0x1
c000e0d3:	6a 00                	push   0x0
c000e0d5:	6a 00                	push   0x0
c000e0d7:	53                   	push   ebx
c000e0d8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e0db:	83 c4 20             	add    esp,0x20
c000e0de:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e0e6:	75 0a                	jne    c000e0f2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e0e8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e0f0:	74 2c                	je     c000e11e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e0f2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0f8:	83 ec 10             	sub    esp,0x10
c000e0fb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e101:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e107:	89 f7                	mov    edi,esi
c000e109:	c1 ff 1f             	sar    edi,0x1f
c000e10c:	57                   	push   edi
c000e10d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e111:	56                   	push   esi
c000e112:	c1 e0 0a             	shl    eax,0xa
c000e115:	52                   	push   edx
c000e116:	50                   	push   eax
c000e117:	e8 14 17 01 00       	call   c001f830 <__udivdi3>
c000e11c:	eb 62                	jmp    c000e180 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e11e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e125:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e12c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e133:	89 cf                	mov    edi,ecx
c000e135:	83 e2 7f             	and    edx,0x7f
c000e138:	83 e7 7f             	and    edi,0x7f
c000e13b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e13e:	83 e0 7f             	and    eax,0x7f
c000e141:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e144:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e14b:	83 e0 7f             	and    eax,0x7f
c000e14e:	01 d0                	add    eax,edx
c000e150:	84 c0                	test   al,al
c000e152:	89 c5                	mov    ebp,eax
c000e154:	74 41                	je     c000e197 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e156:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e15c:	83 ec 10             	sub    esp,0x10
c000e15f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e165:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e16b:	89 f7                	mov    edi,esi
c000e16d:	c1 ff 1f             	sar    edi,0x1f
c000e170:	57                   	push   edi
c000e171:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e175:	56                   	push   esi
c000e176:	c1 e0 0a             	shl    eax,0xa
c000e179:	52                   	push   edx
c000e17a:	50                   	push   eax
c000e17b:	e8 b0 16 01 00       	call   c001f830 <__udivdi3>
c000e180:	83 c4 14             	add    esp,0x14
c000e183:	52                   	push   edx
c000e184:	50                   	push   eax
c000e185:	6a 00                	push   0x0
c000e187:	6a 00                	push   0x0
c000e189:	53                   	push   ebx
c000e18a:	e8 4b fe ff ff       	call   c000dfda <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e18f:	83 c4 20             	add    esp,0x20
c000e192:	e9 73 01 00 00       	jmp    c000e30a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e197:	89 f0                	mov    eax,esi
c000e199:	31 c9                	xor    ecx,ecx
c000e19b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e1a2:	75 02                	jne    c000e1a6 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e1a4:	89 cd                	mov    ebp,ecx
c000e1a6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e1ae:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e1b5:	83 c0 10             	add    eax,0x10
c000e1b8:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e1c0:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000e1c7:	c1 e2 08             	shl    edx,0x8
c000e1ca:	c1 e6 10             	shl    esi,0x10
c000e1cd:	09 f2                	or     edx,esi
c000e1cf:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000e1d6:	09 f2                	or     edx,esi
c000e1d8:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e1df:	c1 e6 18             	shl    esi,0x18
c000e1e2:	09 f2                	or     edx,esi
c000e1e4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e1eb:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e1ef:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e1f6:	c1 e6 10             	shl    esi,0x10
c000e1f9:	c1 e2 08             	shl    edx,0x8
c000e1fc:	09 f2                	or     edx,esi
c000e1fe:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e205:	09 f2                	or     edx,esi
c000e207:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e20e:	c1 e6 18             	shl    esi,0x18
c000e211:	09 f2                	or     edx,esi
c000e213:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e217:	41                   	inc    ecx
c000e218:	83 f9 04             	cmp    ecx,0x4
c000e21b:	0f 85 7a ff ff ff    	jne    c000e19b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e225:	83 f0 01             	xor    eax,0x1
c000e228:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e22c:	75 4f                	jne    c000e27d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e22e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e232:	83 f0 01             	xor    eax,0x1
c000e235:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e239:	75 42                	jne    c000e27d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e23b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e241:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e249:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e24f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e257:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e25d:	89 f7                	mov    edi,esi
c000e25f:	c1 ff 1f             	sar    edi,0x1f
c000e262:	57                   	push   edi
c000e263:	56                   	push   esi
c000e264:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e268:	52                   	push   edx
c000e269:	c1 e0 0a             	shl    eax,0xa
c000e26c:	50                   	push   eax
c000e26d:	e8 be 15 01 00       	call   c001f830 <__udivdi3>
c000e272:	83 c4 10             	add    esp,0x10
c000e275:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e279:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e27d:	89 e8                	mov    eax,ebp
c000e27f:	0f b6 e8             	movzx  ebp,al
c000e282:	85 ed                	test   ebp,ebp
c000e284:	74 50                	je     c000e2d6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e286:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e28a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e28e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e292:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e296:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e29a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e29e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e2a2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e2b6:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e2ba:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2be:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e2c2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2c6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e2ca:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e2ce:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e2d2:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e2d6:	31 ed                	xor    ebp,ebp
c000e2d8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2dc:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2e0:	89 f8                	mov    eax,edi
c000e2e2:	09 f0                	or     eax,esi
c000e2e4:	74 1e                	je     c000e304 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2e6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2ea:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2ee:	89 d1                	mov    ecx,edx
c000e2f0:	09 c1                	or     ecx,eax
c000e2f2:	74 10                	je     c000e304 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2f4:	83 ec 0c             	sub    esp,0xc
c000e2f7:	57                   	push   edi
c000e2f8:	56                   	push   esi
c000e2f9:	52                   	push   edx
c000e2fa:	50                   	push   eax
c000e2fb:	53                   	push   ebx
c000e2fc:	e8 d9 fc ff ff       	call   c000dfda <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	45                   	inc    ebp
c000e305:	83 fd 04             	cmp    ebp,0x4
c000e308:	75 ce                	jne    c000e2d8 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e30a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e310:	5b                   	pop    ebx
c000e311:	5e                   	pop    esi
c000e312:	5f                   	pop    edi
c000e313:	5d                   	pop    ebp
c000e314:	c3                   	ret    
c000e315:	66 90                	xchg   ax,ax
c000e317:	90                   	nop

c000e318 <Serial::Serial(char const*)>:
c000e318:	83 ec 0c             	sub    esp,0xc
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	83 ec 08             	sub    esp,0x8
c000e322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e326:	50                   	push   eax
c000e327:	e8 6c e8 ff ff       	call   c000cb98 <Device::Device(char const*)>
c000e32c:	83 c4 10             	add    esp,0x10
c000e32f:	ba 0c 1f 02 c0       	mov    edx,0xc0021f0c
c000e334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e338:	89 10                	mov    DWORD PTR [eax],edx
c000e33a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e348:	90                   	nop
c000e349:	83 c4 0c             	add    esp,0xc
c000e34c:	c3                   	ret    
c000e34d:	90                   	nop
c000e34e:	66 90                	xchg   ax,ax

c000e350 <Serial::~Serial()>:
c000e350:	83 ec 0c             	sub    esp,0xc
c000e353:	ba 0c 1f 02 c0       	mov    edx,0xc0021f0c
c000e358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e35c:	89 10                	mov    DWORD PTR [eax],edx
c000e35e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e362:	83 ec 0c             	sub    esp,0xc
c000e365:	50                   	push   eax
c000e366:	e8 97 e5 ff ff       	call   c000c902 <Device::~Device()>
c000e36b:	83 c4 10             	add    esp,0x10
c000e36e:	90                   	nop
c000e36f:	83 c4 0c             	add    esp,0xc
c000e372:	c3                   	ret    
c000e373:	90                   	nop

c000e374 <Serial::~Serial()>:
c000e374:	83 ec 0c             	sub    esp,0xc
c000e377:	83 ec 0c             	sub    esp,0xc
c000e37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e37e:	e8 cd ff ff ff       	call   c000e350 <Serial::~Serial()>
c000e383:	83 c4 10             	add    esp,0x10
c000e386:	83 ec 08             	sub    esp,0x8
c000e389:	68 58 01 00 00       	push   0x158
c000e38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e392:	e8 d5 c4 ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000e397:	83 c4 10             	add    esp,0x10
c000e39a:	83 c4 0c             	add    esp,0xc
c000e39d:	c3                   	ret    
c000e39e:	66 90                	xchg   ax,ax

c000e3a0 <Timer::Timer(char const*)>:
c000e3a0:	83 ec 0c             	sub    esp,0xc
c000e3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a7:	83 ec 08             	sub    esp,0x8
c000e3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ae:	50                   	push   eax
c000e3af:	e8 e4 e7 ff ff       	call   c000cb98 <Device::Device(char const*)>
c000e3b4:	83 c4 10             	add    esp,0x10
c000e3b7:	ba 50 1f 02 c0       	mov    edx,0xc0021f50
c000e3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c0:	89 10                	mov    DWORD PTR [eax],edx
c000e3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3d0:	90                   	nop
c000e3d1:	83 c4 0c             	add    esp,0xc
c000e3d4:	c3                   	ret    
c000e3d5:	90                   	nop
c000e3d6:	66 90                	xchg   ax,ax

c000e3d8 <Timer::~Timer()>:
c000e3d8:	83 ec 0c             	sub    esp,0xc
c000e3db:	ba 50 1f 02 c0       	mov    edx,0xc0021f50
c000e3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e4:	89 10                	mov    DWORD PTR [eax],edx
c000e3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ea:	83 ec 0c             	sub    esp,0xc
c000e3ed:	50                   	push   eax
c000e3ee:	e8 0f e5 ff ff       	call   c000c902 <Device::~Device()>
c000e3f3:	83 c4 10             	add    esp,0x10
c000e3f6:	90                   	nop
c000e3f7:	83 c4 0c             	add    esp,0xc
c000e3fa:	c3                   	ret    
c000e3fb:	90                   	nop

c000e3fc <Timer::~Timer()>:
c000e3fc:	83 ec 0c             	sub    esp,0xc
c000e3ff:	83 ec 0c             	sub    esp,0xc
c000e402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e406:	e8 cd ff ff ff       	call   c000e3d8 <Timer::~Timer()>
c000e40b:	83 c4 10             	add    esp,0x10
c000e40e:	83 ec 08             	sub    esp,0x8
c000e411:	68 5c 01 00 00       	push   0x15c
c000e416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e41a:	e8 4d c4 ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000e41f:	83 c4 10             	add    esp,0x10
c000e422:	83 c4 0c             	add    esp,0xc
c000e425:	c3                   	ret    

c000e426 <Timer::read()>:
c000e426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e42a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e430:	c3                   	ret    

c000e431 <setupTimer(int)>:
c000e431:	53                   	push   ebx
c000e432:	83 ec 14             	sub    esp,0x14
c000e435:	68 5c 01 00 00       	push   0x15c
c000e43a:	e8 f4 96 ff ff       	call   c0007b33 <malloc>
c000e43f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e442:	89 c3                	mov    ebx,eax
c000e444:	e8 47 0c 01 00       	call   c001f090 <PIT::PIT()>
c000e449:	58                   	pop    eax
c000e44a:	5a                   	pop    edx
c000e44b:	53                   	push   ebx
c000e44c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e452:	e8 a9 e5 ff ff       	call   c000ca00 <Device::addChild(Device*)>
c000e457:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e459:	6a 00                	push   0x0
c000e45b:	6a 00                	push   0x0
c000e45d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e461:	53                   	push   ebx
c000e462:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e465:	83 c4 28             	add    esp,0x28
c000e468:	89 d8                	mov    eax,ebx
c000e46a:	5b                   	pop    ebx
c000e46b:	c3                   	ret    

c000e46c <timerHandler(unsigned int)>:
c000e46c:	56                   	push   esi
c000e46d:	53                   	push   ebx
c000e46e:	51                   	push   ecx
c000e46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e473:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e479:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e480:	0f 84 4a 01 00 00    	je     c000e5d0 <timerHandler(unsigned int)+0x164>
c000e486:	fa                   	cli    
c000e487:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e48d:	83 ec 0c             	sub    esp,0xc
c000e490:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e495:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e49b:	e8 60 19 01 00       	call   c001fe00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4a0:	83 c4 10             	add    esp,0x10
c000e4a3:	84 c0                	test   al,al
c000e4a5:	0f 85 a1 00 00 00    	jne    c000e54c <timerHandler(unsigned int)+0xe0>
c000e4ab:	83 ec 0c             	sub    esp,0xc
c000e4ae:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4b3:	e8 64 19 01 00       	call   c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4b8:	83 c4 10             	add    esp,0x10
c000e4bb:	89 c6                	mov    esi,eax
c000e4bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e4c0:	83 ec 0c             	sub    esp,0xc
c000e4c3:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4c8:	e8 4f 19 01 00       	call   c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4cd:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e4d4:	89 c3                	mov    ebx,eax
c000e4d6:	e8 49 19 01 00       	call   c001fe24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e4db:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e4de:	83 c4 10             	add    esp,0x10
c000e4e1:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e4e7:	77 23                	ja     c000e50c <timerHandler(unsigned int)+0xa0>
c000e4e9:	83 ec 0c             	sub    esp,0xc
c000e4ec:	53                   	push   ebx
c000e4ed:	e8 72 81 00 00       	call   c0016664 <unblockTask(ThreadControlBlock*)>
c000e4f2:	83 c4 10             	add    esp,0x10
c000e4f5:	39 de                	cmp    esi,ebx
c000e4f7:	75 27                	jne    c000e520 <timerHandler(unsigned int)+0xb4>
c000e4f9:	83 ec 0c             	sub    esp,0xc
c000e4fc:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e501:	e8 16 19 01 00       	call   c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e506:	89 c6                	mov    esi,eax
c000e508:	eb 12                	jmp    c000e51c <timerHandler(unsigned int)+0xb0>
c000e50a:	66 90                	xchg   ax,ax
c000e50c:	52                   	push   edx
c000e50d:	52                   	push   edx
c000e50e:	53                   	push   ebx
c000e50f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e514:	e8 c7 19 01 00       	call   c001fee0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e519:	8d 76 00             	lea    esi,[esi+0x0]
c000e51c:	83 c4 10             	add    esp,0x10
c000e51f:	90                   	nop
c000e520:	83 ec 0c             	sub    esp,0xc
c000e523:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e528:	e8 d3 18 01 00       	call   c001fe00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e52d:	83 c4 10             	add    esp,0x10
c000e530:	84 c0                	test   al,al
c000e532:	75 18                	jne    c000e54c <timerHandler(unsigned int)+0xe0>
c000e534:	83 ec 0c             	sub    esp,0xc
c000e537:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e53c:	e8 db 18 01 00       	call   c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e541:	83 c4 10             	add    esp,0x10
c000e544:	39 f0                	cmp    eax,esi
c000e546:	0f 85 74 ff ff ff    	jne    c000e4c0 <timerHandler(unsigned int)+0x54>
c000e54c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e551:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e555:	74 41                	je     c000e598 <timerHandler(unsigned int)+0x12c>
c000e557:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e55e:	74 38                	je     c000e598 <timerHandler(unsigned int)+0x12c>
c000e560:	fa                   	cli    
c000e561:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e567:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e56c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e572:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e575:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e57b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e57e:	72 08                	jb     c000e588 <timerHandler(unsigned int)+0x11c>
c000e580:	e8 e7 7b 00 00       	call   c001616c <schedule()>
c000e585:	8d 76 00             	lea    esi,[esi+0x0]
c000e588:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e58d:	48                   	dec    eax
c000e58e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e593:	75 03                	jne    c000e598 <timerHandler(unsigned int)+0x12c>
c000e595:	fb                   	sti    
c000e596:	66 90                	xchg   ax,ax
c000e598:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e59d:	48                   	dec    eax
c000e59e:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e5a3:	75 1b                	jne    c000e5c0 <timerHandler(unsigned int)+0x154>
c000e5a5:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e5ac:	74 12                	je     c000e5c0 <timerHandler(unsigned int)+0x154>
c000e5ae:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e5b8:	e8 af 7b 00 00       	call   c001616c <schedule()>
c000e5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e5c0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5c5:	48                   	dec    eax
c000e5c6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5cb:	75 03                	jne    c000e5d0 <timerHandler(unsigned int)+0x164>
c000e5cd:	fb                   	sti    
c000e5ce:	66 90                	xchg   ax,ax
c000e5d0:	58                   	pop    eax
c000e5d1:	5b                   	pop    ebx
c000e5d2:	5e                   	pop    esi
c000e5d3:	c3                   	ret    

c000e5d4 <VCache::VCache(PhysicalDisk*)>:
c000e5d4:	53                   	push   ebx
c000e5d5:	83 ec 18             	sub    esp,0x18
c000e5d8:	ba 80 1f 02 c0       	mov    edx,0xc0021f80
c000e5dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e1:	89 10                	mov    DWORD PTR [eax],edx
c000e5e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e5ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5f2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e5f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5fd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e604:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e60b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e60f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e616:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e61d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e621:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e62c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e630:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e634:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e63b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e646:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e64a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e64e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e656:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e65a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e65e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e665:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e66d:	83 ec 0c             	sub    esp,0xc
c000e670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e674:	e8 ba 94 ff ff       	call   c0007b33 <malloc>
c000e679:	83 c4 10             	add    esp,0x10
c000e67c:	89 c3                	mov    ebx,eax
c000e67e:	83 ec 0c             	sub    esp,0xc
c000e681:	53                   	push   ebx
c000e682:	e8 85 78 00 00       	call   c0015f0c <Mutex::Mutex()>
c000e687:	83 c4 10             	add    esp,0x10
c000e68a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e68e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e695:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e699:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e69c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6a0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e6a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6ab:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6b5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6bc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e6c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6c8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e6cc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e6cf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e6d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e6da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6de:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e6e4:	05 00 02 00 00       	add    eax,0x200
c000e6e9:	c1 e0 03             	shl    eax,0x3
c000e6ec:	83 ec 0c             	sub    esp,0xc
c000e6ef:	50                   	push   eax
c000e6f0:	e8 3e 94 ff ff       	call   c0007b33 <malloc>
c000e6f5:	83 c4 10             	add    esp,0x10
c000e6f8:	89 c2                	mov    edx,eax
c000e6fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e701:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e705:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e70c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e710:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e714:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e718:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e71e:	89 d0                	mov    eax,edx
c000e720:	c1 e0 02             	shl    eax,0x2
c000e723:	01 d0                	add    eax,edx
c000e725:	c1 e0 04             	shl    eax,0x4
c000e728:	83 ec 0c             	sub    esp,0xc
c000e72b:	50                   	push   eax
c000e72c:	e8 02 94 ff ff       	call   c0007b33 <malloc>
c000e731:	83 c4 10             	add    esp,0x10
c000e734:	89 c2                	mov    edx,eax
c000e736:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e73a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e73d:	90                   	nop
c000e73e:	83 c4 18             	add    esp,0x18
c000e741:	5b                   	pop    ebx
c000e742:	c3                   	ret    
c000e743:	90                   	nop

c000e744 <VCache::invalidateReadBuffer()>:
c000e744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e748:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e74e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e752:	c3                   	ret    
c000e753:	90                   	nop

c000e754 <VCache::writeWriteBuffer()>:
c000e754:	53                   	push   ebx
c000e755:	83 ec 08             	sub    esp,0x8
c000e758:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e75c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e760:	74 1e                	je     c000e780 <VCache::writeWriteBuffer()+0x2c>
c000e762:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e765:	83 ec 0c             	sub    esp,0xc
c000e768:	8b 10                	mov    edx,DWORD PTR [eax]
c000e76a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e76d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e770:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e773:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e776:	50                   	push   eax
c000e777:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e77a:	83 c4 20             	add    esp,0x20
c000e77d:	8d 76 00             	lea    esi,[esi+0x0]
c000e780:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e787:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e78e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e792:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e799:	83 c4 08             	add    esp,0x8
c000e79c:	5b                   	pop    ebx
c000e79d:	c3                   	ret    
c000e79e:	66 90                	xchg   ax,ax

c000e7a0 <VCache::~VCache()>:
c000e7a0:	83 ec 0c             	sub    esp,0xc
c000e7a3:	ba 80 1f 02 c0       	mov    edx,0xc0021f80
c000e7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ac:	89 10                	mov    DWORD PTR [eax],edx
c000e7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e7b5:	0f b6 c0             	movzx  eax,al
c000e7b8:	85 c0                	test   eax,eax
c000e7ba:	74 10                	je     c000e7cc <VCache::~VCache()+0x2c>
c000e7bc:	83 ec 0c             	sub    esp,0xc
c000e7bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7c3:	e8 8c ff ff ff       	call   c000e754 <VCache::writeWriteBuffer()>
c000e7c8:	83 c4 10             	add    esp,0x10
c000e7cb:	90                   	nop
c000e7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e7d3:	83 ec 0c             	sub    esp,0xc
c000e7d6:	50                   	push   eax
c000e7d7:	e8 67 93 ff ff       	call   c0007b43 <free>
c000e7dc:	83 c4 10             	add    esp,0x10
c000e7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e7e6:	83 ec 0c             	sub    esp,0xc
c000e7e9:	50                   	push   eax
c000e7ea:	e8 54 93 ff ff       	call   c0007b43 <free>
c000e7ef:	83 c4 10             	add    esp,0x10
c000e7f2:	90                   	nop
c000e7f3:	83 c4 0c             	add    esp,0xc
c000e7f6:	c3                   	ret    
c000e7f7:	90                   	nop

c000e7f8 <VCache::~VCache()>:
c000e7f8:	83 ec 0c             	sub    esp,0xc
c000e7fb:	83 ec 0c             	sub    esp,0xc
c000e7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e802:	e8 99 ff ff ff       	call   c000e7a0 <VCache::~VCache()>
c000e807:	83 c4 10             	add    esp,0x10
c000e80a:	83 ec 08             	sub    esp,0x8
c000e80d:	6a 44                	push   0x44
c000e80f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e813:	e8 54 c0 ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000e818:	83 c4 10             	add    esp,0x10
c000e81b:	83 c4 0c             	add    esp,0xc
c000e81e:	c3                   	ret    
c000e81f:	90                   	nop

c000e820 <VCache::write(unsigned long long, int, void*)>:
c000e820:	55                   	push   ebp
c000e821:	57                   	push   edi
c000e822:	56                   	push   esi
c000e823:	53                   	push   ebx
c000e824:	83 ec 1c             	sub    esp,0x1c
c000e827:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e82b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e82f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e833:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e837:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e83b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e83f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e843:	74 0f                	je     c000e854 <VCache::write(unsigned long long, int, void*)+0x34>
c000e845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e849:	53                   	push   ebx
c000e84a:	e8 f5 fe ff ff       	call   c000e744 <VCache::invalidateReadBuffer()>
c000e84f:	58                   	pop    eax
c000e850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e854:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e858:	74 66                	je     c000e8c0 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e85a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e85d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e861:	99                   	cdq    
c000e862:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e865:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e868:	89 c6                	mov    esi,eax
c000e86a:	31 ce                	xor    esi,ecx
c000e86c:	89 d0                	mov    eax,edx
c000e86e:	31 e8                	xor    eax,ebp
c000e870:	09 c6                	or     esi,eax
c000e872:	75 38                	jne    c000e8ac <VCache::write(unsigned long long, int, void*)+0x8c>
c000e874:	83 ff 01             	cmp    edi,0x1
c000e877:	75 33                	jne    c000e8ac <VCache::write(unsigned long long, int, void*)+0x8c>
c000e879:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e87c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e880:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e884:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e88a:	0f af f9             	imul   edi,ecx
c000e88d:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e890:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e892:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e895:	40                   	inc    eax
c000e896:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e899:	83 f8 50             	cmp    eax,0x50
c000e89c:	75 72                	jne    c000e910 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e89e:	83 ec 0c             	sub    esp,0xc
c000e8a1:	53                   	push   ebx
c000e8a2:	e8 ad fe ff ff       	call   c000e754 <VCache::writeWriteBuffer()>
c000e8a7:	83 c4 10             	add    esp,0x10
c000e8aa:	eb 64                	jmp    c000e910 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e8ac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e8b0:	83 ec 0c             	sub    esp,0xc
c000e8b3:	53                   	push   ebx
c000e8b4:	e8 9b fe ff ff       	call   c000e754 <VCache::writeWriteBuffer()>
c000e8b9:	83 c4 10             	add    esp,0x10
c000e8bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8c0:	83 ff 4f             	cmp    edi,0x4f
c000e8c3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8c6:	7f 20                	jg     c000e8e8 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e8c8:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e8cb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8cf:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e8d2:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8d5:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e8d8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e8dc:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8e4:	eb 2a                	jmp    c000e910 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e8e6:	66 90                	xchg   ax,ax
c000e8e8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ee:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e8f2:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e8f6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e8fa:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e8fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e902:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e905:	83 c4 1c             	add    esp,0x1c
c000e908:	5b                   	pop    ebx
c000e909:	5e                   	pop    esi
c000e90a:	5f                   	pop    edi
c000e90b:	5d                   	pop    ebp
c000e90c:	ff e0                	jmp    eax
c000e90e:	66 90                	xchg   ax,ax
c000e910:	83 c4 1c             	add    esp,0x1c
c000e913:	31 c0                	xor    eax,eax
c000e915:	5b                   	pop    ebx
c000e916:	5e                   	pop    esi
c000e917:	5f                   	pop    edi
c000e918:	5d                   	pop    ebp
c000e919:	c3                   	ret    

c000e91a <VCache::read(unsigned long long, int, void*)>:
c000e91a:	55                   	push   ebp
c000e91b:	57                   	push   edi
c000e91c:	56                   	push   esi
c000e91d:	53                   	push   ebx
c000e91e:	83 ec 1c             	sub    esp,0x1c
c000e921:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e925:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e929:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e92d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e931:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e935:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e939:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e93d:	74 0d                	je     c000e94c <VCache::read(unsigned long long, int, void*)+0x32>
c000e93f:	83 ec 0c             	sub    esp,0xc
c000e942:	57                   	push   edi
c000e943:	e8 0c fe ff ff       	call   c000e754 <VCache::writeWriteBuffer()>
c000e948:	83 c4 10             	add    esp,0x10
c000e94b:	90                   	nop
c000e94c:	83 fd 01             	cmp    ebp,0x1
c000e94f:	0f 85 93 00 00 00    	jne    c000e9e8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e955:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e958:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e95f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e962:	0f 85 80 00 00 00    	jne    c000e9e8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e968:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e96b:	89 cd                	mov    ebp,ecx
c000e96d:	f7 dd                	neg    ebp
c000e96f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e973:	89 e8                	mov    eax,ebp
c000e975:	21 dd                	and    ebp,ebx
c000e977:	c1 f8 1f             	sar    eax,0x1f
c000e97a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e97e:	89 e8                	mov    eax,ebp
c000e980:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e984:	21 f5                	and    ebp,esi
c000e986:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e98a:	89 ea                	mov    edx,ebp
c000e98c:	74 2e                	je     c000e9bc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e98e:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e991:	75 29                	jne    c000e9bc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e993:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e996:	75 24                	jne    c000e9bc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e998:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e99b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e9a1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e9a4:	8d 70 ff             	lea    esi,[eax-0x1]
c000e9a7:	21 f3                	and    ebx,esi
c000e9a9:	0f af d9             	imul   ebx,ecx
c000e9ac:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e9af:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e9b3:	89 de                	mov    esi,ebx
c000e9b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e9b7:	31 c0                	xor    eax,eax
c000e9b9:	eb 61                	jmp    c000ea1c <VCache::read(unsigned long long, int, void*)+0x102>
c000e9bb:	90                   	nop
c000e9bc:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e9c0:	83 ec 0c             	sub    esp,0xc
c000e9c3:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e9c6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e9ca:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e9cd:	8b 36                	mov    esi,DWORD PTR [esi]
c000e9cf:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e9d2:	51                   	push   ecx
c000e9d3:	52                   	push   edx
c000e9d4:	50                   	push   eax
c000e9d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9d9:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e9dc:	83 c4 20             	add    esp,0x20
c000e9df:	85 c0                	test   eax,eax
c000e9e1:	75 39                	jne    c000ea1c <VCache::read(unsigned long long, int, void*)+0x102>
c000e9e3:	eb b3                	jmp    c000e998 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e9e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e9e8:	83 ec 0c             	sub    esp,0xc
c000e9eb:	57                   	push   edi
c000e9ec:	e8 53 fd ff ff       	call   c000e744 <VCache::invalidateReadBuffer()>
c000e9f1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e9f8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9fa:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e9fe:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000ea02:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000ea06:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ea0a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea0e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ea11:	83 c4 2c             	add    esp,0x2c
c000ea14:	5b                   	pop    ebx
c000ea15:	5e                   	pop    esi
c000ea16:	5f                   	pop    edi
c000ea17:	5d                   	pop    ebp
c000ea18:	ff e0                	jmp    eax
c000ea1a:	66 90                	xchg   ax,ax
c000ea1c:	83 c4 1c             	add    esp,0x1c
c000ea1f:	5b                   	pop    ebx
c000ea20:	5e                   	pop    esi
c000ea21:	5f                   	pop    edi
c000ea22:	5d                   	pop    ebp
c000ea23:	c3                   	ret    

c000ea24 <Video::putrect(int, int, int, int, unsigned int)>:
c000ea24:	55                   	push   ebp
c000ea25:	57                   	push   edi
c000ea26:	56                   	push   esi
c000ea27:	53                   	push   ebx
c000ea28:	83 ec 1c             	sub    esp,0x1c
c000ea2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea33:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea37:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea43:	01 df                	add    edi,ebx
c000ea45:	39 fb                	cmp    ebx,edi
c000ea47:	7d 1f                	jge    c000ea68 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea49:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea4d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea51:	7d 12                	jge    c000ea65 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea53:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea59:	53                   	push   ebx
c000ea5a:	55                   	push   ebp
c000ea5b:	45                   	inc    ebp
c000ea5c:	56                   	push   esi
c000ea5d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea60:	83 c4 10             	add    esp,0x10
c000ea63:	eb e8                	jmp    c000ea4d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea65:	43                   	inc    ebx
c000ea66:	eb dd                	jmp    c000ea45 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea68:	83 c4 1c             	add    esp,0x1c
c000ea6b:	5b                   	pop    ebx
c000ea6c:	5e                   	pop    esi
c000ea6d:	5f                   	pop    edi
c000ea6e:	5d                   	pop    ebp
c000ea6f:	c3                   	ret    

c000ea70 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea70:	55                   	push   ebp
c000ea71:	57                   	push   edi
c000ea72:	31 ff                	xor    edi,edi
c000ea74:	56                   	push   esi
c000ea75:	53                   	push   ebx
c000ea76:	83 ec 1c             	sub    esp,0x1c
c000ea79:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea7d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea81:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea88:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea91:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea95:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea99:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea9c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eaa0:	01 f9                	add    ecx,edi
c000eaa2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000eaa6:	7d 2f                	jge    c000ead7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000eaa8:	31 f6                	xor    esi,esi
c000eaaa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eaae:	01 f2                	add    edx,esi
c000eab0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000eab4:	7d 1a                	jge    c000ead0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000eab6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eab9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000eabc:	46                   	inc    esi
c000eabd:	51                   	push   ecx
c000eabe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000eac2:	52                   	push   edx
c000eac3:	55                   	push   ebp
c000eac4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eac7:	83 c4 10             	add    esp,0x10
c000eaca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eace:	eb da                	jmp    c000eaaa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ead0:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ead4:	47                   	inc    edi
c000ead5:	eb c5                	jmp    c000ea9c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ead7:	83 c4 1c             	add    esp,0x1c
c000eada:	5b                   	pop    ebx
c000eadb:	5e                   	pop    esi
c000eadc:	5f                   	pop    edi
c000eadd:	5d                   	pop    ebp
c000eade:	c3                   	ret    
c000eadf:	90                   	nop

c000eae0 <Video::blit(unsigned int*, int, int, int, int)>:
c000eae0:	55                   	push   ebp
c000eae1:	ba 00 00 00 00       	mov    edx,0x0
c000eae6:	57                   	push   edi
c000eae7:	56                   	push   esi
c000eae8:	53                   	push   ebx
c000eae9:	83 ec 1c             	sub    esp,0x1c
c000eaec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eaf0:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000eaf4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eaf8:	85 c0                	test   eax,eax
c000eafa:	0f 49 d0             	cmovns edx,eax
c000eafd:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000eb04:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eb08:	89 eb                	mov    ebx,ebp
c000eb0a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000eb0e:	01 ea                	add    edx,ebp
c000eb10:	39 da                	cmp    edx,ebx
c000eb12:	7e 54                	jle    c000eb68 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eb14:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb1a:	7c 4c                	jl     c000eb68 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eb1c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eb20:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eb24:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb28:	01 c1                	add    ecx,eax
c000eb2a:	39 f9                	cmp    ecx,edi
c000eb2c:	7e 2f                	jle    c000eb5d <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000eb2e:	83 c2 04             	add    edx,0x4
c000eb31:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb37:	7c 21                	jl     c000eb5a <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000eb39:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eb3d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb3f:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000eb42:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000eb46:	55                   	push   ebp
c000eb47:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb4b:	56                   	push   esi
c000eb4c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb4f:	83 c4 10             	add    esp,0x10
c000eb52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb5a:	47                   	inc    edi
c000eb5b:	eb c7                	jmp    c000eb24 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000eb5d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000eb61:	43                   	inc    ebx
c000eb62:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000eb66:	eb a2                	jmp    c000eb0a <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000eb68:	83 c4 1c             	add    esp,0x1c
c000eb6b:	5b                   	pop    ebx
c000eb6c:	5e                   	pop    esi
c000eb6d:	5f                   	pop    edi
c000eb6e:	5d                   	pop    ebp
c000eb6f:	c3                   	ret    

c000eb70 <Video::clearScreen(unsigned int)>:
c000eb70:	57                   	push   edi
c000eb71:	56                   	push   esi
c000eb72:	53                   	push   ebx
c000eb73:	31 db                	xor    ebx,ebx
c000eb75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb79:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb7f:	7e 1f                	jle    c000eba0 <Video::clearScreen(unsigned int)+0x30>
c000eb81:	31 ff                	xor    edi,edi
c000eb83:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb89:	7e 12                	jle    c000eb9d <Video::clearScreen(unsigned int)+0x2d>
c000eb8b:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb91:	53                   	push   ebx
c000eb92:	57                   	push   edi
c000eb93:	47                   	inc    edi
c000eb94:	56                   	push   esi
c000eb95:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb98:	83 c4 10             	add    esp,0x10
c000eb9b:	eb e6                	jmp    c000eb83 <Video::clearScreen(unsigned int)+0x13>
c000eb9d:	43                   	inc    ebx
c000eb9e:	eb d9                	jmp    c000eb79 <Video::clearScreen(unsigned int)+0x9>
c000eba0:	5b                   	pop    ebx
c000eba1:	5e                   	pop    esi
c000eba2:	5f                   	pop    edi
c000eba3:	c3                   	ret    

c000eba4 <Video::putpixel(int, int, unsigned int)>:
c000eba4:	c7 44 24 04 88 1f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021f88
c000ebac:	e9 8e 2a 00 00       	jmp    c001163f <KePanic(char const*)>
c000ebb1:	90                   	nop

c000ebb2 <Video::readPixelApprox(int, int)>:
c000ebb2:	83 ec 18             	sub    esp,0x18
c000ebb5:	68 a9 1f 02 c0       	push   0xc0021fa9
c000ebba:	e8 80 2a 00 00       	call   c001163f <KePanic(char const*)>
c000ebbf:	31 c0                	xor    eax,eax
c000ebc1:	83 c4 1c             	add    esp,0x1c
c000ebc4:	c3                   	ret    
c000ebc5:	90                   	nop

c000ebc6 <Video::Video(char const*)>:
c000ebc6:	83 ec 0c             	sub    esp,0xc
c000ebc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebcd:	83 ec 08             	sub    esp,0x8
c000ebd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebd4:	50                   	push   eax
c000ebd5:	e8 be df ff ff       	call   c000cb98 <Device::Device(char const*)>
c000ebda:	83 c4 10             	add    esp,0x10
c000ebdd:	ba 24 20 02 c0       	mov    edx,0xc0022024
c000ebe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebe6:	89 10                	mov    DWORD PTR [eax],edx
c000ebe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebec:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ebf6:	90                   	nop
c000ebf7:	83 c4 0c             	add    esp,0xc
c000ebfa:	c3                   	ret    
c000ebfb:	90                   	nop

c000ebfc <Video::~Video()>:
c000ebfc:	83 ec 0c             	sub    esp,0xc
c000ebff:	ba 24 20 02 c0       	mov    edx,0xc0022024
c000ec04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec08:	89 10                	mov    DWORD PTR [eax],edx
c000ec0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec0e:	83 ec 0c             	sub    esp,0xc
c000ec11:	50                   	push   eax
c000ec12:	e8 eb dc ff ff       	call   c000c902 <Device::~Device()>
c000ec17:	83 c4 10             	add    esp,0x10
c000ec1a:	90                   	nop
c000ec1b:	83 c4 0c             	add    esp,0xc
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <Video::~Video()>:
c000ec20:	83 ec 0c             	sub    esp,0xc
c000ec23:	83 ec 0c             	sub    esp,0xc
c000ec26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec2a:	e8 cd ff ff ff       	call   c000ebfc <Video::~Video()>
c000ec2f:	83 c4 10             	add    esp,0x10
c000ec32:	83 ec 08             	sub    esp,0x8
c000ec35:	68 64 01 00 00       	push   0x164
c000ec3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec3e:	e8 29 bc ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c000ec43:	83 c4 10             	add    esp,0x10
c000ec46:	83 c4 0c             	add    esp,0xc
c000ec49:	c3                   	ret    

c000ec4a <Video::isMonochrome()>:
c000ec4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec4e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec54:	c3                   	ret    
c000ec55:	90                   	nop

c000ec56 <Video::getWidth()>:
c000ec56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec5a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec60:	c3                   	ret    
c000ec61:	90                   	nop

c000ec62 <Video::getHeight()>:
c000ec62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec66:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec6c:	c3                   	ret    
c000ec6d:	90                   	nop

c000ec6e <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec6e:	55                   	push   ebp
c000ec6f:	57                   	push   edi
c000ec70:	56                   	push   esi
c000ec71:	53                   	push   ebx
c000ec72:	83 ec 2c             	sub    esp,0x2c
c000ec75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec79:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ec7d:	83 f8 01             	cmp    eax,0x1
c000ec80:	19 c9                	sbb    ecx,ecx
c000ec82:	31 db                	xor    ebx,ebx
c000ec84:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec88:	89 ce                	mov    esi,ecx
c000ec8a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec92:	f7 d6                	not    esi
c000ec94:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ec9a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec9e:	01 d8                	add    eax,ebx
c000eca0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eca4:	57                   	push   edi
c000eca5:	e8 b8 ff ff ff       	call   c000ec62 <Video::getHeight()>
c000ecaa:	59                   	pop    ecx
c000ecab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ecaf:	7e 70                	jle    c000ed21 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ecb1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecb5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ecb9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ecbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ecc0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecc4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000eccb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eccf:	89 e8                	mov    eax,ebp
c000ecd1:	83 c0 20             	add    eax,0x20
c000ecd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ecd8:	57                   	push   edi
c000ecd9:	e8 78 ff ff ff       	call   c000ec56 <Video::getWidth()>
c000ecde:	5a                   	pop    edx
c000ecdf:	39 c5                	cmp    ebp,eax
c000ece1:	7d 34                	jge    c000ed17 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ece3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ece8:	74 05                	je     c000ecef <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ecea:	8b 07                	mov    eax,DWORD PTR [edi]
c000ecec:	56                   	push   esi
c000eced:	eb 0d                	jmp    c000ecfc <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ecef:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ecf4:	74 12                	je     c000ed08 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ecf6:	8b 07                	mov    eax,DWORD PTR [edi]
c000ecf8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ecfc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed00:	55                   	push   ebp
c000ed01:	57                   	push   edi
c000ed02:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ed05:	83 c4 10             	add    esp,0x10
c000ed08:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ed0c:	45                   	inc    ebp
c000ed0d:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ed11:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ed15:	75 c1                	jne    c000ecd8 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ed17:	43                   	inc    ebx
c000ed18:	83 fb 20             	cmp    ebx,0x20
c000ed1b:	0f 85 79 ff ff ff    	jne    c000ec9a <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ed21:	83 c4 2c             	add    esp,0x2c
c000ed24:	5b                   	pop    ebx
c000ed25:	5e                   	pop    esi
c000ed26:	5f                   	pop    edi
c000ed27:	5d                   	pop    ebp
c000ed28:	c3                   	ret    
c000ed29:	90                   	nop

c000ed2a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ed2a:	55                   	push   ebp
c000ed2b:	57                   	push   edi
c000ed2c:	56                   	push   esi
c000ed2d:	53                   	push   ebx
c000ed2e:	83 ec 28             	sub    esp,0x28
c000ed31:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed35:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ed39:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ed3d:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ed41:	c1 e7 08             	shl    edi,0x8
c000ed44:	01 c7                	add    edi,eax
c000ed46:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ed4a:	c1 e6 08             	shl    esi,0x8
c000ed4d:	01 f0                	add    eax,esi
c000ed4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed57:	0f af c7             	imul   eax,edi
c000ed5a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed61:	50                   	push   eax
c000ed62:	e8 cc 8d ff ff       	call   c0007b33 <malloc>
c000ed67:	83 c4 10             	add    esp,0x10
c000ed6a:	85 c0                	test   eax,eax
c000ed6c:	89 c5                	mov    ebp,eax
c000ed6e:	75 10                	jne    c000ed80 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed70:	83 ec 0c             	sub    esp,0xc
c000ed73:	68 d4 1f 02 c0       	push   0xc0021fd4
c000ed78:	e8 c2 28 00 00       	call   c001163f <KePanic(char const*)>
c000ed7d:	83 c4 10             	add    esp,0x10
c000ed80:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed84:	ba 12 00 00 00       	mov    edx,0x12
c000ed89:	85 c0                	test   eax,eax
c000ed8b:	74 11                	je     c000ed9e <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed8d:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed91:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed95:	c1 fa 03             	sar    edx,0x3
c000ed98:	0f af d1             	imul   edx,ecx
c000ed9b:	83 c2 12             	add    edx,0x12
c000ed9e:	85 ff                	test   edi,edi
c000eda0:	74 06                	je     c000eda8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000eda2:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000eda6:	75 12                	jne    c000edba <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000eda8:	83 ec 0c             	sub    esp,0xc
c000edab:	68 e4 1f 02 c0       	push   0xc0021fe4
c000edb0:	e8 b5 bb ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000edb5:	e9 b8 00 00 00       	jmp    c000ee72 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000edba:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000edbe:	83 f9 02             	cmp    ecx,0x2
c000edc1:	0f 85 96 00 00 00    	jne    c000ee5d <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000edc7:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000edcc:	75 0e                	jne    c000eddc <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000edce:	85 c0                	test   eax,eax
c000edd0:	75 0a                	jne    c000eddc <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000edd2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000edd5:	83 e8 18             	sub    eax,0x18
c000edd8:	a8 f7                	test   al,0xf7
c000edda:	74 0a                	je     c000ede6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000eddc:	83 ec 0c             	sub    esp,0xc
c000eddf:	68 f9 1f 02 c0       	push   0xc0021ff9
c000ede4:	eb 7f                	jmp    c000ee65 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ede6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000edee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000edf6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000edfa:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000edfe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ee06:	75 0c                	jne    c000ee14 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ee08:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000ee0d:	c1 e1 18             	shl    ecx,0x18
c000ee10:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ee14:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ee19:	46                   	inc    esi
c000ee1a:	89 c8                	mov    eax,ecx
c000ee1c:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ee21:	c1 e0 10             	shl    eax,0x10
c000ee24:	c1 e1 08             	shl    ecx,0x8
c000ee27:	09 c1                	or     ecx,eax
c000ee29:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ee2d:	09 c1                	or     ecx,eax
c000ee2f:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ee33:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ee37:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ee3b:	c1 f8 03             	sar    eax,0x3
c000ee3e:	01 c2                	add    edx,eax
c000ee40:	89 f0                	mov    eax,esi
c000ee42:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee46:	39 c7                	cmp    edi,eax
c000ee48:	7f b0                	jg     c000edfa <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee4a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee4e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee52:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee55:	7e 22                	jle    c000ee79 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee57:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ee5b:	eb 99                	jmp    c000edf6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee5d:	50                   	push   eax
c000ee5e:	50                   	push   eax
c000ee5f:	51                   	push   ecx
c000ee60:	68 07 20 02 c0       	push   0xc0022007
c000ee65:	e8 00 bb ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000ee6a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee6d:	e8 d1 8c ff ff       	call   c0007b43 <free>
c000ee72:	83 c4 10             	add    esp,0x10
c000ee75:	31 ed                	xor    ebp,ebp
c000ee77:	eb 0f                	jmp    c000ee88 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee7d:	89 38                	mov    DWORD PTR [eax],edi
c000ee7f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee83:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ee86:	89 38                	mov    DWORD PTR [eax],edi
c000ee88:	83 c4 1c             	add    esp,0x1c
c000ee8b:	89 e8                	mov    eax,ebp
c000ee8d:	5b                   	pop    ebx
c000ee8e:	5e                   	pop    esi
c000ee8f:	5f                   	pop    edi
c000ee90:	5d                   	pop    ebp
c000ee91:	c3                   	ret    

c000ee92 <Video::putTGA(int, int, unsigned char*, int)>:
c000ee92:	55                   	push   ebp
c000ee93:	57                   	push   edi
c000ee94:	56                   	push   esi
c000ee95:	53                   	push   ebx
c000ee96:	83 ec 28             	sub    esp,0x28
c000ee99:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee9d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eea1:	50                   	push   eax
c000eea2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eea6:	50                   	push   eax
c000eea7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eeab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eeaf:	57                   	push   edi
c000eeb0:	e8 75 fe ff ff       	call   c000ed2a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eeb5:	83 c4 20             	add    esp,0x20
c000eeb8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eebc:	85 c0                	test   eax,eax
c000eebe:	74 35                	je     c000eef5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eec0:	89 c6                	mov    esi,eax
c000eec2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eec6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eeca:	39 d8                	cmp    eax,ebx
c000eecc:	7e 27                	jle    c000eef5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eece:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eed2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eed6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000eeda:	39 e9                	cmp    ecx,ebp
c000eedc:	7e 14                	jle    c000eef2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eede:	83 c6 04             	add    esi,0x4
c000eee1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000eee3:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000eee6:	53                   	push   ebx
c000eee7:	55                   	push   ebp
c000eee8:	45                   	inc    ebp
c000eee9:	57                   	push   edi
c000eeea:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eeed:	83 c4 10             	add    esp,0x10
c000eef0:	eb e0                	jmp    c000eed2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eef2:	43                   	inc    ebx
c000eef3:	eb cd                	jmp    c000eec2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eef5:	83 c4 1c             	add    esp,0x1c
c000eef8:	5b                   	pop    ebx
c000eef9:	5e                   	pop    esi
c000eefa:	5f                   	pop    edi
c000eefb:	5d                   	pop    ebp
c000eefc:	c3                   	ret    
c000eefd:	66 90                	xchg   ax,ax
c000eeff:	90                   	nop

c000ef00 <ACPI::close(int, int, void*)>:
c000ef00:	83 ec 1c             	sub    esp,0x1c
c000ef03:	83 ec 0c             	sub    esp,0xc
c000ef06:	68 68 20 02 c0       	push   0xc0022068
c000ef0b:	e8 5a ba ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000ef10:	83 c4 10             	add    esp,0x10
c000ef13:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ef1b:	74 0b                	je     c000ef28 <ACPI::close(int, int, void*)+0x28>
c000ef1d:	b8 00 00 00 00       	mov    eax,0x0
c000ef22:	e9 01 01 00 00       	jmp    c000f028 <ACPI::close(int, int, void*)+0x128>
c000ef27:	90                   	nop
c000ef28:	83 ec 0c             	sub    esp,0xc
c000ef2b:	68 77 20 02 c0       	push   0xc0022077
c000ef30:	e8 35 ba ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000ef35:	83 c4 10             	add    esp,0x10
c000ef38:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ef3d:	75 45                	jne    c000ef84 <ACPI::close(int, int, void*)+0x84>
c000ef3f:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef44:	83 ec 08             	sub    esp,0x8
c000ef47:	50                   	push   eax
c000ef48:	68 86 20 02 c0       	push   0xc0022086
c000ef4d:	e8 18 ba ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000ef52:	83 c4 10             	add    esp,0x10
c000ef55:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef5a:	85 c0                	test   eax,eax
c000ef5c:	74 0a                	je     c000ef68 <ACPI::close(int, int, void*)+0x68>
c000ef5e:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef63:	ff d0                	call   eax
c000ef65:	8d 76 00             	lea    esi,[esi+0x0]
c000ef68:	83 ec 0c             	sub    esp,0xc
c000ef6b:	68 54 22 02 c0       	push   0xc0022254
c000ef70:	e8 ca 26 00 00       	call   c001163f <KePanic(char const*)>
c000ef75:	83 c4 10             	add    esp,0x10
c000ef78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef7d:	e9 a6 00 00 00       	jmp    c000f028 <ACPI::close(int, int, void*)+0x128>
c000ef82:	66 90                	xchg   ax,ax
c000ef84:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef89:	0f 85 81 00 00 00    	jne    c000f010 <ACPI::close(int, int, void*)+0x110>
c000ef8f:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef94:	83 ec 08             	sub    esp,0x8
c000ef97:	50                   	push   eax
c000ef98:	68 a4 20 02 c0       	push   0xc00220a4
c000ef9d:	e8 c8 b9 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000efa2:	83 c4 10             	add    esp,0x10
c000efa5:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000efaa:	85 c0                	test   eax,eax
c000efac:	74 0a                	je     c000efb8 <ACPI::close(int, int, void*)+0xb8>
c000efae:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000efb3:	ff d0                	call   eax
c000efb5:	8d 76 00             	lea    esi,[esi+0x0]
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 bf 20 02 c0       	push   0xc00220bf
c000efc0:	e8 a5 b9 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000efcd:	8d 76 00             	lea    esi,[esi+0x0]
c000efd0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000efd5:	83 e0 02             	and    eax,0x2
c000efd8:	74 1e                	je     c000eff8 <ACPI::close(int, int, void*)+0xf8>
c000efda:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000efe1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efe5:	89 c2                	mov    edx,eax
c000efe7:	ec                   	in     al,dx
c000efe8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000efec:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eff0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eff4:	eb da                	jmp    c000efd0 <ACPI::close(int, int, void*)+0xd0>
c000eff6:	66 90                	xchg   ax,ax
c000eff8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000efff:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000f004:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f008:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f00c:	ee                   	out    dx,al
c000f00d:	8d 76 00             	lea    esi,[esi+0x0]
c000f010:	83 ec 0c             	sub    esp,0xc
c000f013:	68 d1 20 02 c0       	push   0xc00220d1
c000f018:	e8 4d b9 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c000f01d:	83 c4 10             	add    esp,0x10
c000f020:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f025:	8d 76 00             	lea    esi,[esi+0x0]
c000f028:	83 c4 1c             	add    esp,0x1c
c000f02b:	c3                   	ret    

c000f02c <findRSDP()>:
c000f02c:	83 ec 1c             	sub    esp,0x1c
c000f02f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f034:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f03a:	83 e0 04             	and    eax,0x4
c000f03d:	0f b6 c0             	movzx  eax,al
c000f040:	85 c0                	test   eax,eax
c000f042:	75 08                	jne    c000f04c <findRSDP()+0x20>
c000f044:	b8 00 00 00 00       	mov    eax,0x0
c000f049:	eb 75                	jmp    c000f0c0 <findRSDP()+0x94>
c000f04b:	90                   	nop
c000f04c:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000f051:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f056:	7f 1c                	jg     c000f074 <findRSDP()+0x48>
c000f058:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f05d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f063:	83 e2 fb             	and    edx,0xfffffffb
c000f066:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f06c:	b8 00 00 00 00       	mov    eax,0x0
c000f071:	eb 4d                	jmp    c000f0c0 <findRSDP()+0x94>
c000f073:	90                   	nop
c000f074:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f07c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f084:	77 32                	ja     c000f0b8 <findRSDP()+0x8c>
c000f086:	83 ec 04             	sub    esp,0x4
c000f089:	6a 08                	push   0x8
c000f08b:	68 e0 20 02 c0       	push   0xc00220e0
c000f090:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f094:	e8 e7 12 ff ff       	call   c0000380 <memcmp>
c000f099:	83 c4 10             	add    esp,0x10
c000f09c:	85 c0                	test   eax,eax
c000f09e:	0f 94 c0             	sete   al
c000f0a1:	0f b6 c0             	movzx  eax,al
c000f0a4:	85 c0                	test   eax,eax
c000f0a6:	74 08                	je     c000f0b0 <findRSDP()+0x84>
c000f0a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0ac:	eb 12                	jmp    c000f0c0 <findRSDP()+0x94>
c000f0ae:	66 90                	xchg   ax,ax
c000f0b0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f0b5:	eb c5                	jmp    c000f07c <findRSDP()+0x50>
c000f0b7:	90                   	nop
c000f0b8:	b8 00 00 00 00       	mov    eax,0x0
c000f0bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0c0:	83 c4 1c             	add    esp,0x1c
c000f0c3:	c3                   	ret    

c000f0c4 <loadACPITables(unsigned char*)>:
c000f0c4:	57                   	push   edi
c000f0c5:	56                   	push   esi
c000f0c6:	53                   	push   ebx
c000f0c7:	83 ec 60             	sub    esp,0x60
c000f0ca:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f0cf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0d5:	83 e0 04             	and    eax,0x4
c000f0d8:	0f b6 c0             	movzx  eax,al
c000f0db:	85 c0                	test   eax,eax
c000f0dd:	0f 84 41 02 00 00    	je     c000f324 <loadACPITables(unsigned char*)+0x260>
c000f0e3:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f0e8:	0f b6 c0             	movzx  eax,al
c000f0eb:	85 c0                	test   eax,eax
c000f0ed:	74 79                	je     c000f168 <loadACPITables(unsigned char*)+0xa4>
c000f0ef:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0f3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f0f7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f0fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0fe:	83 e8 24             	sub    eax,0x24
c000f101:	c1 e8 03             	shr    eax,0x3
c000f104:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f108:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f110:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f114:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f118:	0f 8d ba 00 00 00    	jge    c000f1d8 <loadACPITables(unsigned char*)+0x114>
c000f11e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f122:	83 c0 24             	add    eax,0x24
c000f125:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f129:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f12d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f131:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f135:	c1 e0 03             	shl    eax,0x3
c000f138:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f13c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f143:	8b 00                	mov    eax,DWORD PTR [eax]
c000f145:	89 c1                	mov    ecx,eax
c000f147:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f14c:	8d 50 01             	lea    edx,[eax+0x1]
c000f14f:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f155:	89 ca                	mov    edx,ecx
c000f157:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f15e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f163:	eb ab                	jmp    c000f110 <loadACPITables(unsigned char*)+0x4c>
c000f165:	8d 76 00             	lea    esi,[esi+0x0]
c000f168:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f16c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f170:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f174:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f177:	83 e8 24             	sub    eax,0x24
c000f17a:	c1 e8 02             	shr    eax,0x2
c000f17d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f181:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f189:	8d 76 00             	lea    esi,[esi+0x0]
c000f18c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f190:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f194:	7d 42                	jge    c000f1d8 <loadACPITables(unsigned char*)+0x114>
c000f196:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f19a:	83 c0 24             	add    eax,0x24
c000f19d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f1a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f1a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f1a9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f1ad:	c1 e0 02             	shl    eax,0x2
c000f1b0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f1b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f1b8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f1ba:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f1bf:	8d 50 01             	lea    edx,[eax+0x1]
c000f1c2:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f1c8:	89 ca                	mov    edx,ecx
c000f1ca:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f1d1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f1d6:	eb b4                	jmp    c000f18c <loadACPITables(unsigned char*)+0xc8>
c000f1d8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f1e0:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f1e5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f1e9:	0f 8d 39 01 00 00    	jge    c000f328 <loadACPITables(unsigned char*)+0x264>
c000f1ef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1f3:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f1fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f202:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f20a:	25 ff 0f 00 00       	and    eax,0xfff
c000f20f:	89 c6                	mov    esi,eax
c000f211:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f217:	83 ec 0c             	sub    esp,0xc
c000f21a:	6a 01                	push   0x1
c000f21c:	e8 34 a4 ff ff       	call   c0009655 <Virt::allocateKernelVirtualPages(int)>
c000f221:	83 c4 10             	add    esp,0x10
c000f224:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f228:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f22e:	83 ec 0c             	sub    esp,0xc
c000f231:	6a 01                	push   0x1
c000f233:	6a 01                	push   0x1
c000f235:	50                   	push   eax
c000f236:	52                   	push   edx
c000f237:	53                   	push   ebx
c000f238:	e8 2b ad ff ff       	call   c0009f68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f23d:	83 c4 20             	add    esp,0x20
c000f240:	09 f0                	or     eax,esi
c000f242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f246:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f24a:	c1 e0 03             	shl    eax,0x3
c000f24d:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f252:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f256:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f25a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f25e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f266:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f26a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f26e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f272:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f276:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f27a:	89 c6                	mov    esi,eax
c000f27c:	89 d7                	mov    edi,edx
c000f27e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f280:	89 c8                	mov    eax,ecx
c000f282:	89 fa                	mov    edx,edi
c000f284:	89 f3                	mov    ebx,esi
c000f286:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f28a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f28e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f292:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f296:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f299:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f29d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2a1:	05 00 10 00 00       	add    eax,0x1000
c000f2a6:	c1 e8 0c             	shr    eax,0xc
c000f2a9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f2b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2b9:	25 ff 0f 00 00       	and    eax,0xfff
c000f2be:	89 c6                	mov    esi,eax
c000f2c0:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2c6:	83 ec 0c             	sub    esp,0xc
c000f2c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f2cd:	e8 83 a3 ff ff       	call   c0009655 <Virt::allocateKernelVirtualPages(int)>
c000f2d2:	83 c4 10             	add    esp,0x10
c000f2d5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f2d9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2df:	83 ec 0c             	sub    esp,0xc
c000f2e2:	6a 01                	push   0x1
c000f2e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f2e8:	50                   	push   eax
c000f2e9:	52                   	push   edx
c000f2ea:	53                   	push   ebx
c000f2eb:	e8 78 ac ff ff       	call   c0009f68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2f0:	83 c4 20             	add    esp,0x20
c000f2f3:	09 f0                	or     eax,esi
c000f2f5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f2fd:	83 ec 0c             	sub    esp,0xc
c000f300:	50                   	push   eax
c000f301:	e8 63 a6 ff ff       	call   c0009969 <Virt::freeKernelVirtualPages(unsigned long)>
c000f306:	83 c4 10             	add    esp,0x10
c000f309:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f30d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f311:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f318:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f31d:	e9 be fe ff ff       	jmp    c000f1e0 <loadACPITables(unsigned char*)+0x11c>
c000f322:	66 90                	xchg   ax,ax
c000f324:	90                   	nop
c000f325:	8d 76 00             	lea    esi,[esi+0x0]
c000f328:	83 c4 60             	add    esp,0x60
c000f32b:	5b                   	pop    ebx
c000f32c:	5e                   	pop    esi
c000f32d:	5f                   	pop    edi
c000f32e:	c3                   	ret    
c000f32f:	90                   	nop

c000f330 <findRSDT(unsigned char*)>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 50             	sub    esp,0x50
c000f336:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f33b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f341:	83 e0 04             	and    eax,0x4
c000f344:	0f b6 c0             	movzx  eax,al
c000f347:	85 c0                	test   eax,eax
c000f349:	75 0d                	jne    c000f358 <findRSDT(unsigned char*)+0x28>
c000f34b:	b8 00 00 00 00       	mov    eax,0x0
c000f350:	e9 2b 01 00 00       	jmp    c000f480 <findRSDT(unsigned char*)+0x150>
c000f355:	8d 76 00             	lea    esi,[esi+0x0]
c000f358:	89 e0                	mov    eax,esp
c000f35a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f35e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f362:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f366:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f36e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f372:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f376:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f37a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f37e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f382:	89 c6                	mov    esi,eax
c000f384:	89 d7                	mov    edi,edx
c000f386:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f388:	89 c8                	mov    eax,ecx
c000f38a:	89 fa                	mov    edx,edi
c000f38c:	89 f3                	mov    ebx,esi
c000f38e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f392:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f396:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f39a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f39e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f3a2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f3aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3ba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f3be:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f3c2:	25 ff 0f 00 00       	and    eax,0xfff
c000f3c7:	89 c6                	mov    esi,eax
c000f3c9:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3cf:	83 ec 0c             	sub    esp,0xc
c000f3d2:	6a 02                	push   0x2
c000f3d4:	e8 7c a2 ff ff       	call   c0009655 <Virt::allocateKernelVirtualPages(int)>
c000f3d9:	83 c4 10             	add    esp,0x10
c000f3dc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f3e0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3e6:	83 ec 0c             	sub    esp,0xc
c000f3e9:	6a 01                	push   0x1
c000f3eb:	6a 02                	push   0x2
c000f3ed:	50                   	push   eax
c000f3ee:	52                   	push   edx
c000f3ef:	53                   	push   ebx
c000f3f0:	e8 73 ab ff ff       	call   c0009f68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3f5:	83 c4 20             	add    esp,0x20
c000f3f8:	09 f0                	or     eax,esi
c000f3fa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f402:	25 ff 0f 00 00       	and    eax,0xfff
c000f407:	89 c6                	mov    esi,eax
c000f409:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f40f:	83 ec 0c             	sub    esp,0xc
c000f412:	6a 02                	push   0x2
c000f414:	e8 3c a2 ff ff       	call   c0009655 <Virt::allocateKernelVirtualPages(int)>
c000f419:	83 c4 10             	add    esp,0x10
c000f41c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f420:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f426:	83 ec 0c             	sub    esp,0xc
c000f429:	6a 01                	push   0x1
c000f42b:	6a 02                	push   0x2
c000f42d:	50                   	push   eax
c000f42e:	52                   	push   edx
c000f42f:	53                   	push   ebx
c000f430:	e8 33 ab ff ff       	call   c0009f68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f435:	83 c4 20             	add    esp,0x20
c000f438:	09 f0                	or     eax,esi
c000f43a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f43e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f443:	85 c0                	test   eax,eax
c000f445:	75 11                	jne    c000f458 <findRSDT(unsigned char*)+0x128>
c000f447:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f44e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f452:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f456:	eb 24                	jmp    c000f47c <findRSDT(unsigned char*)+0x14c>
c000f458:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f45d:	83 f8 02             	cmp    eax,0x2
c000f460:	75 12                	jne    c000f474 <findRSDT(unsigned char*)+0x144>
c000f462:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f469:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f46d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f471:	eb 09                	jmp    c000f47c <findRSDT(unsigned char*)+0x14c>
c000f473:	90                   	nop
c000f474:	b8 00 00 00 00       	mov    eax,0x0
c000f479:	eb 05                	jmp    c000f480 <findRSDT(unsigned char*)+0x150>
c000f47b:	90                   	nop
c000f47c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f480:	83 c4 50             	add    esp,0x50
c000f483:	5b                   	pop    ebx
c000f484:	5e                   	pop    esi
c000f485:	5f                   	pop    edi
c000f486:	c3                   	ret    
c000f487:	90                   	nop

c000f488 <findDataTable(unsigned char*, char*)>:
c000f488:	83 ec 1c             	sub    esp,0x1c
c000f48b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f490:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f496:	83 e0 04             	and    eax,0x4
c000f499:	0f b6 c0             	movzx  eax,al
c000f49c:	85 c0                	test   eax,eax
c000f49e:	75 08                	jne    c000f4a8 <findDataTable(unsigned char*, char*)+0x20>
c000f4a0:	b8 00 00 00 00       	mov    eax,0x0
c000f4a5:	eb 5d                	jmp    c000f504 <findDataTable(unsigned char*, char*)+0x7c>
c000f4a7:	90                   	nop
c000f4a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f4b0:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f4b5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f4b9:	7d 41                	jge    c000f4fc <findDataTable(unsigned char*, char*)+0x74>
c000f4bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4bf:	c1 e0 03             	shl    eax,0x3
c000f4c2:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f4c7:	83 ec 04             	sub    esp,0x4
c000f4ca:	6a 04                	push   0x4
c000f4cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4d0:	50                   	push   eax
c000f4d1:	e8 aa 0e ff ff       	call   c0000380 <memcmp>
c000f4d6:	83 c4 10             	add    esp,0x10
c000f4d9:	85 c0                	test   eax,eax
c000f4db:	0f 94 c0             	sete   al
c000f4de:	0f b6 c0             	movzx  eax,al
c000f4e1:	85 c0                	test   eax,eax
c000f4e3:	74 0f                	je     c000f4f4 <findDataTable(unsigned char*, char*)+0x6c>
c000f4e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e9:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f4f0:	eb 12                	jmp    c000f504 <findDataTable(unsigned char*, char*)+0x7c>
c000f4f2:	66 90                	xchg   ax,ax
c000f4f4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f4f9:	eb b5                	jmp    c000f4b0 <findDataTable(unsigned char*, char*)+0x28>
c000f4fb:	90                   	nop
c000f4fc:	b8 00 00 00 00       	mov    eax,0x0
c000f501:	8d 76 00             	lea    esi,[esi+0x0]
c000f504:	83 c4 1c             	add    esp,0x1c
c000f507:	c3                   	ret    

c000f508 <scanMADT()>:
c000f508:	53                   	push   ebx
c000f509:	83 ec 38             	sub    esp,0x38
c000f50c:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f511:	25 00 04 00 00       	and    eax,0x400
c000f516:	74 14                	je     c000f52c <scanMADT()+0x24>
c000f518:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f51d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f523:	83 e2 fb             	and    edx,0xfffffffb
c000f526:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f52c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f531:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f537:	83 e0 04             	and    eax,0x4
c000f53a:	0f b6 c0             	movzx  eax,al
c000f53d:	85 c0                	test   eax,eax
c000f53f:	0f 84 6b 04 00 00    	je     c000f9b0 <scanMADT()+0x4a8>
c000f545:	e8 e2 fa ff ff       	call   c000f02c <findRSDP()>
c000f54a:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f54f:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f554:	85 c0                	test   eax,eax
c000f556:	75 1c                	jne    c000f574 <scanMADT()+0x6c>
c000f558:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f55d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f563:	83 e2 fb             	and    edx,0xfffffffb
c000f566:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f56c:	e9 47 04 00 00       	jmp    c000f9b8 <scanMADT()+0x4b0>
c000f571:	8d 76 00             	lea    esi,[esi+0x0]
c000f574:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f579:	83 ec 0c             	sub    esp,0xc
c000f57c:	50                   	push   eax
c000f57d:	e8 ae fd ff ff       	call   c000f330 <findRSDT(unsigned char*)>
c000f582:	83 c4 10             	add    esp,0x10
c000f585:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f58a:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f58f:	85 c0                	test   eax,eax
c000f591:	75 19                	jne    c000f5ac <scanMADT()+0xa4>
c000f593:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f598:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f59e:	83 e2 fb             	and    edx,0xfffffffb
c000f5a1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5a7:	e9 0c 04 00 00       	jmp    c000f9b8 <scanMADT()+0x4b0>
c000f5ac:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f5b1:	83 ec 0c             	sub    esp,0xc
c000f5b4:	50                   	push   eax
c000f5b5:	e8 0a fb ff ff       	call   c000f0c4 <loadACPITables(unsigned char*)>
c000f5ba:	83 c4 10             	add    esp,0x10
c000f5bd:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f5c2:	83 ec 08             	sub    esp,0x8
c000f5c5:	68 e9 20 02 c0       	push   0xc00220e9
c000f5ca:	50                   	push   eax
c000f5cb:	e8 b8 fe ff ff       	call   c000f488 <findDataTable(unsigned char*, char*)>
c000f5d0:	83 c4 10             	add    esp,0x10
c000f5d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f5d7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f5dc:	75 1a                	jne    c000f5f8 <scanMADT()+0xf0>
c000f5de:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f5e3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f5e9:	83 e2 fe             	and    edx,0xfffffffe
c000f5ec:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5f2:	e9 c1 03 00 00       	jmp    c000f9b8 <scanMADT()+0x4b0>
c000f5f7:	90                   	nop
c000f5f8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f600:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f604:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f607:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f60b:	0f 87 a7 03 00 00    	ja     c000f9b8 <scanMADT()+0x4b0>
c000f611:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f619:	0f 87 99 03 00 00    	ja     c000f9b8 <scanMADT()+0x4b0>
c000f61f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f623:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f627:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f62b:	8d 50 01             	lea    edx,[eax+0x1]
c000f62e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f632:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f636:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f63a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f63e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f642:	8d 50 01             	lea    edx,[eax+0x1]
c000f645:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f649:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f64d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f651:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f655:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f65a:	83 f8 02             	cmp    eax,0x2
c000f65d:	0f 86 51 03 00 00    	jbe    c000f9b4 <scanMADT()+0x4ac>
c000f663:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f668:	85 c0                	test   eax,eax
c000f66a:	75 58                	jne    c000f6c4 <scanMADT()+0x1bc>
c000f66c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f670:	8d 50 01             	lea    edx,[eax+0x1]
c000f673:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f677:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f67d:	0f b6 d2             	movzx  edx,dl
c000f680:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f684:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f688:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f68e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f692:	8d 50 01             	lea    edx,[eax+0x1]
c000f695:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f699:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f69f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f6a2:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f6a8:	0f b6 d2             	movzx  edx,dl
c000f6ab:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f6af:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6b3:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f6b9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f6be:	e9 d9 02 00 00       	jmp    c000f99c <scanMADT()+0x494>
c000f6c3:	90                   	nop
c000f6c4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f6c9:	83 f8 01             	cmp    eax,0x1
c000f6cc:	0f 85 1a 01 00 00    	jne    c000f7ec <scanMADT()+0x2e4>
c000f6d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6d6:	8d 50 01             	lea    edx,[eax+0x1]
c000f6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6dd:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f6e3:	0f b6 d2             	movzx  edx,dl
c000f6e6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f6ea:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6ee:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f6f4:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f6f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f701:	01 d0                	add    eax,edx
c000f703:	83 c0 2c             	add    eax,0x2c
c000f706:	8a 00                	mov    al,BYTE PTR [eax]
c000f708:	0f b6 d0             	movzx  edx,al
c000f70b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f70f:	8d 48 01             	lea    ecx,[eax+0x1]
c000f712:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f716:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f71a:	0f b6 c0             	movzx  eax,al
c000f71d:	c1 e0 08             	shl    eax,0x8
c000f720:	89 d1                	mov    ecx,edx
c000f722:	09 c1                	or     ecx,eax
c000f724:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f728:	8d 50 02             	lea    edx,[eax+0x2]
c000f72b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f72f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f733:	0f b6 c0             	movzx  eax,al
c000f736:	c1 e0 10             	shl    eax,0x10
c000f739:	09 c1                	or     ecx,eax
c000f73b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f73f:	8d 50 03             	lea    edx,[eax+0x3]
c000f742:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f746:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f74a:	0f b6 c0             	movzx  eax,al
c000f74d:	c1 e0 18             	shl    eax,0x18
c000f750:	09 c1                	or     ecx,eax
c000f752:	89 ca                	mov    edx,ecx
c000f754:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f759:	0f b6 c0             	movzx  eax,al
c000f75c:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f763:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f768:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f76c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f770:	01 d0                	add    eax,edx
c000f772:	83 c0 2c             	add    eax,0x2c
c000f775:	8a 00                	mov    al,BYTE PTR [eax]
c000f777:	0f b6 d0             	movzx  edx,al
c000f77a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f77e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f781:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f785:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f789:	0f b6 c0             	movzx  eax,al
c000f78c:	c1 e0 08             	shl    eax,0x8
c000f78f:	89 d1                	mov    ecx,edx
c000f791:	09 c1                	or     ecx,eax
c000f793:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f797:	8d 50 02             	lea    edx,[eax+0x2]
c000f79a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f79e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7a2:	0f b6 c0             	movzx  eax,al
c000f7a5:	c1 e0 10             	shl    eax,0x10
c000f7a8:	09 c1                	or     ecx,eax
c000f7aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7ae:	8d 50 03             	lea    edx,[eax+0x3]
c000f7b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7b5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7b9:	0f b6 c0             	movzx  eax,al
c000f7bc:	c1 e0 18             	shl    eax,0x18
c000f7bf:	09 c1                	or     ecx,eax
c000f7c1:	89 ca                	mov    edx,ecx
c000f7c3:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f7c8:	0f b6 c0             	movzx  eax,al
c000f7cb:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f7d2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f7d7:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f7dc:	83 c0 01             	add    eax,0x1
c000f7df:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f7e4:	e9 b3 01 00 00       	jmp    c000f99c <scanMADT()+0x494>
c000f7e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f7ec:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7f1:	83 f8 02             	cmp    eax,0x2
c000f7f4:	0f 85 ea 00 00 00    	jne    c000f8e4 <scanMADT()+0x3dc>
c000f7fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7fe:	8d 50 01             	lea    edx,[eax+0x1]
c000f801:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f805:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f809:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f80d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f811:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f815:	8d 50 01             	lea    edx,[eax+0x1]
c000f818:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f81c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f820:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f824:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f828:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f82c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f830:	01 d0                	add    eax,edx
c000f832:	83 c0 2c             	add    eax,0x2c
c000f835:	8a 00                	mov    al,BYTE PTR [eax]
c000f837:	0f b6 d0             	movzx  edx,al
c000f83a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f83e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f841:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f845:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f849:	0f b6 c0             	movzx  eax,al
c000f84c:	c1 e0 08             	shl    eax,0x8
c000f84f:	89 d1                	mov    ecx,edx
c000f851:	09 c1                	or     ecx,eax
c000f853:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f857:	8d 50 02             	lea    edx,[eax+0x2]
c000f85a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f85e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f862:	0f b6 c0             	movzx  eax,al
c000f865:	c1 e0 10             	shl    eax,0x10
c000f868:	09 c1                	or     ecx,eax
c000f86a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f86e:	8d 50 03             	lea    edx,[eax+0x3]
c000f871:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f875:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f879:	0f b6 c0             	movzx  eax,al
c000f87c:	c1 e0 18             	shl    eax,0x18
c000f87f:	09 c8                	or     eax,ecx
c000f881:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f885:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f88a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f88e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f892:	01 d0                	add    eax,edx
c000f894:	83 c0 2c             	add    eax,0x2c
c000f897:	8a 00                	mov    al,BYTE PTR [eax]
c000f899:	0f b6 d0             	movzx  edx,al
c000f89c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8a0:	8d 48 01             	lea    ecx,[eax+0x1]
c000f8a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8a7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f8ab:	0f b6 c0             	movzx  eax,al
c000f8ae:	c1 e0 08             	shl    eax,0x8
c000f8b1:	09 d0                	or     eax,edx
c000f8b3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f8b8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f8bd:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f8c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f8c6:	88 90 a8 38 02 c0    	mov    BYTE PTR [eax-0x3ffdc758],dl
c000f8cc:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f8d1:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f8d6:	66 89 94 00 c0 bb 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd4440],dx
c000f8de:	e9 b9 00 00 00       	jmp    c000f99c <scanMADT()+0x494>
c000f8e3:	90                   	nop
c000f8e4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8e9:	83 f8 04             	cmp    eax,0x4
c000f8ec:	0f 85 9a 00 00 00    	jne    c000f98c <scanMADT()+0x484>
c000f8f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8f6:	8d 50 01             	lea    edx,[eax+0x1]
c000f8f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f901:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f905:	0f b6 c0             	movzx  eax,al
c000f908:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f90c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f910:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f914:	01 d0                	add    eax,edx
c000f916:	83 c0 2c             	add    eax,0x2c
c000f919:	8a 00                	mov    al,BYTE PTR [eax]
c000f91b:	0f b6 d0             	movzx  edx,al
c000f91e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f922:	8d 48 01             	lea    ecx,[eax+0x1]
c000f925:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f929:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f92d:	0f b6 c0             	movzx  eax,al
c000f930:	c1 e0 08             	shl    eax,0x8
c000f933:	09 d0                	or     eax,edx
c000f935:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f939:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f93e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f942:	8d 50 01             	lea    edx,[eax+0x1]
c000f945:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f949:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f94d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f951:	0f b6 c0             	movzx  eax,al
c000f954:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f95c:	c1 e0 08             	shl    eax,0x8
c000f95f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f963:	89 c1                	mov    ecx,eax
c000f965:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f969:	c1 e0 18             	shl    eax,0x18
c000f96c:	89 c3                	mov    ebx,eax
c000f96e:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f973:	8d 50 01             	lea    edx,[eax+0x1]
c000f976:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f97c:	09 d9                	or     ecx,ebx
c000f97e:	89 ca                	mov    edx,ecx
c000f980:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f987:	eb 13                	jmp    c000f99c <scanMADT()+0x494>
c000f989:	8d 76 00             	lea    esi,[esi+0x0]
c000f98c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f991:	83 f8 05             	cmp    eax,0x5
c000f994:	75 06                	jne    c000f99c <scanMADT()+0x494>
c000f996:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f99b:	90                   	nop
c000f99c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f9a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9a5:	01 d0                	add    eax,edx
c000f9a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f9ab:	e9 50 fc ff ff       	jmp    c000f600 <scanMADT()+0xf8>
c000f9b0:	90                   	nop
c000f9b1:	eb 05                	jmp    c000f9b8 <scanMADT()+0x4b0>
c000f9b3:	90                   	nop
c000f9b4:	90                   	nop
c000f9b5:	8d 76 00             	lea    esi,[esi+0x0]
c000f9b8:	83 c4 38             	add    esp,0x38
c000f9bb:	5b                   	pop    ebx
c000f9bc:	c3                   	ret    
c000f9bd:	90                   	nop
c000f9be:	66 90                	xchg   ax,ax

c000f9c0 <ACPI::ACPI()>:
c000f9c0:	83 ec 0c             	sub    esp,0xc
c000f9c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9c7:	83 ec 08             	sub    esp,0x8
c000f9ca:	68 ee 20 02 c0       	push   0xc00220ee
c000f9cf:	50                   	push   eax
c000f9d0:	e8 c3 d1 ff ff       	call   c000cb98 <Device::Device(char const*)>
c000f9d5:	83 c4 10             	add    esp,0x10
c000f9d8:	ba f8 22 02 c0       	mov    edx,0xc00222f8
c000f9dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9e1:	89 10                	mov    DWORD PTR [eax],edx
c000f9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9e7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9f2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa00:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000fa0a:	e8 f9 fa ff ff       	call   c000f508 <scanMADT()>
c000fa0f:	90                   	nop
c000fa10:	83 c4 0c             	add    esp,0xc
c000fa13:	c3                   	ret    

c000fa14 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000fa14:	83 ec 2c             	sub    esp,0x2c
c000fa17:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fa1b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fa1f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000fa23:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000fa27:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000fa2c:	88 c8                	mov    al,cl
c000fa2e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa32:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fa37:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000fa3f:	90                   	nop
c000fa40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa44:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa4a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fa4e:	0f 8d b0 00 00 00    	jge    c000fb04 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000fa54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa5c:	83 c2 2a             	add    edx,0x2a
c000fa5f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000fa63:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa68:	0f b7 c0             	movzx  eax,ax
c000fa6b:	39 c2                	cmp    edx,eax
c000fa6d:	0f 85 85 00 00 00    	jne    c000faf8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa7b:	83 c2 2a             	add    edx,0x2a
c000fa7e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa82:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa87:	0f b6 c0             	movzx  eax,al
c000fa8a:	39 c2                	cmp    edx,eax
c000fa8c:	75 6a                	jne    c000faf8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa8e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fa93:	85 c0                	test   eax,eax
c000fa95:	74 3d                	je     c000fad4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000fa97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa9b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa9f:	83 c2 2a             	add    edx,0x2a
c000faa2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000faa6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000faaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000faad:	39 c2                	cmp    edx,eax
c000faaf:	74 13                	je     c000fac4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fab1:	83 ec 0c             	sub    esp,0xc
c000fab4:	68 78 22 02 c0       	push   0xc0022278
c000fab9:	e8 81 1b 00 00       	call   c001163f <KePanic(char const*)>
c000fabe:	83 c4 10             	add    esp,0x10
c000fac1:	8d 76 00             	lea    esi,[esi+0x0]
c000fac4:	83 ec 0c             	sub    esp,0xc
c000fac7:	68 f3 20 02 c0       	push   0xc00220f3
c000facc:	e8 6e 1b 00 00       	call   c001163f <KePanic(char const*)>
c000fad1:	83 c4 10             	add    esp,0x10
c000fad4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fad8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fadc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fae0:	83 c2 2a             	add    edx,0x2a
c000fae3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fae7:	8b 02                	mov    eax,DWORD PTR [edx]
c000fae9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000faec:	89 01                	mov    DWORD PTR [ecx],eax
c000faee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000faf1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000faf6:	66 90                	xchg   ax,ax
c000faf8:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fafd:	e9 3e ff ff ff       	jmp    c000fa40 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fb02:	66 90                	xchg   ax,ax
c000fb04:	90                   	nop
c000fb05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb09:	83 c4 2c             	add    esp,0x2c
c000fb0c:	c2 04 00             	ret    0x4
c000fb0f:	90                   	nop

c000fb10 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fb10:	83 ec 1c             	sub    esp,0x1c
c000fb13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fb1b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fb1f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fb24:	88 c8                	mov    al,cl
c000fb26:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fb2a:	88 d0                	mov    al,dl
c000fb2c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fb30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb34:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb3e:	83 c2 2a             	add    edx,0x2a
c000fb41:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000fb45:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000fb49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb4d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb57:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fb5e:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000fb63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb67:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb6d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb71:	83 c0 01             	add    eax,0x1
c000fb74:	88 c1                	mov    cl,al
c000fb76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb7a:	83 c2 2a             	add    edx,0x2a
c000fb7d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb85:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb8f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb92:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fb96:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fb9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb9e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fba4:	8d 50 01             	lea    edx,[eax+0x1]
c000fba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbab:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fbb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbb5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fbbb:	3d 00 02 00 00       	cmp    eax,0x200
c000fbc0:	75 12                	jne    c000fbd4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fbc2:	83 ec 0c             	sub    esp,0xc
c000fbc5:	68 02 21 02 c0       	push   0xc0022102
c000fbca:	e8 70 1a 00 00       	call   c001163f <KePanic(char const*)>
c000fbcf:	83 c4 10             	add    esp,0x10
c000fbd2:	66 90                	xchg   ax,ax
c000fbd4:	90                   	nop
c000fbd5:	83 c4 1c             	add    esp,0x1c
c000fbd8:	c3                   	ret    
c000fbd9:	90                   	nop
c000fbda:	66 90                	xchg   ax,ax

c000fbdc <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fbdc:	b8 00 00 00 00       	mov    eax,0x0
c000fbe1:	c3                   	ret    
c000fbe2:	66 90                	xchg   ax,ax

c000fbe4 <ACPI::detectPCI()>:
c000fbe4:	53                   	push   ebx
c000fbe5:	83 ec 28             	sub    esp,0x28
c000fbe8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fbed:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fbf2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fbf7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fbfd:	83 e0 04             	and    eax,0x4
c000fc00:	0f b6 c0             	movzx  eax,al
c000fc03:	85 c0                	test   eax,eax
c000fc05:	74 2d                	je     c000fc34 <ACPI::detectPCI()+0x50>
c000fc07:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fc0c:	83 ec 08             	sub    esp,0x8
c000fc0f:	68 1f 21 02 c0       	push   0xc002211f
c000fc14:	50                   	push   eax
c000fc15:	e8 6e f8 ff ff       	call   c000f488 <findDataTable(unsigned char*, char*)>
c000fc1a:	83 c4 10             	add    esp,0x10
c000fc1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc21:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fc26:	74 0c                	je     c000fc34 <ACPI::detectPCI()+0x50>
c000fc28:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc2d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc32:	66 90                	xchg   ax,ax
c000fc34:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fc3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc40:	8a 00                	mov    al,BYTE PTR [eax]
c000fc42:	0f b6 c0             	movzx  eax,al
c000fc45:	83 f8 01             	cmp    eax,0x1
c000fc48:	75 0e                	jne    c000fc58 <ACPI::detectPCI()+0x74>
c000fc4a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc4f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc54:	eb 2e                	jmp    c000fc84 <ACPI::detectPCI()+0xa0>
c000fc56:	66 90                	xchg   ax,ax
c000fc58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc5c:	8a 00                	mov    al,BYTE PTR [eax]
c000fc5e:	0f b6 c0             	movzx  eax,al
c000fc61:	83 f8 02             	cmp    eax,0x2
c000fc64:	75 1e                	jne    c000fc84 <ACPI::detectPCI()+0xa0>
c000fc66:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc6b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc70:	85 c0                	test   eax,eax
c000fc72:	74 10                	je     c000fc84 <ACPI::detectPCI()+0xa0>
c000fc74:	83 ec 0c             	sub    esp,0xc
c000fc77:	68 a8 22 02 c0       	push   0xc00222a8
c000fc7c:	e8 be 19 00 00       	call   c001163f <KePanic(char const*)>
c000fc81:	83 c4 10             	add    esp,0x10
c000fc84:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fc88:	83 f0 01             	xor    eax,0x1
c000fc8b:	0f b6 c0             	movzx  eax,al
c000fc8e:	85 c0                	test   eax,eax
c000fc90:	74 46                	je     c000fcd8 <ACPI::detectPCI()+0xf4>
c000fc92:	e8 99 04 ff ff       	call   c0000130 <manualPCIProbe>
c000fc97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc9b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fca0:	75 0e                	jne    c000fcb0 <ACPI::detectPCI()+0xcc>
c000fca2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fca7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fcac:	eb 2a                	jmp    c000fcd8 <ACPI::detectPCI()+0xf4>
c000fcae:	66 90                	xchg   ax,ax
c000fcb0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fcb5:	75 21                	jne    c000fcd8 <ACPI::detectPCI()+0xf4>
c000fcb7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fcbc:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fcc1:	85 c0                	test   eax,eax
c000fcc3:	74 13                	je     c000fcd8 <ACPI::detectPCI()+0xf4>
c000fcc5:	83 ec 0c             	sub    esp,0xc
c000fcc8:	68 a8 22 02 c0       	push   0xc00222a8
c000fccd:	e8 6d 19 00 00       	call   c001163f <KePanic(char const*)>
c000fcd2:	83 c4 10             	add    esp,0x10
c000fcd5:	8d 76 00             	lea    esi,[esi+0x0]
c000fcd8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fcdd:	85 c0                	test   eax,eax
c000fcdf:	0f 84 87 00 00 00    	je     c000fd6c <ACPI::detectPCI()+0x188>
c000fce5:	83 ec 0c             	sub    esp,0xc
c000fce8:	68 24 21 02 c0       	push   0xc0022124
c000fced:	e8 4f 12 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c000fcf2:	83 c4 10             	add    esp,0x10
c000fcf5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fcfd:	83 ec 0c             	sub    esp,0xc
c000fd00:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd04:	e8 2a 7e ff ff       	call   c0007b33 <malloc>
c000fd09:	83 c4 10             	add    esp,0x10
c000fd0c:	89 c3                	mov    ebx,eax
c000fd0e:	83 ec 0c             	sub    esp,0xc
c000fd11:	53                   	push   ebx
c000fd12:	e8 43 b5 00 00       	call   c001b25a <PCI::PCI()>
c000fd17:	83 c4 10             	add    esp,0x10
c000fd1a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fd1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd22:	83 ec 08             	sub    esp,0x8
c000fd25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd29:	50                   	push   eax
c000fd2a:	e8 d1 cc ff ff       	call   c000ca00 <Device::addChild(Device*)>
c000fd2f:	83 c4 10             	add    esp,0x10
c000fd32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd36:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd38:	83 c0 08             	add    eax,0x8
c000fd3b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd3d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fd42:	85 d2                	test   edx,edx
c000fd44:	74 0a                	je     c000fd50 <ACPI::detectPCI()+0x16c>
c000fd46:	ba 01 00 00 00       	mov    edx,0x1
c000fd4b:	eb 0b                	jmp    c000fd58 <ACPI::detectPCI()+0x174>
c000fd4d:	8d 76 00             	lea    esi,[esi+0x0]
c000fd50:	ba 02 00 00 00       	mov    edx,0x2
c000fd55:	8d 76 00             	lea    esi,[esi+0x0]
c000fd58:	6a 00                	push   0x0
c000fd5a:	6a 00                	push   0x0
c000fd5c:	52                   	push   edx
c000fd5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd61:	ff d0                	call   eax
c000fd63:	83 c4 10             	add    esp,0x10
c000fd66:	e9 91 00 00 00       	jmp    c000fdfc <ACPI::detectPCI()+0x218>
c000fd6b:	90                   	nop
c000fd6c:	83 ec 0c             	sub    esp,0xc
c000fd6f:	68 3c 21 02 c0       	push   0xc002213c
c000fd74:	e8 c8 11 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c000fd79:	83 c4 10             	add    esp,0x10
c000fd7c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd83:	83 ec 0c             	sub    esp,0xc
c000fd86:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd8a:	e8 a4 7d ff ff       	call   c0007b33 <malloc>
c000fd8f:	83 c4 10             	add    esp,0x10
c000fd92:	89 c3                	mov    ebx,eax
c000fd94:	83 ec 0c             	sub    esp,0xc
c000fd97:	53                   	push   ebx
c000fd98:	e8 65 c0 00 00       	call   c001be02 <IDE::IDE()>
c000fd9d:	83 c4 10             	add    esp,0x10
c000fda0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fda4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fda8:	83 ec 08             	sub    esp,0x8
c000fdab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fdaf:	50                   	push   eax
c000fdb0:	e8 4b cc ff ff       	call   c000ca00 <Device::addChild(Device*)>
c000fdb5:	83 c4 10             	add    esp,0x10
c000fdb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdbc:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fdc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdca:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fdd3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdd7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fde0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fde4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fde6:	83 c0 08             	add    eax,0x8
c000fde9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdeb:	6a 00                	push   0x0
c000fded:	6a 00                	push   0x0
c000fdef:	6a 00                	push   0x0
c000fdf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fdf5:	ff d0                	call   eax
c000fdf7:	83 c4 10             	add    esp,0x10
c000fdfa:	66 90                	xchg   ax,ax
c000fdfc:	90                   	nop
c000fdfd:	83 c4 28             	add    esp,0x28
c000fe00:	5b                   	pop    ebx
c000fe01:	c3                   	ret    
c000fe02:	66 90                	xchg   ax,ax

c000fe04 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fe04:	83 ec 1c             	sub    esp,0x1c
c000fe07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe0b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fe0e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fe12:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fe17:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fe1c:	83 ec 08             	sub    esp,0x8
c000fe1f:	52                   	push   edx
c000fe20:	50                   	push   eax
c000fe21:	e8 d6 73 ff ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c000fe26:	83 c4 10             	add    esp,0x10
c000fe29:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fe2d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fe32:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fe37:	83 ec 04             	sub    esp,0x4
c000fe3a:	6a 01                	push   0x1
c000fe3c:	52                   	push   edx
c000fe3d:	50                   	push   eax
c000fe3e:	e8 d1 74 ff ff       	call   c0007314 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fe43:	83 c4 10             	add    esp,0x10
c000fe46:	90                   	nop
c000fe47:	83 c4 1c             	add    esp,0x1c
c000fe4a:	c3                   	ret    
c000fe4b:	90                   	nop

c000fe4c <ACPI::sleep()>:
c000fe4c:	83 ec 0c             	sub    esp,0xc
c000fe4f:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe54:	85 c0                	test   eax,eax
c000fe56:	74 08                	je     c000fe60 <ACPI::sleep()+0x14>
c000fe58:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe5d:	ff d0                	call   eax
c000fe5f:	90                   	nop
c000fe60:	90                   	nop
c000fe61:	83 c4 0c             	add    esp,0xc
c000fe64:	c3                   	ret    
c000fe65:	90                   	nop
c000fe66:	66 90                	xchg   ax,ax

c000fe68 <ACPI::open(int, int, void*)>:
c000fe68:	55                   	push   ebp
c000fe69:	89 e5                	mov    ebp,esp
c000fe6b:	53                   	push   ebx
c000fe6c:	81 ec 74 01 00 00    	sub    esp,0x174
c000fe72:	83 ec 0c             	sub    esp,0xc
c000fe75:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe78:	e8 67 fd ff ff       	call   c000fbe4 <ACPI::detectPCI()>
c000fe7d:	83 c4 10             	add    esp,0x10
c000fe80:	83 ec 0c             	sub    esp,0xc
c000fe83:	68 d0 22 02 c0       	push   0xc00222d0
c000fe88:	e8 b4 10 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c000fe8d:	83 c4 10             	add    esp,0x10
c000fe90:	b8 4c 05 00 00       	mov    eax,0x54c
c000fe95:	8a 00                	mov    al,BYTE PTR [eax]
c000fe97:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fe9a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fe9e:	83 f8 01             	cmp    eax,0x1
c000fea1:	75 15                	jne    c000feb8 <ACPI::open(int, int, void*)+0x50>
c000fea3:	83 ec 0c             	sub    esp,0xc
c000fea6:	68 51 21 02 c0       	push   0xc0022151
c000feab:	e8 d1 4d 00 00       	call   c0014c81 <Thr::loadKernelSymbolTable(char const*)>
c000feb0:	83 c4 10             	add    esp,0x10
c000feb3:	eb 33                	jmp    c000fee8 <ACPI::open(int, int, void*)+0x80>
c000feb5:	8d 76 00             	lea    esi,[esi+0x0]
c000feb8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000febc:	3d bb 00 00 00       	cmp    eax,0xbb
c000fec1:	75 15                	jne    c000fed8 <ACPI::open(int, int, void*)+0x70>
c000fec3:	83 ec 0c             	sub    esp,0xc
c000fec6:	68 6f 21 02 c0       	push   0xc002216f
c000fecb:	e8 b1 4d 00 00       	call   c0014c81 <Thr::loadKernelSymbolTable(char const*)>
c000fed0:	83 c4 10             	add    esp,0x10
c000fed3:	eb 13                	jmp    c000fee8 <ACPI::open(int, int, void*)+0x80>
c000fed5:	8d 76 00             	lea    esi,[esi+0x0]
c000fed8:	83 ec 0c             	sub    esp,0xc
c000fedb:	68 8d 21 02 c0       	push   0xc002218d
c000fee0:	e8 5a 17 00 00       	call   c001163f <KePanic(char const*)>
c000fee5:	83 c4 10             	add    esp,0x10
c000fee8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000feec:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fef3:	83 ec 0c             	sub    esp,0xc
c000fef6:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fef9:	e8 35 7c ff ff       	call   c0007b33 <malloc>
c000fefe:	83 c4 10             	add    esp,0x10
c000ff01:	89 c3                	mov    ebx,eax
c000ff03:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ff08:	83 ec 04             	sub    esp,0x4
c000ff0b:	50                   	push   eax
c000ff0c:	68 a7 21 02 c0       	push   0xc00221a7
c000ff11:	53                   	push   ebx
c000ff12:	e8 6b bc ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c000ff17:	83 c4 10             	add    esp,0x10
c000ff1a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000ff1d:	83 ec 08             	sub    esp,0x8
c000ff20:	6a 01                	push   0x1
c000ff22:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff25:	e8 76 bc ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c000ff2a:	83 c4 10             	add    esp,0x10
c000ff2d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000ff30:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000ff34:	75 12                	jne    c000ff48 <ACPI::open(int, int, void*)+0xe0>
c000ff36:	83 ec 0c             	sub    esp,0xc
c000ff39:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff3c:	e8 bd bc ff ff       	call   c000bbfe <File::close()>
c000ff41:	83 c4 10             	add    esp,0x10
c000ff44:	eb 06                	jmp    c000ff4c <ACPI::open(int, int, void*)+0xe4>
c000ff46:	66 90                	xchg   ax,ax
c000ff48:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ff4c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000ff50:	74 16                	je     c000ff68 <ACPI::open(int, int, void*)+0x100>
c000ff52:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ff55:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff57:	83 c0 08             	add    eax,0x8
c000ff5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff5c:	83 ec 0c             	sub    esp,0xc
c000ff5f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff62:	ff d0                	call   eax
c000ff64:	83 c4 10             	add    esp,0x10
c000ff67:	90                   	nop
c000ff68:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000ff6b:	83 f0 01             	xor    eax,0x1
c000ff6e:	0f b6 c0             	movzx  eax,al
c000ff71:	85 c0                	test   eax,eax
c000ff73:	74 3b                	je     c000ffb0 <ACPI::open(int, int, void*)+0x148>
c000ff75:	83 ec 0c             	sub    esp,0xc
c000ff78:	68 c5 21 02 c0       	push   0xc00221c5
c000ff7d:	e8 bf 0f 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c000ff82:	83 c4 10             	add    esp,0x10
c000ff85:	83 ec 04             	sub    esp,0x4
c000ff88:	6a 0c                	push   0xc
c000ff8a:	68 e0 21 02 c0       	push   0xc00221e0
c000ff8f:	68 f1 21 02 c0       	push   0xc00221f1
c000ff94:	e8 21 3f 00 00       	call   c0013eba <Reg::readIntWithDefault(char*, char*, int)>
c000ff99:	83 c4 10             	add    esp,0x10
c000ff9c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000ff9f:	83 ec 0c             	sub    esp,0xc
c000ffa2:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000ffa5:	e8 d0 98 ff ff       	call   c000987a <Virt::setupPageSwapping(int)>
c000ffaa:	83 c4 10             	add    esp,0x10
c000ffad:	8d 76 00             	lea    esi,[esi+0x0]
c000ffb0:	83 ec 0c             	sub    esp,0xc
c000ffb3:	68 55 0c 02 c0       	push   0xc0020c55
c000ffb8:	e8 84 0f 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c000ffbd:	83 c4 10             	add    esp,0x10
c000ffc0:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffc3:	83 ec 08             	sub    esp,0x8
c000ffc6:	6a 13                	push   0x13
c000ffc8:	50                   	push   eax
c000ffc9:	e8 4a cd ff ff       	call   c000cd18 <getDevicesOfType(DeviceType)>
c000ffce:	83 c4 0c             	add    esp,0xc
c000ffd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ffd4:	83 ec 0c             	sub    esp,0xc
c000ffd7:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffda:	50                   	push   eax
c000ffdb:	e8 30 00 01 00       	call   c0020010 <LinkedList<Device>::isEmpty()>
c000ffe0:	83 c4 10             	add    esp,0x10
c000ffe3:	83 f0 01             	xor    eax,0x1
c000ffe6:	0f b6 c0             	movzx  eax,al
c000ffe9:	85 c0                	test   eax,eax
c000ffeb:	0f 84 1f 01 00 00    	je     c0010110 <ACPI::open(int, int, void*)+0x2a8>
c000fff1:	83 ec 0c             	sub    esp,0xc
c000fff4:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fff7:	50                   	push   eax
c000fff8:	e8 2f 00 01 00       	call   c002002c <LinkedList<Device>::getFirstElement()>
c000fffd:	83 c4 10             	add    esp,0x10
c0010000:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0010003:	83 ec 0c             	sub    esp,0xc
c0010006:	8d 45 b8             	lea    eax,[ebp-0x48]
c0010009:	50                   	push   eax
c001000a:	e8 25 00 01 00       	call   c0020034 <LinkedList<Device>::removeFirst()>
c001000f:	83 c4 10             	add    esp,0x10
c0010012:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0010015:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0010018:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c001001b:	b8 24 00 00 00       	mov    eax,0x24
c0010020:	83 e0 fc             	and    eax,0xfffffffc
c0010023:	89 c3                	mov    ebx,eax
c0010025:	b8 00 00 00 00       	mov    eax,0x0
c001002a:	66 90                	xchg   ax,ax
c001002c:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c0010033:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c001003a:	83 c0 04             	add    eax,0x4
c001003d:	39 d8                	cmp    eax,ebx
c001003f:	72 eb                	jb     c001002c <ACPI::open(int, int, void*)+0x1c4>
c0010041:	83 ec 08             	sub    esp,0x8
c0010044:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c001004a:	50                   	push   eax
c001004b:	83 ec 24             	sub    esp,0x24
c001004e:	89 e1                	mov    ecx,esp
c0010050:	b8 24 00 00 00       	mov    eax,0x24
c0010055:	83 e0 fc             	and    eax,0xfffffffc
c0010058:	89 c3                	mov    ebx,eax
c001005a:	b8 00 00 00 00       	mov    eax,0x0
c001005f:	90                   	nop
c0010060:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c0010067:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c001006a:	83 c0 04             	add    eax,0x4
c001006d:	39 d8                	cmp    eax,ebx
c001006f:	72 ef                	jb     c0010060 <ACPI::open(int, int, void*)+0x1f8>
c0010071:	e8 cc b6 00 00       	call   c001b742 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0010076:	83 c4 30             	add    esp,0x30
c0010079:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001007c:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0010080:	0f 84 4e ff ff ff    	je     c000ffd4 <ACPI::open(int, int, void*)+0x16c>
c0010086:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c001008d:	83 ec 0c             	sub    esp,0xc
c0010090:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c0010093:	e8 9b 7a ff ff       	call   c0007b33 <malloc>
c0010098:	83 c4 10             	add    esp,0x10
c001009b:	89 c3                	mov    ebx,eax
c001009d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00100a2:	83 ec 04             	sub    esp,0x4
c00100a5:	50                   	push   eax
c00100a6:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c00100a9:	53                   	push   ebx
c00100aa:	e8 d3 ba ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c00100af:	83 c4 10             	add    esp,0x10
c00100b2:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00100b5:	83 ec 0c             	sub    esp,0xc
c00100b8:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c00100bb:	e8 a4 bd ff ff       	call   c000be64 <File::exists()>
c00100c0:	83 c4 10             	add    esp,0x10
c00100c3:	0f b6 c0             	movzx  eax,al
c00100c6:	85 c0                	test   eax,eax
c00100c8:	74 22                	je     c00100ec <ACPI::open(int, int, void*)+0x284>
c00100ca:	83 ec 08             	sub    esp,0x8
c00100cd:	6a 01                	push   0x1
c00100cf:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c00100d2:	e8 2c 56 00 00       	call   c0015703 <Thr::loadDLL(char const*, bool)>
c00100d7:	83 c4 10             	add    esp,0x10
c00100da:	83 ec 08             	sub    esp,0x8
c00100dd:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00100e0:	50                   	push   eax
c00100e1:	e8 5d 58 00 00       	call   c0015943 <Thr::executeDLL(unsigned long, void*)>
c00100e6:	83 c4 10             	add    esp,0x10
c00100e9:	8d 76 00             	lea    esi,[esi+0x0]
c00100ec:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00100f0:	0f 84 de fe ff ff    	je     c000ffd4 <ACPI::open(int, int, void*)+0x16c>
c00100f6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00100f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00100fb:	83 c0 08             	add    eax,0x8
c00100fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0010100:	83 ec 0c             	sub    esp,0xc
c0010103:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c0010106:	ff d0                	call   eax
c0010108:	83 c4 10             	add    esp,0x10
c001010b:	e9 c4 fe ff ff       	jmp    c000ffd4 <ACPI::open(int, int, void*)+0x16c>
c0010110:	83 ec 0c             	sub    esp,0xc
c0010113:	8d 45 b8             	lea    eax,[ebp-0x48]
c0010116:	50                   	push   eax
c0010117:	e8 f0 fe 00 00       	call   c002000c <LinkedList<Device>::~LinkedList()>
c001011c:	83 c4 10             	add    esp,0x10
c001011f:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0010125:	83 ec 08             	sub    esp,0x8
c0010128:	6a 01                	push   0x1
c001012a:	68 f8 21 02 c0       	push   0xc00221f8
c001012f:	e8 cf 55 00 00       	call   c0015703 <Thr::loadDLL(char const*, bool)>
c0010134:	83 c4 10             	add    esp,0x10
c0010137:	83 ec 08             	sub    esp,0x8
c001013a:	53                   	push   ebx
c001013b:	50                   	push   eax
c001013c:	e8 02 58 00 00       	call   c0015943 <Thr::executeDLL(unsigned long, void*)>
c0010141:	83 c4 10             	add    esp,0x10
c0010144:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010149:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001014f:	83 e0 04             	and    eax,0x4
c0010152:	0f b6 c0             	movzx  eax,al
c0010155:	85 c0                	test   eax,eax
c0010157:	0f 84 e3 00 00 00    	je     c0010240 <ACPI::open(int, int, void*)+0x3d8>
c001015d:	83 ec 0c             	sub    esp,0xc
c0010160:	68 15 22 02 c0       	push   0xc0022215
c0010165:	e8 d7 0d 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c001016a:	83 c4 10             	add    esp,0x10
c001016d:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c0010174:	83 ec 0c             	sub    esp,0xc
c0010177:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c001017a:	e8 b4 79 ff ff       	call   c0007b33 <malloc>
c001017f:	83 c4 10             	add    esp,0x10
c0010182:	89 c3                	mov    ebx,eax
c0010184:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010189:	83 ec 04             	sub    esp,0x4
c001018c:	50                   	push   eax
c001018d:	68 32 22 02 c0       	push   0xc0022232
c0010192:	53                   	push   ebx
c0010193:	e8 ea b9 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0010198:	83 c4 10             	add    esp,0x10
c001019b:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c001019e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00101a2:	74 1c                	je     c00101c0 <ACPI::open(int, int, void*)+0x358>
c00101a4:	83 ec 0c             	sub    esp,0xc
c00101a7:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c00101aa:	e8 b5 bc ff ff       	call   c000be64 <File::exists()>
c00101af:	83 c4 10             	add    esp,0x10
c00101b2:	0f b6 c0             	movzx  eax,al
c00101b5:	85 c0                	test   eax,eax
c00101b7:	74 07                	je     c00101c0 <ACPI::open(int, int, void*)+0x358>
c00101b9:	b0 01                	mov    al,0x1
c00101bb:	eb 07                	jmp    c00101c4 <ACPI::open(int, int, void*)+0x35c>
c00101bd:	8d 76 00             	lea    esi,[esi+0x0]
c00101c0:	b0 00                	mov    al,0x0
c00101c2:	66 90                	xchg   ax,ax
c00101c4:	0f b6 c0             	movzx  eax,al
c00101c7:	85 c0                	test   eax,eax
c00101c9:	74 21                	je     c00101ec <ACPI::open(int, int, void*)+0x384>
c00101cb:	83 ec 08             	sub    esp,0x8
c00101ce:	6a 01                	push   0x1
c00101d0:	68 32 22 02 c0       	push   0xc0022232
c00101d5:	e8 29 55 00 00       	call   c0015703 <Thr::loadDLL(char const*, bool)>
c00101da:	83 c4 10             	add    esp,0x10
c00101dd:	83 ec 08             	sub    esp,0x8
c00101e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00101e3:	50                   	push   eax
c00101e4:	e8 5a 57 00 00       	call   c0015943 <Thr::executeDLL(unsigned long, void*)>
c00101e9:	83 c4 10             	add    esp,0x10
c00101ec:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00101f0:	74 1e                	je     c0010210 <ACPI::open(int, int, void*)+0x3a8>
c00101f2:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00101f6:	74 18                	je     c0010210 <ACPI::open(int, int, void*)+0x3a8>
c00101f8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00101fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00101fd:	83 c0 08             	add    eax,0x8
c0010200:	8b 00                	mov    eax,DWORD PTR [eax]
c0010202:	83 ec 0c             	sub    esp,0xc
c0010205:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c0010208:	ff d0                	call   eax
c001020a:	83 c4 10             	add    esp,0x10
c001020d:	8d 76 00             	lea    esi,[esi+0x0]
c0010210:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c0010215:	83 ec 08             	sub    esp,0x8
c0010218:	68 4f 22 02 c0       	push   0xc002224f
c001021d:	50                   	push   eax
c001021e:	e8 65 f2 ff ff       	call   c000f488 <findDataTable(unsigned char*, char*)>
c0010223:	83 c4 10             	add    esp,0x10
c0010226:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0010229:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c001022d:	74 11                	je     c0010240 <ACPI::open(int, int, void*)+0x3d8>
c001022f:	83 ec 08             	sub    esp,0x8
c0010232:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0010235:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010238:	e8 c7 fb ff ff       	call   c000fe04 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001023d:	83 c4 10             	add    esp,0x10
c0010240:	b8 00 00 00 00       	mov    eax,0x0
c0010245:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010248:	c9                   	leave  
c0010249:	c3                   	ret    

c001024a <CPU::close(int, int, void*)>:
c001024a:	31 c0                	xor    eax,eax
c001024c:	c3                   	ret    
c001024d:	90                   	nop

c001024e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001024e:	60                   	pusha  
c001024f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010253:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010257:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001025b:	9c                   	pushf  
c001025c:	fa                   	cli    
c001025d:	0f 09                	wbinvd 
c001025f:	0f 30                	wrmsr  
c0010261:	9d                   	popf   
c0010262:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010266:	89 02                	mov    DWORD PTR [edx],eax
c0010268:	61                   	popa   
c0010269:	c3                   	ret    

c001026a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001026a:	60                   	pusha  
c001026b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001026f:	9c                   	pushf  
c0010270:	fa                   	cli    
c0010271:	0f 09                	wbinvd 
c0010273:	31 c0                	xor    eax,eax
c0010275:	31 d2                	xor    edx,edx
c0010277:	0f 32                	rdmsr  
c0010279:	9d                   	popf   
c001027a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001027e:	89 02                	mov    DWORD PTR [edx],eax
c0010280:	61                   	popa   
c0010281:	c3                   	ret    

c0010282 <CPU::AMD_K6_writeback(int, int, int)>:
c0010282:	56                   	push   esi
c0010283:	53                   	push   ebx
c0010284:	83 ec 10             	sub    esp,0x10
c0010287:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001028c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010290:	75 5d                	jne    c00102ef <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010292:	83 f8 08             	cmp    eax,0x8
c0010295:	75 09                	jne    c00102a0 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010297:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001029c:	7e 13                	jle    c00102b1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001029e:	eb 30                	jmp    c00102d0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00102a0:	83 f8 06             	cmp    eax,0x6
c00102a3:	7c 4a                	jl     c00102ef <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00102a5:	83 f8 07             	cmp    eax,0x7
c00102a8:	7e 07                	jle    c00102b1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00102aa:	83 f8 09             	cmp    eax,0x9
c00102ad:	74 21                	je     c00102d0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00102af:	eb 3e                	jmp    c00102ef <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00102b1:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c00102b7:	89 e6                	mov    esi,esp
c00102b9:	56                   	push   esi
c00102ba:	68 82 00 00 c0       	push   0xc0000082
c00102bf:	e8 a6 ff ff ff       	call   c001026a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00102c4:	c1 eb 15             	shr    ebx,0x15
c00102c7:	56                   	push   esi
c00102c8:	83 e3 7e             	and    ebx,0x7e
c00102cb:	6a 00                	push   0x0
c00102cd:	53                   	push   ebx
c00102ce:	eb 12                	jmp    c00102e2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00102d0:	89 e3                	mov    ebx,esp
c00102d2:	53                   	push   ebx
c00102d3:	68 82 00 00 c0       	push   0xc0000082
c00102d8:	e8 8d ff ff ff       	call   c001026a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00102dd:	53                   	push   ebx
c00102de:	6a 00                	push   0x0
c00102e0:	6a 00                	push   0x0
c00102e2:	68 82 00 00 c0       	push   0xc0000082
c00102e7:	e8 62 ff ff ff       	call   c001024e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00102ec:	83 c4 18             	add    esp,0x18
c00102ef:	83 c4 10             	add    esp,0x10
c00102f2:	5b                   	pop    ebx
c00102f3:	5e                   	pop    esi
c00102f4:	c3                   	ret    
c00102f5:	90                   	nop

c00102f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00102f6:	55                   	push   ebp
c00102f7:	57                   	push   edi
c00102f8:	56                   	push   esi
c00102f9:	53                   	push   ebx
c00102fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102fe:	39 05 b8 38 02 c0    	cmp    DWORD PTR ds:0xc00238b8,eax
c0010304:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010308:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001030c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010310:	75 23                	jne    c0010335 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010312:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0010317:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001031b:	89 06                	mov    DWORD PTR [esi],eax
c001031d:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0010322:	89 07                	mov    DWORD PTR [edi],eax
c0010324:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c0010329:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001032c:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c0010331:	89 02                	mov    DWORD PTR [edx],eax
c0010333:	eb 3f                	jmp    c0010374 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010335:	31 c9                	xor    ecx,ecx
c0010337:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001033b:	0f a2                	cpuid  
c001033d:	89 06                	mov    DWORD PTR [esi],eax
c001033f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010343:	89 1f                	mov    DWORD PTR [edi],ebx
c0010345:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010348:	89 10                	mov    DWORD PTR [eax],edx
c001034a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001034e:	a3 b8 38 02 c0       	mov    ds:0xc00238b8,eax
c0010353:	8b 06                	mov    eax,DWORD PTR [esi]
c0010355:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c001035a:	8b 07                	mov    eax,DWORD PTR [edi]
c001035c:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c0010361:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010364:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010369:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001036d:	8b 00                	mov    eax,DWORD PTR [eax]
c001036f:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c0010374:	5b                   	pop    ebx
c0010375:	5e                   	pop    esi
c0010376:	5f                   	pop    edi
c0010377:	5d                   	pop    ebp
c0010378:	c3                   	ret    
c0010379:	90                   	nop

c001037a <CPU::cpuidCheckEDX(unsigned int)>:
c001037a:	83 ec 10             	sub    esp,0x10
c001037d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010381:	50                   	push   eax
c0010382:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010386:	50                   	push   eax
c0010387:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001038b:	50                   	push   eax
c001038c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010390:	50                   	push   eax
c0010391:	6a 01                	push   0x1
c0010393:	e8 5e ff ff ff       	call   c00102f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010398:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001039c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00103a0:	0f 95 c0             	setne  al
c00103a3:	83 c4 24             	add    esp,0x24
c00103a6:	c3                   	ret    
c00103a7:	90                   	nop

c00103a8 <CPU::cpuidCheckECX(unsigned int)>:
c00103a8:	83 ec 10             	sub    esp,0x10
c00103ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103af:	50                   	push   eax
c00103b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b4:	50                   	push   eax
c00103b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b9:	50                   	push   eax
c00103ba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103be:	50                   	push   eax
c00103bf:	6a 01                	push   0x1
c00103c1:	e8 30 ff ff ff       	call   c00102f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103ca:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00103ce:	0f 95 c0             	setne  al
c00103d1:	83 c4 24             	add    esp,0x24
c00103d4:	c3                   	ret    
c00103d5:	90                   	nop

c00103d6 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00103d6:	83 ec 10             	sub    esp,0x10
c00103d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103dd:	50                   	push   eax
c00103de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103e2:	50                   	push   eax
c00103e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103e7:	50                   	push   eax
c00103e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ec:	50                   	push   eax
c00103ed:	6a 07                	push   0x7
c00103ef:	e8 02 ff ff ff       	call   c00102f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103f8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00103fc:	0f 95 c0             	setne  al
c00103ff:	83 c4 24             	add    esp,0x24
c0010402:	c3                   	ret    
c0010403:	90                   	nop

c0010404 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0010404:	83 ec 10             	sub    esp,0x10
c0010407:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001040b:	50                   	push   eax
c001040c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010410:	50                   	push   eax
c0010411:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010415:	50                   	push   eax
c0010416:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001041a:	50                   	push   eax
c001041b:	6a 07                	push   0x7
c001041d:	e8 d4 fe ff ff       	call   c00102f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010422:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010426:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001042a:	0f 95 c0             	setne  al
c001042d:	83 c4 24             	add    esp,0x24
c0010430:	c3                   	ret    
c0010431:	90                   	nop

c0010432 <CPU::CPU()>:
c0010432:	83 ec 0c             	sub    esp,0xc
c0010435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010439:	83 ec 08             	sub    esp,0x8
c001043c:	68 0d 24 02 c0       	push   0xc002240d
c0010441:	50                   	push   eax
c0010442:	e8 51 c7 ff ff       	call   c000cb98 <Device::Device(char const*)>
c0010447:	83 c4 10             	add    esp,0x10
c001044a:	ba a0 24 02 c0       	mov    edx,0xc00224a0
c001044f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010453:	89 10                	mov    DWORD PTR [eax],edx
c0010455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010459:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010467:	05 78 01 00 00       	add    eax,0x178
c001046c:	83 ec 0c             	sub    esp,0xc
c001046f:	50                   	push   eax
c0010470:	e8 69 6f ff ff       	call   c00073de <GDT::GDT()>
c0010475:	83 c4 10             	add    esp,0x10
c0010478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047c:	05 7c 09 00 00       	add    eax,0x97c
c0010481:	83 ec 0c             	sub    esp,0xc
c0010484:	50                   	push   eax
c0010485:	e8 a2 71 ff ff       	call   c000762c <IDT::IDT()>
c001048a:	83 c4 10             	add    esp,0x10
c001048d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010491:	05 7c 11 00 00       	add    eax,0x117c
c0010496:	83 ec 0c             	sub    esp,0xc
c0010499:	50                   	push   eax
c001049a:	e8 ed 8a ff ff       	call   c0008f8c <TSS::TSS()>
c001049f:	83 c4 10             	add    esp,0x10
c00104a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a6:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00104ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b1:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00104bb:	90                   	nop
c00104bc:	83 c4 0c             	add    esp,0xc
c00104bf:	c3                   	ret    

c00104c0 <CPU::displayFeatures()>:
c00104c0:	c3                   	ret    
c00104c1:	90                   	nop

c00104c2 <CPU::detectFeatures()>:
c00104c2:	55                   	push   ebp
c00104c3:	57                   	push   edi
c00104c4:	56                   	push   esi
c00104c5:	53                   	push   ebx
c00104c6:	83 ec 30             	sub    esp,0x30
c00104c9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00104cd:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00104d7:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00104dd:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00104e4:	6a 0d                	push   0xd
c00104e6:	6a 00                	push   0x0
c00104e8:	55                   	push   ebp
c00104e9:	e8 02 00 ff ff       	call   c00004f0 <memset>
c00104ee:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00104f3:	83 c4 10             	add    esp,0x10
c00104f6:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00104fd:	0f 84 db 05 00 00    	je     c0010ade <CPU::detectFeatures()+0x61c>
c0010503:	83 ec 0c             	sub    esp,0xc
c0010506:	89 ef                	mov    edi,ebp
c0010508:	6a 10                	push   0x10
c001050a:	e8 6b fe ff ff       	call   c001037a <CPU::cpuidCheckEDX(unsigned int)>
c001050f:	83 e0 01             	and    eax,0x1
c0010512:	8d 14 00             	lea    edx,[eax+eax*1]
c0010515:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001051b:	83 e0 fd             	and    eax,0xfffffffd
c001051e:	09 d0                	or     eax,edx
c0010520:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010526:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001052d:	e8 48 fe ff ff       	call   c001037a <CPU::cpuidCheckEDX(unsigned int)>
c0010532:	83 e0 01             	and    eax,0x1
c0010535:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001053c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010542:	83 e0 fb             	and    eax,0xfffffffb
c0010545:	09 d0                	or     eax,edx
c0010547:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001054d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010554:	e8 21 fe ff ff       	call   c001037a <CPU::cpuidCheckEDX(unsigned int)>
c0010559:	83 e0 01             	and    eax,0x1
c001055c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010563:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010569:	83 e0 f7             	and    eax,0xfffffff7
c001056c:	09 d0                	or     eax,edx
c001056e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010574:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001057b:	e8 fa fd ff ff       	call   c001037a <CPU::cpuidCheckEDX(unsigned int)>
c0010580:	83 e0 01             	and    eax,0x1
c0010583:	c1 e0 04             	shl    eax,0x4
c0010586:	89 c2                	mov    edx,eax
c0010588:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001058e:	83 e0 ef             	and    eax,0xffffffef
c0010591:	09 d0                	or     eax,edx
c0010593:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010599:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00105a0:	e8 d5 fd ff ff       	call   c001037a <CPU::cpuidCheckEDX(unsigned int)>
c00105a5:	83 e0 01             	and    eax,0x1
c00105a8:	c1 e0 05             	shl    eax,0x5
c00105ab:	89 c2                	mov    edx,eax
c00105ad:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105b3:	83 e0 df             	and    eax,0xffffffdf
c00105b6:	09 d0                	or     eax,edx
c00105b8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105be:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00105c5:	e8 b0 fd ff ff       	call   c001037a <CPU::cpuidCheckEDX(unsigned int)>
c00105ca:	83 e0 01             	and    eax,0x1
c00105cd:	8d 14 00             	lea    edx,[eax+eax*1]
c00105d0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00105d6:	83 e0 fd             	and    eax,0xfffffffd
c00105d9:	09 d0                	or     eax,edx
c00105db:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00105e1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00105e8:	e8 8d fd ff ff       	call   c001037a <CPU::cpuidCheckEDX(unsigned int)>
c00105ed:	83 e0 01             	and    eax,0x1
c00105f0:	c1 e0 06             	shl    eax,0x6
c00105f3:	89 c2                	mov    edx,eax
c00105f5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105fb:	83 e0 bf             	and    eax,0xffffffbf
c00105fe:	09 d0                	or     eax,edx
c0010600:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010606:	58                   	pop    eax
c0010607:	8d 44 24 28          	lea    eax,[esp+0x28]
c001060b:	50                   	push   eax
c001060c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010610:	50                   	push   eax
c0010611:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010615:	56                   	push   esi
c0010616:	8d 44 24 28          	lea    eax,[esp+0x28]
c001061a:	50                   	push   eax
c001061b:	6a 00                	push   0x0
c001061d:	e8 d4 fc ff ff       	call   c00102f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010622:	b8 04 00 00 00       	mov    eax,0x4
c0010627:	89 c1                	mov    ecx,eax
c0010629:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001062b:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010631:	89 c1                	mov    ecx,eax
c0010633:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0010637:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010639:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001063f:	89 c1                	mov    ecx,eax
c0010641:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010645:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010647:	83 c4 18             	add    esp,0x18
c001064a:	68 1c 23 02 c0       	push   0xc002231c
c001064f:	55                   	push   ebp
c0010650:	e8 2b 01 ff ff       	call   c0000780 <strcmp>
c0010655:	83 c4 10             	add    esp,0x10
c0010658:	85 c0                	test   eax,eax
c001065a:	75 0f                	jne    c001066b <CPU::detectFeatures()+0x1a9>
c001065c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010666:	e9 22 02 00 00       	jmp    c001088d <CPU::detectFeatures()+0x3cb>
c001066b:	50                   	push   eax
c001066c:	50                   	push   eax
c001066d:	68 29 23 02 c0       	push   0xc0022329
c0010672:	55                   	push   ebp
c0010673:	e8 08 01 ff ff       	call   c0000780 <strcmp>
c0010678:	83 c4 10             	add    esp,0x10
c001067b:	85 c0                	test   eax,eax
c001067d:	74 dd                	je     c001065c <CPU::detectFeatures()+0x19a>
c001067f:	50                   	push   eax
c0010680:	50                   	push   eax
c0010681:	68 36 23 02 c0       	push   0xc0022336
c0010686:	55                   	push   ebp
c0010687:	e8 f4 00 ff ff       	call   c0000780 <strcmp>
c001068c:	83 c4 10             	add    esp,0x10
c001068f:	85 c0                	test   eax,eax
c0010691:	74 2a                	je     c00106bd <CPU::detectFeatures()+0x1fb>
c0010693:	50                   	push   eax
c0010694:	50                   	push   eax
c0010695:	68 43 23 02 c0       	push   0xc0022343
c001069a:	55                   	push   ebp
c001069b:	e8 e0 00 ff ff       	call   c0000780 <strcmp>
c00106a0:	83 c4 10             	add    esp,0x10
c00106a3:	85 c0                	test   eax,eax
c00106a5:	74 16                	je     c00106bd <CPU::detectFeatures()+0x1fb>
c00106a7:	50                   	push   eax
c00106a8:	50                   	push   eax
c00106a9:	68 50 23 02 c0       	push   0xc0022350
c00106ae:	55                   	push   ebp
c00106af:	e8 cc 00 ff ff       	call   c0000780 <strcmp>
c00106b4:	83 c4 10             	add    esp,0x10
c00106b7:	85 c0                	test   eax,eax
c00106b9:	74 48                	je     c0010703 <CPU::detectFeatures()+0x241>
c00106bb:	eb 0f                	jmp    c00106cc <CPU::detectFeatures()+0x20a>
c00106bd:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00106c7:	e9 c1 01 00 00       	jmp    c001088d <CPU::detectFeatures()+0x3cb>
c00106cc:	50                   	push   eax
c00106cd:	50                   	push   eax
c00106ce:	68 5d 23 02 c0       	push   0xc002235d
c00106d3:	55                   	push   ebp
c00106d4:	e8 a7 00 ff ff       	call   c0000780 <strcmp>
c00106d9:	83 c4 10             	add    esp,0x10
c00106dc:	85 c0                	test   eax,eax
c00106de:	74 23                	je     c0010703 <CPU::detectFeatures()+0x241>
c00106e0:	57                   	push   edi
c00106e1:	57                   	push   edi
c00106e2:	68 6a 23 02 c0       	push   0xc002236a
c00106e7:	55                   	push   ebp
c00106e8:	e8 93 00 ff ff       	call   c0000780 <strcmp>
c00106ed:	83 c4 10             	add    esp,0x10
c00106f0:	85 c0                	test   eax,eax
c00106f2:	75 1e                	jne    c0010712 <CPU::detectFeatures()+0x250>
c00106f4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00106fe:	e9 8a 01 00 00       	jmp    c001088d <CPU::detectFeatures()+0x3cb>
c0010703:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001070d:	e9 7b 01 00 00       	jmp    c001088d <CPU::detectFeatures()+0x3cb>
c0010712:	56                   	push   esi
c0010713:	56                   	push   esi
c0010714:	68 77 23 02 c0       	push   0xc0022377
c0010719:	55                   	push   ebp
c001071a:	e8 61 00 ff ff       	call   c0000780 <strcmp>
c001071f:	83 c4 10             	add    esp,0x10
c0010722:	85 c0                	test   eax,eax
c0010724:	75 0f                	jne    c0010735 <CPU::detectFeatures()+0x273>
c0010726:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010730:	e9 58 01 00 00       	jmp    c001088d <CPU::detectFeatures()+0x3cb>
c0010735:	51                   	push   ecx
c0010736:	51                   	push   ecx
c0010737:	68 36 23 02 c0       	push   0xc0022336
c001073c:	55                   	push   ebp
c001073d:	e8 3e 00 ff ff       	call   c0000780 <strcmp>
c0010742:	83 c4 10             	add    esp,0x10
c0010745:	85 c0                	test   eax,eax
c0010747:	75 0f                	jne    c0010758 <CPU::detectFeatures()+0x296>
c0010749:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0010753:	e9 35 01 00 00       	jmp    c001088d <CPU::detectFeatures()+0x3cb>
c0010758:	52                   	push   edx
c0010759:	52                   	push   edx
c001075a:	68 84 23 02 c0       	push   0xc0022384
c001075f:	55                   	push   ebp
c0010760:	e8 1b 00 ff ff       	call   c0000780 <strcmp>
c0010765:	83 c4 10             	add    esp,0x10
c0010768:	85 c0                	test   eax,eax
c001076a:	75 0f                	jne    c001077b <CPU::detectFeatures()+0x2b9>
c001076c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010776:	e9 12 01 00 00       	jmp    c001088d <CPU::detectFeatures()+0x3cb>
c001077b:	50                   	push   eax
c001077c:	50                   	push   eax
c001077d:	68 91 23 02 c0       	push   0xc0022391
c0010782:	55                   	push   ebp
c0010783:	e8 f8 ff fe ff       	call   c0000780 <strcmp>
c0010788:	83 c4 10             	add    esp,0x10
c001078b:	85 c0                	test   eax,eax
c001078d:	75 0f                	jne    c001079e <CPU::detectFeatures()+0x2dc>
c001078f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010799:	e9 ef 00 00 00       	jmp    c001088d <CPU::detectFeatures()+0x3cb>
c001079e:	50                   	push   eax
c001079f:	50                   	push   eax
c00107a0:	68 9e 23 02 c0       	push   0xc002239e
c00107a5:	55                   	push   ebp
c00107a6:	e8 d5 ff fe ff       	call   c0000780 <strcmp>
c00107ab:	83 c4 10             	add    esp,0x10
c00107ae:	85 c0                	test   eax,eax
c00107b0:	75 0f                	jne    c00107c1 <CPU::detectFeatures()+0x2ff>
c00107b2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00107bc:	e9 cc 00 00 00       	jmp    c001088d <CPU::detectFeatures()+0x3cb>
c00107c1:	50                   	push   eax
c00107c2:	50                   	push   eax
c00107c3:	68 ab 23 02 c0       	push   0xc00223ab
c00107c8:	55                   	push   ebp
c00107c9:	e8 b2 ff fe ff       	call   c0000780 <strcmp>
c00107ce:	83 c4 10             	add    esp,0x10
c00107d1:	85 c0                	test   eax,eax
c00107d3:	75 0f                	jne    c00107e4 <CPU::detectFeatures()+0x322>
c00107d5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00107df:	e9 a9 00 00 00       	jmp    c001088d <CPU::detectFeatures()+0x3cb>
c00107e4:	50                   	push   eax
c00107e5:	50                   	push   eax
c00107e6:	68 b8 23 02 c0       	push   0xc00223b8
c00107eb:	55                   	push   ebp
c00107ec:	e8 8f ff fe ff       	call   c0000780 <strcmp>
c00107f1:	83 c4 10             	add    esp,0x10
c00107f4:	85 c0                	test   eax,eax
c00107f6:	75 0f                	jne    c0010807 <CPU::detectFeatures()+0x345>
c00107f8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010802:	e9 86 00 00 00       	jmp    c001088d <CPU::detectFeatures()+0x3cb>
c0010807:	50                   	push   eax
c0010808:	50                   	push   eax
c0010809:	68 c5 23 02 c0       	push   0xc00223c5
c001080e:	55                   	push   ebp
c001080f:	e8 6c ff fe ff       	call   c0000780 <strcmp>
c0010814:	83 c4 10             	add    esp,0x10
c0010817:	85 c0                	test   eax,eax
c0010819:	75 0c                	jne    c0010827 <CPU::detectFeatures()+0x365>
c001081b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0010825:	eb 66                	jmp    c001088d <CPU::detectFeatures()+0x3cb>
c0010827:	50                   	push   eax
c0010828:	50                   	push   eax
c0010829:	68 d2 23 02 c0       	push   0xc00223d2
c001082e:	55                   	push   ebp
c001082f:	e8 4c ff fe ff       	call   c0000780 <strcmp>
c0010834:	83 c4 10             	add    esp,0x10
c0010837:	85 c0                	test   eax,eax
c0010839:	75 0c                	jne    c0010847 <CPU::detectFeatures()+0x385>
c001083b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0010845:	eb 46                	jmp    c001088d <CPU::detectFeatures()+0x3cb>
c0010847:	57                   	push   edi
c0010848:	57                   	push   edi
c0010849:	68 df 23 02 c0       	push   0xc00223df
c001084e:	55                   	push   ebp
c001084f:	e8 2c ff fe ff       	call   c0000780 <strcmp>
c0010854:	83 c4 10             	add    esp,0x10
c0010857:	85 c0                	test   eax,eax
c0010859:	74 e0                	je     c001083b <CPU::detectFeatures()+0x379>
c001085b:	56                   	push   esi
c001085c:	56                   	push   esi
c001085d:	68 ec 23 02 c0       	push   0xc00223ec
c0010862:	55                   	push   ebp
c0010863:	e8 18 ff fe ff       	call   c0000780 <strcmp>
c0010868:	83 c4 10             	add    esp,0x10
c001086b:	85 c0                	test   eax,eax
c001086d:	74 cc                	je     c001083b <CPU::detectFeatures()+0x379>
c001086f:	51                   	push   ecx
c0010870:	51                   	push   ecx
c0010871:	68 f9 23 02 c0       	push   0xc00223f9
c0010876:	55                   	push   ebp
c0010877:	e8 04 ff fe ff       	call   c0000780 <strcmp>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	85 c0                	test   eax,eax
c0010881:	74 b8                	je     c001083b <CPU::detectFeatures()+0x379>
c0010883:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001088d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010892:	0f 86 be 00 00 00    	jbe    c0010956 <CPU::detectFeatures()+0x494>
c0010898:	83 ec 0c             	sub    esp,0xc
c001089b:	68 80 00 00 00       	push   0x80
c00108a0:	e8 31 fb ff ff       	call   c00103d6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108a5:	83 e0 01             	and    eax,0x1
c00108a8:	c1 e0 06             	shl    eax,0x6
c00108ab:	89 c2                	mov    edx,eax
c00108ad:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00108b3:	83 e0 bf             	and    eax,0xffffffbf
c00108b6:	09 d0                	or     eax,edx
c00108b8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00108be:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00108c5:	e8 0c fb ff ff       	call   c00103d6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108ca:	83 e0 01             	and    eax,0x1
c00108cd:	c1 e0 04             	shl    eax,0x4
c00108d0:	89 c2                	mov    edx,eax
c00108d2:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108d8:	83 e0 ef             	and    eax,0xffffffef
c00108db:	09 d0                	or     eax,edx
c00108dd:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108e3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00108ea:	e8 e7 fa ff ff       	call   c00103d6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108ef:	89 c2                	mov    edx,eax
c00108f1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00108f7:	c1 e2 07             	shl    edx,0x7
c00108fa:	83 e0 7f             	and    eax,0x7f
c00108fd:	09 d0                	or     eax,edx
c00108ff:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010905:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001090c:	e8 f3 fa ff ff       	call   c0010404 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010911:	83 e0 01             	and    eax,0x1
c0010914:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001091b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010921:	83 e0 f7             	and    eax,0xfffffff7
c0010924:	09 d0                	or     eax,edx
c0010926:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001092c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010933:	e8 cc fa ff ff       	call   c0010404 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010938:	83 c4 10             	add    esp,0x10
c001093b:	83 e0 01             	and    eax,0x1
c001093e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010945:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001094b:	83 e0 fb             	and    eax,0xfffffffb
c001094e:	09 d0                	or     eax,edx
c0010950:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010956:	83 ec 0c             	sub    esp,0xc
c0010959:	8d 44 24 28          	lea    eax,[esp+0x28]
c001095d:	50                   	push   eax
c001095e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010962:	50                   	push   eax
c0010963:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010967:	57                   	push   edi
c0010968:	8d 74 24 28          	lea    esi,[esp+0x28]
c001096c:	56                   	push   esi
c001096d:	6a 01                	push   0x1
c001096f:	e8 82 f9 ff ff       	call   c00102f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010974:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010978:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001097e:	89 c1                	mov    ecx,eax
c0010980:	83 e1 0f             	and    ecx,0xf
c0010983:	83 e2 f0             	and    edx,0xfffffff0
c0010986:	09 ca                	or     edx,ecx
c0010988:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001098e:	89 c2                	mov    edx,eax
c0010990:	c1 ea 04             	shr    edx,0x4
c0010993:	83 e2 0f             	and    edx,0xf
c0010996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001099a:	89 d1                	mov    ecx,edx
c001099c:	83 c4 20             	add    esp,0x20
c001099f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00109a5:	c1 e1 06             	shl    ecx,0x6
c00109a8:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c00109ae:	09 ca                	or     edx,ecx
c00109b0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00109b7:	89 c2                	mov    edx,eax
c00109b9:	c1 ea 08             	shr    edx,0x8
c00109bc:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00109c2:	83 e2 0f             	and    edx,0xf
c00109c5:	89 d5                	mov    ebp,edx
c00109c7:	83 e5 03             	and    ebp,0x3
c00109ca:	c1 e5 06             	shl    ebp,0x6
c00109cd:	83 e1 3f             	and    ecx,0x3f
c00109d0:	09 e9                	or     ecx,ebp
c00109d2:	89 d5                	mov    ebp,edx
c00109d4:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00109da:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00109e0:	c1 ed 02             	shr    ebp,0x2
c00109e3:	83 e1 c0             	and    ecx,0xffffffc0
c00109e6:	09 e9                	or     ecx,ebp
c00109e8:	89 c5                	mov    ebp,eax
c00109ea:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00109f0:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00109f6:	c1 ed 08             	shr    ebp,0x8
c00109f9:	83 e5 30             	and    ebp,0x30
c00109fc:	83 e1 cf             	and    ecx,0xffffffcf
c00109ff:	09 e9                	or     ecx,ebp
c0010a01:	83 fa 06             	cmp    edx,0x6
c0010a04:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010a0a:	74 05                	je     c0010a11 <CPU::detectFeatures()+0x54f>
c0010a0c:	83 fa 0f             	cmp    edx,0xf
c0010a0f:	75 64                	jne    c0010a75 <CPU::detectFeatures()+0x5b3>
c0010a11:	89 c1                	mov    ecx,eax
c0010a13:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010a19:	c1 e9 10             	shr    ecx,0x10
c0010a1c:	c1 e1 04             	shl    ecx,0x4
c0010a1f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010a23:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010a29:	0f b6 c9             	movzx  ecx,cl
c0010a2c:	c1 e1 06             	shl    ecx,0x6
c0010a2f:	09 e9                	or     ecx,ebp
c0010a31:	83 fa 0f             	cmp    edx,0xf
c0010a34:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010a3b:	75 38                	jne    c0010a75 <CPU::detectFeatures()+0x5b3>
c0010a3d:	c1 e8 14             	shr    eax,0x14
c0010a40:	83 c0 0f             	add    eax,0xf
c0010a43:	0f b6 c0             	movzx  eax,al
c0010a46:	89 c2                	mov    edx,eax
c0010a48:	c1 e8 02             	shr    eax,0x2
c0010a4b:	83 e2 03             	and    edx,0x3
c0010a4e:	89 d1                	mov    ecx,edx
c0010a50:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010a56:	c1 e1 06             	shl    ecx,0x6
c0010a59:	83 e2 3f             	and    edx,0x3f
c0010a5c:	09 ca                	or     edx,ecx
c0010a5e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010a64:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010a6a:	83 e2 c0             	and    edx,0xffffffc0
c0010a6d:	09 d0                	or     eax,edx
c0010a6f:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010a75:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a7b:	83 ec 0c             	sub    esp,0xc
c0010a7e:	83 c8 07             	or     eax,0x7
c0010a81:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a87:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a8b:	50                   	push   eax
c0010a8c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010a90:	55                   	push   ebp
c0010a91:	57                   	push   edi
c0010a92:	56                   	push   esi
c0010a93:	68 00 00 00 80       	push   0x80000000
c0010a98:	e8 59 f8 ff ff       	call   c00102f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a9d:	83 c4 20             	add    esp,0x20
c0010aa0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010aa8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010aac:	76 1e                	jbe    c0010acc <CPU::detectFeatures()+0x60a>
c0010aae:	83 ec 0c             	sub    esp,0xc
c0010ab1:	50                   	push   eax
c0010ab2:	55                   	push   ebp
c0010ab3:	57                   	push   edi
c0010ab4:	56                   	push   esi
c0010ab5:	68 01 00 00 80       	push   0x80000001
c0010aba:	e8 37 f8 ff ff       	call   c00102f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010abf:	83 c4 20             	add    esp,0x20
c0010ac2:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010acc:	52                   	push   edx
c0010acd:	52                   	push   edx
c0010ace:	68 05 24 02 c0       	push   0xc0022405
c0010ad3:	53                   	push   ebx
c0010ad4:	e8 b1 c0 ff ff       	call   c000cb8a <Device::setName(char const*)>
c0010ad9:	83 c4 10             	add    esp,0x10
c0010adc:	eb 69                	jmp    c0010b47 <CPU::detectFeatures()+0x685>
c0010ade:	50                   	push   eax
c0010adf:	50                   	push   eax
c0010ae0:	68 6a 23 02 c0       	push   0xc002236a
c0010ae5:	55                   	push   ebp
c0010ae6:	e8 65 fb fe ff       	call   c0000650 <strcpy>
c0010aeb:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010af5:	e8 c9 f6 fe ff       	call   c00001c3 <is486>
c0010afa:	83 c4 10             	add    esp,0x10
c0010afd:	85 c0                	test   eax,eax
c0010aff:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010b05:	74 1f                	je     c0010b26 <CPU::detectFeatures()+0x664>
c0010b07:	83 c8 07             	or     eax,0x7
c0010b0a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010b10:	0f 20 c0             	mov    eax,cr0
c0010b13:	83 e0 14             	and    eax,0x14
c0010b16:	83 f8 04             	cmp    eax,0x4
c0010b19:	75 10                	jne    c0010b2b <CPU::detectFeatures()+0x669>
c0010b1b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b21:	83 e0 fd             	and    eax,0xfffffffd
c0010b24:	eb 1b                	jmp    c0010b41 <CPU::detectFeatures()+0x67f>
c0010b26:	83 e0 f8             	and    eax,0xfffffff8
c0010b29:	eb df                	jmp    c0010b0a <CPU::detectFeatures()+0x648>
c0010b2b:	e8 6e f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b30:	83 e0 01             	and    eax,0x1
c0010b33:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b36:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b3c:	83 e0 fd             	and    eax,0xfffffffd
c0010b3f:	09 d0                	or     eax,edx
c0010b41:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b47:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010b4e:	74 17                	je     c0010b67 <CPU::detectFeatures()+0x6a5>
c0010b50:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010b56:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010b5c:	83 c8 10             	or     eax,0x10
c0010b5f:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010b65:	eb 20                	jmp    c0010b87 <CPU::detectFeatures()+0x6c5>
c0010b67:	e8 32 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b6c:	83 e0 01             	and    eax,0x1
c0010b6f:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b72:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b78:	83 e0 fd             	and    eax,0xfffffffd
c0010b7b:	09 d0                	or     eax,edx
c0010b7d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b83:	a8 02                	test   al,0x2
c0010b85:	75 c9                	jne    c0010b50 <CPU::detectFeatures()+0x68e>
c0010b87:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010b8e:	83 c4 2c             	add    esp,0x2c
c0010b91:	5b                   	pop    ebx
c0010b92:	5e                   	pop    esi
c0010b93:	5f                   	pop    edi
c0010b94:	5d                   	pop    ebp
c0010b95:	c3                   	ret    

c0010b96 <CPU::setupSMEP()>:
c0010b96:	0f 20 e0             	mov    eax,cr4
c0010b99:	0d 00 00 10 00       	or     eax,0x100000
c0010b9e:	0f 22 e0             	mov    cr4,eax
c0010ba1:	c3                   	ret    

c0010ba2 <CPU::setupUMIP()>:
c0010ba2:	0f 20 e0             	mov    eax,cr4
c0010ba5:	80 cc 08             	or     ah,0x8
c0010ba8:	0f 22 e0             	mov    cr4,eax
c0010bab:	c3                   	ret    

c0010bac <CPU::setupTSC()>:
c0010bac:	0f 20 e0             	mov    eax,cr4
c0010baf:	83 c8 04             	or     eax,0x4
c0010bb2:	0f 22 e0             	mov    cr4,eax
c0010bb5:	c3                   	ret    

c0010bb6 <CPU::setupLargePages()>:
c0010bb6:	0f 20 e0             	mov    eax,cr4
c0010bb9:	83 c8 10             	or     eax,0x10
c0010bbc:	0f 22 e0             	mov    cr4,eax
c0010bbf:	c3                   	ret    

c0010bc0 <CPU::setupPAT()>:
c0010bc0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010bc5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010bcc:	74 2c                	je     c0010bfa <CPU::setupPAT()+0x3a>
c0010bce:	53                   	push   ebx
c0010bcf:	83 ec 10             	sub    esp,0x10
c0010bd2:	68 77 02 00 00       	push   0x277
c0010bd7:	50                   	push   eax
c0010bd8:	e8 67 65 ff ff       	call   c0007144 <Computer::rdmsr(unsigned int)>
c0010bdd:	83 e2 f8             	and    edx,0xfffffff8
c0010be0:	83 ca 01             	or     edx,0x1
c0010be3:	52                   	push   edx
c0010be4:	50                   	push   eax
c0010be5:	68 77 02 00 00       	push   0x277
c0010bea:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010bf0:	e8 7b 65 ff ff       	call   c0007170 <Computer::wrmsr(unsigned int, unsigned long long)>
c0010bf5:	83 c4 28             	add    esp,0x28
c0010bf8:	5b                   	pop    ebx
c0010bf9:	c3                   	ret    
c0010bfa:	c3                   	ret    
c0010bfb:	90                   	nop

c0010bfc <CPU::setupMTRR()>:
c0010bfc:	c3                   	ret    
c0010bfd:	90                   	nop

c0010bfe <CPU::setupGlobalPages()>:
c0010bfe:	0f 20 e0             	mov    eax,cr4
c0010c01:	0c 80                	or     al,0x80
c0010c03:	0f 22 e0             	mov    cr4,eax
c0010c06:	c3                   	ret    
c0010c07:	90                   	nop

c0010c08 <CPU::allowUsermodeDataAccess()>:
c0010c08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c0c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c13:	74 03                	je     c0010c18 <CPU::allowUsermodeDataAccess()+0x10>
c0010c15:	0f 01 cb             	stac   
c0010c18:	c3                   	ret    
c0010c19:	90                   	nop

c0010c1a <CPU::prohibitUsermodeDataAccess()>:
c0010c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c1e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c25:	74 03                	je     c0010c2a <CPU::prohibitUsermodeDataAccess()+0x10>
c0010c27:	0f 01 ca             	clac   
c0010c2a:	c3                   	ret    
c0010c2b:	90                   	nop

c0010c2c <CPU::setupSMAP()>:
c0010c2c:	0f 20 e0             	mov    eax,cr4
c0010c2f:	0d 00 00 20 00       	or     eax,0x200000
c0010c34:	0f 22 e0             	mov    cr4,eax
c0010c37:	eb e1                	jmp    c0010c1a <CPU::prohibitUsermodeDataAccess()>
c0010c39:	90                   	nop

c0010c3a <CPU::setupFeatures()>:
c0010c3a:	53                   	push   ebx
c0010c3b:	83 ec 08             	sub    esp,0x8
c0010c3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c42:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010c49:	74 18                	je     c0010c63 <CPU::setupFeatures()+0x29>
c0010c4b:	83 ec 0c             	sub    esp,0xc
c0010c4e:	68 11 24 02 c0       	push   0xc0022411
c0010c53:	e8 12 9d ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0010c58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c5b:	e8 42 ff ff ff       	call   c0010ba2 <CPU::setupUMIP()>
c0010c60:	83 c4 10             	add    esp,0x10
c0010c63:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010c6a:	74 18                	je     c0010c84 <CPU::setupFeatures()+0x4a>
c0010c6c:	83 ec 0c             	sub    esp,0xc
c0010c6f:	68 1b 24 02 c0       	push   0xc002241b
c0010c74:	e8 f1 9c ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0010c79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c7c:	e8 2b ff ff ff       	call   c0010bac <CPU::setupTSC()>
c0010c81:	83 c4 10             	add    esp,0x10
c0010c84:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010c8b:	74 18                	je     c0010ca5 <CPU::setupFeatures()+0x6b>
c0010c8d:	83 ec 0c             	sub    esp,0xc
c0010c90:	68 24 24 02 c0       	push   0xc0022424
c0010c95:	e8 d0 9c ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0010c9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c9d:	e8 14 ff ff ff       	call   c0010bb6 <CPU::setupLargePages()>
c0010ca2:	83 c4 10             	add    esp,0x10
c0010ca5:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010cac:	74 18                	je     c0010cc6 <CPU::setupFeatures()+0x8c>
c0010cae:	83 ec 0c             	sub    esp,0xc
c0010cb1:	68 2d 24 02 c0       	push   0xc002242d
c0010cb6:	e8 af 9c ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0010cbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cbe:	e8 3b ff ff ff       	call   c0010bfe <CPU::setupGlobalPages()>
c0010cc3:	83 c4 10             	add    esp,0x10
c0010cc6:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010ccd:	74 18                	je     c0010ce7 <CPU::setupFeatures()+0xad>
c0010ccf:	83 ec 0c             	sub    esp,0xc
c0010cd2:	68 3f 24 02 c0       	push   0xc002243f
c0010cd7:	e8 8e 9c ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0010cdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cdf:	e8 dc fe ff ff       	call   c0010bc0 <CPU::setupPAT()>
c0010ce4:	83 c4 10             	add    esp,0x10
c0010ce7:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010cee:	74 11                	je     c0010d01 <CPU::setupFeatures()+0xc7>
c0010cf0:	c7 44 24 10 48 24 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022448
c0010cf8:	83 c4 08             	add    esp,0x8
c0010cfb:	5b                   	pop    ebx
c0010cfc:	e9 69 9c ff ff       	jmp    c000a96a <Dbg::kprintf(char const*, ...)>
c0010d01:	83 c4 08             	add    esp,0x8
c0010d04:	5b                   	pop    ebx
c0010d05:	c3                   	ret    

c0010d06 <CPU::open(int, int, void*)>:
c0010d06:	55                   	push   ebp
c0010d07:	57                   	push   edi
c0010d08:	56                   	push   esi
c0010d09:	53                   	push   ebx
c0010d0a:	83 ec 18             	sub    esp,0x18
c0010d0d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d11:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010d15:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010d19:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010d1f:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010d25:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010d2b:	50                   	push   eax
c0010d2c:	e8 0f 67 ff ff       	call   c0007440 <GDT::setup()>
c0010d31:	83 c4 0c             	add    esp,0xc
c0010d34:	6a 00                	push   0x0
c0010d36:	68 ef be ad de       	push   0xdeadbeef
c0010d3b:	55                   	push   ebp
c0010d3c:	e8 8f 82 ff ff       	call   c0008fd0 <TSS::setup(unsigned long, unsigned long)>
c0010d41:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010d44:	e8 67 82 ff ff       	call   c0008fb0 <TSS::flush()>
c0010d49:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010d4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d52:	e8 4b 69 ff ff       	call   c00076a2 <IDT::setup()>
c0010d57:	b8 00 04 00 00       	mov    eax,0x400
c0010d5c:	0f 23 f8             	mov    db7,eax
c0010d5f:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010d69:	e8 d4 70 ff ff       	call   c0007e42 <Phys::allocatePage()>
c0010d6e:	83 c4 10             	add    esp,0x10
c0010d71:	85 f6                	test   esi,esi
c0010d73:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010d79:	89 38                	mov    DWORD PTR [eax],edi
c0010d7b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010d81:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d84:	74 10                	je     c0010d96 <CPU::open(int, int, void*)+0x90>
c0010d86:	50                   	push   eax
c0010d87:	50                   	push   eax
c0010d88:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010d8e:	56                   	push   esi
c0010d8f:	e8 58 8b ff ff       	call   c00098ec <VAS::setCPUSpecific(unsigned long)>
c0010d94:	eb 0d                	jmp    c0010da3 <CPU::open(int, int, void*)+0x9d>
c0010d96:	83 ec 0c             	sub    esp,0xc
c0010d99:	68 52 24 02 c0       	push   0xc0022452
c0010d9e:	e8 9c 08 00 00       	call   c001163f <KePanic(char const*)>
c0010da3:	83 c4 10             	add    esp,0x10
c0010da6:	83 ec 0c             	sub    esp,0xc
c0010da9:	68 60 24 02 c0       	push   0xc0022460
c0010dae:	e8 8e 01 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c0010db3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010db6:	e8 07 f7 ff ff       	call   c00104c2 <CPU::detectFeatures()>
c0010dbb:	c7 04 24 83 24 02 c0 	mov    DWORD PTR [esp],0xc0022483
c0010dc2:	e8 7a 01 00 00       	call   c0010f41 <KeSetBootMessage(char const*)>
c0010dc7:	e8 5f 74 00 00       	call   c001822b <HalInitialise()>
c0010dcc:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010dd1:	83 e0 10             	and    eax,0x10
c0010dd4:	83 f8 01             	cmp    eax,0x1
c0010dd7:	19 c0                	sbb    eax,eax
c0010dd9:	83 e0 46             	and    eax,0x46
c0010ddc:	83 c0 1e             	add    eax,0x1e
c0010ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0010de2:	e8 4a d6 ff ff       	call   c000e431 <setupTimer(int)>
c0010de7:	83 c4 10             	add    esp,0x10
c0010dea:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010df1:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010df7:	74 0c                	je     c0010e05 <CPU::open(int, int, void*)+0xff>
c0010df9:	83 ec 0c             	sub    esp,0xc
c0010dfc:	53                   	push   ebx
c0010dfd:	e8 38 fe ff ff       	call   c0010c3a <CPU::setupFeatures()>
c0010e02:	83 c4 10             	add    esp,0x10
c0010e05:	83 c4 0c             	add    esp,0xc
c0010e08:	31 c0                	xor    eax,eax
c0010e0a:	5b                   	pop    ebx
c0010e0b:	5e                   	pop    esi
c0010e0c:	5f                   	pop    edi
c0010e0d:	5d                   	pop    ebp
c0010e0e:	c3                   	ret    

c0010e0f <KeInitialiseAtexit()>:
c0010e0f:	83 ec 10             	sub    esp,0x10
c0010e12:	6a 60                	push   0x60
c0010e14:	6a 00                	push   0x0
c0010e16:	68 20 be 02 c0       	push   0xc002be20
c0010e1b:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010e25:	e8 c6 f6 fe ff       	call   c00004f0 <memset>
c0010e2a:	83 c4 1c             	add    esp,0x1c
c0010e2d:	c3                   	ret    

c0010e2e <KeRegisterAtexit(void (*)(void*), void*)>:
c0010e2e:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010e33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010e37:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010e3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e42:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010e49:	40                   	inc    eax
c0010e4a:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010e4f:	83 f8 17             	cmp    eax,0x17
c0010e52:	7e 0d                	jle    c0010e61 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010e54:	c7 44 24 04 c4 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc00224c4
c0010e5c:	e9 de 07 00 00       	jmp    c001163f <KePanic(char const*)>
c0010e61:	c3                   	ret    

c0010e62 <KeExecuteAtexit()>:
c0010e62:	53                   	push   ebx
c0010e63:	31 db                	xor    ebx,ebx
c0010e65:	83 ec 08             	sub    esp,0x8
c0010e68:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010e6e:	7e 50                	jle    c0010ec0 <KeExecuteAtexit()+0x5e>
c0010e70:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010e77:	85 c0                	test   eax,eax
c0010e79:	74 42                	je     c0010ebd <KeExecuteAtexit()+0x5b>
c0010e7b:	51                   	push   ecx
c0010e7c:	50                   	push   eax
c0010e7d:	53                   	push   ebx
c0010e7e:	68 dd 24 02 c0       	push   0xc00224dd
c0010e83:	e8 e2 9a ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0010e88:	58                   	pop    eax
c0010e89:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010e90:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010e97:	c7 04 24 ff 24 02 c0 	mov    DWORD PTR [esp],0xc00224ff
c0010e9e:	e8 c7 9a ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0010ea3:	c7 04 24 5f 36 02 c0 	mov    DWORD PTR [esp],0xc002365f
c0010eaa:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010eb5:	e8 b0 9a ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0010eba:	83 c4 10             	add    esp,0x10
c0010ebd:	43                   	inc    ebx
c0010ebe:	eb a8                	jmp    c0010e68 <KeExecuteAtexit()+0x6>
c0010ec0:	83 c4 08             	add    esp,0x8
c0010ec3:	5b                   	pop    ebx
c0010ec4:	c3                   	ret    

c0010ec5 <KeDisplaySplashScreen()>:
c0010ec5:	55                   	push   ebp
c0010ec6:	bd 05 00 00 00       	mov    ebp,0x5
c0010ecb:	57                   	push   edi
c0010ecc:	bf 0a 00 00 00       	mov    edi,0xa
c0010ed1:	56                   	push   esi
c0010ed2:	31 f6                	xor    esi,esi
c0010ed4:	53                   	push   ebx
c0010ed5:	31 db                	xor    ebx,ebx
c0010ed7:	83 ec 0c             	sub    esp,0xc
c0010eda:	0f b6 96 c0 38 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc740]
c0010ee1:	85 d2                	test   edx,edx
c0010ee3:	89 d0                	mov    eax,edx
c0010ee5:	74 52                	je     c0010f39 <KeDisplaySplashScreen()+0x74>
c0010ee7:	80 bb f6 38 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc70a],0xdb
c0010eee:	75 13                	jne    c0010f03 <KeDisplaySplashScreen()+0x3e>
c0010ef0:	0f b6 8b f5 38 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc70b]
c0010ef7:	83 e1 fe             	and    ecx,0xfffffffe
c0010efa:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010f00:	75 01                	jne    c0010f03 <KeDisplaySplashScreen()+0x3e>
c0010f02:	47                   	inc    edi
c0010f03:	83 fa 0d             	cmp    edx,0xd
c0010f06:	74 28                	je     c0010f30 <KeDisplaySplashScreen()+0x6b>
c0010f08:	83 fa 0a             	cmp    edx,0xa
c0010f0b:	75 0a                	jne    c0010f17 <KeDisplaySplashScreen()+0x52>
c0010f0d:	45                   	inc    ebp
c0010f0e:	bf 0a 00 00 00       	mov    edi,0xa
c0010f13:	31 db                	xor    ebx,ebx
c0010f15:	eb 19                	jmp    c0010f30 <KeDisplaySplashScreen()+0x6b>
c0010f17:	83 ec 0c             	sub    esp,0xc
c0010f1a:	0f be c0             	movsx  eax,al
c0010f1d:	55                   	push   ebp
c0010f1e:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010f21:	43                   	inc    ebx
c0010f22:	52                   	push   edx
c0010f23:	6a 00                	push   0x0
c0010f25:	6a 0e                	push   0xe
c0010f27:	50                   	push   eax
c0010f28:	e8 7b 7f 00 00       	call   c0018ea8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010f2d:	83 c4 20             	add    esp,0x20
c0010f30:	46                   	inc    esi
c0010f31:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010f37:	75 a1                	jne    c0010eda <KeDisplaySplashScreen()+0x15>
c0010f39:	83 c4 0c             	add    esp,0xc
c0010f3c:	5b                   	pop    ebx
c0010f3d:	5e                   	pop    esi
c0010f3e:	5f                   	pop    edi
c0010f3f:	5d                   	pop    ebp
c0010f40:	c3                   	ret    

c0010f41 <KeSetBootMessage(char const*)>:
c0010f41:	57                   	push   edi
c0010f42:	56                   	push   esi
c0010f43:	53                   	push   ebx
c0010f44:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010f4a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010f51:	68 9e 00 00 00       	push   0x9e
c0010f56:	6a 00                	push   0x0
c0010f58:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010f5c:	56                   	push   esi
c0010f5d:	e8 8e f5 fe ff       	call   c00004f0 <memset>
c0010f62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f65:	e8 16 f6 fe ff       	call   c0000580 <strlen>
c0010f6a:	ba 50 00 00 00       	mov    edx,0x50
c0010f6f:	83 c4 10             	add    esp,0x10
c0010f72:	31 c9                	xor    ecx,ecx
c0010f74:	29 c2                	sub    edx,eax
c0010f76:	83 e2 fe             	and    edx,0xfffffffe
c0010f79:	01 f2                	add    edx,esi
c0010f7b:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010f80:	84 c0                	test   al,al
c0010f82:	74 0a                	je     c0010f8e <KeSetBootMessage(char const*)+0x4d>
c0010f84:	80 cc 0f             	or     ah,0xf
c0010f87:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010f8b:	41                   	inc    ecx
c0010f8c:	eb ed                	jmp    c0010f7b <KeSetBootMessage(char const*)+0x3a>
c0010f8e:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010f93:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010f98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f9a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010fa0:	5b                   	pop    ebx
c0010fa1:	5e                   	pop    esi
c0010fa2:	5f                   	pop    edi
c0010fa3:	c3                   	ret    

c0010fa4 <Krnl::handlePowerButton()>:
c0010fa4:	83 ec 0c             	sub    esp,0xc
c0010fa7:	e8 ee 06 00 00       	call   c001169a <KeHandlePowerButton()>
c0010fac:	90                   	nop
c0010fad:	83 c4 0c             	add    esp,0xc
c0010fb0:	c3                   	ret    
c0010fb1:	8d 76 00             	lea    esi,[esi+0x0]

c0010fb4 <Krnl::handleSleepButton()>:
c0010fb4:	83 ec 0c             	sub    esp,0xc
c0010fb7:	e8 13 07 00 00       	call   c00116cf <KeHandleSleepButton()>
c0010fbc:	90                   	nop
c0010fbd:	83 c4 0c             	add    esp,0xc
c0010fc0:	c3                   	ret    

c0010fc1 <KeCalculateCRC32(unsigned char*, int)>:
c0010fc1:	53                   	push   ebx
c0010fc2:	83 c8 ff             	or     eax,0xffffffff
c0010fc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010fc9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010fcd:	01 cb                	add    ebx,ecx
c0010fcf:	39 d9                	cmp    ecx,ebx
c0010fd1:	74 15                	je     c0010fe8 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010fd3:	41                   	inc    ecx
c0010fd4:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010fd7:	31 c2                	xor    edx,eax
c0010fd9:	c1 e8 08             	shr    eax,0x8
c0010fdc:	0f b6 d2             	movzx  edx,dl
c0010fdf:	33 04 95 20 3a 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc5e0]
c0010fe6:	eb e7                	jmp    c0010fcf <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010fe8:	5b                   	pop    ebx
c0010fe9:	f7 d0                	not    eax
c0010feb:	c3                   	ret    

c0010fec <EnvVarContainer::getEnv(char const*)>:
c0010fec:	57                   	push   edi
c0010fed:	56                   	push   esi
c0010fee:	53                   	push   ebx
c0010fef:	31 db                	xor    ebx,ebx
c0010ff1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ff5:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010ff7:	7e 2b                	jle    c0011024 <EnvVarContainer::getEnv(char const*)+0x38>
c0010ff9:	50                   	push   eax
c0010ffa:	50                   	push   eax
c0010ffb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ffe:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0011005:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0011008:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001100c:	e8 6f f7 fe ff       	call   c0000780 <strcmp>
c0011011:	83 c4 10             	add    esp,0x10
c0011014:	85 c0                	test   eax,eax
c0011016:	75 09                	jne    c0011021 <EnvVarContainer::getEnv(char const*)+0x35>
c0011018:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001101b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001101f:	eb 05                	jmp    c0011026 <EnvVarContainer::getEnv(char const*)+0x3a>
c0011021:	43                   	inc    ebx
c0011022:	eb d1                	jmp    c0010ff5 <EnvVarContainer::getEnv(char const*)+0x9>
c0011024:	31 c0                	xor    eax,eax
c0011026:	5b                   	pop    ebx
c0011027:	5e                   	pop    esi
c0011028:	5f                   	pop    edi
c0011029:	c3                   	ret    

c001102a <EnvVarContainer::setEnv(char const*, char const*)>:
c001102a:	55                   	push   ebp
c001102b:	57                   	push   edi
c001102c:	56                   	push   esi
c001102d:	53                   	push   ebx
c001102e:	83 ec 28             	sub    esp,0x28
c0011031:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011035:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0011039:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001103d:	56                   	push   esi
c001103e:	e8 3d f5 fe ff       	call   c0000580 <strlen>
c0011043:	40                   	inc    eax
c0011044:	89 04 24             	mov    DWORD PTR [esp],eax
c0011047:	e8 e7 6a ff ff       	call   c0007b33 <malloc>
c001104c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001104f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011053:	e8 28 f5 fe ff       	call   c0000580 <strlen>
c0011058:	40                   	inc    eax
c0011059:	89 04 24             	mov    DWORD PTR [esp],eax
c001105c:	e8 d2 6a ff ff       	call   c0007b33 <malloc>
c0011061:	89 34 24             	mov    DWORD PTR [esp],esi
c0011064:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011068:	e8 13 f5 fe ff       	call   c0000580 <strlen>
c001106d:	83 c4 0c             	add    esp,0xc
c0011070:	40                   	inc    eax
c0011071:	50                   	push   eax
c0011072:	6a 00                	push   0x0
c0011074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011078:	e8 73 f4 fe ff       	call   c00004f0 <memset>
c001107d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011080:	e8 fb f4 fe ff       	call   c0000580 <strlen>
c0011085:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011089:	8d 48 01             	lea    ecx,[eax+0x1]
c001108c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001108e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011091:	89 de                	mov    esi,ebx
c0011093:	e8 e8 f4 fe ff       	call   c0000580 <strlen>
c0011098:	83 c4 0c             	add    esp,0xc
c001109b:	40                   	inc    eax
c001109c:	50                   	push   eax
c001109d:	6a 00                	push   0x0
c001109f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110a3:	e8 48 f4 fe ff       	call   c00004f0 <memset>
c00110a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110ab:	e8 d0 f4 fe ff       	call   c0000580 <strlen>
c00110b0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00110b4:	8d 48 01             	lea    ecx,[eax+0x1]
c00110b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00110bc:	40                   	inc    eax
c00110bd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00110c0:	c1 e0 03             	shl    eax,0x3
c00110c3:	5a                   	pop    edx
c00110c4:	59                   	pop    ecx
c00110c5:	50                   	push   eax
c00110c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00110c9:	e8 51 6a ff ff       	call   c0007b1f <realloc>
c00110ce:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00110d1:	8d 74 24 18          	lea    esi,[esp+0x18]
c00110d5:	b9 08 00 00 00       	mov    ecx,0x8
c00110da:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00110dd:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00110e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110e3:	83 c4 2c             	add    esp,0x2c
c00110e6:	5b                   	pop    ebx
c00110e7:	5e                   	pop    esi
c00110e8:	5f                   	pop    edi
c00110e9:	5d                   	pop    ebp
c00110ea:	c3                   	ret    
c00110eb:	90                   	nop

c00110ec <EnvVarContainer::deleteEnv(char const*)>:
c00110ec:	c3                   	ret    
c00110ed:	90                   	nop

c00110ee <EnvVarContainer::loadFrom(char const*, char const*)>:
c00110ee:	55                   	push   ebp
c00110ef:	57                   	push   edi
c00110f0:	56                   	push   esi
c00110f1:	53                   	push   ebx
c00110f2:	81 ec 38 01 00 00    	sub    esp,0x138
c00110f8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00110ff:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0011106:	68 14 01 00 00       	push   0x114
c001110b:	e8 23 6a ff ff       	call   c0007b33 <malloc>
c0011110:	83 c4 0c             	add    esp,0xc
c0011113:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011116:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001111d:	89 c3                	mov    ebx,eax
c001111f:	50                   	push   eax
c0011120:	e8 5d aa ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0011125:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011128:	e8 37 ad ff ff       	call   c000be64 <File::exists()>
c001112d:	83 c4 10             	add    esp,0x10
c0011130:	84 c0                	test   al,al
c0011132:	75 31                	jne    c0011165 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0011134:	50                   	push   eax
c0011135:	50                   	push   eax
c0011136:	6a 12                	push   0x12
c0011138:	53                   	push   ebx
c0011139:	e8 62 aa ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c001113e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011140:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0011143:	89 34 24             	mov    DWORD PTR [esp],esi
c0011146:	e8 35 f4 fe ff       	call   c0000580 <strlen>
c001114b:	5a                   	pop    edx
c001114c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011150:	52                   	push   edx
c0011151:	31 d2                	xor    edx,edx
c0011153:	56                   	push   esi
c0011154:	52                   	push   edx
c0011155:	50                   	push   eax
c0011156:	53                   	push   ebx
c0011157:	ff d7                	call   edi
c0011159:	83 c4 14             	add    esp,0x14
c001115c:	53                   	push   ebx
c001115d:	e8 9c aa ff ff       	call   c000bbfe <File::close()>
c0011162:	83 c4 10             	add    esp,0x10
c0011165:	56                   	push   esi
c0011166:	31 f6                	xor    esi,esi
c0011168:	68 00 01 00 00       	push   0x100
c001116d:	6a 00                	push   0x0
c001116f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011173:	50                   	push   eax
c0011174:	e8 77 f3 fe ff       	call   c00004f0 <memset>
c0011179:	5f                   	pop    edi
c001117a:	58                   	pop    eax
c001117b:	6a 01                	push   0x1
c001117d:	53                   	push   ebx
c001117e:	e8 1d aa ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0011183:	83 c4 10             	add    esp,0x10
c0011186:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001118e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011196:	83 ec 0c             	sub    esp,0xc
c0011199:	8d 54 24 20          	lea    edx,[esp+0x20]
c001119d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001119f:	52                   	push   edx
c00111a0:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c00111a4:	51                   	push   ecx
c00111a5:	6a 00                	push   0x0
c00111a7:	6a 01                	push   0x1
c00111a9:	53                   	push   ebx
c00111aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00111ad:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c00111b2:	83 c4 20             	add    esp,0x20
c00111b5:	85 c0                	test   eax,eax
c00111b7:	89 c1                	mov    ecx,eax
c00111b9:	0f 84 36 01 00 00    	je     c00112f5 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c00111bf:	83 f8 0d             	cmp    eax,0xd
c00111c2:	0f 84 22 01 00 00    	je     c00112ea <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00111c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00111cd:	0f 84 f0 00 00 00    	je     c00112c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c00111d3:	83 f8 0a             	cmp    eax,0xa
c00111d6:	74 13                	je     c00111eb <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111d8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00111dd:	74 0c                	je     c00111eb <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111df:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00111e5:	0f 8e f6 00 00 00    	jle    c00112e1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00111eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111ef:	83 ec 0c             	sub    esp,0xc
c00111f2:	8d 78 01             	lea    edi,[eax+0x1]
c00111f5:	57                   	push   edi
c00111f6:	e8 38 69 ff ff       	call   c0007b33 <malloc>
c00111fb:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00111ff:	8d 56 04             	lea    edx,[esi+0x4]
c0011202:	89 14 24             	mov    DWORD PTR [esp],edx
c0011205:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0011209:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001120d:	e8 21 69 ff ff       	call   c0007b33 <malloc>
c0011212:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011216:	83 c4 0c             	add    esp,0xc
c0011219:	57                   	push   edi
c001121a:	6a 00                	push   0x0
c001121c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011220:	e8 cb f2 fe ff       	call   c00004f0 <memset>
c0011225:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011229:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001122d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011231:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011233:	83 c4 0c             	add    esp,0xc
c0011236:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001123a:	52                   	push   edx
c001123b:	6a 00                	push   0x0
c001123d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011241:	e8 aa f2 fe ff       	call   c00004f0 <memset>
c0011246:	8d 74 24 30          	lea    esi,[esp+0x30]
c001124a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001124e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011251:	e8 2a f3 fe ff       	call   c0000580 <strlen>
c0011256:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001125a:	89 c1                	mov    ecx,eax
c001125c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001125e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011261:	83 c4 10             	add    esp,0x10
c0011264:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0011267:	40                   	inc    eax
c0011268:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001126b:	85 d2                	test   edx,edx
c001126d:	75 0c                	jne    c001127b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001126f:	83 ec 0c             	sub    esp,0xc
c0011272:	6a 08                	push   0x8
c0011274:	e8 ba 68 ff ff       	call   c0007b33 <malloc>
c0011279:	eb 0c                	jmp    c0011287 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001127b:	51                   	push   ecx
c001127c:	51                   	push   ecx
c001127d:	c1 e0 03             	shl    eax,0x3
c0011280:	50                   	push   eax
c0011281:	52                   	push   edx
c0011282:	e8 98 68 ff ff       	call   c0007b1f <realloc>
c0011287:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001128a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001128d:	83 c4 10             	add    esp,0x10
c0011290:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0011293:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011297:	b9 08 00 00 00       	mov    ecx,0x8
c001129c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00112a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112a2:	50                   	push   eax
c00112a3:	31 f6                	xor    esi,esi
c00112a5:	68 00 01 00 00       	push   0x100
c00112aa:	6a 00                	push   0x0
c00112ac:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00112b0:	50                   	push   eax
c00112b1:	e8 3a f2 fe ff       	call   c00004f0 <memset>
c00112b6:	83 c4 10             	add    esp,0x10
c00112b9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00112c1:	eb 27                	jmp    c00112ea <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112c3:	83 f8 3d             	cmp    eax,0x3d
c00112c6:	74 1e                	je     c00112e6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c00112c8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00112ce:	7f 07                	jg     c00112d7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00112d0:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c00112d4:	46                   	inc    esi
c00112d5:	eb 13                	jmp    c00112ea <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112d7:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00112df:	eb 09                	jmp    c00112ea <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112e1:	83 f8 3d             	cmp    eax,0x3d
c00112e4:	75 ea                	jne    c00112d0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00112e6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00112ea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00112ef:	0f 85 99 fe ff ff    	jne    c001118e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00112f5:	83 ec 0c             	sub    esp,0xc
c00112f8:	53                   	push   ebx
c00112f9:	e8 00 a9 ff ff       	call   c000bbfe <File::close()>
c00112fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011300:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011303:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011306:	81 c4 3c 01 00 00    	add    esp,0x13c
c001130c:	5b                   	pop    ebx
c001130d:	5e                   	pop    esi
c001130e:	5f                   	pop    edi
c001130f:	5d                   	pop    ebp
c0011310:	c3                   	ret    
c0011311:	90                   	nop

c0011312 <EnvVarContainer::__loadSystem()>:
c0011312:	83 ec 10             	sub    esp,0x10
c0011315:	68 20 3e 02 c0       	push   0xc0023e20
c001131a:	68 04 25 02 c0       	push   0xc0022504
c001131f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011323:	e8 c6 fd ff ff       	call   c00110ee <EnvVarContainer::loadFrom(char const*, char const*)>
c0011328:	83 c4 1c             	add    esp,0x1c
c001132b:	c3                   	ret    

c001132c <EnvVarContainer::__loadUser()>:
c001132c:	c3                   	ret    
c001132d:	90                   	nop

c001132e <EnvVarContainer::EnvVarContainer(Process*)>:
c001132e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011332:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001133c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011340:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011343:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011347:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001134e:	90                   	nop
c001134f:	c3                   	ret    

c0011350 <EnvVarContainer::~EnvVarContainer()>:
c0011350:	83 ec 0c             	sub    esp,0xc
c0011353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011357:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001135a:	85 c0                	test   eax,eax
c001135c:	74 1d                	je     c001137b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001135e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011362:	8b 00                	mov    eax,DWORD PTR [eax]
c0011364:	85 c0                	test   eax,eax
c0011366:	74 13                	je     c001137b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001136c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001136f:	83 ec 0c             	sub    esp,0xc
c0011372:	50                   	push   eax
c0011373:	e8 cb 67 ff ff       	call   c0007b43 <free>
c0011378:	83 c4 10             	add    esp,0x10
c001137b:	90                   	nop
c001137c:	83 c4 0c             	add    esp,0xc
c001137f:	c3                   	ret    

c0011380 <KeGetEnv(Process*, char const*)>:
c0011380:	53                   	push   ebx
c0011381:	83 ec 08             	sub    esp,0x8
c0011384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011388:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c001138e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011392:	74 04                	je     c0011398 <KeGetEnv(Process*, char const*)+0x18>
c0011394:	85 c0                	test   eax,eax
c0011396:	75 0b                	jne    c00113a3 <KeGetEnv(Process*, char const*)+0x23>
c0011398:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c001139d:	85 c0                	test   eax,eax
c001139f:	75 19                	jne    c00113ba <KeGetEnv(Process*, char const*)+0x3a>
c00113a1:	eb 27                	jmp    c00113ca <KeGetEnv(Process*, char const*)+0x4a>
c00113a3:	52                   	push   edx
c00113a4:	52                   	push   edx
c00113a5:	53                   	push   ebx
c00113a6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00113ac:	e8 3b fc ff ff       	call   c0010fec <EnvVarContainer::getEnv(char const*)>
c00113b1:	83 c4 10             	add    esp,0x10
c00113b4:	85 c0                	test   eax,eax
c00113b6:	75 28                	jne    c00113e0 <KeGetEnv(Process*, char const*)+0x60>
c00113b8:	eb de                	jmp    c0011398 <KeGetEnv(Process*, char const*)+0x18>
c00113ba:	52                   	push   edx
c00113bb:	52                   	push   edx
c00113bc:	53                   	push   ebx
c00113bd:	50                   	push   eax
c00113be:	e8 29 fc ff ff       	call   c0010fec <EnvVarContainer::getEnv(char const*)>
c00113c3:	83 c4 10             	add    esp,0x10
c00113c6:	85 c0                	test   eax,eax
c00113c8:	75 16                	jne    c00113e0 <KeGetEnv(Process*, char const*)+0x60>
c00113ca:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00113ce:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00113d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00113d7:	83 c4 08             	add    esp,0x8
c00113da:	5b                   	pop    ebx
c00113db:	e9 0c fc ff ff       	jmp    c0010fec <EnvVarContainer::getEnv(char const*)>
c00113e0:	83 c4 08             	add    esp,0x8
c00113e3:	5b                   	pop    ebx
c00113e4:	c3                   	ret    

c00113e5 <KeSetEnvSystem(char const*, char const*)>:
c00113e5:	83 ec 10             	sub    esp,0x10
c00113e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113f0:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c00113f6:	e8 2f fc ff ff       	call   c001102a <EnvVarContainer::setEnv(char const*, char const*)>
c00113fb:	83 c4 1c             	add    esp,0x1c
c00113fe:	c3                   	ret    

c00113ff <KeSetEnvUser(char const*, char const*)>:
c00113ff:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011404:	85 c0                	test   eax,eax
c0011406:	74 15                	je     c001141d <KeSetEnvUser(char const*, char const*)+0x1e>
c0011408:	83 ec 10             	sub    esp,0x10
c001140b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001140f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011413:	50                   	push   eax
c0011414:	e8 11 fc ff ff       	call   c001102a <EnvVarContainer::setEnv(char const*, char const*)>
c0011419:	83 c4 1c             	add    esp,0x1c
c001141c:	c3                   	ret    
c001141d:	c3                   	ret    

c001141e <KeSetEnvProcess(Process*, char const*, char const*)>:
c001141e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011422:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011428:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001142c:	e9 f9 fb ff ff       	jmp    c001102a <EnvVarContainer::setEnv(char const*, char const*)>

c0011431 <KeDeleteEnvSystem(char const*)>:
c0011431:	c3                   	ret    

c0011432 <KeDeleteEnvUser(char const*)>:
c0011432:	c3                   	ret    

c0011433 <KeDeleteEnvProcess(Process*, char const*)>:
c0011433:	c3                   	ret    

c0011434 <KeNewProcessEnv(Process*)>:
c0011434:	83 ec 28             	sub    esp,0x28
c0011437:	6a 0c                	push   0xc
c0011439:	e8 f5 66 ff ff       	call   c0007b33 <malloc>
c001143e:	5a                   	pop    edx
c001143f:	59                   	pop    ecx
c0011440:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011444:	50                   	push   eax
c0011445:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011449:	e8 e0 fe ff ff       	call   c001132e <EnvVarContainer::EnvVarContainer(Process*)>
c001144e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011452:	83 c4 2c             	add    esp,0x2c
c0011455:	c3                   	ret    

c0011456 <KeCopyProcessEnv(Process*, Process*)>:
c0011456:	57                   	push   edi
c0011457:	56                   	push   esi
c0011458:	53                   	push   ebx
c0011459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001145d:	83 ec 0c             	sub    esp,0xc
c0011460:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011466:	6a 0c                	push   0xc
c0011468:	e8 c6 66 ff ff       	call   c0007b33 <malloc>
c001146d:	89 c3                	mov    ebx,eax
c001146f:	58                   	pop    eax
c0011470:	5a                   	pop    edx
c0011471:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011475:	53                   	push   ebx
c0011476:	e8 b3 fe ff ff       	call   c001132e <EnvVarContainer::EnvVarContainer(Process*)>
c001147b:	8b 07                	mov    eax,DWORD PTR [edi]
c001147d:	89 03                	mov    DWORD PTR [ebx],eax
c001147f:	c1 e0 03             	shl    eax,0x3
c0011482:	89 04 24             	mov    DWORD PTR [esp],eax
c0011485:	e8 a9 66 ff ff       	call   c0007b33 <malloc>
c001148a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001148d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001148f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011492:	89 c7                	mov    edi,eax
c0011494:	c1 e1 03             	shl    ecx,0x3
c0011497:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011499:	83 c4 10             	add    esp,0x10
c001149c:	89 d8                	mov    eax,ebx
c001149e:	5b                   	pop    ebx
c001149f:	5e                   	pop    esi
c00114a0:	5f                   	pop    edi
c00114a1:	c3                   	ret    

c00114a2 <KeLoadSystemEnv()>:
c00114a2:	53                   	push   ebx
c00114a3:	83 ec 14             	sub    esp,0x14
c00114a6:	6a 0c                	push   0xc
c00114a8:	e8 86 66 ff ff       	call   c0007b33 <malloc>
c00114ad:	89 c3                	mov    ebx,eax
c00114af:	58                   	pop    eax
c00114b0:	5a                   	pop    edx
c00114b1:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00114b7:	53                   	push   ebx
c00114b8:	e8 71 fe ff ff       	call   c001132e <EnvVarContainer::EnvVarContainer(Process*)>
c00114bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114c0:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c00114c6:	e8 47 fe ff ff       	call   c0011312 <EnvVarContainer::__loadSystem()>
c00114cb:	83 c4 18             	add    esp,0x18
c00114ce:	5b                   	pop    ebx
c00114cf:	c3                   	ret    

c00114d0 <KeLoadUserEnv()>:
c00114d0:	53                   	push   ebx
c00114d1:	83 ec 14             	sub    esp,0x14
c00114d4:	6a 0c                	push   0xc
c00114d6:	e8 58 66 ff ff       	call   c0007b33 <malloc>
c00114db:	89 c3                	mov    ebx,eax
c00114dd:	58                   	pop    eax
c00114de:	5a                   	pop    edx
c00114df:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00114e5:	53                   	push   ebx
c00114e6:	e8 43 fe ff ff       	call   c001132e <EnvVarContainer::EnvVarContainer(Process*)>
c00114eb:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c00114f1:	83 c4 18             	add    esp,0x18
c00114f4:	5b                   	pop    ebx
c00114f5:	c3                   	ret    

c00114f6 <KeFlushEnv()>:
c00114f6:	c3                   	ret    

c00114f7 <KeGetProcessTotalEnvCount(Process*)>:
c00114f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114fb:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c0011501:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011507:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c001150c:	8b 00                	mov    eax,DWORD PTR [eax]
c001150e:	03 01                	add    eax,DWORD PTR [ecx]
c0011510:	85 d2                	test   edx,edx
c0011512:	74 02                	je     c0011516 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011514:	03 02                	add    eax,DWORD PTR [edx]
c0011516:	c3                   	ret    

c0011517 <KeGetProcessEnvPair(Process*, int)>:
c0011517:	57                   	push   edi
c0011518:	56                   	push   esi
c0011519:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c001151f:	53                   	push   ebx
c0011520:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011524:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011528:	85 f6                	test   esi,esi
c001152a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001152e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011534:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011536:	75 16                	jne    c001154e <KeGetProcessEnvPair(Process*, int)+0x37>
c0011538:	39 c2                	cmp    edx,eax
c001153a:	7c 16                	jl     c0011552 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001153c:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c0011542:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011544:	01 c6                	add    esi,eax
c0011546:	39 d6                	cmp    esi,edx
c0011548:	7e 3c                	jle    c0011586 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001154a:	29 c2                	sub    edx,eax
c001154c:	eb 04                	jmp    c0011552 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001154e:	39 c2                	cmp    edx,eax
c0011550:	7d 05                	jge    c0011557 <KeGetProcessEnvPair(Process*, int)+0x40>
c0011552:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011555:	eb 20                	jmp    c0011577 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011557:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011559:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001155c:	39 d1                	cmp    ecx,edx
c001155e:	7e 04                	jle    c0011564 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011560:	29 c2                	sub    edx,eax
c0011562:	eb 10                	jmp    c0011574 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011564:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c001156a:	03 0e                	add    ecx,DWORD PTR [esi]
c001156c:	39 d1                	cmp    ecx,edx
c001156e:	7e 16                	jle    c0011586 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011570:	29 c2                	sub    edx,eax
c0011572:	29 fa                	sub    edx,edi
c0011574:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011577:	8d 14 d0             	lea    edx,[eax+edx*8]
c001157a:	8b 02                	mov    eax,DWORD PTR [edx]
c001157c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001157f:	89 03                	mov    DWORD PTR [ebx],eax
c0011581:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011584:	eb 1d                	jmp    c00115a3 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011586:	83 ec 0c             	sub    esp,0xc
c0011589:	68 26 25 02 c0       	push   0xc0022526
c001158e:	e8 ac 00 00 00       	call   c001163f <KePanic(char const*)>
c0011593:	83 c4 10             	add    esp,0x10
c0011596:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001159c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00115a3:	89 d8                	mov    eax,ebx
c00115a5:	5b                   	pop    ebx
c00115a6:	5e                   	pop    esi
c00115a7:	5f                   	pop    edi
c00115a8:	c2 04 00             	ret    0x4

c00115ab <CPU::current()>:
c00115ab:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00115b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115b6:	c3                   	ret    

c00115b7 <operator new(unsigned long)>:
c00115b7:	e9 77 65 ff ff       	jmp    c0007b33 <malloc>

c00115bc <operator delete(void*)>:
c00115bc:	e9 92 65 ff ff       	jmp    c0007b53 <rfree>

c00115c1 <disableIRQs()>:
c00115c1:	fa                   	cli    
c00115c2:	c3                   	ret    

c00115c3 <enableIRQs()>:
c00115c3:	fb                   	sti    
c00115c4:	c3                   	ret    

c00115c5 <lockScheduler()>:
c00115c5:	fa                   	cli    
c00115c6:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00115cc:	c3                   	ret    

c00115cd <unlockScheduler()>:
c00115cd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115d2:	48                   	dec    eax
c00115d3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115d8:	75 01                	jne    c00115db <unlockScheduler()+0xe>
c00115da:	fb                   	sti    
c00115db:	c3                   	ret    

c00115dc <lockStuff()>:
c00115dc:	fa                   	cli    
c00115dd:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00115e3:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c00115e9:	c3                   	ret    

c00115ea <unlockStuff()>:
c00115ea:	83 ec 0c             	sub    esp,0xc
c00115ed:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00115f2:	48                   	dec    eax
c00115f3:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00115f8:	75 18                	jne    c0011612 <unlockStuff()+0x28>
c00115fa:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0011601:	74 0f                	je     c0011612 <unlockStuff()+0x28>
c0011603:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001160d:	e8 5a 4b 00 00       	call   c001616c <schedule()>
c0011612:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011617:	48                   	dec    eax
c0011618:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001161d:	75 01                	jne    c0011620 <unlockStuff()+0x36>
c001161f:	fb                   	sti    
c0011620:	83 c4 0c             	add    esp,0xc
c0011623:	c3                   	ret    

c0011624 <Virt::getAKernelVAS()>:
c0011624:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0011629:	c3                   	ret    

c001162a <__not_memcpy>:
c001162a:	57                   	push   edi
c001162b:	56                   	push   esi
c001162c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011630:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011634:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011638:	89 c7                	mov    edi,eax
c001163a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001163c:	5e                   	pop    esi
c001163d:	5f                   	pop    edi
c001163e:	c3                   	ret    

c001163f <KePanic(char const*)>:
c001163f:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c0011646:	e9 b1 6a 00 00       	jmp    c00180fc <HalPanic(char const*)>

c001164b <KePowerThread(void*)>:
c001164b:	83 ec 0c             	sub    esp,0xc
c001164e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011653:	48                   	dec    eax
c0011654:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011659:	75 01                	jne    c001165c <KePowerThread(void*)+0x11>
c001165b:	fb                   	sti    
c001165c:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011663:	83 ec 0c             	sub    esp,0xc
c0011666:	6a 0a                	push   0xa
c0011668:	e8 2f 4e 00 00       	call   c001649c <sleep(unsigned int)>
c001166d:	83 c4 10             	add    esp,0x10
c0011670:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c0011677:	eb e3                	jmp    c001165c <KePowerThread(void*)+0x11>

c0011679 <KeChangePowerSettings(PowerSettings)>:
c0011679:	57                   	push   edi
c001167a:	b9 09 00 00 00       	mov    ecx,0x9
c001167f:	56                   	push   esi
c0011680:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c0011685:	fc                   	cld    
c0011686:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001168a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001168c:	5e                   	pop    esi
c001168d:	5f                   	pop    edi
c001168e:	c3                   	ret    

c001168f <KeUserIOReceived()>:
c001168f:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011699:	c3                   	ret    

c001169a <KeHandlePowerButton()>:
c001169a:	83 ec 0c             	sub    esp,0xc
c001169d:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c00116a2:	83 f8 02             	cmp    eax,0x2
c00116a5:	75 10                	jne    c00116b7 <KeHandlePowerButton()+0x1d>
c00116a7:	83 ec 0c             	sub    esp,0xc
c00116aa:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116b0:	e8 f7 5a ff ff       	call   c00071ac <Computer::shutdown()>
c00116b5:	eb 11                	jmp    c00116c8 <KeHandlePowerButton()+0x2e>
c00116b7:	48                   	dec    eax
c00116b8:	75 11                	jne    c00116cb <KeHandlePowerButton()+0x31>
c00116ba:	83 ec 0c             	sub    esp,0xc
c00116bd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116c3:	e8 14 5b ff ff       	call   c00071dc <Computer::sleep()>
c00116c8:	83 c4 10             	add    esp,0x10
c00116cb:	83 c4 0c             	add    esp,0xc
c00116ce:	c3                   	ret    

c00116cf <KeHandleSleepButton()>:
c00116cf:	83 ec 0c             	sub    esp,0xc
c00116d2:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c00116d7:	83 f8 02             	cmp    eax,0x2
c00116da:	75 10                	jne    c00116ec <KeHandleSleepButton()+0x1d>
c00116dc:	83 ec 0c             	sub    esp,0xc
c00116df:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116e5:	e8 c2 5a ff ff       	call   c00071ac <Computer::shutdown()>
c00116ea:	eb 11                	jmp    c00116fd <KeHandleSleepButton()+0x2e>
c00116ec:	48                   	dec    eax
c00116ed:	75 11                	jne    c0011700 <KeHandleSleepButton()+0x31>
c00116ef:	83 ec 0c             	sub    esp,0xc
c00116f2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116f8:	e8 df 5a ff ff       	call   c00071dc <Computer::sleep()>
c00116fd:	83 c4 10             	add    esp,0x10
c0011700:	83 c4 0c             	add    esp,0xc
c0011703:	c3                   	ret    

c0011704 <KeSetupPowerManager()>:
c0011704:	83 ec 0c             	sub    esp,0xc
c0011707:	68 f0 00 00 00       	push   0xf0
c001170c:	6a 00                	push   0x0
c001170e:	68 4b 16 01 c0       	push   0xc001164b
c0011713:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011719:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011723:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001172a:	e8 f1 47 00 00       	call   c0015f20 <Process::createThread(void (*)(void*), void*, int)>
c001172f:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c0011739:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c0011743:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c001174d:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c0011757:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011761:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c001176b:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c0011775:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c001177f:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011789:	83 c4 1c             	add    esp,0x1c
c001178c:	c3                   	ret    

c001178d <KeRand()>:
c001178d:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c0011797:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c00117a1:	53                   	push   ebx
c00117a2:	01 c1                	add    ecx,eax
c00117a4:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00117a9:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c00117af:	01 ca                	add    edx,ecx
c00117b1:	05 ef 04 b5 00       	add    eax,0xb504ef
c00117b6:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00117bb:	83 d2 00             	adc    edx,0x0
c00117be:	0f b7 da             	movzx  ebx,dx
c00117c1:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c00117c7:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00117cb:	5b                   	pop    ebx
c00117cc:	c3                   	ret    

c00117cd <KeSeedRand(unsigned int)>:
c00117cd:	53                   	push   ebx
c00117ce:	83 ec 08             	sub    esp,0x8
c00117d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117d5:	e8 41 6c 00 00       	call   c001841b <HalGetRand()>
c00117da:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c00117e4:	31 d8                	xor    eax,ebx
c00117e6:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00117eb:	e8 9d ff ff ff       	call   c001178d <KeRand()>
c00117f0:	83 c4 08             	add    esp,0x8
c00117f3:	5b                   	pop    ebx
c00117f4:	eb 97                	jmp    c001178d <KeRand()>

c00117f6 <KeInitRand()>:
c00117f6:	83 ec 0c             	sub    esp,0xc
c00117f9:	e8 12 6a 00 00       	call   c0018210 <HalQueryPerformanceCounter()>
c00117fe:	0f 20 da             	mov    edx,cr3
c0011801:	0f 22 da             	mov    cr3,edx
c0011804:	0f 20 da             	mov    edx,cr3
c0011807:	0f 22 da             	mov    cr3,edx
c001180a:	0f 20 da             	mov    edx,cr3
c001180d:	0f 22 da             	mov    cr3,edx
c0011810:	0f 20 da             	mov    edx,cr3
c0011813:	0f 22 da             	mov    cr3,edx
c0011816:	83 ec 0c             	sub    esp,0xc
c0011819:	35 03 8a 95 38       	xor    eax,0x38958a03
c001181e:	50                   	push   eax
c001181f:	e8 a9 ff ff ff       	call   c00117cd <KeSeedRand(unsigned int)>
c0011824:	83 c4 1c             	add    esp,0x1c
c0011827:	c3                   	ret    

c0011828 <KeResolveCompatibilitySymbol(char*)>:
c0011828:	83 ec 0c             	sub    esp,0xc
c001182b:	83 ec 08             	sub    esp,0x8
c001182e:	68 40 25 02 c0       	push   0xc0022540
c0011833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011837:	e8 44 ef fe ff       	call   c0000780 <strcmp>
c001183c:	83 c4 10             	add    esp,0x10
c001183f:	85 c0                	test   eax,eax
c0011841:	0f 94 c0             	sete   al
c0011844:	0f b6 c0             	movzx  eax,al
c0011847:	85 c0                	test   eax,eax
c0011849:	74 0d                	je     c0011858 <KeResolveCompatibilitySymbol(char*)+0x30>
c001184b:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011850:	e9 8b 01 00 00       	jmp    c00119e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011855:	8d 76 00             	lea    esi,[esi+0x0]
c0011858:	83 ec 08             	sub    esp,0x8
c001185b:	68 49 25 02 c0       	push   0xc0022549
c0011860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011864:	e8 17 ef fe ff       	call   c0000780 <strcmp>
c0011869:	83 c4 10             	add    esp,0x10
c001186c:	85 c0                	test   eax,eax
c001186e:	0f 94 c0             	sete   al
c0011871:	0f b6 c0             	movzx  eax,al
c0011874:	85 c0                	test   eax,eax
c0011876:	74 0c                	je     c0011884 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011878:	b8 30 f8 01 c0       	mov    eax,0xc001f830
c001187d:	e9 5e 01 00 00       	jmp    c00119e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011882:	66 90                	xchg   ax,ax
c0011884:	83 ec 08             	sub    esp,0x8
c0011887:	68 53 25 02 c0       	push   0xc0022553
c001188c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011890:	e8 eb ee fe ff       	call   c0000780 <strcmp>
c0011895:	83 c4 10             	add    esp,0x10
c0011898:	85 c0                	test   eax,eax
c001189a:	0f 94 c0             	sete   al
c001189d:	0f b6 c0             	movzx  eax,al
c00118a0:	85 c0                	test   eax,eax
c00118a2:	74 0c                	je     c00118b0 <KeResolveCompatibilitySymbol(char*)+0x88>
c00118a4:	b8 64 f5 01 c0       	mov    eax,0xc001f564
c00118a9:	e9 32 01 00 00       	jmp    c00119e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118ae:	66 90                	xchg   ax,ax
c00118b0:	83 ec 08             	sub    esp,0x8
c00118b3:	68 5c 25 02 c0       	push   0xc002255c
c00118b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118bc:	e8 bf ee fe ff       	call   c0000780 <strcmp>
c00118c1:	83 c4 10             	add    esp,0x10
c00118c4:	85 c0                	test   eax,eax
c00118c6:	0f 94 c0             	sete   al
c00118c9:	0f b6 c0             	movzx  eax,al
c00118cc:	85 c0                	test   eax,eax
c00118ce:	74 0c                	je     c00118dc <KeResolveCompatibilitySymbol(char*)+0xb4>
c00118d0:	b8 3f 16 01 c0       	mov    eax,0xc001163f
c00118d5:	e9 06 01 00 00       	jmp    c00119e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118da:	66 90                	xchg   ax,ax
c00118dc:	83 ec 08             	sub    esp,0x8
c00118df:	68 6f 25 02 c0       	push   0xc002256f
c00118e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118e8:	e8 93 ee fe ff       	call   c0000780 <strcmp>
c00118ed:	83 c4 10             	add    esp,0x10
c00118f0:	85 c0                	test   eax,eax
c00118f2:	0f 94 c0             	sete   al
c00118f5:	0f b6 c0             	movzx  eax,al
c00118f8:	85 c0                	test   eax,eax
c00118fa:	74 0c                	je     c0011908 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00118fc:	b8 41 0f 01 c0       	mov    eax,0xc0010f41
c0011901:	e9 da 00 00 00       	jmp    c00119e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011906:	66 90                	xchg   ax,ax
c0011908:	83 ec 08             	sub    esp,0x8
c001190b:	68 8c 25 02 c0       	push   0xc002258c
c0011910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011914:	e8 67 ee fe ff       	call   c0000780 <strcmp>
c0011919:	83 c4 10             	add    esp,0x10
c001191c:	85 c0                	test   eax,eax
c001191e:	0f 94 c0             	sete   al
c0011921:	0f b6 c0             	movzx  eax,al
c0011924:	85 c0                	test   eax,eax
c0011926:	74 0c                	je     c0011934 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011928:	b8 30 f9 01 c0       	mov    eax,0xc001f930
c001192d:	e9 ae 00 00 00       	jmp    c00119e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011932:	66 90                	xchg   ax,ax
c0011934:	83 ec 08             	sub    esp,0x8
c0011937:	68 96 25 02 c0       	push   0xc0022596
c001193c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011940:	e8 3b ee fe ff       	call   c0000780 <strcmp>
c0011945:	83 c4 10             	add    esp,0x10
c0011948:	85 c0                	test   eax,eax
c001194a:	0f 94 c0             	sete   al
c001194d:	0f b6 c0             	movzx  eax,al
c0011950:	85 c0                	test   eax,eax
c0011952:	74 0c                	je     c0011960 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011954:	b8 b0 f6 01 c0       	mov    eax,0xc001f6b0
c0011959:	e9 82 00 00 00       	jmp    c00119e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001195e:	66 90                	xchg   ax,ax
c0011960:	83 ec 08             	sub    esp,0x8
c0011963:	68 9f 25 02 c0       	push   0xc002259f
c0011968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001196c:	e8 0f ee fe ff       	call   c0000780 <strcmp>
c0011971:	83 c4 10             	add    esp,0x10
c0011974:	85 c0                	test   eax,eax
c0011976:	0f 94 c0             	sete   al
c0011979:	0f b6 c0             	movzx  eax,al
c001197c:	85 c0                	test   eax,eax
c001197e:	74 08                	je     c0011988 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011980:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011985:	eb 59                	jmp    c00119e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011987:	90                   	nop
c0011988:	83 ec 08             	sub    esp,0x8
c001198b:	68 b7 25 02 c0       	push   0xc00225b7
c0011990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011994:	e8 e7 ed fe ff       	call   c0000780 <strcmp>
c0011999:	83 c4 10             	add    esp,0x10
c001199c:	85 c0                	test   eax,eax
c001199e:	0f 94 c0             	sete   al
c00119a1:	0f b6 c0             	movzx  eax,al
c00119a4:	85 c0                	test   eax,eax
c00119a6:	74 08                	je     c00119b0 <KeResolveCompatibilitySymbol(char*)+0x188>
c00119a8:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c00119ad:	eb 31                	jmp    c00119e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119af:	90                   	nop
c00119b0:	83 ec 08             	sub    esp,0x8
c00119b3:	68 c4 25 02 c0       	push   0xc00225c4
c00119b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119bc:	e8 bf ed fe ff       	call   c0000780 <strcmp>
c00119c1:	83 c4 10             	add    esp,0x10
c00119c4:	85 c0                	test   eax,eax
c00119c6:	0f 94 c0             	sete   al
c00119c9:	0f b6 c0             	movzx  eax,al
c00119cc:	85 c0                	test   eax,eax
c00119ce:	74 08                	je     c00119d8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00119d0:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c00119d5:	eb 09                	jmp    c00119e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119d7:	90                   	nop
c00119d8:	b8 00 00 00 00       	mov    eax,0x0
c00119dd:	8d 76 00             	lea    esi,[esi+0x0]
c00119e0:	83 c4 0c             	add    esp,0xc
c00119e3:	c3                   	ret    

c00119e4 <KiSigKill(int)>:
c00119e4:	83 ec 0c             	sub    esp,0xc
c00119e7:	6a 00                	push   0x0
c00119e9:	6a 00                	push   0x0
c00119eb:	6a ff                	push   0xffffffff
c00119ed:	6a 01                	push   0x1
c00119ef:	e8 5e 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119f4:	83 c4 1c             	add    esp,0x1c
c00119f7:	c3                   	ret    

c00119f8 <KiDefaultSignalHandlerIgnore(int)>:
c00119f8:	c3                   	ret    

c00119f9 <KiDefaultSignalHandlerPause(int)>:
c00119f9:	57                   	push   edi
c00119fa:	b9 07 00 00 00       	mov    ecx,0x7
c00119ff:	56                   	push   esi
c0011a00:	be 0d 26 02 c0       	mov    esi,0xc002260d
c0011a05:	83 ec 24             	sub    esp,0x24
c0011a08:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011a0c:	fc                   	cld    
c0011a0d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011a0f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011a13:	50                   	push   eax
c0011a14:	6a 00                	push   0x0
c0011a16:	6a 00                	push   0x0
c0011a18:	6a 27                	push   0x27
c0011a1a:	e8 33 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a1f:	83 c4 34             	add    esp,0x34
c0011a22:	5e                   	pop    esi
c0011a23:	5f                   	pop    edi
c0011a24:	c3                   	ret    

c0011a25 <KiDefaultSignalHandlerResume(int)>:
c0011a25:	57                   	push   edi
c0011a26:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011a2b:	56                   	push   esi
c0011a2c:	be 29 26 02 c0       	mov    esi,0xc0022629
c0011a31:	83 ec 24             	sub    esp,0x24
c0011a34:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011a38:	fc                   	cld    
c0011a39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a3b:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011a3f:	50                   	push   eax
c0011a40:	6a 00                	push   0x0
c0011a42:	6a 00                	push   0x0
c0011a44:	6a 27                	push   0x27
c0011a46:	e8 07 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a4b:	83 c4 34             	add    esp,0x34
c0011a4e:	5e                   	pop    esi
c0011a4f:	5f                   	pop    edi
c0011a50:	c3                   	ret    

c0011a51 <KeDeinitSignals(SigHandlerBlock*)>:
c0011a51:	e9 ed 60 ff ff       	jmp    c0007b43 <free>

c0011a56 <KeInitSignals()>:
c0011a56:	53                   	push   ebx
c0011a57:	83 ec 14             	sub    esp,0x14
c0011a5a:	68 c8 00 00 00       	push   0xc8
c0011a5f:	e8 cf 60 ff ff       	call   c0007b33 <malloc>
c0011a64:	83 c4 0c             	add    esp,0xc
c0011a67:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011a71:	89 c3                	mov    ebx,eax
c0011a73:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011a7d:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011a83:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0011a87:	6a 20                	push   0x20
c0011a89:	6a 00                	push   0x0
c0011a8b:	50                   	push   eax
c0011a8c:	e8 5f ea fe ff       	call   c00004f0 <memset>
c0011a91:	83 c4 0c             	add    esp,0xc
c0011a94:	6a 44                	push   0x44
c0011a96:	6a 00                	push   0x0
c0011a98:	53                   	push   ebx
c0011a99:	e8 52 ea fe ff       	call   c00004f0 <memset>
c0011a9e:	83 c4 18             	add    esp,0x18
c0011aa1:	89 d8                	mov    eax,ebx
c0011aa3:	5b                   	pop    ebx
c0011aa4:	c3                   	ret    

c0011aa5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011aa5:	53                   	push   ebx
c0011aa6:	b8 01 00 00 00       	mov    eax,0x1
c0011aab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011aaf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ab3:	83 f9 10             	cmp    ecx,0x10
c0011ab6:	7f 21                	jg     c0011ad9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011abc:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011abf:	89 03                	mov    DWORD PTR [ebx],eax
c0011ac1:	b8 01 00 00 00       	mov    eax,0x1
c0011ac6:	d3 e0                	shl    eax,cl
c0011ac8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011acc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011acf:	31 c0                	xor    eax,eax
c0011ad1:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011ad9:	5b                   	pop    ebx
c0011ada:	c3                   	ret    

c0011adb <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011adb:	55                   	push   ebp
c0011adc:	57                   	push   edi
c0011add:	bf 08 00 00 00       	mov    edi,0x8
c0011ae2:	56                   	push   esi
c0011ae3:	53                   	push   ebx
c0011ae4:	83 ec 18             	sub    esp,0x18
c0011ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011aeb:	68 46 26 02 c0       	push   0xc0022646
c0011af0:	e8 75 8e ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0011af5:	83 c4 10             	add    esp,0x10
c0011af8:	31 c9                	xor    ecx,ecx
c0011afa:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011b01:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011b07:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011b0b:	99                   	cdq    
c0011b0c:	f7 ff                	idiv   edi
c0011b0e:	8d 42 24             	lea    eax,[edx+0x24]
c0011b11:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011b15:	85 f6                	test   esi,esi
c0011b17:	75 1a                	jne    c0011b33 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011b19:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011b1d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011b21:	50                   	push   eax
c0011b22:	50                   	push   eax
c0011b23:	52                   	push   edx
c0011b24:	68 57 26 02 c0       	push   0xc0022657
c0011b29:	e8 3c 8e ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0011b2e:	83 c4 10             	add    esp,0x10
c0011b31:	eb 1b                	jmp    c0011b4e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011b33:	41                   	inc    ecx
c0011b34:	83 f9 08             	cmp    ecx,0x8
c0011b37:	75 ce                	jne    c0011b07 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011b39:	83 ec 0c             	sub    esp,0xc
c0011b3c:	be 01 00 00 00       	mov    esi,0x1
c0011b41:	68 78 26 02 c0       	push   0xc0022678
c0011b46:	e8 1f 8e ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0011b4b:	83 c4 10             	add    esp,0x10
c0011b4e:	83 c4 0c             	add    esp,0xc
c0011b51:	89 f0                	mov    eax,esi
c0011b53:	5b                   	pop    ebx
c0011b54:	5e                   	pop    esi
c0011b55:	5f                   	pop    edi
c0011b56:	5d                   	pop    ebp
c0011b57:	c3                   	ret    

c0011b58 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011b58:	55                   	push   ebp
c0011b59:	57                   	push   edi
c0011b5a:	56                   	push   esi
c0011b5b:	53                   	push   ebx
c0011b5c:	51                   	push   ecx
c0011b5d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b61:	85 db                	test   ebx,ebx
c0011b63:	0f 84 bc 00 00 00    	je     c0011c25 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b69:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011b70:	0f 84 af 00 00 00    	je     c0011c25 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b76:	31 c9                	xor    ecx,ecx
c0011b78:	bf 08 00 00 00       	mov    edi,0x8
c0011b7d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b83:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011b86:	99                   	cdq    
c0011b87:	f7 ff                	idiv   edi
c0011b89:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011b90:	85 ed                	test   ebp,ebp
c0011b92:	0f 84 9e 00 00 00    	je     c0011c36 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011b98:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011b9e:	89 e9                	mov    ecx,ebp
c0011ba0:	bf 01 00 00 00       	mov    edi,0x1
c0011ba5:	d3 e7                	shl    edi,cl
c0011ba7:	31 c9                	xor    ecx,ecx
c0011ba9:	89 04 24             	mov    DWORD PTR [esp],eax
c0011bac:	b8 01 00 00 00       	mov    eax,0x1
c0011bb1:	d3 e0                	shl    eax,cl
c0011bb3:	85 04 24             	test   DWORD PTR [esp],eax
c0011bb6:	74 06                	je     c0011bbe <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011bb8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011bbc:	75 67                	jne    c0011c25 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bbe:	41                   	inc    ecx
c0011bbf:	83 f9 11             	cmp    ecx,0x11
c0011bc2:	75 e8                	jne    c0011bac <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011bc4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011bc7:	46                   	inc    esi
c0011bc8:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011bce:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011bd9:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011be0:	09 f8                	or     eax,edi
c0011be2:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011be8:	31 c0                	xor    eax,eax
c0011bea:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011bf2:	74 09                	je     c0011bfd <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011bf4:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011bfb:	eb 06                	jmp    c0011c03 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011bfd:	40                   	inc    eax
c0011bfe:	83 f8 08             	cmp    eax,0x8
c0011c01:	75 e7                	jne    c0011bea <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011c03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c07:	83 fd 09             	cmp    ebp,0x9
c0011c0a:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011c0d:	89 2a                	mov    DWORD PTR [edx],ebp
c0011c0f:	75 07                	jne    c0011c18 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011c11:	b8 e4 19 01 c0       	mov    eax,0xc00119e4
c0011c16:	eb 31                	jmp    c0011c49 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c18:	83 f8 01             	cmp    eax,0x1
c0011c1b:	75 0c                	jne    c0011c29 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011c1d:	f7 d7                	not    edi
c0011c1f:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011c25:	31 c0                	xor    eax,eax
c0011c27:	eb 20                	jmp    c0011c49 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c29:	85 c0                	test   eax,eax
c0011c2b:	75 1c                	jne    c0011c49 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c2d:	8b 04 ad 80 3e 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc180]
c0011c34:	eb 13                	jmp    c0011c49 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c36:	41                   	inc    ecx
c0011c37:	46                   	inc    esi
c0011c38:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c3e:	83 f9 08             	cmp    ecx,0x8
c0011c41:	0f 85 36 ff ff ff    	jne    c0011b7d <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011c47:	eb dc                	jmp    c0011c25 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c49:	5a                   	pop    edx
c0011c4a:	5b                   	pop    ebx
c0011c4b:	5e                   	pop    esi
c0011c4c:	5f                   	pop    edi
c0011c4d:	5d                   	pop    ebp
c0011c4e:	c3                   	ret    

c0011c4f <KiCheckSignalZ>:
c0011c4f:	83 ec 10             	sub    esp,0x10
c0011c52:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c56:	50                   	push   eax
c0011c57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c5c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c5f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c65:	e8 ee fe ff ff       	call   c0011b58 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011c6a:	5a                   	pop    edx
c0011c6b:	31 d2                	xor    edx,edx
c0011c6d:	59                   	pop    ecx
c0011c6e:	85 c0                	test   eax,eax
c0011c70:	74 19                	je     c0011c8b <KiCheckSignalZ+0x3c>
c0011c72:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c78:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011c7b:	89 02                	mov    DWORD PTR [edx],eax
c0011c7d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c88:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011c8b:	89 d0                	mov    eax,edx
c0011c8d:	83 c4 10             	add    esp,0x10
c0011c90:	c3                   	ret    

c0011c91 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011c91:	56                   	push   esi
c0011c92:	53                   	push   ebx
c0011c93:	bb 01 00 00 00       	mov    ebx,0x1
c0011c98:	52                   	push   edx
c0011c99:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011c9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ca1:	d3 e3                	shl    ebx,cl
c0011ca3:	83 f9 10             	cmp    ecx,0x10
c0011ca6:	7f 08                	jg     c0011cb0 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011ca8:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011cae:	75 10                	jne    c0011cc0 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011cb0:	83 ec 0c             	sub    esp,0xc
c0011cb3:	68 89 26 02 c0       	push   0xc0022689
c0011cb8:	e8 82 f9 ff ff       	call   c001163f <KePanic(char const*)>
c0011cbd:	83 c4 10             	add    esp,0x10
c0011cc0:	f7 d3                	not    ebx
c0011cc2:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011cc8:	58                   	pop    eax
c0011cc9:	5b                   	pop    ebx
c0011cca:	5e                   	pop    esi
c0011ccb:	c3                   	ret    

c0011ccc <KiFinishSignalZ>:
c0011ccc:	53                   	push   ebx
c0011ccd:	83 ec 10             	sub    esp,0x10
c0011cd0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011cd4:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011cd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cdc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cdf:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011ce5:	e8 a7 ff ff ff       	call   c0011c91 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011cea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011cf0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011cf7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011cfe:	83 c4 18             	add    esp,0x18
c0011d01:	5b                   	pop    ebx
c0011d02:	c3                   	ret    

c0011d03 <SysSeekDir(regs*)>:
c0011d03:	31 c0                	xor    eax,eax
c0011d05:	31 d2                	xor    edx,edx
c0011d07:	c3                   	ret    

c0011d08 <SysTellDir(regs*)>:
c0011d08:	31 c0                	xor    eax,eax
c0011d0a:	31 d2                	xor    edx,edx
c0011d0c:	c3                   	ret    

c0011d0d <SysVerify(regs*)>:
c0011d0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d11:	31 d2                	xor    edx,edx
c0011d13:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d16:	c3                   	ret    

c0011d17 <SysGetArgc(regs*)>:
c0011d17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d1c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d1f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011d25:	89 c2                	mov    edx,eax
c0011d27:	c1 fa 1f             	sar    edx,0x1f
c0011d2a:	c3                   	ret    

c0011d2b <SysTTYName(regs*)>:
c0011d2b:	b8 01 00 00 00       	mov    eax,0x1
c0011d30:	31 d2                	xor    edx,edx
c0011d32:	c3                   	ret    

c0011d33 <SysFormatDisk(regs*)>:
c0011d33:	56                   	push   esi
c0011d34:	53                   	push   ebx
c0011d35:	83 ec 04             	sub    esp,0x4
c0011d38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d3c:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011d42:	eb 2a                	jmp    c0011d6e <SysFormatDisk(regs*)+0x3b>
c0011d44:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011d47:	83 ec 0c             	sub    esp,0xc
c0011d4a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011d4d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d4f:	51                   	push   ecx
c0011d50:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011d53:	51                   	push   ecx
c0011d54:	50                   	push   eax
c0011d55:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011d5c:	50                   	push   eax
c0011d5d:	53                   	push   ebx
c0011d5e:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011d61:	83 c4 20             	add    esp,0x20
c0011d64:	83 f8 08             	cmp    eax,0x8
c0011d67:	89 c1                	mov    ecx,eax
c0011d69:	75 14                	jne    c0011d7f <SysFormatDisk(regs*)+0x4c>
c0011d6b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011d6e:	85 db                	test   ebx,ebx
c0011d70:	75 d2                	jne    c0011d44 <SysFormatDisk(regs*)+0x11>
c0011d72:	b8 03 00 00 00       	mov    eax,0x3
c0011d77:	31 d2                	xor    edx,edx
c0011d79:	83 c4 04             	add    esp,0x4
c0011d7c:	5b                   	pop    ebx
c0011d7d:	5e                   	pop    esi
c0011d7e:	c3                   	ret    
c0011d7f:	85 c0                	test   eax,eax
c0011d81:	74 13                	je     c0011d96 <SysFormatDisk(regs*)+0x63>
c0011d83:	31 d2                	xor    edx,edx
c0011d85:	83 f9 09             	cmp    ecx,0x9
c0011d88:	b8 01 00 00 00       	mov    eax,0x1
c0011d8d:	74 ea                	je     c0011d79 <SysFormatDisk(regs*)+0x46>
c0011d8f:	b8 02 00 00 00       	mov    eax,0x2
c0011d94:	eb e1                	jmp    c0011d77 <SysFormatDisk(regs*)+0x44>
c0011d96:	31 c0                	xor    eax,eax
c0011d98:	eb dd                	jmp    c0011d77 <SysFormatDisk(regs*)+0x44>

c0011d9a <SysSetDiskVolumeLabel(regs*)>:
c0011d9a:	56                   	push   esi
c0011d9b:	53                   	push   ebx
c0011d9c:	83 ec 04             	sub    esp,0x4
c0011d9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011da3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011da6:	83 f8 19             	cmp    eax,0x19
c0011da9:	77 33                	ja     c0011dde <SysSetDiskVolumeLabel(regs*)+0x44>
c0011dab:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011db2:	85 c9                	test   ecx,ecx
c0011db4:	74 28                	je     c0011dde <SysSetDiskVolumeLabel(regs*)+0x44>
c0011db6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011db9:	85 db                	test   ebx,ebx
c0011dbb:	74 21                	je     c0011dde <SysSetDiskVolumeLabel(regs*)+0x44>
c0011dbd:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011dc3:	85 d2                	test   edx,edx
c0011dc5:	74 17                	je     c0011dde <SysSetDiskVolumeLabel(regs*)+0x44>
c0011dc7:	8b 32                	mov    esi,DWORD PTR [edx]
c0011dc9:	53                   	push   ebx
c0011dca:	50                   	push   eax
c0011dcb:	51                   	push   ecx
c0011dcc:	52                   	push   edx
c0011dcd:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011dd0:	83 c4 10             	add    esp,0x10
c0011dd3:	83 c4 04             	add    esp,0x4
c0011dd6:	5b                   	pop    ebx
c0011dd7:	5e                   	pop    esi
c0011dd8:	89 c2                	mov    edx,eax
c0011dda:	c1 fa 1f             	sar    edx,0x1f
c0011ddd:	c3                   	ret    
c0011dde:	83 c4 04             	add    esp,0x4
c0011de1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011de6:	5b                   	pop    ebx
c0011de7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dec:	5e                   	pop    esi
c0011ded:	c3                   	ret    

c0011dee <SysGetDiskVolumeLabel(regs*)>:
c0011dee:	57                   	push   edi
c0011def:	56                   	push   esi
c0011df0:	53                   	push   ebx
c0011df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011df5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011df8:	83 fa 19             	cmp    edx,0x19
c0011dfb:	77 3c                	ja     c0011e39 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dfd:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011e04:	85 c9                	test   ecx,ecx
c0011e06:	74 31                	je     c0011e39 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e08:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e0b:	85 db                	test   ebx,ebx
c0011e0d:	74 2a                	je     c0011e39 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e0f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011e12:	85 f6                	test   esi,esi
c0011e14:	74 23                	je     c0011e39 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e16:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011e1c:	85 c0                	test   eax,eax
c0011e1e:	74 19                	je     c0011e39 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e20:	83 ec 0c             	sub    esp,0xc
c0011e23:	8b 38                	mov    edi,DWORD PTR [eax]
c0011e25:	56                   	push   esi
c0011e26:	53                   	push   ebx
c0011e27:	52                   	push   edx
c0011e28:	51                   	push   ecx
c0011e29:	50                   	push   eax
c0011e2a:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011e2d:	83 c4 20             	add    esp,0x20
c0011e30:	5b                   	pop    ebx
c0011e31:	5e                   	pop    esi
c0011e32:	89 c2                	mov    edx,eax
c0011e34:	c1 fa 1f             	sar    edx,0x1f
c0011e37:	5f                   	pop    edi
c0011e38:	c3                   	ret    
c0011e39:	5b                   	pop    ebx
c0011e3a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e44:	5e                   	pop    esi
c0011e45:	5f                   	pop    edi
c0011e46:	c3                   	ret    

c0011e47 <SysShutdown(regs*)>:
c0011e47:	57                   	push   edi
c0011e48:	56                   	push   esi
c0011e49:	83 ec 04             	sub    esp,0x4
c0011e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e50:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e53:	85 c0                	test   eax,eax
c0011e55:	74 1e                	je     c0011e75 <SysShutdown(regs*)+0x2e>
c0011e57:	83 f8 01             	cmp    eax,0x1
c0011e5a:	74 5f                	je     c0011ebb <SysShutdown(regs*)+0x74>
c0011e5c:	83 f8 02             	cmp    eax,0x2
c0011e5f:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e64:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e69:	74 32                	je     c0011e9d <SysShutdown(regs*)+0x56>
c0011e6b:	83 c4 04             	add    esp,0x4
c0011e6e:	89 f0                	mov    eax,esi
c0011e70:	5e                   	pop    esi
c0011e71:	89 fa                	mov    edx,edi
c0011e73:	5f                   	pop    edi
c0011e74:	c3                   	ret    
c0011e75:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e7a:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e7f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e84:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e86:	6a 00                	push   0x0
c0011e88:	6a 00                	push   0x0
c0011e8a:	6a 00                	push   0x0
c0011e8c:	50                   	push   eax
c0011e8d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e90:	83 c4 10             	add    esp,0x10
c0011e93:	89 f0                	mov    eax,esi
c0011e95:	83 c4 04             	add    esp,0x4
c0011e98:	89 fa                	mov    edx,edi
c0011e9a:	5e                   	pop    esi
c0011e9b:	5f                   	pop    edi
c0011e9c:	c3                   	ret    
c0011e9d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011ea2:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ea4:	6a 00                	push   0x0
c0011ea6:	6a 00                	push   0x0
c0011ea8:	6a 01                	push   0x1
c0011eaa:	50                   	push   eax
c0011eab:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011eae:	83 c4 10             	add    esp,0x10
c0011eb1:	89 f0                	mov    eax,esi
c0011eb3:	83 c4 04             	add    esp,0x4
c0011eb6:	89 fa                	mov    edx,edi
c0011eb8:	5e                   	pop    esi
c0011eb9:	5f                   	pop    edi
c0011eba:	c3                   	ret    
c0011ebb:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011ec0:	85 c0                	test   eax,eax
c0011ec2:	74 02                	je     c0011ec6 <SysShutdown(regs*)+0x7f>
c0011ec4:	ff d0                	call   eax
c0011ec6:	31 f6                	xor    esi,esi
c0011ec8:	83 c4 04             	add    esp,0x4
c0011ecb:	89 f0                	mov    eax,esi
c0011ecd:	31 ff                	xor    edi,edi
c0011ecf:	5e                   	pop    esi
c0011ed0:	89 fa                	mov    edx,edi
c0011ed2:	5f                   	pop    edi
c0011ed3:	c3                   	ret    

c0011ed4 <SysRealpath(regs*)>:
c0011ed4:	53                   	push   ebx
c0011ed5:	83 ec 08             	sub    esp,0x8
c0011ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011edc:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011edf:	85 c9                	test   ecx,ecx
c0011ee1:	74 36                	je     c0011f19 <SysRealpath(regs*)+0x45>
c0011ee3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011ee6:	31 d2                	xor    edx,edx
c0011ee8:	b8 01 00 00 00       	mov    eax,0x1
c0011eed:	85 db                	test   ebx,ebx
c0011eef:	75 05                	jne    c0011ef6 <SysRealpath(regs*)+0x22>
c0011ef1:	83 c4 08             	add    esp,0x8
c0011ef4:	5b                   	pop    ebx
c0011ef5:	c3                   	ret    
c0011ef6:	6a 00                	push   0x0
c0011ef8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011efd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f00:	05 0c 01 00 00       	add    eax,0x10c
c0011f05:	50                   	push   eax
c0011f06:	51                   	push   ecx
c0011f07:	53                   	push   ebx
c0011f08:	e8 69 99 ff ff       	call   c000b876 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011f0d:	83 c4 10             	add    esp,0x10
c0011f10:	31 c0                	xor    eax,eax
c0011f12:	31 d2                	xor    edx,edx
c0011f14:	83 c4 08             	add    esp,0x8
c0011f17:	5b                   	pop    ebx
c0011f18:	c3                   	ret    
c0011f19:	b8 01 00 00 00       	mov    eax,0x1
c0011f1e:	31 d2                	xor    edx,edx
c0011f20:	eb f2                	jmp    c0011f14 <SysRealpath(regs*)+0x40>

c0011f22 <SysReadDir(regs*)>:
c0011f22:	53                   	push   ebx
c0011f23:	83 ec 18             	sub    esp,0x18
c0011f26:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f2d:	83 f8 02             	cmp    eax,0x2
c0011f30:	76 4f                	jbe    c0011f81 <SysReadDir(regs*)+0x5f>
c0011f32:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011f39:	77 52                	ja     c0011f8d <SysReadDir(regs*)+0x6b>
c0011f3b:	83 ec 0c             	sub    esp,0xc
c0011f3e:	50                   	push   eax
c0011f3f:	e8 b7 75 ff ff       	call   c00094fb <KeGetFileFromDescriptor(int)>
c0011f44:	83 c4 10             	add    esp,0x10
c0011f47:	85 c0                	test   eax,eax
c0011f49:	74 42                	je     c0011f8d <SysReadDir(regs*)+0x6b>
c0011f4b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f53:	83 ec 0c             	sub    esp,0xc
c0011f56:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f5c:	51                   	push   ecx
c0011f5d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f60:	51                   	push   ecx
c0011f61:	6a 00                	push   0x0
c0011f63:	68 10 01 00 00       	push   0x110
c0011f68:	50                   	push   eax
c0011f69:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f6c:	83 c4 20             	add    esp,0x20
c0011f6f:	85 c0                	test   eax,eax
c0011f71:	89 c1                	mov    ecx,eax
c0011f73:	74 27                	je     c0011f9c <SysReadDir(regs*)+0x7a>
c0011f75:	31 d2                	xor    edx,edx
c0011f77:	83 f9 07             	cmp    ecx,0x7
c0011f7a:	b8 02 00 00 00       	mov    eax,0x2
c0011f7f:	75 16                	jne    c0011f97 <SysReadDir(regs*)+0x75>
c0011f81:	b8 01 00 00 00       	mov    eax,0x1
c0011f86:	31 d2                	xor    edx,edx
c0011f88:	83 c4 18             	add    esp,0x18
c0011f8b:	5b                   	pop    ebx
c0011f8c:	c3                   	ret    
c0011f8d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f92:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f97:	83 c4 18             	add    esp,0x18
c0011f9a:	5b                   	pop    ebx
c0011f9b:	c3                   	ret    
c0011f9c:	31 c0                	xor    eax,eax
c0011f9e:	31 d2                	xor    edx,edx
c0011fa0:	eb e6                	jmp    c0011f88 <SysReadDir(regs*)+0x66>

c0011fa2 <SysIsATTY(regs*)>:
c0011fa2:	83 ec 0c             	sub    esp,0xc
c0011fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fa9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011fac:	83 f8 02             	cmp    eax,0x2
c0011faf:	76 07                	jbe    c0011fb8 <SysIsATTY(regs*)+0x16>
c0011fb1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011fb6:	75 26                	jne    c0011fde <SysIsATTY(regs*)+0x3c>
c0011fb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fbd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fc0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011fc6:	85 c0                	test   eax,eax
c0011fc8:	74 24                	je     c0011fee <SysIsATTY(regs*)+0x4c>
c0011fca:	8b 10                	mov    edx,DWORD PTR [eax]
c0011fcc:	83 ec 0c             	sub    esp,0xc
c0011fcf:	50                   	push   eax
c0011fd0:	ff 12                	call   DWORD PTR [edx]
c0011fd2:	83 c4 10             	add    esp,0x10
c0011fd5:	31 d2                	xor    edx,edx
c0011fd7:	83 c4 0c             	add    esp,0xc
c0011fda:	0f b6 c0             	movzx  eax,al
c0011fdd:	c3                   	ret    
c0011fde:	83 ec 0c             	sub    esp,0xc
c0011fe1:	50                   	push   eax
c0011fe2:	e8 14 75 ff ff       	call   c00094fb <KeGetFileFromDescriptor(int)>
c0011fe7:	83 c4 10             	add    esp,0x10
c0011fea:	85 c0                	test   eax,eax
c0011fec:	75 dc                	jne    c0011fca <SysIsATTY(regs*)+0x28>
c0011fee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ff3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ff8:	83 c4 0c             	add    esp,0xc
c0011ffb:	c3                   	ret    

c0011ffc <SysSeek(regs*)>:
c0011ffc:	56                   	push   esi
c0011ffd:	53                   	push   ebx
c0011ffe:	83 ec 04             	sub    esp,0x4
c0012001:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012005:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012008:	8d 71 fd             	lea    esi,[ecx-0x3]
c001200b:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0012011:	77 33                	ja     c0012046 <SysSeek(regs*)+0x4a>
c0012013:	83 ec 0c             	sub    esp,0xc
c0012016:	51                   	push   ecx
c0012017:	e8 df 74 ff ff       	call   c00094fb <KeGetFileFromDescriptor(int)>
c001201c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001201f:	83 c4 0c             	add    esp,0xc
c0012022:	31 db                	xor    ebx,ebx
c0012024:	53                   	push   ebx
c0012025:	51                   	push   ecx
c0012026:	50                   	push   eax
c0012027:	e8 32 9c ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c001202c:	83 c4 10             	add    esp,0x10
c001202f:	85 c0                	test   eax,eax
c0012031:	0f 95 c0             	setne  al
c0012034:	31 d2                	xor    edx,edx
c0012036:	0f b6 c0             	movzx  eax,al
c0012039:	f7 d8                	neg    eax
c001203b:	83 d2 00             	adc    edx,0x0
c001203e:	83 c4 04             	add    esp,0x4
c0012041:	5b                   	pop    ebx
c0012042:	f7 da                	neg    edx
c0012044:	5e                   	pop    esi
c0012045:	c3                   	ret    
c0012046:	83 c4 04             	add    esp,0x4
c0012049:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001204e:	5b                   	pop    ebx
c001204f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012054:	5e                   	pop    esi
c0012055:	c3                   	ret    

c0012056 <SysTell(regs*)>:
c0012056:	53                   	push   ebx
c0012057:	83 ec 08             	sub    esp,0x8
c001205a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001205e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012061:	83 f8 02             	cmp    eax,0x2
c0012064:	76 4e                	jbe    c00120b4 <SysTell(regs*)+0x5e>
c0012066:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001206b:	76 19                	jbe    c0012086 <SysTell(regs*)+0x30>
c001206d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012070:	31 d2                	xor    edx,edx
c0012072:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001207f:	83 c4 08             	add    esp,0x8
c0012082:	31 c0                	xor    eax,eax
c0012084:	5b                   	pop    ebx
c0012085:	c3                   	ret    
c0012086:	83 ec 0c             	sub    esp,0xc
c0012089:	50                   	push   eax
c001208a:	e8 6c 74 ff ff       	call   c00094fb <KeGetFileFromDescriptor(int)>
c001208f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012092:	5a                   	pop    edx
c0012093:	59                   	pop    ecx
c0012094:	53                   	push   ebx
c0012095:	50                   	push   eax
c0012096:	e8 6f 9c ff ff       	call   c000bd0a <File::tell(unsigned long long*)>
c001209b:	83 c4 10             	add    esp,0x10
c001209e:	85 c0                	test   eax,eax
c00120a0:	0f 95 c0             	setne  al
c00120a3:	31 d2                	xor    edx,edx
c00120a5:	0f b6 c0             	movzx  eax,al
c00120a8:	f7 d8                	neg    eax
c00120aa:	83 d2 00             	adc    edx,0x0
c00120ad:	83 c4 08             	add    esp,0x8
c00120b0:	5b                   	pop    ebx
c00120b1:	f7 da                	neg    edx
c00120b3:	c3                   	ret    
c00120b4:	83 c4 08             	add    esp,0x8
c00120b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120bc:	5b                   	pop    ebx
c00120bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120c2:	c3                   	ret    

c00120c3 <SysSize(regs*)>:
c00120c3:	53                   	push   ebx
c00120c4:	83 ec 18             	sub    esp,0x18
c00120c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00120cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120ce:	83 f8 02             	cmp    eax,0x2
c00120d1:	76 54                	jbe    c0012127 <SysSize(regs*)+0x64>
c00120d3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00120d8:	76 19                	jbe    c00120f3 <SysSize(regs*)+0x30>
c00120da:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120dd:	31 d2                	xor    edx,edx
c00120df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120ec:	83 c4 18             	add    esp,0x18
c00120ef:	31 c0                	xor    eax,eax
c00120f1:	5b                   	pop    ebx
c00120f2:	c3                   	ret    
c00120f3:	83 ec 0c             	sub    esp,0xc
c00120f6:	50                   	push   eax
c00120f7:	e8 ff 73 ff ff       	call   c00094fb <KeGetFileFromDescriptor(int)>
c00120fc:	83 c4 0c             	add    esp,0xc
c00120ff:	8d 54 24 13          	lea    edx,[esp+0x13]
c0012103:	52                   	push   edx
c0012104:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012107:	52                   	push   edx
c0012108:	50                   	push   eax
c0012109:	e8 94 9d ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c001210e:	83 c4 10             	add    esp,0x10
c0012111:	85 c0                	test   eax,eax
c0012113:	0f 95 c0             	setne  al
c0012116:	31 d2                	xor    edx,edx
c0012118:	0f b6 c0             	movzx  eax,al
c001211b:	f7 d8                	neg    eax
c001211d:	83 d2 00             	adc    edx,0x0
c0012120:	83 c4 18             	add    esp,0x18
c0012123:	5b                   	pop    ebx
c0012124:	f7 da                	neg    edx
c0012126:	c3                   	ret    
c0012127:	83 c4 18             	add    esp,0x18
c001212a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001212f:	5b                   	pop    ebx
c0012130:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012135:	c3                   	ret    

c0012136 <SysSizeFromFilename(regs*)>:
c0012136:	55                   	push   ebp
c0012137:	57                   	push   edi
c0012138:	56                   	push   esi
c0012139:	53                   	push   ebx
c001213a:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0012140:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0012147:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001214a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001214d:	85 f6                	test   esi,esi
c001214f:	89 f8                	mov    eax,edi
c0012151:	74 09                	je     c001215c <SysSizeFromFilename(regs*)+0x26>
c0012153:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012159:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001215c:	83 f8 02             	cmp    eax,0x2
c001215f:	0f 86 ca 00 00 00    	jbe    c001222f <SysSizeFromFilename(regs*)+0xf9>
c0012165:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001216a:	76 1f                	jbe    c001218b <SysSizeFromFilename(regs*)+0x55>
c001216c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001216f:	31 d2                	xor    edx,edx
c0012171:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012177:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001217e:	31 c0                	xor    eax,eax
c0012180:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012186:	5b                   	pop    ebx
c0012187:	5e                   	pop    esi
c0012188:	5f                   	pop    edi
c0012189:	5d                   	pop    ebp
c001218a:	c3                   	ret    
c001218b:	83 ec 0c             	sub    esp,0xc
c001218e:	68 14 01 00 00       	push   0x114
c0012193:	e8 9b 59 ff ff       	call   c0007b33 <malloc>
c0012198:	6a 01                	push   0x1
c001219a:	89 c5                	mov    ebp,eax
c001219c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121a1:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00121a4:	51                   	push   ecx
c00121a5:	57                   	push   edi
c00121a6:	55                   	push   ebp
c00121a7:	e8 f8 98 ff ff       	call   c000baa4 <File::File(char const*, Process*, bool)>
c00121ac:	83 c4 1c             	add    esp,0x1c
c00121af:	8d 44 24 13          	lea    eax,[esp+0x13]
c00121b3:	50                   	push   eax
c00121b4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00121b7:	53                   	push   ebx
c00121b8:	55                   	push   ebp
c00121b9:	e8 e4 9c ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c00121be:	83 c4 10             	add    esp,0x10
c00121c1:	85 ed                	test   ebp,ebp
c00121c3:	89 c3                	mov    ebx,eax
c00121c5:	74 0d                	je     c00121d4 <SysSizeFromFilename(regs*)+0x9e>
c00121c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00121ca:	83 ec 0c             	sub    esp,0xc
c00121cd:	55                   	push   ebp
c00121ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00121d1:	83 c4 10             	add    esp,0x10
c00121d4:	85 db                	test   ebx,ebx
c00121d6:	75 57                	jne    c001222f <SysSizeFromFilename(regs*)+0xf9>
c00121d8:	6a 00                	push   0x0
c00121da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121e2:	05 0c 01 00 00       	add    eax,0x10c
c00121e7:	50                   	push   eax
c00121e8:	57                   	push   edi
c00121e9:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00121f0:	53                   	push   ebx
c00121f1:	e8 80 96 ff ff       	call   c000b876 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00121f6:	58                   	pop    eax
c00121f7:	5a                   	pop    edx
c00121f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00121fc:	50                   	push   eax
c00121fd:	53                   	push   ebx
c00121fe:	e8 db 90 ff ff       	call   c000b2de <KeDereferenceSymlink(char const*, char*)>
c0012203:	83 c4 10             	add    esp,0x10
c0012206:	ba 00 00 00 00       	mov    edx,0x0
c001220b:	83 f8 01             	cmp    eax,0x1
c001220e:	b8 00 00 00 00       	mov    eax,0x0
c0012213:	74 2f                	je     c0012244 <SysSizeFromFilename(regs*)+0x10e>
c0012215:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001221a:	74 3b                	je     c0012257 <SysSizeFromFilename(regs*)+0x121>
c001221c:	85 f6                	test   esi,esi
c001221e:	0f 84 5c ff ff ff    	je     c0012180 <SysSizeFromFilename(regs*)+0x4a>
c0012224:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001222a:	e9 51 ff ff ff       	jmp    c0012180 <SysSizeFromFilename(regs*)+0x4a>
c001222f:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012235:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001223a:	5b                   	pop    ebx
c001223b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012240:	5e                   	pop    esi
c0012241:	5f                   	pop    edi
c0012242:	5d                   	pop    ebp
c0012243:	c3                   	ret    
c0012244:	85 f6                	test   esi,esi
c0012246:	0f 84 34 ff ff ff    	je     c0012180 <SysSizeFromFilename(regs*)+0x4a>
c001224c:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012252:	e9 29 ff ff ff       	jmp    c0012180 <SysSizeFromFilename(regs*)+0x4a>
c0012257:	85 f6                	test   esi,esi
c0012259:	0f 84 21 ff ff ff    	je     c0012180 <SysSizeFromFilename(regs*)+0x4a>
c001225f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012265:	e9 16 ff ff ff       	jmp    c0012180 <SysSizeFromFilename(regs*)+0x4a>

c001226a <SysSizeFromFilenameNoSymlink(regs*)>:
c001226a:	55                   	push   ebp
c001226b:	57                   	push   edi
c001226c:	56                   	push   esi
c001226d:	53                   	push   ebx
c001226e:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0012274:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001227b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001227e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012281:	85 f6                	test   esi,esi
c0012283:	89 f8                	mov    eax,edi
c0012285:	74 09                	je     c0012290 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0012287:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001228d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012290:	83 f8 02             	cmp    eax,0x2
c0012293:	0f 86 ca 00 00 00    	jbe    c0012363 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0012299:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001229e:	76 1f                	jbe    c00122bf <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c00122a0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00122a3:	31 d2                	xor    edx,edx
c00122a5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00122ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00122b2:	31 c0                	xor    eax,eax
c00122b4:	81 c4 4c 02 00 00    	add    esp,0x24c
c00122ba:	5b                   	pop    ebx
c00122bb:	5e                   	pop    esi
c00122bc:	5f                   	pop    edi
c00122bd:	5d                   	pop    ebp
c00122be:	c3                   	ret    
c00122bf:	83 ec 0c             	sub    esp,0xc
c00122c2:	68 14 01 00 00       	push   0x114
c00122c7:	e8 67 58 ff ff       	call   c0007b33 <malloc>
c00122cc:	6a 00                	push   0x0
c00122ce:	89 c5                	mov    ebp,eax
c00122d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122d5:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00122d8:	51                   	push   ecx
c00122d9:	57                   	push   edi
c00122da:	55                   	push   ebp
c00122db:	e8 c4 97 ff ff       	call   c000baa4 <File::File(char const*, Process*, bool)>
c00122e0:	83 c4 1c             	add    esp,0x1c
c00122e3:	8d 44 24 13          	lea    eax,[esp+0x13]
c00122e7:	50                   	push   eax
c00122e8:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00122eb:	53                   	push   ebx
c00122ec:	55                   	push   ebp
c00122ed:	e8 b0 9b ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c00122f2:	83 c4 10             	add    esp,0x10
c00122f5:	85 ed                	test   ebp,ebp
c00122f7:	89 c3                	mov    ebx,eax
c00122f9:	74 0d                	je     c0012308 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c00122fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00122fe:	83 ec 0c             	sub    esp,0xc
c0012301:	55                   	push   ebp
c0012302:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012305:	83 c4 10             	add    esp,0x10
c0012308:	85 db                	test   ebx,ebx
c001230a:	75 57                	jne    c0012363 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c001230c:	6a 00                	push   0x0
c001230e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012313:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012316:	05 0c 01 00 00       	add    eax,0x10c
c001231b:	50                   	push   eax
c001231c:	57                   	push   edi
c001231d:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0012324:	53                   	push   ebx
c0012325:	e8 4c 95 ff ff       	call   c000b876 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001232a:	58                   	pop    eax
c001232b:	5a                   	pop    edx
c001232c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012330:	50                   	push   eax
c0012331:	53                   	push   ebx
c0012332:	e8 a7 8f ff ff       	call   c000b2de <KeDereferenceSymlink(char const*, char*)>
c0012337:	83 c4 10             	add    esp,0x10
c001233a:	ba 00 00 00 00       	mov    edx,0x0
c001233f:	83 f8 01             	cmp    eax,0x1
c0012342:	b8 00 00 00 00       	mov    eax,0x0
c0012347:	74 2f                	je     c0012378 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0012349:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001234e:	74 3b                	je     c001238b <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c0012350:	85 f6                	test   esi,esi
c0012352:	0f 84 5c ff ff ff    	je     c00122b4 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012358:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001235e:	e9 51 ff ff ff       	jmp    c00122b4 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012363:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012369:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001236e:	5b                   	pop    ebx
c001236f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012374:	5e                   	pop    esi
c0012375:	5f                   	pop    edi
c0012376:	5d                   	pop    ebp
c0012377:	c3                   	ret    
c0012378:	85 f6                	test   esi,esi
c001237a:	0f 84 34 ff ff ff    	je     c00122b4 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012380:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012386:	e9 29 ff ff ff       	jmp    c00122b4 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001238b:	85 f6                	test   esi,esi
c001238d:	0f 84 21 ff ff ff    	je     c00122b4 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012393:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012399:	e9 16 ff ff ff       	jmp    c00122b4 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c001239e <SysClose(regs*)>:
c001239e:	53                   	push   ebx
c001239f:	83 ec 08             	sub    esp,0x8
c00123a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123a6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00123a9:	83 f8 02             	cmp    eax,0x2
c00123ac:	76 41                	jbe    c00123ef <SysClose(regs*)+0x51>
c00123ae:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00123b4:	83 fa 01             	cmp    edx,0x1
c00123b7:	76 2d                	jbe    c00123e6 <SysClose(regs*)+0x48>
c00123b9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00123be:	77 2f                	ja     c00123ef <SysClose(regs*)+0x51>
c00123c0:	83 ec 0c             	sub    esp,0xc
c00123c3:	50                   	push   eax
c00123c4:	e8 32 71 ff ff       	call   c00094fb <KeGetFileFromDescriptor(int)>
c00123c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00123cc:	89 c3                	mov    ebx,eax
c00123ce:	e8 2b 98 ff ff       	call   c000bbfe <File::close()>
c00123d3:	83 c4 10             	add    esp,0x10
c00123d6:	85 db                	test   ebx,ebx
c00123d8:	74 0c                	je     c00123e6 <SysClose(regs*)+0x48>
c00123da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	53                   	push   ebx
c00123e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123e3:	83 c4 10             	add    esp,0x10
c00123e6:	83 c4 08             	add    esp,0x8
c00123e9:	31 c0                	xor    eax,eax
c00123eb:	5b                   	pop    ebx
c00123ec:	31 d2                	xor    edx,edx
c00123ee:	c3                   	ret    
c00123ef:	83 c4 08             	add    esp,0x8
c00123f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123f7:	5b                   	pop    ebx
c00123f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123fd:	c3                   	ret    

c00123fe <SysOpenDir(regs*)>:
c00123fe:	56                   	push   esi
c00123ff:	53                   	push   ebx
c0012400:	83 ec 04             	sub    esp,0x4
c0012403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012407:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001240a:	85 c9                	test   ecx,ecx
c001240c:	74 5d                	je     c001246b <SysOpenDir(regs*)+0x6d>
c001240e:	83 ec 0c             	sub    esp,0xc
c0012411:	68 14 01 00 00       	push   0x114
c0012416:	e8 18 57 ff ff       	call   c0007b33 <malloc>
c001241b:	83 c4 0c             	add    esp,0xc
c001241e:	89 c6                	mov    esi,eax
c0012420:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012425:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012428:	50                   	push   eax
c0012429:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001242c:	52                   	push   edx
c001242d:	56                   	push   esi
c001242e:	e8 2f 9c ff ff       	call   c000c062 <Directory::Directory(char const*, Process*)>
c0012433:	83 c4 10             	add    esp,0x10
c0012436:	85 f6                	test   esi,esi
c0012438:	74 31                	je     c001246b <SysOpenDir(regs*)+0x6d>
c001243a:	83 ec 0c             	sub    esp,0xc
c001243d:	56                   	push   esi
c001243e:	e8 e7 9c ff ff       	call   c000c12a <Directory::open()>
c0012443:	83 c4 10             	add    esp,0x10
c0012446:	85 c0                	test   eax,eax
c0012448:	75 21                	jne    c001246b <SysOpenDir(regs*)+0x6d>
c001244a:	83 ec 0c             	sub    esp,0xc
c001244d:	56                   	push   esi
c001244e:	e8 ab 6d ff ff       	call   c00091fe <UnixFile::getFileDescriptor()>
c0012453:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012456:	83 c4 10             	add    esp,0x10
c0012459:	89 02                	mov    DWORD PTR [edx],eax
c001245b:	c1 f8 1f             	sar    eax,0x1f
c001245e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012461:	83 c4 04             	add    esp,0x4
c0012464:	31 c0                	xor    eax,eax
c0012466:	5b                   	pop    ebx
c0012467:	31 d2                	xor    edx,edx
c0012469:	5e                   	pop    esi
c001246a:	c3                   	ret    
c001246b:	83 c4 04             	add    esp,0x4
c001246e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012473:	5b                   	pop    ebx
c0012474:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012479:	5e                   	pop    esi
c001247a:	c3                   	ret    

c001247b <SysMakeDir(regs*)>:
c001247b:	56                   	push   esi
c001247c:	53                   	push   ebx
c001247d:	83 ec 10             	sub    esp,0x10
c0012480:	68 14 01 00 00       	push   0x114
c0012485:	e8 a9 56 ff ff       	call   c0007b33 <malloc>
c001248a:	83 c4 0c             	add    esp,0xc
c001248d:	89 c3                	mov    ebx,eax
c001248f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012494:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012497:	50                   	push   eax
c0012498:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001249c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001249f:	52                   	push   edx
c00124a0:	53                   	push   ebx
c00124a1:	e8 bc 9b ff ff       	call   c000c062 <Directory::Directory(char const*, Process*)>
c00124a6:	83 c4 10             	add    esp,0x10
c00124a9:	85 db                	test   ebx,ebx
c00124ab:	74 2c                	je     c00124d9 <SysMakeDir(regs*)+0x5e>
c00124ad:	83 ec 0c             	sub    esp,0xc
c00124b0:	53                   	push   ebx
c00124b1:	e8 54 9e ff ff       	call   c000c30a <Directory::create()>
c00124b6:	89 c6                	mov    esi,eax
c00124b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124c0:	83 c4 10             	add    esp,0x10
c00124c3:	31 c0                	xor    eax,eax
c00124c5:	85 f6                	test   esi,esi
c00124c7:	0f 95 c0             	setne  al
c00124ca:	31 d2                	xor    edx,edx
c00124cc:	f7 d8                	neg    eax
c00124ce:	83 d2 00             	adc    edx,0x0
c00124d1:	83 c4 04             	add    esp,0x4
c00124d4:	5b                   	pop    ebx
c00124d5:	f7 da                	neg    edx
c00124d7:	5e                   	pop    esi
c00124d8:	c3                   	ret    
c00124d9:	83 c4 04             	add    esp,0x4
c00124dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124e1:	5b                   	pop    ebx
c00124e2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124e7:	5e                   	pop    esi
c00124e8:	c3                   	ret    

c00124e9 <SysCloseDir(regs*)>:
c00124e9:	53                   	push   ebx
c00124ea:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124ef:	83 ec 08             	sub    esp,0x8
c00124f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00124f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124fe:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0012501:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0012507:	77 2a                	ja     c0012533 <SysCloseDir(regs*)+0x4a>
c0012509:	83 ec 0c             	sub    esp,0xc
c001250c:	51                   	push   ecx
c001250d:	e8 e9 6f ff ff       	call   c00094fb <KeGetFileFromDescriptor(int)>
c0012512:	89 04 24             	mov    DWORD PTR [esp],eax
c0012515:	89 c3                	mov    ebx,eax
c0012517:	e8 6a 9c ff ff       	call   c000c186 <Directory::close()>
c001251c:	83 c4 10             	add    esp,0x10
c001251f:	85 db                	test   ebx,ebx
c0012521:	74 0c                	je     c001252f <SysCloseDir(regs*)+0x46>
c0012523:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012525:	83 ec 0c             	sub    esp,0xc
c0012528:	53                   	push   ebx
c0012529:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001252c:	83 c4 10             	add    esp,0x10
c001252f:	31 c0                	xor    eax,eax
c0012531:	31 d2                	xor    edx,edx
c0012533:	83 c4 08             	add    esp,0x8
c0012536:	5b                   	pop    ebx
c0012537:	c3                   	ret    

c0012538 <SysWait(regs*)>:
c0012538:	83 ec 10             	sub    esp,0x10
c001253b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001253f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012542:	52                   	push   edx
c0012543:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012546:	51                   	push   ecx
c0012547:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001254a:	50                   	push   eax
c001254b:	e8 54 3e 00 00       	call   c00163a4 <waitTask(int, int*, int)>
c0012550:	83 c4 1c             	add    esp,0x1c
c0012553:	89 c2                	mov    edx,eax
c0012555:	c1 fa 1f             	sar    edx,0x1f
c0012558:	c3                   	ret    

c0012559 <SysNotImpl(regs*)>:
c0012559:	83 ec 18             	sub    esp,0x18
c001255c:	68 9a 26 02 c0       	push   0xc002269a
c0012561:	e8 d9 f0 ff ff       	call   c001163f <KePanic(char const*)>
c0012566:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001256b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012570:	83 c4 1c             	add    esp,0x1c
c0012573:	c3                   	ret    

c0012574 <SysPanic(regs*)>:
c0012574:	83 ec 18             	sub    esp,0x18
c0012577:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001257b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001257e:	50                   	push   eax
c001257f:	e8 bb f0 ff ff       	call   c001163f <KePanic(char const*)>
c0012584:	b8 01 00 00 00       	mov    eax,0x1
c0012589:	31 d2                	xor    edx,edx
c001258b:	83 c4 1c             	add    esp,0x1c
c001258e:	c3                   	ret    

c001258f <SysRmdir(regs*)>:
c001258f:	56                   	push   esi
c0012590:	53                   	push   ebx
c0012591:	83 ec 10             	sub    esp,0x10
c0012594:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012598:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001259b:	68 14 01 00 00       	push   0x114
c00125a0:	e8 8e 55 ff ff       	call   c0007b33 <malloc>
c00125a5:	6a 00                	push   0x0
c00125a7:	89 c3                	mov    ebx,eax
c00125a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125b1:	50                   	push   eax
c00125b2:	56                   	push   esi
c00125b3:	53                   	push   ebx
c00125b4:	e8 eb 94 ff ff       	call   c000baa4 <File::File(char const*, Process*, bool)>
c00125b9:	83 c4 14             	add    esp,0x14
c00125bc:	53                   	push   ebx
c00125bd:	e8 ac 97 ff ff       	call   c000bd6e <File::unlink()>
c00125c2:	83 c4 10             	add    esp,0x10
c00125c5:	85 db                	test   ebx,ebx
c00125c7:	89 c6                	mov    esi,eax
c00125c9:	74 0c                	je     c00125d7 <SysRmdir(regs*)+0x48>
c00125cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125cd:	83 ec 0c             	sub    esp,0xc
c00125d0:	53                   	push   ebx
c00125d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00125d4:	83 c4 10             	add    esp,0x10
c00125d7:	31 c0                	xor    eax,eax
c00125d9:	85 f6                	test   esi,esi
c00125db:	0f 95 c0             	setne  al
c00125de:	31 d2                	xor    edx,edx
c00125e0:	f7 d8                	neg    eax
c00125e2:	83 d2 00             	adc    edx,0x0
c00125e5:	83 c4 04             	add    esp,0x4
c00125e8:	5b                   	pop    ebx
c00125e9:	f7 da                	neg    edx
c00125eb:	5e                   	pop    esi
c00125ec:	c3                   	ret    

c00125ed <SysUnlink(regs*)>:
c00125ed:	56                   	push   esi
c00125ee:	53                   	push   ebx
c00125ef:	83 ec 10             	sub    esp,0x10
c00125f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125f6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125f9:	68 14 01 00 00       	push   0x114
c00125fe:	e8 30 55 ff ff       	call   c0007b33 <malloc>
c0012603:	6a 00                	push   0x0
c0012605:	89 c3                	mov    ebx,eax
c0012607:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001260c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001260f:	50                   	push   eax
c0012610:	56                   	push   esi
c0012611:	53                   	push   ebx
c0012612:	e8 8d 94 ff ff       	call   c000baa4 <File::File(char const*, Process*, bool)>
c0012617:	83 c4 14             	add    esp,0x14
c001261a:	53                   	push   ebx
c001261b:	e8 4e 97 ff ff       	call   c000bd6e <File::unlink()>
c0012620:	83 c4 10             	add    esp,0x10
c0012623:	85 db                	test   ebx,ebx
c0012625:	89 c6                	mov    esi,eax
c0012627:	74 0c                	je     c0012635 <SysUnlink(regs*)+0x48>
c0012629:	8b 03                	mov    eax,DWORD PTR [ebx]
c001262b:	83 ec 0c             	sub    esp,0xc
c001262e:	53                   	push   ebx
c001262f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012632:	83 c4 10             	add    esp,0x10
c0012635:	31 c0                	xor    eax,eax
c0012637:	85 f6                	test   esi,esi
c0012639:	0f 95 c0             	setne  al
c001263c:	31 d2                	xor    edx,edx
c001263e:	f7 d8                	neg    eax
c0012640:	83 d2 00             	adc    edx,0x0
c0012643:	83 c4 04             	add    esp,0x4
c0012646:	5b                   	pop    ebx
c0012647:	f7 da                	neg    edx
c0012649:	5e                   	pop    esi
c001264a:	c3                   	ret    

c001264b <SysGetArgv(regs*)>:
c001264b:	83 ec 0c             	sub    esp,0xc
c001264e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012652:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012655:	85 c0                	test   eax,eax
c0012657:	78 2c                	js     c0012685 <SysGetArgv(regs*)+0x3a>
c0012659:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001265f:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012662:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012668:	7d 1b                	jge    c0012685 <SysGetArgv(regs*)+0x3a>
c001266a:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012671:	85 c0                	test   eax,eax
c0012673:	74 18                	je     c001268d <SysGetArgv(regs*)+0x42>
c0012675:	83 ec 08             	sub    esp,0x8
c0012678:	50                   	push   eax
c0012679:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001267c:	50                   	push   eax
c001267d:	e8 ce df fe ff       	call   c0000650 <strcpy>
c0012682:	83 c4 10             	add    esp,0x10
c0012685:	31 c0                	xor    eax,eax
c0012687:	31 d2                	xor    edx,edx
c0012689:	83 c4 0c             	add    esp,0xc
c001268c:	c3                   	ret    
c001268d:	b8 01 00 00 00       	mov    eax,0x1
c0012692:	31 d2                	xor    edx,edx
c0012694:	83 c4 0c             	add    esp,0xc
c0012697:	c3                   	ret    

c0012698 <SysUSleep(regs*)>:
c0012698:	83 ec 1c             	sub    esp,0x1c
c001269b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001269f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00126a2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00126a5:	6a 00                	push   0x0
c00126a7:	6a 64                	push   0x64
c00126a9:	52                   	push   edx
c00126aa:	50                   	push   eax
c00126ab:	e8 80 d1 00 00       	call   c001f830 <__udivdi3>
c00126b0:	83 c4 14             	add    esp,0x14
c00126b3:	50                   	push   eax
c00126b4:	e8 cf 3d 00 00       	call   c0016488 <milliTenthSleep(unsigned int)>
c00126b9:	31 c0                	xor    eax,eax
c00126bb:	31 d2                	xor    edx,edx
c00126bd:	83 c4 1c             	add    esp,0x1c
c00126c0:	c3                   	ret    

c00126c1 <SysSpawn(regs*)>:
c00126c1:	56                   	push   esi
c00126c2:	53                   	push   ebx
c00126c3:	83 ec 04             	sub    esp,0x4
c00126c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126ca:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00126cd:	85 f6                	test   esi,esi
c00126cf:	75 0a                	jne    c00126db <SysSpawn(regs*)+0x1a>
c00126d1:	83 c4 04             	add    esp,0x4
c00126d4:	31 c0                	xor    eax,eax
c00126d6:	5b                   	pop    ebx
c00126d7:	31 d2                	xor    edx,edx
c00126d9:	5e                   	pop    esi
c00126da:	c3                   	ret    
c00126db:	83 ec 0c             	sub    esp,0xc
c00126de:	68 24 07 00 00       	push   0x724
c00126e3:	e8 4b 54 ff ff       	call   c0007b33 <malloc>
c00126e8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00126eb:	83 c4 10             	add    esp,0x10
c00126ee:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00126f1:	89 c6                	mov    esi,eax
c00126f3:	31 c0                	xor    eax,eax
c00126f5:	85 c9                	test   ecx,ecx
c00126f7:	75 08                	jne    c0012701 <SysSpawn(regs*)+0x40>
c00126f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012701:	52                   	push   edx
c0012702:	50                   	push   eax
c0012703:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012706:	50                   	push   eax
c0012707:	56                   	push   esi
c0012708:	e8 e3 33 00 00       	call   c0015af0 <Process::Process(char const*, Process*, char**)>
c001270d:	83 c4 10             	add    esp,0x10
c0012710:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012717:	75 b8                	jne    c00126d1 <SysSpawn(regs*)+0x10>
c0012719:	83 ec 0c             	sub    esp,0xc
c001271c:	56                   	push   esi
c001271d:	e8 06 39 00 00       	call   c0016028 <Process::createUserThread()>
c0012722:	8b 06                	mov    eax,DWORD PTR [esi]
c0012724:	83 c4 10             	add    esp,0x10
c0012727:	83 c4 04             	add    esp,0x4
c001272a:	5b                   	pop    ebx
c001272b:	89 c2                	mov    edx,eax
c001272d:	c1 fa 1f             	sar    edx,0x1f
c0012730:	5e                   	pop    esi
c0012731:	c3                   	ret    

c0012732 <SysGetEnv(regs*)>:
c0012732:	57                   	push   edi
c0012733:	56                   	push   esi
c0012734:	53                   	push   ebx
c0012735:	83 ec 1c             	sub    esp,0x1c
c0012738:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001273d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012741:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012744:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012747:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001274a:	51                   	push   ecx
c001274b:	e8 a7 ed ff ff       	call   c00114f7 <KeGetProcessTotalEnvCount(Process*)>
c0012750:	83 c4 10             	add    esp,0x10
c0012753:	39 c7                	cmp    edi,eax
c0012755:	7c 12                	jl     c0012769 <SysGetEnv(regs*)+0x37>
c0012757:	31 c0                	xor    eax,eax
c0012759:	31 d2                	xor    edx,edx
c001275b:	85 f6                	test   esi,esi
c001275d:	74 03                	je     c0012762 <SysGetEnv(regs*)+0x30>
c001275f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012762:	83 c4 10             	add    esp,0x10
c0012765:	5b                   	pop    ebx
c0012766:	5e                   	pop    esi
c0012767:	5f                   	pop    edi
c0012768:	c3                   	ret    
c0012769:	8d 44 24 08          	lea    eax,[esp+0x8]
c001276d:	83 ec 04             	sub    esp,0x4
c0012770:	57                   	push   edi
c0012771:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012777:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001277a:	57                   	push   edi
c001277b:	50                   	push   eax
c001277c:	e8 96 ed ff ff       	call   c0011517 <KeGetProcessEnvPair(Process*, int)>
c0012781:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012784:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012788:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001278c:	83 c4 0c             	add    esp,0xc
c001278f:	85 d2                	test   edx,edx
c0012791:	75 23                	jne    c00127b6 <SysGetEnv(regs*)+0x84>
c0012793:	83 ec 0c             	sub    esp,0xc
c0012796:	50                   	push   eax
c0012797:	e8 e4 dd fe ff       	call   c0000580 <strlen>
c001279c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001279f:	89 c3                	mov    ebx,eax
c00127a1:	e8 da dd fe ff       	call   c0000580 <strlen>
c00127a6:	83 c4 10             	add    esp,0x10
c00127a9:	31 d2                	xor    edx,edx
c00127ab:	83 c4 10             	add    esp,0x10
c00127ae:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00127b2:	5b                   	pop    ebx
c00127b3:	5e                   	pop    esi
c00127b4:	5f                   	pop    edi
c00127b5:	c3                   	ret    
c00127b6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00127b9:	83 ec 08             	sub    esp,0x8
c00127bc:	50                   	push   eax
c00127bd:	56                   	push   esi
c00127be:	e8 8d de fe ff       	call   c0000650 <strcpy>
c00127c3:	58                   	pop    eax
c00127c4:	5a                   	pop    edx
c00127c5:	68 b4 26 02 c0       	push   0xc00226b4
c00127ca:	56                   	push   esi
c00127cb:	e8 a0 e0 fe ff       	call   c0000870 <strcat>
c00127d0:	59                   	pop    ecx
c00127d1:	5b                   	pop    ebx
c00127d2:	57                   	push   edi
c00127d3:	56                   	push   esi
c00127d4:	e8 97 e0 fe ff       	call   c0000870 <strcat>
c00127d9:	83 c4 10             	add    esp,0x10
c00127dc:	31 c0                	xor    eax,eax
c00127de:	83 c4 10             	add    esp,0x10
c00127e1:	31 d2                	xor    edx,edx
c00127e3:	5b                   	pop    ebx
c00127e4:	5e                   	pop    esi
c00127e5:	5f                   	pop    edi
c00127e6:	c3                   	ret    

c00127e7 <SysSetFatAttrib(regs*)>:
c00127e7:	57                   	push   edi
c00127e8:	56                   	push   esi
c00127e9:	53                   	push   ebx
c00127ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127ee:	83 ec 0c             	sub    esp,0xc
c00127f1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00127f4:	68 14 01 00 00       	push   0x114
c00127f9:	e8 35 53 ff ff       	call   c0007b33 <malloc>
c00127fe:	83 c4 0c             	add    esp,0xc
c0012801:	89 c3                	mov    ebx,eax
c0012803:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012808:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001280b:	50                   	push   eax
c001280c:	57                   	push   edi
c001280d:	53                   	push   ebx
c001280e:	e8 6f 93 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0012813:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012816:	83 c4 0c             	add    esp,0xc
c0012819:	0f b6 d4             	movzx  edx,ah
c001281c:	0f b6 c0             	movzx  eax,al
c001281f:	52                   	push   edx
c0012820:	50                   	push   eax
c0012821:	53                   	push   ebx
c0012822:	e8 e1 95 ff ff       	call   c000be08 <File::chfatattr(unsigned char, unsigned char)>
c0012827:	83 c4 10             	add    esp,0x10
c001282a:	85 db                	test   ebx,ebx
c001282c:	89 c6                	mov    esi,eax
c001282e:	74 0c                	je     c001283c <SysSetFatAttrib(regs*)+0x55>
c0012830:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012832:	83 ec 0c             	sub    esp,0xc
c0012835:	53                   	push   ebx
c0012836:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012839:	83 c4 10             	add    esp,0x10
c001283c:	5b                   	pop    ebx
c001283d:	31 c0                	xor    eax,eax
c001283f:	85 f6                	test   esi,esi
c0012841:	0f 95 c0             	setne  al
c0012844:	31 d2                	xor    edx,edx
c0012846:	5e                   	pop    esi
c0012847:	f7 d8                	neg    eax
c0012849:	83 d2 00             	adc    edx,0x0
c001284c:	f7 da                	neg    edx
c001284e:	5f                   	pop    edi
c001284f:	c3                   	ret    

c0012850 <SysPipe(regs*)>:
c0012850:	57                   	push   edi
c0012851:	56                   	push   esi
c0012852:	53                   	push   ebx
c0012853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012857:	83 ec 0c             	sub    esp,0xc
c001285a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001285d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012860:	6a 20                	push   0x20
c0012862:	e8 cc 52 ff ff       	call   c0007b33 <malloc>
c0012867:	89 c3                	mov    ebx,eax
c0012869:	58                   	pop    eax
c001286a:	5a                   	pop    edx
c001286b:	68 00 50 00 00       	push   0x5000
c0012870:	53                   	push   ebx
c0012871:	e8 28 5c ff ff       	call   c000849e <Pipe::Pipe(int)>
c0012876:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012879:	e8 80 69 ff ff       	call   c00091fe <UnixFile::getFileDescriptor()>
c001287e:	89 07                	mov    DWORD PTR [edi],eax
c0012880:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012883:	e8 76 69 ff ff       	call   c00091fe <UnixFile::getFileDescriptor()>
c0012888:	83 c4 10             	add    esp,0x10
c001288b:	31 d2                	xor    edx,edx
c001288d:	89 06                	mov    DWORD PTR [esi],eax
c001288f:	31 c0                	xor    eax,eax
c0012891:	5b                   	pop    ebx
c0012892:	5e                   	pop    esi
c0012893:	5f                   	pop    edi
c0012894:	c3                   	ret    

c0012895 <SysGetUnixTime(regs*)>:
c0012895:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001289a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00128a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128a4:	e9 a5 9c ff ff       	jmp    c000c54e <Clock::timeInSecondsLocal()>

c00128a9 <string_ends_with(char const*, char const*)>:
c00128a9:	57                   	push   edi
c00128aa:	56                   	push   esi
c00128ab:	53                   	push   ebx
c00128ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00128b0:	83 ec 0c             	sub    esp,0xc
c00128b3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00128b7:	53                   	push   ebx
c00128b8:	e8 c3 dc fe ff       	call   c0000580 <strlen>
c00128bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00128c0:	89 c6                	mov    esi,eax
c00128c2:	e8 b9 dc fe ff       	call   c0000580 <strlen>
c00128c7:	83 c4 10             	add    esp,0x10
c00128ca:	31 d2                	xor    edx,edx
c00128cc:	39 c6                	cmp    esi,eax
c00128ce:	7d 06                	jge    c00128d6 <string_ends_with(char const*, char const*)+0x2d>
c00128d0:	5b                   	pop    ebx
c00128d1:	89 d0                	mov    eax,edx
c00128d3:	5e                   	pop    esi
c00128d4:	5f                   	pop    edi
c00128d5:	c3                   	ret    
c00128d6:	83 ec 08             	sub    esp,0x8
c00128d9:	29 c6                	sub    esi,eax
c00128db:	57                   	push   edi
c00128dc:	01 f3                	add    ebx,esi
c00128de:	53                   	push   ebx
c00128df:	e8 9c de fe ff       	call   c0000780 <strcmp>
c00128e4:	83 c4 10             	add    esp,0x10
c00128e7:	31 d2                	xor    edx,edx
c00128e9:	5b                   	pop    ebx
c00128ea:	5e                   	pop    esi
c00128eb:	85 c0                	test   eax,eax
c00128ed:	5f                   	pop    edi
c00128ee:	0f 94 c2             	sete   dl
c00128f1:	89 d0                	mov    eax,edx
c00128f3:	c3                   	ret    

c00128f4 <SysOpen(regs*)>:
c00128f4:	56                   	push   esi
c00128f5:	53                   	push   ebx
c00128f6:	81 ec 04 01 00 00    	sub    esp,0x104
c00128fc:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012903:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012906:	85 c0                	test   eax,eax
c0012908:	0f 84 c4 01 00 00    	je     c0012ad2 <SysOpen(regs*)+0x1de>
c001290e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012911:	85 c0                	test   eax,eax
c0012913:	0f 84 b9 01 00 00    	je     c0012ad2 <SysOpen(regs*)+0x1de>
c0012919:	6a 00                	push   0x0
c001291b:	68 b6 26 02 c0       	push   0xc00226b6
c0012920:	50                   	push   eax
c0012921:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012925:	56                   	push   esi
c0012926:	e8 4b 8f ff ff       	call   c000b876 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001292b:	89 34 24             	mov    DWORD PTR [esp],esi
c001292e:	e8 4d dc fe ff       	call   c0000580 <strlen>
c0012933:	83 c4 10             	add    esp,0x10
c0012936:	83 e8 01             	sub    eax,0x1
c0012939:	74 29                	je     c0012964 <SysOpen(regs*)+0x70>
c001293b:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001293f:	83 fa 2e             	cmp    edx,0x2e
c0012942:	74 1c                	je     c0012960 <SysOpen(regs*)+0x6c>
c0012944:	83 fa 3a             	cmp    edx,0x3a
c0012947:	74 17                	je     c0012960 <SysOpen(regs*)+0x6c>
c0012949:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001294d:	83 e8 01             	sub    eax,0x1
c0012950:	74 12                	je     c0012964 <SysOpen(regs*)+0x70>
c0012952:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012956:	83 fa 3a             	cmp    edx,0x3a
c0012959:	74 05                	je     c0012960 <SysOpen(regs*)+0x6c>
c001295b:	83 fa 2e             	cmp    edx,0x2e
c001295e:	75 e9                	jne    c0012949 <SysOpen(regs*)+0x55>
c0012960:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012964:	83 ec 08             	sub    esp,0x8
c0012967:	68 ba 26 02 c0       	push   0xc00226ba
c001296c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001296f:	50                   	push   eax
c0012970:	e8 34 ff ff ff       	call   c00128a9 <string_ends_with(char const*, char const*)>
c0012975:	83 c4 10             	add    esp,0x10
c0012978:	85 c0                	test   eax,eax
c001297a:	74 1d                	je     c0012999 <SysOpen(regs*)+0xa5>
c001297c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001297f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012985:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001298c:	81 c4 04 01 00 00    	add    esp,0x104
c0012992:	31 c0                	xor    eax,eax
c0012994:	5b                   	pop    ebx
c0012995:	31 d2                	xor    edx,edx
c0012997:	5e                   	pop    esi
c0012998:	c3                   	ret    
c0012999:	83 ec 08             	sub    esp,0x8
c001299c:	68 bf 26 02 c0       	push   0xc00226bf
c00129a1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129a4:	50                   	push   eax
c00129a5:	e8 ff fe ff ff       	call   c00128a9 <string_ends_with(char const*, char const*)>
c00129aa:	83 c4 10             	add    esp,0x10
c00129ad:	85 c0                	test   eax,eax
c00129af:	75 cb                	jne    c001297c <SysOpen(regs*)+0x88>
c00129b1:	83 ec 08             	sub    esp,0x8
c00129b4:	68 bb 26 02 c0       	push   0xc00226bb
c00129b9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129bc:	50                   	push   eax
c00129bd:	e8 be dd fe ff       	call   c0000780 <strcmp>
c00129c2:	83 c4 10             	add    esp,0x10
c00129c5:	85 c0                	test   eax,eax
c00129c7:	74 b3                	je     c001297c <SysOpen(regs*)+0x88>
c00129c9:	83 ec 08             	sub    esp,0x8
c00129cc:	68 ba 26 02 c0       	push   0xc00226ba
c00129d1:	56                   	push   esi
c00129d2:	e8 d2 fe ff ff       	call   c00128a9 <string_ends_with(char const*, char const*)>
c00129d7:	83 c4 10             	add    esp,0x10
c00129da:	85 c0                	test   eax,eax
c00129dc:	75 9e                	jne    c001297c <SysOpen(regs*)+0x88>
c00129de:	83 ec 08             	sub    esp,0x8
c00129e1:	68 c4 26 02 c0       	push   0xc00226c4
c00129e6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129e9:	50                   	push   eax
c00129ea:	e8 ba fe ff ff       	call   c00128a9 <string_ends_with(char const*, char const*)>
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	85 c0                	test   eax,eax
c00129f4:	0f 85 eb 00 00 00    	jne    c0012ae5 <SysOpen(regs*)+0x1f1>
c00129fa:	83 ec 08             	sub    esp,0x8
c00129fd:	68 c9 26 02 c0       	push   0xc00226c9
c0012a02:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a05:	50                   	push   eax
c0012a06:	e8 9e fe ff ff       	call   c00128a9 <string_ends_with(char const*, char const*)>
c0012a0b:	83 c4 10             	add    esp,0x10
c0012a0e:	85 c0                	test   eax,eax
c0012a10:	0f 85 cf 00 00 00    	jne    c0012ae5 <SysOpen(regs*)+0x1f1>
c0012a16:	83 ec 08             	sub    esp,0x8
c0012a19:	68 c5 26 02 c0       	push   0xc00226c5
c0012a1e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012a21:	51                   	push   ecx
c0012a22:	e8 59 dd fe ff       	call   c0000780 <strcmp>
c0012a27:	83 c4 10             	add    esp,0x10
c0012a2a:	85 c0                	test   eax,eax
c0012a2c:	0f 84 b3 00 00 00    	je     c0012ae5 <SysOpen(regs*)+0x1f1>
c0012a32:	83 ec 08             	sub    esp,0x8
c0012a35:	68 c4 26 02 c0       	push   0xc00226c4
c0012a3a:	56                   	push   esi
c0012a3b:	e8 69 fe ff ff       	call   c00128a9 <string_ends_with(char const*, char const*)>
c0012a40:	83 c4 10             	add    esp,0x10
c0012a43:	85 c0                	test   eax,eax
c0012a45:	0f 85 9a 00 00 00    	jne    c0012ae5 <SysOpen(regs*)+0x1f1>
c0012a4b:	83 ec 0c             	sub    esp,0xc
c0012a4e:	68 14 01 00 00       	push   0x114
c0012a53:	e8 db 50 ff ff       	call   c0007b33 <malloc>
c0012a58:	83 c4 0c             	add    esp,0xc
c0012a5b:	89 c6                	mov    esi,eax
c0012a5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a62:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a65:	50                   	push   eax
c0012a66:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012a69:	52                   	push   edx
c0012a6a:	56                   	push   esi
c0012a6b:	e8 12 91 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0012a70:	83 c4 10             	add    esp,0x10
c0012a73:	85 f6                	test   esi,esi
c0012a75:	74 5b                	je     c0012ad2 <SysOpen(regs*)+0x1de>
c0012a77:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012a7a:	0f b6 c2             	movzx  eax,dl
c0012a7d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012a80:	89 d0                	mov    eax,edx
c0012a82:	83 e0 01             	and    eax,0x1
c0012a85:	f6 c2 02             	test   dl,0x2
c0012a88:	74 03                	je     c0012a8d <SysOpen(regs*)+0x199>
c0012a8a:	83 c8 02             	or     eax,0x2
c0012a8d:	f6 c2 04             	test   dl,0x4
c0012a90:	74 03                	je     c0012a95 <SysOpen(regs*)+0x1a1>
c0012a92:	83 c8 04             	or     eax,0x4
c0012a95:	f6 c2 08             	test   dl,0x8
c0012a98:	74 03                	je     c0012a9d <SysOpen(regs*)+0x1a9>
c0012a9a:	83 c8 0a             	or     eax,0xa
c0012a9d:	80 e2 10             	and    dl,0x10
c0012aa0:	74 03                	je     c0012aa5 <SysOpen(regs*)+0x1b1>
c0012aa2:	83 c8 12             	or     eax,0x12
c0012aa5:	83 ec 08             	sub    esp,0x8
c0012aa8:	50                   	push   eax
c0012aa9:	56                   	push   esi
c0012aaa:	e8 f1 90 ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0012aaf:	83 c4 10             	add    esp,0x10
c0012ab2:	85 c0                	test   eax,eax
c0012ab4:	75 1c                	jne    c0012ad2 <SysOpen(regs*)+0x1de>
c0012ab6:	83 ec 0c             	sub    esp,0xc
c0012ab9:	56                   	push   esi
c0012aba:	e8 3f 67 ff ff       	call   c00091fe <UnixFile::getFileDescriptor()>
c0012abf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012ac2:	83 c4 10             	add    esp,0x10
c0012ac5:	89 02                	mov    DWORD PTR [edx],eax
c0012ac7:	c1 f8 1f             	sar    eax,0x1f
c0012aca:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012acd:	e9 ba fe ff ff       	jmp    c001298c <SysOpen(regs*)+0x98>
c0012ad2:	81 c4 04 01 00 00    	add    esp,0x104
c0012ad8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012add:	5b                   	pop    ebx
c0012ade:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012ae3:	5e                   	pop    esi
c0012ae4:	c3                   	ret    
c0012ae5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012ae8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012aee:	e9 92 fe ff ff       	jmp    c0012985 <SysOpen(regs*)+0x91>

c0012af3 <KeSystemCall(regs*, void*)>:
c0012af3:	53                   	push   ebx
c0012af4:	83 ec 08             	sub    esp,0x8
c0012af7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012afb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012afe:	83 f8 3e             	cmp    eax,0x3e
c0012b01:	77 16                	ja     c0012b19 <KeSystemCall(regs*, void*)+0x26>
c0012b03:	8b 14 85 e0 3e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc120]
c0012b0a:	85 d2                	test   edx,edx
c0012b0c:	74 0b                	je     c0012b19 <KeSystemCall(regs*, void*)+0x26>
c0012b0e:	83 ec 0c             	sub    esp,0xc
c0012b11:	53                   	push   ebx
c0012b12:	ff d2                	call   edx
c0012b14:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012b17:	eb 0d                	jmp    c0012b26 <KeSystemCall(regs*, void*)+0x33>
c0012b19:	52                   	push   edx
c0012b1a:	52                   	push   edx
c0012b1b:	50                   	push   eax
c0012b1c:	68 ce 26 02 c0       	push   0xc00226ce
c0012b21:	e8 44 7e ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0012b26:	83 c4 10             	add    esp,0x10
c0012b29:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012b2e:	83 c4 08             	add    esp,0x8
c0012b31:	31 d2                	xor    edx,edx
c0012b33:	5b                   	pop    ebx
c0012b34:	c3                   	ret    
c0012b35:	66 90                	xchg   ax,ax
c0012b37:	90                   	nop

c0012b38 <KeSwitchEndian16(unsigned short)>:
c0012b38:	83 ec 04             	sub    esp,0x4
c0012b3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012b43:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b47:	c1 f8 08             	sar    eax,0x8
c0012b4a:	89 c2                	mov    edx,eax
c0012b4c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b50:	c1 e0 08             	shl    eax,0x8
c0012b53:	09 d0                	or     eax,edx
c0012b55:	83 c4 04             	add    esp,0x4
c0012b58:	c3                   	ret    
c0012b59:	8d 76 00             	lea    esi,[esi+0x0]

c0012b5c <KeSwitchEndian32(unsigned int)>:
c0012b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b60:	c1 e8 18             	shr    eax,0x18
c0012b63:	89 c2                	mov    edx,eax
c0012b65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b69:	c1 e0 08             	shl    eax,0x8
c0012b6c:	25 00 00 ff 00       	and    eax,0xff0000
c0012b71:	09 c2                	or     edx,eax
c0012b73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b77:	c1 e8 08             	shr    eax,0x8
c0012b7a:	25 00 ff 00 00       	and    eax,0xff00
c0012b7f:	09 c2                	or     edx,eax
c0012b81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b85:	c1 e0 18             	shl    eax,0x18
c0012b88:	09 d0                	or     eax,edx
c0012b8a:	c3                   	ret    
c0012b8b:	90                   	nop

c0012b8c <EthernetCRC32(unsigned char*, int)>:
c0012b8c:	83 ec 10             	sub    esp,0x10
c0012b8f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012b94:	75 0a                	jne    c0012ba0 <EthernetCRC32(unsigned char*, int)+0x14>
c0012b96:	b8 00 00 00 00       	mov    eax,0x0
c0012b9b:	e9 8c 00 00 00       	jmp    c0012c2c <EthernetCRC32(unsigned char*, int)+0xa0>
c0012ba0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012ba5:	7f 09                	jg     c0012bb0 <EthernetCRC32(unsigned char*, int)+0x24>
c0012ba7:	b8 00 00 00 00       	mov    eax,0x0
c0012bac:	eb 7e                	jmp    c0012c2c <EthernetCRC32(unsigned char*, int)+0xa0>
c0012bae:	66 90                	xchg   ax,ax
c0012bb0:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012bb8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012bc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012bc4:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012bc8:	7d 5a                	jge    c0012c24 <EthernetCRC32(unsigned char*, int)+0x98>
c0012bca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bd2:	01 d0                	add    eax,edx
c0012bd4:	8a 00                	mov    al,BYTE PTR [eax]
c0012bd6:	0f b6 c0             	movzx  eax,al
c0012bd9:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012bdd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012be5:	8d 76 00             	lea    esi,[esi+0x0]
c0012be8:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012bed:	7f 2d                	jg     c0012c1c <EthernetCRC32(unsigned char*, int)+0x90>
c0012bef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bf3:	83 e0 01             	and    eax,0x1
c0012bf6:	74 10                	je     c0012c08 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bfc:	d1 e8                	shr    eax,1
c0012bfe:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012c03:	eb 0b                	jmp    c0012c10 <EthernetCRC32(unsigned char*, int)+0x84>
c0012c05:	8d 76 00             	lea    esi,[esi+0x0]
c0012c08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c0c:	d1 e8                	shr    eax,1
c0012c0e:	66 90                	xchg   ax,ax
c0012c10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c14:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012c19:	eb cd                	jmp    c0012be8 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012c1b:	90                   	nop
c0012c1c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012c21:	eb 9d                	jmp    c0012bc0 <EthernetCRC32(unsigned char*, int)+0x34>
c0012c23:	90                   	nop
c0012c24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c28:	f7 d0                	not    eax
c0012c2a:	66 90                	xchg   ax,ax
c0012c2c:	83 c4 10             	add    esp,0x10
c0012c2f:	c3                   	ret    

c0012c30 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012c30:	83 ec 2c             	sub    esp,0x2c
c0012c33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c37:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012c3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c48:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c4b:	0f b7 c0             	movzx  eax,ax
c0012c4e:	3d 06 08 00 00       	cmp    eax,0x806
c0012c53:	75 13                	jne    c0012c68 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012c55:	83 ec 0c             	sub    esp,0xc
c0012c58:	68 e2 26 02 c0       	push   0xc00226e2
c0012c5d:	e8 08 7d ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0012c62:	83 c4 10             	add    esp,0x10
c0012c65:	eb 25                	jmp    c0012c8c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c67:	90                   	nop
c0012c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c6f:	0f b7 c0             	movzx  eax,ax
c0012c72:	3d 00 08 00 00       	cmp    eax,0x800
c0012c77:	75 13                	jne    c0012c8c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c79:	83 ec 0c             	sub    esp,0xc
c0012c7c:	68 f8 26 02 c0       	push   0xc00226f8
c0012c81:	e8 e4 7c ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0012c86:	83 c4 10             	add    esp,0x10
c0012c89:	8d 76 00             	lea    esi,[esi+0x0]
c0012c8c:	90                   	nop
c0012c8d:	83 c4 2c             	add    esp,0x2c
c0012c90:	c3                   	ret    

c0012c91 <CmOpen(char const*)>:
c0012c91:	57                   	push   edi
c0012c92:	56                   	push   esi
c0012c93:	53                   	push   ebx
c0012c94:	83 ec 1c             	sub    esp,0x1c
c0012c97:	6a 30                	push   0x30
c0012c99:	e8 95 4e ff ff       	call   c0007b33 <malloc>
c0012c9e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012ca5:	89 c3                	mov    ebx,eax
c0012ca7:	e8 87 4e ff ff       	call   c0007b33 <malloc>
c0012cac:	83 c4 0c             	add    esp,0xc
c0012caf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012cb5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012cb9:	89 c6                	mov    esi,eax
c0012cbb:	50                   	push   eax
c0012cbc:	e8 c1 8e ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0012cc1:	83 c4 0c             	add    esp,0xc
c0012cc4:	89 33                	mov    DWORD PTR [ebx],esi
c0012cc6:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012cca:	50                   	push   eax
c0012ccb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ccf:	50                   	push   eax
c0012cd0:	56                   	push   esi
c0012cd1:	e8 cc 91 ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c0012cd6:	5a                   	pop    edx
c0012cd7:	59                   	pop    ecx
c0012cd8:	6a 01                	push   0x1
c0012cda:	ff 33                	push   DWORD PTR [ebx]
c0012cdc:	e8 bf 8e ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0012ce1:	5e                   	pop    esi
c0012ce2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ce6:	e8 48 4e ff ff       	call   c0007b33 <malloc>
c0012ceb:	5a                   	pop    edx
c0012cec:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012cf0:	89 c7                	mov    edi,eax
c0012cf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cf4:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cf6:	56                   	push   esi
c0012cf7:	57                   	push   edi
c0012cf8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cfc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d00:	50                   	push   eax
c0012d01:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d04:	83 c4 14             	add    esp,0x14
c0012d07:	ff 33                	push   DWORD PTR [ebx]
c0012d09:	e8 f0 8e ff ff       	call   c000bbfe <File::close()>
c0012d0e:	59                   	pop    ecx
c0012d0f:	58                   	pop    eax
c0012d10:	6a 13                	push   0x13
c0012d12:	ff 33                	push   DWORD PTR [ebx]
c0012d14:	e8 87 8e ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0012d19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d20:	57                   	push   edi
c0012d21:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d29:	50                   	push   eax
c0012d2a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012d2d:	83 c4 14             	add    esp,0x14
c0012d30:	57                   	push   edi
c0012d31:	e8 0d 4e ff ff       	call   c0007b43 <free>
c0012d36:	83 c4 10             	add    esp,0x10
c0012d39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012d3c:	75 10                	jne    c0012d4e <CmOpen(char const*)+0xbd>
c0012d3e:	83 ec 0c             	sub    esp,0xc
c0012d41:	68 0d 27 02 c0       	push   0xc002270d
c0012d46:	e8 f4 e8 ff ff       	call   c001163f <KePanic(char const*)>
c0012d4b:	83 c4 10             	add    esp,0x10
c0012d4e:	50                   	push   eax
c0012d4f:	6a 00                	push   0x0
c0012d51:	6a 00                	push   0x0
c0012d53:	ff 33                	push   DWORD PTR [ebx]
c0012d55:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012d58:	e8 01 8f ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0012d5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d5f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d61:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d64:	57                   	push   edi
c0012d65:	6a 00                	push   0x0
c0012d67:	6a 2b                	push   0x2b
c0012d69:	50                   	push   eax
c0012d6a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d6d:	83 c4 1c             	add    esp,0x1c
c0012d70:	6a 00                	push   0x0
c0012d72:	6a 00                	push   0x0
c0012d74:	ff 33                	push   DWORD PTR [ebx]
c0012d76:	e8 e3 8e ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0012d7b:	83 c4 0c             	add    esp,0xc
c0012d7e:	6a 08                	push   0x8
c0012d80:	68 1e 27 02 c0       	push   0xc002271e
c0012d85:	57                   	push   edi
c0012d86:	e8 f5 d5 fe ff       	call   c0000380 <memcmp>
c0012d8b:	83 c4 10             	add    esp,0x10
c0012d8e:	85 c0                	test   eax,eax
c0012d90:	74 10                	je     c0012da2 <CmOpen(char const*)+0x111>
c0012d92:	83 ec 0c             	sub    esp,0xc
c0012d95:	68 27 27 02 c0       	push   0xc0022727
c0012d9a:	e8 a0 e8 ff ff       	call   c001163f <KePanic(char const*)>
c0012d9f:	83 c4 10             	add    esp,0x10
c0012da2:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012da6:	83 c4 10             	add    esp,0x10
c0012da9:	89 d8                	mov    eax,ebx
c0012dab:	5b                   	pop    ebx
c0012dac:	5e                   	pop    esi
c0012dad:	5f                   	pop    edi
c0012dae:	c3                   	ret    

c0012daf <CmClose(Reghive_Tag*)>:
c0012daf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012db3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012db7:	74 0b                	je     c0012dc4 <CmClose(Reghive_Tag*)+0x15>
c0012db9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012dbf:	e9 3a 8e ff ff       	jmp    c000bbfe <File::close()>
c0012dc4:	c3                   	ret    

c0012dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012dc5:	53                   	push   ebx
c0012dc6:	83 ec 18             	sub    esp,0x18
c0012dc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012dcd:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012dd1:	74 29                	je     c0012dfc <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012dd3:	50                   	push   eax
c0012dd4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012dd9:	99                   	cdq    
c0012dda:	52                   	push   edx
c0012ddb:	50                   	push   eax
c0012ddc:	ff 33                	push   DWORD PTR [ebx]
c0012dde:	e8 7b 8e ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0012de3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012de5:	5a                   	pop    edx
c0012de6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012dea:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dec:	51                   	push   ecx
c0012ded:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012df1:	6a 00                	push   0x0
c0012df3:	6a 2b                	push   0x2b
c0012df5:	50                   	push   eax
c0012df6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012df9:	83 c4 20             	add    esp,0x20
c0012dfc:	83 c4 18             	add    esp,0x18
c0012dff:	5b                   	pop    ebx
c0012e00:	c3                   	ret    

c0012e01 <CmGetString(Reghive_Tag*, int, char*)>:
c0012e01:	55                   	push   ebp
c0012e02:	57                   	push   edi
c0012e03:	56                   	push   esi
c0012e04:	53                   	push   ebx
c0012e05:	31 db                	xor    ebx,ebx
c0012e07:	83 ec 70             	sub    esp,0x70
c0012e0a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012e0e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012e15:	50                   	push   eax
c0012e16:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012e1d:	55                   	push   ebp
c0012e1e:	e8 a2 ff ff ff       	call   c0012dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e23:	83 c4 10             	add    esp,0x10
c0012e26:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012e2b:	c1 e0 08             	shl    eax,0x8
c0012e2e:	89 c2                	mov    edx,eax
c0012e30:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012e35:	09 d0                	or     eax,edx
c0012e37:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012e3c:	c1 e0 08             	shl    eax,0x8
c0012e3f:	09 d0                	or     eax,edx
c0012e41:	74 25                	je     c0012e68 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012e43:	52                   	push   edx
c0012e44:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012e48:	52                   	push   edx
c0012e49:	6b fb 0d             	imul   edi,ebx,0xd
c0012e4c:	50                   	push   eax
c0012e4d:	55                   	push   ebp
c0012e4e:	e8 72 ff ff ff       	call   c0012dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e53:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012e57:	b9 27 00 00 00       	mov    ecx,0x27
c0012e5c:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012e63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e65:	83 c4 10             	add    esp,0x10
c0012e68:	83 c3 03             	add    ebx,0x3
c0012e6b:	83 fb 15             	cmp    ebx,0x15
c0012e6e:	75 b6                	jne    c0012e26 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012e70:	83 c4 6c             	add    esp,0x6c
c0012e73:	5b                   	pop    ebx
c0012e74:	5e                   	pop    esi
c0012e75:	5f                   	pop    edi
c0012e76:	5d                   	pop    ebp
c0012e77:	c3                   	ret    

c0012e78 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012e78:	83 ec 40             	sub    esp,0x40
c0012e7b:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e7f:	50                   	push   eax
c0012e80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e84:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e88:	e8 38 ff ff ff       	call   c0012dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e8d:	83 c4 10             	add    esp,0x10
c0012e90:	83 c8 ff             	or     eax,0xffffffff
c0012e93:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012e98:	75 19                	jne    c0012eb3 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012e9a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012e9f:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012ea4:	c1 e0 08             	shl    eax,0x8
c0012ea7:	09 c2                	or     edx,eax
c0012ea9:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012eae:	c1 e0 10             	shl    eax,0x10
c0012eb1:	09 d0                	or     eax,edx
c0012eb3:	83 c4 3c             	add    esp,0x3c
c0012eb6:	c3                   	ret    

c0012eb7 <CmGetNext(Reghive_Tag*, int)>:
c0012eb7:	83 ec 40             	sub    esp,0x40
c0012eba:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ebe:	50                   	push   eax
c0012ebf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ec3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ec7:	e8 f9 fe ff ff       	call   c0012dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ecc:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012ed1:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012ed6:	c1 e0 08             	shl    eax,0x8
c0012ed9:	09 c2                	or     edx,eax
c0012edb:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012ee0:	83 c4 4c             	add    esp,0x4c
c0012ee3:	c1 e0 10             	shl    eax,0x10
c0012ee6:	09 d0                	or     eax,edx
c0012ee8:	c3                   	ret    

c0012ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012ee9:	53                   	push   ebx
c0012eea:	83 ec 18             	sub    esp,0x18
c0012eed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ef1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012ef5:	74 29                	je     c0012f20 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012ef7:	50                   	push   eax
c0012ef8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012efd:	99                   	cdq    
c0012efe:	52                   	push   edx
c0012eff:	50                   	push   eax
c0012f00:	ff 33                	push   DWORD PTR [ebx]
c0012f02:	e8 57 8d ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0012f07:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f09:	5a                   	pop    edx
c0012f0a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012f0e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f10:	51                   	push   ecx
c0012f11:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f15:	6a 00                	push   0x0
c0012f17:	6a 2b                	push   0x2b
c0012f19:	50                   	push   eax
c0012f1a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f1d:	83 c4 20             	add    esp,0x20
c0012f20:	83 c4 18             	add    esp,0x18
c0012f23:	5b                   	pop    ebx
c0012f24:	c3                   	ret    

c0012f25 <CmFreeExtent(Reghive_Tag*, int)>:
c0012f25:	53                   	push   ebx
c0012f26:	83 ec 3c             	sub    esp,0x3c
c0012f29:	6a 2b                	push   0x2b
c0012f2b:	6a 00                	push   0x0
c0012f2d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012f31:	53                   	push   ebx
c0012f32:	e8 b9 d5 fe ff       	call   c00004f0 <memset>
c0012f37:	83 c4 0c             	add    esp,0xc
c0012f3a:	53                   	push   ebx
c0012f3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f3f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f43:	e8 a1 ff ff ff       	call   c0012ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f48:	83 c4 48             	add    esp,0x48
c0012f4b:	5b                   	pop    ebx
c0012f4c:	c3                   	ret    

c0012f4d <CmUpdateHeader(Reghive_Tag*)>:
c0012f4d:	83 ec 0c             	sub    esp,0xc
c0012f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f54:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012f58:	74 10                	je     c0012f6a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012f5a:	52                   	push   edx
c0012f5b:	8d 50 05             	lea    edx,[eax+0x5]
c0012f5e:	52                   	push   edx
c0012f5f:	6a 00                	push   0x0
c0012f61:	50                   	push   eax
c0012f62:	e8 82 ff ff ff       	call   c0012ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f67:	83 c4 10             	add    esp,0x10
c0012f6a:	83 c4 0c             	add    esp,0xc
c0012f6d:	c3                   	ret    

c0012f6e <CmExpand(Reghive_Tag*, int)>:
c0012f6e:	55                   	push   ebp
c0012f6f:	57                   	push   edi
c0012f70:	83 cf ff             	or     edi,0xffffffff
c0012f73:	56                   	push   esi
c0012f74:	53                   	push   ebx
c0012f75:	83 ec 3c             	sub    esp,0x3c
c0012f78:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f7c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f80:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f84:	74 59                	je     c0012fdf <CmExpand(Reghive_Tag*, int)+0x71>
c0012f86:	50                   	push   eax
c0012f87:	31 d2                	xor    edx,edx
c0012f89:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012f8d:	31 ff                	xor    edi,edi
c0012f8f:	52                   	push   edx
c0012f90:	50                   	push   eax
c0012f91:	ff 33                	push   DWORD PTR [ebx]
c0012f93:	e8 c6 8c ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0012f98:	83 c4 0c             	add    esp,0xc
c0012f9b:	6a 2b                	push   0x2b
c0012f9d:	6a 00                	push   0x0
c0012f9f:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012fa3:	55                   	push   ebp
c0012fa4:	e8 47 d5 fe ff       	call   c00004f0 <memset>
c0012fa9:	83 c4 10             	add    esp,0x10
c0012fac:	39 f7                	cmp    edi,esi
c0012fae:	7d 1b                	jge    c0012fcb <CmExpand(Reghive_Tag*, int)+0x5d>
c0012fb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fb2:	83 ec 0c             	sub    esp,0xc
c0012fb5:	47                   	inc    edi
c0012fb6:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012fba:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fbc:	51                   	push   ecx
c0012fbd:	55                   	push   ebp
c0012fbe:	6a 00                	push   0x0
c0012fc0:	6a 2b                	push   0x2b
c0012fc2:	50                   	push   eax
c0012fc3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012fc6:	83 c4 20             	add    esp,0x20
c0012fc9:	eb e1                	jmp    c0012fac <CmExpand(Reghive_Tag*, int)+0x3e>
c0012fcb:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012fce:	83 ec 0c             	sub    esp,0xc
c0012fd1:	01 fe                	add    esi,edi
c0012fd3:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012fd6:	53                   	push   ebx
c0012fd7:	e8 71 ff ff ff       	call   c0012f4d <CmUpdateHeader(Reghive_Tag*)>
c0012fdc:	83 c4 10             	add    esp,0x10
c0012fdf:	83 c4 3c             	add    esp,0x3c
c0012fe2:	89 f8                	mov    eax,edi
c0012fe4:	5b                   	pop    ebx
c0012fe5:	5e                   	pop    esi
c0012fe6:	5f                   	pop    edi
c0012fe7:	5d                   	pop    ebp
c0012fe8:	c3                   	ret    

c0012fe9 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012fe9:	55                   	push   ebp
c0012fea:	57                   	push   edi
c0012feb:	56                   	push   esi
c0012fec:	53                   	push   ebx
c0012fed:	83 cb ff             	or     ebx,0xffffffff
c0012ff0:	83 ec 1c             	sub    esp,0x1c
c0012ff3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012ff7:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012ffb:	74 68                	je     c0013065 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012ffd:	51                   	push   ecx
c0012ffe:	be 2b 00 00 00       	mov    esi,0x2b
c0013003:	6a 00                	push   0x0
c0013005:	31 ff                	xor    edi,edi
c0013007:	6a 00                	push   0x0
c0013009:	31 db                	xor    ebx,ebx
c001300b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001300e:	e8 4b 8c ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0013013:	83 c4 10             	add    esp,0x10
c0013016:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0013019:	76 3b                	jbe    c0013056 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001301b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001301e:	83 ec 0c             	sub    esp,0xc
c0013021:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0013025:	8b 10                	mov    edx,DWORD PTR [eax]
c0013027:	51                   	push   ecx
c0013028:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c001302c:	51                   	push   ecx
c001302d:	6a 00                	push   0x0
c001302f:	6a 01                	push   0x1
c0013031:	50                   	push   eax
c0013032:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013035:	83 c4 20             	add    esp,0x20
c0013038:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001303d:	74 26                	je     c0013065 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001303f:	52                   	push   edx
c0013040:	43                   	inc    ebx
c0013041:	57                   	push   edi
c0013042:	56                   	push   esi
c0013043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0013046:	e8 13 8c ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c001304b:	83 c6 2b             	add    esi,0x2b
c001304e:	83 d7 00             	adc    edi,0x0
c0013051:	83 c4 10             	add    esp,0x10
c0013054:	eb c0                	jmp    c0013016 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0013056:	50                   	push   eax
c0013057:	50                   	push   eax
c0013058:	6a 40                	push   0x40
c001305a:	55                   	push   ebp
c001305b:	e8 0e ff ff ff       	call   c0012f6e <CmExpand(Reghive_Tag*, int)>
c0013060:	83 c4 10             	add    esp,0x10
c0013063:	89 c3                	mov    ebx,eax
c0013065:	83 c4 1c             	add    esp,0x1c
c0013068:	89 d8                	mov    eax,ebx
c001306a:	5b                   	pop    ebx
c001306b:	5e                   	pop    esi
c001306c:	5f                   	pop    edi
c001306d:	5d                   	pop    ebp
c001306e:	c3                   	ret    

c001306f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001306f:	55                   	push   ebp
c0013070:	57                   	push   edi
c0013071:	56                   	push   esi
c0013072:	53                   	push   ebx
c0013073:	81 ec 88 00 00 00    	sub    esp,0x88
c0013079:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0013080:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013087:	e8 5d ff ff ff       	call   c0012fe9 <CmFindUnusedExtent(Reghive_Tag*)>
c001308c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013090:	83 c4 0c             	add    esp,0xc
c0013093:	6a 2b                	push   0x2b
c0013095:	6a 00                	push   0x0
c0013097:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001309b:	55                   	push   ebp
c001309c:	e8 4f d4 fe ff       	call   c00004f0 <memset>
c00130a1:	83 c4 10             	add    esp,0x10
c00130a4:	85 db                	test   ebx,ebx
c00130a6:	74 12                	je     c00130ba <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00130a8:	51                   	push   ecx
c00130a9:	55                   	push   ebp
c00130aa:	53                   	push   ebx
c00130ab:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130b2:	e8 0e fd ff ff       	call   c0012dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130b7:	83 c4 10             	add    esp,0x10
c00130ba:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00130be:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00130c5:	b9 2b 00 00 00       	mov    ecx,0x2b
c00130ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00130cc:	85 db                	test   ebx,ebx
c00130ce:	74 49                	je     c0013119 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00130d0:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00130d5:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00130da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00130de:	c1 e0 08             	shl    eax,0x8
c00130e1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00130e7:	09 c8                	or     eax,ecx
c00130e9:	74 11                	je     c00130fc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00130eb:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00130ef:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00130f3:	c1 e8 10             	shr    eax,0x10
c00130f6:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00130fa:	eb 0f                	jmp    c001310b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00130fc:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013101:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0013106:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001310b:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c001310f:	c1 ea 08             	shr    edx,0x8
c0013112:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0013117:	eb 0f                	jmp    c0013128 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0013119:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001311e:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0013123:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013128:	52                   	push   edx
c0013129:	8d 44 24 49          	lea    eax,[esp+0x49]
c001312d:	50                   	push   eax
c001312e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013132:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013139:	e8 ab fd ff ff       	call   c0012ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001313e:	83 c4 10             	add    esp,0x10
c0013141:	85 db                	test   ebx,ebx
c0013143:	74 12                	je     c0013157 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0013145:	50                   	push   eax
c0013146:	55                   	push   ebp
c0013147:	53                   	push   ebx
c0013148:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001314f:	e8 95 fd ff ff       	call   c0012ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013154:	83 c4 10             	add    esp,0x10
c0013157:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001315b:	83 c4 7c             	add    esp,0x7c
c001315e:	5b                   	pop    ebx
c001315f:	5e                   	pop    esi
c0013160:	5f                   	pop    edi
c0013161:	5d                   	pop    ebp
c0013162:	c3                   	ret    

c0013163 <CmSetString(Reghive_Tag*, int, char const*)>:
c0013163:	55                   	push   ebp
c0013164:	57                   	push   edi
c0013165:	56                   	push   esi
c0013166:	53                   	push   ebx
c0013167:	bb 27 00 00 00       	mov    ebx,0x27
c001316c:	81 ec 88 00 00 00    	sub    esp,0x88
c0013172:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0013179:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0013180:	e8 fb d3 fe ff       	call   c0000580 <strlen>
c0013185:	8d 48 26             	lea    ecx,[eax+0x26]
c0013188:	89 c8                	mov    eax,ecx
c001318a:	99                   	cdq    
c001318b:	f7 fb                	idiv   ebx
c001318d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013191:	83 c4 10             	add    esp,0x10
c0013194:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001319a:	7e 10                	jle    c00131ac <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c001319c:	83 ec 0c             	sub    esp,0xc
c001319f:	68 38 27 02 c0       	push   0xc0022738
c00131a4:	e8 96 e4 ff ff       	call   c001163f <KePanic(char const*)>
c00131a9:	83 c4 10             	add    esp,0x10
c00131ac:	53                   	push   ebx
c00131ad:	31 ed                	xor    ebp,ebp
c00131af:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00131b3:	53                   	push   ebx
c00131b4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131bb:	57                   	push   edi
c00131bc:	e8 04 fc ff ff       	call   c0012dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131c1:	83 c4 10             	add    esp,0x10
c00131c4:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c00131c8:	89 f0                	mov    eax,esi
c00131ca:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c00131ce:	c1 e0 08             	shl    eax,0x8
c00131d1:	09 c6                	or     esi,eax
c00131d3:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00131d7:	c1 e6 08             	shl    esi,0x8
c00131da:	09 c6                	or     esi,eax
c00131dc:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00131e0:	7e 72                	jle    c0013254 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c00131e2:	85 f6                	test   esi,esi
c00131e4:	75 25                	jne    c001320b <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00131e6:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00131eb:	8d 44 24 45          	lea    eax,[esp+0x45]
c00131ef:	50                   	push   eax
c00131f0:	6a 00                	push   0x0
c00131f2:	6a 00                	push   0x0
c00131f4:	57                   	push   edi
c00131f5:	e8 75 fe ff ff       	call   c001306f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131fa:	83 c4 10             	add    esp,0x10
c00131fd:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0013200:	89 c6                	mov    esi,eax
c0013202:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0013205:	c1 f8 10             	sar    eax,0x10
c0013208:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001320b:	51                   	push   ecx
c001320c:	8d 54 24 49          	lea    edx,[esp+0x49]
c0013210:	52                   	push   edx
c0013211:	56                   	push   esi
c0013212:	57                   	push   edi
c0013213:	e8 ad fb ff ff       	call   c0012dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013218:	83 c4 0c             	add    esp,0xc
c001321b:	6a 27                	push   0x27
c001321d:	6a 00                	push   0x0
c001321f:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013223:	51                   	push   ecx
c0013224:	e8 c7 d2 fe ff       	call   c00004f0 <memset>
c0013229:	6b c5 27             	imul   eax,ebp,0x27
c001322c:	83 c4 0c             	add    esp,0xc
c001322f:	6a 27                	push   0x27
c0013231:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0013238:	50                   	push   eax
c0013239:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001323d:	51                   	push   ecx
c001323e:	e8 4d d4 fe ff       	call   c0000690 <strncpy>
c0013243:	83 c4 0c             	add    esp,0xc
c0013246:	8d 54 24 49          	lea    edx,[esp+0x49]
c001324a:	52                   	push   edx
c001324b:	56                   	push   esi
c001324c:	57                   	push   edi
c001324d:	e8 97 fc ff ff       	call   c0012ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013252:	eb 19                	jmp    c001326d <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0013254:	85 f6                	test   esi,esi
c0013256:	74 18                	je     c0013270 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0013258:	52                   	push   edx
c0013259:	52                   	push   edx
c001325a:	56                   	push   esi
c001325b:	57                   	push   edi
c001325c:	e8 c4 fc ff ff       	call   c0012f25 <CmFreeExtent(Reghive_Tag*, int)>
c0013261:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0013265:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013269:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001326d:	83 c4 10             	add    esp,0x10
c0013270:	45                   	inc    ebp
c0013271:	83 c3 03             	add    ebx,0x3
c0013274:	83 fd 07             	cmp    ebp,0x7
c0013277:	0f 85 47 ff ff ff    	jne    c00131c4 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c001327d:	50                   	push   eax
c001327e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0013282:	50                   	push   eax
c0013283:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001328a:	57                   	push   edi
c001328b:	e8 59 fc ff ff       	call   c0012ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013290:	81 c4 8c 00 00 00    	add    esp,0x8c
c0013296:	5b                   	pop    ebx
c0013297:	5e                   	pop    esi
c0013298:	5f                   	pop    edi
c0013299:	5d                   	pop    ebp
c001329a:	c3                   	ret    

c001329b <CmGetMatch(char*, char*, bool, bool*)>:
c001329b:	56                   	push   esi
c001329c:	53                   	push   ebx
c001329d:	50                   	push   eax
c001329e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00132a3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00132a7:	74 25                	je     c00132ce <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00132a9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00132ac:	31 db                	xor    ebx,ebx
c00132ae:	50                   	push   eax
c00132af:	50                   	push   eax
c00132b0:	8d 04 9d e0 3f 02 c0 	lea    eax,[ebx*4-0x3ffdc020]
c00132b7:	50                   	push   eax
c00132b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132bc:	e8 bf d4 fe ff       	call   c0000780 <strcmp>
c00132c1:	83 c4 10             	add    esp,0x10
c00132c4:	85 c0                	test   eax,eax
c00132c6:	74 2e                	je     c00132f6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00132c8:	43                   	inc    ebx
c00132c9:	83 fb 3f             	cmp    ebx,0x3f
c00132cc:	75 e0                	jne    c00132ae <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00132ce:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00132d1:	31 db                	xor    ebx,ebx
c00132d3:	51                   	push   ecx
c00132d4:	51                   	push   ecx
c00132d5:	8d 04 9d e0 3f 02 c0 	lea    eax,[ebx*4-0x3ffdc020]
c00132dc:	50                   	push   eax
c00132dd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00132e1:	e8 9a d4 fe ff       	call   c0000780 <strcmp>
c00132e6:	83 c4 10             	add    esp,0x10
c00132e9:	85 c0                	test   eax,eax
c00132eb:	74 09                	je     c00132f6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00132ed:	43                   	inc    ebx
c00132ee:	83 fb 3f             	cmp    ebx,0x3f
c00132f1:	75 e0                	jne    c00132d3 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00132f3:	83 cb ff             	or     ebx,0xffffffff
c00132f6:	5a                   	pop    edx
c00132f7:	89 d8                	mov    eax,ebx
c00132f9:	5b                   	pop    ebx
c00132fa:	5e                   	pop    esi
c00132fb:	c3                   	ret    

c00132fc <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00132fc:	55                   	push   ebp
c00132fd:	31 c0                	xor    eax,eax
c00132ff:	57                   	push   edi
c0013300:	56                   	push   esi
c0013301:	53                   	push   ebx
c0013302:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013306:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001330a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001330e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013312:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013314:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0013317:	83 fd 1f             	cmp    ebp,0x1f
c001331a:	7f 0b                	jg     c0013327 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c001331c:	0f b6 c2             	movzx  eax,dl
c001331f:	d3 e0                	shl    eax,cl
c0013321:	09 07                	or     DWORD PTR [edi],eax
c0013323:	b0 01                	mov    al,0x1
c0013325:	01 33                	add    DWORD PTR [ebx],esi
c0013327:	5b                   	pop    ebx
c0013328:	5e                   	pop    esi
c0013329:	5f                   	pop    edi
c001332a:	5d                   	pop    ebp
c001332b:	c3                   	ret    

c001332c <CmGetShift(unsigned int*, int*, int, bool*)>:
c001332c:	57                   	push   edi
c001332d:	56                   	push   esi
c001332e:	53                   	push   ebx
c001332f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013333:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013337:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001333b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001333f:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013341:	7c 17                	jl     c001335a <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0013343:	8b 17                	mov    edx,DWORD PTR [edi]
c0013345:	b8 01 00 00 00       	mov    eax,0x1
c001334a:	d3 e0                	shl    eax,cl
c001334c:	48                   	dec    eax
c001334d:	21 d0                	and    eax,edx
c001334f:	d3 ea                	shr    edx,cl
c0013351:	89 17                	mov    DWORD PTR [edi],edx
c0013353:	29 0b                	sub    DWORD PTR [ebx],ecx
c0013355:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013358:	eb 05                	jmp    c001335f <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001335a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001335d:	31 c0                	xor    eax,eax
c001335f:	5b                   	pop    ebx
c0013360:	5e                   	pop    esi
c0013361:	5f                   	pop    edi
c0013362:	c3                   	ret    

c0013363 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0013363:	83 ec 40             	sub    esp,0x40
c0013366:	8d 44 24 09          	lea    eax,[esp+0x9]
c001336a:	50                   	push   eax
c001336b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001336f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013373:	e8 4d fa ff ff       	call   c0012dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013378:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001337c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013380:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0013384:	89 10                	mov    DWORD PTR [eax],edx
c0013386:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013389:	83 c4 4c             	add    esp,0x4c
c001338c:	c3                   	ret    

c001338d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c001338d:	55                   	push   ebp
c001338e:	57                   	push   edi
c001338f:	56                   	push   esi
c0013390:	53                   	push   ebx
c0013391:	83 ec 40             	sub    esp,0x40
c0013394:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013398:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c001339c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00133a0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00133a4:	53                   	push   ebx
c00133a5:	56                   	push   esi
c00133a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00133aa:	e8 16 fa ff ff       	call   c0012dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00133af:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00133b3:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00133b7:	83 c4 0c             	add    esp,0xc
c00133ba:	53                   	push   ebx
c00133bb:	56                   	push   esi
c00133bc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00133c0:	e8 24 fb ff ff       	call   c0012ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00133c5:	83 c4 4c             	add    esp,0x4c
c00133c8:	5b                   	pop    ebx
c00133c9:	5e                   	pop    esi
c00133ca:	5f                   	pop    edi
c00133cb:	5d                   	pop    ebp
c00133cc:	c3                   	ret    

c00133cd <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00133cd:	55                   	push   ebp
c00133ce:	57                   	push   edi
c00133cf:	56                   	push   esi
c00133d0:	31 f6                	xor    esi,esi
c00133d2:	53                   	push   ebx
c00133d3:	31 db                	xor    ebx,ebx
c00133d5:	83 ec 40             	sub    esp,0x40
c00133d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00133e0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00133e8:	6a 12                	push   0x12
c00133ea:	68 ee 00 00 00       	push   0xee
c00133ef:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00133f3:	e8 f8 d0 fe ff       	call   c00004f0 <memset>
c00133f8:	83 c4 10             	add    esp,0x10
c00133fb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00133ff:	6a 08                	push   0x8
c0013401:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013405:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013409:	50                   	push   eax
c001340a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001340e:	55                   	push   ebp
c001340f:	57                   	push   edi
c0013410:	e8 e7 fe ff ff       	call   c00132fc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013415:	83 c4 10             	add    esp,0x10
c0013418:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001341c:	50                   	push   eax
c001341d:	6a 06                	push   0x6
c001341f:	55                   	push   ebp
c0013420:	57                   	push   edi
c0013421:	e8 06 ff ff ff       	call   c001332c <CmGetShift(unsigned int*, int*, int, bool*)>
c0013426:	83 c4 10             	add    esp,0x10
c0013429:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001342e:	74 07                	je     c0013437 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013430:	46                   	inc    esi
c0013431:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0013435:	eb e1                	jmp    c0013418 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0013437:	43                   	inc    ebx
c0013438:	83 fb 12             	cmp    ebx,0x12
c001343b:	75 c2                	jne    c00133ff <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c001343d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013441:	31 f6                	xor    esi,esi
c0013443:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013446:	50                   	push   eax
c0013447:	50                   	push   eax
c0013448:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c001344d:	46                   	inc    esi
c001344e:	8d 04 85 e0 3f 02 c0 	lea    eax,[eax*4-0x3ffdc020]
c0013455:	50                   	push   eax
c0013456:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001345a:	e8 11 d4 fe ff       	call   c0000870 <strcat>
c001345f:	83 c4 10             	add    esp,0x10
c0013462:	83 fe 18             	cmp    esi,0x18
c0013465:	75 df                	jne    c0013446 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0013467:	83 c4 3c             	add    esp,0x3c
c001346a:	31 c0                	xor    eax,eax
c001346c:	5b                   	pop    ebx
c001346d:	5e                   	pop    esi
c001346e:	5f                   	pop    edi
c001346f:	5d                   	pop    ebp
c0013470:	c3                   	ret    

c0013471 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013471:	83 ec 40             	sub    esp,0x40
c0013474:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013478:	50                   	push   eax
c0013479:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001347d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013481:	e8 3f f9 ff ff       	call   c0012dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013486:	58                   	pop    eax
c0013487:	5a                   	pop    edx
c0013488:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001348c:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013490:	50                   	push   eax
c0013491:	e8 37 ff ff ff       	call   c00133cd <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0013496:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001349b:	83 c4 4c             	add    esp,0x4c
c001349e:	c3                   	ret    

c001349f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001349f:	55                   	push   ebp
c00134a0:	57                   	push   edi
c00134a1:	56                   	push   esi
c00134a2:	53                   	push   ebx
c00134a3:	31 db                	xor    ebx,ebx
c00134a5:	83 ec 70             	sub    esp,0x70
c00134a8:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00134af:	6a 30                	push   0x30
c00134b1:	6a 00                	push   0x0
c00134b3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00134b7:	56                   	push   esi
c00134b8:	e8 33 d0 fe ff       	call   c00004f0 <memset>
c00134bd:	83 c4 10             	add    esp,0x10
c00134c0:	83 ec 0c             	sub    esp,0xc
c00134c3:	57                   	push   edi
c00134c4:	e8 b7 d0 fe ff       	call   c0000580 <strlen>
c00134c9:	83 c4 10             	add    esp,0x10
c00134cc:	39 d8                	cmp    eax,ebx
c00134ce:	76 16                	jbe    c00134e6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00134d0:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00134d4:	83 ec 0c             	sub    esp,0xc
c00134d7:	50                   	push   eax
c00134d8:	e8 83 d4 fe ff       	call   c0000960 <toupper>
c00134dd:	83 c4 10             	add    esp,0x10
c00134e0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00134e3:	43                   	inc    ebx
c00134e4:	eb da                	jmp    c00134c0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00134e6:	52                   	push   edx
c00134e7:	31 db                	xor    ebx,ebx
c00134e9:	6a 18                	push   0x18
c00134eb:	31 ff                	xor    edi,edi
c00134ed:	6a 3f                	push   0x3f
c00134ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c00134f3:	50                   	push   eax
c00134f4:	e8 f7 cf fe ff       	call   c00004f0 <memset>
c00134f9:	83 c4 10             	add    esp,0x10
c00134fc:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0013500:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013504:	84 c0                	test   al,al
c0013506:	0f 84 af 00 00 00    	je     c00135bb <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c001350c:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0013510:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013513:	83 ec 0c             	sub    esp,0xc
c0013516:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c001351b:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c001351f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0013523:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0013528:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c001352c:	56                   	push   esi
c001352d:	e8 4e d0 fe ff       	call   c0000580 <strlen>
c0013532:	83 c4 10             	add    esp,0x10
c0013535:	85 c0                	test   eax,eax
c0013537:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001353b:	74 0b                	je     c0013548 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c001353d:	50                   	push   eax
c001353e:	6a 01                	push   0x1
c0013540:	56                   	push   esi
c0013541:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013545:	50                   	push   eax
c0013546:	eb 0a                	jmp    c0013552 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013548:	50                   	push   eax
c0013549:	6a 00                	push   0x0
c001354b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001354f:	50                   	push   eax
c0013550:	6a 00                	push   0x0
c0013552:	e8 44 fd ff ff       	call   c001329b <CmGetMatch(char*, char*, bool, bool*)>
c0013557:	83 c4 10             	add    esp,0x10
c001355a:	83 f8 ff             	cmp    eax,0xffffffff
c001355d:	75 1a                	jne    c0013579 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001355f:	83 ec 0c             	sub    esp,0xc
c0013562:	68 4d 27 02 c0       	push   0xc002274d
c0013567:	e8 d3 e0 ff ff       	call   c001163f <KePanic(char const*)>
c001356c:	83 c4 10             	add    esp,0x10
c001356f:	b8 02 00 00 00       	mov    eax,0x2
c0013574:	e9 bb 00 00 00       	jmp    c0013634 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013579:	83 ff 18             	cmp    edi,0x18
c001357c:	75 1a                	jne    c0013598 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001357e:	83 ec 0c             	sub    esp,0xc
c0013581:	68 62 27 02 c0       	push   0xc0022762
c0013586:	e8 b4 e0 ff ff       	call   c001163f <KePanic(char const*)>
c001358b:	83 c4 10             	add    esp,0x10
c001358e:	b8 01 00 00 00       	mov    eax,0x1
c0013593:	e9 9c 00 00 00       	jmp    c0013634 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013598:	47                   	inc    edi
c0013599:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001359e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00135a2:	0f 45 dd             	cmovne ebx,ebp
c00135a5:	83 ec 0c             	sub    esp,0xc
c00135a8:	56                   	push   esi
c00135a9:	e8 d2 cf fe ff       	call   c0000580 <strlen>
c00135ae:	83 c4 10             	add    esp,0x10
c00135b1:	85 c0                	test   eax,eax
c00135b3:	74 06                	je     c00135bb <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00135b5:	43                   	inc    ebx
c00135b6:	e9 41 ff ff ff       	jmp    c00134fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00135bb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00135c3:	31 db                	xor    ebx,ebx
c00135c5:	31 ff                	xor    edi,edi
c00135c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00135cf:	50                   	push   eax
c00135d0:	6a 12                	push   0x12
c00135d2:	68 ee 00 00 00       	push   0xee
c00135d7:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00135de:	e8 0d cf fe ff       	call   c00004f0 <memset>
c00135e3:	83 c4 10             	add    esp,0x10
c00135e6:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00135ea:	83 fb 17             	cmp    ebx,0x17
c00135ed:	7e 26                	jle    c0013615 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00135ef:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00135f3:	50                   	push   eax
c00135f4:	6a 08                	push   0x8
c00135f6:	55                   	push   ebp
c00135f7:	56                   	push   esi
c00135f8:	e8 2f fd ff ff       	call   c001332c <CmGetShift(unsigned int*, int*, int, bool*)>
c00135fd:	83 c4 10             	add    esp,0x10
c0013600:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013605:	74 26                	je     c001362d <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0013607:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001360e:	4b                   	dec    ebx
c001360f:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0013612:	47                   	inc    edi
c0013613:	eb 1c                	jmp    c0013631 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0013615:	6a 06                	push   0x6
c0013617:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c001361c:	50                   	push   eax
c001361d:	55                   	push   ebp
c001361e:	56                   	push   esi
c001361f:	e8 d8 fc ff ff       	call   c00132fc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013624:	83 c4 10             	add    esp,0x10
c0013627:	84 c0                	test   al,al
c0013629:	75 06                	jne    c0013631 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001362b:	eb c2                	jmp    c00135ef <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c001362d:	31 c0                	xor    eax,eax
c001362f:	eb 03                	jmp    c0013634 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013631:	43                   	inc    ebx
c0013632:	eb b2                	jmp    c00135e6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0013634:	83 c4 6c             	add    esp,0x6c
c0013637:	5b                   	pop    ebx
c0013638:	5e                   	pop    esi
c0013639:	5f                   	pop    edi
c001363a:	5d                   	pop    ebp
c001363b:	c3                   	ret    

c001363c <CmCreateString(Reghive_Tag*, int, char const*)>:
c001363c:	53                   	push   ebx
c001363d:	83 ec 3c             	sub    esp,0x3c
c0013640:	6a 2b                	push   0x2b
c0013642:	6a 00                	push   0x0
c0013644:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013648:	53                   	push   ebx
c0013649:	e8 a2 ce fe ff       	call   c00004f0 <memset>
c001364e:	58                   	pop    eax
c001364f:	5a                   	pop    edx
c0013650:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013654:	50                   	push   eax
c0013655:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013659:	e8 41 fe ff ff       	call   c001349f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001365e:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0013663:	83 c4 0c             	add    esp,0xc
c0013666:	6a 15                	push   0x15
c0013668:	6a 00                	push   0x0
c001366a:	8d 44 24 27          	lea    eax,[esp+0x27]
c001366e:	50                   	push   eax
c001366f:	e8 7c ce fe ff       	call   c00004f0 <memset>
c0013674:	53                   	push   ebx
c0013675:	6a 00                	push   0x0
c0013677:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001367b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001367f:	e8 eb f9 ff ff       	call   c001306f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013684:	83 c4 58             	add    esp,0x58
c0013687:	5b                   	pop    ebx
c0013688:	c3                   	ret    

c0013689 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013689:	56                   	push   esi
c001368a:	53                   	push   ebx
c001368b:	83 ec 48             	sub    esp,0x48
c001368e:	6a 12                	push   0x12
c0013690:	68 ff 00 00 00       	push   0xff
c0013695:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013699:	56                   	push   esi
c001369a:	e8 51 ce fe ff       	call   c00004f0 <memset>
c001369f:	5a                   	pop    edx
c00136a0:	59                   	pop    ecx
c00136a1:	56                   	push   esi
c00136a2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00136a6:	e8 f4 fd ff ff       	call   c001349f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136ab:	83 c4 10             	add    esp,0x10
c00136ae:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00136b2:	85 db                	test   ebx,ebx
c00136b4:	74 42                	je     c00136f8 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00136b6:	50                   	push   eax
c00136b7:	8d 44 24 19          	lea    eax,[esp+0x19]
c00136bb:	50                   	push   eax
c00136bc:	53                   	push   ebx
c00136bd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136c1:	e8 ff f6 ff ff       	call   c0012dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00136c6:	83 c4 0c             	add    esp,0xc
c00136c9:	6a 12                	push   0x12
c00136cb:	8d 44 24 21          	lea    eax,[esp+0x21]
c00136cf:	50                   	push   eax
c00136d0:	56                   	push   esi
c00136d1:	e8 aa cc fe ff       	call   c0000380 <memcmp>
c00136d6:	83 c4 10             	add    esp,0x10
c00136d9:	85 c0                	test   eax,eax
c00136db:	74 1e                	je     c00136fb <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00136dd:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00136e2:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00136e7:	c1 e3 08             	shl    ebx,0x8
c00136ea:	09 d8                	or     eax,ebx
c00136ec:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00136f1:	c1 e3 10             	shl    ebx,0x10
c00136f4:	09 c3                	or     ebx,eax
c00136f6:	eb ba                	jmp    c00136b2 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00136f8:	83 cb ff             	or     ebx,0xffffffff
c00136fb:	83 c4 44             	add    esp,0x44
c00136fe:	89 d8                	mov    eax,ebx
c0013700:	5b                   	pop    ebx
c0013701:	5e                   	pop    esi
c0013702:	c3                   	ret    

c0013703 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013703:	57                   	push   edi
c0013704:	56                   	push   esi
c0013705:	53                   	push   ebx
c0013706:	83 ec 34             	sub    esp,0x34
c0013709:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001370d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013711:	6a 2b                	push   0x2b
c0013713:	6a 00                	push   0x0
c0013715:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013719:	53                   	push   ebx
c001371a:	e8 d1 cd fe ff       	call   c00004f0 <memset>
c001371f:	58                   	pop    eax
c0013720:	5a                   	pop    edx
c0013721:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013725:	50                   	push   eax
c0013726:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001372a:	e8 70 fd ff ff       	call   c001349f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001372f:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0013733:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013737:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001373b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001373f:	53                   	push   ebx
c0013740:	6a 00                	push   0x0
c0013742:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013746:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001374a:	e8 20 f9 ff ff       	call   c001306f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001374f:	83 c4 50             	add    esp,0x50
c0013752:	5b                   	pop    ebx
c0013753:	5e                   	pop    esi
c0013754:	5f                   	pop    edi
c0013755:	c3                   	ret    

c0013756 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0013756:	55                   	push   ebp
c0013757:	57                   	push   edi
c0013758:	56                   	push   esi
c0013759:	53                   	push   ebx
c001375a:	83 ec 40             	sub    esp,0x40
c001375d:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013761:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013765:	6a 2b                	push   0x2b
c0013767:	6a 00                	push   0x0
c0013769:	8d 74 24 11          	lea    esi,[esp+0x11]
c001376d:	56                   	push   esi
c001376e:	e8 7d cd fe ff       	call   c00004f0 <memset>
c0013773:	5f                   	pop    edi
c0013774:	89 ef                	mov    edi,ebp
c0013776:	58                   	pop    eax
c0013777:	8d 44 24 11          	lea    eax,[esp+0x11]
c001377b:	50                   	push   eax
c001377c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013780:	e8 1a fd ff ff       	call   c001349f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013785:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001378a:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c001378f:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013794:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013799:	83 c4 10             	add    esp,0x10
c001379c:	85 ed                	test   ebp,ebp
c001379e:	74 14                	je     c00137b4 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00137a0:	51                   	push   ecx
c00137a1:	51                   	push   ecx
c00137a2:	57                   	push   edi
c00137a3:	53                   	push   ebx
c00137a4:	e8 0e f7 ff ff       	call   c0012eb7 <CmGetNext(Reghive_Tag*, int)>
c00137a9:	83 c4 10             	add    esp,0x10
c00137ac:	85 c0                	test   eax,eax
c00137ae:	74 04                	je     c00137b4 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00137b0:	89 c7                	mov    edi,eax
c00137b2:	eb e8                	jmp    c001379c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00137b4:	56                   	push   esi
c00137b5:	6a 00                	push   0x0
c00137b7:	57                   	push   edi
c00137b8:	53                   	push   ebx
c00137b9:	e8 b1 f8 ff ff       	call   c001306f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00137be:	83 c4 0c             	add    esp,0xc
c00137c1:	56                   	push   esi
c00137c2:	50                   	push   eax
c00137c3:	89 c7                	mov    edi,eax
c00137c5:	53                   	push   ebx
c00137c6:	e8 fa f5 ff ff       	call   c0012dc5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00137cb:	58                   	pop    eax
c00137cc:	5a                   	pop    edx
c00137cd:	6a 6c                	push   0x6c
c00137cf:	6a 00                	push   0x0
c00137d1:	6a 00                	push   0x0
c00137d3:	68 73 27 02 c0       	push   0xc0022773
c00137d8:	57                   	push   edi
c00137d9:	53                   	push   ebx
c00137da:	e8 24 ff ff ff       	call   c0013703 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00137df:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00137e3:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00137e7:	c1 e8 10             	shr    eax,0x10
c00137ea:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00137ee:	83 c4 1c             	add    esp,0x1c
c00137f1:	56                   	push   esi
c00137f2:	57                   	push   edi
c00137f3:	53                   	push   ebx
c00137f4:	e8 f0 f6 ff ff       	call   c0012ee9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00137f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00137fe:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013803:	c1 e0 08             	shl    eax,0x8
c0013806:	09 c2                	or     edx,eax
c0013808:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001380d:	83 c4 4c             	add    esp,0x4c
c0013810:	5b                   	pop    ebx
c0013811:	5e                   	pop    esi
c0013812:	c1 e0 10             	shl    eax,0x10
c0013815:	09 d0                	or     eax,edx
c0013817:	5f                   	pop    edi
c0013818:	5d                   	pop    ebp
c0013819:	c3                   	ret    

c001381a <zStrtok(char*, char const*)>:
c001381a:	55                   	push   ebp
c001381b:	57                   	push   edi
c001381c:	56                   	push   esi
c001381d:	53                   	push   ebx
c001381e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013822:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013826:	85 db                	test   ebx,ebx
c0013828:	74 2f                	je     c0013859 <zStrtok(char*, char const*)+0x3f>
c001382a:	85 c0                	test   eax,eax
c001382c:	75 09                	jne    c0013837 <zStrtok(char*, char const*)+0x1d>
c001382e:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c0013833:	85 c0                	test   eax,eax
c0013835:	74 50                	je     c0013887 <zStrtok(char*, char const*)+0x6d>
c0013837:	31 c9                	xor    ecx,ecx
c0013839:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001383d:	74 03                	je     c0013842 <zStrtok(char*, char const*)+0x28>
c001383f:	41                   	inc    ecx
c0013840:	eb f7                	jmp    c0013839 <zStrtok(char*, char const*)+0x1f>
c0013842:	31 d2                	xor    edx,edx
c0013844:	39 ca                	cmp    edx,ecx
c0013846:	74 15                	je     c001385d <zStrtok(char*, char const*)+0x43>
c0013848:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c001384c:	8d 3c 10             	lea    edi,[eax+edx*1]
c001384f:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013852:	39 ee                	cmp    esi,ebp
c0013854:	74 13                	je     c0013869 <zStrtok(char*, char const*)+0x4f>
c0013856:	42                   	inc    edx
c0013857:	eb eb                	jmp    c0013844 <zStrtok(char*, char const*)+0x2a>
c0013859:	31 c0                	xor    eax,eax
c001385b:	eb 2a                	jmp    c0013887 <zStrtok(char*, char const*)+0x6d>
c001385d:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c0013867:	eb 1e                	jmp    c0013887 <zStrtok(char*, char const*)+0x6d>
c0013869:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c001386c:	39 ce                	cmp    esi,ecx
c001386e:	75 0a                	jne    c001387a <zStrtok(char*, char const*)+0x60>
c0013870:	40                   	inc    eax
c0013871:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c0013876:	89 d8                	mov    eax,ebx
c0013878:	eb 0d                	jmp    c0013887 <zStrtok(char*, char const*)+0x6d>
c001387a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001387d:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013881:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c0013887:	5b                   	pop    ebx
c0013888:	5e                   	pop    esi
c0013889:	5f                   	pop    edi
c001388a:	5d                   	pop    ebp
c001388b:	c3                   	ret    

c001388c <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c001388c:	57                   	push   edi
c001388d:	56                   	push   esi
c001388e:	53                   	push   ebx
c001388f:	81 ec 08 01 00 00    	sub    esp,0x108
c0013895:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c001389c:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00138a3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00138a7:	53                   	push   ebx
c00138a8:	e8 a3 cd fe ff       	call   c0000650 <strcpy>
c00138ad:	59                   	pop    ecx
c00138ae:	5e                   	pop    esi
c00138af:	68 d7 2a 02 c0       	push   0xc0022ad7
c00138b4:	53                   	push   ebx
c00138b5:	bb 01 00 00 00       	mov    ebx,0x1
c00138ba:	e8 5b ff ff ff       	call   c001381a <zStrtok(char*, char const*)>
c00138bf:	83 c4 10             	add    esp,0x10
c00138c2:	85 c0                	test   eax,eax
c00138c4:	74 3b                	je     c0013901 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138c6:	52                   	push   edx
c00138c7:	50                   	push   eax
c00138c8:	6a 01                	push   0x1
c00138ca:	57                   	push   edi
c00138cb:	e8 b9 fd ff ff       	call   c0013689 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00138d0:	59                   	pop    ecx
c00138d1:	5e                   	pop    esi
c00138d2:	89 c3                	mov    ebx,eax
c00138d4:	68 d7 2a 02 c0       	push   0xc0022ad7
c00138d9:	6a 00                	push   0x0
c00138db:	e8 3a ff ff ff       	call   c001381a <zStrtok(char*, char const*)>
c00138e0:	83 c4 10             	add    esp,0x10
c00138e3:	85 c0                	test   eax,eax
c00138e5:	89 c6                	mov    esi,eax
c00138e7:	74 18                	je     c0013901 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138e9:	52                   	push   edx
c00138ea:	52                   	push   edx
c00138eb:	53                   	push   ebx
c00138ec:	57                   	push   edi
c00138ed:	e8 86 f5 ff ff       	call   c0012e78 <CmEnterDirectory(Reghive_Tag*, int)>
c00138f2:	83 c4 10             	add    esp,0x10
c00138f5:	83 f8 ff             	cmp    eax,0xffffffff
c00138f8:	89 c3                	mov    ebx,eax
c00138fa:	74 05                	je     c0013901 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138fc:	50                   	push   eax
c00138fd:	56                   	push   esi
c00138fe:	53                   	push   ebx
c00138ff:	eb c9                	jmp    c00138ca <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013901:	81 c4 00 01 00 00    	add    esp,0x100
c0013907:	89 d8                	mov    eax,ebx
c0013909:	5b                   	pop    ebx
c001390a:	5e                   	pop    esi
c001390b:	5f                   	pop    edi
c001390c:	c3                   	ret    

c001390d <CmDisplayTree(Reghive_Tag*, int, int)>:
c001390d:	55                   	push   ebp
c001390e:	57                   	push   edi
c001390f:	56                   	push   esi
c0013910:	53                   	push   ebx
c0013911:	83 ec 5c             	sub    esp,0x5c
c0013914:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013918:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c001391c:	85 db                	test   ebx,ebx
c001391e:	0f 8e 84 00 00 00    	jle    c00139a8 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013924:	57                   	push   edi
c0013925:	31 ed                	xor    ebp,ebp
c0013927:	6a 32                	push   0x32
c0013929:	6a 00                	push   0x0
c001392b:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001392f:	57                   	push   edi
c0013930:	e8 bb cb fe ff       	call   c00004f0 <memset>
c0013935:	83 c4 0c             	add    esp,0xc
c0013938:	57                   	push   edi
c0013939:	53                   	push   ebx
c001393a:	56                   	push   esi
c001393b:	e8 31 fb ff ff       	call   c0013471 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013940:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013944:	83 c4 10             	add    esp,0x10
c0013947:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001394b:	7d 13                	jge    c0013960 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c001394d:	83 ec 0c             	sub    esp,0xc
c0013950:	45                   	inc    ebp
c0013951:	68 7b 2e 02 c0       	push   0xc0022e7b
c0013956:	e8 0f 70 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001395b:	83 c4 10             	add    esp,0x10
c001395e:	eb e7                	jmp    c0013947 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013960:	51                   	push   ecx
c0013961:	57                   	push   edi
c0013962:	53                   	push   ebx
c0013963:	68 79 27 02 c0       	push   0xc0022779
c0013968:	e8 fd 6f ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001396d:	83 c4 10             	add    esp,0x10
c0013970:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013975:	75 1e                	jne    c0013995 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013977:	52                   	push   edx
c0013978:	52                   	push   edx
c0013979:	53                   	push   ebx
c001397a:	56                   	push   esi
c001397b:	e8 f8 f4 ff ff       	call   c0012e78 <CmEnterDirectory(Reghive_Tag*, int)>
c0013980:	83 c4 0c             	add    esp,0xc
c0013983:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013987:	8d 51 04             	lea    edx,[ecx+0x4]
c001398a:	52                   	push   edx
c001398b:	50                   	push   eax
c001398c:	56                   	push   esi
c001398d:	e8 7b ff ff ff       	call   c001390d <CmDisplayTree(Reghive_Tag*, int, int)>
c0013992:	83 c4 10             	add    esp,0x10
c0013995:	50                   	push   eax
c0013996:	50                   	push   eax
c0013997:	53                   	push   ebx
c0013998:	56                   	push   esi
c0013999:	e8 19 f5 ff ff       	call   c0012eb7 <CmGetNext(Reghive_Tag*, int)>
c001399e:	83 c4 10             	add    esp,0x10
c00139a1:	89 c3                	mov    ebx,eax
c00139a3:	e9 74 ff ff ff       	jmp    c001391c <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00139a8:	83 c4 5c             	add    esp,0x5c
c00139ab:	5b                   	pop    ebx
c00139ac:	5e                   	pop    esi
c00139ad:	5f                   	pop    edi
c00139ae:	5d                   	pop    ebp
c00139af:	c3                   	ret    

c00139b0 <CmSplitFinalSlashInPlace(char*)>:
c00139b0:	53                   	push   ebx
c00139b1:	83 ec 14             	sub    esp,0x14
c00139b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139b8:	53                   	push   ebx
c00139b9:	e8 c2 cb fe ff       	call   c0000580 <strlen>
c00139be:	83 c4 10             	add    esp,0x10
c00139c1:	48                   	dec    eax
c00139c2:	85 c0                	test   eax,eax
c00139c4:	74 15                	je     c00139db <CmSplitFinalSlashInPlace(char*)+0x2b>
c00139c6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00139ca:	8d 14 03             	lea    edx,[ebx+eax*1]
c00139cd:	75 09                	jne    c00139d8 <CmSplitFinalSlashInPlace(char*)+0x28>
c00139cf:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00139d2:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00139d6:	eb 05                	jmp    c00139dd <CmSplitFinalSlashInPlace(char*)+0x2d>
c00139d8:	48                   	dec    eax
c00139d9:	eb e7                	jmp    c00139c2 <CmSplitFinalSlashInPlace(char*)+0x12>
c00139db:	31 c0                	xor    eax,eax
c00139dd:	83 c4 08             	add    esp,0x8
c00139e0:	5b                   	pop    ebx
c00139e1:	c3                   	ret    

c00139e2 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00139e2:	55                   	push   ebp
c00139e3:	57                   	push   edi
c00139e4:	56                   	push   esi
c00139e5:	53                   	push   ebx
c00139e6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00139ec:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00139f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00139f6:	8d 43 01             	lea    eax,[ebx+0x1]
c00139f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139fd:	89 f0                	mov    eax,esi
c00139ff:	3c 40                	cmp    al,0x40
c0013a01:	75 1b                	jne    c0013a1e <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0013a03:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0013a06:	85 c0                	test   eax,eax
c0013a08:	74 08                	je     c0013a12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013a0a:	83 f8 3a             	cmp    eax,0x3a
c0013a0d:	74 03                	je     c0013a12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013a0f:	43                   	inc    ebx
c0013a10:	eb f1                	jmp    c0013a03 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0013a12:	85 c0                	test   eax,eax
c0013a14:	0f 84 45 01 00 00    	je     c0013b5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a1a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013a1d:	43                   	inc    ebx
c0013a1e:	50                   	push   eax
c0013a1f:	6a 40                	push   0x40
c0013a21:	6a 00                	push   0x0
c0013a23:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a27:	50                   	push   eax
c0013a28:	e8 c3 ca fe ff       	call   c00004f0 <memset>
c0013a2d:	89 f1                	mov    ecx,esi
c0013a2f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013a36:	31 c0                	xor    eax,eax
c0013a38:	83 c4 10             	add    esp,0x10
c0013a3b:	0f be f1             	movsx  esi,cl
c0013a3e:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013a41:	85 d2                	test   edx,edx
c0013a43:	89 d1                	mov    ecx,edx
c0013a45:	0f 84 14 01 00 00    	je     c0013b5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a4b:	3d c7 00 00 00       	cmp    eax,0xc7
c0013a50:	0f 8f 09 01 00 00    	jg     c0013b5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a56:	83 fa 0a             	cmp    edx,0xa
c0013a59:	0f 85 f1 00 00 00    	jne    c0013b50 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0013a5f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013a64:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013a69:	89 c8                	mov    eax,ecx
c0013a6b:	a8 df                	test   al,0xdf
c0013a6d:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a72:	83 f9 23             	cmp    ecx,0x23
c0013a75:	0f 94 c2             	sete   dl
c0013a78:	89 d5                	mov    ebp,edx
c0013a7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a7e:	09 ea                	or     edx,ebp
c0013a80:	80 e2 01             	and    dl,0x1
c0013a83:	75 47                	jne    c0013acc <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a85:	83 e8 09             	sub    eax,0x9
c0013a88:	3c 01                	cmp    al,0x1
c0013a8a:	76 40                	jbe    c0013acc <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a8c:	83 f9 5b             	cmp    ecx,0x5b
c0013a8f:	75 42                	jne    c0013ad3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013a91:	83 fe 40             	cmp    esi,0x40
c0013a94:	75 36                	jne    c0013acc <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a96:	83 ec 0c             	sub    esp,0xc
c0013a99:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013a9d:	55                   	push   ebp
c0013a9e:	e8 dd ca fe ff       	call   c0000580 <strlen>
c0013aa3:	83 c4 10             	add    esp,0x10
c0013aa6:	83 f8 3f             	cmp    eax,0x3f
c0013aa9:	0f 87 b0 00 00 00    	ja     c0013b5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013aaf:	50                   	push   eax
c0013ab0:	50                   	push   eax
c0013ab1:	55                   	push   ebp
c0013ab2:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0013ab6:	55                   	push   ebp
c0013ab7:	e8 94 cb fe ff       	call   c0000650 <strcpy>
c0013abc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013abf:	e8 bc ca fe ff       	call   c0000580 <strlen>
c0013ac4:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013ac9:	83 c4 10             	add    esp,0x10
c0013acc:	31 d2                	xor    edx,edx
c0013ace:	e9 84 00 00 00       	jmp    c0013b57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0013ad3:	83 fe 40             	cmp    esi,0x40
c0013ad6:	74 06                	je     c0013ade <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0013ad8:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013adc:	eb 19                	jmp    c0013af7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013ade:	51                   	push   ecx
c0013adf:	51                   	push   ecx
c0013ae0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013ae4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013ae8:	50                   	push   eax
c0013ae9:	e8 92 cc fe ff       	call   c0000780 <strcmp>
c0013aee:	83 c4 10             	add    esp,0x10
c0013af1:	85 c0                	test   eax,eax
c0013af3:	75 d7                	jne    c0013acc <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013af5:	eb e1                	jmp    c0013ad8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0013af7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0013afa:	85 c9                	test   ecx,ecx
c0013afc:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013b01:	83 f9 3d             	cmp    ecx,0x3d
c0013b04:	0f 94 c0             	sete   al
c0013b07:	89 c5                	mov    ebp,eax
c0013b09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b0d:	09 e8                	or     eax,ebp
c0013b0f:	a8 01                	test   al,0x1
c0013b11:	89 c5                	mov    ebp,eax
c0013b13:	75 03                	jne    c0013b18 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013b15:	42                   	inc    edx
c0013b16:	eb df                	jmp    c0013af7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013b18:	85 c9                	test   ecx,ecx
c0013b1a:	74 43                	je     c0013b5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013b1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013b20:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013b23:	52                   	push   edx
c0013b24:	52                   	push   edx
c0013b25:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013b29:	50                   	push   eax
c0013b2a:	53                   	push   ebx
c0013b2b:	e8 50 cc fe ff       	call   c0000780 <strcmp>
c0013b30:	83 c4 10             	add    esp,0x10
c0013b33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b37:	85 c0                	test   eax,eax
c0013b39:	75 91                	jne    c0013acc <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013b3b:	50                   	push   eax
c0013b3c:	42                   	inc    edx
c0013b3d:	50                   	push   eax
c0013b3e:	52                   	push   edx
c0013b3f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013b46:	e8 05 cb fe ff       	call   c0000650 <strcpy>
c0013b4b:	83 c4 10             	add    esp,0x10
c0013b4e:	eb 11                	jmp    c0013b61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013b50:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013b54:	8d 50 01             	lea    edx,[eax+0x1]
c0013b57:	47                   	inc    edi
c0013b58:	89 d0                	mov    eax,edx
c0013b5a:	e9 df fe ff ff       	jmp    c0013a3e <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013b5f:	31 ed                	xor    ebp,ebp
c0013b61:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013b67:	89 e8                	mov    eax,ebp
c0013b69:	5b                   	pop    ebx
c0013b6a:	5e                   	pop    esi
c0013b6b:	5f                   	pop    edi
c0013b6c:	5d                   	pop    ebp
c0013b6d:	c3                   	ret    

c0013b6e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013b6e:	57                   	push   edi
c0013b6f:	56                   	push   esi
c0013b70:	53                   	push   ebx
c0013b71:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013b77:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013b7e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013b85:	53                   	push   ebx
c0013b86:	e8 f5 c9 fe ff       	call   c0000580 <strlen>
c0013b8b:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b8e:	89 c7                	mov    edi,eax
c0013b90:	e8 eb c9 fe ff       	call   c0000580 <strlen>
c0013b95:	83 c4 10             	add    esp,0x10
c0013b98:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013b9c:	3d ff 00 00 00       	cmp    eax,0xff
c0013ba1:	0f 87 d3 00 00 00    	ja     c0013c7a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013ba7:	57                   	push   edi
c0013ba8:	57                   	push   edi
c0013ba9:	56                   	push   esi
c0013baa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013bae:	56                   	push   esi
c0013baf:	e8 9c ca fe ff       	call   c0000650 <strcpy>
c0013bb4:	58                   	pop    eax
c0013bb5:	5a                   	pop    edx
c0013bb6:	68 d7 2a 02 c0       	push   0xc0022ad7
c0013bbb:	56                   	push   esi
c0013bbc:	e8 af cc fe ff       	call   c0000870 <strcat>
c0013bc1:	59                   	pop    ecx
c0013bc2:	5f                   	pop    edi
c0013bc3:	53                   	push   ebx
c0013bc4:	56                   	push   esi
c0013bc5:	e8 a6 cc fe ff       	call   c0000870 <strcat>
c0013bca:	58                   	pop    eax
c0013bcb:	5a                   	pop    edx
c0013bcc:	68 83 27 02 c0       	push   0xc0022783
c0013bd1:	56                   	push   esi
c0013bd2:	e8 99 cc fe ff       	call   c0000870 <strcat>
c0013bd7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013bde:	e8 50 3f ff ff       	call   c0007b33 <malloc>
c0013be3:	83 c4 0c             	add    esp,0xc
c0013be6:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013bec:	56                   	push   esi
c0013bed:	50                   	push   eax
c0013bee:	89 c3                	mov    ebx,eax
c0013bf0:	e8 8d 7f ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0013bf5:	83 c4 10             	add    esp,0x10
c0013bf8:	85 db                	test   ebx,ebx
c0013bfa:	74 7e                	je     c0013c7a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013bfc:	51                   	push   ecx
c0013bfd:	51                   	push   ecx
c0013bfe:	6a 01                	push   0x1
c0013c00:	53                   	push   ebx
c0013c01:	e8 9a 7f ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0013c06:	83 c4 10             	add    esp,0x10
c0013c09:	85 c0                	test   eax,eax
c0013c0b:	74 08                	je     c0013c15 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013c0d:	83 ec 0c             	sub    esp,0xc
c0013c10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c12:	53                   	push   ebx
c0013c13:	eb 5f                	jmp    c0013c74 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013c15:	52                   	push   edx
c0013c16:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013c1a:	50                   	push   eax
c0013c1b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013c1f:	50                   	push   eax
c0013c20:	53                   	push   ebx
c0013c21:	e8 7c 82 ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c0013c26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c2a:	83 c4 10             	add    esp,0x10
c0013c2d:	89 c1                	mov    ecx,eax
c0013c2f:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013c33:	74 31                	je     c0013c66 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c35:	83 ec 0c             	sub    esp,0xc
c0013c38:	50                   	push   eax
c0013c39:	e8 f5 3e ff ff       	call   c0007b33 <malloc>
c0013c3e:	89 c6                	mov    esi,eax
c0013c40:	58                   	pop    eax
c0013c41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c43:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013c47:	52                   	push   edx
c0013c48:	56                   	push   esi
c0013c49:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c51:	53                   	push   ebx
c0013c52:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c55:	83 c4 20             	add    esp,0x20
c0013c58:	85 c0                	test   eax,eax
c0013c5a:	75 0a                	jne    c0013c66 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c60:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013c64:	74 18                	je     c0013c7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013c66:	83 ec 0c             	sub    esp,0xc
c0013c69:	53                   	push   ebx
c0013c6a:	e8 8f 7f ff ff       	call   c000bbfe <File::close()>
c0013c6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c77:	83 c4 10             	add    esp,0x10
c0013c7a:	31 c0                	xor    eax,eax
c0013c7c:	eb 3b                	jmp    c0013cb9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013c7e:	83 ec 0c             	sub    esp,0xc
c0013c81:	53                   	push   ebx
c0013c82:	e8 77 7f ff ff       	call   c000bbfe <File::close()>
c0013c87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c8f:	83 c4 0c             	add    esp,0xc
c0013c92:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c99:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013ca0:	56                   	push   esi
c0013ca1:	e8 3c fd ff ff       	call   c00139e2 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013ca6:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ca9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013cad:	e8 91 3e ff ff       	call   c0007b43 <free>
c0013cb2:	83 c4 10             	add    esp,0x10
c0013cb5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013cb9:	81 c4 20 01 00 00    	add    esp,0x120
c0013cbf:	5b                   	pop    ebx
c0013cc0:	5e                   	pop    esi
c0013cc1:	5f                   	pop    edi
c0013cc2:	c3                   	ret    

c0013cc3 <Reg::getLine(char*, char*, char*)>:
c0013cc3:	57                   	push   edi
c0013cc4:	56                   	push   esi
c0013cc5:	53                   	push   ebx
c0013cc6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013cca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013cce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cd2:	57                   	push   edi
c0013cd3:	56                   	push   esi
c0013cd4:	53                   	push   ebx
c0013cd5:	68 88 27 02 c0       	push   0xc0022788
c0013cda:	e8 8f fe ff ff       	call   c0013b6e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013cdf:	83 c4 10             	add    esp,0x10
c0013ce2:	84 c0                	test   al,al
c0013ce4:	75 10                	jne    c0013cf6 <Reg::getLine(char*, char*, char*)+0x33>
c0013ce6:	57                   	push   edi
c0013ce7:	56                   	push   esi
c0013ce8:	53                   	push   ebx
c0013ce9:	68 ad 27 02 c0       	push   0xc00227ad
c0013cee:	e8 7b fe ff ff       	call   c0013b6e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013cf3:	83 c4 10             	add    esp,0x10
c0013cf6:	5b                   	pop    ebx
c0013cf7:	5e                   	pop    esi
c0013cf8:	5f                   	pop    edi
c0013cf9:	c3                   	ret    

c0013cfa <Reg::readInt(char*, char*, int*)>:
c0013cfa:	55                   	push   ebp
c0013cfb:	57                   	push   edi
c0013cfc:	56                   	push   esi
c0013cfd:	53                   	push   ebx
c0013cfe:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013d04:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013d08:	55                   	push   ebp
c0013d09:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d10:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d17:	e8 a7 ff ff ff       	call   c0013cc3 <Reg::getLine(char*, char*, char*)>
c0013d1c:	83 c4 10             	add    esp,0x10
c0013d1f:	84 c0                	test   al,al
c0013d21:	0f 84 b6 00 00 00    	je     c0013ddd <Reg::readInt(char*, char*, int*)+0xe3>
c0013d27:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013d2c:	83 fa 2b             	cmp    edx,0x2b
c0013d2f:	74 0c                	je     c0013d3d <Reg::readInt(char*, char*, int*)+0x43>
c0013d31:	83 fa 2d             	cmp    edx,0x2d
c0013d34:	75 0e                	jne    c0013d44 <Reg::readInt(char*, char*, int*)+0x4a>
c0013d36:	ba 01 00 00 00       	mov    edx,0x1
c0013d3b:	eb 0b                	jmp    c0013d48 <Reg::readInt(char*, char*, int*)+0x4e>
c0013d3d:	ba 01 00 00 00       	mov    edx,0x1
c0013d42:	eb 02                	jmp    c0013d46 <Reg::readInt(char*, char*, int*)+0x4c>
c0013d44:	31 d2                	xor    edx,edx
c0013d46:	31 c0                	xor    eax,eax
c0013d48:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013d4d:	be 0a 00 00 00       	mov    esi,0xa
c0013d52:	75 21                	jne    c0013d75 <Reg::readInt(char*, char*, int*)+0x7b>
c0013d54:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013d59:	83 f9 78             	cmp    ecx,0x78
c0013d5c:	75 0a                	jne    c0013d68 <Reg::readInt(char*, char*, int*)+0x6e>
c0013d5e:	83 c2 02             	add    edx,0x2
c0013d61:	be 10 00 00 00       	mov    esi,0x10
c0013d66:	eb 0d                	jmp    c0013d75 <Reg::readInt(char*, char*, int*)+0x7b>
c0013d68:	83 f9 62             	cmp    ecx,0x62
c0013d6b:	75 08                	jne    c0013d75 <Reg::readInt(char*, char*, int*)+0x7b>
c0013d6d:	83 c2 02             	add    edx,0x2
c0013d70:	be 02 00 00 00       	mov    esi,0x2
c0013d75:	01 d5                	add    ebp,edx
c0013d77:	31 d2                	xor    edx,edx
c0013d79:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013d7d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d81:	85 c9                	test   ecx,ecx
c0013d83:	0f 94 c3             	sete   bl
c0013d86:	83 f9 0d             	cmp    ecx,0xd
c0013d89:	89 df                	mov    edi,ebx
c0013d8b:	0f 94 c3             	sete   bl
c0013d8e:	09 df                	or     edi,ebx
c0013d90:	89 fb                	mov    ebx,edi
c0013d92:	83 e7 01             	and    edi,0x1
c0013d95:	75 35                	jne    c0013dcc <Reg::readInt(char*, char*, int*)+0xd2>
c0013d97:	0f af d6             	imul   edx,esi
c0013d9a:	83 fe 10             	cmp    esi,0x10
c0013d9d:	75 26                	jne    c0013dc5 <Reg::readInt(char*, char*, int*)+0xcb>
c0013d9f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013da3:	83 ef 41             	sub    edi,0x41
c0013da6:	89 fb                	mov    ebx,edi
c0013da8:	80 fb 05             	cmp    bl,0x5
c0013dab:	77 06                	ja     c0013db3 <Reg::readInt(char*, char*, int*)+0xb9>
c0013dad:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013db1:	eb 16                	jmp    c0013dc9 <Reg::readInt(char*, char*, int*)+0xcf>
c0013db3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013db7:	83 eb 61             	sub    ebx,0x61
c0013dba:	80 fb 05             	cmp    bl,0x5
c0013dbd:	77 06                	ja     c0013dc5 <Reg::readInt(char*, char*, int*)+0xcb>
c0013dbf:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013dc3:	eb 04                	jmp    c0013dc9 <Reg::readInt(char*, char*, int*)+0xcf>
c0013dc5:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013dc9:	45                   	inc    ebp
c0013dca:	eb ad                	jmp    c0013d79 <Reg::readInt(char*, char*, int*)+0x7f>
c0013dcc:	84 c0                	test   al,al
c0013dce:	74 02                	je     c0013dd2 <Reg::readInt(char*, char*, int*)+0xd8>
c0013dd0:	f7 da                	neg    edx
c0013dd2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013dd9:	89 10                	mov    DWORD PTR [eax],edx
c0013ddb:	88 d8                	mov    al,bl
c0013ddd:	81 c4 ec 00 00 00    	add    esp,0xec
c0013de3:	5b                   	pop    ebx
c0013de4:	5e                   	pop    esi
c0013de5:	5f                   	pop    edi
c0013de6:	5d                   	pop    ebp
c0013de7:	c3                   	ret    

c0013de8 <Reg::readString(char*, char*, char*, int)>:
c0013de8:	57                   	push   edi
c0013de9:	56                   	push   esi
c0013dea:	53                   	push   ebx
c0013deb:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013df1:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013df5:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013dfc:	57                   	push   edi
c0013dfd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e04:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e0b:	e8 b3 fe ff ff       	call   c0013cc3 <Reg::getLine(char*, char*, char*)>
c0013e10:	83 c4 10             	add    esp,0x10
c0013e13:	84 c0                	test   al,al
c0013e15:	89 c6                	mov    esi,eax
c0013e17:	74 44                	je     c0013e5d <Reg::readString(char*, char*, char*, int)+0x75>
c0013e19:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013e20:	31 c0                	xor    eax,eax
c0013e22:	4a                   	dec    edx
c0013e23:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013e26:	84 c9                	test   cl,cl
c0013e28:	74 0f                	je     c0013e39 <Reg::readString(char*, char*, char*, int)+0x51>
c0013e2a:	39 c2                	cmp    edx,eax
c0013e2c:	7e 0b                	jle    c0013e39 <Reg::readString(char*, char*, char*, int)+0x51>
c0013e2e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013e31:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013e36:	40                   	inc    eax
c0013e37:	eb ea                	jmp    c0013e23 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013e39:	83 ec 0c             	sub    esp,0xc
c0013e3c:	53                   	push   ebx
c0013e3d:	e8 3e c7 fe ff       	call   c0000580 <strlen>
c0013e42:	83 c4 10             	add    esp,0x10
c0013e45:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013e4a:	75 11                	jne    c0013e5d <Reg::readString(char*, char*, char*, int)+0x75>
c0013e4c:	83 ec 0c             	sub    esp,0xc
c0013e4f:	53                   	push   ebx
c0013e50:	e8 2b c7 fe ff       	call   c0000580 <strlen>
c0013e55:	83 c4 10             	add    esp,0x10
c0013e58:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013e5d:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013e63:	89 f0                	mov    eax,esi
c0013e65:	5b                   	pop    ebx
c0013e66:	5e                   	pop    esi
c0013e67:	5f                   	pop    edi
c0013e68:	c3                   	ret    

c0013e69 <Reg::readBool(char*, char*, bool*)>:
c0013e69:	83 ec 20             	sub    esp,0x20
c0013e6c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e70:	50                   	push   eax
c0013e71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e79:	e8 7c fe ff ff       	call   c0013cfa <Reg::readInt(char*, char*, int*)>
c0013e7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013e82:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e87:	0f 95 02             	setne  BYTE PTR [edx]
c0013e8a:	83 c4 2c             	add    esp,0x2c
c0013e8d:	c3                   	ret    

c0013e8e <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013e8e:	53                   	push   ebx
c0013e8f:	83 ec 1c             	sub    esp,0x1c
c0013e92:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013e96:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013e9a:	50                   	push   eax
c0013e9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ea3:	e8 c1 ff ff ff       	call   c0013e69 <Reg::readBool(char*, char*, bool*)>
c0013ea8:	83 c4 10             	add    esp,0x10
c0013eab:	84 c0                	test   al,al
c0013ead:	74 04                	je     c0013eb3 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013eaf:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013eb3:	83 c4 18             	add    esp,0x18
c0013eb6:	88 d8                	mov    al,bl
c0013eb8:	5b                   	pop    ebx
c0013eb9:	c3                   	ret    

c0013eba <Reg::readIntWithDefault(char*, char*, int)>:
c0013eba:	53                   	push   ebx
c0013ebb:	83 ec 1c             	sub    esp,0x1c
c0013ebe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013ec2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013ec6:	50                   	push   eax
c0013ec7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ecb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ecf:	e8 26 fe ff ff       	call   c0013cfa <Reg::readInt(char*, char*, int*)>
c0013ed4:	83 c4 10             	add    esp,0x10
c0013ed7:	84 c0                	test   al,al
c0013ed9:	74 04                	je     c0013edf <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013edb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013edf:	83 c4 18             	add    esp,0x18
c0013ee2:	89 d8                	mov    eax,ebx
c0013ee4:	5b                   	pop    ebx
c0013ee5:	c3                   	ret    

c0013ee6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013ee6:	57                   	push   edi
c0013ee7:	56                   	push   esi
c0013ee8:	53                   	push   ebx
c0013ee9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013eed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ef1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013ef5:	56                   	push   esi
c0013ef6:	57                   	push   edi
c0013ef7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013efb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eff:	e8 e4 fe ff ff       	call   c0013de8 <Reg::readString(char*, char*, char*, int)>
c0013f04:	83 c4 10             	add    esp,0x10
c0013f07:	84 c0                	test   al,al
c0013f09:	75 16                	jne    c0013f21 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013f0b:	50                   	push   eax
c0013f0c:	56                   	push   esi
c0013f0d:	6a 00                	push   0x0
c0013f0f:	57                   	push   edi
c0013f10:	e8 db c5 fe ff       	call   c00004f0 <memset>
c0013f15:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013f18:	89 de                	mov    esi,ebx
c0013f1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f1c:	83 c4 10             	add    esp,0x10
c0013f1f:	89 df                	mov    edi,ebx
c0013f21:	5b                   	pop    ebx
c0013f22:	89 f8                	mov    eax,edi
c0013f24:	5e                   	pop    esi
c0013f25:	5f                   	pop    edi
c0013f26:	c3                   	ret    

c0013f27 <SysEject(regs*)>:
c0013f27:	83 ec 0c             	sub    esp,0xc
c0013f2a:	83 ca ff             	or     edx,0xffffffff
c0013f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f31:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f34:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013f39:	83 e9 41             	sub    ecx,0x41
c0013f3c:	83 f9 19             	cmp    ecx,0x19
c0013f3f:	77 18                	ja     c0013f59 <SysEject(regs*)+0x32>
c0013f41:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013f48:	85 c9                	test   ecx,ecx
c0013f4a:	74 0d                	je     c0013f59 <SysEject(regs*)+0x32>
c0013f4c:	83 ec 0c             	sub    esp,0xc
c0013f4f:	51                   	push   ecx
c0013f50:	e8 2b 9e ff ff       	call   c000dd80 <LogicalDisk::eject()>
c0013f55:	83 c4 10             	add    esp,0x10
c0013f58:	99                   	cdq    
c0013f59:	83 c4 0c             	add    esp,0xc
c0013f5c:	c3                   	ret    

c0013f5d <SysExit(regs*)>:
c0013f5d:	83 ec 18             	sub    esp,0x18
c0013f60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f64:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f67:	e8 80 2b 00 00       	call   c0016aec <terminateTask(int)>
c0013f6c:	83 c8 ff             	or     eax,0xffffffff
c0013f6f:	83 c4 1c             	add    esp,0x1c
c0013f72:	89 c2                	mov    edx,eax
c0013f74:	c3                   	ret    

c0013f75 <SysGetCwd(regs*)>:
c0013f75:	83 ec 10             	sub    esp,0x10
c0013f78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f7c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013f7f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f87:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f8a:	e8 93 78 ff ff       	call   c000b822 <Fs::getcwd(Process*, char*, int)>
c0013f8f:	83 c4 1c             	add    esp,0x1c
c0013f92:	99                   	cdq    
c0013f93:	c3                   	ret    

c0013f94 <SysGetPID(regs*)>:
c0013f94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f9e:	99                   	cdq    
c0013f9f:	c3                   	ret    

c0013fa0 <SysGetRAMData(regs*)>:
c0013fa0:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013faa:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013fb0:	99                   	cdq    
c0013fb1:	f7 f9                	idiv   ecx
c0013fb3:	c1 e0 18             	shl    eax,0x18
c0013fb6:	09 c8                	or     eax,ecx
c0013fb8:	99                   	cdq    
c0013fb9:	c3                   	ret    

c0013fba <SysGetVGAPtr(regs*)>:
c0013fba:	55                   	push   ebp
c0013fbb:	57                   	push   edi
c0013fbc:	56                   	push   esi
c0013fbd:	53                   	push   ebx
c0013fbe:	83 ec 18             	sub    esp,0x18
c0013fc1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013fc5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013fc8:	e8 eb 25 00 00       	call   c00165b8 <Thr::processFromPID(int)>
c0013fcd:	83 c4 10             	add    esp,0x10
c0013fd0:	89 c1                	mov    ecx,eax
c0013fd2:	b8 01 00 00 00       	mov    eax,0x1
c0013fd7:	85 c9                	test   ecx,ecx
c0013fd9:	74 57                	je     c0014032 <SysGetVGAPtr(regs*)+0x78>
c0013fdb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013fdf:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013fe5:	74 0c                	je     c0013ff3 <SysGetVGAPtr(regs*)+0x39>
c0013fe7:	83 ec 0c             	sub    esp,0xc
c0013fea:	55                   	push   ebp
c0013feb:	e8 df 47 ff ff       	call   c00087cf <setActiveTerminal(VgaText*)>
c0013ff0:	83 c4 10             	add    esp,0x10
c0013ff3:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013ff6:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013ffb:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013ffe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014000:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0014003:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014006:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001400c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001400f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0014012:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0014018:	50                   	push   eax
c0014019:	50                   	push   eax
c001401a:	68 c8 27 02 c0       	push   0xc00227c8
c001401f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014022:	05 a8 0f 00 00       	add    eax,0xfa8
c0014027:	50                   	push   eax
c0014028:	e8 23 c6 fe ff       	call   c0000650 <strcpy>
c001402d:	83 c4 10             	add    esp,0x10
c0014030:	31 c0                	xor    eax,eax
c0014032:	83 c4 0c             	add    esp,0xc
c0014035:	31 d2                	xor    edx,edx
c0014037:	5b                   	pop    ebx
c0014038:	5e                   	pop    esi
c0014039:	5f                   	pop    edi
c001403a:	5d                   	pop    ebp
c001403b:	c3                   	ret    

c001403c <SysKill(regs*)>:
c001403c:	53                   	push   ebx
c001403d:	83 ec 08             	sub    esp,0x8
c0014040:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014044:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014048:	75 16                	jne    c0014060 <SysKill(regs*)+0x24>
c001404a:	83 ec 0c             	sub    esp,0xc
c001404d:	68 d2 27 02 c0       	push   0xc00227d2
c0014052:	e8 e8 d5 ff ff       	call   c001163f <KePanic(char const*)>
c0014057:	83 c4 10             	add    esp,0x10
c001405a:	e9 89 00 00 00       	jmp    c00140e8 <SysKill(regs*)+0xac>
c001405f:	90                   	nop
c0014060:	83 ec 0c             	sub    esp,0xc
c0014063:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014068:	e8 af bd 00 00       	call   c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001406d:	8d 76 00             	lea    esi,[esi+0x0]
c0014070:	83 c4 10             	add    esp,0x10
c0014073:	85 c0                	test   eax,eax
c0014075:	74 19                	je     c0014090 <SysKill(regs*)+0x54>
c0014077:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001407a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001407d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001407f:	74 33                	je     c00140b4 <SysKill(regs*)+0x78>
c0014081:	52                   	push   edx
c0014082:	52                   	push   edx
c0014083:	50                   	push   eax
c0014084:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014089:	e8 ae c0 00 00       	call   c002013c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001408e:	eb e0                	jmp    c0014070 <SysKill(regs*)+0x34>
c0014090:	83 ec 0c             	sub    esp,0xc
c0014093:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014098:	e8 7f bd 00 00       	call   c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001409d:	8d 76 00             	lea    esi,[esi+0x0]
c00140a0:	83 c4 10             	add    esp,0x10
c00140a3:	85 c0                	test   eax,eax
c00140a5:	74 41                	je     c00140e8 <SysKill(regs*)+0xac>
c00140a7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00140aa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00140ad:	39 0a                	cmp    DWORD PTR [edx],ecx
c00140af:	75 27                	jne    c00140d8 <SysKill(regs*)+0x9c>
c00140b1:	8d 76 00             	lea    esi,[esi+0x0]
c00140b4:	51                   	push   ecx
c00140b5:	51                   	push   ecx
c00140b6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140c1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00140c7:	e8 0f da ff ff       	call   c0011adb <KeRaiseSignal(SigHandlerBlock*, int)>
c00140cc:	83 c4 10             	add    esp,0x10
c00140cf:	31 c0                	xor    eax,eax
c00140d1:	31 d2                	xor    edx,edx
c00140d3:	eb 1b                	jmp    c00140f0 <SysKill(regs*)+0xb4>
c00140d5:	8d 76 00             	lea    esi,[esi+0x0]
c00140d8:	52                   	push   edx
c00140d9:	52                   	push   edx
c00140da:	50                   	push   eax
c00140db:	68 d8 c6 02 c0       	push   0xc002c6d8
c00140e0:	e8 57 c0 00 00       	call   c002013c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00140e5:	eb b9                	jmp    c00140a0 <SysKill(regs*)+0x64>
c00140e7:	90                   	nop
c00140e8:	83 c8 ff             	or     eax,0xffffffff
c00140eb:	89 c2                	mov    edx,eax
c00140ed:	8d 76 00             	lea    esi,[esi+0x0]
c00140f0:	83 c4 08             	add    esp,0x8
c00140f3:	5b                   	pop    ebx
c00140f4:	c3                   	ret    

c00140f5 <SysLoadDLL(regs*)>:
c00140f5:	56                   	push   esi
c00140f6:	31 d2                	xor    edx,edx
c00140f8:	53                   	push   ebx
c00140f9:	b8 01 00 00 00       	mov    eax,0x1
c00140fe:	51                   	push   ecx
c00140ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014103:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014107:	0f 84 8c 00 00 00    	je     c0014199 <SysLoadDLL(regs*)+0xa4>
c001410d:	83 ec 0c             	sub    esp,0xc
c0014110:	68 14 01 00 00       	push   0x114
c0014115:	e8 19 3a ff ff       	call   c0007b33 <malloc>
c001411a:	83 c4 0c             	add    esp,0xc
c001411d:	89 c3                	mov    ebx,eax
c001411f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014124:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014127:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001412a:	53                   	push   ebx
c001412b:	e8 52 7a ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0014130:	83 c4 10             	add    esp,0x10
c0014133:	31 d2                	xor    edx,edx
c0014135:	85 db                	test   ebx,ebx
c0014137:	b8 02 00 00 00       	mov    eax,0x2
c001413c:	74 5b                	je     c0014199 <SysLoadDLL(regs*)+0xa4>
c001413e:	83 ec 0c             	sub    esp,0xc
c0014141:	53                   	push   ebx
c0014142:	e8 1d 7d ff ff       	call   c000be64 <File::exists()>
c0014147:	83 c4 10             	add    esp,0x10
c001414a:	84 c0                	test   al,al
c001414c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001414e:	75 11                	jne    c0014161 <SysLoadDLL(regs*)+0x6c>
c0014150:	83 ec 0c             	sub    esp,0xc
c0014153:	53                   	push   ebx
c0014154:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014157:	83 c4 10             	add    esp,0x10
c001415a:	b8 03 00 00 00       	mov    eax,0x3
c001415f:	eb 36                	jmp    c0014197 <SysLoadDLL(regs*)+0xa2>
c0014161:	83 ec 0c             	sub    esp,0xc
c0014164:	53                   	push   ebx
c0014165:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014168:	58                   	pop    eax
c0014169:	5a                   	pop    edx
c001416a:	6a 00                	push   0x0
c001416c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001416f:	e8 8f 15 00 00       	call   c0015703 <Thr::loadDLL(char const*, bool)>
c0014174:	83 c4 10             	add    esp,0x10
c0014177:	31 d2                	xor    edx,edx
c0014179:	89 c1                	mov    ecx,eax
c001417b:	b8 04 00 00 00       	mov    eax,0x4
c0014180:	85 c9                	test   ecx,ecx
c0014182:	74 15                	je     c0014199 <SysLoadDLL(regs*)+0xa4>
c0014184:	53                   	push   ebx
c0014185:	53                   	push   ebx
c0014186:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001418c:	51                   	push   ecx
c001418d:	e8 b1 17 00 00       	call   c0015943 <Thr::executeDLL(unsigned long, void*)>
c0014192:	83 c4 10             	add    esp,0x10
c0014195:	31 c0                	xor    eax,eax
c0014197:	31 d2                	xor    edx,edx
c0014199:	59                   	pop    ecx
c001419a:	5b                   	pop    ebx
c001419b:	5e                   	pop    esi
c001419c:	c3                   	ret    

c001419d <SysRead(regs*)>:
c001419d:	57                   	push   edi
c001419e:	56                   	push   esi
c001419f:	53                   	push   ebx
c00141a0:	83 ec 10             	sub    esp,0x10
c00141a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00141a7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00141aa:	83 f8 02             	cmp    eax,0x2
c00141ad:	77 10                	ja     c00141bf <SysRead(regs*)+0x22>
c00141af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141b7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00141bd:	eb 0e                	jmp    c00141cd <SysRead(regs*)+0x30>
c00141bf:	83 ec 0c             	sub    esp,0xc
c00141c2:	50                   	push   eax
c00141c3:	e8 33 53 ff ff       	call   c00094fb <KeGetFileFromDescriptor(int)>
c00141c8:	83 c4 10             	add    esp,0x10
c00141cb:	89 c1                	mov    ecx,eax
c00141cd:	83 c8 ff             	or     eax,0xffffffff
c00141d0:	85 c9                	test   ecx,ecx
c00141d2:	89 c2                	mov    edx,eax
c00141d4:	74 28                	je     c00141fe <SysRead(regs*)+0x61>
c00141d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141de:	83 ec 0c             	sub    esp,0xc
c00141e1:	31 ff                	xor    edi,edi
c00141e3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00141e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00141e9:	52                   	push   edx
c00141ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141ed:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00141f0:	57                   	push   edi
c00141f1:	56                   	push   esi
c00141f2:	51                   	push   ecx
c00141f3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00141fa:	83 c4 20             	add    esp,0x20
c00141fd:	99                   	cdq    
c00141fe:	83 c4 10             	add    esp,0x10
c0014201:	5b                   	pop    ebx
c0014202:	5e                   	pop    esi
c0014203:	5f                   	pop    edi
c0014204:	c3                   	ret    

c0014205 <SysRegisterSignal(regs*)>:
c0014205:	83 ec 18             	sub    esp,0x18
c0014208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001420c:	6a 00                	push   0x0
c001420e:	6a 00                	push   0x0
c0014210:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014213:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014216:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001421b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001421e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014224:	e8 7c d8 ff ff       	call   c0011aa5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014229:	83 c4 2c             	add    esp,0x2c
c001422c:	99                   	cdq    
c001422d:	c3                   	ret    

c001422e <SysRegistryGetTypeFromPath(regs*)>:
c001422e:	57                   	push   edi
c001422f:	56                   	push   esi
c0014230:	53                   	push   ebx
c0014231:	81 ec 38 01 00 00    	sub    esp,0x138
c0014237:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001423e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014241:	68 f3 27 02 c0       	push   0xc00227f3
c0014246:	e8 1f 67 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001424b:	5a                   	pop    edx
c001424c:	59                   	pop    ecx
c001424d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014250:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014253:	e8 34 f6 ff ff       	call   c001388c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014258:	5f                   	pop    edi
c0014259:	5a                   	pop    edx
c001425a:	89 c6                	mov    esi,eax
c001425c:	50                   	push   eax
c001425d:	68 13 28 02 c0       	push   0xc0022813
c0014262:	e8 03 67 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0014267:	83 c4 10             	add    esp,0x10
c001426a:	85 f6                	test   esi,esi
c001426c:	74 28                	je     c0014296 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001426e:	50                   	push   eax
c001426f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014273:	57                   	push   edi
c0014274:	56                   	push   esi
c0014275:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014278:	e8 f4 f1 ff ff       	call   c0013471 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001427d:	83 c4 0c             	add    esp,0xc
c0014280:	57                   	push   edi
c0014281:	50                   	push   eax
c0014282:	89 c3                	mov    ebx,eax
c0014284:	68 1b 28 02 c0       	push   0xc002281b
c0014289:	e8 dc 66 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001428e:	89 d8                	mov    eax,ebx
c0014290:	83 c4 10             	add    esp,0x10
c0014293:	99                   	cdq    
c0014294:	eb 05                	jmp    c001429b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0014296:	83 c8 ff             	or     eax,0xffffffff
c0014299:	89 c2                	mov    edx,eax
c001429b:	81 c4 30 01 00 00    	add    esp,0x130
c00142a1:	5b                   	pop    ebx
c00142a2:	5e                   	pop    esi
c00142a3:	5f                   	pop    edi
c00142a4:	c3                   	ret    

c00142a5 <SysRegistryReadExtent(regs*)>:
c00142a5:	83 ec 1c             	sub    esp,0x1c
c00142a8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142ac:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00142af:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00142b2:	85 c0                	test   eax,eax
c00142b4:	79 1f                	jns    c00142d5 <SysRegistryReadExtent(regs*)+0x30>
c00142b6:	52                   	push   edx
c00142b7:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00142bc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00142c0:	52                   	push   edx
c00142c1:	50                   	push   eax
c00142c2:	51                   	push   ecx
c00142c3:	e8 9b f0 ff ff       	call   c0013363 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00142c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00142d0:	83 c4 10             	add    esp,0x10
c00142d3:	eb 14                	jmp    c00142e9 <SysRegistryReadExtent(regs*)+0x44>
c00142d5:	83 ec 04             	sub    esp,0x4
c00142d8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00142db:	50                   	push   eax
c00142dc:	51                   	push   ecx
c00142dd:	e8 1f eb ff ff       	call   c0012e01 <CmGetString(Reghive_Tag*, int, char*)>
c00142e2:	83 c4 10             	add    esp,0x10
c00142e5:	31 c0                	xor    eax,eax
c00142e7:	31 d2                	xor    edx,edx
c00142e9:	83 c4 1c             	add    esp,0x1c
c00142ec:	c3                   	ret    

c00142ed <SysRegistryPathToExtentLookup(regs*)>:
c00142ed:	53                   	push   ebx
c00142ee:	83 ec 10             	sub    esp,0x10
c00142f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142f8:	68 31 28 02 c0       	push   0xc0022831
c00142fd:	e8 68 66 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0014302:	58                   	pop    eax
c0014303:	5a                   	pop    edx
c0014304:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014307:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001430a:	e8 7d f5 ff ff       	call   c001388c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001430f:	83 c4 18             	add    esp,0x18
c0014312:	5b                   	pop    ebx
c0014313:	99                   	cdq    
c0014314:	c3                   	ret    

c0014315 <SysRegistryEnterDirectory(regs*)>:
c0014315:	53                   	push   ebx
c0014316:	83 ec 10             	sub    esp,0x10
c0014319:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001431d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014320:	68 54 28 02 c0       	push   0xc0022854
c0014325:	e8 40 66 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001432a:	58                   	pop    eax
c001432b:	5a                   	pop    edx
c001432c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001432f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014332:	e8 41 eb ff ff       	call   c0012e78 <CmEnterDirectory(Reghive_Tag*, int)>
c0014337:	83 c4 18             	add    esp,0x18
c001433a:	5b                   	pop    ebx
c001433b:	99                   	cdq    
c001433c:	c3                   	ret    

c001433d <SysRegistryGetNext(regs*)>:
c001433d:	53                   	push   ebx
c001433e:	83 ec 10             	sub    esp,0x10
c0014341:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014345:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014348:	68 72 28 02 c0       	push   0xc0022872
c001434d:	e8 18 66 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0014352:	58                   	pop    eax
c0014353:	5a                   	pop    edx
c0014354:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014357:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001435a:	e8 58 eb ff ff       	call   c0012eb7 <CmGetNext(Reghive_Tag*, int)>
c001435f:	83 c4 18             	add    esp,0x18
c0014362:	5b                   	pop    ebx
c0014363:	99                   	cdq    
c0014364:	c3                   	ret    

c0014365 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014365:	57                   	push   edi
c0014366:	56                   	push   esi
c0014367:	53                   	push   ebx
c0014368:	81 ec 34 01 00 00    	sub    esp,0x134
c001436e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014375:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014379:	57                   	push   edi
c001437a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001437d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014380:	e8 ec f0 ff ff       	call   c0013471 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014385:	89 c3                	mov    ebx,eax
c0014387:	58                   	pop    eax
c0014388:	5a                   	pop    edx
c0014389:	57                   	push   edi
c001438a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001438d:	e8 be c2 fe ff       	call   c0000650 <strcpy>
c0014392:	81 c4 40 01 00 00    	add    esp,0x140
c0014398:	89 d8                	mov    eax,ebx
c001439a:	5b                   	pop    ebx
c001439b:	99                   	cdq    
c001439c:	5e                   	pop    esi
c001439d:	5f                   	pop    edi
c001439e:	c3                   	ret    

c001439f <SysRegistryOpen(regs*)>:
c001439f:	83 ec 18             	sub    esp,0x18
c00143a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143a6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00143a9:	e8 e3 e8 ff ff       	call   c0012c91 <CmOpen(char const*)>
c00143ae:	83 c4 1c             	add    esp,0x1c
c00143b1:	99                   	cdq    
c00143b2:	c3                   	ret    

c00143b3 <SysRegistryClose(regs*)>:
c00143b3:	83 ec 18             	sub    esp,0x18
c00143b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143ba:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143bd:	e8 ed e9 ff ff       	call   c0012daf <CmClose(Reghive_Tag*)>
c00143c2:	31 c0                	xor    eax,eax
c00143c4:	31 d2                	xor    edx,edx
c00143c6:	83 c4 1c             	add    esp,0x1c
c00143c9:	c3                   	ret    

c00143ca <SysSbrk(regs*)>:
c00143ca:	56                   	push   esi
c00143cb:	53                   	push   ebx
c00143cc:	50                   	push   eax
c00143cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00143d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143d9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00143dc:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00143e2:	85 db                	test   ebx,ebx
c00143e4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00143e7:	74 02                	je     c00143eb <SysSbrk(regs*)+0x21>
c00143e9:	79 06                	jns    c00143f1 <SysSbrk(regs*)+0x27>
c00143eb:	89 f0                	mov    eax,esi
c00143ed:	31 d2                	xor    edx,edx
c00143ef:	eb 2a                	jmp    c001441b <SysSbrk(regs*)+0x51>
c00143f1:	83 c8 ff             	or     eax,0xffffffff
c00143f4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00143fa:	89 c2                	mov    edx,eax
c00143fc:	77 1d                	ja     c001441b <SysSbrk(regs*)+0x51>
c00143fe:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014404:	50                   	push   eax
c0014405:	68 07 0c 00 00       	push   0xc07
c001440a:	c1 ea 0c             	shr    edx,0xc
c001440d:	52                   	push   edx
c001440e:	51                   	push   ecx
c001440f:	e8 52 5a ff ff       	call   c0009e66 <VAS::allocatePages(int, int)>
c0014414:	89 f0                	mov    eax,esi
c0014416:	31 d2                	xor    edx,edx
c0014418:	83 c4 10             	add    esp,0x10
c001441b:	59                   	pop    ecx
c001441c:	5b                   	pop    ebx
c001441d:	5e                   	pop    esi
c001441e:	c3                   	ret    

c001441f <SysSetCwd(regs*)>:
c001441f:	83 ec 14             	sub    esp,0x14
c0014422:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014426:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014429:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001442e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014431:	e8 cd 7a ff ff       	call   c000bf03 <Fs::setcwd(Process*, char*)>
c0014436:	83 c4 1c             	add    esp,0x1c
c0014439:	99                   	cdq    
c001443a:	c3                   	ret    

c001443b <SysSetTime(regs*)>:
c001443b:	55                   	push   ebp
c001443c:	31 c9                	xor    ecx,ecx
c001443e:	57                   	push   edi
c001443f:	bd 0c 00 00 00       	mov    ebp,0xc
c0014444:	56                   	push   esi
c0014445:	53                   	push   ebx
c0014446:	31 db                	xor    ebx,ebx
c0014448:	83 ec 10             	sub    esp,0x10
c001444b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001444f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014452:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0014455:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014458:	89 c2                	mov    edx,eax
c001445a:	c1 e8 05             	shr    eax,0x5
c001445d:	83 e2 1f             	and    edx,0x1f
c0014460:	42                   	inc    edx
c0014461:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0014467:	c1 e7 10             	shl    edi,0x10
c001446a:	88 d1                	mov    cl,dl
c001446c:	31 d2                	xor    edx,edx
c001446e:	f7 f5                	div    ebp
c0014470:	89 dd                	mov    ebp,ebx
c0014472:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014478:	88 d5                	mov    ch,dl
c001447a:	31 d2                	xor    edx,edx
c001447c:	0f b7 c1             	movzx  eax,cx
c001447f:	09 f8                	or     eax,edi
c0014481:	bf 3c 00 00 00       	mov    edi,0x3c
c0014486:	89 c1                	mov    ecx,eax
c0014488:	89 f0                	mov    eax,esi
c001448a:	f7 f7                	div    edi
c001448c:	c1 e2 10             	shl    edx,0x10
c001448f:	09 d5                	or     ebp,edx
c0014491:	31 d2                	xor    edx,edx
c0014493:	f7 f7                	div    edi
c0014495:	89 eb                	mov    ebx,ebp
c0014497:	bf 10 0e 00 00       	mov    edi,0xe10
c001449c:	89 f0                	mov    eax,esi
c001449e:	88 d7                	mov    bh,dl
c00144a0:	31 d2                	xor    edx,edx
c00144a2:	f7 f7                	div    edi
c00144a4:	bf 18 00 00 00       	mov    edi,0x18
c00144a9:	31 d2                	xor    edx,edx
c00144ab:	f7 f7                	div    edi
c00144ad:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00144b2:	88 d3                	mov    bl,dl
c00144b4:	53                   	push   ebx
c00144b5:	51                   	push   ecx
c00144b6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00144bc:	e8 53 82 ff ff       	call   c000c714 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00144c1:	83 c4 1c             	add    esp,0x1c
c00144c4:	31 d2                	xor    edx,edx
c00144c6:	5b                   	pop    ebx
c00144c7:	5e                   	pop    esi
c00144c8:	83 f0 01             	xor    eax,0x1
c00144cb:	5f                   	pop    edi
c00144cc:	0f b6 c0             	movzx  eax,al
c00144cf:	5d                   	pop    ebp
c00144d0:	c3                   	ret    

c00144d1 <SysSymlink(regs*)>:
c00144d1:	56                   	push   esi
c00144d2:	83 c8 ff             	or     eax,0xffffffff
c00144d5:	53                   	push   ebx
c00144d6:	89 c2                	mov    edx,eax
c00144d8:	81 ec 34 02 00 00    	sub    esp,0x234
c00144de:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00144e5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00144e9:	74 50                	je     c001453b <SysSymlink(regs*)+0x6a>
c00144eb:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00144ee:	85 c9                	test   ecx,ecx
c00144f0:	74 49                	je     c001453b <SysSymlink(regs*)+0x6a>
c00144f2:	6a 01                	push   0x1
c00144f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144fc:	05 0c 01 00 00       	add    eax,0x10c
c0014501:	50                   	push   eax
c0014502:	51                   	push   ecx
c0014503:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014507:	56                   	push   esi
c0014508:	e8 69 73 ff ff       	call   c000b876 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001450d:	6a 01                	push   0x1
c001450f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014514:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014517:	05 0c 01 00 00       	add    eax,0x10c
c001451c:	50                   	push   eax
c001451d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014520:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014527:	53                   	push   ebx
c0014528:	e8 49 73 ff ff       	call   c000b876 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001452d:	83 c4 18             	add    esp,0x18
c0014530:	56                   	push   esi
c0014531:	53                   	push   ebx
c0014532:	e8 4e 6f ff ff       	call   c000b485 <KeCreateSymlink(char const*, char const*)>
c0014537:	83 c4 10             	add    esp,0x10
c001453a:	99                   	cdq    
c001453b:	81 c4 34 02 00 00    	add    esp,0x234
c0014541:	5b                   	pop    ebx
c0014542:	5e                   	pop    esi
c0014543:	c3                   	ret    

c0014544 <SysTimezone(regs*)>:
c0014544:	53                   	push   ebx
c0014545:	83 ec 08             	sub    esp,0x8
c0014548:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001454c:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014550:	75 17                	jne    c0014569 <SysTimezone(regs*)+0x25>
c0014552:	83 ec 0c             	sub    esp,0xc
c0014555:	68 89 28 02 c0       	push   0xc0022889
c001455a:	e8 0b 64 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001455f:	83 c8 ff             	or     eax,0xffffffff
c0014562:	83 c4 10             	add    esp,0x10
c0014565:	89 c2                	mov    edx,eax
c0014567:	eb 20                	jmp    c0014589 <SysTimezone(regs*)+0x45>
c0014569:	83 ec 0c             	sub    esp,0xc
c001456c:	68 9e 28 02 c0       	push   0xc002289e
c0014571:	e8 f4 63 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0014576:	58                   	pop    eax
c0014577:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001457a:	e8 f9 7e ff ff       	call   c000c478 <User::loadClockSettings(int)>
c001457f:	83 c4 10             	add    esp,0x10
c0014582:	b8 01 00 00 00       	mov    eax,0x1
c0014587:	31 d2                	xor    edx,edx
c0014589:	83 c4 08             	add    esp,0x8
c001458c:	5b                   	pop    ebx
c001458d:	c3                   	ret    

c001458e <SysTruncate(regs*)>:
c001458e:	55                   	push   ebp
c001458f:	57                   	push   edi
c0014590:	31 ff                	xor    edi,edi
c0014592:	56                   	push   esi
c0014593:	53                   	push   ebx
c0014594:	83 ec 0c             	sub    esp,0xc
c0014597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001459b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001459e:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00145a2:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00145a5:	89 ce                	mov    esi,ecx
c00145a7:	0f 84 9a 00 00 00    	je     c0014647 <SysTruncate(regs*)+0xb9>
c00145ad:	83 ec 0c             	sub    esp,0xc
c00145b0:	68 14 01 00 00       	push   0x114
c00145b5:	e8 79 35 ff ff       	call   c0007b33 <malloc>
c00145ba:	83 c4 0c             	add    esp,0xc
c00145bd:	89 c3                	mov    ebx,eax
c00145bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145c4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00145c7:	55                   	push   ebp
c00145c8:	53                   	push   ebx
c00145c9:	e8 b4 75 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c00145ce:	83 c4 10             	add    esp,0x10
c00145d1:	31 d2                	xor    edx,edx
c00145d3:	85 db                	test   ebx,ebx
c00145d5:	b8 03 00 00 00       	mov    eax,0x3
c00145da:	0f 84 a2 00 00 00    	je     c0014682 <SysTruncate(regs*)+0xf4>
c00145e0:	51                   	push   ecx
c00145e1:	51                   	push   ecx
c00145e2:	6a 02                	push   0x2
c00145e4:	53                   	push   ebx
c00145e5:	e8 b6 75 ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c00145ea:	83 c4 10             	add    esp,0x10
c00145ed:	85 c0                	test   eax,eax
c00145ef:	74 13                	je     c0014604 <SysTruncate(regs*)+0x76>
c00145f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145f3:	83 ec 0c             	sub    esp,0xc
c00145f6:	53                   	push   ebx
c00145f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145fa:	83 c4 10             	add    esp,0x10
c00145fd:	b8 04 00 00 00       	mov    eax,0x4
c0014602:	eb 7c                	jmp    c0014680 <SysTruncate(regs*)+0xf2>
c0014604:	52                   	push   edx
c0014605:	57                   	push   edi
c0014606:	56                   	push   esi
c0014607:	53                   	push   ebx
c0014608:	e8 a7 76 ff ff       	call   c000bcb4 <File::truncate(unsigned long long)>
c001460d:	83 c4 10             	add    esp,0x10
c0014610:	85 c0                	test   eax,eax
c0014612:	74 1b                	je     c001462f <SysTruncate(regs*)+0xa1>
c0014614:	83 ec 0c             	sub    esp,0xc
c0014617:	53                   	push   ebx
c0014618:	e8 e1 75 ff ff       	call   c000bbfe <File::close()>
c001461d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001461f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014622:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014625:	83 c4 10             	add    esp,0x10
c0014628:	b8 05 00 00 00       	mov    eax,0x5
c001462d:	eb 51                	jmp    c0014680 <SysTruncate(regs*)+0xf2>
c001462f:	83 ec 0c             	sub    esp,0xc
c0014632:	53                   	push   ebx
c0014633:	e8 c6 75 ff ff       	call   c000bbfe <File::close()>
c0014638:	8b 03                	mov    eax,DWORD PTR [ebx]
c001463a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001463d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014640:	83 c4 10             	add    esp,0x10
c0014643:	31 c0                	xor    eax,eax
c0014645:	eb 39                	jmp    c0014680 <SysTruncate(regs*)+0xf2>
c0014647:	31 d2                	xor    edx,edx
c0014649:	83 fd 02             	cmp    ebp,0x2
c001464c:	b8 01 00 00 00       	mov    eax,0x1
c0014651:	7e 2f                	jle    c0014682 <SysTruncate(regs*)+0xf4>
c0014653:	83 ec 0c             	sub    esp,0xc
c0014656:	51                   	push   ecx
c0014657:	e8 9f 4e ff ff       	call   c00094fb <KeGetFileFromDescriptor(int)>
c001465c:	83 c4 10             	add    esp,0x10
c001465f:	31 d2                	xor    edx,edx
c0014661:	89 c1                	mov    ecx,eax
c0014663:	b8 02 00 00 00       	mov    eax,0x2
c0014668:	85 c9                	test   ecx,ecx
c001466a:	74 16                	je     c0014682 <SysTruncate(regs*)+0xf4>
c001466c:	50                   	push   eax
c001466d:	57                   	push   edi
c001466e:	56                   	push   esi
c001466f:	51                   	push   ecx
c0014670:	e8 3f 76 ff ff       	call   c000bcb4 <File::truncate(unsigned long long)>
c0014675:	83 c4 10             	add    esp,0x10
c0014678:	85 c0                	test   eax,eax
c001467a:	0f 95 c0             	setne  al
c001467d:	0f b6 c0             	movzx  eax,al
c0014680:	31 d2                	xor    edx,edx
c0014682:	83 c4 0c             	add    esp,0xc
c0014685:	5b                   	pop    ebx
c0014686:	5e                   	pop    esi
c0014687:	5f                   	pop    edi
c0014688:	5d                   	pop    ebp
c0014689:	c3                   	ret    

c001468a <SysWrite(regs*)>:
c001468a:	57                   	push   edi
c001468b:	56                   	push   esi
c001468c:	53                   	push   ebx
c001468d:	83 ec 10             	sub    esp,0x10
c0014690:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014694:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014697:	83 f8 02             	cmp    eax,0x2
c001469a:	77 10                	ja     c00146ac <SysWrite(regs*)+0x22>
c001469c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146a4:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00146aa:	eb 0e                	jmp    c00146ba <SysWrite(regs*)+0x30>
c00146ac:	83 ec 0c             	sub    esp,0xc
c00146af:	50                   	push   eax
c00146b0:	e8 46 4e ff ff       	call   c00094fb <KeGetFileFromDescriptor(int)>
c00146b5:	83 c4 10             	add    esp,0x10
c00146b8:	89 c1                	mov    ecx,eax
c00146ba:	83 c8 ff             	or     eax,0xffffffff
c00146bd:	85 c9                	test   ecx,ecx
c00146bf:	89 c2                	mov    edx,eax
c00146c1:	74 28                	je     c00146eb <SysWrite(regs*)+0x61>
c00146c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146cb:	83 ec 0c             	sub    esp,0xc
c00146ce:	31 ff                	xor    edi,edi
c00146d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00146d4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00146d6:	52                   	push   edx
c00146d7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00146da:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00146dd:	57                   	push   edi
c00146de:	56                   	push   esi
c00146df:	51                   	push   ecx
c00146e0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00146e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00146e7:	83 c4 20             	add    esp,0x20
c00146ea:	99                   	cdq    
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	5b                   	pop    ebx
c00146ef:	5e                   	pop    esi
c00146f0:	5f                   	pop    edi
c00146f1:	c3                   	ret    

c00146f2 <SysWsbe(regs*)>:
c00146f2:	57                   	push   edi
c00146f3:	b9 0b 00 00 00       	mov    ecx,0xb
c00146f8:	56                   	push   esi
c00146f9:	be dd 28 02 c0       	mov    esi,0xc00228dd
c00146fe:	53                   	push   ebx
c00146ff:	83 ec 30             	sub    esp,0x30
c0014702:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014706:	fc                   	cld    
c0014707:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014709:	83 ec 0c             	sub    esp,0xc
c001470c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014710:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014715:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014718:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001471e:	8b 06                	mov    eax,DWORD PTR [esi]
c0014720:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014723:	57                   	push   edi
c0014724:	e8 57 be fe ff       	call   c0000580 <strlen>
c0014729:	5a                   	pop    edx
c001472a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001472e:	52                   	push   edx
c001472f:	31 d2                	xor    edx,edx
c0014731:	57                   	push   edi
c0014732:	52                   	push   edx
c0014733:	50                   	push   eax
c0014734:	56                   	push   esi
c0014735:	ff d3                	call   ebx
c0014737:	83 c4 14             	add    esp,0x14
c001473a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001473e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014741:	e8 a6 23 00 00       	call   c0016aec <terminateTask(int)>
c0014746:	83 c4 40             	add    esp,0x40
c0014749:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001474e:	5b                   	pop    ebx
c001474f:	31 d2                	xor    edx,edx
c0014751:	5e                   	pop    esi
c0014752:	5f                   	pop    edi
c0014753:	c3                   	ret    

c0014754 <SysYield(regs*)>:
c0014754:	83 ec 0c             	sub    esp,0xc
c0014757:	fa                   	cli    
c0014758:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001475e:	e8 09 1a 00 00       	call   c001616c <schedule()>
c0014763:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014768:	48                   	dec    eax
c0014769:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001476e:	75 01                	jne    c0014771 <SysYield(regs*)+0x1d>
c0014770:	fb                   	sti    
c0014771:	31 c0                	xor    eax,eax
c0014773:	31 d2                	xor    edx,edx
c0014775:	83 c4 0c             	add    esp,0xc
c0014778:	c3                   	ret    

c0014779 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014779:	55                   	push   ebp
c001477a:	57                   	push   edi
c001477b:	56                   	push   esi
c001477c:	53                   	push   ebx
c001477d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014783:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001478e:	74 3b                	je     c00147cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014790:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014798:	74 31                	je     c00147cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001479a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00147a2:	75 27                	jne    c00147cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00147a4:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00147ab:	05 00 10 00 00       	add    eax,0x1000
c00147b0:	89 c2                	mov    edx,eax
c00147b2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147b7:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00147be:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00147c4:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00147cb:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00147d2:	83 ec 0c             	sub    esp,0xc
c00147d5:	6a 01                	push   0x1
c00147d7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00147dd:	e8 73 4e ff ff       	call   c0009655 <Virt::allocateKernelVirtualPages(int)>
c00147e2:	83 c4 10             	add    esp,0x10
c00147e5:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00147eb:	89 c3                	mov    ebx,eax
c00147ed:	0f 86 26 01 00 00    	jbe    c0014919 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00147f3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00147fb:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014802:	c1 ee 0c             	shr    esi,0xc
c0014805:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014809:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014810:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014817:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001481b:	29 ef                	sub    edi,ebp
c001481d:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0014821:	0f 83 f9 00 00 00    	jae    c0014920 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014827:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001482d:	b8 00 10 00 00       	mov    eax,0x1000
c0014832:	0f 47 f8             	cmova  edi,eax
c0014835:	83 ec 0c             	sub    esp,0xc
c0014838:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001483f:	31 d2                	xor    edx,edx
c0014841:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014843:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014847:	50                   	push   eax
c0014848:	8d 74 24 30          	lea    esi,[esp+0x30]
c001484c:	56                   	push   esi
c001484d:	52                   	push   edx
c001484e:	57                   	push   edi
c001484f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014856:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014859:	83 c4 20             	add    esp,0x20
c001485c:	85 c0                	test   eax,eax
c001485e:	75 06                	jne    c0014866 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014860:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014864:	74 13                	je     c0014879 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0014866:	83 ec 0c             	sub    esp,0xc
c0014869:	53                   	push   ebx
c001486a:	e8 fa 50 ff ff       	call   c0009969 <Virt::freeKernelVirtualPages(unsigned long)>
c001486f:	83 c4 10             	add    esp,0x10
c0014872:	31 c0                	xor    eax,eax
c0014874:	e9 7c 01 00 00       	jmp    c00149f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0014879:	fa                   	cli    
c001487a:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014880:	e8 bd 35 ff ff       	call   c0007e42 <Phys::allocatePage()>
c0014885:	6a 07                	push   0x7
c0014887:	53                   	push   ebx
c0014888:	50                   	push   eax
c0014889:	89 c7                	mov    edi,eax
c001488b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014890:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014893:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014899:	e8 c0 54 ff ff       	call   c0009d5e <VAS::mapPage(unsigned long, unsigned long, int)>
c001489e:	83 c4 0c             	add    esp,0xc
c00148a1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00148a8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148ae:	6a 00                	push   0x0
c00148b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148b8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148be:	e8 01 53 ff ff       	call   c0009bc4 <VAS::mapOtherVASIn(bool, VAS*)>
c00148c3:	58                   	pop    eax
c00148c4:	5a                   	pop    edx
c00148c5:	68 07 0c 00 00       	push   0xc07
c00148ca:	55                   	push   ebp
c00148cb:	57                   	push   edi
c00148cc:	89 df                	mov    edi,ebx
c00148ce:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00148d5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148db:	6a 00                	push   0x0
c00148dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148e5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148eb:	e8 d2 56 ff ff       	call   c0009fc2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00148f0:	b9 00 10 00 00       	mov    ecx,0x1000
c00148f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148f7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00148fc:	83 c4 20             	add    esp,0x20
c00148ff:	48                   	dec    eax
c0014900:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014905:	85 c0                	test   eax,eax
c0014907:	75 01                	jne    c001490a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0014909:	fb                   	sti    
c001490a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001490e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014914:	e9 f0 fe ff ff       	jmp    c0014809 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0014919:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014920:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014927:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001492d:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014933:	0f 86 ae 00 00 00    	jbe    c00149e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014939:	fa                   	cli    
c001493a:	51                   	push   ecx
c001493b:	31 ff                	xor    edi,edi
c001493d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014944:	c1 ee 0c             	shr    esi,0xc
c0014947:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001494d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014953:	6a 00                	push   0x0
c0014955:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001495a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001495d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014963:	e8 5c 52 ff ff       	call   c0009bc4 <VAS::mapOtherVASIn(bool, VAS*)>
c0014968:	83 c4 10             	add    esp,0x10
c001496b:	e8 d2 34 ff ff       	call   c0007e42 <Phys::allocatePage()>
c0014970:	47                   	inc    edi
c0014971:	6a 07                	push   0x7
c0014973:	53                   	push   ebx
c0014974:	50                   	push   eax
c0014975:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014979:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001497f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014982:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014988:	e8 d1 53 ff ff       	call   c0009d5e <VAS::mapPage(unsigned long, unsigned long, int)>
c001498d:	58                   	pop    eax
c001498e:	5a                   	pop    edx
c001498f:	68 07 0c 00 00       	push   0xc07
c0014994:	55                   	push   ebp
c0014995:	81 c5 00 10 00 00    	add    ebp,0x1000
c001499b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001499f:	50                   	push   eax
c00149a0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00149a7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149ad:	6a 00                	push   0x0
c00149af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00149b7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149bd:	e8 00 56 ff ff       	call   c0009fc2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00149c2:	83 c4 1c             	add    esp,0x1c
c00149c5:	68 00 10 00 00       	push   0x1000
c00149ca:	6a 00                	push   0x0
c00149cc:	53                   	push   ebx
c00149cd:	e8 1e bb fe ff       	call   c00004f0 <memset>
c00149d2:	83 c4 10             	add    esp,0x10
c00149d5:	39 fe                	cmp    esi,edi
c00149d7:	77 92                	ja     c001496b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00149d9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00149de:	48                   	dec    eax
c00149df:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00149e4:	75 01                	jne    c00149e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00149e6:	fb                   	sti    
c00149e7:	83 ec 0c             	sub    esp,0xc
c00149ea:	53                   	push   ebx
c00149eb:	e8 79 4f ff ff       	call   c0009969 <Virt::freeKernelVirtualPages(unsigned long)>
c00149f0:	83 c4 10             	add    esp,0x10
c00149f3:	b0 01                	mov    al,0x1
c00149f5:	81 c4 2c 10 00 00    	add    esp,0x102c
c00149fb:	5b                   	pop    ebx
c00149fc:	5e                   	pop    esi
c00149fd:	5f                   	pop    edi
c00149fe:	5d                   	pop    ebp
c00149ff:	c3                   	ret    

c0014a00 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014a00:	55                   	push   ebp
c0014a01:	57                   	push   edi
c0014a02:	56                   	push   esi
c0014a03:	53                   	push   ebx
c0014a04:	83 ec 48             	sub    esp,0x48
c0014a07:	68 14 01 00 00       	push   0x114
c0014a0c:	e8 22 31 ff ff       	call   c0007b33 <malloc>
c0014a11:	83 c4 0c             	add    esp,0xc
c0014a14:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014a18:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014a1c:	89 c7                	mov    edi,eax
c0014a1e:	50                   	push   eax
c0014a1f:	e8 5e 71 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0014a24:	58                   	pop    eax
c0014a25:	5a                   	pop    edx
c0014a26:	6a 01                	push   0x1
c0014a28:	57                   	push   edi
c0014a29:	e8 72 71 ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0014a2e:	83 c4 10             	add    esp,0x10
c0014a31:	85 c0                	test   eax,eax
c0014a33:	0f 85 4c 01 00 00    	jne    c0014b85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a39:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014a41:	83 ec 0c             	sub    esp,0xc
c0014a44:	6a 34                	push   0x34
c0014a46:	e8 e8 30 ff ff       	call   c0007b33 <malloc>
c0014a4b:	89 c3                	mov    ebx,eax
c0014a4d:	58                   	pop    eax
c0014a4e:	8b 07                	mov    eax,DWORD PTR [edi]
c0014a50:	8d 74 24 38          	lea    esi,[esp+0x38]
c0014a54:	56                   	push   esi
c0014a55:	53                   	push   ebx
c0014a56:	6a 00                	push   0x0
c0014a58:	6a 34                	push   0x34
c0014a5a:	57                   	push   edi
c0014a5b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a5e:	83 c4 20             	add    esp,0x20
c0014a61:	85 c0                	test   eax,eax
c0014a63:	0f 85 1c 01 00 00    	jne    c0014b85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a69:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014a6f:	0f 85 10 01 00 00    	jne    c0014b85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a75:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a78:	85 c0                	test   eax,eax
c0014a7a:	0f 84 05 01 00 00    	je     c0014b85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a80:	31 d2                	xor    edx,edx
c0014a82:	55                   	push   ebp
c0014a83:	52                   	push   edx
c0014a84:	50                   	push   eax
c0014a85:	57                   	push   edi
c0014a86:	e8 d3 71 ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014a8b:	83 c4 10             	add    esp,0x10
c0014a8e:	85 c0                	test   eax,eax
c0014a90:	0f 85 ef 00 00 00    	jne    c0014b85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a96:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014a99:	83 ec 0c             	sub    esp,0xc
c0014a9c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014aa0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014aa4:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014aa8:	0f af c2             	imul   eax,edx
c0014aab:	50                   	push   eax
c0014aac:	e8 82 30 ff ff       	call   c0007b33 <malloc>
c0014ab1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014ab3:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ab6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014aba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014abe:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014ac2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014ac6:	0f af c2             	imul   eax,edx
c0014ac9:	99                   	cdq    
c0014aca:	52                   	push   edx
c0014acb:	50                   	push   eax
c0014acc:	57                   	push   edi
c0014acd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ad0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014ad3:	83 c4 20             	add    esp,0x20
c0014ad6:	85 c0                	test   eax,eax
c0014ad8:	0f 84 a7 00 00 00    	je     c0014b85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014ade:	31 d2                	xor    edx,edx
c0014ae0:	51                   	push   ecx
c0014ae1:	52                   	push   edx
c0014ae2:	50                   	push   eax
c0014ae3:	57                   	push   edi
c0014ae4:	e8 75 71 ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014ae9:	83 c4 10             	add    esp,0x10
c0014aec:	85 c0                	test   eax,eax
c0014aee:	0f 85 91 00 00 00    	jne    c0014b85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014af4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014af8:	83 ec 0c             	sub    esp,0xc
c0014afb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014aff:	0f af c2             	imul   eax,edx
c0014b02:	50                   	push   eax
c0014b03:	e8 2b 30 ff ff       	call   c0007b33 <malloc>
c0014b08:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014b0a:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b0d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014b11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b15:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b19:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b1d:	0f af c2             	imul   eax,edx
c0014b20:	99                   	cdq    
c0014b21:	52                   	push   edx
c0014b22:	50                   	push   eax
c0014b23:	57                   	push   edi
c0014b24:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b27:	83 c4 20             	add    esp,0x20
c0014b2a:	31 c9                	xor    ecx,ecx
c0014b2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b34:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014b38:	0f b7 e9             	movzx  ebp,cx
c0014b3b:	0f 83 86 00 00 00    	jae    c0014bc7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014b41:	c1 e5 05             	shl    ebp,0x5
c0014b44:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014b48:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014b4c:	75 73                	jne    c0014bc1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014b4e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014b52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b55:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014b58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b5c:	52                   	push   edx
c0014b5d:	31 d2                	xor    edx,edx
c0014b5f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014b62:	52                   	push   edx
c0014b63:	50                   	push   eax
c0014b64:	57                   	push   edi
c0014b65:	e8 f4 70 ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014b6a:	83 c4 10             	add    esp,0x10
c0014b6d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014b71:	85 c0                	test   eax,eax
c0014b73:	74 17                	je     c0014b8c <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014b75:	83 ec 0c             	sub    esp,0xc
c0014b78:	68 09 29 02 c0       	push   0xc0022909
c0014b7d:	e8 e8 5d ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0014b82:	83 c4 10             	add    esp,0x10
c0014b85:	31 c0                	xor    eax,eax
c0014b87:	e9 8b 00 00 00       	jmp    c0014c17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014b90:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014b93:	83 ec 0c             	sub    esp,0xc
c0014b96:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014b99:	50                   	push   eax
c0014b9a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014b9e:	56                   	push   esi
c0014b9f:	57                   	push   edi
c0014ba0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014ba4:	e8 d0 fb ff ff       	call   c0014779 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014ba9:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014bad:	83 c4 20             	add    esp,0x20
c0014bb0:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014bb4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014bb8:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014bbd:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014bc1:	41                   	inc    ecx
c0014bc2:	e9 6d ff ff ff       	jmp    c0014b34 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014bc7:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014bcb:	83 ec 0c             	sub    esp,0xc
c0014bce:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014bd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bd6:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014bdc:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014be2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014be7:	05 00 10 00 00       	add    eax,0x1000
c0014bec:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014bef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bf3:	e8 4b 2f ff ff       	call   c0007b43 <free>
c0014bf8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bfb:	e8 43 2f ff ff       	call   c0007b43 <free>
c0014c00:	58                   	pop    eax
c0014c01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c05:	e8 39 2f ff ff       	call   c0007b43 <free>
c0014c0a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014c0d:	e8 ec 6f ff ff       	call   c000bbfe <File::close()>
c0014c12:	83 c4 10             	add    esp,0x10
c0014c15:	b0 01                	mov    al,0x1
c0014c17:	83 c4 3c             	add    esp,0x3c
c0014c1a:	5b                   	pop    ebx
c0014c1b:	5e                   	pop    esi
c0014c1c:	5f                   	pop    edi
c0014c1d:	5d                   	pop    ebp
c0014c1e:	c3                   	ret    

c0014c1f <Thr::runtimeReferenceHelper()>:
c0014c1f:	83 ec 18             	sub    esp,0x18
c0014c22:	68 11 29 02 c0       	push   0xc0022911
c0014c27:	e8 3e 5d ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0014c2c:	fa                   	cli    
c0014c2d:	83 c4 10             	add    esp,0x10
c0014c30:	eb fe                	jmp    c0014c30 <Thr::runtimeReferenceHelper()+0x11>

c0014c32 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014c32:	57                   	push   edi
c0014c33:	56                   	push   esi
c0014c34:	53                   	push   ebx
c0014c35:	31 db                	xor    ebx,ebx
c0014c37:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014c3d:	7e 3c                	jle    c0014c7b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014c3f:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014c46:	31 ff                	xor    edi,edi
c0014c48:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014c4f:	7e 27                	jle    c0014c78 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014c51:	50                   	push   eax
c0014c52:	50                   	push   eax
c0014c53:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c57:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c59:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014c60:	50                   	push   eax
c0014c61:	e8 1a bb fe ff       	call   c0000780 <strcmp>
c0014c66:	83 c4 10             	add    esp,0x10
c0014c69:	85 c0                	test   eax,eax
c0014c6b:	75 05                	jne    c0014c72 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014c6d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c70:	eb 0b                	jmp    c0014c7d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014c72:	83 c6 10             	add    esi,0x10
c0014c75:	47                   	inc    edi
c0014c76:	eb d0                	jmp    c0014c48 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014c78:	43                   	inc    ebx
c0014c79:	eb bc                	jmp    c0014c37 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014c7b:	31 c0                	xor    eax,eax
c0014c7d:	5b                   	pop    ebx
c0014c7e:	5e                   	pop    esi
c0014c7f:	5f                   	pop    edi
c0014c80:	c3                   	ret    

c0014c81 <Thr::loadKernelSymbolTable(char const*)>:
c0014c81:	55                   	push   ebp
c0014c82:	57                   	push   edi
c0014c83:	56                   	push   esi
c0014c84:	53                   	push   ebx
c0014c85:	83 ec 68             	sub    esp,0x68
c0014c88:	68 14 01 00 00       	push   0x114
c0014c8d:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014c93:	e8 9b 2e ff ff       	call   c0007b33 <malloc>
c0014c98:	83 c4 0c             	add    esp,0xc
c0014c9b:	56                   	push   esi
c0014c9c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014ca0:	89 c3                	mov    ebx,eax
c0014ca2:	50                   	push   eax
c0014ca3:	e8 da 6e ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0014ca8:	5e                   	pop    esi
c0014ca9:	5f                   	pop    edi
c0014caa:	6a 01                	push   0x1
c0014cac:	53                   	push   ebx
c0014cad:	e8 ee 6e ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0014cb2:	83 c4 10             	add    esp,0x10
c0014cb5:	85 c0                	test   eax,eax
c0014cb7:	74 0a                	je     c0014cc3 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014cb9:	83 ec 0c             	sub    esp,0xc
c0014cbc:	68 33 29 02 c0       	push   0xc0022933
c0014cc1:	eb 34                	jmp    c0014cf7 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014cc3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014ccb:	83 ec 0c             	sub    esp,0xc
c0014cce:	6a 34                	push   0x34
c0014cd0:	e8 5e 2e ff ff       	call   c0007b33 <malloc>
c0014cd5:	59                   	pop    ecx
c0014cd6:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014cda:	89 c7                	mov    edi,eax
c0014cdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014cde:	56                   	push   esi
c0014cdf:	57                   	push   edi
c0014ce0:	6a 00                	push   0x0
c0014ce2:	6a 34                	push   0x34
c0014ce4:	53                   	push   ebx
c0014ce5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ce8:	83 c4 20             	add    esp,0x20
c0014ceb:	85 c0                	test   eax,eax
c0014ced:	74 17                	je     c0014d06 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014cef:	83 ec 0c             	sub    esp,0xc
c0014cf2:	68 4a 29 02 c0       	push   0xc002294a
c0014cf7:	e8 43 c9 ff ff       	call   c001163f <KePanic(char const*)>
c0014cfc:	83 c4 10             	add    esp,0x10
c0014cff:	31 c0                	xor    eax,eax
c0014d01:	e9 31 02 00 00       	jmp    c0014f37 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014d06:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014d0c:	75 e1                	jne    c0014cef <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d0e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014d11:	85 c0                	test   eax,eax
c0014d13:	74 da                	je     c0014cef <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d15:	52                   	push   edx
c0014d16:	31 d2                	xor    edx,edx
c0014d18:	52                   	push   edx
c0014d19:	50                   	push   eax
c0014d1a:	53                   	push   ebx
c0014d1b:	e8 3e 6f ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014d20:	83 c4 10             	add    esp,0x10
c0014d23:	85 c0                	test   eax,eax
c0014d25:	75 c8                	jne    c0014cef <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d27:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d2b:	83 ec 0c             	sub    esp,0xc
c0014d2e:	31 ed                	xor    ebp,ebp
c0014d30:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d34:	0f af c2             	imul   eax,edx
c0014d37:	50                   	push   eax
c0014d38:	e8 f6 2d ff ff       	call   c0007b33 <malloc>
c0014d3d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d3f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d4a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d4e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d52:	0f af c2             	imul   eax,edx
c0014d55:	99                   	cdq    
c0014d56:	52                   	push   edx
c0014d57:	50                   	push   eax
c0014d58:	53                   	push   ebx
c0014d59:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d5c:	83 c4 20             	add    esp,0x20
c0014d5f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d6f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014d77:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d7f:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014d83:	0f b7 f5             	movzx  esi,bp
c0014d86:	0f 83 a7 00 00 00    	jae    c0014e33 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014d8c:	6b f6 28             	imul   esi,esi,0x28
c0014d8f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014d93:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014d96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d9a:	50                   	push   eax
c0014d9b:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014d9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014da3:	8b 16                	mov    edx,DWORD PTR [esi]
c0014da5:	6b c0 28             	imul   eax,eax,0x28
c0014da8:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014dac:	89 d0                	mov    eax,edx
c0014dae:	31 d2                	xor    edx,edx
c0014db0:	52                   	push   edx
c0014db1:	50                   	push   eax
c0014db2:	53                   	push   ebx
c0014db3:	e8 a6 6e ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014db8:	83 c4 0c             	add    esp,0xc
c0014dbb:	6a 20                	push   0x20
c0014dbd:	6a 00                	push   0x0
c0014dbf:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014dc3:	52                   	push   edx
c0014dc4:	e8 27 b7 fe ff       	call   c00004f0 <memset>
c0014dc9:	58                   	pop    eax
c0014dca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dcc:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014dd0:	51                   	push   ecx
c0014dd1:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014dd5:	52                   	push   edx
c0014dd6:	6a 00                	push   0x0
c0014dd8:	6a 1f                	push   0x1f
c0014dda:	53                   	push   ebx
c0014ddb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014dde:	83 c4 18             	add    esp,0x18
c0014de1:	68 61 29 02 c0       	push   0xc0022961
c0014de6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014dea:	52                   	push   edx
c0014deb:	e8 90 b9 fe ff       	call   c0000780 <strcmp>
c0014df0:	83 c4 10             	add    esp,0x10
c0014df3:	85 c0                	test   eax,eax
c0014df5:	75 0f                	jne    c0014e06 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014df7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014dfa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014dfe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e06:	50                   	push   eax
c0014e07:	50                   	push   eax
c0014e08:	68 69 29 02 c0       	push   0xc0022969
c0014e0d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014e11:	50                   	push   eax
c0014e12:	e8 69 b9 fe ff       	call   c0000780 <strcmp>
c0014e17:	83 c4 10             	add    esp,0x10
c0014e1a:	85 c0                	test   eax,eax
c0014e1c:	75 0f                	jne    c0014e2d <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014e1e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e21:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e2d:	45                   	inc    ebp
c0014e2e:	e9 4c ff ff ff       	jmp    c0014d7f <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014e33:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014e38:	75 10                	jne    c0014e4a <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014e3a:	83 ec 0c             	sub    esp,0xc
c0014e3d:	68 71 29 02 c0       	push   0xc0022971
c0014e42:	e8 f8 c7 ff ff       	call   c001163f <KePanic(char const*)>
c0014e47:	83 c4 10             	add    esp,0x10
c0014e4a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014e4f:	75 10                	jne    c0014e61 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014e51:	83 ec 0c             	sub    esp,0xc
c0014e54:	68 71 29 02 c0       	push   0xc0022971
c0014e59:	e8 e1 c7 ff ff       	call   c001163f <KePanic(char const*)>
c0014e5e:	83 c4 10             	add    esp,0x10
c0014e61:	50                   	push   eax
c0014e62:	31 d2                	xor    edx,edx
c0014e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e68:	52                   	push   edx
c0014e69:	50                   	push   eax
c0014e6a:	53                   	push   ebx
c0014e6b:	e8 ee 6d ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014e70:	5a                   	pop    edx
c0014e71:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e75:	e8 b9 2c ff ff       	call   c0007b33 <malloc>
c0014e7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e7e:	31 c9                	xor    ecx,ecx
c0014e80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e86:	5e                   	pop    esi
c0014e87:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014e8b:	55                   	push   ebp
c0014e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e90:	51                   	push   ecx
c0014e91:	52                   	push   edx
c0014e92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014e96:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014e9a:	53                   	push   ebx
c0014e9b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e9e:	83 c4 14             	add    esp,0x14
c0014ea1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ea5:	e8 89 2c ff ff       	call   c0007b33 <malloc>
c0014eaa:	89 c6                	mov    esi,eax
c0014eac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014eae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014eb1:	56                   	push   esi
c0014eb2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014eb6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014eba:	51                   	push   ecx
c0014ebb:	52                   	push   edx
c0014ebc:	53                   	push   ebx
c0014ebd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ec0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014ec4:	83 c4 1c             	add    esp,0x1c
c0014ec7:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014ecd:	c1 e8 04             	shr    eax,0x4
c0014ed0:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014ed7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014edb:	31 d2                	xor    edx,edx
c0014edd:	52                   	push   edx
c0014ede:	50                   	push   eax
c0014edf:	53                   	push   ebx
c0014ee0:	e8 79 6d ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014ee5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ee7:	31 d2                	xor    edx,edx
c0014ee9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014eec:	56                   	push   esi
c0014eed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014ef1:	52                   	push   edx
c0014ef2:	50                   	push   eax
c0014ef3:	53                   	push   ebx
c0014ef4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ef7:	83 c4 14             	add    esp,0x14
c0014efa:	53                   	push   ebx
c0014efb:	e8 fe 6c ff ff       	call   c000bbfe <File::close()>
c0014f00:	5d                   	pop    ebp
c0014f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f05:	e8 39 2c ff ff       	call   c0007b43 <free>
c0014f0a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f0d:	e8 31 2c ff ff       	call   c0007b43 <free>
c0014f12:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014f17:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014f1b:	83 c4 10             	add    esp,0x10
c0014f1e:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014f25:	8d 50 01             	lea    edx,[eax+0x1]
c0014f28:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014f2f:	b0 01                	mov    al,0x1
c0014f31:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014f37:	83 c4 5c             	add    esp,0x5c
c0014f3a:	5b                   	pop    ebx
c0014f3b:	5e                   	pop    esi
c0014f3c:	5f                   	pop    edi
c0014f3d:	5d                   	pop    ebp
c0014f3e:	c3                   	ret    

c0014f3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014f3f:	55                   	push   ebp
c0014f40:	57                   	push   edi
c0014f41:	56                   	push   esi
c0014f42:	53                   	push   ebx
c0014f43:	81 ec 68 03 00 00    	sub    esp,0x368
c0014f49:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014f50:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014f56:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014f5a:	68 14 01 00 00       	push   0x114
c0014f5f:	e8 cf 2b ff ff       	call   c0007b33 <malloc>
c0014f64:	83 c4 0c             	add    esp,0xc
c0014f67:	56                   	push   esi
c0014f68:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014f6f:	50                   	push   eax
c0014f70:	89 c3                	mov    ebx,eax
c0014f72:	e8 0b 6c ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0014f77:	5f                   	pop    edi
c0014f78:	5d                   	pop    ebp
c0014f79:	6a 01                	push   0x1
c0014f7b:	53                   	push   ebx
c0014f7c:	e8 1f 6c ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0014f81:	83 c4 10             	add    esp,0x10
c0014f84:	85 c0                	test   eax,eax
c0014f86:	0f 85 b3 06 00 00    	jne    c001563f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f8c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014f94:	83 ec 0c             	sub    esp,0xc
c0014f97:	6a 34                	push   0x34
c0014f99:	e8 95 2b ff ff       	call   c0007b33 <malloc>
c0014f9e:	5e                   	pop    esi
c0014f9f:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014fa3:	89 c5                	mov    ebp,eax
c0014fa5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014fa7:	56                   	push   esi
c0014fa8:	55                   	push   ebp
c0014fa9:	6a 00                	push   0x0
c0014fab:	6a 34                	push   0x34
c0014fad:	53                   	push   ebx
c0014fae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014fb1:	83 c4 20             	add    esp,0x20
c0014fb4:	85 c0                	test   eax,eax
c0014fb6:	0f 85 83 06 00 00    	jne    c001563f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fbc:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014fc3:	0f 85 76 06 00 00    	jne    c001563f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fc9:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014fcc:	85 c0                	test   eax,eax
c0014fce:	0f 84 6b 06 00 00    	je     c001563f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fd4:	31 d2                	xor    edx,edx
c0014fd6:	51                   	push   ecx
c0014fd7:	52                   	push   edx
c0014fd8:	50                   	push   eax
c0014fd9:	53                   	push   ebx
c0014fda:	e8 7f 6c ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014fdf:	83 c4 10             	add    esp,0x10
c0014fe2:	85 c0                	test   eax,eax
c0014fe4:	0f 85 55 06 00 00    	jne    c001563f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fea:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014fed:	83 ec 0c             	sub    esp,0xc
c0014ff0:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014ff4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014ff8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014ffc:	0f af c2             	imul   eax,edx
c0014fff:	50                   	push   eax
c0015000:	e8 2e 2b ff ff       	call   c0007b33 <malloc>
c0015005:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015007:	89 34 24             	mov    DWORD PTR [esp],esi
c001500a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001500e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015012:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0015016:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001501a:	0f af c2             	imul   eax,edx
c001501d:	99                   	cdq    
c001501e:	52                   	push   edx
c001501f:	50                   	push   eax
c0015020:	53                   	push   ebx
c0015021:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015024:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0015027:	83 c4 20             	add    esp,0x20
c001502a:	85 c0                	test   eax,eax
c001502c:	0f 84 0d 06 00 00    	je     c001563f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015032:	52                   	push   edx
c0015033:	31 d2                	xor    edx,edx
c0015035:	52                   	push   edx
c0015036:	50                   	push   eax
c0015037:	53                   	push   ebx
c0015038:	e8 21 6c ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c001503d:	83 c4 10             	add    esp,0x10
c0015040:	85 c0                	test   eax,eax
c0015042:	0f 85 f7 05 00 00    	jne    c001563f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015048:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001504c:	83 ec 0c             	sub    esp,0xc
c001504f:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015053:	0f af c2             	imul   eax,edx
c0015056:	50                   	push   eax
c0015057:	e8 d7 2a ff ff       	call   c0007b33 <malloc>
c001505c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001505e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015061:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015065:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015069:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001506d:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015071:	0f af c2             	imul   eax,edx
c0015074:	99                   	cdq    
c0015075:	52                   	push   edx
c0015076:	50                   	push   eax
c0015077:	53                   	push   ebx
c0015078:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001507b:	83 c4 20             	add    esp,0x20
c001507e:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0015084:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015087:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c001508b:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c001508f:	73 78                	jae    c0015109 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0015091:	c1 e7 05             	shl    edi,0x5
c0015094:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0015098:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001509b:	75 63                	jne    c0015100 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c001509d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00150a0:	31 d2                	xor    edx,edx
c00150a2:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c00150a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150a9:	50                   	push   eax
c00150aa:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00150ad:	52                   	push   edx
c00150ae:	50                   	push   eax
c00150af:	53                   	push   ebx
c00150b0:	e8 a9 6b ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c00150b5:	83 c4 10             	add    esp,0x10
c00150b8:	85 c0                	test   eax,eax
c00150ba:	0f 85 7f 05 00 00    	jne    c001563f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00150c0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00150c7:	83 ec 0c             	sub    esp,0xc
c00150ca:	31 d2                	xor    edx,edx
c00150cc:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00150d0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00150d2:	01 c6                	add    esi,eax
c00150d4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150db:	50                   	push   eax
c00150dc:	56                   	push   esi
c00150dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150e1:	52                   	push   edx
c00150e2:	50                   	push   eax
c00150e3:	53                   	push   ebx
c00150e4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00150e7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00150ea:	83 c4 1c             	add    esp,0x1c
c00150ed:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00150f0:	50                   	push   eax
c00150f1:	6a 00                	push   0x0
c00150f3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00150f7:	56                   	push   esi
c00150f8:	e8 f3 b3 fe ff       	call   c00004f0 <memset>
c00150fd:	83 c4 10             	add    esp,0x10
c0015100:	66 ff 04 24          	inc    WORD PTR [esp]
c0015104:	e9 7b ff ff ff       	jmp    c0015084 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0015109:	50                   	push   eax
c001510a:	68 00 01 00 00       	push   0x100
c001510f:	6a 00                	push   0x0
c0015111:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015115:	50                   	push   eax
c0015116:	e8 d5 b3 fe ff       	call   c00004f0 <memset>
c001511b:	83 c4 0c             	add    esp,0xc
c001511e:	68 00 01 00 00       	push   0x100
c0015123:	6a 00                	push   0x0
c0015125:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001512c:	50                   	push   eax
c001512d:	e8 be b3 fe ff       	call   c00004f0 <memset>
c0015132:	83 c4 10             	add    esp,0x10
c0015135:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c001513c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015143:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001514b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015153:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001515b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015163:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015167:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c001516b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015170:	0f 83 16 01 00 00    	jae    c001528c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0015176:	6b ff 28             	imul   edi,edi,0x28
c0015179:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c001517d:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015180:	51                   	push   ecx
c0015181:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0015185:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015189:	8b 07                	mov    eax,DWORD PTR [edi]
c001518b:	6b d2 28             	imul   edx,edx,0x28
c001518e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015192:	31 d2                	xor    edx,edx
c0015194:	52                   	push   edx
c0015195:	50                   	push   eax
c0015196:	53                   	push   ebx
c0015197:	e8 c2 6a ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c001519c:	83 c4 0c             	add    esp,0xc
c001519f:	6a 20                	push   0x20
c00151a1:	6a 00                	push   0x0
c00151a3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00151aa:	51                   	push   ecx
c00151ab:	e8 40 b3 fe ff       	call   c00004f0 <memset>
c00151b0:	58                   	pop    eax
c00151b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151b3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00151b7:	52                   	push   edx
c00151b8:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00151bf:	51                   	push   ecx
c00151c0:	6a 00                	push   0x0
c00151c2:	6a 1f                	push   0x1f
c00151c4:	53                   	push   ebx
c00151c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00151c8:	83 c4 1c             	add    esp,0x1c
c00151cb:	6a 09                	push   0x9
c00151cd:	68 8b 29 02 c0       	push   0xc002298b
c00151d2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00151d9:	51                   	push   ecx
c00151da:	e8 a1 b1 fe ff       	call   c0000380 <memcmp>
c00151df:	83 c4 10             	add    esp,0x10
c00151e2:	85 c0                	test   eax,eax
c00151e4:	75 1a                	jne    c0015200 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00151e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00151e9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00151ec:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00151f0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00151f3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00151fa:	89 d0                	mov    eax,edx
c00151fc:	40                   	inc    eax
c00151fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0015200:	52                   	push   edx
c0015201:	6a 09                	push   0x9
c0015203:	68 95 29 02 c0       	push   0xc0022995
c0015208:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001520f:	50                   	push   eax
c0015210:	e8 6b b1 fe ff       	call   c0000380 <memcmp>
c0015215:	83 c4 10             	add    esp,0x10
c0015218:	85 c0                	test   eax,eax
c001521a:	75 1a                	jne    c0015236 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c001521c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001521f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015222:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015226:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015229:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015230:	89 c8                	mov    eax,ecx
c0015232:	40                   	inc    eax
c0015233:	89 04 24             	mov    DWORD PTR [esp],eax
c0015236:	50                   	push   eax
c0015237:	50                   	push   eax
c0015238:	68 61 29 02 c0       	push   0xc0022961
c001523d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015244:	50                   	push   eax
c0015245:	e8 36 b5 fe ff       	call   c0000780 <strcmp>
c001524a:	83 c4 10             	add    esp,0x10
c001524d:	85 c0                	test   eax,eax
c001524f:	75 0b                	jne    c001525c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0015251:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0015255:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015258:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001525c:	50                   	push   eax
c001525d:	50                   	push   eax
c001525e:	68 69 29 02 c0       	push   0xc0022969
c0015263:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001526a:	50                   	push   eax
c001526b:	e8 10 b5 fe ff       	call   c0000780 <strcmp>
c0015270:	83 c4 10             	add    esp,0x10
c0015273:	85 c0                	test   eax,eax
c0015275:	75 0b                	jne    c0015282 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015277:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c001527b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001527e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015282:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015287:	e9 d7 fe ff ff       	jmp    c0015163 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c001528c:	50                   	push   eax
c001528d:	31 d2                	xor    edx,edx
c001528f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015293:	52                   	push   edx
c0015294:	50                   	push   eax
c0015295:	53                   	push   ebx
c0015296:	e8 c3 69 ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c001529b:	58                   	pop    eax
c001529c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152a0:	e8 8e 28 ff ff       	call   c0007b33 <malloc>
c00152a5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00152a7:	31 d2                	xor    edx,edx
c00152a9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00152ad:	58                   	pop    eax
c00152ae:	8d 74 24 54          	lea    esi,[esp+0x54]
c00152b2:	56                   	push   esi
c00152b3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00152b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152bb:	52                   	push   edx
c00152bc:	50                   	push   eax
c00152bd:	53                   	push   ebx
c00152be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152c1:	83 c4 14             	add    esp,0x14
c00152c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152c8:	e8 66 28 ff ff       	call   c0007b33 <malloc>
c00152cd:	31 d2                	xor    edx,edx
c00152cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00152d3:	83 c4 0c             	add    esp,0xc
c00152d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152da:	52                   	push   edx
c00152db:	50                   	push   eax
c00152dc:	53                   	push   ebx
c00152dd:	e8 7c 69 ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c00152e2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00152e4:	31 d2                	xor    edx,edx
c00152e6:	89 34 24             	mov    DWORD PTR [esp],esi
c00152e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00152ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00152f1:	52                   	push   edx
c00152f2:	50                   	push   eax
c00152f3:	53                   	push   ebx
c00152f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152f7:	83 c4 20             	add    esp,0x20
c00152fa:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00152ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015307:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001530b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001530f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0015312:	0f 84 2b 03 00 00    	je     c0015643 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0015318:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c001531f:	31 d2                	xor    edx,edx
c0015321:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015325:	c1 e8 03             	shr    eax,0x3
c0015328:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001532c:	51                   	push   ecx
c001532d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015331:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015335:	52                   	push   edx
c0015336:	50                   	push   eax
c0015337:	53                   	push   ebx
c0015338:	e8 21 69 ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c001533d:	5e                   	pop    esi
c001533e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015342:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015349:	e8 e5 27 ff ff       	call   c0007b33 <malloc>
c001534e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015350:	31 d2                	xor    edx,edx
c0015352:	89 c7                	mov    edi,eax
c0015354:	58                   	pop    eax
c0015355:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015359:	50                   	push   eax
c001535a:	57                   	push   edi
c001535b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001535f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015366:	52                   	push   edx
c0015367:	50                   	push   eax
c0015368:	53                   	push   ebx
c0015369:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001536c:	83 c4 20             	add    esp,0x20
c001536f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015377:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001537b:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c001537f:	0f 8d a5 02 00 00    	jge    c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0015385:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001538a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001538e:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0015391:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015395:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015399:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c001539d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00153a1:	c1 e8 08             	shr    eax,0x8
c00153a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00153a8:	89 c2                	mov    edx,eax
c00153aa:	c1 e2 04             	shl    edx,0x4
c00153ad:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c00153b1:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00153b4:	85 f6                	test   esi,esi
c00153b6:	0f 85 cf 00 00 00    	jne    c001548b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00153bc:	83 ec 0c             	sub    esp,0xc
c00153bf:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00153c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153c7:	03 02                	add    eax,DWORD PTR [edx]
c00153c9:	50                   	push   eax
c00153ca:	e8 63 f8 ff ff       	call   c0014c32 <Thr::getAddressOfKernelSymbol(char const*)>
c00153cf:	83 c4 10             	add    esp,0x10
c00153d2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00153d6:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00153db:	85 c0                	test   eax,eax
c00153dd:	89 c6                	mov    esi,eax
c00153df:	0f 85 a6 00 00 00    	jne    c001548b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00153e5:	83 ec 0c             	sub    esp,0xc
c00153e8:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00153ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153f0:	03 02                	add    eax,DWORD PTR [edx]
c00153f2:	50                   	push   eax
c00153f3:	e8 30 c4 ff ff       	call   c0011828 <KeResolveCompatibilitySymbol(char*)>
c00153f8:	83 c4 10             	add    esp,0x10
c00153fb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00153ff:	85 c0                	test   eax,eax
c0015401:	89 c6                	mov    esi,eax
c0015403:	0f 85 82 00 00 00    	jne    c001548b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015409:	50                   	push   eax
c001540a:	50                   	push   eax
c001540b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001540f:	03 02                	add    eax,DWORD PTR [edx]
c0015411:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015415:	50                   	push   eax
c0015416:	68 9f 29 02 c0       	push   0xc002299f
c001541b:	e8 4a 55 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0015420:	58                   	pop    eax
c0015421:	5a                   	pop    edx
c0015422:	68 b9 29 02 c0       	push   0xc00229b9
c0015427:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001542e:	51                   	push   ecx
c001542f:	e8 1c b2 fe ff       	call   c0000650 <strcpy>
c0015434:	59                   	pop    ecx
c0015435:	58                   	pop    eax
c0015436:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001543a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001543e:	03 02                	add    eax,DWORD PTR [edx]
c0015440:	50                   	push   eax
c0015441:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015448:	51                   	push   ecx
c0015449:	e8 22 b4 fe ff       	call   c0000870 <strcat>
c001544e:	58                   	pop    eax
c001544f:	5a                   	pop    edx
c0015450:	68 4f 2a 02 c0       	push   0xc0022a4f
c0015455:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001545c:	51                   	push   ecx
c001545d:	e8 0e b4 fe ff       	call   c0000870 <strcat>
c0015462:	83 c4 10             	add    esp,0x10
c0015465:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001546a:	0f 84 77 01 00 00    	je     c00155e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015470:	83 ec 0c             	sub    esp,0xc
c0015473:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001547a:	51                   	push   ecx
c001547b:	e8 bf c1 ff ff       	call   c001163f <KePanic(char const*)>
c0015480:	83 c4 10             	add    esp,0x10
c0015483:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015487:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001548b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015490:	83 f8 01             	cmp    eax,0x1
c0015493:	0f 85 9b 00 00 00    	jne    c0015534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0015499:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001549d:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c00154a4:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00154a8:	01 d0                	add    eax,edx
c00154aa:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00154b2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00154b6:	0f 94 c0             	sete   al
c00154b9:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00154c1:	0f 94 c1             	sete   cl
c00154c4:	09 c1                	or     ecx,eax
c00154c6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00154ca:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00154cf:	0f b6 c9             	movzx  ecx,cl
c00154d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d4:	74 41                	je     c0015517 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00154d6:	8d 14 06             	lea    edx,[esi+eax*1]
c00154d9:	85 c9                	test   ecx,ecx
c00154db:	75 15                	jne    c00154f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00154dd:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00154e1:	66 83 f8 0c          	cmp    ax,0xc
c00154e5:	76 05                	jbe    c00154ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00154e7:	b8 0c 00 00 00       	mov    eax,0xc
c00154ec:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00154f0:	76 37                	jbe    c0015529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00154f2:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00154f7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00154fb:	0f 84 e6 00 00 00    	je     c00155e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015501:	83 ec 0c             	sub    esp,0xc
c0015504:	68 d0 29 02 c0       	push   0xc00229d0
c0015509:	e8 31 c1 ff ff       	call   c001163f <KePanic(char const*)>
c001550e:	83 c4 10             	add    esp,0x10
c0015511:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015515:	eb 12                	jmp    c0015529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015517:	01 c2                	add    edx,eax
c0015519:	85 c9                	test   ecx,ecx
c001551b:	75 0c                	jne    c0015529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001551d:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015521:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015525:	77 02                	ja     c0015529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015527:	01 f2                	add    edx,esi
c0015529:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001552d:	89 10                	mov    DWORD PTR [eax],edx
c001552f:	e9 ed 00 00 00       	jmp    c0015621 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015534:	83 f8 02             	cmp    eax,0x2
c0015537:	0f 85 81 00 00 00    	jne    c00155be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001553d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015544:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0015548:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c001554c:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015554:	74 21                	je     c0015577 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015556:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c001555e:	74 17                	je     c0015577 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015560:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0015564:	ba 0a 00 00 00       	mov    edx,0xa
c0015569:	83 f9 0e             	cmp    ecx,0xe
c001556c:	77 03                	ja     c0015571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c001556e:	8d 51 fc             	lea    edx,[ecx-0x4]
c0015571:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0015575:	76 1f                	jbe    c0015596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0015577:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001557c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015580:	74 65                	je     c00155e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015582:	83 ec 0c             	sub    esp,0xc
c0015585:	68 ec 29 02 c0       	push   0xc00229ec
c001558a:	e8 b0 c0 ff ff       	call   c001163f <KePanic(char const*)>
c001558f:	83 c4 10             	add    esp,0x10
c0015592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015596:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001559b:	8b 10                	mov    edx,DWORD PTR [eax]
c001559d:	74 15                	je     c00155b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001559f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00155a3:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00155aa:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00155ae:	01 d1                	add    ecx,edx
c00155b0:	01 ce                	add    esi,ecx
c00155b2:	eb 06                	jmp    c00155ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00155b4:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00155b8:	01 d6                	add    esi,edx
c00155ba:	89 30                	mov    DWORD PTR [eax],esi
c00155bc:	eb 63                	jmp    c0015621 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00155be:	56                   	push   esi
c00155bf:	56                   	push   esi
c00155c0:	50                   	push   eax
c00155c1:	68 08 2a 02 c0       	push   0xc0022a08
c00155c6:	e8 9f 53 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c00155cb:	83 c4 10             	add    esp,0x10
c00155ce:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00155d3:	74 12                	je     c00155e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00155d5:	83 ec 0c             	sub    esp,0xc
c00155d8:	68 13 2a 02 c0       	push   0xc0022a13
c00155dd:	e8 5d c0 ff ff       	call   c001163f <KePanic(char const*)>
c00155e2:	83 c4 10             	add    esp,0x10
c00155e5:	eb 3a                	jmp    c0015621 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00155e7:	83 ec 0c             	sub    esp,0xc
c00155ea:	53                   	push   ebx
c00155eb:	e8 0e 66 ff ff       	call   c000bbfe <File::close()>
c00155f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00155f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00155fb:	e8 43 25 ff ff       	call   c0007b43 <free>
c0015600:	59                   	pop    ecx
c0015601:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015605:	e8 39 25 ff ff       	call   c0007b43 <free>
c001560a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001560d:	e8 31 25 ff ff       	call   c0007b43 <free>
c0015612:	5b                   	pop    ebx
c0015613:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015617:	e8 27 25 ff ff       	call   c0007b43 <free>
c001561c:	83 c4 10             	add    esp,0x10
c001561f:	eb 1e                	jmp    c001563f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015621:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0015625:	e9 4d fd ff ff       	jmp    c0015377 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c001562a:	83 ec 0c             	sub    esp,0xc
c001562d:	57                   	push   edi
c001562e:	e8 10 25 ff ff       	call   c0007b43 <free>
c0015633:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0015637:	83 c4 10             	add    esp,0x10
c001563a:	e9 cc fc ff ff       	jmp    c001530b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c001563f:	31 c0                	xor    eax,eax
c0015641:	eb 32                	jmp    c0015675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0015643:	83 ec 0c             	sub    esp,0xc
c0015646:	53                   	push   ebx
c0015647:	e8 b2 65 ff ff       	call   c000bbfe <File::close()>
c001564c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001564e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015651:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015654:	58                   	pop    eax
c0015655:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015659:	e8 e5 24 ff ff       	call   c0007b43 <free>
c001565e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015661:	e8 dd 24 ff ff       	call   c0007b43 <free>
c0015666:	5a                   	pop    edx
c0015667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001566b:	e8 d3 24 ff ff       	call   c0007b43 <free>
c0015670:	83 c4 10             	add    esp,0x10
c0015673:	b0 01                	mov    al,0x1
c0015675:	81 c4 5c 03 00 00    	add    esp,0x35c
c001567b:	5b                   	pop    ebx
c001567c:	5e                   	pop    esi
c001567d:	5f                   	pop    edi
c001567e:	5d                   	pop    ebp
c001567f:	c3                   	ret    

c0015680 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015680:	56                   	push   esi
c0015681:	31 d2                	xor    edx,edx
c0015683:	53                   	push   ebx
c0015684:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001568a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001568e:	39 d3                	cmp    ebx,edx
c0015690:	7e 1b                	jle    c00156ad <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015692:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c0015699:	39 c8                	cmp    eax,ecx
c001569b:	77 0d                	ja     c00156aa <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001569d:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c00156a4:	01 c6                	add    esi,eax
c00156a6:	39 ce                	cmp    esi,ecx
c00156a8:	77 05                	ja     c00156af <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00156aa:	42                   	inc    edx
c00156ab:	eb e1                	jmp    c001568e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00156ad:	31 c0                	xor    eax,eax
c00156af:	5b                   	pop    ebx
c00156b0:	5e                   	pop    esi
c00156b1:	c3                   	ret    

c00156b2 <Thr::getDriverNameFromAddress(unsigned long)>:
c00156b2:	53                   	push   ebx
c00156b3:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00156b9:	31 c0                	xor    eax,eax
c00156bb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00156bf:	39 c3                	cmp    ebx,eax
c00156c1:	7e 22                	jle    c00156e5 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00156c3:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c00156ca:	39 ca                	cmp    edx,ecx
c00156cc:	77 14                	ja     c00156e2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00156ce:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c00156d5:	39 ca                	cmp    edx,ecx
c00156d7:	76 09                	jbe    c00156e2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00156d9:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c00156e0:	eb 05                	jmp    c00156e7 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00156e2:	40                   	inc    eax
c00156e3:	eb da                	jmp    c00156bf <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00156e5:	31 c0                	xor    eax,eax
c00156e7:	5b                   	pop    ebx
c00156e8:	c3                   	ret    

c00156e9 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00156e9:	53                   	push   ebx
c00156ea:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00156ee:	53                   	push   ebx
c00156ef:	e8 8c ff ff ff       	call   c0015680 <Thr::getDriverBaseFromAddress(unsigned long)>
c00156f4:	5a                   	pop    edx
c00156f5:	31 d2                	xor    edx,edx
c00156f7:	85 c0                	test   eax,eax
c00156f9:	74 04                	je     c00156ff <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00156fb:	89 da                	mov    edx,ebx
c00156fd:	29 c2                	sub    edx,eax
c00156ff:	5b                   	pop    ebx
c0015700:	89 d0                	mov    eax,edx
c0015702:	c3                   	ret    

c0015703 <Thr::loadDLL(char const*, bool)>:
c0015703:	55                   	push   ebp
c0015704:	57                   	push   edi
c0015705:	56                   	push   esi
c0015706:	53                   	push   ebx
c0015707:	81 ec 34 01 00 00    	sub    esp,0x134
c001570d:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015714:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001571b:	56                   	push   esi
c001571c:	68 2b 2a 02 c0       	push   0xc0022a2b
c0015721:	e8 44 52 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0015726:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001572d:	e8 01 24 ff ff       	call   c0007b33 <malloc>
c0015732:	83 c4 0c             	add    esp,0xc
c0015735:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001573b:	56                   	push   esi
c001573c:	50                   	push   eax
c001573d:	89 c3                	mov    ebx,eax
c001573f:	e8 3e 64 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0015744:	83 c4 10             	add    esp,0x10
c0015747:	85 db                	test   ebx,ebx
c0015749:	75 3c                	jne    c0015787 <Thr::loadDLL(char const*, bool)+0x84>
c001574b:	89 e8                	mov    eax,ebp
c001574d:	84 c0                	test   al,al
c001574f:	0f 84 e1 01 00 00    	je     c0015936 <Thr::loadDLL(char const*, bool)+0x233>
c0015755:	50                   	push   eax
c0015756:	50                   	push   eax
c0015757:	68 3c 2a 02 c0       	push   0xc0022a3c
c001575c:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015760:	57                   	push   edi
c0015761:	e8 ea ae fe ff       	call   c0000650 <strcpy>
c0015766:	58                   	pop    eax
c0015767:	5a                   	pop    edx
c0015768:	56                   	push   esi
c0015769:	57                   	push   edi
c001576a:	e8 01 b1 fe ff       	call   c0000870 <strcat>
c001576f:	59                   	pop    ecx
c0015770:	58                   	pop    eax
c0015771:	68 4f 2a 02 c0       	push   0xc0022a4f
c0015776:	57                   	push   edi
c0015777:	e8 f4 b0 fe ff       	call   c0000870 <strcat>
c001577c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001577f:	e8 bb be ff ff       	call   c001163f <KePanic(char const*)>
c0015784:	83 c4 10             	add    esp,0x10
c0015787:	50                   	push   eax
c0015788:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001578c:	50                   	push   eax
c001578d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015791:	50                   	push   eax
c0015792:	53                   	push   ebx
c0015793:	e8 0a 67 ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c0015798:	83 c4 10             	add    esp,0x10
c001579b:	85 db                	test   ebx,ebx
c001579d:	74 0c                	je     c00157ab <Thr::loadDLL(char const*, bool)+0xa8>
c001579f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157a1:	83 ec 0c             	sub    esp,0xc
c00157a4:	53                   	push   ebx
c00157a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157a8:	83 c4 10             	add    esp,0x10
c00157ab:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00157b0:	75 0a                	jne    c00157bc <Thr::loadDLL(char const*, bool)+0xb9>
c00157b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00157b6:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00157ba:	75 3e                	jne    c00157fa <Thr::loadDLL(char const*, bool)+0xf7>
c00157bc:	89 e8                	mov    eax,ebp
c00157be:	31 db                	xor    ebx,ebx
c00157c0:	84 c0                	test   al,al
c00157c2:	0f 84 6e 01 00 00    	je     c0015936 <Thr::loadDLL(char const*, bool)+0x233>
c00157c8:	50                   	push   eax
c00157c9:	50                   	push   eax
c00157ca:	68 3c 2a 02 c0       	push   0xc0022a3c
c00157cf:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00157d3:	53                   	push   ebx
c00157d4:	e8 77 ae fe ff       	call   c0000650 <strcpy>
c00157d9:	58                   	pop    eax
c00157da:	5a                   	pop    edx
c00157db:	56                   	push   esi
c00157dc:	53                   	push   ebx
c00157dd:	e8 8e b0 fe ff       	call   c0000870 <strcat>
c00157e2:	59                   	pop    ecx
c00157e3:	5f                   	pop    edi
c00157e4:	68 4f 2a 02 c0       	push   0xc0022a4f
c00157e9:	53                   	push   ebx
c00157ea:	e8 81 b0 fe ff       	call   c0000870 <strcat>
c00157ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157f2:	e8 48 be ff ff       	call   c001163f <KePanic(char const*)>
c00157f7:	83 c4 10             	add    esp,0x10
c00157fa:	53                   	push   ebx
c00157fb:	6a 03                	push   0x3
c00157fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015801:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015805:	05 ff 0f 00 00       	add    eax,0xfff
c001580a:	83 d2 00             	adc    edx,0x0
c001580d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015811:	50                   	push   eax
c0015812:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015818:	e8 49 46 ff ff       	call   c0009e66 <VAS::allocatePages(int, int)>
c001581d:	89 c3                	mov    ebx,eax
c001581f:	58                   	pop    eax
c0015820:	5a                   	pop    edx
c0015821:	53                   	push   ebx
c0015822:	68 1a 0f 02 c0       	push   0xc0020f1a
c0015827:	e8 3e 51 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001582c:	89 34 24             	mov    DWORD PTR [esp],esi
c001582f:	e8 4c ad fe ff       	call   c0000580 <strlen>
c0015834:	8b 3d 00 bf 02 c0    	mov    edi,DWORD PTR ds:0xc002bf00
c001583a:	40                   	inc    eax
c001583b:	89 04 24             	mov    DWORD PTR [esp],eax
c001583e:	e8 f0 22 ff ff       	call   c0007b33 <malloc>
c0015843:	59                   	pop    ecx
c0015844:	89 04 bd 20 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3ce0],eax
c001584b:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015850:	5f                   	pop    edi
c0015851:	56                   	push   esi
c0015852:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c0015859:	e8 f2 ad fe ff       	call   c0000650 <strcpy>
c001585e:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015863:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c001586a:	8d 50 01             	lea    edx,[eax+0x1]
c001586d:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c0015873:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015877:	83 c4 0c             	add    esp,0xc
c001587a:	6a 01                	push   0x1
c001587c:	53                   	push   ebx
c001587d:	56                   	push   esi
c001587e:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c0015885:	e8 b5 f6 ff ff       	call   c0014f3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001588a:	83 c4 10             	add    esp,0x10
c001588d:	89 c7                	mov    edi,eax
c001588f:	89 f8                	mov    eax,edi
c0015891:	83 f0 01             	xor    eax,0x1
c0015894:	84 c0                	test   al,al
c0015896:	74 18                	je     c00158b0 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015898:	89 e8                	mov    eax,ebp
c001589a:	84 c0                	test   al,al
c001589c:	74 12                	je     c00158b0 <Thr::loadDLL(char const*, bool)+0x1ad>
c001589e:	83 ec 0c             	sub    esp,0xc
c00158a1:	68 51 2a 02 c0       	push   0xc0022a51
c00158a6:	e8 94 bd ff ff       	call   c001163f <KePanic(char const*)>
c00158ab:	83 c4 10             	add    esp,0x10
c00158ae:	eb 06                	jmp    c00158b6 <Thr::loadDLL(char const*, bool)+0x1b3>
c00158b0:	89 f8                	mov    eax,edi
c00158b2:	84 c0                	test   al,al
c00158b4:	75 10                	jne    c00158c6 <Thr::loadDLL(char const*, bool)+0x1c3>
c00158b6:	83 ec 0c             	sub    esp,0xc
c00158b9:	68 70 2a 02 c0       	push   0xc0022a70
c00158be:	e8 7c bd ff ff       	call   c001163f <KePanic(char const*)>
c00158c3:	83 c4 10             	add    esp,0x10
c00158c6:	31 f6                	xor    esi,esi
c00158c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00158d0:	05 ff 0f 00 00       	add    eax,0xfff
c00158d5:	83 d2 00             	adc    edx,0x0
c00158d8:	0f ac d0 0c          	shrd   eax,edx,0xc
c00158dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00158e0:	c1 ea 0c             	shr    edx,0xc
c00158e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00158e7:	ba 00 00 00 00       	mov    edx,0x0
c00158ec:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00158f0:	89 d0                	mov    eax,edx
c00158f2:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00158f6:	73 32                	jae    c001592a <Thr::loadDLL(char const*, bool)+0x227>
c00158f8:	50                   	push   eax
c00158f9:	50                   	push   eax
c00158fa:	89 f0                	mov    eax,esi
c00158fc:	c1 e0 0c             	shl    eax,0xc
c00158ff:	01 d8                	add    eax,ebx
c0015901:	50                   	push   eax
c0015902:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015908:	e8 3d 40 ff ff       	call   c000994a <VAS::getPageTableEntry(unsigned long)>
c001590d:	83 c4 10             	add    esp,0x10
c0015910:	8b 00                	mov    eax,DWORD PTR [eax]
c0015912:	a8 60                	test   al,0x60
c0015914:	75 11                	jne    c0015927 <Thr::loadDLL(char const*, bool)+0x224>
c0015916:	83 ec 0c             	sub    esp,0xc
c0015919:	25 00 f0 ff ff       	and    eax,0xfffff000
c001591e:	50                   	push   eax
c001591f:	e8 b5 24 ff ff       	call   c0007dd9 <Phys::freePage(unsigned long)>
c0015924:	83 c4 10             	add    esp,0x10
c0015927:	46                   	inc    esi
c0015928:	eb 9e                	jmp    c00158c8 <Thr::loadDLL(char const*, bool)+0x1c5>
c001592a:	89 f8                	mov    eax,edi
c001592c:	84 c0                	test   al,al
c001592e:	b8 00 00 00 00       	mov    eax,0x0
c0015933:	0f 44 d8             	cmove  ebx,eax
c0015936:	81 c4 2c 01 00 00    	add    esp,0x12c
c001593c:	89 d8                	mov    eax,ebx
c001593e:	5b                   	pop    ebx
c001593f:	5e                   	pop    esi
c0015940:	5f                   	pop    edi
c0015941:	5d                   	pop    ebp
c0015942:	c3                   	ret    

c0015943 <Thr::executeDLL(unsigned long, void*)>:
c0015943:	56                   	push   esi
c0015944:	53                   	push   ebx
c0015945:	52                   	push   edx
c0015946:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001594a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001594e:	85 db                	test   ebx,ebx
c0015950:	75 10                	jne    c0015962 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015952:	83 ec 0c             	sub    esp,0xc
c0015955:	68 8c 2a 02 c0       	push   0xc0022a8c
c001595a:	e8 e0 bc ff ff       	call   c001163f <KePanic(char const*)>
c001595f:	83 c4 10             	add    esp,0x10
c0015962:	50                   	push   eax
c0015963:	50                   	push   eax
c0015964:	53                   	push   ebx
c0015965:	68 b6 2a 02 c0       	push   0xc0022ab6
c001596a:	e8 fb 4f ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001596f:	89 d8                	mov    eax,ebx
c0015971:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015975:	83 c4 14             	add    esp,0x14
c0015978:	5b                   	pop    ebx
c0015979:	5e                   	pop    esi
c001597a:	ff e0                	jmp    eax

c001597c <userModeEntryPoint(void*)>:
c001597c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015981:	83 e8 01             	sub    eax,0x1
c0015984:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015989:	75 01                	jne    c001598c <userModeEntryPoint(void*)+0x10>
c001598b:	fb                   	sti    
c001598c:	fb                   	sti    
c001598d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015992:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015995:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001599b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001599f:	e9 9b a8 fe ff       	jmp    c000023f <goToUsermode>

c00159a4 <changeTSS>:
c00159a4:	83 ec 14             	sub    esp,0x14
c00159a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159ac:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00159af:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00159b4:	c1 e2 15             	shl    edx,0x15
c00159b7:	29 d0                	sub    eax,edx
c00159b9:	50                   	push   eax
c00159ba:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00159bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00159c5:	05 7c 11 00 00       	add    eax,0x117c
c00159ca:	50                   	push   eax
c00159cb:	e8 cc 35 ff ff       	call   c0008f9c <TSS::setESP(unsigned long)>
c00159d0:	83 c4 1c             	add    esp,0x1c
c00159d3:	c3                   	ret    

c00159d4 <switchToThread(ThreadControlBlock*)>:
c00159d4:	57                   	push   edi
c00159d5:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00159db:	56                   	push   esi
c00159dc:	53                   	push   ebx
c00159dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159e1:	85 c9                	test   ecx,ecx
c00159e3:	0f 85 8b 00 00 00    	jne    c0015a74 <switchToThread(ThreadControlBlock*)+0xa0>
c00159e9:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00159ed:	81 fa ff 00 00 00    	cmp    edx,0xff
c00159f3:	74 7b                	je     c0015a70 <switchToThread(ThreadControlBlock*)+0x9c>
c00159f5:	b8 00 04 00 00       	mov    eax,0x400
c00159fa:	29 d0                	sub    eax,edx
c00159fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00159ff:	d1 f8                	sar    eax,1
c0015a01:	01 d0                	add    eax,edx
c0015a03:	90                   	nop
c0015a04:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015a07:	e8 04 28 00 00       	call   c0018210 <HalQueryPerformanceCounter()>
c0015a0c:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015a11:	89 c6                	mov    esi,eax
c0015a13:	89 d7                	mov    edi,edx
c0015a15:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015a1b:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015a20:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c0015a26:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015a2c:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c0015a32:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015a38:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015a3e:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015a44:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015a47:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015a4a:	01 c6                	add    esi,eax
c0015a4c:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015a4f:	11 d7                	adc    edi,edx
c0015a51:	83 ec 0c             	sub    esp,0xc
c0015a54:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015a57:	53                   	push   ebx
c0015a58:	e8 1a a8 fe ff       	call   c0000277 <switchToThreadASM>
c0015a5d:	0f 20 c0             	mov    eax,cr0
c0015a60:	83 c8 08             	or     eax,0x8
c0015a63:	0f 22 c0             	mov    cr0,eax
c0015a66:	83 c4 10             	add    esp,0x10
c0015a69:	5b                   	pop    ebx
c0015a6a:	5e                   	pop    esi
c0015a6b:	5f                   	pop    edi
c0015a6c:	c3                   	ret    
c0015a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a70:	31 c0                	xor    eax,eax
c0015a72:	eb 90                	jmp    c0015a04 <switchToThread(ThreadControlBlock*)+0x30>
c0015a74:	5b                   	pop    ebx
c0015a75:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015a7f:	5e                   	pop    esi
c0015a80:	5f                   	pop    edi
c0015a81:	c3                   	ret    
c0015a82:	66 90                	xchg   ax,ax

c0015a84 <Process::addArgs(char**)>:
c0015a84:	57                   	push   edi
c0015a85:	56                   	push   esi
c0015a86:	53                   	push   ebx
c0015a87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015a8b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015a8f:	85 f6                	test   esi,esi
c0015a91:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0015a9b:	74 4f                	je     c0015aec <Process::addArgs(char**)+0x68>
c0015a9d:	8b 06                	mov    eax,DWORD PTR [esi]
c0015a9f:	85 c0                	test   eax,eax
c0015aa1:	74 49                	je     c0015aec <Process::addArgs(char**)+0x68>
c0015aa3:	31 db                	xor    ebx,ebx
c0015aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0015aa8:	83 ec 0c             	sub    esp,0xc
c0015aab:	50                   	push   eax
c0015aac:	e8 cf aa fe ff       	call   c0000580 <strlen>
c0015ab1:	83 c0 01             	add    eax,0x1
c0015ab4:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ab7:	e8 77 20 ff ff       	call   c0007b33 <malloc>
c0015abc:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015ac3:	5a                   	pop    edx
c0015ac4:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015ac7:	83 c3 01             	add    ebx,0x1
c0015aca:	59                   	pop    ecx
c0015acb:	52                   	push   edx
c0015acc:	50                   	push   eax
c0015acd:	e8 7e ab fe ff       	call   c0000650 <strcpy>
c0015ad2:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015ad8:	83 c4 10             	add    esp,0x10
c0015adb:	83 c1 01             	add    ecx,0x1
c0015ade:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015ae4:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015ae7:	85 c0                	test   eax,eax
c0015ae9:	75 bd                	jne    c0015aa8 <Process::addArgs(char**)+0x24>
c0015aeb:	90                   	nop
c0015aec:	5b                   	pop    ebx
c0015aed:	5e                   	pop    esi
c0015aee:	5f                   	pop    edi
c0015aef:	c3                   	ret    

c0015af0 <Process::Process(char const*, Process*, char**)>:
c0015af0:	56                   	push   esi
c0015af1:	53                   	push   ebx
c0015af2:	83 ec 14             	sub    esp,0x14
c0015af5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015af9:	05 0c 02 00 00       	add    eax,0x20c
c0015afe:	bb 07 00 00 00       	mov    ebx,0x7
c0015b03:	89 c6                	mov    esi,eax
c0015b05:	8d 76 00             	lea    esi,[esi+0x0]
c0015b08:	85 db                	test   ebx,ebx
c0015b0a:	78 14                	js     c0015b20 <Process::Process(char const*, Process*, char**)+0x30>
c0015b0c:	83 ec 0c             	sub    esp,0xc
c0015b0f:	56                   	push   esi
c0015b10:	e8 33 a6 00 00       	call   c0020148 <ThreadControlBlock::ThreadControlBlock()>
c0015b15:	83 c4 10             	add    esp,0x10
c0015b18:	83 c6 5f             	add    esi,0x5f
c0015b1b:	83 eb 01             	sub    ebx,0x1
c0015b1e:	eb e8                	jmp    c0015b08 <Process::Process(char const*, Process*, char**)+0x18>
c0015b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b24:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015b2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b2f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015b36:	83 ec 0c             	sub    esp,0xc
c0015b39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b3d:	e8 f2 b8 ff ff       	call   c0011434 <KeNewProcessEnv(Process*)>
c0015b42:	83 c4 10             	add    esp,0x10
c0015b45:	89 c2                	mov    edx,eax
c0015b47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b4b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015b51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b55:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015b5e:	a1 e0 40 02 c0       	mov    eax,ds:0xc00240e0
c0015b63:	8d 50 01             	lea    edx,[eax+0x1]
c0015b66:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c0015b6c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b70:	89 02                	mov    DWORD PTR [edx],eax
c0015b72:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015b7a:	83 ec 0c             	sub    esp,0xc
c0015b7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b81:	e8 ad 1f ff ff       	call   c0007b33 <malloc>
c0015b86:	83 c4 10             	add    esp,0x10
c0015b89:	89 c3                	mov    ebx,eax
c0015b8b:	83 ec 08             	sub    esp,0x8
c0015b8e:	6a 00                	push   0x0
c0015b90:	53                   	push   ebx
c0015b91:	e8 1c 45 ff ff       	call   c000a0b2 <VAS::VAS(bool)>
c0015b96:	83 c4 10             	add    esp,0x10
c0015b99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b9d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015ba3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ba7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bb5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015bb9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015bbf:	e8 92 be ff ff       	call   c0011a56 <KeInitSignals()>
c0015bc4:	89 c2                	mov    edx,eax
c0015bc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bca:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015bd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bda:	85 c0                	test   eax,eax
c0015bdc:	74 42                	je     c0015c20 <Process::Process(char const*, Process*, char**)+0x130>
c0015bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015be2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015be8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bf2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015bf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bfc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c02:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015c08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c0c:	05 0c 01 00 00       	add    eax,0x10c
c0015c11:	83 ec 08             	sub    esp,0x8
c0015c14:	52                   	push   edx
c0015c15:	50                   	push   eax
c0015c16:	e8 35 aa fe ff       	call   c0000650 <strcpy>
c0015c1b:	83 c4 10             	add    esp,0x10
c0015c1e:	eb 64                	jmp    c0015c84 <Process::Process(char const*, Process*, char**)+0x194>
c0015c20:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015c28:	83 ec 0c             	sub    esp,0xc
c0015c2b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015c2f:	e8 ff 1e ff ff       	call   c0007b33 <malloc>
c0015c34:	83 c4 10             	add    esp,0x10
c0015c37:	89 c3                	mov    ebx,eax
c0015c39:	83 ec 08             	sub    esp,0x8
c0015c3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c40:	53                   	push   ebx
c0015c41:	e8 86 30 ff ff       	call   c0008ccc <VgaText::VgaText(char const*)>
c0015c46:	83 c4 10             	add    esp,0x10
c0015c49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c4d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015c53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c57:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015c5d:	83 ec 0c             	sub    esp,0xc
c0015c60:	50                   	push   eax
c0015c61:	e8 14 29 ff ff       	call   c000857a <addToTerminalCycle(VgaText*)>
c0015c66:	83 c4 10             	add    esp,0x10
c0015c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c6d:	05 0c 01 00 00       	add    eax,0x10c
c0015c72:	83 ec 08             	sub    esp,0x8
c0015c75:	68 d5 2a 02 c0       	push   0xc0022ad5
c0015c7a:	50                   	push   eax
c0015c7b:	e8 d0 a9 fe ff       	call   c0000650 <strcpy>
c0015c80:	83 c4 10             	add    esp,0x10
c0015c83:	90                   	nop
c0015c84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c88:	83 c0 0c             	add    eax,0xc
c0015c8b:	83 ec 08             	sub    esp,0x8
c0015c8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c92:	50                   	push   eax
c0015c93:	e8 b8 a9 fe ff       	call   c0000650 <strcpy>
c0015c98:	83 c4 10             	add    esp,0x10
c0015c9b:	83 ec 08             	sub    esp,0x8
c0015c9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015ca2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ca6:	e8 d9 fd ff ff       	call   c0015a84 <Process::addArgs(char**)>
c0015cab:	83 c4 10             	add    esp,0x10
c0015cae:	83 ec 08             	sub    esp,0x8
c0015cb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cb9:	e8 42 ed ff ff       	call   c0014a00 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015cbe:	83 c4 10             	add    esp,0x10
c0015cc1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015cc5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015cc9:	83 f0 01             	xor    eax,0x1
c0015ccc:	88 c2                	mov    dl,al
c0015cce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cd2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015cd8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015cdd:	83 ec 04             	sub    esp,0x4
c0015ce0:	50                   	push   eax
c0015ce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ce5:	68 2c 2b 02 c0       	push   0xc0022b2c
c0015cea:	e8 7b 4c ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0015cef:	83 c4 10             	add    esp,0x10
c0015cf2:	90                   	nop
c0015cf3:	83 c4 14             	add    esp,0x14
c0015cf6:	5b                   	pop    ebx
c0015cf7:	5e                   	pop    esi
c0015cf8:	c3                   	ret    
c0015cf9:	90                   	nop
c0015cfa:	66 90                	xchg   ax,ax

c0015cfc <Process::Process(bool, char const*, Process*, char**)>:
c0015cfc:	56                   	push   esi
c0015cfd:	53                   	push   ebx
c0015cfe:	83 ec 24             	sub    esp,0x24
c0015d01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d05:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015d09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d0d:	05 0c 02 00 00       	add    eax,0x20c
c0015d12:	bb 07 00 00 00       	mov    ebx,0x7
c0015d17:	89 c6                	mov    esi,eax
c0015d19:	8d 76 00             	lea    esi,[esi+0x0]
c0015d1c:	85 db                	test   ebx,ebx
c0015d1e:	78 14                	js     c0015d34 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015d20:	83 ec 0c             	sub    esp,0xc
c0015d23:	56                   	push   esi
c0015d24:	e8 1f a4 00 00       	call   c0020148 <ThreadControlBlock::ThreadControlBlock()>
c0015d29:	83 c4 10             	add    esp,0x10
c0015d2c:	83 c6 5f             	add    esi,0x5f
c0015d2f:	83 eb 01             	sub    ebx,0x1
c0015d32:	eb e8                	jmp    c0015d1c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015d34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d38:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015d3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d43:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015d4a:	83 ec 0c             	sub    esp,0xc
c0015d4d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d51:	e8 de b6 ff ff       	call   c0011434 <KeNewProcessEnv(Process*)>
c0015d56:	83 c4 10             	add    esp,0x10
c0015d59:	89 c2                	mov    edx,eax
c0015d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d5f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015d65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d69:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015d72:	a1 e0 40 02 c0       	mov    eax,ds:0xc00240e0
c0015d77:	8d 50 01             	lea    edx,[eax+0x1]
c0015d7a:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c0015d80:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015d84:	89 02                	mov    DWORD PTR [edx],eax
c0015d86:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015d8e:	83 ec 0c             	sub    esp,0xc
c0015d91:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d95:	e8 99 1d ff ff       	call   c0007b33 <malloc>
c0015d9a:	83 c4 10             	add    esp,0x10
c0015d9d:	89 c3                	mov    ebx,eax
c0015d9f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015da4:	83 ec 08             	sub    esp,0x8
c0015da7:	50                   	push   eax
c0015da8:	53                   	push   ebx
c0015da9:	e8 04 43 ff ff       	call   c000a0b2 <VAS::VAS(bool)>
c0015dae:	83 c4 10             	add    esp,0x10
c0015db1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015db5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015dbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dbf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015dc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dcd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015dd1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015dd7:	e8 7a bc ff ff       	call   c0011a56 <KeInitSignals()>
c0015ddc:	89 c2                	mov    edx,eax
c0015dde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015de2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015de8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015df2:	85 c0                	test   eax,eax
c0015df4:	74 42                	je     c0015e38 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015df6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dfa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e00:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015e06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e0a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015e10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e14:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e1a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015e20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e24:	05 0c 01 00 00       	add    eax,0x10c
c0015e29:	83 ec 08             	sub    esp,0x8
c0015e2c:	52                   	push   edx
c0015e2d:	50                   	push   eax
c0015e2e:	e8 1d a8 fe ff       	call   c0000650 <strcpy>
c0015e33:	83 c4 10             	add    esp,0x10
c0015e36:	eb 64                	jmp    c0015e9c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015e38:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015e40:	83 ec 0c             	sub    esp,0xc
c0015e43:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015e47:	e8 e7 1c ff ff       	call   c0007b33 <malloc>
c0015e4c:	83 c4 10             	add    esp,0x10
c0015e4f:	89 c3                	mov    ebx,eax
c0015e51:	83 ec 08             	sub    esp,0x8
c0015e54:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e58:	53                   	push   ebx
c0015e59:	e8 6e 2e ff ff       	call   c0008ccc <VgaText::VgaText(char const*)>
c0015e5e:	83 c4 10             	add    esp,0x10
c0015e61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e65:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015e6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e6f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e75:	83 ec 0c             	sub    esp,0xc
c0015e78:	50                   	push   eax
c0015e79:	e8 fc 26 ff ff       	call   c000857a <addToTerminalCycle(VgaText*)>
c0015e7e:	83 c4 10             	add    esp,0x10
c0015e81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e85:	05 0c 01 00 00       	add    eax,0x10c
c0015e8a:	83 ec 08             	sub    esp,0x8
c0015e8d:	68 d5 2a 02 c0       	push   0xc0022ad5
c0015e92:	50                   	push   eax
c0015e93:	e8 b8 a7 fe ff       	call   c0000650 <strcpy>
c0015e98:	83 c4 10             	add    esp,0x10
c0015e9b:	90                   	nop
c0015e9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ea0:	83 c0 0c             	add    eax,0xc
c0015ea3:	83 ec 08             	sub    esp,0x8
c0015ea6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015eaa:	50                   	push   eax
c0015eab:	e8 a0 a7 fe ff       	call   c0000650 <strcpy>
c0015eb0:	83 c4 10             	add    esp,0x10
c0015eb3:	83 ec 08             	sub    esp,0x8
c0015eb6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015eba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015ebe:	e8 c1 fb ff ff       	call   c0015a84 <Process::addArgs(char**)>
c0015ec3:	83 c4 10             	add    esp,0x10
c0015ec6:	90                   	nop
c0015ec7:	83 c4 24             	add    esp,0x24
c0015eca:	5b                   	pop    ebx
c0015ecb:	5e                   	pop    esi
c0015ecc:	c3                   	ret    
c0015ecd:	8d 76 00             	lea    esi,[esi+0x0]

c0015ed0 <taskStartupFunction>:
c0015ed0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ed5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015ed8:	c3                   	ret    
c0015ed9:	90                   	nop
c0015eda:	66 90                	xchg   ax,ax

c0015edc <Semaphore::Semaphore(int)>:
c0015edc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ee0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015ee4:	89 10                	mov    DWORD PTR [eax],edx
c0015ee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eea:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015ef1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ef5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015efc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f00:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015f07:	90                   	nop
c0015f08:	c3                   	ret    
c0015f09:	90                   	nop
c0015f0a:	66 90                	xchg   ax,ax

c0015f0c <Mutex::Mutex()>:
c0015f0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f10:	6a 01                	push   0x1
c0015f12:	50                   	push   eax
c0015f13:	e8 c4 ff ff ff       	call   c0015edc <Semaphore::Semaphore(int)>
c0015f18:	83 c4 08             	add    esp,0x8
c0015f1b:	90                   	nop
c0015f1c:	c3                   	ret    
c0015f1d:	90                   	nop
c0015f1e:	66 90                	xchg   ax,ax

c0015f20 <Process::createThread(void (*)(void*), void*, int)>:
c0015f20:	57                   	push   edi
c0015f21:	31 c9                	xor    ecx,ecx
c0015f23:	56                   	push   esi
c0015f24:	53                   	push   ebx
c0015f25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f29:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015f30:	89 f2                	mov    edx,esi
c0015f32:	66 90                	xchg   ax,ax
c0015f34:	0f b7 c2             	movzx  eax,dx
c0015f37:	80 e2 01             	and    dl,0x1
c0015f3a:	74 14                	je     c0015f50 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015f3c:	d1 f8                	sar    eax,1
c0015f3e:	83 c1 01             	add    ecx,0x1
c0015f41:	83 f9 10             	cmp    ecx,0x10
c0015f44:	89 c2                	mov    edx,eax
c0015f46:	75 ec                	jne    c0015f34 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015f48:	31 db                	xor    ebx,ebx
c0015f4a:	89 d8                	mov    eax,ebx
c0015f4c:	5b                   	pop    ebx
c0015f4d:	5e                   	pop    esi
c0015f4e:	5f                   	pop    edi
c0015f4f:	c3                   	ret    
c0015f50:	b8 01 00 00 00       	mov    eax,0x1
c0015f55:	d3 e0                	shl    eax,cl
c0015f57:	09 c6                	or     esi,eax
c0015f59:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015f60:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015f63:	c1 e0 05             	shl    eax,0x5
c0015f66:	29 c8                	sub    eax,ecx
c0015f68:	01 d8                	add    eax,ebx
c0015f6a:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015f71:	75 0d                	jne    c0015f80 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015f73:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0015f80:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f86:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015f89:	83 ec 0c             	sub    esp,0xc
c0015f8c:	c1 e6 05             	shl    esi,0x5
c0015f8f:	29 ce                	sub    esi,ecx
c0015f91:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015f94:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015f97:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015f9d:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015fa3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015fa9:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015fb0:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015fb6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015fba:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015fc0:	89 ca                	mov    edx,ecx
c0015fc2:	f7 da                	neg    edx
c0015fc4:	c1 e2 15             	shl    edx,0x15
c0015fc7:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015fcd:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015fd3:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015fd7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015fe1:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015fe7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015feb:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015ff1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015ffb:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016005:	68 00 01 00 00       	push   0x100
c001600a:	e8 24 1b ff ff       	call   c0007b33 <malloc>
c001600f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0016012:	58                   	pop    eax
c0016013:	5a                   	pop    edx
c0016014:	53                   	push   ebx
c0016015:	68 e4 c6 02 c0       	push   0xc002c6e4
c001601a:	e8 c1 9e 00 00       	call   c001fee0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001601f:	83 c4 10             	add    esp,0x10
c0016022:	89 d8                	mov    eax,ebx
c0016024:	5b                   	pop    ebx
c0016025:	5e                   	pop    esi
c0016026:	5f                   	pop    edi
c0016027:	c3                   	ret    

c0016028 <Process::createUserThread()>:
c0016028:	83 ec 0c             	sub    esp,0xc
c001602b:	68 80 00 00 00       	push   0x80
c0016030:	6a 00                	push   0x0
c0016032:	68 7c 59 01 c0       	push   0xc001597c
c0016037:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001603b:	50                   	push   eax
c001603c:	e8 df fe ff ff       	call   c0015f20 <Process::createThread(void (*)(void*), void*, int)>
c0016041:	83 c4 1c             	add    esp,0x1c
c0016044:	c3                   	ret    
c0016045:	8d 76 00             	lea    esi,[esi+0x0]

c0016048 <setupMultitasking(void (*)())>:
c0016048:	56                   	push   esi
c0016049:	53                   	push   ebx
c001604a:	83 ec 04             	sub    esp,0x4
c001604d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016051:	eb 11                	jmp    c0016064 <setupMultitasking(void (*)())+0x1c>
c0016053:	90                   	nop
c0016054:	83 ec 0c             	sub    esp,0xc
c0016057:	68 e4 c6 02 c0       	push   0xc002c6e4
c001605c:	e8 c3 9d 00 00       	call   c001fe24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016061:	83 c4 10             	add    esp,0x10
c0016064:	83 ec 0c             	sub    esp,0xc
c0016067:	68 e4 c6 02 c0       	push   0xc002c6e4
c001606c:	e8 8f 9d 00 00       	call   c001fe00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016071:	83 c4 10             	add    esp,0x10
c0016074:	84 c0                	test   al,al
c0016076:	74 dc                	je     c0016054 <setupMultitasking(void (*)())+0xc>
c0016078:	83 ec 0c             	sub    esp,0xc
c001607b:	68 24 07 00 00       	push   0x724
c0016080:	e8 ae 1a ff ff       	call   c0007b33 <malloc>
c0016085:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001608c:	6a 00                	push   0x0
c001608e:	68 d9 2a 02 c0       	push   0xc0022ad9
c0016093:	6a 01                	push   0x1
c0016095:	50                   	push   eax
c0016096:	89 c3                	mov    ebx,eax
c0016098:	e8 5f fc ff ff       	call   c0015cfc <Process::Process(bool, char const*, Process*, char**)>
c001609d:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00160a3:	83 c4 14             	add    esp,0x14
c00160a6:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c00160ac:	50                   	push   eax
c00160ad:	e8 1d 27 ff ff       	call   c00087cf <setActiveTerminal(VgaText*)>
c00160b2:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00160b9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00160c3:	83 c8 01             	or     eax,0x1
c00160c6:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00160cd:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00160d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00160d6:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00160e0:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00160e6:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00160f0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00160f6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016100:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001610a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016110:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016116:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016120:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001612a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016131:	e8 fd 19 ff ff       	call   c0007b33 <malloc>
c0016136:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001613c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016142:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016148:	5a                   	pop    edx
c0016149:	59                   	pop    ecx
c001614a:	68 d5 2a 02 c0       	push   0xc0022ad5
c001614f:	50                   	push   eax
c0016150:	e8 fb a4 fe ff       	call   c0000650 <strcpy>
c0016155:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001615c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016160:	83 c4 14             	add    esp,0x14
c0016163:	5b                   	pop    ebx
c0016164:	5e                   	pop    esi
c0016165:	e9 ff a0 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001616a:	66 90                	xchg   ax,ax

c001616c <schedule()>:
c001616c:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016172:	85 d2                	test   edx,edx
c0016174:	74 0e                	je     c0016184 <schedule()+0x18>
c0016176:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016180:	c3                   	ret    
c0016181:	8d 76 00             	lea    esi,[esi+0x0]
c0016184:	53                   	push   ebx
c0016185:	83 ec 14             	sub    esp,0x14
c0016188:	68 e4 c6 02 c0       	push   0xc002c6e4
c001618d:	e8 6e 9c 00 00       	call   c001fe00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016192:	83 c4 10             	add    esp,0x10
c0016195:	84 c0                	test   al,al
c0016197:	75 3f                	jne    c00161d8 <schedule()+0x6c>
c0016199:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001619e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00161a1:	83 fa 01             	cmp    edx,0x1
c00161a4:	74 3a                	je     c00161e0 <schedule()+0x74>
c00161a6:	66 90                	xchg   ax,ax
c00161a8:	83 ec 0c             	sub    esp,0xc
c00161ab:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161b0:	e8 67 9c 00 00       	call   c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161b5:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00161bc:	89 c3                	mov    ebx,eax
c00161be:	e8 61 9c 00 00       	call   c001fe24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00161c3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00161ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161cd:	e8 02 f8 ff ff       	call   c00159d4 <switchToThread(ThreadControlBlock*)>
c00161d2:	83 c4 10             	add    esp,0x10
c00161d5:	8d 76 00             	lea    esi,[esi+0x0]
c00161d8:	83 c4 08             	add    esp,0x8
c00161db:	5b                   	pop    ebx
c00161dc:	c3                   	ret    
c00161dd:	8d 76 00             	lea    esi,[esi+0x0]
c00161e0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00161e7:	83 ec 08             	sub    esp,0x8
c00161ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161ef:	50                   	push   eax
c00161f0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161f5:	e8 e6 9c 00 00       	call   c001fee0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00161fa:	83 c4 10             	add    esp,0x10
c00161fd:	eb a9                	jmp    c00161a8 <schedule()+0x3c>
c00161ff:	90                   	nop

c0016200 <Semaphore::tryAcquire()>:
c0016200:	53                   	push   ebx
c0016201:	83 ec 08             	sub    esp,0x8
c0016204:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016208:	fa                   	cli    
c0016209:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001620f:	8d 42 01             	lea    eax,[edx+0x1]
c0016212:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016217:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001621c:	8d 58 01             	lea    ebx,[eax+0x1]
c001621f:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c0016225:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016228:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001622a:	7c 2c                	jl     c0016258 <Semaphore::tryAcquire()+0x58>
c001622c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016231:	85 c0                	test   eax,eax
c0016233:	75 0b                	jne    c0016240 <Semaphore::tryAcquire()+0x40>
c0016235:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001623a:	85 c0                	test   eax,eax
c001623c:	75 5a                	jne    c0016298 <Semaphore::tryAcquire()+0x98>
c001623e:	66 90                	xchg   ax,ax
c0016240:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016246:	31 c0                	xor    eax,eax
c0016248:	85 d2                	test   edx,edx
c001624a:	75 04                	jne    c0016250 <Semaphore::tryAcquire()+0x50>
c001624c:	fb                   	sti    
c001624d:	8d 76 00             	lea    esi,[esi+0x0]
c0016250:	83 c4 08             	add    esp,0x8
c0016253:	5b                   	pop    ebx
c0016254:	c3                   	ret    
c0016255:	8d 76 00             	lea    esi,[esi+0x0]
c0016258:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001625d:	83 c3 01             	add    ebx,0x1
c0016260:	85 c0                	test   eax,eax
c0016262:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016265:	75 21                	jne    c0016288 <Semaphore::tryAcquire()+0x88>
c0016267:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c001626d:	85 c9                	test   ecx,ecx
c001626f:	74 17                	je     c0016288 <Semaphore::tryAcquire()+0x88>
c0016271:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001627b:	e8 ec fe ff ff       	call   c001616c <schedule()>
c0016280:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016285:	8d 50 ff             	lea    edx,[eax-0x1]
c0016288:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001628e:	85 d2                	test   edx,edx
c0016290:	b0 01                	mov    al,0x1
c0016292:	75 bc                	jne    c0016250 <Semaphore::tryAcquire()+0x50>
c0016294:	eb b6                	jmp    c001624c <Semaphore::tryAcquire()+0x4c>
c0016296:	66 90                	xchg   ax,ax
c0016298:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162a2:	e8 c5 fe ff ff       	call   c001616c <schedule()>
c00162a7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162ac:	8d 50 ff             	lea    edx,[eax-0x1]
c00162af:	31 c0                	xor    eax,eax
c00162b1:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00162b7:	85 d2                	test   edx,edx
c00162b9:	75 95                	jne    c0016250 <Semaphore::tryAcquire()+0x50>
c00162bb:	eb 8f                	jmp    c001624c <Semaphore::tryAcquire()+0x4c>
c00162bd:	90                   	nop
c00162be:	66 90                	xchg   ax,ax

c00162c0 <Semaphore::assertLocked(char const*)>:
c00162c0:	83 ec 0c             	sub    esp,0xc
c00162c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162c7:	fa                   	cli    
c00162c8:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00162ce:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162d3:	83 c1 01             	add    ecx,0x1
c00162d6:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00162dc:	8d 48 01             	lea    ecx,[eax+0x1]
c00162df:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00162e5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00162e7:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00162ea:	7c 28                	jl     c0016314 <Semaphore::assertLocked(char const*)+0x54>
c00162ec:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00162f1:	85 c0                	test   eax,eax
c00162f3:	75 0b                	jne    c0016300 <Semaphore::assertLocked(char const*)+0x40>
c00162f5:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00162fa:	85 c0                	test   eax,eax
c00162fc:	75 32                	jne    c0016330 <Semaphore::assertLocked(char const*)+0x70>
c00162fe:	66 90                	xchg   ax,ax
c0016300:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016305:	83 e8 01             	sub    eax,0x1
c0016308:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001630d:	75 01                	jne    c0016310 <Semaphore::assertLocked(char const*)+0x50>
c001630f:	fb                   	sti    
c0016310:	83 c4 0c             	add    esp,0xc
c0016313:	c3                   	ret    
c0016314:	83 ec 0c             	sub    esp,0xc
c0016317:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001631b:	52                   	push   edx
c001631c:	e8 1e b3 ff ff       	call   c001163f <KePanic(char const*)>
c0016321:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016326:	83 c4 10             	add    esp,0x10
c0016329:	83 e8 01             	sub    eax,0x1
c001632c:	eb be                	jmp    c00162ec <Semaphore::assertLocked(char const*)+0x2c>
c001632e:	66 90                	xchg   ax,ax
c0016330:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001633a:	e8 2d fe ff ff       	call   c001616c <schedule()>
c001633f:	eb bf                	jmp    c0016300 <Semaphore::assertLocked(char const*)+0x40>
c0016341:	8d 76 00             	lea    esi,[esi+0x0]

c0016344 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016344:	83 ec 0c             	sub    esp,0xc
c0016347:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001634c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016350:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016353:	e8 14 fe ff ff       	call   c001616c <schedule()>
c0016358:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001635d:	83 e8 01             	sub    eax,0x1
c0016360:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016365:	75 01                	jne    c0016368 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0016367:	fb                   	sti    
c0016368:	83 c4 0c             	add    esp,0xc
c001636b:	c3                   	ret    

c001636c <blockTask(TaskState)>:
c001636c:	83 ec 0c             	sub    esp,0xc
c001636f:	fa                   	cli    
c0016370:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016375:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016379:	83 c0 01             	add    eax,0x1
c001637c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016381:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016386:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016389:	e8 de fd ff ff       	call   c001616c <schedule()>
c001638e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016393:	83 e8 01             	sub    eax,0x1
c0016396:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001639b:	75 03                	jne    c00163a0 <blockTask(TaskState)+0x34>
c001639d:	fb                   	sti    
c001639e:	66 90                	xchg   ax,ax
c00163a0:	83 c4 0c             	add    esp,0xc
c00163a3:	c3                   	ret    

c00163a4 <waitTask(int, int*, int)>:
c00163a4:	83 ec 18             	sub    esp,0x18
c00163a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163b0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00163b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00163b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163bc:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00163bf:	6a 07                	push   0x7
c00163c1:	e8 a6 ff ff ff       	call   c001636c <blockTask(TaskState)>
c00163c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163cb:	83 c4 10             	add    esp,0x10
c00163ce:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00163d1:	85 d2                	test   edx,edx
c00163d3:	74 0b                	je     c00163e0 <waitTask(int, int*, int)+0x3c>
c00163d5:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00163d8:	89 02                	mov    DWORD PTR [edx],eax
c00163da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163df:	90                   	nop
c00163e0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00163e3:	83 c4 0c             	add    esp,0xc
c00163e6:	c3                   	ret    
c00163e7:	90                   	nop

c00163e8 <milliTenthSleepUntil(unsigned int)>:
c00163e8:	83 ec 0c             	sub    esp,0xc
c00163eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ef:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c00163f5:	76 05                	jbe    c00163fc <milliTenthSleepUntil(unsigned int)+0x14>
c00163f7:	90                   	nop
c00163f8:	83 c4 0c             	add    esp,0xc
c00163fb:	c3                   	ret    
c00163fc:	fa                   	cli    
c00163fd:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016403:	83 ec 08             	sub    esp,0x8
c0016406:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c001640c:	83 c2 01             	add    edx,0x1
c001640f:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016415:	83 c1 01             	add    ecx,0x1
c0016418:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001641e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016424:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016427:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001642c:	50                   	push   eax
c001642d:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016432:	e8 a9 9a 00 00       	call   c001fee0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016437:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001643e:	e8 29 ff ff ff       	call   c001636c <blockTask(TaskState)>
c0016443:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016448:	83 c4 10             	add    esp,0x10
c001644b:	83 e8 01             	sub    eax,0x1
c001644e:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016453:	85 c0                	test   eax,eax
c0016455:	75 09                	jne    c0016460 <milliTenthSleepUntil(unsigned int)+0x78>
c0016457:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001645c:	85 c0                	test   eax,eax
c001645e:	75 14                	jne    c0016474 <milliTenthSleepUntil(unsigned int)+0x8c>
c0016460:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016465:	83 e8 01             	sub    eax,0x1
c0016468:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001646d:	75 89                	jne    c00163f8 <milliTenthSleepUntil(unsigned int)+0x10>
c001646f:	fb                   	sti    
c0016470:	83 c4 0c             	add    esp,0xc
c0016473:	c3                   	ret    
c0016474:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001647e:	e8 e9 fc ff ff       	call   c001616c <schedule()>
c0016483:	eb db                	jmp    c0016460 <milliTenthSleepUntil(unsigned int)+0x78>
c0016485:	8d 76 00             	lea    esi,[esi+0x0]

c0016488 <milliTenthSleep(unsigned int)>:
c0016488:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001648c:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016491:	01 c2                	add    edx,eax
c0016493:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016497:	e9 4c ff ff ff       	jmp    c00163e8 <milliTenthSleepUntil(unsigned int)>

c001649c <sleep(unsigned int)>:
c001649c:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00164a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164a8:	eb de                	jmp    c0016488 <milliTenthSleep(unsigned int)>
c00164aa:	66 90                	xchg   ax,ax

c00164ac <Semaphore::acquire()>:
c00164ac:	83 ec 0c             	sub    esp,0xc
c00164af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164b3:	fa                   	cli    
c00164b4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164b9:	83 c0 01             	add    eax,0x1
c00164bc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164c1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00164c6:	8d 48 01             	lea    ecx,[eax+0x1]
c00164c9:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00164cf:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00164d2:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00164d4:	7d 2e                	jge    c0016504 <Semaphore::acquire()+0x58>
c00164d6:	83 c1 01             	add    ecx,0x1
c00164d9:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00164dc:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00164e1:	85 c0                	test   eax,eax
c00164e3:	75 0b                	jne    c00164f0 <Semaphore::acquire()+0x44>
c00164e5:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00164ea:	85 c0                	test   eax,eax
c00164ec:	75 66                	jne    c0016554 <Semaphore::acquire()+0xa8>
c00164ee:	66 90                	xchg   ax,ax
c00164f0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164f5:	83 e8 01             	sub    eax,0x1
c00164f8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164fd:	75 01                	jne    c0016500 <Semaphore::acquire()+0x54>
c00164ff:	fb                   	sti    
c0016500:	83 c4 0c             	add    esp,0xc
c0016503:	c3                   	ret    
c0016504:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016509:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016510:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016513:	85 c9                	test   ecx,ecx
c0016515:	74 51                	je     c0016568 <Semaphore::acquire()+0xbc>
c0016517:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001651a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016520:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016523:	90                   	nop
c0016524:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016529:	83 ec 0c             	sub    esp,0xc
c001652c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001652f:	68 58 2b 02 c0       	push   0xc0022b58
c0016534:	e8 31 44 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0016539:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016540:	e8 27 fe ff ff       	call   c001636c <blockTask(TaskState)>
c0016545:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001654a:	83 c4 10             	add    esp,0x10
c001654d:	83 e8 01             	sub    eax,0x1
c0016550:	eb 8a                	jmp    c00164dc <Semaphore::acquire()+0x30>
c0016552:	66 90                	xchg   ax,ax
c0016554:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001655e:	e8 09 fc ff ff       	call   c001616c <schedule()>
c0016563:	eb 8b                	jmp    c00164f0 <Semaphore::acquire()+0x44>
c0016565:	8d 76 00             	lea    esi,[esi+0x0]
c0016568:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001656d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016570:	eb b2                	jmp    c0016524 <Semaphore::acquire()+0x78>
c0016572:	66 90                	xchg   ax,ax

c0016574 <taskReturned>:
c0016574:	83 ec 18             	sub    esp,0x18
c0016577:	68 78 2b 02 c0       	push   0xc0022b78
c001657c:	e8 be b0 ff ff       	call   c001163f <KePanic(char const*)>
c0016581:	83 c4 10             	add    esp,0x10
c0016584:	83 ec 0c             	sub    esp,0xc
c0016587:	6a 02                	push   0x2
c0016589:	e8 de fd ff ff       	call   c001636c <blockTask(TaskState)>
c001658e:	fa                   	cli    
c001658f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016594:	83 c0 01             	add    eax,0x1
c0016597:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001659c:	e8 cb fb ff ff       	call   c001616c <schedule()>
c00165a1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165a6:	83 c4 10             	add    esp,0x10
c00165a9:	83 e8 01             	sub    eax,0x1
c00165ac:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165b1:	85 c0                	test   eax,eax
c00165b3:	75 cf                	jne    c0016584 <taskReturned+0x10>
c00165b5:	fb                   	sti    
c00165b6:	eb cc                	jmp    c0016584 <taskReturned+0x10>

c00165b8 <Thr::processFromPID(int)>:
c00165b8:	57                   	push   edi
c00165b9:	56                   	push   esi
c00165ba:	53                   	push   ebx
c00165bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165bf:	fa                   	cli    
c00165c0:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00165c6:	83 ec 0c             	sub    esp,0xc
c00165c9:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165ce:	83 c1 01             	add    ecx,0x1
c00165d1:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00165d7:	e8 40 98 00 00       	call   c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165dc:	83 c4 10             	add    esp,0x10
c00165df:	89 c7                	mov    edi,eax
c00165e1:	eb 15                	jmp    c00165f8 <Thr::processFromPID(int)+0x40>
c00165e3:	90                   	nop
c00165e4:	83 ec 0c             	sub    esp,0xc
c00165e7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165ec:	e8 2b 98 00 00       	call   c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165f1:	83 c4 10             	add    esp,0x10
c00165f4:	39 f8                	cmp    eax,edi
c00165f6:	74 50                	je     c0016648 <Thr::processFromPID(int)+0x90>
c00165f8:	83 ec 0c             	sub    esp,0xc
c00165fb:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016600:	e8 17 98 00 00       	call   c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016605:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001660c:	89 c3                	mov    ebx,eax
c001660e:	e8 11 98 00 00       	call   c001fe24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016613:	58                   	pop    eax
c0016614:	5a                   	pop    edx
c0016615:	53                   	push   ebx
c0016616:	68 e4 c6 02 c0       	push   0xc002c6e4
c001661b:	e8 c0 98 00 00       	call   c001fee0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016620:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016623:	83 c4 10             	add    esp,0x10
c0016626:	39 30                	cmp    DWORD PTR [eax],esi
c0016628:	75 ba                	jne    c00165e4 <Thr::processFromPID(int)+0x2c>
c001662a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001662f:	83 e8 01             	sub    eax,0x1
c0016632:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016637:	74 0b                	je     c0016644 <Thr::processFromPID(int)+0x8c>
c0016639:	8d 76 00             	lea    esi,[esi+0x0]
c001663c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001663f:	90                   	nop
c0016640:	5b                   	pop    ebx
c0016641:	5e                   	pop    esi
c0016642:	5f                   	pop    edi
c0016643:	c3                   	ret    
c0016644:	fb                   	sti    
c0016645:	eb f5                	jmp    c001663c <Thr::processFromPID(int)+0x84>
c0016647:	90                   	nop
c0016648:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001664d:	8d 50 ff             	lea    edx,[eax-0x1]
c0016650:	31 c0                	xor    eax,eax
c0016652:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016658:	85 d2                	test   edx,edx
c001665a:	75 e4                	jne    c0016640 <Thr::processFromPID(int)+0x88>
c001665c:	fb                   	sti    
c001665d:	5b                   	pop    ebx
c001665e:	5e                   	pop    esi
c001665f:	5f                   	pop    edi
c0016660:	c3                   	ret    
c0016661:	8d 76 00             	lea    esi,[esi+0x0]

c0016664 <unblockTask(ThreadControlBlock*)>:
c0016664:	53                   	push   ebx
c0016665:	83 ec 08             	sub    esp,0x8
c0016668:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001666c:	fa                   	cli    
c001666d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016672:	83 c0 01             	add    eax,0x1
c0016675:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001667a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001667d:	85 c0                	test   eax,eax
c001667f:	74 67                	je     c00166e8 <unblockTask(ThreadControlBlock*)+0x84>
c0016681:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016684:	83 f8 01             	cmp    eax,0x1
c0016687:	74 37                	je     c00166c0 <unblockTask(ThreadControlBlock*)+0x5c>
c0016689:	83 ec 0c             	sub    esp,0xc
c001668c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016691:	e8 86 97 00 00       	call   c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016696:	83 c4 10             	add    esp,0x10
c0016699:	85 c0                	test   eax,eax
c001669b:	75 1b                	jne    c00166b8 <unblockTask(ThreadControlBlock*)+0x54>
c001669d:	eb 5d                	jmp    c00166fc <unblockTask(ThreadControlBlock*)+0x98>
c001669f:	90                   	nop
c00166a0:	83 ec 08             	sub    esp,0x8
c00166a3:	50                   	push   eax
c00166a4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166a9:	e8 8e 9a 00 00       	call   c002013c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00166ae:	83 c4 10             	add    esp,0x10
c00166b1:	85 c0                	test   eax,eax
c00166b3:	74 47                	je     c00166fc <unblockTask(ThreadControlBlock*)+0x98>
c00166b5:	8d 76 00             	lea    esi,[esi+0x0]
c00166b8:	39 c3                	cmp    ebx,eax
c00166ba:	75 e4                	jne    c00166a0 <unblockTask(ThreadControlBlock*)+0x3c>
c00166bc:	eb 12                	jmp    c00166d0 <unblockTask(ThreadControlBlock*)+0x6c>
c00166be:	66 90                	xchg   ax,ax
c00166c0:	83 ec 0c             	sub    esp,0xc
c00166c3:	68 f7 2a 02 c0       	push   0xc0022af7
c00166c8:	e8 9d 42 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c00166cd:	83 c4 10             	add    esp,0x10
c00166d0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00166d5:	83 e8 01             	sub    eax,0x1
c00166d8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00166dd:	75 01                	jne    c00166e0 <unblockTask(ThreadControlBlock*)+0x7c>
c00166df:	fb                   	sti    
c00166e0:	83 c4 08             	add    esp,0x8
c00166e3:	5b                   	pop    ebx
c00166e4:	c3                   	ret    
c00166e5:	8d 76 00             	lea    esi,[esi+0x0]
c00166e8:	83 ec 0c             	sub    esp,0xc
c00166eb:	68 e0 2a 02 c0       	push   0xc0022ae0
c00166f0:	e8 75 42 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c00166f5:	83 c4 10             	add    esp,0x10
c00166f8:	eb d6                	jmp    c00166d0 <unblockTask(ThreadControlBlock*)+0x6c>
c00166fa:	66 90                	xchg   ax,ax
c00166fc:	83 ec 08             	sub    esp,0x8
c00166ff:	53                   	push   ebx
c0016700:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016705:	e8 d6 97 00 00       	call   c001fee0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001670a:	83 c4 10             	add    esp,0x10
c001670d:	eb c1                	jmp    c00166d0 <unblockTask(ThreadControlBlock*)+0x6c>
c001670f:	90                   	nop

c0016710 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016710:	55                   	push   ebp
c0016711:	57                   	push   edi
c0016712:	56                   	push   esi
c0016713:	53                   	push   ebx
c0016714:	83 ec 1c             	sub    esp,0x1c
c0016717:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001671b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001671e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016724:	85 ed                	test   ebp,ebp
c0016726:	7e 28                	jle    c0016750 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016728:	31 f6                	xor    esi,esi
c001672a:	66 90                	xchg   ax,ax
c001672c:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016733:	83 ec 0c             	sub    esp,0xc
c0016736:	83 c6 01             	add    esi,0x1
c0016739:	57                   	push   edi
c001673a:	e8 04 14 ff ff       	call   c0007b43 <free>
c001673f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016742:	83 c4 10             	add    esp,0x10
c0016745:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001674b:	7f df                	jg     c001672c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001674d:	8d 76 00             	lea    esi,[esi+0x0]
c0016750:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001675a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001675f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016762:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016765:	d3 c0                	rol    eax,cl
c0016767:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001676e:	21 c8                	and    eax,ecx
c0016770:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016777:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001677a:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016782:	89 f7                	mov    edi,esi
c0016784:	0f 85 72 01 00 00    	jne    c00168fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001678a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016790:	85 ed                	test   ebp,ebp
c0016792:	74 1c                	je     c00167b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016794:	83 ec 0c             	sub    esp,0xc
c0016797:	55                   	push   ebp
c0016798:	e8 b3 ab ff ff       	call   c0011350 <EnvVarContainer::~EnvVarContainer()>
c001679d:	59                   	pop    ecx
c001679e:	5e                   	pop    esi
c001679f:	6a 0c                	push   0xc
c00167a1:	55                   	push   ebp
c00167a2:	e8 c5 40 ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c00167a7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167aa:	83 c4 10             	add    esp,0x10
c00167ad:	89 f7                	mov    edi,esi
c00167af:	90                   	nop
c00167b0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167b6:	85 c0                	test   eax,eax
c00167b8:	0f 84 b2 00 00 00    	je     c0016870 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00167be:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00167c1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00167c5:	31 c9                	xor    ecx,ecx
c00167c7:	eb 17                	jmp    c00167e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00167c9:	8d 76 00             	lea    esi,[esi+0x0]
c00167cc:	83 c1 01             	add    ecx,0x1
c00167cf:	83 f9 10             	cmp    ecx,0x10
c00167d2:	0f 84 98 00 00 00    	je     c0016870 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00167d8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167de:	66 90                	xchg   ax,ax
c00167e0:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00167e7:	d3 fa                	sar    edx,cl
c00167e9:	80 e2 01             	and    dl,0x1
c00167ec:	74 de                	je     c00167cc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167ee:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00167f1:	c1 e2 05             	shl    edx,0x5
c00167f4:	29 ca                	sub    edx,ecx
c00167f6:	01 d0                	add    eax,edx
c00167f8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00167fe:	83 fd 07             	cmp    ebp,0x7
c0016801:	75 c9                	jne    c00167cc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016803:	05 40 02 00 00       	add    eax,0x240
c0016808:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001680b:	83 fd ff             	cmp    ebp,0xffffffff
c001680e:	0f 8c f0 00 00 00    	jl     c0016904 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016814:	0f 84 ae 01 00 00    	je     c00169c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001681a:	85 ed                	test   ebp,ebp
c001681c:	0f 84 92 01 00 00    	je     c00169b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016822:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016824:	75 a6                	jne    c00167cc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016826:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001682a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016830:	01 d0                	add    eax,edx
c0016832:	66 90                	xchg   ax,ax
c0016834:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016838:	83 ec 0c             	sub    esp,0xc
c001683b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016841:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016844:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001684a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016851:	50                   	push   eax
c0016852:	e8 0d fe ff ff       	call   c0016664 <unblockTask(ThreadControlBlock*)>
c0016857:	83 c4 10             	add    esp,0x10
c001685a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001685d:	89 f7                	mov    edi,esi
c001685f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016863:	83 c1 01             	add    ecx,0x1
c0016866:	83 f9 10             	cmp    ecx,0x10
c0016869:	0f 85 69 ff ff ff    	jne    c00167d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001686f:	90                   	nop
c0016870:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016876:	85 c0                	test   eax,eax
c0016878:	74 62                	je     c00168dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001687a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016880:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016886:	74 54                	je     c00168dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016888:	83 ec 0c             	sub    esp,0xc
c001688b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016890:	e8 87 95 00 00       	call   c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016895:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001689c:	89 c7                	mov    edi,eax
c001689e:	e8 5d 95 00 00       	call   c001fe00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168a3:	83 c4 10             	add    esp,0x10
c00168a6:	84 c0                	test   al,al
c00168a8:	0f 84 ce 00 00 00    	je     c001697c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00168ae:	66 90                	xchg   ax,ax
c00168b0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168b3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00168b9:	85 d2                	test   edx,edx
c00168bb:	74 0f                	je     c00168cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00168bd:	8b 02                	mov    eax,DWORD PTR [edx]
c00168bf:	83 ec 0c             	sub    esp,0xc
c00168c2:	52                   	push   edx
c00168c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168c6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168c9:	83 c4 10             	add    esp,0x10
c00168cc:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00168d6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00168d9:	8d 76 00             	lea    esi,[esi+0x0]
c00168dc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00168e2:	85 db                	test   ebx,ebx
c00168e4:	74 16                	je     c00168fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00168e6:	83 ec 0c             	sub    esp,0xc
c00168e9:	53                   	push   ebx
c00168ea:	e8 01 33 ff ff       	call   c0009bf0 <VAS::~VAS()>
c00168ef:	58                   	pop    eax
c00168f0:	5a                   	pop    edx
c00168f1:	6a 14                	push   0x14
c00168f3:	53                   	push   ebx
c00168f4:	e8 73 3f ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c00168f9:	83 c4 10             	add    esp,0x10
c00168fc:	83 c4 1c             	add    esp,0x1c
c00168ff:	5b                   	pop    ebx
c0016900:	5e                   	pop    esi
c0016901:	5f                   	pop    edi
c0016902:	5d                   	pop    ebp
c0016903:	c3                   	ret    
c0016904:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016908:	83 ec 0c             	sub    esp,0xc
c001690b:	68 ac 2b 02 c0       	push   0xc0022bac
c0016910:	e8 2a ad ff ff       	call   c001163f <KePanic(char const*)>
c0016915:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016918:	83 c4 10             	add    esp,0x10
c001691b:	89 f7                	mov    edi,esi
c001691d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016921:	e9 a6 fe ff ff       	jmp    c00167cc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016926:	66 90                	xchg   ax,ax
c0016928:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001692e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016934:	75 1e                	jne    c0016954 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016936:	83 ec 0c             	sub    esp,0xc
c0016939:	68 14 2c 02 c0       	push   0xc0022c14
c001693e:	e8 27 40 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0016943:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001694a:	e8 1d fa ff ff       	call   c001636c <blockTask(TaskState)>
c001694f:	83 c4 10             	add    esp,0x10
c0016952:	66 90                	xchg   ax,ax
c0016954:	83 ec 08             	sub    esp,0x8
c0016957:	56                   	push   esi
c0016958:	68 e4 c6 02 c0       	push   0xc002c6e4
c001695d:	e8 7e 95 00 00       	call   c001fee0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016962:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016969:	e8 ae 94 00 00       	call   c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001696e:	83 c4 10             	add    esp,0x10
c0016971:	39 f8                	cmp    eax,edi
c0016973:	0f 84 37 ff ff ff    	je     c00168b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016979:	8d 76 00             	lea    esi,[esi+0x0]
c001697c:	83 ec 0c             	sub    esp,0xc
c001697f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016984:	e8 93 94 00 00       	call   c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016989:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016990:	89 c6                	mov    esi,eax
c0016992:	e8 8d 94 00 00       	call   c001fe24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016997:	83 c4 10             	add    esp,0x10
c001699a:	39 f3                	cmp    ebx,esi
c001699c:	74 b6                	je     c0016954 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001699e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00169a1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00169a4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00169aa:	75 a8                	jne    c0016954 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00169ac:	e9 77 ff ff ff       	jmp    c0016928 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00169b1:	8d 76 00             	lea    esi,[esi+0x0]
c00169b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00169b8:	83 ec 0c             	sub    esp,0xc
c00169bb:	68 e0 2b 02 c0       	push   0xc0022be0
c00169c0:	e9 4b ff ff ff       	jmp    c0016910 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00169c5:	8d 76 00             	lea    esi,[esi+0x0]
c00169c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00169cc:	8b 36                	mov    esi,DWORD PTR [esi]
c00169ce:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00169d1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00169d4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00169da:	01 d7                	add    edi,edx
c00169dc:	89 f8                	mov    eax,edi
c00169de:	e9 51 fe ff ff       	jmp    c0016834 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00169e3:	90                   	nop

c00169e4 <cleanerTaskFunction(void*)>:
c00169e4:	53                   	push   ebx
c00169e5:	83 ec 08             	sub    esp,0x8
c00169e8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169ed:	83 e8 01             	sub    eax,0x1
c00169f0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169f5:	75 01                	jne    c00169f8 <cleanerTaskFunction(void*)+0x14>
c00169f7:	fb                   	sti    
c00169f8:	fa                   	cli    
c00169f9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169fe:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016a05:	8d 50 01             	lea    edx,[eax+0x1]
c0016a08:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a0e:	0f 84 c4 00 00 00    	je     c0016ad8 <cleanerTaskFunction(void*)+0xf4>
c0016a14:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a19:	85 c0                	test   eax,eax
c0016a1b:	75 03                	jne    c0016a20 <cleanerTaskFunction(void*)+0x3c>
c0016a1d:	fb                   	sti    
c0016a1e:	66 90                	xchg   ax,ax
c0016a20:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c0016a27:	fa                   	cli    
c0016a28:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a2e:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a34:	83 c2 01             	add    edx,0x1
c0016a37:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a3d:	83 c1 01             	add    ecx,0x1
c0016a40:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a46:	fa                   	cli    
c0016a47:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016a4d:	83 c3 01             	add    ebx,0x1
c0016a50:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016a56:	eb 28                	jmp    c0016a80 <cleanerTaskFunction(void*)+0x9c>
c0016a58:	83 ec 0c             	sub    esp,0xc
c0016a5b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a60:	e8 b7 93 00 00       	call   c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a65:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016a6c:	89 c3                	mov    ebx,eax
c0016a6e:	e8 b1 93 00 00       	call   c001fe24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a76:	e8 95 fc ff ff       	call   c0016710 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016a7b:	83 c4 10             	add    esp,0x10
c0016a7e:	66 90                	xchg   ax,ax
c0016a80:	83 ec 0c             	sub    esp,0xc
c0016a83:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a88:	e8 73 93 00 00       	call   c001fe00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016a8d:	83 c4 10             	add    esp,0x10
c0016a90:	84 c0                	test   al,al
c0016a92:	74 c4                	je     c0016a58 <cleanerTaskFunction(void*)+0x74>
c0016a94:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a99:	83 e8 01             	sub    eax,0x1
c0016a9c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016aa1:	75 01                	jne    c0016aa4 <cleanerTaskFunction(void*)+0xc0>
c0016aa3:	fb                   	sti    
c0016aa4:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016aa9:	83 e8 01             	sub    eax,0x1
c0016aac:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016ab1:	0f 85 31 ff ff ff    	jne    c00169e8 <cleanerTaskFunction(void*)+0x4>
c0016ab7:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016abc:	85 c0                	test   eax,eax
c0016abe:	0f 84 24 ff ff ff    	je     c00169e8 <cleanerTaskFunction(void*)+0x4>
c0016ac4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016ace:	e8 99 f6 ff ff       	call   c001616c <schedule()>
c0016ad3:	e9 10 ff ff ff       	jmp    c00169e8 <cleanerTaskFunction(void*)+0x4>
c0016ad8:	83 ec 0c             	sub    esp,0xc
c0016adb:	6a 02                	push   0x2
c0016add:	e8 62 f8 ff ff       	call   c0016344 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016ae2:	83 c4 10             	add    esp,0x10
c0016ae5:	e9 36 ff ff ff       	jmp    c0016a20 <cleanerTaskFunction(void*)+0x3c>
c0016aea:	66 90                	xchg   ax,ax

c0016aec <terminateTask(int)>:
c0016aec:	83 ec 14             	sub    esp,0x14
c0016aef:	fa                   	cli    
c0016af0:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016af6:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016afc:	83 c2 01             	add    edx,0x1
c0016aff:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016b05:	83 c1 01             	add    ecx,0x1
c0016b08:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b0e:	fa                   	cli    
c0016b0f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b14:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b18:	83 c0 01             	add    eax,0x1
c0016b1b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b25:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016b28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b2d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016b30:	50                   	push   eax
c0016b31:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b36:	e8 a5 93 00 00       	call   c001fee0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016b3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b40:	83 c4 10             	add    esp,0x10
c0016b43:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016b4a:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016b4f:	85 c0                	test   eax,eax
c0016b51:	74 65                	je     c0016bb8 <terminateTask(int)+0xcc>
c0016b53:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016b5a:	83 ec 0c             	sub    esp,0xc
c0016b5d:	50                   	push   eax
c0016b5e:	e8 01 fb ff ff       	call   c0016664 <unblockTask(ThreadControlBlock*)>
c0016b63:	83 c4 10             	add    esp,0x10
c0016b66:	66 90                	xchg   ax,ax
c0016b68:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b6d:	83 e8 01             	sub    eax,0x1
c0016b70:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b75:	75 01                	jne    c0016b78 <terminateTask(int)+0x8c>
c0016b77:	fb                   	sti    
c0016b78:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b7d:	83 e8 01             	sub    eax,0x1
c0016b80:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b85:	75 09                	jne    c0016b90 <terminateTask(int)+0xa4>
c0016b87:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016b8e:	75 3c                	jne    c0016bcc <terminateTask(int)+0xe0>
c0016b90:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b95:	83 e8 01             	sub    eax,0x1
c0016b98:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b9d:	75 01                	jne    c0016ba0 <terminateTask(int)+0xb4>
c0016b9f:	fb                   	sti    
c0016ba0:	fa                   	cli    
c0016ba1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ba6:	83 c0 01             	add    eax,0x1
c0016ba9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bae:	66 90                	xchg   ax,ax
c0016bb0:	e8 b7 f5 ff ff       	call   c001616c <schedule()>
c0016bb5:	eb d9                	jmp    c0016b90 <terminateTask(int)+0xa4>
c0016bb7:	90                   	nop
c0016bb8:	83 ec 0c             	sub    esp,0xc
c0016bbb:	68 0e 2b 02 c0       	push   0xc0022b0e
c0016bc0:	e8 a5 3d ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0016bc5:	83 c4 10             	add    esp,0x10
c0016bc8:	eb 9e                	jmp    c0016b68 <terminateTask(int)+0x7c>
c0016bca:	66 90                	xchg   ax,ax
c0016bcc:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016bd6:	eb d8                	jmp    c0016bb0 <terminateTask(int)+0xc4>

c0016bd8 <Thr::terminateFromIRQ(int)>:
c0016bd8:	83 ec 18             	sub    esp,0x18
c0016bdb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bdf:	50                   	push   eax
c0016be0:	e8 07 ff ff ff       	call   c0016aec <terminateTask(int)>
c0016be5:	90                   	nop
c0016be6:	66 90                	xchg   ax,ax

c0016be8 <Semaphore::release()>:
c0016be8:	83 ec 0c             	sub    esp,0xc
c0016beb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016bef:	fa                   	cli    
c0016bf0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bf5:	83 c0 01             	add    eax,0x1
c0016bf8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bfd:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c02:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c05:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016c0b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016c0e:	85 c9                	test   ecx,ecx
c0016c10:	74 42                	je     c0016c54 <Semaphore::release()+0x6c>
c0016c12:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016c15:	83 ec 0c             	sub    esp,0xc
c0016c18:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016c1b:	51                   	push   ecx
c0016c1c:	e8 43 fa ff ff       	call   c0016664 <unblockTask(ThreadControlBlock*)>
c0016c21:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c26:	83 c4 10             	add    esp,0x10
c0016c29:	83 e8 01             	sub    eax,0x1
c0016c2c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016c31:	85 c0                	test   eax,eax
c0016c33:	75 0b                	jne    c0016c40 <Semaphore::release()+0x58>
c0016c35:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016c3a:	85 c0                	test   eax,eax
c0016c3c:	75 22                	jne    c0016c60 <Semaphore::release()+0x78>
c0016c3e:	66 90                	xchg   ax,ax
c0016c40:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c45:	83 e8 01             	sub    eax,0x1
c0016c48:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c4d:	75 01                	jne    c0016c50 <Semaphore::release()+0x68>
c0016c4f:	fb                   	sti    
c0016c50:	83 c4 0c             	add    esp,0xc
c0016c53:	c3                   	ret    
c0016c54:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016c57:	83 e9 01             	sub    ecx,0x1
c0016c5a:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016c5d:	eb cd                	jmp    c0016c2c <Semaphore::release()+0x44>
c0016c5f:	90                   	nop
c0016c60:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016c6a:	e8 fd f4 ff ff       	call   c001616c <schedule()>
c0016c6f:	eb cf                	jmp    c0016c40 <Semaphore::release()+0x58>
c0016c71:	8d 76 00             	lea    esi,[esi+0x0]

c0016c74 <__static_initialization_and_destruction_0(int, int)>:
c0016c74:	83 ec 0c             	sub    esp,0xc
c0016c77:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016c7c:	0f 85 8e 00 00 00    	jne    c0016d10 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c82:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016c8a:	0f 85 80 00 00 00    	jne    c0016d10 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c90:	83 ec 0c             	sub    esp,0xc
c0016c93:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c98:	e8 f7 94 00 00       	call   c0020194 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c9d:	83 c4 10             	add    esp,0x10
c0016ca0:	83 ec 04             	sub    esp,0x4
c0016ca3:	68 e4 37 02 c0       	push   0xc00237e4
c0016ca8:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016cad:	68 44 01 02 c0       	push   0xc0020144
c0016cb2:	e8 65 3b ff ff       	call   c000a81c <__cxa_atexit>
c0016cb7:	83 c4 10             	add    esp,0x10
c0016cba:	83 ec 0c             	sub    esp,0xc
c0016cbd:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016cc2:	e8 cd 94 00 00       	call   c0020194 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016cc7:	83 c4 10             	add    esp,0x10
c0016cca:	83 ec 04             	sub    esp,0x4
c0016ccd:	68 e4 37 02 c0       	push   0xc00237e4
c0016cd2:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016cd7:	68 44 01 02 c0       	push   0xc0020144
c0016cdc:	e8 3b 3b ff ff       	call   c000a81c <__cxa_atexit>
c0016ce1:	83 c4 10             	add    esp,0x10
c0016ce4:	83 ec 0c             	sub    esp,0xc
c0016ce7:	68 cc c6 02 c0       	push   0xc002c6cc
c0016cec:	e8 a3 94 00 00       	call   c0020194 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016cf1:	83 c4 10             	add    esp,0x10
c0016cf4:	83 ec 04             	sub    esp,0x4
c0016cf7:	68 e4 37 02 c0       	push   0xc00237e4
c0016cfc:	68 cc c6 02 c0       	push   0xc002c6cc
c0016d01:	68 44 01 02 c0       	push   0xc0020144
c0016d06:	e8 11 3b ff ff       	call   c000a81c <__cxa_atexit>
c0016d0b:	83 c4 10             	add    esp,0x10
c0016d0e:	66 90                	xchg   ax,ax
c0016d10:	90                   	nop
c0016d11:	83 c4 0c             	add    esp,0xc
c0016d14:	c3                   	ret    
c0016d15:	8d 76 00             	lea    esi,[esi+0x0]

c0016d18 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016d18:	83 ec 0c             	sub    esp,0xc
c0016d1b:	83 ec 08             	sub    esp,0x8
c0016d1e:	68 ff ff 00 00       	push   0xffff
c0016d23:	6a 01                	push   0x1
c0016d25:	e8 4a ff ff ff       	call   c0016c74 <__static_initialization_and_destruction_0(int, int)>
c0016d2a:	83 c4 10             	add    esp,0x10
c0016d2d:	83 c4 0c             	add    esp,0xc
c0016d30:	c3                   	ret    

c0016d31 <Vm::inbv(unsigned short)>:
c0016d31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d35:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d3a:	75 06                	jne    c0016d42 <Vm::inbv(unsigned short)+0x11>
c0016d3c:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016d41:	c3                   	ret    
c0016d42:	ec                   	in     al,dx
c0016d43:	c3                   	ret    

c0016d44 <Vm::outbv(unsigned short, unsigned char)>:
c0016d44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d4c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d51:	75 25                	jne    c0016d78 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016d53:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016d59:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016d5f:	8d 51 01             	lea    edx,[ecx+0x1]
c0016d62:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016d68:	83 fa 20             	cmp    edx,0x20
c0016d6b:	75 0c                	jne    c0016d79 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016d6d:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016d77:	c3                   	ret    
c0016d78:	ee                   	out    dx,al
c0016d79:	c3                   	ret    

c0016d7a <Vm::realToLinear(unsigned short, unsigned short)>:
c0016d7a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d7f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d84:	c1 e0 04             	shl    eax,0x4
c0016d87:	01 d0                	add    eax,edx
c0016d89:	c3                   	ret    

c0016d8a <Vm::getSegment(unsigned int)>:
c0016d8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d8e:	c1 e8 10             	shr    eax,0x10
c0016d91:	c3                   	ret    

c0016d92 <Vm::getOffset(unsigned int)>:
c0016d92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d96:	c3                   	ret    

c0016d97 <Vm::mainloop2()>:
c0016d97:	83 ec 18             	sub    esp,0x18
c0016d9a:	fa                   	cli    
c0016d9b:	6a 02                	push   0x2
c0016d9d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016da3:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016daa:	e8 95 f5 ff ff       	call   c0016344 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016daf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016db4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016db8:	52                   	push   edx
c0016db9:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016dbd:	52                   	push   edx
c0016dbe:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016dc2:	52                   	push   edx
c0016dc3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016dc7:	50                   	push   eax
c0016dc8:	e8 42 94 fe ff       	call   c000020f <goToVM86>
c0016dcd:	83 c4 2c             	add    esp,0x2c
c0016dd0:	c3                   	ret    

c0016dd1 <Vm::mainVm8086Loop(void*)>:
c0016dd1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016dd6:	48                   	dec    eax
c0016dd7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ddc:	75 01                	jne    c0016ddf <Vm::mainVm8086Loop(void*)+0xe>
c0016dde:	fb                   	sti    
c0016ddf:	eb b6                	jmp    c0016d97 <Vm::mainloop2()>

c0016de1 <Vm::mainloop3(unsigned long)>:
c0016de1:	83 ec 18             	sub    esp,0x18
c0016de4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016de8:	fa                   	cli    
c0016de9:	6a 02                	push   0x2
c0016deb:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016df1:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016df8:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016dfd:	e8 42 f5 ff ff       	call   c0016344 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016e02:	83 c4 1c             	add    esp,0x1c
c0016e05:	eb 90                	jmp    c0016d97 <Vm::mainloop2()>

c0016e07 <Vm::initialise8086()>:
c0016e07:	83 ec 0c             	sub    esp,0xc
c0016e0a:	68 80 00 00 00       	push   0x80
c0016e0f:	6a 00                	push   0x0
c0016e11:	68 d1 6d 01 c0       	push   0xc0016dd1
c0016e16:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016e1c:	e8 ff f0 ff ff       	call   c0015f20 <Process::createThread(void (*)(void*), void*, int)>
c0016e21:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016e28:	68 00 01 00 00       	push   0x100
c0016e2d:	6a 00                	push   0x0
c0016e2f:	6a 00                	push   0x0
c0016e31:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016e36:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016e3b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e41:	e8 22 31 ff ff       	call   c0009f68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016e46:	83 c4 2c             	add    esp,0x2c
c0016e49:	c3                   	ret    

c0016e4a <Vm::finish8086()>:
c0016e4a:	53                   	push   ebx
c0016e4b:	83 ec 08             	sub    esp,0x8
c0016e4e:	fa                   	cli    
c0016e4f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e55:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016e5c:	75 15                	jne    c0016e73 <Vm::finish8086()+0x29>
c0016e5e:	e8 09 f3 ff ff       	call   c001616c <schedule()>
c0016e63:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e68:	48                   	dec    eax
c0016e69:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e6e:	75 de                	jne    c0016e4e <Vm::finish8086()+0x4>
c0016e70:	fb                   	sti    
c0016e71:	eb db                	jmp    c0016e4e <Vm::finish8086()+0x4>
c0016e73:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016e7a:	83 ec 0c             	sub    esp,0xc
c0016e7d:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016e83:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e89:	e8 d6 f7 ff ff       	call   c0016664 <unblockTask(ThreadControlBlock*)>
c0016e8e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e93:	83 c4 10             	add    esp,0x10
c0016e96:	8d 50 ff             	lea    edx,[eax-0x1]
c0016e99:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016e9f:	85 d2                	test   edx,edx
c0016ea1:	75 01                	jne    c0016ea4 <Vm::finish8086()+0x5a>
c0016ea3:	fb                   	sti    
c0016ea4:	83 c4 08             	add    esp,0x8
c0016ea7:	89 d8                	mov    eax,ebx
c0016ea9:	5b                   	pop    ebx
c0016eaa:	c3                   	ret    

c0016eab <Vm::getOutput8086(unsigned char*)>:
c0016eab:	57                   	push   edi
c0016eac:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016eb2:	56                   	push   esi
c0016eb3:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016eb8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016ebc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ebe:	5e                   	pop    esi
c0016ebf:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016ec4:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016ece:	5f                   	pop    edi
c0016ecf:	c3                   	ret    

c0016ed0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ed0:	55                   	push   ebp
c0016ed1:	57                   	push   edi
c0016ed2:	56                   	push   esi
c0016ed3:	53                   	push   ebx
c0016ed4:	83 ec 0c             	sub    esp,0xc
c0016ed7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016edb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016edf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ee3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016ee7:	fa                   	cli    
c0016ee8:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016eee:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016ef5:	75 15                	jne    c0016f0c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016ef7:	e8 70 f2 ff ff       	call   c001616c <schedule()>
c0016efc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f01:	48                   	dec    eax
c0016f02:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f07:	75 de                	jne    c0016ee7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f09:	fb                   	sti    
c0016f0a:	eb db                	jmp    c0016ee7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f0c:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f16:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f1b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f1f:	0f b7 ff             	movzx  edi,di
c0016f22:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f26:	0f b7 f6             	movzx  esi,si
c0016f29:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f2d:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016f31:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f35:	50                   	push   eax
c0016f36:	6a 20                	push   0x20
c0016f38:	6a 00                	push   0x0
c0016f3a:	68 40 c7 02 c0       	push   0xc002c740
c0016f3f:	e8 ac 95 fe ff       	call   c00004f0 <memset>
c0016f44:	5a                   	pop    edx
c0016f45:	59                   	pop    ecx
c0016f46:	57                   	push   edi
c0016f47:	56                   	push   esi
c0016f48:	e8 2d fe ff ff       	call   c0016d7a <Vm::realToLinear(unsigned short, unsigned short)>
c0016f4d:	83 c4 10             	add    esp,0x10
c0016f50:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016f54:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016f58:	89 c7                	mov    edi,eax
c0016f5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f5c:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016f63:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f68:	48                   	dec    eax
c0016f69:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f6e:	75 01                	jne    c0016f71 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016f70:	fb                   	sti    
c0016f71:	83 ec 0c             	sub    esp,0xc
c0016f74:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016f7a:	e8 e5 f6 ff ff       	call   c0016664 <unblockTask(ThreadControlBlock*)>
c0016f7f:	83 c4 1c             	add    esp,0x1c
c0016f82:	b0 01                	mov    al,0x1
c0016f84:	5b                   	pop    ebx
c0016f85:	5e                   	pop    esi
c0016f86:	5f                   	pop    edi
c0016f87:	5d                   	pop    ebp
c0016f88:	c3                   	ret    

c0016f89 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016f89:	55                   	push   ebp
c0016f8a:	57                   	push   edi
c0016f8b:	56                   	push   esi
c0016f8c:	53                   	push   ebx
c0016f8d:	83 ec 34             	sub    esp,0x34
c0016f90:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016f94:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016f98:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016f9c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016fa0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016fa4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016fa8:	68 3c 2c 02 c0       	push   0xc0022c3c
c0016fad:	e8 b8 39 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0016fb2:	83 c4 10             	add    esp,0x10
c0016fb5:	fa                   	cli    
c0016fb6:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016fbc:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016fc2:	84 db                	test   bl,bl
c0016fc4:	75 15                	jne    c0016fdb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016fc6:	e8 a1 f1 ff ff       	call   c001616c <schedule()>
c0016fcb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fd0:	48                   	dec    eax
c0016fd1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fd6:	75 dd                	jne    c0016fb5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016fd8:	fb                   	sti    
c0016fd9:	eb da                	jmp    c0016fb5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016fdb:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016fe5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fe9:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016fee:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016ff2:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016ff6:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016ffa:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016ffe:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0017002:	50                   	push   eax
c0017003:	6a 20                	push   0x20
c0017005:	6a 00                	push   0x0
c0017007:	68 40 c7 02 c0       	push   0xc002c740
c001700c:	e8 df 94 fe ff       	call   c00004f0 <memset>
c0017011:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017018:	e8 16 0b ff ff       	call   c0007b33 <malloc>
c001701d:	83 c4 0c             	add    esp,0xc
c0017020:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0017026:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001702a:	89 c5                	mov    ebp,eax
c001702c:	50                   	push   eax
c001702d:	e8 50 4b ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0017032:	83 c4 10             	add    esp,0x10
c0017035:	85 ed                	test   ebp,ebp
c0017037:	75 0a                	jne    c0017043 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0017039:	83 ec 0c             	sub    esp,0xc
c001703c:	68 5e 2c 02 c0       	push   0xc0022c5e
c0017041:	eb 2b                	jmp    c001706e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0017043:	50                   	push   eax
c0017044:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017048:	50                   	push   eax
c0017049:	8d 44 24 20          	lea    eax,[esp+0x20]
c001704d:	50                   	push   eax
c001704e:	55                   	push   ebp
c001704f:	e8 4e 4e ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c0017054:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017058:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001705c:	83 c4 10             	add    esp,0x10
c001705f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0017064:	74 27                	je     c001708d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0017066:	83 ec 0c             	sub    esp,0xc
c0017069:	68 72 2c 02 c0       	push   0xc0022c72
c001706e:	e8 cc a5 ff ff       	call   c001163f <KePanic(char const*)>
c0017073:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017078:	83 c4 10             	add    esp,0x10
c001707b:	48                   	dec    eax
c001707c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017081:	85 c0                	test   eax,eax
c0017083:	75 01                	jne    c0017086 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017085:	fb                   	sti    
c0017086:	31 db                	xor    ebx,ebx
c0017088:	e9 90 00 00 00       	jmp    c001711d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c001708d:	51                   	push   ecx
c001708e:	51                   	push   ecx
c001708f:	6a 01                	push   0x1
c0017091:	55                   	push   ebp
c0017092:	e8 09 4b ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0017097:	83 c4 10             	add    esp,0x10
c001709a:	85 c0                	test   eax,eax
c001709c:	74 26                	je     c00170c4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c001709e:	83 ec 0c             	sub    esp,0xc
c00170a1:	68 8b 2c 02 c0       	push   0xc0022c8b
c00170a6:	e8 94 a5 ff ff       	call   c001163f <KePanic(char const*)>
c00170ab:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00170b0:	83 c4 10             	add    esp,0x10
c00170b3:	48                   	dec    eax
c00170b4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00170b9:	85 c0                	test   eax,eax
c00170bb:	75 c9                	jne    c0017086 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00170bd:	fb                   	sti    
c00170be:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00170c2:	eb 59                	jmp    c001711d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00170c4:	50                   	push   eax
c00170c5:	0f b7 ff             	movzx  edi,di
c00170c8:	50                   	push   eax
c00170c9:	0f b7 f6             	movzx  esi,si
c00170cc:	57                   	push   edi
c00170cd:	56                   	push   esi
c00170ce:	e8 a7 fc ff ff       	call   c0016d7a <Vm::realToLinear(unsigned short, unsigned short)>
c00170d3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00170d6:	5a                   	pop    edx
c00170d7:	8d 74 24 20          	lea    esi,[esp+0x20]
c00170db:	56                   	push   esi
c00170dc:	50                   	push   eax
c00170dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170e5:	55                   	push   ebp
c00170e6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170e9:	83 c4 14             	add    esp,0x14
c00170ec:	55                   	push   ebp
c00170ed:	e8 0c 4b ff ff       	call   c000bbfe <File::close()>
c00170f2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00170f7:	83 c4 10             	add    esp,0x10
c00170fa:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0017101:	48                   	dec    eax
c0017102:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017107:	85 c0                	test   eax,eax
c0017109:	75 01                	jne    c001710c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001710b:	fb                   	sti    
c001710c:	83 ec 0c             	sub    esp,0xc
c001710f:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0017115:	e8 4a f5 ff ff       	call   c0016664 <unblockTask(ThreadControlBlock*)>
c001711a:	83 c4 10             	add    esp,0x10
c001711d:	83 c4 2c             	add    esp,0x2c
c0017120:	88 d8                	mov    al,bl
c0017122:	5b                   	pop    ebx
c0017123:	5e                   	pop    esi
c0017124:	5f                   	pop    edi
c0017125:	5d                   	pop    ebp
c0017126:	c3                   	ret    

c0017127 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017127:	57                   	push   edi
c0017128:	56                   	push   esi
c0017129:	53                   	push   ebx
c001712a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001712e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017132:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017136:	83 e8 06             	sub    eax,0x6
c0017139:	0f b7 c0             	movzx  eax,ax
c001713c:	50                   	push   eax
c001713d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017142:	50                   	push   eax
c0017143:	e8 32 fc ff ff       	call   c0016d7a <Vm::realToLinear(unsigned short, unsigned short)>
c0017148:	5a                   	pop    edx
c0017149:	59                   	pop    ecx
c001714a:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c001714d:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017150:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0017153:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017159:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001715c:	8d 51 02             	lea    edx,[ecx+0x2]
c001715f:	66 89 10             	mov    WORD PTR [eax],dx
c0017162:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017166:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001716a:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c001716e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017171:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017175:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001717b:	89 f1                	mov    ecx,esi
c001717d:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0017181:	89 f2                	mov    edx,esi
c0017183:	0f b6 d6             	movzx  edx,dh
c0017186:	0f b6 f1             	movzx  esi,cl
c0017189:	74 0a                	je     c0017195 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c001718b:	c1 e2 08             	shl    edx,0x8
c001718e:	09 f2                	or     edx,esi
c0017190:	80 ce 02             	or     dh,0x2
c0017193:	eb 08                	jmp    c001719d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0017195:	c1 e2 08             	shl    edx,0x8
c0017198:	09 f2                	or     edx,esi
c001719a:	80 e6 fd             	and    dh,0xfd
c001719d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00171a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171a6:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00171aa:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00171b2:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00171b5:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00171bd:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00171c0:	5b                   	pop    ebx
c00171c1:	5e                   	pop    esi
c00171c2:	5f                   	pop    edi
c00171c3:	c3                   	ret    

c00171c4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00171c4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171c9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171ce:	c1 e0 04             	shl    eax,0x4
c00171d1:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00171d4:	c3                   	ret    

c00171d5 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00171d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171da:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171df:	c1 e0 04             	shl    eax,0x4
c00171e2:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00171e6:	c3                   	ret    

c00171e7 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00171e7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171ec:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171f1:	c1 e0 04             	shl    eax,0x4
c00171f4:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00171f7:	c3                   	ret    

c00171f8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00171f8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171fd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017202:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017206:	c1 e0 04             	shl    eax,0x4
c0017209:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001720c:	c3                   	ret    

c001720d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001720d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017212:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017217:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001721b:	c1 e0 04             	shl    eax,0x4
c001721e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017222:	c3                   	ret    

c0017223 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017223:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017228:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001722d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017231:	c1 e0 04             	shl    eax,0x4
c0017234:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017237:	c3                   	ret    

c0017238 <Vm::faultHandler(regs*)>:
c0017238:	55                   	push   ebp
c0017239:	57                   	push   edi
c001723a:	56                   	push   esi
c001723b:	53                   	push   ebx
c001723c:	83 ec 2c             	sub    esp,0x2c
c001723f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017243:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017246:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001724a:	0f b7 f8             	movzx  edi,ax
c001724d:	0f b7 c0             	movzx  eax,ax
c0017250:	52                   	push   edx
c0017251:	50                   	push   eax
c0017252:	e8 23 fb ff ff       	call   c0016d7a <Vm::realToLinear(unsigned short, unsigned short)>
c0017257:	5a                   	pop    edx
c0017258:	59                   	pop    ecx
c0017259:	89 c1                	mov    ecx,eax
c001725b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001725e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017262:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017267:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001726b:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001726e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017272:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017277:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001727b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001727f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017283:	e8 f2 fa ff ff       	call   c0016d7a <Vm::realToLinear(unsigned short, unsigned short)>
c0017288:	5e                   	pop    esi
c0017289:	be 06 00 00 00       	mov    esi,0x6
c001728e:	5d                   	pop    ebp
c001728f:	31 ed                	xor    ebp,ebp
c0017291:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017296:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017299:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001729f:	0f 84 74 02 00 00    	je     c0017519 <Vm::faultHandler(regs*)+0x2e1>
c00172a5:	0f 87 94 00 00 00    	ja     c001733f <Vm::faultHandler(regs*)+0x107>
c00172ab:	83 fa 66             	cmp    edx,0x66
c00172ae:	0f 84 e2 01 00 00    	je     c0017496 <Vm::faultHandler(regs*)+0x25e>
c00172b4:	77 47                	ja     c00172fd <Vm::faultHandler(regs*)+0xc5>
c00172b6:	83 fa 36             	cmp    edx,0x36
c00172b9:	0f 84 ca 01 00 00    	je     c0017489 <Vm::faultHandler(regs*)+0x251>
c00172bf:	77 1a                	ja     c00172db <Vm::faultHandler(regs*)+0xa3>
c00172c1:	83 fa 26             	cmp    edx,0x26
c00172c4:	0f 84 98 01 00 00    	je     c0017462 <Vm::faultHandler(regs*)+0x22a>
c00172ca:	83 fa 2e             	cmp    edx,0x2e
c00172cd:	0f 85 27 06 00 00    	jne    c00178fa <Vm::faultHandler(regs*)+0x6c2>
c00172d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172d6:	31 f6                	xor    esi,esi
c00172d8:	41                   	inc    ecx
c00172d9:	eb bb                	jmp    c0017296 <Vm::faultHandler(regs*)+0x5e>
c00172db:	83 fa 64             	cmp    edx,0x64
c00172de:	0f 84 8b 01 00 00    	je     c001746f <Vm::faultHandler(regs*)+0x237>
c00172e4:	0f 87 92 01 00 00    	ja     c001747c <Vm::faultHandler(regs*)+0x244>
c00172ea:	83 fa 3e             	cmp    edx,0x3e
c00172ed:	0f 85 07 06 00 00    	jne    c00178fa <Vm::faultHandler(regs*)+0x6c2>
c00172f3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172f6:	be 01 00 00 00       	mov    esi,0x1
c00172fb:	eb db                	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c00172fd:	83 fa 6d             	cmp    edx,0x6d
c0017300:	0f 84 34 03 00 00    	je     c001763a <Vm::faultHandler(regs*)+0x402>
c0017306:	77 17                	ja     c001731f <Vm::faultHandler(regs*)+0xe7>
c0017308:	83 fa 67             	cmp    edx,0x67
c001730b:	0f 84 92 01 00 00    	je     c00174a3 <Vm::faultHandler(regs*)+0x26b>
c0017311:	83 fa 6c             	cmp    edx,0x6c
c0017314:	0f 84 b1 02 00 00    	je     c00175cb <Vm::faultHandler(regs*)+0x393>
c001731a:	e9 db 05 00 00       	jmp    c00178fa <Vm::faultHandler(regs*)+0x6c2>
c001731f:	83 fa 6f             	cmp    edx,0x6f
c0017322:	0f 84 40 04 00 00    	je     c0017768 <Vm::faultHandler(regs*)+0x530>
c0017328:	0f 82 a2 03 00 00    	jb     c00176d0 <Vm::faultHandler(regs*)+0x498>
c001732e:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017334:	0f 84 76 01 00 00    	je     c00174b0 <Vm::faultHandler(regs*)+0x278>
c001733a:	e9 bb 05 00 00       	jmp    c00178fa <Vm::faultHandler(regs*)+0x6c2>
c001733f:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017345:	0f 84 57 05 00 00    	je     c00178a2 <Vm::faultHandler(regs*)+0x66a>
c001734b:	0f 87 a9 00 00 00    	ja     c00173fa <Vm::faultHandler(regs*)+0x1c2>
c0017351:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0017357:	0f 84 d6 04 00 00    	je     c0017833 <Vm::faultHandler(regs*)+0x5fb>
c001735d:	77 78                	ja     c00173d7 <Vm::faultHandler(regs*)+0x19f>
c001735f:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017365:	0f 84 0e 02 00 00    	je     c0017579 <Vm::faultHandler(regs*)+0x341>
c001736b:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017371:	0f 85 83 05 00 00    	jne    c00178fa <Vm::faultHandler(regs*)+0x6c2>
c0017377:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001737b:	89 d1                	mov    ecx,edx
c001737d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017380:	c1 e1 08             	shl    ecx,0x8
c0017383:	09 ca                	or     edx,ecx
c0017385:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017388:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001738c:	89 d1                	mov    ecx,edx
c001738e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017392:	c1 e1 08             	shl    ecx,0x8
c0017395:	09 ca                	or     edx,ecx
c0017397:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001739a:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001739e:	89 d1                	mov    ecx,edx
c00173a0:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00173a4:	c1 e1 08             	shl    ecx,0x8
c00173a7:	09 ca                	or     edx,ecx
c00173a9:	81 ca 00 02 02 00    	or     edx,0x20200
c00173af:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00173b2:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00173b6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173bc:	d1 e8                	shr    eax,1
c00173be:	83 e0 01             	and    eax,0x1
c00173c1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00173c4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00173c7:	83 c0 06             	add    eax,0x6
c00173ca:	25 ff ff 00 00       	and    eax,0xffff
c00173cf:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00173d2:	e9 1f 05 00 00       	jmp    c00178f6 <Vm::faultHandler(regs*)+0x6be>
c00173d7:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00173dd:	0f 84 95 04 00 00    	je     c0017878 <Vm::faultHandler(regs*)+0x640>
c00173e3:	0f 82 66 04 00 00    	jb     c001784f <Vm::faultHandler(regs*)+0x617>
c00173e9:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00173ef:	0f 84 9a 04 00 00    	je     c001788f <Vm::faultHandler(regs*)+0x657>
c00173f5:	e9 00 05 00 00       	jmp    c00178fa <Vm::faultHandler(regs*)+0x6c2>
c00173fa:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017400:	0f 84 dd 04 00 00    	je     c00178e3 <Vm::faultHandler(regs*)+0x6ab>
c0017406:	77 2e                	ja     c0017436 <Vm::faultHandler(regs*)+0x1fe>
c0017408:	81 fa ed 00 00 00    	cmp    edx,0xed
c001740e:	0f 84 aa 04 00 00    	je     c00178be <Vm::faultHandler(regs*)+0x686>
c0017414:	81 fa ee 00 00 00    	cmp    edx,0xee
c001741a:	0f 85 da 04 00 00    	jne    c00178fa <Vm::faultHandler(regs*)+0x6c2>
c0017420:	50                   	push   eax
c0017421:	50                   	push   eax
c0017422:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017426:	50                   	push   eax
c0017427:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001742b:	50                   	push   eax
c001742c:	e8 13 f9 ff ff       	call   c0016d44 <Vm::outbv(unsigned short, unsigned char)>
c0017431:	e9 a5 04 00 00       	jmp    c00178db <Vm::faultHandler(regs*)+0x6a3>
c0017436:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001743c:	0f 84 6d 01 00 00    	je     c00175af <Vm::faultHandler(regs*)+0x377>
c0017442:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017448:	0f 84 6f 01 00 00    	je     c00175bd <Vm::faultHandler(regs*)+0x385>
c001744e:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017454:	0f 85 a0 04 00 00    	jne    c00178fa <Vm::faultHandler(regs*)+0x6c2>
c001745a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001745d:	e9 76 fe ff ff       	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c0017462:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017465:	be 02 00 00 00       	mov    esi,0x2
c001746a:	e9 69 fe ff ff       	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c001746f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017472:	be 03 00 00 00       	mov    esi,0x3
c0017477:	e9 5c fe ff ff       	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c001747c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001747f:	be 04 00 00 00       	mov    esi,0x4
c0017484:	e9 4f fe ff ff       	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c0017489:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001748c:	be 05 00 00 00       	mov    esi,0x5
c0017491:	e9 42 fe ff ff       	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c0017496:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017499:	bd 01 00 00 00       	mov    ebp,0x1
c001749e:	e9 35 fe ff ff       	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c00174a3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174a6:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00174ab:	e9 28 fe ff ff       	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c00174b0:	83 e5 01             	and    ebp,0x1
c00174b3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00174b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00174ba:	74 30                	je     c00174ec <Vm::faultHandler(regs*)+0x2b4>
c00174bc:	83 e9 04             	sub    ecx,0x4
c00174bf:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00174c5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00174cb:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00174ce:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00174d1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00174d7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00174db:	0f 84 12 04 00 00    	je     c00178f3 <Vm::faultHandler(regs*)+0x6bb>
c00174e1:	80 ce 02             	or     dh,0x2
c00174e4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00174e7:	e9 07 04 00 00       	jmp    c00178f3 <Vm::faultHandler(regs*)+0x6bb>
c00174ec:	83 e9 02             	sub    ecx,0x2
c00174ef:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00174f5:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00174f8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00174fc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017502:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017506:	74 05                	je     c001750d <Vm::faultHandler(regs*)+0x2d5>
c0017508:	80 ce 02             	or     dh,0x2
c001750b:	eb 03                	jmp    c0017510 <Vm::faultHandler(regs*)+0x2d8>
c001750d:	80 e6 fd             	and    dh,0xfd
c0017510:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017514:	e9 da 03 00 00       	jmp    c00178f3 <Vm::faultHandler(regs*)+0x6bb>
c0017519:	83 e5 01             	and    ebp,0x1
c001751c:	74 2a                	je     c0017548 <Vm::faultHandler(regs*)+0x310>
c001751e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017520:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017526:	81 ca 00 02 02 00    	or     edx,0x20200
c001752c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001752f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017531:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017537:	c1 e8 09             	shr    eax,0x9
c001753a:	83 e0 01             	and    eax,0x1
c001753d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017540:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017543:	83 c0 04             	add    eax,0x4
c0017546:	eb 24                	jmp    c001756c <Vm::faultHandler(regs*)+0x334>
c0017548:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001754b:	81 ca 00 02 02 00    	or     edx,0x20200
c0017551:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017554:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017557:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001755d:	c1 e8 09             	shr    eax,0x9
c0017560:	83 e0 01             	and    eax,0x1
c0017563:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017566:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017569:	83 c0 02             	add    eax,0x2
c001756c:	25 ff ff 00 00       	and    eax,0xffff
c0017571:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017574:	e9 7a 03 00 00       	jmp    c00178f3 <Vm::faultHandler(regs*)+0x6bb>
c0017579:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001757d:	3d ee 00 00 00       	cmp    eax,0xee
c0017582:	75 10                	jne    c0017594 <Vm::faultHandler(regs*)+0x35c>
c0017584:	83 ec 0c             	sub    esp,0xc
c0017587:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001758a:	e8 52 f8 ff ff       	call   c0016de1 <Vm::mainloop3(unsigned long)>
c001758f:	e9 4a 03 00 00       	jmp    c00178de <Vm::faultHandler(regs*)+0x6a6>
c0017594:	83 ec 0c             	sub    esp,0xc
c0017597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001759b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001759f:	51                   	push   ecx
c00175a0:	50                   	push   eax
c00175a1:	53                   	push   ebx
c00175a2:	e8 80 fb ff ff       	call   c0017127 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00175a7:	83 c4 20             	add    esp,0x20
c00175aa:	e9 47 03 00 00       	jmp    c00178f6 <Vm::faultHandler(regs*)+0x6be>
c00175af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175b4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00175b8:	e9 36 03 00 00       	jmp    c00178f3 <Vm::faultHandler(regs*)+0x6bb>
c00175bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175c2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00175c6:	e9 28 03 00 00       	jmp    c00178f3 <Vm::faultHandler(regs*)+0x6bb>
c00175cb:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175d0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00175d3:	74 2b                	je     c0017600 <Vm::faultHandler(regs*)+0x3c8>
c00175d5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00175dc:	76 22                	jbe    c0017600 <Vm::faultHandler(regs*)+0x3c8>
c00175de:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175e2:	50                   	push   eax
c00175e3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175e7:	50                   	push   eax
c00175e8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175ec:	50                   	push   eax
c00175ed:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175f1:	50                   	push   eax
c00175f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175f6:	50                   	push   eax
c00175f7:	6a 6c                	push   0x6c
c00175f9:	6a 6c                	push   0x6c
c00175fb:	e9 c0 01 00 00       	jmp    c00177c0 <Vm::faultHandler(regs*)+0x588>
c0017600:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017604:	83 ec 0c             	sub    esp,0xc
c0017607:	0f b7 f6             	movzx  esi,si
c001760a:	50                   	push   eax
c001760b:	e8 21 f7 ff ff       	call   c0016d31 <Vm::inbv(unsigned short)>
c0017610:	83 c4 0c             	add    esp,0xc
c0017613:	0f b6 c0             	movzx  eax,al
c0017616:	50                   	push   eax
c0017617:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001761b:	50                   	push   eax
c001761c:	56                   	push   esi
c001761d:	e8 d6 fb ff ff       	call   c00171f8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017622:	83 c4 10             	add    esp,0x10
c0017625:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017628:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001762c:	74 03                	je     c0017631 <Vm::faultHandler(regs*)+0x3f9>
c001762e:	48                   	dec    eax
c001762f:	eb 01                	jmp    c0017632 <Vm::faultHandler(regs*)+0x3fa>
c0017631:	40                   	inc    eax
c0017632:	0f b7 c0             	movzx  eax,ax
c0017635:	e9 8e 00 00 00       	jmp    c00176c8 <Vm::faultHandler(regs*)+0x490>
c001763a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001763f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017642:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017645:	74 29                	je     c0017670 <Vm::faultHandler(regs*)+0x438>
c0017647:	3d ff ff 00 00       	cmp    eax,0xffff
c001764c:	76 22                	jbe    c0017670 <Vm::faultHandler(regs*)+0x438>
c001764e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017652:	50                   	push   eax
c0017653:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017657:	50                   	push   eax
c0017658:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001765c:	50                   	push   eax
c001765d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017661:	50                   	push   eax
c0017662:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017666:	50                   	push   eax
c0017667:	6a 6d                	push   0x6d
c0017669:	6a 6d                	push   0x6d
c001766b:	e9 50 01 00 00       	jmp    c00177c0 <Vm::faultHandler(regs*)+0x588>
c0017670:	83 e5 01             	and    ebp,0x1
c0017673:	0f b7 c8             	movzx  ecx,ax
c0017676:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017679:	0f b7 f6             	movzx  esi,si
c001767c:	74 1e                	je     c001769c <Vm::faultHandler(regs*)+0x464>
c001767e:	ed                   	in     eax,dx
c001767f:	55                   	push   ebp
c0017680:	50                   	push   eax
c0017681:	51                   	push   ecx
c0017682:	56                   	push   esi
c0017683:	e8 9b fb ff ff       	call   c0017223 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017688:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001768b:	83 c4 10             	add    esp,0x10
c001768e:	8d 50 04             	lea    edx,[eax+0x4]
c0017691:	83 e8 04             	sub    eax,0x4
c0017694:	81 e2 ff ff 00 00    	and    edx,0xffff
c001769a:	eb 20                	jmp    c00176bc <Vm::faultHandler(regs*)+0x484>
c001769c:	66 ed                	in     ax,dx
c001769e:	57                   	push   edi
c001769f:	0f b7 c0             	movzx  eax,ax
c00176a2:	50                   	push   eax
c00176a3:	51                   	push   ecx
c00176a4:	56                   	push   esi
c00176a5:	e8 63 fb ff ff       	call   c001720d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00176aa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176ad:	83 c4 10             	add    esp,0x10
c00176b0:	8d 50 02             	lea    edx,[eax+0x2]
c00176b3:	83 e8 02             	sub    eax,0x2
c00176b6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00176bc:	25 ff ff 00 00       	and    eax,0xffff
c00176c1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176c5:	0f 44 c2             	cmove  eax,edx
c00176c8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00176cb:	e9 23 02 00 00       	jmp    c00178f3 <Vm::faultHandler(regs*)+0x6bb>
c00176d0:	8d 46 ff             	lea    eax,[esi-0x1]
c00176d3:	0f b6 f0             	movzx  esi,al
c00176d6:	83 fe 05             	cmp    esi,0x5
c00176d9:	77 23                	ja     c00176fe <Vm::faultHandler(regs*)+0x4c6>
c00176db:	ff 24 b5 00 2d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd300]
c00176e2:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00176e7:	eb 15                	jmp    c00176fe <Vm::faultHandler(regs*)+0x4c6>
c00176e9:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00176ed:	eb 0f                	jmp    c00176fe <Vm::faultHandler(regs*)+0x4c6>
c00176ef:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00176f3:	eb 09                	jmp    c00176fe <Vm::faultHandler(regs*)+0x4c6>
c00176f5:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00176f9:	eb 03                	jmp    c00176fe <Vm::faultHandler(regs*)+0x4c6>
c00176fb:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00176fe:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017703:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017706:	74 29                	je     c0017731 <Vm::faultHandler(regs*)+0x4f9>
c0017708:	3d ff ff 00 00       	cmp    eax,0xffff
c001770d:	76 22                	jbe    c0017731 <Vm::faultHandler(regs*)+0x4f9>
c001770f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017713:	50                   	push   eax
c0017714:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017718:	50                   	push   eax
c0017719:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001771d:	50                   	push   eax
c001771e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017722:	50                   	push   eax
c0017723:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017727:	50                   	push   eax
c0017728:	6a 6e                	push   0x6e
c001772a:	6a 6e                	push   0x6e
c001772c:	e9 8f 00 00 00       	jmp    c00177c0 <Vm::faultHandler(regs*)+0x588>
c0017731:	52                   	push   edx
c0017732:	0f b7 c0             	movzx  eax,ax
c0017735:	52                   	push   edx
c0017736:	50                   	push   eax
c0017737:	57                   	push   edi
c0017738:	e8 87 fa ff ff       	call   c00171c4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001773d:	59                   	pop    ecx
c001773e:	5e                   	pop    esi
c001773f:	0f b6 c0             	movzx  eax,al
c0017742:	50                   	push   eax
c0017743:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017747:	50                   	push   eax
c0017748:	e8 f7 f5 ff ff       	call   c0016d44 <Vm::outbv(unsigned short, unsigned char)>
c001774d:	83 c4 10             	add    esp,0x10
c0017750:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017753:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017757:	74 03                	je     c001775c <Vm::faultHandler(regs*)+0x524>
c0017759:	48                   	dec    eax
c001775a:	eb 01                	jmp    c001775d <Vm::faultHandler(regs*)+0x525>
c001775c:	40                   	inc    eax
c001775d:	0f b7 c0             	movzx  eax,ax
c0017760:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017763:	e9 8b 01 00 00       	jmp    c00178f3 <Vm::faultHandler(regs*)+0x6bb>
c0017768:	8d 46 ff             	lea    eax,[esi-0x1]
c001776b:	0f b6 f0             	movzx  esi,al
c001776e:	83 fe 05             	cmp    esi,0x5
c0017771:	77 1e                	ja     c0017791 <Vm::faultHandler(regs*)+0x559>
c0017773:	ff 24 b5 18 2d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd2e8]
c001777a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001777e:	eb 11                	jmp    c0017791 <Vm::faultHandler(regs*)+0x559>
c0017780:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017783:	eb 0c                	jmp    c0017791 <Vm::faultHandler(regs*)+0x559>
c0017785:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017788:	eb 07                	jmp    c0017791 <Vm::faultHandler(regs*)+0x559>
c001778a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001778d:	eb 02                	jmp    c0017791 <Vm::faultHandler(regs*)+0x559>
c001778f:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017791:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017796:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017799:	74 37                	je     c00177d2 <Vm::faultHandler(regs*)+0x59a>
c001779b:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00177a1:	76 2f                	jbe    c00177d2 <Vm::faultHandler(regs*)+0x59a>
c00177a3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00177a7:	50                   	push   eax
c00177a8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00177ac:	50                   	push   eax
c00177ad:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00177b1:	50                   	push   eax
c00177b2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00177b6:	50                   	push   eax
c00177b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177bb:	50                   	push   eax
c00177bc:	6a 6f                	push   0x6f
c00177be:	6a 6f                	push   0x6f
c00177c0:	68 a4 2c 02 c0       	push   0xc0022ca4
c00177c5:	e8 a0 31 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c00177ca:	83 c4 20             	add    esp,0x20
c00177cd:	e9 86 01 00 00       	jmp    c0017958 <Vm::faultHandler(regs*)+0x720>
c00177d2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00177d5:	0f b7 d7             	movzx  edx,di
c00177d8:	0f b7 c6             	movzx  eax,si
c00177db:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00177de:	81 e1 00 04 00 00    	and    ecx,0x400
c00177e4:	83 e5 01             	and    ebp,0x1
c00177e7:	74 1c                	je     c0017805 <Vm::faultHandler(regs*)+0x5cd>
c00177e9:	55                   	push   ebp
c00177ea:	55                   	push   ebp
c00177eb:	50                   	push   eax
c00177ec:	52                   	push   edx
c00177ed:	e8 f5 f9 ff ff       	call   c00171e7 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00177f2:	83 c4 10             	add    esp,0x10
c00177f5:	89 fa                	mov    edx,edi
c00177f7:	ef                   	out    dx,eax
c00177f8:	8d 46 04             	lea    eax,[esi+0x4]
c00177fb:	83 ee 04             	sub    esi,0x4
c00177fe:	25 ff ff 00 00       	and    eax,0xffff
c0017803:	eb 1b                	jmp    c0017820 <Vm::faultHandler(regs*)+0x5e8>
c0017805:	55                   	push   ebp
c0017806:	55                   	push   ebp
c0017807:	50                   	push   eax
c0017808:	52                   	push   edx
c0017809:	e8 c7 f9 ff ff       	call   c00171d5 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001780e:	83 c4 10             	add    esp,0x10
c0017811:	89 fa                	mov    edx,edi
c0017813:	66 ef                	out    dx,ax
c0017815:	8d 46 02             	lea    eax,[esi+0x2]
c0017818:	83 ee 02             	sub    esi,0x2
c001781b:	25 ff ff 00 00       	and    eax,0xffff
c0017820:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017826:	85 c9                	test   ecx,ecx
c0017828:	0f 44 f0             	cmove  esi,eax
c001782b:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001782e:	e9 c0 00 00 00       	jmp    c00178f3 <Vm::faultHandler(regs*)+0x6bb>
c0017833:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001783a:	83 ec 0c             	sub    esp,0xc
c001783d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017841:	50                   	push   eax
c0017842:	e8 ea f4 ff ff       	call   c0016d31 <Vm::inbv(unsigned short)>
c0017847:	0f b6 c0             	movzx  eax,al
c001784a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001784d:	eb 3a                	jmp    c0017889 <Vm::faultHandler(regs*)+0x651>
c001784f:	83 e5 01             	and    ebp,0x1
c0017852:	74 07                	je     c001785b <Vm::faultHandler(regs*)+0x623>
c0017854:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017858:	ed                   	in     eax,dx
c0017859:	eb 14                	jmp    c001786f <Vm::faultHandler(regs*)+0x637>
c001785b:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001785e:	66 31 f6             	xor    si,si
c0017861:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017864:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017868:	66 ed                	in     ax,dx
c001786a:	0f b7 c0             	movzx  eax,ax
c001786d:	09 f0                	or     eax,esi
c001786f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017872:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017876:	eb 7e                	jmp    c00178f6 <Vm::faultHandler(regs*)+0x6be>
c0017878:	52                   	push   edx
c0017879:	52                   	push   edx
c001787a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001787e:	50                   	push   eax
c001787f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017883:	50                   	push   eax
c0017884:	e8 bb f4 ff ff       	call   c0016d44 <Vm::outbv(unsigned short, unsigned char)>
c0017889:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001788d:	eb 4f                	jmp    c00178de <Vm::faultHandler(regs*)+0x6a6>
c001788f:	83 e5 01             	and    ebp,0x1
c0017892:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017895:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017899:	74 03                	je     c001789e <Vm::faultHandler(regs*)+0x666>
c001789b:	ef                   	out    dx,eax
c001789c:	eb d4                	jmp    c0017872 <Vm::faultHandler(regs*)+0x63a>
c001789e:	66 ef                	out    dx,ax
c00178a0:	eb d0                	jmp    c0017872 <Vm::faultHandler(regs*)+0x63a>
c00178a2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00178a6:	83 ec 0c             	sub    esp,0xc
c00178a9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00178b0:	50                   	push   eax
c00178b1:	e8 7b f4 ff ff       	call   c0016d31 <Vm::inbv(unsigned short)>
c00178b6:	0f b6 c0             	movzx  eax,al
c00178b9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00178bc:	eb 1d                	jmp    c00178db <Vm::faultHandler(regs*)+0x6a3>
c00178be:	83 e5 01             	and    ebp,0x1
c00178c1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00178c4:	74 03                	je     c00178c9 <Vm::faultHandler(regs*)+0x691>
c00178c6:	ed                   	in     eax,dx
c00178c7:	eb 0d                	jmp    c00178d6 <Vm::faultHandler(regs*)+0x69e>
c00178c9:	66 ed                	in     ax,dx
c00178cb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00178ce:	0f b7 c0             	movzx  eax,ax
c00178d1:	66 31 d2             	xor    dx,dx
c00178d4:	09 d0                	or     eax,edx
c00178d6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00178d9:	eb 18                	jmp    c00178f3 <Vm::faultHandler(regs*)+0x6bb>
c00178db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00178de:	83 c4 10             	add    esp,0x10
c00178e1:	eb 13                	jmp    c00178f6 <Vm::faultHandler(regs*)+0x6be>
c00178e3:	83 e5 01             	and    ebp,0x1
c00178e6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00178e9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00178ec:	74 03                	je     c00178f1 <Vm::faultHandler(regs*)+0x6b9>
c00178ee:	ef                   	out    dx,eax
c00178ef:	eb 02                	jmp    c00178f3 <Vm::faultHandler(regs*)+0x6bb>
c00178f1:	66 ef                	out    dx,ax
c00178f3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00178f6:	b0 01                	mov    al,0x1
c00178f8:	eb 60                	jmp    c001795a <Vm::faultHandler(regs*)+0x722>
c00178fa:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00178fe:	50                   	push   eax
c00178ff:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017903:	50                   	push   eax
c0017904:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017908:	50                   	push   eax
c0017909:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001790d:	50                   	push   eax
c001790e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017912:	50                   	push   eax
c0017913:	52                   	push   edx
c0017914:	52                   	push   edx
c0017915:	68 d1 2c 02 c0       	push   0xc0022cd1
c001791a:	e8 4b 30 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001791f:	83 c4 20             	add    esp,0x20
c0017922:	83 ec 0c             	sub    esp,0xc
c0017925:	6a 60                	push   0x60
c0017927:	e8 05 f4 ff ff       	call   c0016d31 <Vm::inbv(unsigned short)>
c001792c:	83 c4 10             	add    esp,0x10
c001792f:	0f b6 d0             	movzx  edx,al
c0017932:	83 fa 1c             	cmp    edx,0x1c
c0017935:	74 05                	je     c001793c <Vm::faultHandler(regs*)+0x704>
c0017937:	83 fa 5a             	cmp    edx,0x5a
c001793a:	75 e6                	jne    c0017922 <Vm::faultHandler(regs*)+0x6ea>
c001793c:	0f b6 c0             	movzx  eax,al
c001793f:	83 f8 1c             	cmp    eax,0x1c
c0017942:	74 05                	je     c0017949 <Vm::faultHandler(regs*)+0x711>
c0017944:	83 f8 5a             	cmp    eax,0x5a
c0017947:	75 0f                	jne    c0017958 <Vm::faultHandler(regs*)+0x720>
c0017949:	83 ec 0c             	sub    esp,0xc
c001794c:	6a 60                	push   0x60
c001794e:	e8 de f3 ff ff       	call   c0016d31 <Vm::inbv(unsigned short)>
c0017953:	83 c4 10             	add    esp,0x10
c0017956:	eb e4                	jmp    c001793c <Vm::faultHandler(regs*)+0x704>
c0017958:	31 c0                	xor    eax,eax
c001795a:	83 c4 2c             	add    esp,0x2c
c001795d:	5b                   	pop    ebx
c001795e:	5e                   	pop    esi
c001795f:	5f                   	pop    edi
c0017960:	5d                   	pop    ebp
c0017961:	c3                   	ret    

c0017962 <noCopro(unsigned long)>:
c0017962:	c3                   	ret    

c0017963 <nmiHandler(regs*, void*)>:
c0017963:	83 ec 0c             	sub    esp,0xc
c0017966:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001796b:	83 ec 0c             	sub    esp,0xc
c001796e:	50                   	push   eax
c001796f:	e8 c4 f9 fe ff       	call   c0007338 <Computer::handleNMI()>
c0017974:	83 c4 10             	add    esp,0x10
c0017977:	90                   	nop
c0017978:	83 c4 0c             	add    esp,0xc
c001797b:	c3                   	ret    

c001797c <doubleFault(regs*, void*)>:
c001797c:	55                   	push   ebp
c001797d:	89 e5                	mov    ebp,esp
c001797f:	83 ec 08             	sub    esp,0x8
c0017982:	83 ec 0c             	sub    esp,0xc
c0017985:	68 30 2d 02 c0       	push   0xc0022d30
c001798a:	e8 b0 9c ff ff       	call   c001163f <KePanic(char const*)>
c001798f:	83 c4 10             	add    esp,0x10
c0017992:	90                   	nop
c0017993:	c9                   	leave  
c0017994:	c3                   	ret    

c0017995 <displayDebugInfo(regs*)>:
c0017995:	83 ec 1c             	sub    esp,0x1c
c0017998:	0f 20 c0             	mov    eax,cr0
c001799b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001799f:	0f 20 d0             	mov    eax,cr2
c00179a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179a6:	0f 20 d8             	mov    eax,cr3
c00179a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179ad:	0f 20 e0             	mov    eax,cr4
c00179b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00179b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b7:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00179ba:	83 ec 08             	sub    esp,0x8
c00179bd:	50                   	push   eax
c00179be:	68 4c 2d 02 c0       	push   0xc0022d4c
c00179c3:	e8 a2 2f ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c00179c8:	83 c4 10             	add    esp,0x10
c00179cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179cf:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00179d2:	83 ec 08             	sub    esp,0x8
c00179d5:	50                   	push   eax
c00179d6:	68 3d 2d 02 c0       	push   0xc0022d3d
c00179db:	e8 8a 2f ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c00179e0:	83 c4 10             	add    esp,0x10
c00179e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179e7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00179ea:	83 ec 08             	sub    esp,0x8
c00179ed:	50                   	push   eax
c00179ee:	68 48 2d 02 c0       	push   0xc0022d48
c00179f3:	e8 72 2f ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c00179f8:	83 c4 10             	add    esp,0x10
c00179fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a02:	83 ec 08             	sub    esp,0x8
c0017a05:	50                   	push   eax
c0017a06:	68 57 2d 02 c0       	push   0xc0022d57
c0017a0b:	e8 5a 2f ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0017a10:	83 c4 10             	add    esp,0x10
c0017a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a17:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017a1a:	83 ec 08             	sub    esp,0x8
c0017a1d:	50                   	push   eax
c0017a1e:	68 62 2d 02 c0       	push   0xc0022d62
c0017a23:	e8 42 2f ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0017a28:	83 c4 10             	add    esp,0x10
c0017a2b:	83 ec 08             	sub    esp,0x8
c0017a2e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a32:	68 6d 2d 02 c0       	push   0xc0022d6d
c0017a37:	e8 2e 2f ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0017a3c:	83 c4 10             	add    esp,0x10
c0017a3f:	83 ec 08             	sub    esp,0x8
c0017a42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017a46:	68 78 2d 02 c0       	push   0xc0022d78
c0017a4b:	e8 1a 2f ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0017a50:	83 c4 10             	add    esp,0x10
c0017a53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a57:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a5a:	c1 e0 05             	shl    eax,0x5
c0017a5d:	8d 90 00 41 02 c0    	lea    edx,[eax-0x3ffdbf00]
c0017a63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a67:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a6a:	83 ec 04             	sub    esp,0x4
c0017a6d:	52                   	push   edx
c0017a6e:	50                   	push   eax
c0017a6f:	68 83 2d 02 c0       	push   0xc0022d83
c0017a74:	e8 f1 2e ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0017a79:	83 c4 10             	add    esp,0x10
c0017a7c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a81:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a87:	83 ec 0c             	sub    esp,0xc
c0017a8a:	50                   	push   eax
c0017a8b:	e8 3f 0d ff ff       	call   c00087cf <setActiveTerminal(VgaText*)>
c0017a90:	83 c4 10             	add    esp,0x10
c0017a93:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a98:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a9e:	83 ec 08             	sub    esp,0x8
c0017aa1:	68 92 2d 02 c0       	push   0xc0022d92
c0017aa6:	50                   	push   eax
c0017aa7:	e8 60 10 ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c0017aac:	83 c4 10             	add    esp,0x10
c0017aaf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ab4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017abe:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017ac1:	83 ec 08             	sub    esp,0x8
c0017ac4:	52                   	push   edx
c0017ac5:	50                   	push   eax
c0017ac6:	e8 fb 0f ff ff       	call   c0008ac6 <VgaText::putx(unsigned int)>
c0017acb:	83 c4 10             	add    esp,0x10
c0017ace:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ad3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ad9:	83 ec 08             	sub    esp,0x8
c0017adc:	68 a0 2d 02 c0       	push   0xc0022da0
c0017ae1:	50                   	push   eax
c0017ae2:	e8 25 10 ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c0017ae7:	83 c4 10             	add    esp,0x10
c0017aea:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017af5:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017afa:	8b 12                	mov    edx,DWORD PTR [edx]
c0017afc:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017aff:	83 c2 0c             	add    edx,0xc
c0017b02:	83 ec 08             	sub    esp,0x8
c0017b05:	52                   	push   edx
c0017b06:	50                   	push   eax
c0017b07:	e8 00 10 ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c0017b0c:	83 c4 10             	add    esp,0x10
c0017b0f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b14:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b1a:	83 ec 08             	sub    esp,0x8
c0017b1d:	68 a9 2d 02 c0       	push   0xc0022da9
c0017b22:	50                   	push   eax
c0017b23:	e8 e4 0f ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c0017b28:	83 c4 10             	add    esp,0x10
c0017b2b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b30:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b36:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b3a:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017b3d:	83 ec 08             	sub    esp,0x8
c0017b40:	52                   	push   edx
c0017b41:	50                   	push   eax
c0017b42:	e8 7f 0f ff ff       	call   c0008ac6 <VgaText::putx(unsigned int)>
c0017b47:	83 c4 10             	add    esp,0x10
c0017b4a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b4f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b55:	83 ec 08             	sub    esp,0x8
c0017b58:	68 b1 2d 02 c0       	push   0xc0022db1
c0017b5d:	50                   	push   eax
c0017b5e:	e8 a9 0f ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c0017b63:	83 c4 10             	add    esp,0x10
c0017b66:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b6b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b71:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b75:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017b78:	83 ec 08             	sub    esp,0x8
c0017b7b:	52                   	push   edx
c0017b7c:	50                   	push   eax
c0017b7d:	e8 44 0f ff ff       	call   c0008ac6 <VgaText::putx(unsigned int)>
c0017b82:	83 c4 10             	add    esp,0x10
c0017b85:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b90:	83 ec 08             	sub    esp,0x8
c0017b93:	68 b9 2d 02 c0       	push   0xc0022db9
c0017b98:	50                   	push   eax
c0017b99:	e8 6e 0f ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c0017b9e:	83 c4 10             	add    esp,0x10
c0017ba1:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ba6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bb0:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017bb3:	83 ec 08             	sub    esp,0x8
c0017bb6:	52                   	push   edx
c0017bb7:	50                   	push   eax
c0017bb8:	e8 09 0f ff ff       	call   c0008ac6 <VgaText::putx(unsigned int)>
c0017bbd:	83 c4 10             	add    esp,0x10
c0017bc0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bc5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bcb:	83 ec 08             	sub    esp,0x8
c0017bce:	68 c1 2d 02 c0       	push   0xc0022dc1
c0017bd3:	50                   	push   eax
c0017bd4:	e8 33 0f ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c0017bd9:	83 c4 10             	add    esp,0x10
c0017bdc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017be1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017be7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017beb:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017bee:	83 ec 08             	sub    esp,0x8
c0017bf1:	52                   	push   edx
c0017bf2:	50                   	push   eax
c0017bf3:	e8 ce 0e ff ff       	call   c0008ac6 <VgaText::putx(unsigned int)>
c0017bf8:	83 c4 10             	add    esp,0x10
c0017bfb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c00:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c06:	83 ec 08             	sub    esp,0x8
c0017c09:	68 c9 2d 02 c0       	push   0xc0022dc9
c0017c0e:	50                   	push   eax
c0017c0f:	e8 f8 0e ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c0017c14:	83 c4 10             	add    esp,0x10
c0017c17:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c1c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c22:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c26:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017c29:	83 ec 08             	sub    esp,0x8
c0017c2c:	52                   	push   edx
c0017c2d:	50                   	push   eax
c0017c2e:	e8 93 0e ff ff       	call   c0008ac6 <VgaText::putx(unsigned int)>
c0017c33:	83 c4 10             	add    esp,0x10
c0017c36:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c3b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c41:	83 ec 08             	sub    esp,0x8
c0017c44:	68 d1 2d 02 c0       	push   0xc0022dd1
c0017c49:	50                   	push   eax
c0017c4a:	e8 bd 0e ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c0017c4f:	83 c4 10             	add    esp,0x10
c0017c52:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c57:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c5d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c61:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017c64:	83 ec 08             	sub    esp,0x8
c0017c67:	52                   	push   edx
c0017c68:	50                   	push   eax
c0017c69:	e8 58 0e ff ff       	call   c0008ac6 <VgaText::putx(unsigned int)>
c0017c6e:	83 c4 10             	add    esp,0x10
c0017c71:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c76:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c7c:	83 ec 08             	sub    esp,0x8
c0017c7f:	68 d9 2d 02 c0       	push   0xc0022dd9
c0017c84:	50                   	push   eax
c0017c85:	e8 82 0e ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c0017c8a:	83 c4 10             	add    esp,0x10
c0017c8d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c92:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c98:	83 ec 08             	sub    esp,0x8
c0017c9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c9f:	50                   	push   eax
c0017ca0:	e8 21 0e ff ff       	call   c0008ac6 <VgaText::putx(unsigned int)>
c0017ca5:	83 c4 10             	add    esp,0x10
c0017ca8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cb3:	83 ec 08             	sub    esp,0x8
c0017cb6:	68 e2 2d 02 c0       	push   0xc0022de2
c0017cbb:	50                   	push   eax
c0017cbc:	e8 4b 0e ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c0017cc1:	83 c4 10             	add    esp,0x10
c0017cc4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cc9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ccf:	83 ec 08             	sub    esp,0x8
c0017cd2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017cd6:	50                   	push   eax
c0017cd7:	e8 ea 0d ff ff       	call   c0008ac6 <VgaText::putx(unsigned int)>
c0017cdc:	83 c4 10             	add    esp,0x10
c0017cdf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ce4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cea:	83 ec 08             	sub    esp,0x8
c0017ced:	68 ea 2d 02 c0       	push   0xc0022dea
c0017cf2:	50                   	push   eax
c0017cf3:	e8 14 0e ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c0017cf8:	83 c4 10             	add    esp,0x10
c0017cfb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d00:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d06:	83 ec 08             	sub    esp,0x8
c0017d09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d0d:	50                   	push   eax
c0017d0e:	e8 b3 0d ff ff       	call   c0008ac6 <VgaText::putx(unsigned int)>
c0017d13:	83 c4 10             	add    esp,0x10
c0017d16:	fa                   	cli    
c0017d17:	f4                   	hlt    
c0017d18:	eb fe                	jmp    c0017d18 <displayDebugInfo(regs*)+0x383>

c0017d1a <HalSystemIdle()>:
c0017d1a:	56                   	push   esi
c0017d1b:	53                   	push   ebx
c0017d1c:	83 ec 14             	sub    esp,0x14
c0017d1f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017d2a:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017d30:	83 e0 04             	and    eax,0x4
c0017d33:	0f b6 c0             	movzx  eax,al
c0017d36:	85 c0                	test   eax,eax
c0017d38:	0f 95 c0             	setne  al
c0017d3b:	0f b6 c0             	movzx  eax,al
c0017d3e:	85 c0                	test   eax,eax
c0017d40:	74 4c                	je     c0017d8e <HalSystemIdle()+0x74>
c0017d42:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d47:	83 ec 08             	sub    esp,0x8
c0017d4a:	68 e1 00 00 00       	push   0xe1
c0017d4f:	50                   	push   eax
c0017d50:	e8 ef f3 fe ff       	call   c0007144 <Computer::rdmsr(unsigned int)>
c0017d55:	83 c4 10             	add    esp,0x10
c0017d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d60:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d65:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d69:	83 e2 02             	and    edx,0x2
c0017d6c:	89 d3                	mov    ebx,edx
c0017d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d72:	83 e2 00             	and    edx,0x0
c0017d75:	89 d6                	mov    esi,edx
c0017d77:	56                   	push   esi
c0017d78:	53                   	push   ebx
c0017d79:	68 e1 00 00 00       	push   0xe1
c0017d7e:	50                   	push   eax
c0017d7f:	e8 ec f3 fe ff       	call   c0007170 <Computer::wrmsr(unsigned int, unsigned long long)>
c0017d84:	83 c4 10             	add    esp,0x10
c0017d87:	e8 08 84 fe ff       	call   c0000194 <doTPAUSE>
c0017d8c:	eb 01                	jmp    c0017d8f <HalSystemIdle()+0x75>
c0017d8e:	f4                   	hlt    
c0017d8f:	90                   	nop
c0017d90:	83 c4 14             	add    esp,0x14
c0017d93:	5b                   	pop    ebx
c0017d94:	5e                   	pop    esi
c0017d95:	c3                   	ret    

c0017d96 <displayProgramFault(char const*)>:
c0017d96:	83 ec 0c             	sub    esp,0xc
c0017d99:	83 ec 0c             	sub    esp,0xc
c0017d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017da0:	e8 c5 2b ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0017da5:	83 c4 10             	add    esp,0x10
c0017da8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017dad:	8b 00                	mov    eax,DWORD PTR [eax]
c0017daf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017db2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017db8:	85 c0                	test   eax,eax
c0017dba:	74 21                	je     c0017ddd <displayProgramFault(char const*)+0x47>
c0017dbc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017dc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dc3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017dc6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017dcc:	6a 04                	push   0x4
c0017dce:	6a 0f                	push   0xf
c0017dd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dd4:	50                   	push   eax
c0017dd5:	e8 a4 0d ff ff       	call   c0008b7e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017dda:	83 c4 10             	add    esp,0x10
c0017ddd:	90                   	nop
c0017dde:	83 c4 0c             	add    esp,0xc
c0017de1:	c3                   	ret    

c0017de2 <gpFault(regs*, void*)>:
c0017de2:	83 ec 1c             	sub    esp,0x1c
c0017de5:	c7 05 74 c7 02 c0 38 72 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017238
c0017def:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017df4:	85 c0                	test   eax,eax
c0017df6:	74 1e                	je     c0017e16 <gpFault(regs*, void*)+0x34>
c0017df8:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017dfd:	83 ec 0c             	sub    esp,0xc
c0017e00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e04:	ff d0                	call   eax
c0017e06:	83 c4 10             	add    esp,0x10
c0017e09:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e0d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017e12:	85 c0                	test   eax,eax
c0017e14:	75 2e                	jne    c0017e44 <gpFault(regs*, void*)+0x62>
c0017e16:	83 ec 0c             	sub    esp,0xc
c0017e19:	68 f2 2d 02 c0       	push   0xc0022df2
c0017e1e:	e8 73 ff ff ff       	call   c0017d96 <displayProgramFault(char const*)>
c0017e23:	83 c4 10             	add    esp,0x10
c0017e26:	83 ec 0c             	sub    esp,0xc
c0017e29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e2d:	e8 63 fb ff ff       	call   c0017995 <displayDebugInfo(regs*)>
c0017e32:	83 c4 10             	add    esp,0x10
c0017e35:	83 ec 0c             	sub    esp,0xc
c0017e38:	6a 00                	push   0x0
c0017e3a:	e8 99 ed ff ff       	call   c0016bd8 <Thr::terminateFromIRQ(int)>
c0017e3f:	83 c4 10             	add    esp,0x10
c0017e42:	eb 01                	jmp    c0017e45 <gpFault(regs*, void*)+0x63>
c0017e44:	90                   	nop
c0017e45:	83 c4 1c             	add    esp,0x1c
c0017e48:	c3                   	ret    

c0017e49 <pgFault(regs*, void*)>:
c0017e49:	83 ec 1c             	sub    esp,0x1c
c0017e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e50:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017e53:	0f 20 d0             	mov    eax,cr2
c0017e56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e5e:	83 ec 04             	sub    esp,0x4
c0017e61:	52                   	push   edx
c0017e62:	50                   	push   eax
c0017e63:	68 d0 2e 02 c0       	push   0xc0022ed0
c0017e68:	e8 fd 2a ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0017e6d:	83 c4 10             	add    esp,0x10
c0017e70:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e75:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e77:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e7a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017e80:	0f 20 d2             	mov    edx,cr2
c0017e83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017e87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e8b:	83 ec 08             	sub    esp,0x8
c0017e8e:	52                   	push   edx
c0017e8f:	50                   	push   eax
c0017e90:	e8 45 25 ff ff       	call   c000a3da <VAS::tryLoadBackOffDisk(unsigned long)>
c0017e95:	83 c4 10             	add    esp,0x10
c0017e98:	0f b6 c0             	movzx  eax,al
c0017e9b:	85 c0                	test   eax,eax
c0017e9d:	75 2e                	jne    c0017ecd <pgFault(regs*, void*)+0x84>
c0017e9f:	83 ec 0c             	sub    esp,0xc
c0017ea2:	68 0b 2e 02 c0       	push   0xc0022e0b
c0017ea7:	e8 ea fe ff ff       	call   c0017d96 <displayProgramFault(char const*)>
c0017eac:	83 c4 10             	add    esp,0x10
c0017eaf:	83 ec 0c             	sub    esp,0xc
c0017eb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017eb6:	e8 da fa ff ff       	call   c0017995 <displayDebugInfo(regs*)>
c0017ebb:	83 c4 10             	add    esp,0x10
c0017ebe:	83 ec 0c             	sub    esp,0xc
c0017ec1:	6a 00                	push   0x0
c0017ec3:	e8 10 ed ff ff       	call   c0016bd8 <Thr::terminateFromIRQ(int)>
c0017ec8:	83 c4 10             	add    esp,0x10
c0017ecb:	eb 01                	jmp    c0017ece <pgFault(regs*, void*)+0x85>
c0017ecd:	90                   	nop
c0017ece:	83 c4 1c             	add    esp,0x1c
c0017ed1:	c3                   	ret    

c0017ed2 <otherISRHandler(regs*, void*)>:
c0017ed2:	83 ec 0c             	sub    esp,0xc
c0017ed5:	83 ec 0c             	sub    esp,0xc
c0017ed8:	68 f8 2e 02 c0       	push   0xc0022ef8
c0017edd:	e8 b4 fe ff ff       	call   c0017d96 <displayProgramFault(char const*)>
c0017ee2:	83 c4 10             	add    esp,0x10
c0017ee5:	83 ec 0c             	sub    esp,0xc
c0017ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017eec:	e8 a4 fa ff ff       	call   c0017995 <displayDebugInfo(regs*)>
c0017ef1:	83 c4 10             	add    esp,0x10
c0017ef4:	83 ec 0c             	sub    esp,0xc
c0017ef7:	6a 00                	push   0x0
c0017ef9:	e8 da ec ff ff       	call   c0016bd8 <Thr::terminateFromIRQ(int)>
c0017efe:	83 c4 10             	add    esp,0x10
c0017f01:	90                   	nop
c0017f02:	83 c4 0c             	add    esp,0xc
c0017f05:	c3                   	ret    

c0017f06 <opcodeFault(regs*, void*)>:
c0017f06:	55                   	push   ebp
c0017f07:	89 e5                	mov    ebp,esp
c0017f09:	83 ec 08             	sub    esp,0x8
c0017f0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f0f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f12:	83 ec 08             	sub    esp,0x8
c0017f15:	50                   	push   eax
c0017f16:	68 16 2e 02 c0       	push   0xc0022e16
c0017f1b:	e8 4a 2a ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0017f20:	83 c4 10             	add    esp,0x10
c0017f23:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017f28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017f2e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017f34:	0f b6 c0             	movzx  eax,al
c0017f37:	85 c0                	test   eax,eax
c0017f39:	74 21                	je     c0017f5c <opcodeFault(regs*, void*)+0x56>
c0017f3b:	83 ec 0c             	sub    esp,0xc
c0017f3e:	68 20 2f 02 c0       	push   0xc0022f20
c0017f43:	e8 22 2a ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0017f48:	83 c4 10             	add    esp,0x10
c0017f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f4e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f51:	8d 50 19             	lea    edx,[eax+0x19]
c0017f54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f57:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f5a:	eb 2b                	jmp    c0017f87 <opcodeFault(regs*, void*)+0x81>
c0017f5c:	83 ec 0c             	sub    esp,0xc
c0017f5f:	68 24 2e 02 c0       	push   0xc0022e24
c0017f64:	e8 2d fe ff ff       	call   c0017d96 <displayProgramFault(char const*)>
c0017f69:	83 c4 10             	add    esp,0x10
c0017f6c:	83 ec 0c             	sub    esp,0xc
c0017f6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017f72:	e8 1e fa ff ff       	call   c0017995 <displayDebugInfo(regs*)>
c0017f77:	83 c4 10             	add    esp,0x10
c0017f7a:	83 ec 0c             	sub    esp,0xc
c0017f7d:	6a 00                	push   0x0
c0017f7f:	e8 54 ec ff ff       	call   c0016bd8 <Thr::terminateFromIRQ(int)>
c0017f84:	83 c4 10             	add    esp,0x10
c0017f87:	c9                   	leave  
c0017f88:	c3                   	ret    

c0017f89 <i386SaveCoprocessor(void*)>:
c0017f89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f8d:	83 c0 3f             	add    eax,0x3f
c0017f90:	83 e0 c0             	and    eax,0xffffffc0
c0017f93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f97:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017f9d <i386LoadCoprocessor(void*)>:
c0017f9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017fa1:	83 c0 3f             	add    eax,0x3f
c0017fa4:	83 e0 c0             	and    eax,0xffffffc0
c0017fa7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017fab:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017fb1 <x87EmulHandler(regs*, void*)>:
c0017fb1:	53                   	push   ebx
c0017fb2:	83 ec 08             	sub    esp,0x8
c0017fb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fba:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017fbe:	74 10                	je     c0017fd0 <x87EmulHandler(regs*, void*)+0x1f>
c0017fc0:	83 ec 0c             	sub    esp,0xc
c0017fc3:	68 31 2e 02 c0       	push   0xc0022e31
c0017fc8:	e8 72 96 ff ff       	call   c001163f <KePanic(char const*)>
c0017fcd:	83 c4 10             	add    esp,0x10
c0017fd0:	0f 20 c0             	mov    eax,cr0
c0017fd3:	a8 08                	test   al,0x8
c0017fd5:	74 59                	je     c0018030 <x87EmulHandler(regs*, void*)+0x7f>
c0017fd7:	0f 06                	clts   
c0017fd9:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017fde:	85 c0                	test   eax,eax
c0017fe0:	74 0e                	je     c0017ff0 <x87EmulHandler(regs*, void*)+0x3f>
c0017fe2:	83 ec 0c             	sub    esp,0xc
c0017fe5:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017fe8:	e8 9c ff ff ff       	call   c0017f89 <i386SaveCoprocessor(void*)>
c0017fed:	83 c4 10             	add    esp,0x10
c0017ff0:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017ff6:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017ffa:	75 12                	jne    c001800e <x87EmulHandler(regs*, void*)+0x5d>
c0017ffc:	83 ec 0c             	sub    esp,0xc
c0017fff:	68 40 02 00 00       	push   0x240
c0018004:	e8 2a fb fe ff       	call   c0007b33 <malloc>
c0018009:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001800c:	eb 10                	jmp    c001801e <x87EmulHandler(regs*, void*)+0x6d>
c001800e:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0018013:	83 ec 0c             	sub    esp,0xc
c0018016:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018019:	e8 7f ff ff ff       	call   c0017f9d <i386LoadCoprocessor(void*)>
c001801e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018023:	83 c4 10             	add    esp,0x10
c0018026:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c001802b:	83 c4 08             	add    esp,0x8
c001802e:	5b                   	pop    ebx
c001802f:	c3                   	ret    
c0018030:	83 ec 0c             	sub    esp,0xc
c0018033:	68 45 2e 02 c0       	push   0xc0022e45
c0018038:	e8 2d 29 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001803d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018045:	83 c4 18             	add    esp,0x18
c0018048:	5b                   	pop    ebx
c0018049:	e9 8a eb ff ff       	jmp    c0016bd8 <Thr::terminateFromIRQ(int)>

c001804e <HalInitialiseCoprocessor()>:
c001804e:	83 ec 10             	sub    esp,0x10
c0018051:	6a 00                	push   0x0
c0018053:	68 b1 7f 01 c0       	push   0xc0017fb1
c0018058:	6a 07                	push   0x7
c001805a:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0018064:	e8 cd 4e ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018069:	e8 b2 70 00 00       	call   c001f120 <avxDetect>
c001806e:	83 c4 10             	add    esp,0x10
c0018071:	85 c0                	test   eax,eax
c0018073:	74 1c                	je     c0018091 <HalInitialiseCoprocessor()+0x43>
c0018075:	c7 05 70 c7 02 c0 4a f1 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f14a
c001807f:	c7 05 6c c7 02 c0 5b f1 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f15b
c0018089:	83 c4 0c             	add    esp,0xc
c001808c:	e9 db 70 00 00       	jmp    c001f16c <avxInit>
c0018091:	e8 1a 74 00 00       	call   c001f4b0 <absolutelyNoChanceInHell>
c0018096:	85 c0                	test   eax,eax
c0018098:	74 1c                	je     c00180b6 <HalInitialiseCoprocessor()+0x68>
c001809a:	c7 05 70 c7 02 c0 c8 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f4c8
c00180a4:	c7 05 6c c7 02 c0 d0 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f4d0
c00180ae:	83 c4 0c             	add    esp,0xc
c00180b1:	e9 22 74 00 00       	jmp    c001f4d8 <sseInit>
c00180b6:	e8 3b 74 00 00       	call   c001f4f6 <x87Detect>
c00180bb:	85 c0                	test   eax,eax
c00180bd:	74 1c                	je     c00180db <HalInitialiseCoprocessor()+0x8d>
c00180bf:	c7 05 70 c7 02 c0 11 f5 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f511
c00180c9:	c7 05 6c c7 02 c0 18 f5 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f518
c00180d3:	83 c4 0c             	add    esp,0xc
c00180d6:	e9 44 74 00 00       	jmp    c001f51f <x87Init>
c00180db:	c7 05 70 c7 02 c0 62 79 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc0017962
c00180e5:	c7 05 6c c7 02 c0 62 79 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc0017962
c00180ef:	0f 20 c0             	mov    eax,cr0
c00180f2:	83 c8 04             	or     eax,0x4
c00180f5:	0f 22 c0             	mov    cr0,eax
c00180f8:	83 c4 0c             	add    esp,0xc
c00180fb:	c3                   	ret    

c00180fc <HalPanic(char const*)>:
c00180fc:	53                   	push   ebx
c00180fd:	83 ec 10             	sub    esp,0x10
c0018100:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018104:	fa                   	cli    
c0018105:	53                   	push   ebx
c0018106:	68 5b 2e 02 c0       	push   0xc0022e5b
c001810b:	e8 5a 28 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c0018110:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c0018115:	83 c4 10             	add    esp,0x10
c0018118:	85 c0                	test   eax,eax
c001811a:	74 09                	je     c0018125 <HalPanic(char const*)+0x29>
c001811c:	83 ec 0c             	sub    esp,0xc
c001811f:	53                   	push   ebx
c0018120:	ff d0                	call   eax
c0018122:	83 c4 10             	add    esp,0x10
c0018125:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c001812a:	85 c0                	test   eax,eax
c001812c:	0f 84 dc 00 00 00    	je     c001820e <HalPanic(char const*)+0x112>
c0018132:	52                   	push   edx
c0018133:	6a 01                	push   0x1
c0018135:	6a 0f                	push   0xf
c0018137:	50                   	push   eax
c0018138:	e8 ed 04 ff ff       	call   c000862a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001813d:	59                   	pop    ecx
c001813e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018144:	e8 d1 06 ff ff       	call   c000881a <VgaText::clearScreen()>
c0018149:	58                   	pop    eax
c001814a:	5a                   	pop    edx
c001814b:	68 cc 0f 02 c0       	push   0xc0020fcc
c0018150:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018156:	e8 07 05 ff ff       	call   c0008662 <VgaText::setTitle(char*)>
c001815b:	83 c4 0c             	add    esp,0xc
c001815e:	6a 01                	push   0x1
c0018160:	6a 0f                	push   0xf
c0018162:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018168:	e8 bd 04 ff ff       	call   c000862a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001816d:	59                   	pop    ecx
c001816e:	58                   	pop    eax
c001816f:	68 74 2e 02 c0       	push   0xc0022e74
c0018174:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001817a:	e8 8d 09 ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c001817f:	83 c4 0c             	add    esp,0xc
c0018182:	6a 0f                	push   0xf
c0018184:	6a 01                	push   0x1
c0018186:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001818c:	e8 99 04 ff ff       	call   c000862a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018191:	58                   	pop    eax
c0018192:	5a                   	pop    edx
c0018193:	68 7d 2e 02 c0       	push   0xc0022e7d
c0018198:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001819e:	e8 69 09 ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c00181a3:	83 c4 0c             	add    esp,0xc
c00181a6:	6a 01                	push   0x1
c00181a8:	6a 0f                	push   0xf
c00181aa:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181b0:	e8 75 04 ff ff       	call   c000862a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00181b5:	59                   	pop    ecx
c00181b6:	58                   	pop    eax
c00181b7:	68 c1 2e 02 c0       	push   0xc0022ec1
c00181bc:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181c2:	e8 45 09 ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c00181c7:	58                   	pop    eax
c00181c8:	5a                   	pop    edx
c00181c9:	68 8a 2e 02 c0       	push   0xc0022e8a
c00181ce:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181d4:	e8 33 09 ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c00181d9:	59                   	pop    ecx
c00181da:	58                   	pop    eax
c00181db:	68 c4 2e 02 c0       	push   0xc0022ec4
c00181e0:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181e6:	e8 21 09 ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c00181eb:	58                   	pop    eax
c00181ec:	5a                   	pop    edx
c00181ed:	53                   	push   ebx
c00181ee:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181f4:	e8 13 09 ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c00181f9:	59                   	pop    ecx
c00181fa:	5b                   	pop    ebx
c00181fb:	68 c1 2e 02 c0       	push   0xc0022ec1
c0018200:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018206:	e8 01 09 ff ff       	call   c0008b0c <VgaText::puts(char const*)>
c001820b:	83 c4 10             	add    esp,0x10
c001820e:	eb fe                	jmp    c001820e <HalPanic(char const*)+0x112>

c0018210 <HalQueryPerformanceCounter()>:
c0018210:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018215:	31 d2                	xor    edx,edx
c0018217:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001821d:	31 c0                	xor    eax,eax
c001821f:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0018226:	74 02                	je     c001822a <HalQueryPerformanceCounter()+0x1a>
c0018228:	0f 31                	rdtsc  
c001822a:	c3                   	ret    

c001822b <HalInitialise()>:
c001822b:	53                   	push   ebx
c001822c:	83 ec 08             	sub    esp,0x8
c001822f:	e8 39 4f ff ff       	call   c000d16d <setupINTS()>
c0018234:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018239:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c0018240:	75 0f                	jne    c0018251 <HalInitialise()+0x26>
c0018242:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018248:	83 e2 fe             	and    edx,0xfffffffe
c001824b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018251:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018258:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001825e:	83 e2 fe             	and    edx,0xfffffffe
c0018261:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018267:	e8 a0 02 00 00       	call   c001850c <picOpen()>
c001826c:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018273:	74 0a                	je     c001827f <HalInitialise()+0x54>
c0018275:	e8 e2 01 00 00       	call   c001845c <picDisable()>
c001827a:	e8 0d 68 00 00       	call   c001ea8c <apicOpen()>
c001827f:	50                   	push   eax
c0018280:	bb 0f 00 00 00       	mov    ebx,0xf
c0018285:	6a 00                	push   0x0
c0018287:	68 d2 7e 01 c0       	push   0xc0017ed2
c001828c:	6a 00                	push   0x0
c001828e:	e8 a3 4c ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018293:	83 c4 0c             	add    esp,0xc
c0018296:	6a 00                	push   0x0
c0018298:	68 d2 7e 01 c0       	push   0xc0017ed2
c001829d:	6a 01                	push   0x1
c001829f:	e8 92 4c ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182a4:	83 c4 0c             	add    esp,0xc
c00182a7:	6a 00                	push   0x0
c00182a9:	68 63 79 01 c0       	push   0xc0017963
c00182ae:	6a 02                	push   0x2
c00182b0:	e8 81 4c ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182b5:	83 c4 0c             	add    esp,0xc
c00182b8:	6a 00                	push   0x0
c00182ba:	68 d2 7e 01 c0       	push   0xc0017ed2
c00182bf:	6a 03                	push   0x3
c00182c1:	e8 70 4c ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182c6:	83 c4 0c             	add    esp,0xc
c00182c9:	6a 00                	push   0x0
c00182cb:	68 d2 7e 01 c0       	push   0xc0017ed2
c00182d0:	6a 04                	push   0x4
c00182d2:	e8 5f 4c ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182d7:	83 c4 0c             	add    esp,0xc
c00182da:	6a 00                	push   0x0
c00182dc:	68 d2 7e 01 c0       	push   0xc0017ed2
c00182e1:	6a 05                	push   0x5
c00182e3:	e8 4e 4c ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182e8:	83 c4 0c             	add    esp,0xc
c00182eb:	6a 00                	push   0x0
c00182ed:	68 06 7f 01 c0       	push   0xc0017f06
c00182f2:	6a 06                	push   0x6
c00182f4:	e8 3d 4c ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182f9:	83 c4 0c             	add    esp,0xc
c00182fc:	6a 00                	push   0x0
c00182fe:	68 7c 79 01 c0       	push   0xc001797c
c0018303:	6a 08                	push   0x8
c0018305:	e8 2c 4c ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001830a:	83 c4 0c             	add    esp,0xc
c001830d:	6a 00                	push   0x0
c001830f:	68 d2 7e 01 c0       	push   0xc0017ed2
c0018314:	6a 09                	push   0x9
c0018316:	e8 1b 4c ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001831b:	83 c4 0c             	add    esp,0xc
c001831e:	6a 00                	push   0x0
c0018320:	68 d2 7e 01 c0       	push   0xc0017ed2
c0018325:	6a 0a                	push   0xa
c0018327:	e8 0a 4c ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001832c:	83 c4 0c             	add    esp,0xc
c001832f:	6a 00                	push   0x0
c0018331:	68 d2 7e 01 c0       	push   0xc0017ed2
c0018336:	6a 0b                	push   0xb
c0018338:	e8 f9 4b ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001833d:	83 c4 0c             	add    esp,0xc
c0018340:	6a 00                	push   0x0
c0018342:	68 e2 7d 01 c0       	push   0xc0017de2
c0018347:	6a 0d                	push   0xd
c0018349:	e8 e8 4b ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001834e:	83 c4 0c             	add    esp,0xc
c0018351:	6a 00                	push   0x0
c0018353:	68 49 7e 01 c0       	push   0xc0017e49
c0018358:	6a 0e                	push   0xe
c001835a:	e8 d7 4b ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001835f:	83 c4 10             	add    esp,0x10
c0018362:	50                   	push   eax
c0018363:	6a 00                	push   0x0
c0018365:	68 d2 7e 01 c0       	push   0xc0017ed2
c001836a:	53                   	push   ebx
c001836b:	43                   	inc    ebx
c001836c:	e8 c5 4b ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018371:	83 c4 10             	add    esp,0x10
c0018374:	83 fb 1e             	cmp    ebx,0x1e
c0018377:	75 e9                	jne    c0018362 <HalInitialise()+0x137>
c0018379:	50                   	push   eax
c001837a:	6a 00                	push   0x0
c001837c:	68 f3 2a 01 c0       	push   0xc0012af3
c0018381:	6a 60                	push   0x60
c0018383:	e8 ae 4b ff ff       	call   c000cf36 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018388:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001838d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018397:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001839e:	e8 90 f7 fe ff       	call   c0007b33 <malloc>
c00183a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00183a6:	89 c3                	mov    ebx,eax
c00183a8:	e8 37 09 00 00       	call   c0018ce4 <RTC::RTC()>
c00183ad:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00183b7:	5a                   	pop    edx
c00183b8:	59                   	pop    ecx
c00183b9:	53                   	push   ebx
c00183ba:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00183c0:	e8 3b 46 ff ff       	call   c000ca00 <Device::addChild(Device*)>
c00183c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00183c7:	6a 00                	push   0x0
c00183c9:	6a 00                	push   0x0
c00183cb:	6a 00                	push   0x0
c00183cd:	53                   	push   ebx
c00183ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183d1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00183d6:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00183dc:	83 c4 28             	add    esp,0x28
c00183df:	5b                   	pop    ebx
c00183e0:	c3                   	ret    

c00183e1 <HalMakeBeep(int)>:
c00183e1:	53                   	push   ebx
c00183e2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00183e6:	85 db                	test   ebx,ebx
c00183e8:	75 07                	jne    c00183f1 <HalMakeBeep(int)+0x10>
c00183ea:	e4 61                	in     al,0x61
c00183ec:	83 e0 fc             	and    eax,0xfffffffc
c00183ef:	eb 26                	jmp    c0018417 <HalMakeBeep(int)+0x36>
c00183f1:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00183f6:	99                   	cdq    
c00183f7:	f7 fb                	idiv   ebx
c00183f9:	89 c1                	mov    ecx,eax
c00183fb:	b0 b6                	mov    al,0xb6
c00183fd:	e6 43                	out    0x43,al
c00183ff:	88 c8                	mov    al,cl
c0018401:	e6 42                	out    0x42,al
c0018403:	89 c8                	mov    eax,ecx
c0018405:	c1 e8 08             	shr    eax,0x8
c0018408:	e6 42                	out    0x42,al
c001840a:	e4 61                	in     al,0x61
c001840c:	89 c2                	mov    edx,eax
c001840e:	83 ca 03             	or     edx,0x3
c0018411:	38 d0                	cmp    al,dl
c0018413:	74 04                	je     c0018419 <HalMakeBeep(int)+0x38>
c0018415:	88 d0                	mov    al,dl
c0018417:	e6 61                	out    0x61,al
c0018419:	5b                   	pop    ebx
c001841a:	c3                   	ret    

c001841b <HalGetRand()>:
c001841b:	31 c0                	xor    eax,eax
c001841d:	c3                   	ret    

c001841e <HalEndOfInterrupt(int)>:
c001841e:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018425:	74 23                	je     c001844a <HalEndOfInterrupt(int)+0x2c>
c0018427:	83 ec 14             	sub    esp,0x14
c001842a:	6a 1b                	push   0x1b
c001842c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018432:	e8 0d ed fe ff       	call   c0007144 <Computer::rdmsr(unsigned int)>
c0018437:	25 00 f0 ff ff       	and    eax,0xfffff000
c001843c:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018446:	83 c4 1c             	add    esp,0x1c
c0018449:	c3                   	ret    
c001844a:	e9 41 02 00 00       	jmp    c0018690 <picEOI(int)>

c001844f <HalRestart()>:
c001844f:	c3                   	ret    

c0018450 <HalShutdown()>:
c0018450:	c3                   	ret    

c0018451 <HalSleep()>:
c0018451:	c3                   	ret    
c0018452:	66 90                	xchg   ax,ax

c0018454 <picIoWait()>:
c0018454:	eb 00                	jmp    c0018456 <picIoWait()+0x2>
c0018456:	eb 00                	jmp    c0018458 <picIoWait()+0x4>
c0018458:	90                   	nop
c0018459:	c3                   	ret    
c001845a:	66 90                	xchg   ax,ax

c001845c <picDisable()>:
c001845c:	83 ec 10             	sub    esp,0x10
c001845f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018466:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001846b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001846f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018474:	ee                   	out    dx,al
c0018475:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001847c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018481:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018485:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001848a:	ee                   	out    dx,al
c001848b:	90                   	nop
c001848c:	83 c4 10             	add    esp,0x10
c001848f:	c3                   	ret    

c0018490 <picGetIRQReg(int)>:
c0018490:	83 ec 10             	sub    esp,0x10
c0018493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018497:	0f b6 c0             	movzx  eax,al
c001849a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00184a1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00184a5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00184a9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00184ae:	ee                   	out    dx,al
c00184af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184b3:	0f b6 c0             	movzx  eax,al
c00184b6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00184bd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00184c1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00184c5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00184ca:	ee                   	out    dx,al
c00184cb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00184d2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00184d7:	89 c2                	mov    edx,eax
c00184d9:	ec                   	in     al,dx
c00184da:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00184de:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00184e2:	0f b6 c0             	movzx  eax,al
c00184e5:	c1 e0 08             	shl    eax,0x8
c00184e8:	89 c1                	mov    ecx,eax
c00184ea:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00184f1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00184f6:	89 c2                	mov    edx,eax
c00184f8:	ec                   	in     al,dx
c00184f9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00184fd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018501:	0f b6 c0             	movzx  eax,al
c0018504:	09 c8                	or     eax,ecx
c0018506:	83 c4 10             	add    esp,0x10
c0018509:	c3                   	ret    
c001850a:	66 90                	xchg   ax,ax

c001850c <picOpen()>:
c001850c:	83 ec 50             	sub    esp,0x50
c001850f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018516:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001851b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001851f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018523:	ee                   	out    dx,al
c0018524:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001852b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018530:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018534:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018538:	ee                   	out    dx,al
c0018539:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018541:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018549:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018550:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018554:	89 c2                	mov    edx,eax
c0018556:	ec                   	in     al,dx
c0018557:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001855b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001855f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018563:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001856a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001856e:	89 c2                	mov    edx,eax
c0018570:	ec                   	in     al,dx
c0018571:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018575:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018579:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001857d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018584:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018589:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001858d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018591:	ee                   	out    dx,al
c0018592:	e8 bd fe ff ff       	call   c0018454 <picIoWait()>
c0018597:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001859e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00185a3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00185a7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185ab:	ee                   	out    dx,al
c00185ac:	e8 a3 fe ff ff       	call   c0018454 <picIoWait()>
c00185b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00185b5:	0f b6 c0             	movzx  eax,al
c00185b8:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00185bf:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00185c3:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00185c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00185cb:	ee                   	out    dx,al
c00185cc:	e8 83 fe ff ff       	call   c0018454 <picIoWait()>
c00185d1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00185d5:	0f b6 c0             	movzx  eax,al
c00185d8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00185df:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00185e3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00185e7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00185eb:	ee                   	out    dx,al
c00185ec:	e8 63 fe ff ff       	call   c0018454 <picIoWait()>
c00185f1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00185f8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00185fd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018601:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018605:	ee                   	out    dx,al
c0018606:	e8 49 fe ff ff       	call   c0018454 <picIoWait()>
c001860b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018612:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018617:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001861b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001861f:	ee                   	out    dx,al
c0018620:	e8 2f fe ff ff       	call   c0018454 <picIoWait()>
c0018625:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001862c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018631:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018635:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018639:	ee                   	out    dx,al
c001863a:	e8 15 fe ff ff       	call   c0018454 <picIoWait()>
c001863f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018646:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001864b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001864f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018653:	ee                   	out    dx,al
c0018654:	e8 fb fd ff ff       	call   c0018454 <picIoWait()>
c0018659:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001865e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018665:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018669:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001866d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018671:	ee                   	out    dx,al
c0018672:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018677:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001867e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018682:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018686:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001868a:	ee                   	out    dx,al
c001868b:	90                   	nop
c001868c:	83 c4 50             	add    esp,0x50
c001868f:	c3                   	ret    

c0018690 <picEOI(int)>:
c0018690:	83 ec 10             	sub    esp,0x10
c0018693:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018698:	75 1e                	jne    c00186b8 <picEOI(int)+0x28>
c001869a:	6a 0b                	push   0xb
c001869c:	e8 ef fd ff ff       	call   c0018490 <picGetIRQReg(int)>
c00186a1:	83 c4 04             	add    esp,0x4
c00186a4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00186a9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00186ae:	25 80 00 00 00       	and    eax,0x80
c00186b3:	74 73                	je     c0018728 <picEOI(int)+0x98>
c00186b5:	8d 76 00             	lea    esi,[esi+0x0]
c00186b8:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00186bd:	75 31                	jne    c00186f0 <picEOI(int)+0x60>
c00186bf:	6a 0b                	push   0xb
c00186c1:	e8 ca fd ff ff       	call   c0018490 <picGetIRQReg(int)>
c00186c6:	83 c4 04             	add    esp,0x4
c00186c9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00186ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186d2:	98                   	cwde   
c00186d3:	85 c0                	test   eax,eax
c00186d5:	78 19                	js     c00186f0 <picEOI(int)+0x60>
c00186d7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00186de:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00186e3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00186e7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00186ec:	ee                   	out    dx,al
c00186ed:	eb 3d                	jmp    c001872c <picEOI(int)+0x9c>
c00186ef:	90                   	nop
c00186f0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00186f5:	7e 19                	jle    c0018710 <picEOI(int)+0x80>
c00186f7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00186fe:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018703:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018707:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001870c:	ee                   	out    dx,al
c001870d:	8d 76 00             	lea    esi,[esi+0x0]
c0018710:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018717:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001871c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018720:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018725:	ee                   	out    dx,al
c0018726:	eb 04                	jmp    c001872c <picEOI(int)+0x9c>
c0018728:	90                   	nop
c0018729:	8d 76 00             	lea    esi,[esi+0x0]
c001872c:	83 c4 10             	add    esp,0x10
c001872f:	c3                   	ret    

c0018730 <RTC::open(int, int, void*)>:
c0018730:	31 c0                	xor    eax,eax
c0018732:	c3                   	ret    
c0018733:	90                   	nop

c0018734 <RTC::close(int, int, void*)>:
c0018734:	31 c0                	xor    eax,eax
c0018736:	c3                   	ret    
c0018737:	90                   	nop

c0018738 <RTC::timeInSecondsUTC()>:
c0018738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001873c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018742:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018748:	c3                   	ret    
c0018749:	90                   	nop

c001874a <RTC::timeInDatetimeUTC()>:
c001874a:	53                   	push   ebx
c001874b:	83 ec 14             	sub    esp,0x14
c001874e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018752:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018756:	8b 10                	mov    edx,DWORD PTR [eax]
c0018758:	50                   	push   eax
c0018759:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001875c:	83 c4 0c             	add    esp,0xc
c001875f:	52                   	push   edx
c0018760:	50                   	push   eax
c0018761:	53                   	push   ebx
c0018762:	e8 0d 40 ff ff       	call   c000c774 <secondsToDatetime(unsigned long long)>
c0018767:	89 d8                	mov    eax,ebx
c0018769:	83 c4 14             	add    esp,0x14
c001876c:	5b                   	pop    ebx
c001876d:	c2 04 00             	ret    0x4

c0018770 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018770:	56                   	push   esi
c0018771:	53                   	push   ebx
c0018772:	83 ec 14             	sub    esp,0x14
c0018775:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018779:	8b 03                	mov    eax,DWORD PTR [ebx]
c001877b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001877e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018782:	52                   	push   edx
c0018783:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018787:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001878b:	50                   	push   eax
c001878c:	e8 e3 3f ff ff       	call   c000c774 <secondsToDatetime(unsigned long long)>
c0018791:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018795:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018799:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001879d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00187a1:	89 f0                	mov    eax,esi
c00187a3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00187a7:	83 c4 20             	add    esp,0x20
c00187aa:	5b                   	pop    ebx
c00187ab:	5e                   	pop    esi
c00187ac:	ff e0                	jmp    eax

c00187ae <RTC::~RTC()>:
c00187ae:	83 ec 0c             	sub    esp,0xc
c00187b1:	ba 60 2f 02 c0       	mov    edx,0xc0022f60
c00187b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187ba:	89 10                	mov    DWORD PTR [eax],edx
c00187bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187c0:	83 ec 0c             	sub    esp,0xc
c00187c3:	50                   	push   eax
c00187c4:	e8 37 3d ff ff       	call   c000c500 <Clock::~Clock()>
c00187c9:	83 c4 10             	add    esp,0x10
c00187cc:	90                   	nop
c00187cd:	83 c4 0c             	add    esp,0xc
c00187d0:	c3                   	ret    
c00187d1:	90                   	nop

c00187d2 <RTC::~RTC()>:
c00187d2:	83 ec 0c             	sub    esp,0xc
c00187d5:	83 ec 0c             	sub    esp,0xc
c00187d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187dc:	e8 cd ff ff ff       	call   c00187ae <RTC::~RTC()>
c00187e1:	83 c4 10             	add    esp,0x10
c00187e4:	83 ec 08             	sub    esp,0x8
c00187e7:	68 60 01 00 00       	push   0x160
c00187ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187f0:	e8 77 20 ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c00187f5:	83 c4 10             	add    esp,0x10
c00187f8:	83 c4 0c             	add    esp,0xc
c00187fb:	c3                   	ret    

c00187fc <RTC::get_update_in_progress_flag()>:
c00187fc:	83 ec 14             	sub    esp,0x14
c00187ff:	6a 0a                	push   0xa
c0018801:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018807:	e8 f0 e9 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c001880c:	83 c4 1c             	add    esp,0x1c
c001880f:	0f b6 c0             	movzx  eax,al
c0018812:	c1 e8 07             	shr    eax,0x7
c0018815:	c3                   	ret    

c0018816 <RTC::completeRTCRefresh()>:
c0018816:	55                   	push   ebp
c0018817:	57                   	push   edi
c0018818:	56                   	push   esi
c0018819:	53                   	push   ebx
c001881a:	83 ec 3c             	sub    esp,0x3c
c001881d:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018823:	83 ec 0c             	sub    esp,0xc
c0018826:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001882a:	e8 cd ff ff ff       	call   c00187fc <RTC::get_update_in_progress_flag()>
c001882f:	83 c4 10             	add    esp,0x10
c0018832:	84 c0                	test   al,al
c0018834:	74 0e                	je     c0018844 <RTC::completeRTCRefresh()+0x2e>
c0018836:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001883c:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018842:	73 df                	jae    c0018823 <RTC::completeRTCRefresh()+0xd>
c0018844:	50                   	push   eax
c0018845:	50                   	push   eax
c0018846:	6a 00                	push   0x0
c0018848:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001884e:	e8 a9 e9 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c0018853:	89 c7                	mov    edi,eax
c0018855:	58                   	pop    eax
c0018856:	5a                   	pop    edx
c0018857:	6a 02                	push   0x2
c0018859:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001885f:	e8 98 e9 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c0018864:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018868:	59                   	pop    ecx
c0018869:	5b                   	pop    ebx
c001886a:	6a 04                	push   0x4
c001886c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018872:	e8 85 e9 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c0018877:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001887b:	5e                   	pop    esi
c001887c:	5d                   	pop    ebp
c001887d:	6a 07                	push   0x7
c001887f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018885:	e8 72 e9 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c001888a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001888e:	58                   	pop    eax
c001888f:	5a                   	pop    edx
c0018890:	6a 08                	push   0x8
c0018892:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018898:	e8 5f e9 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c001889d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00188a1:	59                   	pop    ecx
c00188a2:	5b                   	pop    ebx
c00188a3:	6a 09                	push   0x9
c00188a5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188ab:	e8 4c e9 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c00188b0:	0f b6 c0             	movzx  eax,al
c00188b3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00188b7:	83 c4 10             	add    esp,0x10
c00188ba:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00188c0:	83 ec 0c             	sub    esp,0xc
c00188c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00188c7:	e8 30 ff ff ff       	call   c00187fc <RTC::get_update_in_progress_flag()>
c00188cc:	83 c4 10             	add    esp,0x10
c00188cf:	84 c0                	test   al,al
c00188d1:	74 0e                	je     c00188e1 <RTC::completeRTCRefresh()+0xcb>
c00188d3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00188d9:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00188df:	73 df                	jae    c00188c0 <RTC::completeRTCRefresh()+0xaa>
c00188e1:	51                   	push   ecx
c00188e2:	51                   	push   ecx
c00188e3:	6a 00                	push   0x0
c00188e5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188eb:	e8 0c e9 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c00188f0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00188f4:	5b                   	pop    ebx
c00188f5:	5e                   	pop    esi
c00188f6:	6a 02                	push   0x2
c00188f8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188fe:	e8 f9 e8 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c0018903:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018907:	5d                   	pop    ebp
c0018908:	58                   	pop    eax
c0018909:	6a 04                	push   0x4
c001890b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018911:	e8 e6 e8 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c0018916:	88 c3                	mov    bl,al
c0018918:	58                   	pop    eax
c0018919:	5a                   	pop    edx
c001891a:	6a 07                	push   0x7
c001891c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018922:	e8 d5 e8 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c0018927:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001892b:	59                   	pop    ecx
c001892c:	5e                   	pop    esi
c001892d:	6a 08                	push   0x8
c001892f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018935:	e8 c2 e8 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c001893a:	5d                   	pop    ebp
c001893b:	89 c6                	mov    esi,eax
c001893d:	58                   	pop    eax
c001893e:	6a 09                	push   0x9
c0018940:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018946:	e8 b1 e8 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c001894b:	89 f9                	mov    ecx,edi
c001894d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018951:	83 c4 10             	add    esp,0x10
c0018954:	0f b6 e8             	movzx  ebp,al
c0018957:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001895c:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018960:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018964:	74 27                	je     c001898d <RTC::completeRTCRefresh()+0x177>
c0018966:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001896a:	89 f0                	mov    eax,esi
c001896c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018970:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018974:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018978:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001897c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018980:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018984:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018988:	e9 2d ff ff ff       	jmp    c00188ba <RTC::completeRTCRefresh()+0xa4>
c001898d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018992:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018996:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001899a:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001899e:	75 c6                	jne    c0018966 <RTC::completeRTCRefresh()+0x150>
c00189a0:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00189a5:	89 f1                	mov    ecx,esi
c00189a7:	0f b6 fb             	movzx  edi,bl
c00189aa:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00189ae:	0f b6 c9             	movzx  ecx,cl
c00189b1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00189b5:	89 f1                	mov    ecx,esi
c00189b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189bb:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00189bf:	0f 94 c2             	sete   dl
c00189c2:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00189c6:	0f 94 c0             	sete   al
c00189c9:	21 d0                	and    eax,edx
c00189cb:	31 d2                	xor    edx,edx
c00189cd:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00189d1:	0f 94 c2             	sete   dl
c00189d4:	85 c2                	test   edx,eax
c00189d6:	74 8e                	je     c0018966 <RTC::completeRTCRefresh()+0x150>
c00189d8:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00189dc:	75 88                	jne    c0018966 <RTC::completeRTCRefresh()+0x150>
c00189de:	52                   	push   edx
c00189df:	52                   	push   edx
c00189e0:	6a 0b                	push   0xb
c00189e2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189e8:	e8 0f e8 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c00189ed:	83 c4 10             	add    esp,0x10
c00189f0:	a8 04                	test   al,0x4
c00189f2:	75 7a                	jne    c0018a6e <RTC::completeRTCRefresh()+0x258>
c00189f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189f8:	c1 ef 04             	shr    edi,0x4
c00189fb:	83 e6 0f             	and    esi,0xf
c00189fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018a02:	c1 ed 04             	shr    ebp,0x4
c0018a05:	6b ed 0a             	imul   ebp,ebp,0xa
c0018a08:	c1 ea 04             	shr    edx,0x4
c0018a0b:	6b d2 0a             	imul   edx,edx,0xa
c0018a0e:	83 e1 0f             	and    ecx,0xf
c0018a11:	01 d1                	add    ecx,edx
c0018a13:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018a17:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018a1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a1f:	c1 ea 04             	shr    edx,0x4
c0018a22:	6b d2 0a             	imul   edx,edx,0xa
c0018a25:	83 e1 0f             	and    ecx,0xf
c0018a28:	01 d1                	add    ecx,edx
c0018a2a:	89 fa                	mov    edx,edi
c0018a2c:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018a30:	83 e2 07             	and    edx,0x7
c0018a33:	89 d9                	mov    ecx,ebx
c0018a35:	6b d2 0a             	imul   edx,edx,0xa
c0018a38:	83 e1 0f             	and    ecx,0xf
c0018a3b:	83 e3 80             	and    ebx,0xffffff80
c0018a3e:	01 d1                	add    ecx,edx
c0018a40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a44:	09 cb                	or     ebx,ecx
c0018a46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018a4a:	c1 ea 04             	shr    edx,0x4
c0018a4d:	6b d2 0a             	imul   edx,edx,0xa
c0018a50:	83 e1 0f             	and    ecx,0xf
c0018a53:	01 d1                	add    ecx,edx
c0018a55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a59:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018a5d:	c1 ea 04             	shr    edx,0x4
c0018a60:	6b d2 0a             	imul   edx,edx,0xa
c0018a63:	01 d6                	add    esi,edx
c0018a65:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a69:	83 e2 0f             	and    edx,0xf
c0018a6c:	01 d5                	add    ebp,edx
c0018a6e:	a8 02                	test   al,0x2
c0018a70:	75 15                	jne    c0018a87 <RTC::completeRTCRefresh()+0x271>
c0018a72:	f6 c3 80             	test   bl,0x80
c0018a75:	74 10                	je     c0018a87 <RTC::completeRTCRefresh()+0x271>
c0018a77:	83 e3 7f             	and    ebx,0x7f
c0018a7a:	b9 18 00 00 00       	mov    ecx,0x18
c0018a7f:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018a82:	99                   	cdq    
c0018a83:	f7 f9                	idiv   ecx
c0018a85:	88 d3                	mov    bl,dl
c0018a87:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018a8d:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018a93:	77 06                	ja     c0018a9b <RTC::completeRTCRefresh()+0x285>
c0018a95:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018a9b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018aa0:	31 c9                	xor    ecx,ecx
c0018aa2:	31 d2                	xor    edx,edx
c0018aa4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0018aa8:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018aac:	89 cd                	mov    ebp,ecx
c0018aae:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018ab2:	c1 e7 10             	shl    edi,0x10
c0018ab5:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018abb:	c1 e0 10             	shl    eax,0x10
c0018abe:	09 c5                	or     ebp,eax
c0018ac0:	89 e9                	mov    ecx,ebp
c0018ac2:	0f b7 c2             	movzx  eax,dx
c0018ac5:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018ac9:	09 f8                	or     eax,edi
c0018acb:	89 c2                	mov    edx,eax
c0018acd:	50                   	push   eax
c0018ace:	50                   	push   eax
c0018acf:	88 d9                	mov    cl,bl
c0018ad1:	51                   	push   ecx
c0018ad2:	52                   	push   edx
c0018ad3:	e8 17 3b ff ff       	call   c000c5ef <datetimeToSeconds(datetime_t)>
c0018ad8:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018adc:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018ae2:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018ae8:	83 c4 4c             	add    esp,0x4c
c0018aeb:	5b                   	pop    ebx
c0018aec:	5e                   	pop    esi
c0018aed:	5f                   	pop    edi
c0018aee:	5d                   	pop    ebp
c0018aef:	c3                   	ret    

c0018af0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018af0:	55                   	push   ebp
c0018af1:	57                   	push   edi
c0018af2:	56                   	push   esi
c0018af3:	53                   	push   ebx
c0018af4:	83 ec 30             	sub    esp,0x30
c0018af7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018afb:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018aff:	6a 00                	push   0x0
c0018b01:	6a 00                	push   0x0
c0018b03:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b09:	e8 06 e8 fe ff       	call   c0007314 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b0e:	83 c4 0c             	add    esp,0xc
c0018b11:	6a 00                	push   0x0
c0018b13:	6a 02                	push   0x2
c0018b15:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b1b:	e8 f4 e7 fe ff       	call   c0007314 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b20:	89 f8                	mov    eax,edi
c0018b22:	89 f9                	mov    ecx,edi
c0018b24:	0f b6 c4             	movzx  eax,ah
c0018b27:	31 d2                	xor    edx,edx
c0018b29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b2d:	c1 e9 10             	shr    ecx,0x10
c0018b30:	89 f0                	mov    eax,esi
c0018b32:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018b36:	89 f0                	mov    eax,esi
c0018b38:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018b3c:	0f b6 c4             	movzx  eax,ah
c0018b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b43:	89 f0                	mov    eax,esi
c0018b45:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018b49:	c1 e8 10             	shr    eax,0x10
c0018b4c:	b9 64 00 00 00       	mov    ecx,0x64
c0018b51:	f7 f1                	div    ecx
c0018b53:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018b57:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018b5b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018b5f:	59                   	pop    ecx
c0018b60:	5b                   	pop    ebx
c0018b61:	89 fb                	mov    ebx,edi
c0018b63:	6a 0b                	push   0xb
c0018b65:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b6b:	e8 8c e6 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c0018b70:	83 c4 10             	add    esp,0x10
c0018b73:	a8 04                	test   al,0x4
c0018b75:	89 c5                	mov    ebp,eax
c0018b77:	75 6e                	jne    c0018be7 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018b79:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018b7d:	31 d2                	xor    edx,edx
c0018b7f:	0f b6 c1             	movzx  eax,cl
c0018b82:	b9 0a 00 00 00       	mov    ecx,0xa
c0018b87:	f7 f1                	div    ecx
c0018b89:	c1 e0 04             	shl    eax,0x4
c0018b8c:	09 d0                	or     eax,edx
c0018b8e:	31 d2                	xor    edx,edx
c0018b90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b94:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018b99:	f7 f1                	div    ecx
c0018b9b:	c1 e0 04             	shl    eax,0x4
c0018b9e:	09 d0                	or     eax,edx
c0018ba0:	31 d2                	xor    edx,edx
c0018ba2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ba6:	0f b6 c3             	movzx  eax,bl
c0018ba9:	f7 f1                	div    ecx
c0018bab:	c1 e0 04             	shl    eax,0x4
c0018bae:	09 d0                	or     eax,edx
c0018bb0:	31 d2                	xor    edx,edx
c0018bb2:	89 c3                	mov    ebx,eax
c0018bb4:	89 f0                	mov    eax,esi
c0018bb6:	0f b6 c0             	movzx  eax,al
c0018bb9:	f7 f1                	div    ecx
c0018bbb:	c1 e0 04             	shl    eax,0x4
c0018bbe:	09 d0                	or     eax,edx
c0018bc0:	31 d2                	xor    edx,edx
c0018bc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018bc6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018bcb:	f7 f1                	div    ecx
c0018bcd:	c1 e0 04             	shl    eax,0x4
c0018bd0:	09 d0                	or     eax,edx
c0018bd2:	31 d2                	xor    edx,edx
c0018bd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018bd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018bdc:	f7 f1                	div    ecx
c0018bde:	c1 e0 04             	shl    eax,0x4
c0018be1:	09 d0                	or     eax,edx
c0018be3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018be7:	83 e5 02             	and    ebp,0x2
c0018bea:	75 1e                	jne    c0018c0a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018bec:	0f b6 c3             	movzx  eax,bl
c0018bef:	83 f8 0b             	cmp    eax,0xb
c0018bf2:	76 10                	jbe    c0018c04 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018bf4:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018bf7:	84 d2                	test   dl,dl
c0018bf9:	88 d3                	mov    bl,dl
c0018bfb:	75 02                	jne    c0018bff <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018bfd:	b3 0c                	mov    bl,0xc
c0018bff:	83 cb 80             	or     ebx,0xffffff80
c0018c02:	eb 06                	jmp    c0018c0a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c04:	85 c0                	test   eax,eax
c0018c06:	75 02                	jne    c0018c0a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c08:	b3 0c                	mov    bl,0xc
c0018c0a:	50                   	push   eax
c0018c0b:	0f b6 db             	movzx  ebx,bl
c0018c0e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018c13:	52                   	push   edx
c0018c14:	6a 00                	push   0x0
c0018c16:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c1c:	e8 f3 e6 fe ff       	call   c0007314 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c21:	83 c4 0c             	add    esp,0xc
c0018c24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018c29:	50                   	push   eax
c0018c2a:	6a 02                	push   0x2
c0018c2c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c32:	e8 dd e6 fe ff       	call   c0007314 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c37:	83 c4 0c             	add    esp,0xc
c0018c3a:	53                   	push   ebx
c0018c3b:	6a 04                	push   0x4
c0018c3d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c43:	e8 cc e6 fe ff       	call   c0007314 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c48:	83 c4 0c             	add    esp,0xc
c0018c4b:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018c50:	52                   	push   edx
c0018c51:	6a 07                	push   0x7
c0018c53:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c59:	e8 b6 e6 fe ff       	call   c0007314 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c5e:	83 c4 0c             	add    esp,0xc
c0018c61:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018c66:	50                   	push   eax
c0018c67:	6a 08                	push   0x8
c0018c69:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c6f:	e8 a0 e6 fe ff       	call   c0007314 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c74:	83 c4 0c             	add    esp,0xc
c0018c77:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018c7c:	55                   	push   ebp
c0018c7d:	6a 09                	push   0x9
c0018c7f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c85:	e8 8a e6 fe ff       	call   c0007314 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c8a:	5a                   	pop    edx
c0018c8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018c8f:	e8 82 fb ff ff       	call   c0018816 <RTC::completeRTCRefresh()>
c0018c94:	83 c4 3c             	add    esp,0x3c
c0018c97:	b0 01                	mov    al,0x1
c0018c99:	5b                   	pop    ebx
c0018c9a:	5e                   	pop    esi
c0018c9b:	5f                   	pop    edi
c0018c9c:	5d                   	pop    ebp
c0018c9d:	c3                   	ret    

c0018c9e <rtcIRQHandler(regs*, void*)>:
c0018c9e:	53                   	push   ebx
c0018c9f:	83 ec 10             	sub    esp,0x10
c0018ca2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018ca6:	6a 0c                	push   0xc
c0018ca8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018cae:	e8 49 e5 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c0018cb3:	83 c4 10             	add    esp,0x10
c0018cb6:	a8 80                	test   al,0x80
c0018cb8:	74 24                	je     c0018cde <rtcIRQHandler(regs*, void*)+0x40>
c0018cba:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018cc1:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018cc8:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018ccf:	75 0d                	jne    c0018cde <rtcIRQHandler(regs*, void*)+0x40>
c0018cd1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018cd5:	83 c4 08             	add    esp,0x8
c0018cd8:	5b                   	pop    ebx
c0018cd9:	e9 38 fb ff ff       	jmp    c0018816 <RTC::completeRTCRefresh()>
c0018cde:	83 c4 08             	add    esp,0x8
c0018ce1:	5b                   	pop    ebx
c0018ce2:	c3                   	ret    
c0018ce3:	90                   	nop

c0018ce4 <RTC::RTC()>:
c0018ce4:	83 ec 1c             	sub    esp,0x1c
c0018ce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ceb:	83 ec 08             	sub    esp,0x8
c0018cee:	68 43 2f 02 c0       	push   0xc0022f43
c0018cf3:	50                   	push   eax
c0018cf4:	e8 d1 37 ff ff       	call   c000c4ca <Clock::Clock(char const*)>
c0018cf9:	83 c4 10             	add    esp,0x10
c0018cfc:	ba 60 2f 02 c0       	mov    edx,0xc0022f60
c0018d01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d05:	89 10                	mov    DWORD PTR [eax],edx
c0018d07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d0b:	83 ec 0c             	sub    esp,0xc
c0018d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d12:	6a 01                	push   0x1
c0018d14:	68 9e 8c 01 c0       	push   0xc0018c9e
c0018d19:	6a 08                	push   0x8
c0018d1b:	50                   	push   eax
c0018d1c:	e8 8b 3c ff ff       	call   c000c9ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018d21:	83 c4 20             	add    esp,0x20
c0018d24:	89 c2                	mov    edx,eax
c0018d26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d2a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018d30:	fa                   	cli    
c0018d31:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d36:	83 c0 01             	add    eax,0x1
c0018d39:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d3e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d43:	83 ec 08             	sub    esp,0x8
c0018d46:	6a 0b                	push   0xb
c0018d48:	50                   	push   eax
c0018d49:	e8 ae e4 fe ff       	call   c00071fc <Computer::readCMOS(unsigned char)>
c0018d4e:	83 c4 10             	add    esp,0x10
c0018d51:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018d55:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d5a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018d5e:	83 ca 10             	or     edx,0x10
c0018d61:	0f b6 d2             	movzx  edx,dl
c0018d64:	83 ec 04             	sub    esp,0x4
c0018d67:	52                   	push   edx
c0018d68:	6a 0b                	push   0xb
c0018d6a:	50                   	push   eax
c0018d6b:	e8 a4 e5 fe ff       	call   c0007314 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d70:	83 c4 10             	add    esp,0x10
c0018d73:	83 ec 0c             	sub    esp,0xc
c0018d76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d7a:	e8 97 fa ff ff       	call   c0018816 <RTC::completeRTCRefresh()>
c0018d7f:	83 c4 10             	add    esp,0x10
c0018d82:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d87:	83 e8 01             	sub    eax,0x1
c0018d8a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d8f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d94:	85 c0                	test   eax,eax
c0018d96:	75 01                	jne    c0018d99 <RTC::RTC()+0xb5>
c0018d98:	fb                   	sti    
c0018d99:	90                   	nop
c0018d9a:	83 c4 1c             	add    esp,0x1c
c0018d9d:	c3                   	ret    
c0018d9e:	66 90                	xchg   ax,ax

c0018da0 <HalConsoleScroll(int, int)>:
c0018da0:	83 ec 10             	sub    esp,0x10
c0018da3:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018dab:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018db3:	90                   	nop
c0018db4:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018db9:	0f 8f e1 00 00 00    	jg     c0018ea0 <HalConsoleScroll(int, int)+0x100>
c0018dbf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018dc7:	90                   	nop
c0018dc8:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018dd0:	0f 8f be 00 00 00    	jg     c0018e94 <HalConsoleScroll(int, int)+0xf4>
c0018dd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018dda:	89 d0                	mov    eax,edx
c0018ddc:	c1 e0 02             	shl    eax,0x2
c0018ddf:	01 d0                	add    eax,edx
c0018de1:	c1 e0 05             	shl    eax,0x5
c0018de4:	89 c2                	mov    edx,eax
c0018de6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dea:	01 d0                	add    eax,edx
c0018dec:	89 c2                	mov    edx,eax
c0018dee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018df2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018df5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018df9:	89 d0                	mov    eax,edx
c0018dfb:	c1 e0 02             	shl    eax,0x2
c0018dfe:	01 d0                	add    eax,edx
c0018e00:	c1 e0 05             	shl    eax,0x5
c0018e03:	89 c2                	mov    edx,eax
c0018e05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e09:	01 d0                	add    eax,edx
c0018e0b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018e11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e15:	01 d0                	add    eax,edx
c0018e17:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018e19:	88 10                	mov    BYTE PTR [eax],dl
c0018e1b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018e20:	75 66                	jne    c0018e88 <HalConsoleScroll(int, int)+0xe8>
c0018e22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e26:	83 e0 01             	and    eax,0x1
c0018e29:	74 39                	je     c0018e64 <HalConsoleScroll(int, int)+0xc4>
c0018e2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e2f:	83 e0 0f             	and    eax,0xf
c0018e32:	88 c2                	mov    dl,al
c0018e34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e38:	c1 e0 04             	shl    eax,0x4
c0018e3b:	09 d0                	or     eax,edx
c0018e3d:	88 c1                	mov    cl,al
c0018e3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e43:	89 d0                	mov    eax,edx
c0018e45:	c1 e0 02             	shl    eax,0x2
c0018e48:	01 d0                	add    eax,edx
c0018e4a:	c1 e0 05             	shl    eax,0x5
c0018e4d:	89 c2                	mov    edx,eax
c0018e4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e53:	01 d0                	add    eax,edx
c0018e55:	89 c2                	mov    edx,eax
c0018e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e5b:	01 d0                	add    eax,edx
c0018e5d:	88 ca                	mov    dl,cl
c0018e5f:	88 10                	mov    BYTE PTR [eax],dl
c0018e61:	eb 25                	jmp    c0018e88 <HalConsoleScroll(int, int)+0xe8>
c0018e63:	90                   	nop
c0018e64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e68:	89 d0                	mov    eax,edx
c0018e6a:	c1 e0 02             	shl    eax,0x2
c0018e6d:	01 d0                	add    eax,edx
c0018e6f:	c1 e0 05             	shl    eax,0x5
c0018e72:	89 c2                	mov    edx,eax
c0018e74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e78:	01 d0                	add    eax,edx
c0018e7a:	89 c2                	mov    edx,eax
c0018e7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e80:	01 d0                	add    eax,edx
c0018e82:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018e85:	8d 76 00             	lea    esi,[esi+0x0]
c0018e88:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018e8d:	e9 36 ff ff ff       	jmp    c0018dc8 <HalConsoleScroll(int, int)+0x28>
c0018e92:	66 90                	xchg   ax,ax
c0018e94:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018e99:	e9 16 ff ff ff       	jmp    c0018db4 <HalConsoleScroll(int, int)+0x14>
c0018e9e:	66 90                	xchg   ax,ax
c0018ea0:	90                   	nop
c0018ea1:	83 c4 10             	add    esp,0x10
c0018ea4:	c3                   	ret    
c0018ea5:	8d 76 00             	lea    esi,[esi+0x0]

c0018ea8 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018ea8:	83 ec 14             	sub    esp,0x14
c0018eab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018eaf:	88 04 24             	mov    BYTE PTR [esp],al
c0018eb2:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018eb5:	0f b6 c0             	movzx  eax,al
c0018eb8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ebc:	89 d1                	mov    ecx,edx
c0018ebe:	83 e1 0f             	and    ecx,0xf
c0018ec1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018ec5:	c1 e2 04             	shl    edx,0x4
c0018ec8:	0f b6 d2             	movzx  edx,dl
c0018ecb:	09 ca                	or     edx,ecx
c0018ecd:	c1 e2 08             	shl    edx,0x8
c0018ed0:	09 d0                	or     eax,edx
c0018ed2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018ed7:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018edf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018ee3:	89 d0                	mov    eax,edx
c0018ee5:	c1 e0 02             	shl    eax,0x2
c0018ee8:	01 d0                	add    eax,edx
c0018eea:	c1 e0 04             	shl    eax,0x4
c0018eed:	89 c2                	mov    edx,eax
c0018eef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ef3:	01 d0                	add    eax,edx
c0018ef5:	d1 e0                	shl    eax,1
c0018ef7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018efb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018eff:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018f04:	66 89 10             	mov    WORD PTR [eax],dx
c0018f07:	90                   	nop
c0018f08:	83 c4 14             	add    esp,0x14
c0018f0b:	c3                   	ret    

c0018f0c <HalConsoleCursorUpdate(int, int)>:
c0018f0c:	83 ec 20             	sub    esp,0x20
c0018f0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f13:	89 c2                	mov    edx,eax
c0018f15:	c1 e2 02             	shl    edx,0x2
c0018f18:	01 d0                	add    eax,edx
c0018f1a:	c1 e0 04             	shl    eax,0x4
c0018f1d:	89 c2                	mov    edx,eax
c0018f1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f23:	01 d0                	add    eax,edx
c0018f25:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018f2a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018f31:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018f36:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018f3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f3e:	ee                   	out    dx,al
c0018f3f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f44:	0f b6 c0             	movzx  eax,al
c0018f47:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018f4e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018f52:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018f56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f5a:	ee                   	out    dx,al
c0018f5b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018f62:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018f67:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018f6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018f6f:	ee                   	out    dx,al
c0018f70:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018f75:	c1 e8 08             	shr    eax,0x8
c0018f78:	0f b6 c0             	movzx  eax,al
c0018f7b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018f82:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018f86:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f8e:	ee                   	out    dx,al
c0018f8f:	90                   	nop
c0018f90:	83 c4 20             	add    esp,0x20
c0018f93:	c3                   	ret    

c0018f94 <FAT::getName()>:
c0018f94:	b8 94 2f 02 c0       	mov    eax,0xc0022f94
c0018f99:	c3                   	ret    
c0018f9a:	66 90                	xchg   ax,ax

c0018f9c <FAT::tell(void*, unsigned long long*)>:
c0018f9c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018fa1:	75 09                	jne    c0018fac <FAT::tell(void*, unsigned long long*)+0x10>
c0018fa3:	b8 04 00 00 00       	mov    eax,0x4
c0018fa8:	c3                   	ret    
c0018fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0018fac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018fb1:	75 09                	jne    c0018fbc <FAT::tell(void*, unsigned long long*)+0x20>
c0018fb3:	b8 04 00 00 00       	mov    eax,0x4
c0018fb8:	c3                   	ret    
c0018fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0018fbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fc0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018fc3:	ba 00 00 00 00       	mov    edx,0x0
c0018fc8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018fcc:	89 01                	mov    DWORD PTR [ecx],eax
c0018fce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018fd1:	b8 00 00 00 00       	mov    eax,0x0
c0018fd6:	c3                   	ret    
c0018fd7:	90                   	nop

c0018fd8 <FAT::stat(void*, unsigned long long*)>:
c0018fd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018fdd:	75 09                	jne    c0018fe8 <FAT::stat(void*, unsigned long long*)+0x10>
c0018fdf:	b8 04 00 00 00       	mov    eax,0x4
c0018fe4:	c3                   	ret    
c0018fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fe8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018fed:	75 09                	jne    c0018ff8 <FAT::stat(void*, unsigned long long*)+0x20>
c0018fef:	b8 04 00 00 00       	mov    eax,0x4
c0018ff4:	c3                   	ret    
c0018ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ff8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ffc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018fff:	ba 00 00 00 00       	mov    edx,0x0
c0019004:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019008:	89 01                	mov    DWORD PTR [ecx],eax
c001900a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001900d:	b8 00 00 00 00       	mov    eax,0x0
c0019012:	c3                   	ret    
c0019013:	90                   	nop

c0019014 <FAT::~FAT()>:
c0019014:	83 ec 0c             	sub    esp,0xc
c0019017:	ba e0 2f 02 c0       	mov    edx,0xc0022fe0
c001901c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019020:	89 10                	mov    DWORD PTR [eax],edx
c0019022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019026:	83 ec 0c             	sub    esp,0xc
c0019029:	50                   	push   eax
c001902a:	e8 c1 27 ff ff       	call   c000b7f0 <Filesystem::~Filesystem()>
c001902f:	83 c4 10             	add    esp,0x10
c0019032:	90                   	nop
c0019033:	83 c4 0c             	add    esp,0xc
c0019036:	c3                   	ret    
c0019037:	90                   	nop

c0019038 <FAT::~FAT()>:
c0019038:	83 ec 0c             	sub    esp,0xc
c001903b:	83 ec 0c             	sub    esp,0xc
c001903e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019042:	e8 cd ff ff ff       	call   c0019014 <FAT::~FAT()>
c0019047:	83 c4 10             	add    esp,0x10
c001904a:	83 ec 08             	sub    esp,0x8
c001904d:	6a 08                	push   0x8
c001904f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019053:	e8 14 18 ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c0019058:	83 c4 10             	add    esp,0x10
c001905b:	83 c4 0c             	add    esp,0xc
c001905e:	c3                   	ret    
c001905f:	90                   	nop

c0019060 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019060:	83 ec 1c             	sub    esp,0x1c
c0019063:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001906a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001906f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019073:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001907a:	83 f8 ff             	cmp    eax,0xffffffff
c001907d:	75 35                	jne    c00190b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001907f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019083:	88 c2                	mov    dl,al
c0019085:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001908a:	01 d0                	add    eax,edx
c001908c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019090:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019096:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001909a:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00190a1:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00190aa:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00190b1:	eb 19                	jmp    c00190cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00190b3:	90                   	nop
c00190b4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00190b8:	88 c2                	mov    dl,al
c00190ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190be:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190c5:	01 d0                	add    eax,edx
c00190c7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00190cb:	90                   	nop
c00190cc:	83 ec 04             	sub    esp,0x4
c00190cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00190d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00190d7:	8d 44 24 15          	lea    eax,[esp+0x15]
c00190db:	50                   	push   eax
c00190dc:	e8 12 bf fe ff       	call   c0004ff3 <f_getlabel>
c00190e1:	83 c4 10             	add    esp,0x10
c00190e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00190ed:	75 09                	jne    c00190f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00190ef:	b8 00 00 00 00       	mov    eax,0x0
c00190f4:	eb 0a                	jmp    c0019100 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00190f6:	66 90                	xchg   ax,ax
c00190f8:	b8 01 00 00 00       	mov    eax,0x1
c00190fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019100:	83 c4 1c             	add    esp,0x1c
c0019103:	c3                   	ret    

c0019104 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019104:	53                   	push   ebx
c0019105:	83 ec 58             	sub    esp,0x58
c0019108:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019110:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019114:	b9 00 00 00 00       	mov    ecx,0x0
c0019119:	b8 3c 00 00 00       	mov    eax,0x3c
c001911e:	83 e0 f8             	and    eax,0xfffffff8
c0019121:	89 c3                	mov    ebx,eax
c0019123:	b8 00 00 00 00       	mov    eax,0x0
c0019128:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001912c:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0019130:	83 c0 08             	add    eax,0x8
c0019133:	39 d8                	cmp    eax,ebx
c0019135:	72 f1                	jb     c0019128 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0019137:	01 c2                	add    edx,eax
c0019139:	89 0a                	mov    DWORD PTR [edx],ecx
c001913b:	83 c2 04             	add    edx,0x4
c001913e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019142:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019149:	83 f8 ff             	cmp    eax,0xffffffff
c001914c:	75 36                	jne    c0019184 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001914e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019152:	88 c2                	mov    dl,al
c0019154:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019159:	01 d0                	add    eax,edx
c001915b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001915f:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019165:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019169:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019170:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019175:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019179:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019180:	eb 1a                	jmp    c001919c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0019182:	66 90                	xchg   ax,ax
c0019184:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019188:	88 c2                	mov    dl,al
c001918a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001918e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019195:	01 d0                	add    eax,edx
c0019197:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001919b:	90                   	nop
c001919c:	83 ec 08             	sub    esp,0x8
c001919f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00191a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191a7:	50                   	push   eax
c00191a8:	e8 c3 76 fe ff       	call   c0000870 <strcat>
c00191ad:	83 c4 10             	add    esp,0x10
c00191b0:	83 ec 0c             	sub    esp,0xc
c00191b3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191b7:	50                   	push   eax
c00191b8:	e8 8a bf fe ff       	call   c0005147 <f_setlabel>
c00191bd:	83 c4 10             	add    esp,0x10
c00191c0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00191c4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00191c9:	75 09                	jne    c00191d4 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c00191cb:	b8 00 00 00 00       	mov    eax,0x0
c00191d0:	eb 0a                	jmp    c00191dc <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c00191d2:	66 90                	xchg   ax,ax
c00191d4:	b8 01 00 00 00       	mov    eax,0x1
c00191d9:	8d 76 00             	lea    esi,[esi+0x0]
c00191dc:	83 c4 58             	add    esp,0x58
c00191df:	5b                   	pop    ebx
c00191e0:	c3                   	ret    
c00191e1:	90                   	nop
c00191e2:	66 90                	xchg   ax,ax

c00191e4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00191e4:	83 ec 2c             	sub    esp,0x2c
c00191e7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00191ef:	83 ec 08             	sub    esp,0x8
c00191f2:	68 b8 2f 02 c0       	push   0xc0022fb8
c00191f7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191fb:	e8 80 75 fe ff       	call   c0000780 <strcmp>
c0019200:	83 c4 10             	add    esp,0x10
c0019203:	85 c0                	test   eax,eax
c0019205:	0f 94 c0             	sete   al
c0019208:	0f b6 c0             	movzx  eax,al
c001920b:	85 c0                	test   eax,eax
c001920d:	74 0d                	je     c001921c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001920f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019217:	e9 c0 00 00 00       	jmp    c00192dc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001921c:	83 ec 08             	sub    esp,0x8
c001921f:	68 aa 2f 02 c0       	push   0xc0022faa
c0019224:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019228:	e8 53 75 fe ff       	call   c0000780 <strcmp>
c001922d:	83 c4 10             	add    esp,0x10
c0019230:	85 c0                	test   eax,eax
c0019232:	0f 94 c0             	sete   al
c0019235:	0f b6 c0             	movzx  eax,al
c0019238:	85 c0                	test   eax,eax
c001923a:	74 10                	je     c001924c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001923c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019244:	e9 93 00 00 00       	jmp    c00192dc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019249:	8d 76 00             	lea    esi,[esi+0x0]
c001924c:	83 ec 08             	sub    esp,0x8
c001924f:	68 b0 2f 02 c0       	push   0xc0022fb0
c0019254:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019258:	e8 23 75 fe ff       	call   c0000780 <strcmp>
c001925d:	83 c4 10             	add    esp,0x10
c0019260:	85 c0                	test   eax,eax
c0019262:	0f 94 c0             	sete   al
c0019265:	0f b6 c0             	movzx  eax,al
c0019268:	85 c0                	test   eax,eax
c001926a:	74 0c                	je     c0019278 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001926c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019274:	eb 66                	jmp    c00192dc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019276:	66 90                	xchg   ax,ax
c0019278:	83 ec 08             	sub    esp,0x8
c001927b:	68 1c 06 02 c0       	push   0xc002061c
c0019280:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019284:	e8 f7 74 fe ff       	call   c0000780 <strcmp>
c0019289:	83 c4 10             	add    esp,0x10
c001928c:	85 c0                	test   eax,eax
c001928e:	0f 94 c0             	sete   al
c0019291:	0f b6 c0             	movzx  eax,al
c0019294:	85 c0                	test   eax,eax
c0019296:	74 0c                	je     c00192a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019298:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00192a0:	eb 3a                	jmp    c00192dc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192a2:	66 90                	xchg   ax,ax
c00192a4:	83 ec 08             	sub    esp,0x8
c00192a7:	68 b6 2f 02 c0       	push   0xc0022fb6
c00192ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192b0:	e8 cb 74 fe ff       	call   c0000780 <strcmp>
c00192b5:	83 c4 10             	add    esp,0x10
c00192b8:	85 c0                	test   eax,eax
c00192ba:	0f 94 c0             	sete   al
c00192bd:	0f b6 c0             	movzx  eax,al
c00192c0:	85 c0                	test   eax,eax
c00192c2:	74 0c                	je     c00192d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00192c4:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00192cc:	eb 0e                	jmp    c00192dc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192ce:	66 90                	xchg   ax,ax
c00192d0:	b8 08 00 00 00       	mov    eax,0x8
c00192d5:	e9 ea 00 00 00       	jmp    c00193c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192da:	66 90                	xchg   ax,ax
c00192dc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00192e3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00192e8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192ec:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00192f3:	83 f8 ff             	cmp    eax,0xffffffff
c00192f6:	75 34                	jne    c001932c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00192f8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00192fc:	88 c2                	mov    dl,al
c00192fe:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019303:	01 d0                	add    eax,edx
c0019305:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019309:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001930f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019313:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c001931a:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001931f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019323:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c001932a:	eb 18                	jmp    c0019344 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001932c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019330:	88 c2                	mov    dl,al
c0019332:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019336:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001933d:	01 d0                	add    eax,edx
c001933f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019343:	90                   	nop
c0019344:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019348:	88 04 24             	mov    BYTE PTR [esp],al
c001934b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001934f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019353:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001935b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019360:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019368:	83 ec 0c             	sub    esp,0xc
c001936b:	68 00 20 00 00       	push   0x2000
c0019370:	e8 be e7 fe ff       	call   c0007b33 <malloc>
c0019375:	83 c4 10             	add    esp,0x10
c0019378:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001937c:	68 00 20 00 00       	push   0x2000
c0019381:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019385:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019389:	50                   	push   eax
c001938a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001938e:	50                   	push   eax
c001938f:	e8 b0 c0 fe ff       	call   c0005444 <f_mkfs>
c0019394:	83 c4 10             	add    esp,0x10
c0019397:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001939b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00193a0:	75 0a                	jne    c00193ac <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00193a2:	b8 00 00 00 00       	mov    eax,0x0
c00193a7:	eb 1b                	jmp    c00193c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00193a9:	8d 76 00             	lea    esi,[esi+0x0]
c00193ac:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00193b1:	75 09                	jne    c00193bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00193b3:	b8 09 00 00 00       	mov    eax,0x9
c00193b8:	eb 0a                	jmp    c00193c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00193ba:	66 90                	xchg   ax,ax
c00193bc:	b8 01 00 00 00       	mov    eax,0x1
c00193c1:	8d 76 00             	lea    esi,[esi+0x0]
c00193c4:	83 c4 2c             	add    esp,0x2c
c00193c7:	c3                   	ret    

c00193c8 <FAT::tryMount(LogicalDisk*, int)>:
c00193c8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00193ce:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193d3:	83 f8 14             	cmp    eax,0x14
c00193d6:	75 18                	jne    c00193f0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00193d8:	83 ec 0c             	sub    esp,0xc
c00193db:	68 bc 2f 02 c0       	push   0xc0022fbc
c00193e0:	e8 5a 82 ff ff       	call   c001163f <KePanic(char const*)>
c00193e5:	83 c4 10             	add    esp,0x10
c00193e8:	b0 00                	mov    al,0x0
c00193ea:	e9 ed 01 00 00       	jmp    c00195dc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193ef:	90                   	nop
c00193f0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00193f7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00193fd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019403:	3d 00 02 00 00       	cmp    eax,0x200
c0019408:	74 0a                	je     c0019414 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001940a:	b0 00                	mov    al,0x0
c001940c:	e9 cb 01 00 00       	jmp    c00195dc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019411:	8d 76 00             	lea    esi,[esi+0x0]
c0019414:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001941c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019423:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001942a:	83 f8 ff             	cmp    eax,0xffffffff
c001942d:	74 09                	je     c0019438 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001942f:	b0 01                	mov    al,0x1
c0019431:	e9 a6 01 00 00       	jmp    c00195dc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019436:	66 90                	xchg   ax,ax
c0019438:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019442:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001944a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019451:	88 c2                	mov    dl,al
c0019453:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019458:	01 d0                	add    eax,edx
c001945a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019461:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019467:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001946e:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019475:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001947a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019481:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019488:	83 ec 0c             	sub    esp,0xc
c001948b:	68 34 02 00 00       	push   0x234
c0019490:	e8 9e e6 fe ff       	call   c0007b33 <malloc>
c0019495:	83 c4 10             	add    esp,0x10
c0019498:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001949f:	83 ec 04             	sub    esp,0x4
c00194a2:	6a 00                	push   0x0
c00194a4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194ab:	50                   	push   eax
c00194ac:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194b3:	e8 86 a7 fe ff       	call   c0003c3e <f_mount>
c00194b8:	83 c4 10             	add    esp,0x10
c00194bb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00194c2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00194ca:	74 1c                	je     c00194e8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00194cc:	83 ec 0c             	sub    esp,0xc
c00194cf:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194d6:	e8 78 e6 fe ff       	call   c0007b53 <rfree>
c00194db:	83 c4 10             	add    esp,0x10
c00194de:	b0 00                	mov    al,0x0
c00194e0:	e9 f7 00 00 00       	jmp    c00195dc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00194e5:	8d 76 00             	lea    esi,[esi+0x0]
c00194e8:	83 ec 04             	sub    esp,0x4
c00194eb:	68 00 01 00 00       	push   0x100
c00194f0:	6a 00                	push   0x0
c00194f2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194f9:	50                   	push   eax
c00194fa:	e8 f1 6f fe ff       	call   c00004f0 <memset>
c00194ff:	83 c4 10             	add    esp,0x10
c0019502:	83 ec 08             	sub    esp,0x8
c0019505:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001950c:	50                   	push   eax
c001950d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019514:	50                   	push   eax
c0019515:	e8 56 73 fe ff       	call   c0000870 <strcat>
c001951a:	83 c4 10             	add    esp,0x10
c001951d:	83 ec 08             	sub    esp,0x8
c0019520:	68 ca 2f 02 c0       	push   0xc0022fca
c0019525:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001952c:	50                   	push   eax
c001952d:	e8 3e 73 fe ff       	call   c0000870 <strcat>
c0019532:	83 c4 10             	add    esp,0x10
c0019535:	83 ec 04             	sub    esp,0x4
c0019538:	6a 01                	push   0x1
c001953a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019541:	50                   	push   eax
c0019542:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019546:	50                   	push   eax
c0019547:	e8 54 a7 fe ff       	call   c0003ca0 <f_open>
c001954c:	83 c4 10             	add    esp,0x10
c001954f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019556:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001955d:	85 c0                	test   eax,eax
c001955f:	74 0b                	je     c001956c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019561:	78 31                	js     c0019594 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019563:	83 e8 04             	sub    eax,0x4
c0019566:	83 f8 01             	cmp    eax,0x1
c0019569:	77 29                	ja     c0019594 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001956b:	90                   	nop
c001956c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019574:	83 ec 0c             	sub    esp,0xc
c0019577:	8d 44 24 14          	lea    eax,[esp+0x14]
c001957b:	50                   	push   eax
c001957c:	e8 cf ae fe ff       	call   c0004450 <f_close>
c0019581:	83 c4 10             	add    esp,0x10
c0019584:	90                   	nop
c0019585:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001958d:	85 c0                	test   eax,eax
c001958f:	74 43                	je     c00195d4 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019591:	eb 31                	jmp    c00195c4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019593:	90                   	nop
c0019594:	83 ec 0c             	sub    esp,0xc
c0019597:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001959e:	e8 b0 e5 fe ff       	call   c0007b53 <rfree>
c00195a3:	83 c4 10             	add    esp,0x10
c00195a6:	83 ec 04             	sub    esp,0x4
c00195a9:	6a 00                	push   0x0
c00195ab:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00195b2:	50                   	push   eax
c00195b3:	6a 00                	push   0x0
c00195b5:	e8 84 a6 fe ff       	call   c0003c3e <f_mount>
c00195ba:	83 c4 10             	add    esp,0x10
c00195bd:	b0 00                	mov    al,0x0
c00195bf:	eb 1b                	jmp    c00195dc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00195c1:	8d 76 00             	lea    esi,[esi+0x0]
c00195c4:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00195c9:	83 c0 01             	add    eax,0x1
c00195cc:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c00195d1:	8d 76 00             	lea    esi,[esi+0x0]
c00195d4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00195db:	90                   	nop
c00195dc:	81 c4 4c 03 00 00    	add    esp,0x34c
c00195e2:	c3                   	ret    
c00195e3:	90                   	nop

c00195e4 <FAT::allocateSwapfile(char const*, int)>:
c00195e4:	55                   	push   ebp
c00195e5:	57                   	push   edi
c00195e6:	56                   	push   esi
c00195e7:	53                   	push   ebx
c00195e8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00195ee:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00195f9:	83 ec 0c             	sub    esp,0xc
c00195fc:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019603:	e8 2b e5 fe ff       	call   c0007b33 <malloc>
c0019608:	83 c4 10             	add    esp,0x10
c001960b:	89 c7                	mov    edi,eax
c001960d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0019612:	83 ec 04             	sub    esp,0x4
c0019615:	50                   	push   eax
c0019616:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001961d:	57                   	push   edi
c001961e:	e8 5f 25 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0019623:	83 c4 10             	add    esp,0x10
c0019626:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001962d:	83 ec 04             	sub    esp,0x4
c0019630:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019634:	50                   	push   eax
c0019635:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019639:	50                   	push   eax
c001963a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019641:	e8 5c 28 ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c0019646:	83 c4 10             	add    esp,0x10
c0019649:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019650:	c1 e0 14             	shl    eax,0x14
c0019653:	89 c7                	mov    edi,eax
c0019655:	89 c5                	mov    ebp,eax
c0019657:	c1 fd 1f             	sar    ebp,0x1f
c001965a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001965e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019662:	89 f9                	mov    ecx,edi
c0019664:	31 c1                	xor    ecx,eax
c0019666:	89 cb                	mov    ebx,ecx
c0019668:	89 e9                	mov    ecx,ebp
c001966a:	31 d1                	xor    ecx,edx
c001966c:	89 ce                	mov    esi,ecx
c001966e:	89 f0                	mov    eax,esi
c0019670:	09 d8                	or     eax,ebx
c0019672:	0f 84 9c 00 00 00    	je     c0019714 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019678:	83 ec 0c             	sub    esp,0xc
c001967b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019682:	e8 e7 26 ff ff       	call   c000bd6e <File::unlink()>
c0019687:	83 c4 10             	add    esp,0x10
c001968a:	83 ec 08             	sub    esp,0x8
c001968d:	6a 12                	push   0x12
c001968f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019696:	e8 05 25 ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c001969b:	83 c4 10             	add    esp,0x10
c001969e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196a5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00196ab:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00196b2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00196b9:	c1 e0 14             	shl    eax,0x14
c00196bc:	83 ec 04             	sub    esp,0x4
c00196bf:	6a 01                	push   0x1
c00196c1:	50                   	push   eax
c00196c2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00196c9:	e8 09 bc fe ff       	call   c00052d7 <f_expand>
c00196ce:	83 c4 10             	add    esp,0x10
c00196d1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00196da:	83 c0 10             	add    eax,0x10
c00196dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00196df:	83 ec 0c             	sub    esp,0xc
c00196e2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00196e6:	52                   	push   edx
c00196e7:	8d 54 24 30          	lea    edx,[esp+0x30]
c00196eb:	52                   	push   edx
c00196ec:	6a 00                	push   0x0
c00196ee:	68 00 04 00 00       	push   0x400
c00196f3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00196fa:	ff d0                	call   eax
c00196fc:	83 c4 20             	add    esp,0x20
c00196ff:	83 ec 0c             	sub    esp,0xc
c0019702:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019709:	e8 f0 24 ff ff       	call   c000bbfe <File::close()>
c001970e:	83 c4 10             	add    esp,0x10
c0019711:	8d 76 00             	lea    esi,[esi+0x0]
c0019714:	83 ec 08             	sub    esp,0x8
c0019717:	6a 01                	push   0x1
c0019719:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019720:	e8 7b 24 ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0019725:	83 c4 10             	add    esp,0x10
c0019728:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001972f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019731:	83 c0 0c             	add    eax,0xc
c0019734:	8b 00                	mov    eax,DWORD PTR [eax]
c0019736:	83 ec 0c             	sub    esp,0xc
c0019739:	8d 54 24 24          	lea    edx,[esp+0x24]
c001973d:	52                   	push   edx
c001973e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019742:	52                   	push   edx
c0019743:	6a 00                	push   0x0
c0019745:	6a 04                	push   0x4
c0019747:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001974e:	ff d0                	call   eax
c0019750:	83 c4 20             	add    esp,0x20
c0019753:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001975a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019760:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019767:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001976e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019771:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019778:	83 ec 0c             	sub    esp,0xc
c001977b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019782:	e8 77 24 ff ff       	call   c000bbfe <File::close()>
c0019787:	83 c4 10             	add    esp,0x10
c001978a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019791:	ba 00 00 00 00       	mov    edx,0x0
c0019796:	81 c4 3c 04 00 00    	add    esp,0x43c
c001979c:	5b                   	pop    ebx
c001979d:	5e                   	pop    esi
c001979e:	5f                   	pop    edi
c001979f:	5d                   	pop    ebp
c00197a0:	c3                   	ret    
c00197a1:	90                   	nop
c00197a2:	66 90                	xchg   ax,ax

c00197a4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00197a4:	57                   	push   edi
c00197a5:	56                   	push   esi
c00197a6:	53                   	push   ebx
c00197a7:	81 ec 50 02 00 00    	sub    esp,0x250
c00197ad:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00197b5:	74 0d                	je     c00197c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00197b7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00197bf:	75 0f                	jne    c00197d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00197c1:	8d 76 00             	lea    esi,[esi+0x0]
c00197c4:	b8 04 00 00 00       	mov    eax,0x4
c00197c9:	e9 3a 01 00 00       	jmp    c0019908 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00197ce:	66 90                	xchg   ax,ax
c00197d0:	83 ec 08             	sub    esp,0x8
c00197d3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00197da:	50                   	push   eax
c00197db:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00197e2:	e8 35 af fe ff       	call   c000471c <f_readdir>
c00197e7:	83 c4 10             	add    esp,0x10
c00197ea:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00197f1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00197f8:	83 ec 0c             	sub    esp,0xc
c00197fb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019802:	83 c0 16             	add    eax,0x16
c0019805:	50                   	push   eax
c0019806:	e8 75 6d fe ff       	call   c0000580 <strlen>
c001980b:	83 c4 10             	add    esp,0x10
c001980e:	ba 00 00 00 00       	mov    edx,0x0
c0019813:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019817:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001981b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019822:	0f b6 c0             	movzx  eax,al
c0019825:	83 e0 10             	and    eax,0x10
c0019828:	74 0a                	je     c0019834 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001982a:	b8 02 00 00 00       	mov    eax,0x2
c001982f:	eb 0b                	jmp    c001983c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019831:	8d 76 00             	lea    esi,[esi+0x0]
c0019834:	b8 01 00 00 00       	mov    eax,0x1
c0019839:	8d 76 00             	lea    esi,[esi+0x0]
c001983c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019840:	83 ec 08             	sub    esp,0x8
c0019843:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001984a:	83 c0 16             	add    eax,0x16
c001984d:	50                   	push   eax
c001984e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019852:	83 c0 10             	add    eax,0x10
c0019855:	50                   	push   eax
c0019856:	e8 f5 6d fe ff       	call   c0000650 <strcpy>
c001985b:	83 c4 10             	add    esp,0x10
c001985e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019865:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001986c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019870:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019877:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001987e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019885:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001988c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019893:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001989a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00198a1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00198a8:	89 c6                	mov    esi,eax
c00198aa:	89 d7                	mov    edi,edx
c00198ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198ae:	89 c8                	mov    eax,ecx
c00198b0:	89 fa                	mov    edx,edi
c00198b2:	89 f3                	mov    ebx,esi
c00198b4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00198bb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00198c2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00198c9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00198d0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00198d6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00198dd:	0f be c0             	movsx  eax,al
c00198e0:	85 c0                	test   eax,eax
c00198e2:	75 08                	jne    c00198ec <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00198e4:	b8 07 00 00 00       	mov    eax,0x7
c00198e9:	eb 1d                	jmp    c0019908 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00198eb:	90                   	nop
c00198ec:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00198f3:	85 c0                	test   eax,eax
c00198f5:	75 09                	jne    c0019900 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00198f7:	b8 00 00 00 00       	mov    eax,0x0
c00198fc:	eb 0a                	jmp    c0019908 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00198fe:	66 90                	xchg   ax,ax
c0019900:	b8 01 00 00 00       	mov    eax,0x1
c0019905:	8d 76 00             	lea    esi,[esi+0x0]
c0019908:	81 c4 50 02 00 00    	add    esp,0x250
c001990e:	5b                   	pop    ebx
c001990f:	5e                   	pop    esi
c0019910:	5f                   	pop    edi
c0019911:	c3                   	ret    
c0019912:	66 90                	xchg   ax,ax

c0019914 <FAT::read(void*, unsigned long, void*, int*)>:
c0019914:	83 ec 1c             	sub    esp,0x1c
c0019917:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001991c:	74 0a                	je     c0019928 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001991e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019923:	75 0b                	jne    c0019930 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019925:	8d 76 00             	lea    esi,[esi+0x0]
c0019928:	b8 04 00 00 00       	mov    eax,0x4
c001992d:	eb 41                	jmp    c0019970 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001992f:	90                   	nop
c0019930:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019934:	50                   	push   eax
c0019935:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019939:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001993d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019941:	e8 1d a6 fe ff       	call   c0003f63 <f_read>
c0019946:	83 c4 10             	add    esp,0x10
c0019949:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001994d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019951:	89 c2                	mov    edx,eax
c0019953:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019957:	89 10                	mov    DWORD PTR [eax],edx
c0019959:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001995d:	85 c0                	test   eax,eax
c001995f:	75 07                	jne    c0019968 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019961:	b8 00 00 00 00       	mov    eax,0x0
c0019966:	eb 08                	jmp    c0019970 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019968:	b8 01 00 00 00       	mov    eax,0x1
c001996d:	8d 76 00             	lea    esi,[esi+0x0]
c0019970:	83 c4 1c             	add    esp,0x1c
c0019973:	c3                   	ret    

c0019974 <FAT::write(void*, unsigned long, void*, int*)>:
c0019974:	83 ec 1c             	sub    esp,0x1c
c0019977:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001997c:	74 0a                	je     c0019988 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001997e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019983:	75 0b                	jne    c0019990 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019985:	8d 76 00             	lea    esi,[esi+0x0]
c0019988:	b8 04 00 00 00       	mov    eax,0x4
c001998d:	eb 41                	jmp    c00199d0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001998f:	90                   	nop
c0019990:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019994:	50                   	push   eax
c0019995:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019999:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001999d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199a1:	e8 9e a7 fe ff       	call   c0004144 <f_write>
c00199a6:	83 c4 10             	add    esp,0x10
c00199a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199b1:	89 c2                	mov    edx,eax
c00199b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199b7:	89 10                	mov    DWORD PTR [eax],edx
c00199b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199bd:	85 c0                	test   eax,eax
c00199bf:	75 07                	jne    c00199c8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00199c1:	b8 00 00 00 00       	mov    eax,0x0
c00199c6:	eb 08                	jmp    c00199d0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00199c8:	b8 01 00 00 00       	mov    eax,0x1
c00199cd:	8d 76 00             	lea    esi,[esi+0x0]
c00199d0:	83 c4 1c             	add    esp,0x1c
c00199d3:	c3                   	ret    

c00199d4 <FAT::close(void*)>:
c00199d4:	83 ec 1c             	sub    esp,0x1c
c00199d7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199dc:	75 0a                	jne    c00199e8 <FAT::close(void*)+0x14>
c00199de:	b8 04 00 00 00       	mov    eax,0x4
c00199e3:	eb 3f                	jmp    c0019a24 <FAT::close(void*)+0x50>
c00199e5:	8d 76 00             	lea    esi,[esi+0x0]
c00199e8:	83 ec 0c             	sub    esp,0xc
c00199eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199ef:	e8 5c aa fe ff       	call   c0004450 <f_close>
c00199f4:	83 c4 10             	add    esp,0x10
c00199f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199fb:	83 ec 0c             	sub    esp,0xc
c00199fe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a02:	e8 3c e1 fe ff       	call   c0007b43 <free>
c0019a07:	83 c4 10             	add    esp,0x10
c0019a0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a0e:	85 c0                	test   eax,eax
c0019a10:	75 0a                	jne    c0019a1c <FAT::close(void*)+0x48>
c0019a12:	b8 00 00 00 00       	mov    eax,0x0
c0019a17:	eb 0b                	jmp    c0019a24 <FAT::close(void*)+0x50>
c0019a19:	8d 76 00             	lea    esi,[esi+0x0]
c0019a1c:	b8 01 00 00 00       	mov    eax,0x1
c0019a21:	8d 76 00             	lea    esi,[esi+0x0]
c0019a24:	83 c4 1c             	add    esp,0x1c
c0019a27:	c3                   	ret    

c0019a28 <FAT::closeDir(void*)>:
c0019a28:	83 ec 1c             	sub    esp,0x1c
c0019a2b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a30:	75 0a                	jne    c0019a3c <FAT::closeDir(void*)+0x14>
c0019a32:	b8 04 00 00 00       	mov    eax,0x4
c0019a37:	eb 3f                	jmp    c0019a78 <FAT::closeDir(void*)+0x50>
c0019a39:	8d 76 00             	lea    esi,[esi+0x0]
c0019a3c:	83 ec 0c             	sub    esp,0xc
c0019a3f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a43:	e8 b2 ac fe ff       	call   c00046fa <f_closedir>
c0019a48:	83 c4 10             	add    esp,0x10
c0019a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a4f:	83 ec 0c             	sub    esp,0xc
c0019a52:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a56:	e8 e8 e0 fe ff       	call   c0007b43 <free>
c0019a5b:	83 c4 10             	add    esp,0x10
c0019a5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a62:	85 c0                	test   eax,eax
c0019a64:	75 0a                	jne    c0019a70 <FAT::closeDir(void*)+0x48>
c0019a66:	b8 00 00 00 00       	mov    eax,0x0
c0019a6b:	eb 0b                	jmp    c0019a78 <FAT::closeDir(void*)+0x50>
c0019a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a70:	b8 01 00 00 00       	mov    eax,0x1
c0019a75:	8d 76 00             	lea    esi,[esi+0x0]
c0019a78:	83 c4 1c             	add    esp,0x1c
c0019a7b:	c3                   	ret    

c0019a7c <FAT::truncate(void*, unsigned long long)>:
c0019a7c:	83 ec 2c             	sub    esp,0x2c
c0019a7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a8f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a94:	75 0a                	jne    c0019aa0 <FAT::truncate(void*, unsigned long long)+0x24>
c0019a96:	b8 04 00 00 00       	mov    eax,0x4
c0019a9b:	eb 47                	jmp    c0019ae4 <FAT::truncate(void*, unsigned long long)+0x68>
c0019a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019aa0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019aa4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019aa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019aab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019ab3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ab7:	83 ec 08             	sub    esp,0x8
c0019aba:	50                   	push   eax
c0019abb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019abf:	e8 bb a9 fe ff       	call   c000447f <f_lseek>
c0019ac4:	83 c4 10             	add    esp,0x10
c0019ac7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019acb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019acf:	85 c0                	test   eax,eax
c0019ad1:	75 09                	jne    c0019adc <FAT::truncate(void*, unsigned long long)+0x60>
c0019ad3:	b8 00 00 00 00       	mov    eax,0x0
c0019ad8:	eb 0a                	jmp    c0019ae4 <FAT::truncate(void*, unsigned long long)+0x68>
c0019ada:	66 90                	xchg   ax,ax
c0019adc:	b8 01 00 00 00       	mov    eax,0x1
c0019ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ae4:	83 c4 2c             	add    esp,0x2c
c0019ae7:	c3                   	ret    

c0019ae8 <FAT::seek(void*, unsigned long long)>:
c0019ae8:	83 ec 2c             	sub    esp,0x2c
c0019aeb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019aef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019af3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019af7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019afb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019b00:	75 0a                	jne    c0019b0c <FAT::seek(void*, unsigned long long)+0x24>
c0019b02:	b8 04 00 00 00       	mov    eax,0x4
c0019b07:	eb 33                	jmp    c0019b3c <FAT::seek(void*, unsigned long long)+0x54>
c0019b09:	8d 76 00             	lea    esi,[esi+0x0]
c0019b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b10:	83 ec 08             	sub    esp,0x8
c0019b13:	50                   	push   eax
c0019b14:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019b18:	e8 62 a9 fe ff       	call   c000447f <f_lseek>
c0019b1d:	83 c4 10             	add    esp,0x10
c0019b20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b28:	85 c0                	test   eax,eax
c0019b2a:	75 08                	jne    c0019b34 <FAT::seek(void*, unsigned long long)+0x4c>
c0019b2c:	b8 00 00 00 00       	mov    eax,0x0
c0019b31:	eb 09                	jmp    c0019b3c <FAT::seek(void*, unsigned long long)+0x54>
c0019b33:	90                   	nop
c0019b34:	b8 01 00 00 00       	mov    eax,0x1
c0019b39:	8d 76 00             	lea    esi,[esi+0x0]
c0019b3c:	83 c4 2c             	add    esp,0x2c
c0019b3f:	c3                   	ret    

c0019b40 <fatWrapperReadDisk>:
c0019b40:	53                   	push   ebx
c0019b41:	83 ec 18             	sub    esp,0x18
c0019b44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b48:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b51:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b58:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b60:	ba 00 00 00 00       	mov    edx,0x0
c0019b65:	83 ec 0c             	sub    esp,0xc
c0019b68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b6c:	53                   	push   ebx
c0019b6d:	52                   	push   edx
c0019b6e:	50                   	push   eax
c0019b6f:	51                   	push   ecx
c0019b70:	e8 75 42 ff ff       	call   c000ddea <LogicalDisk::read(unsigned long long, int, void*)>
c0019b75:	83 c4 20             	add    esp,0x20
c0019b78:	83 c4 18             	add    esp,0x18
c0019b7b:	5b                   	pop    ebx
c0019b7c:	c3                   	ret    
c0019b7d:	8d 76 00             	lea    esi,[esi+0x0]

c0019b80 <fatWrapperWriteDisk>:
c0019b80:	53                   	push   ebx
c0019b81:	83 ec 18             	sub    esp,0x18
c0019b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b88:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b8c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b91:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b98:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b9c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ba0:	ba 00 00 00 00       	mov    edx,0x0
c0019ba5:	83 ec 0c             	sub    esp,0xc
c0019ba8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019bac:	53                   	push   ebx
c0019bad:	52                   	push   edx
c0019bae:	50                   	push   eax
c0019baf:	51                   	push   ecx
c0019bb0:	e8 a1 42 ff ff       	call   c000de56 <LogicalDisk::write(unsigned long long, int, void*)>
c0019bb5:	83 c4 20             	add    esp,0x20
c0019bb8:	83 c4 18             	add    esp,0x18
c0019bbb:	5b                   	pop    ebx
c0019bbc:	c3                   	ret    
c0019bbd:	8d 76 00             	lea    esi,[esi+0x0]

c0019bc0 <fatWrapperIoctl>:
c0019bc0:	53                   	push   ebx
c0019bc1:	83 ec 28             	sub    esp,0x28
c0019bc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019bc8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019bcc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019bd0:	88 d0                	mov    al,dl
c0019bd2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019bd6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bdb:	83 f8 02             	cmp    eax,0x2
c0019bde:	75 34                	jne    c0019c14 <fatWrapperIoctl+0x54>
c0019be0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019be4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019be8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bed:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019bf4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019bfa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019c00:	89 c2                	mov    edx,eax
c0019c02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c06:	66 89 10             	mov    WORD PTR [eax],dx
c0019c09:	b8 00 00 00 00       	mov    eax,0x0
c0019c0e:	e9 c5 00 00 00       	jmp    c0019cd8 <fatWrapperIoctl+0x118>
c0019c13:	90                   	nop
c0019c14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c19:	83 f8 01             	cmp    eax,0x1
c0019c1c:	75 6a                	jne    c0019c88 <fatWrapperIoctl+0xc8>
c0019c1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c26:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c2b:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019c32:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c38:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019c3e:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019c44:	89 c8                	mov    eax,ecx
c0019c46:	89 da                	mov    edx,ebx
c0019c48:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019c4c:	c1 e0 0a             	shl    eax,0xa
c0019c4f:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019c54:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019c5b:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c61:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c67:	89 cb                	mov    ebx,ecx
c0019c69:	c1 fb 1f             	sar    ebx,0x1f
c0019c6c:	53                   	push   ebx
c0019c6d:	51                   	push   ecx
c0019c6e:	52                   	push   edx
c0019c6f:	50                   	push   eax
c0019c70:	e8 bb 5b 00 00       	call   c001f830 <__udivdi3>
c0019c75:	83 c4 10             	add    esp,0x10
c0019c78:	89 c2                	mov    edx,eax
c0019c7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c7e:	89 10                	mov    DWORD PTR [eax],edx
c0019c80:	b8 00 00 00 00       	mov    eax,0x0
c0019c85:	eb 51                	jmp    c0019cd8 <fatWrapperIoctl+0x118>
c0019c87:	90                   	nop
c0019c88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c8d:	85 c0                	test   eax,eax
c0019c8f:	75 07                	jne    c0019c98 <fatWrapperIoctl+0xd8>
c0019c91:	b8 00 00 00 00       	mov    eax,0x0
c0019c96:	eb 40                	jmp    c0019cd8 <fatWrapperIoctl+0x118>
c0019c98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c9d:	83 f8 03             	cmp    eax,0x3
c0019ca0:	75 1a                	jne    c0019cbc <fatWrapperIoctl+0xfc>
c0019ca2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ca6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019caa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019cae:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019cb4:	b8 00 00 00 00       	mov    eax,0x0
c0019cb9:	eb 1d                	jmp    c0019cd8 <fatWrapperIoctl+0x118>
c0019cbb:	90                   	nop
c0019cbc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cc1:	83 f8 04             	cmp    eax,0x4
c0019cc4:	75 0a                	jne    c0019cd0 <fatWrapperIoctl+0x110>
c0019cc6:	b8 00 00 00 00       	mov    eax,0x0
c0019ccb:	eb 0b                	jmp    c0019cd8 <fatWrapperIoctl+0x118>
c0019ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0019cd0:	b8 04 00 00 00       	mov    eax,0x4
c0019cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cd8:	83 c4 28             	add    esp,0x28
c0019cdb:	5b                   	pop    ebx
c0019cdc:	c3                   	ret    
c0019cdd:	90                   	nop
c0019cde:	66 90                	xchg   ax,ax

c0019ce0 <FAT::FAT()>:
c0019ce0:	83 ec 1c             	sub    esp,0x1c
c0019ce3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ce7:	83 ec 0c             	sub    esp,0xc
c0019cea:	50                   	push   eax
c0019ceb:	e8 dc 1a ff ff       	call   c000b7cc <Filesystem::Filesystem()>
c0019cf0:	83 c4 10             	add    esp,0x10
c0019cf3:	ba e0 2f 02 c0       	mov    edx,0xc0022fe0
c0019cf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cfc:	89 10                	mov    DWORD PTR [eax],edx
c0019cfe:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019d08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019d10:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019d15:	7f 19                	jg     c0019d30 <FAT::FAT()+0x50>
c0019d17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d1b:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019d26:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019d2b:	eb e3                	jmp    c0019d10 <FAT::FAT()+0x30>
c0019d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d30:	90                   	nop
c0019d31:	83 c4 1c             	add    esp,0x1c
c0019d34:	c3                   	ret    
c0019d35:	90                   	nop
c0019d36:	66 90                	xchg   ax,ax

c0019d38 <FAT::fixFilepath(char*)>:
c0019d38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d3c:	8a 00                	mov    al,BYTE PTR [eax]
c0019d3e:	0f be c0             	movsx  eax,al
c0019d41:	83 f8 40             	cmp    eax,0x40
c0019d44:	7e 2e                	jle    c0019d74 <FAT::fixFilepath(char*)+0x3c>
c0019d46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d4a:	8a 00                	mov    al,BYTE PTR [eax]
c0019d4c:	83 e8 41             	sub    eax,0x41
c0019d4f:	88 c2                	mov    dl,al
c0019d51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d55:	88 10                	mov    BYTE PTR [eax],dl
c0019d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d5b:	8a 00                	mov    al,BYTE PTR [eax]
c0019d5d:	0f be c0             	movsx  eax,al
c0019d60:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019d67:	83 c0 30             	add    eax,0x30
c0019d6a:	88 c2                	mov    dl,al
c0019d6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d70:	88 10                	mov    BYTE PTR [eax],dl
c0019d72:	66 90                	xchg   ax,ax
c0019d74:	90                   	nop
c0019d75:	c3                   	ret    
c0019d76:	66 90                	xchg   ax,ax

c0019d78 <FAT::open(char const*, void**, FileOpenMode)>:
c0019d78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d7e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d86:	74 0c                	je     c0019d94 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019d88:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d90:	75 0e                	jne    c0019da0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019d92:	66 90                	xchg   ax,ax
c0019d94:	b8 04 00 00 00       	mov    eax,0x4
c0019d99:	e9 46 01 00 00       	jmp    c0019ee4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019d9e:	66 90                	xchg   ax,ax
c0019da0:	83 ec 08             	sub    esp,0x8
c0019da3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019daa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019dae:	50                   	push   eax
c0019daf:	e8 9c 68 fe ff       	call   c0000650 <strcpy>
c0019db4:	83 c4 10             	add    esp,0x10
c0019db7:	83 ec 08             	sub    esp,0x8
c0019dba:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019dbe:	50                   	push   eax
c0019dbf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dc6:	e8 6d ff ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c0019dcb:	83 c4 10             	add    esp,0x10
c0019dce:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019dd6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ddd:	83 e0 01             	and    eax,0x1
c0019de0:	74 12                	je     c0019df4 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019de2:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019de9:	83 c8 01             	or     eax,0x1
c0019dec:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019df3:	90                   	nop
c0019df4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dfb:	83 e0 04             	and    eax,0x4
c0019dfe:	74 24                	je     c0019e24 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019e00:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e07:	83 c8 30             	or     eax,0x30
c0019e0a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e11:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e18:	83 c8 02             	or     eax,0x2
c0019e1b:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e22:	66 90                	xchg   ax,ax
c0019e24:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e2b:	83 e0 02             	and    eax,0x2
c0019e2e:	74 14                	je     c0019e44 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019e30:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e37:	83 c8 02             	or     eax,0x2
c0019e3a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e41:	8d 76 00             	lea    esi,[esi+0x0]
c0019e44:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e4b:	83 e0 08             	and    eax,0x8
c0019e4e:	74 14                	je     c0019e64 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019e50:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e57:	83 c8 04             	or     eax,0x4
c0019e5a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e61:	8d 76 00             	lea    esi,[esi+0x0]
c0019e64:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e6b:	83 e0 10             	and    eax,0x10
c0019e6e:	74 14                	je     c0019e84 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019e70:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e77:	83 c8 08             	or     eax,0x8
c0019e7a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e81:	8d 76 00             	lea    esi,[esi+0x0]
c0019e84:	83 ec 0c             	sub    esp,0xc
c0019e87:	68 28 02 00 00       	push   0x228
c0019e8c:	e8 a2 dc fe ff       	call   c0007b33 <malloc>
c0019e91:	83 c4 10             	add    esp,0x10
c0019e94:	89 c2                	mov    edx,eax
c0019e96:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e9d:	89 10                	mov    DWORD PTR [eax],edx
c0019e9f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019ea7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019eae:	8b 00                	mov    eax,DWORD PTR [eax]
c0019eb0:	83 ec 04             	sub    esp,0x4
c0019eb3:	52                   	push   edx
c0019eb4:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019eb8:	52                   	push   edx
c0019eb9:	50                   	push   eax
c0019eba:	e8 e1 9d fe ff       	call   c0003ca0 <f_open>
c0019ebf:	83 c4 10             	add    esp,0x10
c0019ec2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019ec9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019ed1:	74 09                	je     c0019edc <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019ed3:	b8 01 00 00 00       	mov    eax,0x1
c0019ed8:	eb 0a                	jmp    c0019ee4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019eda:	66 90                	xchg   ax,ax
c0019edc:	b8 00 00 00 00       	mov    eax,0x0
c0019ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ee4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019eea:	c3                   	ret    
c0019eeb:	90                   	nop

c0019eec <FAT::openDir(char const*, void**)>:
c0019eec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ef2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019efa:	74 0c                	je     c0019f08 <FAT::openDir(char const*, void**)+0x1c>
c0019efc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019f04:	75 0e                	jne    c0019f14 <FAT::openDir(char const*, void**)+0x28>
c0019f06:	66 90                	xchg   ax,ax
c0019f08:	b8 04 00 00 00       	mov    eax,0x4
c0019f0d:	e9 82 00 00 00       	jmp    c0019f94 <FAT::openDir(char const*, void**)+0xa8>
c0019f12:	66 90                	xchg   ax,ax
c0019f14:	83 ec 08             	sub    esp,0x8
c0019f17:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f1e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f22:	50                   	push   eax
c0019f23:	e8 28 67 fe ff       	call   c0000650 <strcpy>
c0019f28:	83 c4 10             	add    esp,0x10
c0019f2b:	83 ec 08             	sub    esp,0x8
c0019f2e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f32:	50                   	push   eax
c0019f33:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f3a:	e8 f9 fd ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c0019f3f:	83 c4 10             	add    esp,0x10
c0019f42:	83 ec 0c             	sub    esp,0xc
c0019f45:	6a 30                	push   0x30
c0019f47:	e8 e7 db fe ff       	call   c0007b33 <malloc>
c0019f4c:	83 c4 10             	add    esp,0x10
c0019f4f:	89 c2                	mov    edx,eax
c0019f51:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f58:	89 10                	mov    DWORD PTR [eax],edx
c0019f5a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f61:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f63:	83 ec 08             	sub    esp,0x8
c0019f66:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019f6a:	52                   	push   edx
c0019f6b:	50                   	push   eax
c0019f6c:	e8 be a6 fe ff       	call   c000462f <f_opendir>
c0019f71:	83 c4 10             	add    esp,0x10
c0019f74:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f7b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019f83:	74 07                	je     c0019f8c <FAT::openDir(char const*, void**)+0xa0>
c0019f85:	b8 01 00 00 00       	mov    eax,0x1
c0019f8a:	eb 08                	jmp    c0019f94 <FAT::openDir(char const*, void**)+0xa8>
c0019f8c:	b8 00 00 00 00       	mov    eax,0x0
c0019f91:	8d 76 00             	lea    esi,[esi+0x0]
c0019f94:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f9a:	c3                   	ret    
c0019f9b:	90                   	nop

c0019f9c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019f9c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019fa2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019faa:	75 0c                	jne    c0019fb8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019fac:	b8 04 00 00 00       	mov    eax,0x4
c0019fb1:	e9 d6 00 00 00       	jmp    c001a08c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fb6:	66 90                	xchg   ax,ax
c0019fb8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019fc0:	75 0a                	jne    c0019fcc <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019fc2:	b8 04 00 00 00       	mov    eax,0x4
c0019fc7:	e9 c0 00 00 00       	jmp    c001a08c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fcc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019fd4:	75 0a                	jne    c0019fe0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019fd6:	b8 04 00 00 00       	mov    eax,0x4
c0019fdb:	e9 ac 00 00 00       	jmp    c001a08c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fe0:	83 ec 08             	sub    esp,0x8
c0019fe3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019fea:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019ff1:	50                   	push   eax
c0019ff2:	e8 59 66 fe ff       	call   c0000650 <strcpy>
c0019ff7:	83 c4 10             	add    esp,0x10
c0019ffa:	83 ec 08             	sub    esp,0x8
c0019ffd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a004:	50                   	push   eax
c001a005:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a00c:	e8 27 fd ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c001a011:	83 c4 10             	add    esp,0x10
c001a014:	83 ec 08             	sub    esp,0x8
c001a017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a01b:	50                   	push   eax
c001a01c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a023:	50                   	push   eax
c001a024:	e8 85 a7 fe ff       	call   c00047ae <f_stat>
c001a029:	83 c4 10             	add    esp,0x10
c001a02c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a033:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a03a:	85 c0                	test   eax,eax
c001a03c:	74 0a                	je     c001a048 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a03e:	83 f8 04             	cmp    eax,0x4
c001a041:	74 39                	je     c001a07c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a043:	eb 3f                	jmp    c001a084 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a045:	8d 76 00             	lea    esi,[esi+0x0]
c001a048:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a04c:	0f b6 c0             	movzx  eax,al
c001a04f:	83 e0 10             	and    eax,0x10
c001a052:	0f 95 c2             	setne  dl
c001a055:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a05c:	88 10                	mov    BYTE PTR [eax],dl
c001a05e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a062:	ba 00 00 00 00       	mov    edx,0x0
c001a067:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a06e:	89 01                	mov    DWORD PTR [ecx],eax
c001a070:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a073:	b8 00 00 00 00       	mov    eax,0x0
c001a078:	eb 12                	jmp    c001a08c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a07a:	66 90                	xchg   ax,ax
c001a07c:	b8 02 00 00 00       	mov    eax,0x2
c001a081:	eb 09                	jmp    c001a08c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a083:	90                   	nop
c001a084:	b8 01 00 00 00       	mov    eax,0x1
c001a089:	8d 76 00             	lea    esi,[esi+0x0]
c001a08c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a092:	c3                   	ret    
c001a093:	90                   	nop

c001a094 <FAT::unlink(char const*)>:
c001a094:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a09a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a0a2:	75 08                	jne    c001a0ac <FAT::unlink(char const*)+0x18>
c001a0a4:	b8 04 00 00 00       	mov    eax,0x4
c001a0a9:	eb 61                	jmp    c001a10c <FAT::unlink(char const*)+0x78>
c001a0ab:	90                   	nop
c001a0ac:	83 ec 08             	sub    esp,0x8
c001a0af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a0b6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0ba:	50                   	push   eax
c001a0bb:	e8 90 65 fe ff       	call   c0000650 <strcpy>
c001a0c0:	83 c4 10             	add    esp,0x10
c001a0c3:	83 ec 08             	sub    esp,0x8
c001a0c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a0ca:	50                   	push   eax
c001a0cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a0d2:	e8 61 fc ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c001a0d7:	83 c4 10             	add    esp,0x10
c001a0da:	83 ec 0c             	sub    esp,0xc
c001a0dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0e1:	50                   	push   eax
c001a0e2:	e8 39 a9 fe ff       	call   c0004a20 <f_unlink>
c001a0e7:	83 c4 10             	add    esp,0x10
c001a0ea:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a0f1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a0f8:	85 c0                	test   eax,eax
c001a0fa:	75 08                	jne    c001a104 <FAT::unlink(char const*)+0x70>
c001a0fc:	b8 00 00 00 00       	mov    eax,0x0
c001a101:	eb 09                	jmp    c001a10c <FAT::unlink(char const*)+0x78>
c001a103:	90                   	nop
c001a104:	b8 01 00 00 00       	mov    eax,0x1
c001a109:	8d 76 00             	lea    esi,[esi+0x0]
c001a10c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a112:	c3                   	ret    
c001a113:	90                   	nop

c001a114 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a114:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a11a:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001a121:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001a128:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a12c:	88 d0                	mov    al,dl
c001a12e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a132:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a13a:	75 0c                	jne    c001a148 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001a13c:	b8 04 00 00 00       	mov    eax,0x4
c001a141:	e9 7e 01 00 00       	jmp    c001a2c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a146:	66 90                	xchg   ax,ax
c001a148:	83 ec 08             	sub    esp,0x8
c001a14b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a152:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a156:	50                   	push   eax
c001a157:	e8 f4 64 fe ff       	call   c0000650 <strcpy>
c001a15c:	83 c4 10             	add    esp,0x10
c001a15f:	83 ec 08             	sub    esp,0x8
c001a162:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a166:	50                   	push   eax
c001a167:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a16e:	e8 c5 fb ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c001a173:	83 c4 10             	add    esp,0x10
c001a176:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a17e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a186:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a18b:	83 e0 01             	and    eax,0x1
c001a18e:	74 14                	je     c001a1a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a190:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a197:	83 c8 01             	or     eax,0x1
c001a19a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1a9:	83 e0 02             	and    eax,0x2
c001a1ac:	74 12                	je     c001a1c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a1ae:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1b5:	83 c8 20             	or     eax,0x20
c001a1b8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1bf:	90                   	nop
c001a1c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1c5:	83 e0 04             	and    eax,0x4
c001a1c8:	74 12                	je     c001a1dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a1ca:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1d1:	83 c8 04             	or     eax,0x4
c001a1d4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1db:	90                   	nop
c001a1dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1e1:	83 e0 08             	and    eax,0x8
c001a1e4:	74 12                	je     c001a1f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a1e6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1ed:	83 c8 02             	or     eax,0x2
c001a1f0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1f7:	90                   	nop
c001a1f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1fd:	83 e0 01             	and    eax,0x1
c001a200:	74 12                	je     c001a214 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a202:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a209:	83 c8 01             	or     eax,0x1
c001a20c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a213:	90                   	nop
c001a214:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a219:	83 e0 02             	and    eax,0x2
c001a21c:	74 12                	je     c001a230 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a21e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a225:	83 c8 20             	or     eax,0x20
c001a228:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a22f:	90                   	nop
c001a230:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a235:	83 e0 04             	and    eax,0x4
c001a238:	74 12                	je     c001a24c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a23a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a241:	83 c8 04             	or     eax,0x4
c001a244:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a24b:	90                   	nop
c001a24c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a251:	83 e0 08             	and    eax,0x8
c001a254:	74 12                	je     c001a268 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a256:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a25d:	83 c8 02             	or     eax,0x2
c001a260:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a267:	90                   	nop
c001a268:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a26f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a276:	09 d0                	or     eax,edx
c001a278:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a27f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a287:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a28f:	83 ec 04             	sub    esp,0x4
c001a292:	52                   	push   edx
c001a293:	50                   	push   eax
c001a294:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a298:	50                   	push   eax
c001a299:	e8 f5 ab fe ff       	call   c0004e93 <f_chmod>
c001a29e:	83 c4 10             	add    esp,0x10
c001a2a1:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a2a8:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a2af:	85 c0                	test   eax,eax
c001a2b1:	75 09                	jne    c001a2bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a2b3:	b8 00 00 00 00       	mov    eax,0x0
c001a2b8:	eb 0a                	jmp    c001a2c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a2ba:	66 90                	xchg   ax,ax
c001a2bc:	b8 01 00 00 00       	mov    eax,0x1
c001a2c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a2c4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a2ca:	c3                   	ret    
c001a2cb:	90                   	nop

c001a2cc <FAT::rename(char const*, char const*)>:
c001a2cc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a2d2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a2da:	74 0c                	je     c001a2e8 <FAT::rename(char const*, char const*)+0x1c>
c001a2dc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a2e4:	75 0e                	jne    c001a2f4 <FAT::rename(char const*, char const*)+0x28>
c001a2e6:	66 90                	xchg   ax,ax
c001a2e8:	b8 04 00 00 00       	mov    eax,0x4
c001a2ed:	e9 9e 00 00 00       	jmp    c001a390 <FAT::rename(char const*, char const*)+0xc4>
c001a2f2:	66 90                	xchg   ax,ax
c001a2f4:	83 ec 08             	sub    esp,0x8
c001a2f7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2fe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a305:	50                   	push   eax
c001a306:	e8 45 63 fe ff       	call   c0000650 <strcpy>
c001a30b:	83 c4 10             	add    esp,0x10
c001a30e:	83 ec 08             	sub    esp,0x8
c001a311:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a318:	50                   	push   eax
c001a319:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a320:	e8 13 fa ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c001a325:	83 c4 10             	add    esp,0x10
c001a328:	83 ec 08             	sub    esp,0x8
c001a32b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a332:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a336:	50                   	push   eax
c001a337:	e8 14 63 fe ff       	call   c0000650 <strcpy>
c001a33c:	83 c4 10             	add    esp,0x10
c001a33f:	83 ec 08             	sub    esp,0x8
c001a342:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a346:	50                   	push   eax
c001a347:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a34e:	e8 e5 f9 ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c001a353:	83 c4 10             	add    esp,0x10
c001a356:	83 ec 08             	sub    esp,0x8
c001a359:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a35d:	50                   	push   eax
c001a35e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a365:	50                   	push   eax
c001a366:	e8 70 a9 fe ff       	call   c0004cdb <f_rename>
c001a36b:	83 c4 10             	add    esp,0x10
c001a36e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a375:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a37c:	85 c0                	test   eax,eax
c001a37e:	75 08                	jne    c001a388 <FAT::rename(char const*, char const*)+0xbc>
c001a380:	b8 00 00 00 00       	mov    eax,0x0
c001a385:	eb 09                	jmp    c001a390 <FAT::rename(char const*, char const*)+0xc4>
c001a387:	90                   	nop
c001a388:	b8 01 00 00 00       	mov    eax,0x1
c001a38d:	8d 76 00             	lea    esi,[esi+0x0]
c001a390:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a396:	c3                   	ret    
c001a397:	90                   	nop

c001a398 <FAT::mkdir(char const*)>:
c001a398:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a39e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a3a6:	75 08                	jne    c001a3b0 <FAT::mkdir(char const*)+0x18>
c001a3a8:	b8 04 00 00 00       	mov    eax,0x4
c001a3ad:	eb 61                	jmp    c001a410 <FAT::mkdir(char const*)+0x78>
c001a3af:	90                   	nop
c001a3b0:	83 ec 08             	sub    esp,0x8
c001a3b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3be:	50                   	push   eax
c001a3bf:	e8 8c 62 fe ff       	call   c0000650 <strcpy>
c001a3c4:	83 c4 10             	add    esp,0x10
c001a3c7:	83 ec 08             	sub    esp,0x8
c001a3ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3ce:	50                   	push   eax
c001a3cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3d6:	e8 5d f9 ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c001a3db:	83 c4 10             	add    esp,0x10
c001a3de:	83 ec 0c             	sub    esp,0xc
c001a3e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3e5:	50                   	push   eax
c001a3e6:	e8 55 a7 fe ff       	call   c0004b40 <f_mkdir>
c001a3eb:	83 c4 10             	add    esp,0x10
c001a3ee:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a3f5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a3fc:	85 c0                	test   eax,eax
c001a3fe:	75 08                	jne    c001a408 <FAT::mkdir(char const*)+0x70>
c001a400:	b8 00 00 00 00       	mov    eax,0x0
c001a405:	eb 09                	jmp    c001a410 <FAT::mkdir(char const*)+0x78>
c001a407:	90                   	nop
c001a408:	b8 01 00 00 00       	mov    eax,0x1
c001a40d:	8d 76 00             	lea    esi,[esi+0x0]
c001a410:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a416:	c3                   	ret    
c001a417:	90                   	nop

c001a418 <FAT::exists(char const*)>:
c001a418:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a41e:	83 ec 08             	sub    esp,0x8
c001a421:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a428:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a42c:	50                   	push   eax
c001a42d:	e8 1e 62 fe ff       	call   c0000650 <strcpy>
c001a432:	83 c4 10             	add    esp,0x10
c001a435:	83 ec 08             	sub    esp,0x8
c001a438:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a43c:	50                   	push   eax
c001a43d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a444:	e8 ef f8 ff ff       	call   c0019d38 <FAT::fixFilepath(char*)>
c001a449:	83 c4 10             	add    esp,0x10
c001a44c:	83 ec 08             	sub    esp,0x8
c001a44f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a456:	50                   	push   eax
c001a457:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a45b:	50                   	push   eax
c001a45c:	e8 4d a3 fe ff       	call   c00047ae <f_stat>
c001a461:	83 c4 10             	add    esp,0x10
c001a464:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a46b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a472:	85 c0                	test   eax,eax
c001a474:	75 06                	jne    c001a47c <FAT::exists(char const*)+0x64>
c001a476:	b0 01                	mov    al,0x1
c001a478:	eb 06                	jmp    c001a480 <FAT::exists(char const*)+0x68>
c001a47a:	66 90                	xchg   ax,ax
c001a47c:	b0 00                	mov    al,0x0
c001a47e:	66 90                	xchg   ax,ax
c001a480:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a486:	c3                   	ret    
c001a487:	90                   	nop

c001a488 <isoReadDiscSectorHelper>:
c001a488:	83 ec 2c             	sub    esp,0x2c
c001a48b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a48f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a493:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a498:	83 e8 41             	sub    eax,0x41
c001a49b:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a4a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a4a6:	ba 00 00 00 00       	mov    edx,0x0
c001a4ab:	83 ec 0c             	sub    esp,0xc
c001a4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a4b2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a4b6:	52                   	push   edx
c001a4b7:	50                   	push   eax
c001a4b8:	51                   	push   ecx
c001a4b9:	e8 2c 39 ff ff       	call   c000ddea <LogicalDisk::read(unsigned long long, int, void*)>
c001a4be:	83 c4 20             	add    esp,0x20
c001a4c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4c5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a4ca:	74 0c                	je     c001a4d8 <isoReadDiscSectorHelper+0x50>
c001a4cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4d0:	c1 e0 0b             	shl    eax,0xb
c001a4d3:	eb 0b                	jmp    c001a4e0 <isoReadDiscSectorHelper+0x58>
c001a4d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4d8:	b8 00 00 00 00       	mov    eax,0x0
c001a4dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a4e0:	83 c4 2c             	add    esp,0x2c
c001a4e3:	c3                   	ret    

c001a4e4 <iso_kprintf>:
c001a4e4:	83 ec 0c             	sub    esp,0xc
c001a4e7:	83 ec 08             	sub    esp,0x8
c001a4ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4ee:	68 8e 2d 02 c0       	push   0xc0022d8e
c001a4f3:	e8 72 04 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001a4f8:	83 c4 10             	add    esp,0x10
c001a4fb:	90                   	nop
c001a4fc:	83 c4 0c             	add    esp,0xc
c001a4ff:	c3                   	ret    

c001a500 <iso_kprintfd>:
c001a500:	83 ec 0c             	sub    esp,0xc
c001a503:	83 ec 08             	sub    esp,0x8
c001a506:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a50a:	68 62 14 02 c0       	push   0xc0021462
c001a50f:	e8 56 04 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001a514:	83 c4 10             	add    esp,0x10
c001a517:	90                   	nop
c001a518:	83 c4 0c             	add    esp,0xc
c001a51b:	c3                   	ret    

c001a51c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a51c:	b8 08 00 00 00       	mov    eax,0x8
c001a521:	c3                   	ret    

c001a522 <ISO9660::truncate(void*, unsigned long long)>:
c001a522:	b8 01 00 00 00       	mov    eax,0x1
c001a527:	c3                   	ret    

c001a528 <ISO9660::getName()>:
c001a528:	b8 44 30 02 c0       	mov    eax,0xc0023044
c001a52d:	c3                   	ret    

c001a52e <ISO9660::closeDir(void*)>:
c001a52e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a532:	8b 00                	mov    eax,DWORD PTR [eax]
c001a534:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a537:	90                   	nop

c001a538 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a538:	b8 01 00 00 00       	mov    eax,0x1
c001a53d:	c3                   	ret    

c001a53e <ISO9660::unlink(char const*)>:
c001a53e:	b8 01 00 00 00       	mov    eax,0x1
c001a543:	c3                   	ret    

c001a544 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a544:	b8 03 00 00 00       	mov    eax,0x3
c001a549:	c3                   	ret    

c001a54a <ISO9660::rename(char const*, char const*)>:
c001a54a:	b8 01 00 00 00       	mov    eax,0x1
c001a54f:	c3                   	ret    

c001a550 <ISO9660::mkdir(char const*)>:
c001a550:	b8 01 00 00 00       	mov    eax,0x1
c001a555:	c3                   	ret    

c001a556 <ISO9660::~ISO9660()>:
c001a556:	83 ec 0c             	sub    esp,0xc
c001a559:	ba 84 31 02 c0       	mov    edx,0xc0023184
c001a55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a562:	89 10                	mov    DWORD PTR [eax],edx
c001a564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a568:	83 ec 0c             	sub    esp,0xc
c001a56b:	50                   	push   eax
c001a56c:	e8 7f 12 ff ff       	call   c000b7f0 <Filesystem::~Filesystem()>
c001a571:	83 c4 10             	add    esp,0x10
c001a574:	90                   	nop
c001a575:	83 c4 0c             	add    esp,0xc
c001a578:	c3                   	ret    
c001a579:	90                   	nop

c001a57a <ISO9660::~ISO9660()>:
c001a57a:	83 ec 0c             	sub    esp,0xc
c001a57d:	83 ec 0c             	sub    esp,0xc
c001a580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a584:	e8 cd ff ff ff       	call   c001a556 <ISO9660::~ISO9660()>
c001a589:	83 c4 10             	add    esp,0x10
c001a58c:	83 ec 08             	sub    esp,0x8
c001a58f:	6a 08                	push   0x8
c001a591:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a595:	e8 d2 02 ff ff       	call   c000a86c <operator delete(void*, unsigned long)>
c001a59a:	83 c4 10             	add    esp,0x10
c001a59d:	83 c4 0c             	add    esp,0xc
c001a5a0:	c3                   	ret    
c001a5a1:	90                   	nop

c001a5a2 <ISO9660::exists(char const*)>:
c001a5a2:	83 ec 18             	sub    esp,0x18
c001a5a5:	68 5f 30 02 c0       	push   0xc002305f
c001a5aa:	e8 90 70 ff ff       	call   c001163f <KePanic(char const*)>
c001a5af:	31 c0                	xor    eax,eax
c001a5b1:	83 c4 1c             	add    esp,0x1c
c001a5b4:	c3                   	ret    
c001a5b5:	90                   	nop

c001a5b6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a5b6:	56                   	push   esi
c001a5b7:	53                   	push   ebx
c001a5b8:	53                   	push   ebx
c001a5b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a5bd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a5c1:	85 db                	test   ebx,ebx
c001a5c3:	0f 84 ca 00 00 00    	je     c001a693 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a5c9:	85 f6                	test   esi,esi
c001a5cb:	0f 84 c2 00 00 00    	je     c001a693 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a5d1:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a5d6:	b8 03 00 00 00       	mov    eax,0x3
c001a5db:	0f 85 b7 00 00 00    	jne    c001a698 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5e1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a5e3:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a5e9:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a5f0:	74 1b                	je     c001a60d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a5f2:	85 c0                	test   eax,eax
c001a5f4:	74 10                	je     c001a606 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a5f6:	83 ec 0c             	sub    esp,0xc
c001a5f9:	68 7d 30 02 c0       	push   0xc002307d
c001a5fe:	e8 3c 70 ff ff       	call   c001163f <KePanic(char const*)>
c001a603:	83 c4 10             	add    esp,0x10
c001a606:	8a 03                	mov    al,BYTE PTR [ebx]
c001a608:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a60d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a610:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a617:	85 c0                	test   eax,eax
c001a619:	74 09                	je     c001a624 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a61b:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a622:	74 48                	je     c001a66c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a624:	83 ec 0c             	sub    esp,0xc
c001a627:	68 8d 30 02 c0       	push   0xc002308d
c001a62c:	e8 39 03 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001a631:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a634:	83 c4 10             	add    esp,0x10
c001a637:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a63e:	85 c0                	test   eax,eax
c001a640:	74 17                	je     c001a659 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a642:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a649:	83 ec 0c             	sub    esp,0xc
c001a64c:	68 ad 30 02 c0       	push   0xc00230ad
c001a651:	e8 14 03 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001a656:	83 c4 10             	add    esp,0x10
c001a659:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a660:	83 ec 0c             	sub    esp,0xc
c001a663:	50                   	push   eax
c001a664:	e8 fe c3 fe ff       	call   c0006a67 <init_percd>
c001a669:	83 c4 10             	add    esp,0x10
c001a66c:	51                   	push   ecx
c001a66d:	83 c3 03             	add    ebx,0x3
c001a670:	51                   	push   ecx
c001a671:	6a 00                	push   0x0
c001a673:	53                   	push   ebx
c001a674:	e8 b1 be fe ff       	call   c000652a <iso_open>
c001a679:	83 c4 10             	add    esp,0x10
c001a67c:	89 c2                	mov    edx,eax
c001a67e:	b8 01 00 00 00       	mov    eax,0x1
c001a683:	83 fa ff             	cmp    edx,0xffffffff
c001a686:	74 10                	je     c001a698 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a688:	83 c2 32             	add    edx,0x32
c001a68b:	31 c0                	xor    eax,eax
c001a68d:	01 d2                	add    edx,edx
c001a68f:	89 16                	mov    DWORD PTR [esi],edx
c001a691:	eb 05                	jmp    c001a698 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a693:	b8 04 00 00 00       	mov    eax,0x4
c001a698:	5a                   	pop    edx
c001a699:	5b                   	pop    ebx
c001a69a:	5e                   	pop    esi
c001a69b:	c3                   	ret    

c001a69c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a69c:	53                   	push   ebx
c001a69d:	83 ec 08             	sub    esp,0x8
c001a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a6a8:	85 c0                	test   eax,eax
c001a6aa:	74 2d                	je     c001a6d9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a6ac:	85 db                	test   ebx,ebx
c001a6ae:	74 29                	je     c001a6d9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a6b0:	52                   	push   edx
c001a6b1:	b9 02 00 00 00       	mov    ecx,0x2
c001a6b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6ba:	99                   	cdq    
c001a6bb:	f7 f9                	idiv   ecx
c001a6bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a6c1:	83 e8 32             	sub    eax,0x32
c001a6c4:	50                   	push   eax
c001a6c5:	e8 08 bf fe ff       	call   c00065d2 <iso_read>
c001a6ca:	83 c4 10             	add    esp,0x10
c001a6cd:	89 03                	mov    DWORD PTR [ebx],eax
c001a6cf:	09 d0                	or     eax,edx
c001a6d1:	0f 94 c0             	sete   al
c001a6d4:	0f b6 c0             	movzx  eax,al
c001a6d7:	eb 05                	jmp    c001a6de <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a6d9:	b8 04 00 00 00       	mov    eax,0x4
c001a6de:	83 c4 08             	add    esp,0x8
c001a6e1:	5b                   	pop    ebx
c001a6e2:	c3                   	ret    
c001a6e3:	90                   	nop

c001a6e4 <ISO9660::seek(void*, unsigned long long)>:
c001a6e4:	57                   	push   edi
c001a6e5:	b8 04 00 00 00       	mov    eax,0x4
c001a6ea:	56                   	push   esi
c001a6eb:	51                   	push   ecx
c001a6ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a6f0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a6f4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a6f8:	85 d2                	test   edx,edx
c001a6fa:	74 26                	je     c001a722 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a6fc:	89 d0                	mov    eax,edx
c001a6fe:	b9 02 00 00 00       	mov    ecx,0x2
c001a703:	6a 00                	push   0x0
c001a705:	99                   	cdq    
c001a706:	f7 f9                	idiv   ecx
c001a708:	57                   	push   edi
c001a709:	56                   	push   esi
c001a70a:	83 e8 32             	sub    eax,0x32
c001a70d:	50                   	push   eax
c001a70e:	e8 d5 bf fe ff       	call   c00066e8 <iso_seek>
c001a713:	83 c4 10             	add    esp,0x10
c001a716:	31 f0                	xor    eax,esi
c001a718:	31 fa                	xor    edx,edi
c001a71a:	09 d0                	or     eax,edx
c001a71c:	0f 95 c0             	setne  al
c001a71f:	0f b6 c0             	movzx  eax,al
c001a722:	5a                   	pop    edx
c001a723:	5e                   	pop    esi
c001a724:	5f                   	pop    edi
c001a725:	c3                   	ret    

c001a726 <ISO9660::tell(void*, unsigned long long*)>:
c001a726:	53                   	push   ebx
c001a727:	83 ec 08             	sub    esp,0x8
c001a72a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a72e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a732:	85 c0                	test   eax,eax
c001a734:	74 24                	je     c001a75a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a736:	85 db                	test   ebx,ebx
c001a738:	74 20                	je     c001a75a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a73a:	b9 02 00 00 00       	mov    ecx,0x2
c001a73f:	99                   	cdq    
c001a740:	f7 f9                	idiv   ecx
c001a742:	83 ec 0c             	sub    esp,0xc
c001a745:	83 e8 32             	sub    eax,0x32
c001a748:	50                   	push   eax
c001a749:	e8 1e c0 fe ff       	call   c000676c <iso_tell>
c001a74e:	83 c4 10             	add    esp,0x10
c001a751:	89 03                	mov    DWORD PTR [ebx],eax
c001a753:	31 c0                	xor    eax,eax
c001a755:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a758:	eb 05                	jmp    c001a75f <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a75a:	b8 04 00 00 00       	mov    eax,0x4
c001a75f:	83 c4 08             	add    esp,0x8
c001a762:	5b                   	pop    ebx
c001a763:	c3                   	ret    

c001a764 <ISO9660::stat(void*, unsigned long long*)>:
c001a764:	56                   	push   esi
c001a765:	53                   	push   ebx
c001a766:	83 ec 10             	sub    esp,0x10
c001a769:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a76d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a771:	68 d1 30 02 c0       	push   0xc00230d1
c001a776:	e8 ef 01 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001a77b:	83 c4 10             	add    esp,0x10
c001a77e:	85 db                	test   ebx,ebx
c001a780:	74 2a                	je     c001a7ac <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a782:	85 f6                	test   esi,esi
c001a784:	74 26                	je     c001a7ac <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a786:	89 d8                	mov    eax,ebx
c001a788:	b9 02 00 00 00       	mov    ecx,0x2
c001a78d:	99                   	cdq    
c001a78e:	83 ec 0c             	sub    esp,0xc
c001a791:	f7 f9                	idiv   ecx
c001a793:	83 e8 32             	sub    eax,0x32
c001a796:	50                   	push   eax
c001a797:	e8 01 c0 fe ff       	call   c000679d <iso_total>
c001a79c:	83 c4 10             	add    esp,0x10
c001a79f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a7a6:	89 06                	mov    DWORD PTR [esi],eax
c001a7a8:	31 c0                	xor    eax,eax
c001a7aa:	eb 05                	jmp    c001a7b1 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a7ac:	b8 04 00 00 00       	mov    eax,0x4
c001a7b1:	5a                   	pop    edx
c001a7b2:	5b                   	pop    ebx
c001a7b3:	5e                   	pop    esi
c001a7b4:	c3                   	ret    
c001a7b5:	90                   	nop

c001a7b6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a7b6:	55                   	push   ebp
c001a7b7:	57                   	push   edi
c001a7b8:	56                   	push   esi
c001a7b9:	53                   	push   ebx
c001a7ba:	83 ec 18             	sub    esp,0x18
c001a7bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a7c1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a7c5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a7c9:	68 d9 30 02 c0       	push   0xc00230d9
c001a7ce:	e8 97 01 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001a7d3:	83 c4 10             	add    esp,0x10
c001a7d6:	85 ff                	test   edi,edi
c001a7d8:	0f 94 c0             	sete   al
c001a7db:	85 f6                	test   esi,esi
c001a7dd:	0f 94 c2             	sete   dl
c001a7e0:	09 d0                	or     eax,edx
c001a7e2:	a8 01                	test   al,0x1
c001a7e4:	0f 85 dd 00 00 00    	jne    c001a8c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a7ea:	85 db                	test   ebx,ebx
c001a7ec:	0f 84 d5 00 00 00    	je     c001a8c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a7f2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a7f5:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a7fb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a802:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a809:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a80b:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a811:	74 1b                	je     c001a82e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a813:	85 c0                	test   eax,eax
c001a815:	74 10                	je     c001a827 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a817:	83 ec 0c             	sub    esp,0xc
c001a81a:	68 7d 30 02 c0       	push   0xc002307d
c001a81f:	e8 1b 6e ff ff       	call   c001163f <KePanic(char const*)>
c001a824:	83 c4 10             	add    esp,0x10
c001a827:	8a 03                	mov    al,BYTE PTR [ebx]
c001a829:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a82e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a831:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a838:	85 c0                	test   eax,eax
c001a83a:	74 09                	je     c001a845 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a83c:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a843:	74 51                	je     c001a896 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a845:	83 ec 0c             	sub    esp,0xc
c001a848:	68 e1 30 02 c0       	push   0xc00230e1
c001a84d:	e8 18 01 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001a852:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a855:	83 c4 10             	add    esp,0x10
c001a858:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a860:	74 21                	je     c001a883 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a862:	83 ec 0c             	sub    esp,0xc
c001a865:	68 01 31 02 c0       	push   0xc0023101
c001a86a:	e8 fb 00 ff ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001a86f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a872:	83 c4 10             	add    esp,0x10
c001a875:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a87c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a883:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a88a:	83 ec 0c             	sub    esp,0xc
c001a88d:	50                   	push   eax
c001a88e:	e8 d4 c1 fe ff       	call   c0006a67 <init_percd>
c001a893:	83 c4 10             	add    esp,0x10
c001a896:	52                   	push   edx
c001a897:	83 c3 03             	add    ebx,0x3
c001a89a:	52                   	push   edx
c001a89b:	6a 00                	push   0x0
c001a89d:	53                   	push   ebx
c001a89e:	e8 87 bc fe ff       	call   c000652a <iso_open>
c001a8a3:	83 c4 10             	add    esp,0x10
c001a8a6:	83 f8 ff             	cmp    eax,0xffffffff
c001a8a9:	89 c5                	mov    ebp,eax
c001a8ab:	75 21                	jne    c001a8ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a8ad:	50                   	push   eax
c001a8ae:	50                   	push   eax
c001a8af:	6a 01                	push   0x1
c001a8b1:	53                   	push   ebx
c001a8b2:	e8 73 bc fe ff       	call   c000652a <iso_open>
c001a8b7:	83 c4 10             	add    esp,0x10
c001a8ba:	ba 02 00 00 00       	mov    edx,0x2
c001a8bf:	40                   	inc    eax
c001a8c0:	74 2b                	je     c001a8ed <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a8c2:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a8c5:	eb 24                	jmp    c001a8eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a8c7:	ba 04 00 00 00       	mov    edx,0x4
c001a8cc:	eb 1f                	jmp    c001a8ed <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a8ce:	83 ec 0c             	sub    esp,0xc
c001a8d1:	50                   	push   eax
c001a8d2:	e8 c6 be fe ff       	call   c000679d <iso_total>
c001a8d7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a8de:	89 07                	mov    DWORD PTR [edi],eax
c001a8e0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a8e3:	e8 cc bc fe ff       	call   c00065b4 <iso_close>
c001a8e8:	83 c4 10             	add    esp,0x10
c001a8eb:	31 d2                	xor    edx,edx
c001a8ed:	83 c4 0c             	add    esp,0xc
c001a8f0:	89 d0                	mov    eax,edx
c001a8f2:	5b                   	pop    ebx
c001a8f3:	5e                   	pop    esi
c001a8f4:	5f                   	pop    edi
c001a8f5:	5d                   	pop    ebp
c001a8f6:	c3                   	ret    
c001a8f7:	90                   	nop

c001a8f8 <ISO9660::close(void*)>:
c001a8f8:	83 ec 0c             	sub    esp,0xc
c001a8fb:	b8 04 00 00 00       	mov    eax,0x4
c001a900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a904:	85 d2                	test   edx,edx
c001a906:	74 1b                	je     c001a923 <ISO9660::close(void*)+0x2b>
c001a908:	89 d0                	mov    eax,edx
c001a90a:	b9 02 00 00 00       	mov    ecx,0x2
c001a90f:	99                   	cdq    
c001a910:	83 ec 0c             	sub    esp,0xc
c001a913:	f7 f9                	idiv   ecx
c001a915:	83 e8 32             	sub    eax,0x32
c001a918:	50                   	push   eax
c001a919:	e8 96 bc fe ff       	call   c00065b4 <iso_close>
c001a91e:	83 c4 10             	add    esp,0x10
c001a921:	31 c0                	xor    eax,eax
c001a923:	83 c4 0c             	add    esp,0xc
c001a926:	c3                   	ret    
c001a927:	90                   	nop

c001a928 <ISO9660::openDir(char const*, void**)>:
c001a928:	56                   	push   esi
c001a929:	53                   	push   ebx
c001a92a:	50                   	push   eax
c001a92b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a92f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a933:	85 db                	test   ebx,ebx
c001a935:	0f 84 bd 00 00 00    	je     c001a9f8 <ISO9660::openDir(char const*, void**)+0xd0>
c001a93b:	85 f6                	test   esi,esi
c001a93d:	0f 84 b5 00 00 00    	je     c001a9f8 <ISO9660::openDir(char const*, void**)+0xd0>
c001a943:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a945:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a94b:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a952:	74 1b                	je     c001a96f <ISO9660::openDir(char const*, void**)+0x47>
c001a954:	85 c0                	test   eax,eax
c001a956:	74 10                	je     c001a968 <ISO9660::openDir(char const*, void**)+0x40>
c001a958:	83 ec 0c             	sub    esp,0xc
c001a95b:	68 7d 30 02 c0       	push   0xc002307d
c001a960:	e8 da 6c ff ff       	call   c001163f <KePanic(char const*)>
c001a965:	83 c4 10             	add    esp,0x10
c001a968:	8a 03                	mov    al,BYTE PTR [ebx]
c001a96a:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a96f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a972:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a979:	85 c0                	test   eax,eax
c001a97b:	74 10                	je     c001a98d <ISO9660::openDir(char const*, void**)+0x65>
c001a97d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a984:	74 1a                	je     c001a9a0 <ISO9660::openDir(char const*, void**)+0x78>
c001a986:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a98d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a994:	83 ec 0c             	sub    esp,0xc
c001a997:	50                   	push   eax
c001a998:	e8 ca c0 fe ff       	call   c0006a67 <init_percd>
c001a99d:	83 c4 10             	add    esp,0x10
c001a9a0:	50                   	push   eax
c001a9a1:	83 c3 03             	add    ebx,0x3
c001a9a4:	50                   	push   eax
c001a9a5:	6a 01                	push   0x1
c001a9a7:	53                   	push   ebx
c001a9a8:	e8 7d bb fe ff       	call   c000652a <iso_open>
c001a9ad:	83 c4 10             	add    esp,0x10
c001a9b0:	83 f8 ff             	cmp    eax,0xffffffff
c001a9b3:	89 c3                	mov    ebx,eax
c001a9b5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a9ba:	75 1c                	jne    c001a9d8 <ISO9660::openDir(char const*, void**)+0xb0>
c001a9bc:	53                   	push   ebx
c001a9bd:	53                   	push   ebx
c001a9be:	68 25 31 02 c0       	push   0xc0023125
c001a9c3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9c9:	e8 3e e1 fe ff       	call   c0008b0c <VgaText::puts(char const*)>
c001a9ce:	83 c4 10             	add    esp,0x10
c001a9d1:	b8 01 00 00 00       	mov    eax,0x1
c001a9d6:	eb 25                	jmp    c001a9fd <ISO9660::openDir(char const*, void**)+0xd5>
c001a9d8:	51                   	push   ecx
c001a9d9:	01 db                	add    ebx,ebx
c001a9db:	51                   	push   ecx
c001a9dc:	83 c3 65             	add    ebx,0x65
c001a9df:	68 38 31 02 c0       	push   0xc0023138
c001a9e4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9ea:	e8 1d e1 fe ff       	call   c0008b0c <VgaText::puts(char const*)>
c001a9ef:	83 c4 10             	add    esp,0x10
c001a9f2:	31 c0                	xor    eax,eax
c001a9f4:	89 1e                	mov    DWORD PTR [esi],ebx
c001a9f6:	eb 05                	jmp    c001a9fd <ISO9660::openDir(char const*, void**)+0xd5>
c001a9f8:	b8 04 00 00 00       	mov    eax,0x4
c001a9fd:	5a                   	pop    edx
c001a9fe:	5b                   	pop    ebx
c001a9ff:	5e                   	pop    esi
c001aa00:	c3                   	ret    
c001aa01:	90                   	nop

c001aa02 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001aa02:	55                   	push   ebp
c001aa03:	57                   	push   edi
c001aa04:	56                   	push   esi
c001aa05:	53                   	push   ebx
c001aa06:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa0c:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001aa13:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001aa1a:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001aa21:	85 db                	test   ebx,ebx
c001aa23:	0f 84 e4 00 00 00    	je     c001ab0d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001aa29:	85 ed                	test   ebp,ebp
c001aa2b:	0f 84 dc 00 00 00    	je     c001ab0d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001aa31:	83 ec 0c             	sub    esp,0xc
c001aa34:	68 4b 31 02 c0       	push   0xc002314b
c001aa39:	e8 2c ff fe ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001aa3e:	89 d8                	mov    eax,ebx
c001aa40:	b9 02 00 00 00       	mov    ecx,0x2
c001aa45:	99                   	cdq    
c001aa46:	f7 f9                	idiv   ecx
c001aa48:	83 e8 32             	sub    eax,0x32
c001aa4b:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa4e:	e8 9c bd fe ff       	call   c00067ef <iso_readdir>
c001aa53:	83 c4 10             	add    esp,0x10
c001aa56:	85 c0                	test   eax,eax
c001aa58:	89 c3                	mov    ebx,eax
c001aa5a:	75 38                	jne    c001aa94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001aa5c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa61:	53                   	push   ebx
c001aa62:	53                   	push   ebx
c001aa63:	68 56 31 02 c0       	push   0xc0023156
c001aa68:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa6e:	e8 99 e0 fe ff       	call   c0008b0c <VgaText::puts(char const*)>
c001aa73:	83 c4 0c             	add    esp,0xc
c001aa76:	68 10 01 00 00       	push   0x110
c001aa7b:	6a 00                	push   0x0
c001aa7d:	57                   	push   edi
c001aa7e:	e8 6d 5a fe ff       	call   c00004f0 <memset>
c001aa83:	83 c4 10             	add    esp,0x10
c001aa86:	b8 01 00 00 00       	mov    eax,0x1
c001aa8b:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001aa92:	eb 7e                	jmp    c001ab12 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001aa94:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001aa9a:	8d 70 08             	lea    esi,[eax+0x8]
c001aa9d:	83 ec 0c             	sub    esp,0xc
c001aaa0:	56                   	push   esi
c001aaa1:	e8 da 5a fe ff       	call   c0000580 <strlen>
c001aaa6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aaae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aab2:	83 c4 10             	add    esp,0x10
c001aab5:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001aab9:	75 0a                	jne    c001aac5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001aabb:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001aabe:	b8 02 00 00 00       	mov    eax,0x2
c001aac3:	74 05                	je     c001aaca <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001aac5:	b8 01 00 00 00       	mov    eax,0x1
c001aaca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aace:	50                   	push   eax
c001aacf:	50                   	push   eax
c001aad0:	56                   	push   esi
c001aad1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aad5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aad9:	50                   	push   eax
c001aada:	e8 71 5b fe ff       	call   c0000650 <strcpy>
c001aadf:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aae6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aae8:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001aaef:	5a                   	pop    edx
c001aaf0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aaf5:	59                   	pop    ecx
c001aaf6:	68 69 31 02 c0       	push   0xc0023169
c001aafb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001ab01:	e8 06 e0 fe ff       	call   c0008b0c <VgaText::puts(char const*)>
c001ab06:	83 c4 10             	add    esp,0x10
c001ab09:	31 c0                	xor    eax,eax
c001ab0b:	eb 05                	jmp    c001ab12 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001ab0d:	b8 04 00 00 00       	mov    eax,0x4
c001ab12:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab18:	5b                   	pop    ebx
c001ab19:	5e                   	pop    esi
c001ab1a:	5f                   	pop    edi
c001ab1b:	5d                   	pop    ebp
c001ab1c:	c3                   	ret    

c001ab1d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ab1d:	57                   	push   edi
c001ab1e:	56                   	push   esi
c001ab1f:	53                   	push   ebx
c001ab20:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab24:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ab28:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001ab2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab32:	0f be cb             	movsx  ecx,bl
c001ab35:	75 0b                	jne    c001ab42 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001ab37:	0f be 05 a0 43 02 c0 	movsx  eax,BYTE PTR ds:0xc00243a0
c001ab3e:	39 c8                	cmp    eax,ecx
c001ab40:	74 47                	je     c001ab89 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab42:	83 ec 0c             	sub    esp,0xc
c001ab45:	31 d2                	xor    edx,edx
c001ab47:	68 a0 c8 02 c0       	push   0xc002c8a0
c001ab4c:	6a 01                	push   0x1
c001ab4e:	52                   	push   edx
c001ab4f:	56                   	push   esi
c001ab50:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001ab57:	e8 8e 32 ff ff       	call   c000ddea <LogicalDisk::read(unsigned long long, int, void*)>
c001ab5c:	83 c4 20             	add    esp,0x20
c001ab5f:	85 c0                	test   eax,eax
c001ab61:	75 0e                	jne    c001ab71 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001ab63:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001ab69:	88 1d a0 43 02 c0    	mov    BYTE PTR ds:0xc00243a0,bl
c001ab6f:	eb 18                	jmp    c001ab89 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab71:	50                   	push   eax
c001ab72:	68 00 08 00 00       	push   0x800
c001ab77:	6a 00                	push   0x0
c001ab79:	57                   	push   edi
c001ab7a:	e8 71 59 fe ff       	call   c00004f0 <memset>
c001ab7f:	83 c4 10             	add    esp,0x10
c001ab82:	b8 01 00 00 00       	mov    eax,0x1
c001ab87:	eb 0e                	jmp    c001ab97 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001ab89:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001ab8e:	b9 00 08 00 00       	mov    ecx,0x800
c001ab93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab95:	31 c0                	xor    eax,eax
c001ab97:	5b                   	pop    ebx
c001ab98:	5e                   	pop    esi
c001ab99:	5f                   	pop    edi
c001ab9a:	c3                   	ret    
c001ab9b:	90                   	nop

c001ab9c <ISO9660::tryMount(LogicalDisk*, int)>:
c001ab9c:	53                   	push   ebx
c001ab9d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001aba3:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001abad:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001abb4:	8d 58 41             	lea    ebx,[eax+0x41]
c001abb7:	0f be db             	movsx  ebx,bl
c001abba:	53                   	push   ebx
c001abbb:	8d 44 24 08          	lea    eax,[esp+0x8]
c001abbf:	50                   	push   eax
c001abc0:	6a 10                	push   0x10
c001abc2:	e8 56 ff ff ff       	call   c001ab1d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001abc7:	83 c4 10             	add    esp,0x10
c001abca:	31 d2                	xor    edx,edx
c001abcc:	85 c0                	test   eax,eax
c001abce:	75 33                	jne    c001ac03 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abd0:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001abd5:	75 2c                	jne    c001ac03 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abd7:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001abdc:	75 25                	jne    c001ac03 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abde:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001abe3:	75 1e                	jne    c001ac03 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abe5:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001abea:	75 17                	jne    c001ac03 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abec:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001abf1:	75 10                	jne    c001ac03 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abf3:	83 ec 0c             	sub    esp,0xc
c001abf6:	53                   	push   ebx
c001abf7:	e8 6b be fe ff       	call   c0006a67 <init_percd>
c001abfc:	83 c4 10             	add    esp,0x10
c001abff:	40                   	inc    eax
c001ac00:	0f 95 c2             	setne  dl
c001ac03:	81 c4 08 08 00 00    	add    esp,0x808
c001ac09:	88 d0                	mov    al,dl
c001ac0b:	5b                   	pop    ebx
c001ac0c:	c3                   	ret    
c001ac0d:	90                   	nop

c001ac0e <ISO9660::ISO9660()>:
c001ac0e:	83 ec 0c             	sub    esp,0xc
c001ac11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac15:	83 ec 0c             	sub    esp,0xc
c001ac18:	50                   	push   eax
c001ac19:	e8 ae 0b ff ff       	call   c000b7cc <Filesystem::Filesystem()>
c001ac1e:	83 c4 10             	add    esp,0x10
c001ac21:	ba 84 31 02 c0       	mov    edx,0xc0023184
c001ac26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac2a:	89 10                	mov    DWORD PTR [eax],edx
c001ac2c:	e8 48 bf fe ff       	call   c0006b79 <fs_iso9660_init>
c001ac31:	90                   	nop
c001ac32:	83 c4 0c             	add    esp,0xc
c001ac35:	c3                   	ret    

c001ac36 <SoundCard::beginPlayback()>:
c001ac36:	c7 44 24 04 e8 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc00231e8
c001ac3e:	e9 fc 69 ff ff       	jmp    c001163f <KePanic(char const*)>
c001ac43:	90                   	nop

c001ac44 <SoundCard::stopPlayback()>:
c001ac44:	c7 44 24 04 e8 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc00231e8
c001ac4c:	e9 ee 69 ff ff       	jmp    c001163f <KePanic(char const*)>
c001ac51:	90                   	nop

c001ac52 <SoundCard::SoundCard(char const*)>:
c001ac52:	83 ec 1c             	sub    esp,0x1c
c001ac55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac59:	83 ec 08             	sub    esp,0x8
c001ac5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac60:	50                   	push   eax
c001ac61:	e8 32 1f ff ff       	call   c000cb98 <Device::Device(char const*)>
c001ac66:	83 c4 10             	add    esp,0x10
c001ac69:	ba 34 32 02 c0       	mov    edx,0xc0023234
c001ac6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac72:	89 10                	mov    DWORD PTR [eax],edx
c001ac74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac78:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac83:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ac8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac91:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ac9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac9f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001aca9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acad:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001acb7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acbf:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001acc4:	7f 1a                	jg     c001ace0 <SoundCard::SoundCard(char const*)+0x8e>
c001acc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acce:	83 c2 54             	add    edx,0x54
c001acd1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001acd9:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001acde:	eb df                	jmp    c001acbf <SoundCard::SoundCard(char const*)+0x6d>
c001ace0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ace4:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001aceb:	90                   	nop
c001acec:	83 c4 1c             	add    esp,0x1c
c001acef:	c3                   	ret    

c001acf0 <SoundCard::~SoundCard()>:
c001acf0:	83 ec 0c             	sub    esp,0xc
c001acf3:	ba 34 32 02 c0       	mov    edx,0xc0023234
c001acf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acfc:	89 10                	mov    DWORD PTR [eax],edx
c001acfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad02:	83 ec 0c             	sub    esp,0xc
c001ad05:	50                   	push   eax
c001ad06:	e8 f7 1b ff ff       	call   c000c902 <Device::~Device()>
c001ad0b:	83 c4 10             	add    esp,0x10
c001ad0e:	90                   	nop
c001ad0f:	83 c4 0c             	add    esp,0xc
c001ad12:	c3                   	ret    
c001ad13:	90                   	nop

c001ad14 <SoundCard::~SoundCard()>:
c001ad14:	83 ec 0c             	sub    esp,0xc
c001ad17:	83 ec 0c             	sub    esp,0xc
c001ad1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad1e:	e8 cd ff ff ff       	call   c001acf0 <SoundCard::~SoundCard()>
c001ad23:	83 c4 10             	add    esp,0x10
c001ad26:	83 ec 08             	sub    esp,0x8
c001ad29:	68 e8 01 00 00       	push   0x1e8
c001ad2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad32:	e8 35 fb fe ff       	call   c000a86c <operator delete(void*, unsigned long)>
c001ad37:	83 c4 10             	add    esp,0x10
c001ad3a:	83 c4 0c             	add    esp,0xc
c001ad3d:	c3                   	ret    

c001ad3e <SoundCard::configureRates(int, int, int)>:
c001ad3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ad42:	31 c0                	xor    eax,eax
c001ad44:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ad4b:	75 20                	jne    c001ad6d <SoundCard::configureRates(int, int, int)+0x2f>
c001ad4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad51:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ad57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad5b:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ad61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad65:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ad6b:	b0 01                	mov    al,0x1
c001ad6d:	c3                   	ret    

c001ad6e <SoundCard::getSamples16(int, short*)>:
c001ad6e:	55                   	push   ebp
c001ad6f:	57                   	push   edi
c001ad70:	31 ff                	xor    edi,edi
c001ad72:	56                   	push   esi
c001ad73:	53                   	push   ebx
c001ad74:	31 db                	xor    ebx,ebx
c001ad76:	83 ec 10             	sub    esp,0x10
c001ad79:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ad7d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad81:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad84:	50                   	push   eax
c001ad85:	6a 00                	push   0x0
c001ad87:	55                   	push   ebp
c001ad88:	e8 63 57 fe ff       	call   c00004f0 <memset>
c001ad8d:	83 c4 10             	add    esp,0x10
c001ad90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad94:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001ad9b:	85 c0                	test   eax,eax
c001ad9d:	74 1a                	je     c001adb9 <SoundCard::getSamples16(int, short*)+0x4b>
c001ad9f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ada3:	75 14                	jne    c001adb9 <SoundCard::getSamples16(int, short*)+0x4b>
c001ada5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ada9:	55                   	push   ebp
c001adaa:	56                   	push   esi
c001adab:	50                   	push   eax
c001adac:	e8 f3 02 00 00       	call   c001b0a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001adb1:	83 c4 10             	add    esp,0x10
c001adb4:	39 c3                	cmp    ebx,eax
c001adb6:	0f 4c d8             	cmovl  ebx,eax
c001adb9:	47                   	inc    edi
c001adba:	83 ff 20             	cmp    edi,0x20
c001adbd:	75 d1                	jne    c001ad90 <SoundCard::getSamples16(int, short*)+0x22>
c001adbf:	83 c4 0c             	add    esp,0xc
c001adc2:	89 d8                	mov    eax,ebx
c001adc4:	5b                   	pop    ebx
c001adc5:	5e                   	pop    esi
c001adc6:	5f                   	pop    edi
c001adc7:	5d                   	pop    ebp
c001adc8:	c3                   	ret    
c001adc9:	90                   	nop

c001adca <SoundCard::getSamples32(int, int*)>:
c001adca:	55                   	push   ebp
c001adcb:	57                   	push   edi
c001adcc:	31 ff                	xor    edi,edi
c001adce:	56                   	push   esi
c001adcf:	31 f6                	xor    esi,esi
c001add1:	53                   	push   ebx
c001add2:	83 ec 10             	sub    esp,0x10
c001add5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001add9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001addd:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ade1:	c1 e0 02             	shl    eax,0x2
c001ade4:	50                   	push   eax
c001ade5:	6a 00                	push   0x0
c001ade7:	55                   	push   ebp
c001ade8:	e8 03 57 fe ff       	call   c00004f0 <memset>
c001aded:	83 c4 10             	add    esp,0x10
c001adf0:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001adf7:	85 c0                	test   eax,eax
c001adf9:	74 1a                	je     c001ae15 <SoundCard::getSamples32(int, int*)+0x4b>
c001adfb:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001adff:	75 14                	jne    c001ae15 <SoundCard::getSamples32(int, int*)+0x4b>
c001ae01:	53                   	push   ebx
c001ae02:	55                   	push   ebp
c001ae03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae07:	50                   	push   eax
c001ae08:	e8 67 03 00 00       	call   c001b174 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ae0d:	83 c4 10             	add    esp,0x10
c001ae10:	39 c6                	cmp    esi,eax
c001ae12:	0f 4c f0             	cmovl  esi,eax
c001ae15:	47                   	inc    edi
c001ae16:	83 ff 20             	cmp    edi,0x20
c001ae19:	75 d5                	jne    c001adf0 <SoundCard::getSamples32(int, int*)+0x26>
c001ae1b:	85 f6                	test   esi,esi
c001ae1d:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ae24:	75 0f                	jne    c001ae35 <SoundCard::getSamples32(int, int*)+0x6b>
c001ae26:	85 c0                	test   eax,eax
c001ae28:	74 1b                	je     c001ae45 <SoundCard::getSamples32(int, int*)+0x7b>
c001ae2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae2c:	83 ec 0c             	sub    esp,0xc
c001ae2f:	53                   	push   ebx
c001ae30:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ae33:	eb 0d                	jmp    c001ae42 <SoundCard::getSamples32(int, int*)+0x78>
c001ae35:	85 c0                	test   eax,eax
c001ae37:	75 0c                	jne    c001ae45 <SoundCard::getSamples32(int, int*)+0x7b>
c001ae39:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae3b:	83 ec 0c             	sub    esp,0xc
c001ae3e:	53                   	push   ebx
c001ae3f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ae42:	83 c4 10             	add    esp,0x10
c001ae45:	83 c4 0c             	add    esp,0xc
c001ae48:	89 f0                	mov    eax,esi
c001ae4a:	5b                   	pop    ebx
c001ae4b:	5e                   	pop    esi
c001ae4c:	5f                   	pop    edi
c001ae4d:	5d                   	pop    ebp
c001ae4e:	c3                   	ret    
c001ae4f:	90                   	nop

c001ae50 <SoundCard::addChannel(SoundPort*)>:
c001ae50:	83 ec 0c             	sub    esp,0xc
c001ae53:	31 c0                	xor    eax,eax
c001ae55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae59:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ae61:	74 1b                	je     c001ae7e <SoundCard::addChannel(SoundPort*)+0x2e>
c001ae63:	40                   	inc    eax
c001ae64:	83 f8 20             	cmp    eax,0x20
c001ae67:	75 f0                	jne    c001ae59 <SoundCard::addChannel(SoundPort*)+0x9>
c001ae69:	83 ec 0c             	sub    esp,0xc
c001ae6c:	68 0d 32 02 c0       	push   0xc002320d
c001ae71:	e8 c9 67 ff ff       	call   c001163f <KePanic(char const*)>
c001ae76:	83 c4 10             	add    esp,0x10
c001ae79:	83 c8 ff             	or     eax,0xffffffff
c001ae7c:	eb 0b                	jmp    c001ae89 <SoundCard::addChannel(SoundPort*)+0x39>
c001ae7e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae82:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ae89:	83 c4 0c             	add    esp,0xc
c001ae8c:	c3                   	ret    
c001ae8d:	90                   	nop

c001ae8e <SoundCard::removeChannel(int)>:
c001ae8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae96:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001aea1:	c3                   	ret    
c001aea2:	66 90                	xchg   ax,ax

c001aea4 <SoundPort::SoundPort(int, int, int, int)>:
c001aea4:	83 ec 0c             	sub    esp,0xc
c001aea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeab:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aeb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeb6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aebe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aec2:	89 10                	mov    DWORD PTR [eax],edx
c001aec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aec8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aecc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aed7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aeda:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001aedf:	75 13                	jne    c001aef4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001aee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee5:	8b 00                	mov    eax,DWORD PTR [eax]
c001aee7:	05 a0 0f 00 00       	add    eax,0xfa0
c001aeec:	d1 e0                	shl    eax,1
c001aeee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aef2:	66 90                	xchg   ax,ax
c001aef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aefc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001aeff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af03:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001af0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af0e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af11:	c1 e0 02             	shl    eax,0x2
c001af14:	83 ec 0c             	sub    esp,0xc
c001af17:	50                   	push   eax
c001af18:	e8 16 cc fe ff       	call   c0007b33 <malloc>
c001af1d:	83 c4 10             	add    esp,0x10
c001af20:	89 c2                	mov    edx,eax
c001af22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af26:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001af29:	90                   	nop
c001af2a:	83 c4 0c             	add    esp,0xc
c001af2d:	c3                   	ret    
c001af2e:	66 90                	xchg   ax,ax

c001af30 <SoundPort::~SoundPort()>:
c001af30:	83 ec 0c             	sub    esp,0xc
c001af33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af3a:	85 c0                	test   eax,eax
c001af3c:	74 1e                	je     c001af5c <SoundPort::~SoundPort()+0x2c>
c001af3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af45:	83 ec 0c             	sub    esp,0xc
c001af48:	50                   	push   eax
c001af49:	e8 f5 cb fe ff       	call   c0007b43 <free>
c001af4e:	83 c4 10             	add    esp,0x10
c001af51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af55:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001af5c:	90                   	nop
c001af5d:	83 c4 0c             	add    esp,0xc
c001af60:	c3                   	ret    
c001af61:	90                   	nop
c001af62:	66 90                	xchg   ax,ax

c001af64 <SoundPort::unpause()>:
c001af64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af68:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001af6c:	c3                   	ret    
c001af6d:	90                   	nop
c001af6e:	66 90                	xchg   ax,ax

c001af70 <SoundPort::pause()>:
c001af70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af74:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001af78:	c3                   	ret    
c001af79:	90                   	nop
c001af7a:	66 90                	xchg   ax,ax

c001af7c <SoundPort::getBufferUsed()>:
c001af7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af80:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af83:	c3                   	ret    

c001af84 <SoundPort::getBufferSize()>:
c001af84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af88:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af8b:	c3                   	ret    

c001af8c <SoundPort::buffer16(short*, int)>:
c001af8c:	55                   	push   ebp
c001af8d:	57                   	push   edi
c001af8e:	56                   	push   esi
c001af8f:	53                   	push   ebx
c001af90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af94:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001af98:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001af9b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001af9e:	74 68                	je     c001b008 <SoundPort::buffer16(short*, int)+0x7c>
c001afa0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001afa4:	85 c9                	test   ecx,ecx
c001afa6:	7e 60                	jle    c001b008 <SoundPort::buffer16(short*, int)+0x7c>
c001afa8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001afac:	8d 70 01             	lea    esi,[eax+0x1]
c001afaf:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001afb2:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001afb5:	c1 e1 0f             	shl    ecx,0xf
c001afb8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001afbb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afbe:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afc1:	74 4d                	je     c001b010 <SoundPort::buffer16(short*, int)+0x84>
c001afc3:	31 f6                	xor    esi,esi
c001afc5:	eb 21                	jmp    c001afe8 <SoundPort::buffer16(short*, int)+0x5c>
c001afc7:	90                   	nop
c001afc8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001afcd:	8d 79 01             	lea    edi,[ecx+0x1]
c001afd0:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001afd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001afd6:	c1 e3 0f             	shl    ebx,0xf
c001afd9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001afdc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afdf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afe2:	74 1c                	je     c001b000 <SoundPort::buffer16(short*, int)+0x74>
c001afe4:	89 c6                	mov    esi,eax
c001afe6:	66 90                	xchg   ax,ax
c001afe8:	8d 46 01             	lea    eax,[esi+0x1]
c001afeb:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001afef:	75 d7                	jne    c001afc8 <SoundPort::buffer16(short*, int)+0x3c>
c001aff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aff5:	8d 76 00             	lea    esi,[esi+0x0]
c001aff8:	5b                   	pop    ebx
c001aff9:	5e                   	pop    esi
c001affa:	5f                   	pop    edi
c001affb:	5d                   	pop    ebp
c001affc:	c3                   	ret    
c001affd:	8d 76 00             	lea    esi,[esi+0x0]
c001b000:	5b                   	pop    ebx
c001b001:	8d 46 02             	lea    eax,[esi+0x2]
c001b004:	5e                   	pop    esi
c001b005:	5f                   	pop    edi
c001b006:	5d                   	pop    ebp
c001b007:	c3                   	ret    
c001b008:	5b                   	pop    ebx
c001b009:	31 c0                	xor    eax,eax
c001b00b:	5e                   	pop    esi
c001b00c:	5f                   	pop    edi
c001b00d:	5d                   	pop    ebp
c001b00e:	c3                   	ret    
c001b00f:	90                   	nop
c001b010:	b8 01 00 00 00       	mov    eax,0x1
c001b015:	eb e1                	jmp    c001aff8 <SoundPort::buffer16(short*, int)+0x6c>
c001b017:	90                   	nop

c001b018 <SoundPort::buffer32(int*, int)>:
c001b018:	55                   	push   ebp
c001b019:	57                   	push   edi
c001b01a:	56                   	push   esi
c001b01b:	53                   	push   ebx
c001b01c:	83 ec 04             	sub    esp,0x4
c001b01f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b023:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b027:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b02b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b02e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b031:	89 04 24             	mov    DWORD PTR [esp],eax
c001b034:	74 5a                	je     c001b090 <SoundPort::buffer32(int*, int)+0x78>
c001b036:	85 c0                	test   eax,eax
c001b038:	7e 56                	jle    c001b090 <SoundPort::buffer32(int*, int)+0x78>
c001b03a:	8d 71 01             	lea    esi,[ecx+0x1]
c001b03d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b040:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b043:	8b 37                	mov    esi,DWORD PTR [edi]
c001b045:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b048:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b04b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b04e:	74 4c                	je     c001b09c <SoundPort::buffer32(int*, int)+0x84>
c001b050:	31 f6                	xor    esi,esi
c001b052:	eb 1c                	jmp    c001b070 <SoundPort::buffer32(int*, int)+0x58>
c001b054:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b057:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b05a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b05d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b060:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b064:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b067:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b06a:	74 18                	je     c001b084 <SoundPort::buffer32(int*, int)+0x6c>
c001b06c:	89 de                	mov    esi,ebx
c001b06e:	66 90                	xchg   ax,ax
c001b070:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b073:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b076:	75 dc                	jne    c001b054 <SoundPort::buffer32(int*, int)+0x3c>
c001b078:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b07b:	90                   	nop
c001b07c:	83 c4 04             	add    esp,0x4
c001b07f:	5b                   	pop    ebx
c001b080:	5e                   	pop    esi
c001b081:	5f                   	pop    edi
c001b082:	5d                   	pop    ebp
c001b083:	c3                   	ret    
c001b084:	8d 46 02             	lea    eax,[esi+0x2]
c001b087:	83 c4 04             	add    esp,0x4
c001b08a:	5b                   	pop    ebx
c001b08b:	5e                   	pop    esi
c001b08c:	5f                   	pop    edi
c001b08d:	5d                   	pop    ebp
c001b08e:	c3                   	ret    
c001b08f:	90                   	nop
c001b090:	83 c4 04             	add    esp,0x4
c001b093:	31 c0                	xor    eax,eax
c001b095:	5b                   	pop    ebx
c001b096:	5e                   	pop    esi
c001b097:	5f                   	pop    edi
c001b098:	5d                   	pop    ebp
c001b099:	c3                   	ret    
c001b09a:	66 90                	xchg   ax,ax
c001b09c:	b8 01 00 00 00       	mov    eax,0x1
c001b0a1:	eb d9                	jmp    c001b07c <SoundPort::buffer32(int*, int)+0x64>
c001b0a3:	90                   	nop

c001b0a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b0a4:	55                   	push   ebp
c001b0a5:	57                   	push   edi
c001b0a6:	56                   	push   esi
c001b0a7:	53                   	push   ebx
c001b0a8:	83 ec 0c             	sub    esp,0xc
c001b0ab:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b0af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b0b3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b0b7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b0bb:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b0c1:	39 03                	cmp    DWORD PTR [ebx],eax
c001b0c3:	74 13                	je     c001b0d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001b0c5:	83 ec 0c             	sub    esp,0xc
c001b0c8:	68 60 32 02 c0       	push   0xc0023260
c001b0cd:	e8 6d 65 ff ff       	call   c001163f <KePanic(char const*)>
c001b0d2:	83 c4 10             	add    esp,0x10
c001b0d5:	8d 76 00             	lea    esi,[esi+0x0]
c001b0d8:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b0de:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b0e1:	74 11                	je     c001b0f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001b0e3:	83 ec 0c             	sub    esp,0xc
c001b0e6:	68 9f 32 02 c0       	push   0xc002329f
c001b0eb:	e8 4f 65 ff ff       	call   c001163f <KePanic(char const*)>
c001b0f0:	83 c4 10             	add    esp,0x10
c001b0f3:	90                   	nop
c001b0f4:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b0fa:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b0fd:	74 11                	je     c001b110 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001b0ff:	83 ec 0c             	sub    esp,0xc
c001b102:	68 9f 32 02 c0       	push   0xc002329f
c001b107:	e8 33 65 ff ff       	call   c001163f <KePanic(char const*)>
c001b10c:	83 c4 10             	add    esp,0x10
c001b10f:	90                   	nop
c001b110:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001b113:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001b117:	85 f6                	test   esi,esi
c001b119:	7e 2d                	jle    c001b148 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001b11b:	31 c0                	xor    eax,eax
c001b11d:	8d 76 00             	lea    esi,[esi+0x0]
c001b120:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b123:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001b126:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001b12c:	85 c9                	test   ecx,ecx
c001b12e:	0f 49 d1             	cmovns edx,ecx
c001b131:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001b135:	c1 fa 0f             	sar    edx,0xf
c001b138:	01 d1                	add    ecx,edx
c001b13a:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001b13e:	83 c0 01             	add    eax,0x1
c001b141:	39 f0                	cmp    eax,esi
c001b143:	75 db                	jne    c001b120 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001b145:	8d 76 00             	lea    esi,[esi+0x0]
c001b148:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b14b:	83 ec 04             	sub    esp,0x4
c001b14e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b151:	29 f0                	sub    eax,esi
c001b153:	c1 e0 02             	shl    eax,0x2
c001b156:	50                   	push   eax
c001b157:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b15a:	50                   	push   eax
c001b15b:	52                   	push   edx
c001b15c:	e8 6f 52 fe ff       	call   c00003d0 <memmove>
c001b161:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b164:	29 f0                	sub    eax,esi
c001b166:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b169:	83 c4 1c             	add    esp,0x1c
c001b16c:	89 f0                	mov    eax,esi
c001b16e:	5b                   	pop    ebx
c001b16f:	5e                   	pop    esi
c001b170:	5f                   	pop    edi
c001b171:	5d                   	pop    ebp
c001b172:	c3                   	ret    
c001b173:	90                   	nop

c001b174 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b174:	55                   	push   ebp
c001b175:	57                   	push   edi
c001b176:	56                   	push   esi
c001b177:	53                   	push   ebx
c001b178:	83 ec 0c             	sub    esp,0xc
c001b17b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b17f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b183:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b187:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b18b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b191:	39 03                	cmp    DWORD PTR [ebx],eax
c001b193:	74 13                	je     c001b1a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b195:	83 ec 0c             	sub    esp,0xc
c001b198:	68 80 32 02 c0       	push   0xc0023280
c001b19d:	e8 9d 64 ff ff       	call   c001163f <KePanic(char const*)>
c001b1a2:	83 c4 10             	add    esp,0x10
c001b1a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1a8:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b1ae:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b1b1:	74 11                	je     c001b1c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b1b3:	83 ec 0c             	sub    esp,0xc
c001b1b6:	68 bb 32 02 c0       	push   0xc00232bb
c001b1bb:	e8 7f 64 ff ff       	call   c001163f <KePanic(char const*)>
c001b1c0:	83 c4 10             	add    esp,0x10
c001b1c3:	90                   	nop
c001b1c4:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b1ca:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b1cd:	74 11                	je     c001b1e0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b1cf:	83 ec 0c             	sub    esp,0xc
c001b1d2:	68 bb 32 02 c0       	push   0xc00232bb
c001b1d7:	e8 63 64 ff ff       	call   c001163f <KePanic(char const*)>
c001b1dc:	83 c4 10             	add    esp,0x10
c001b1df:	90                   	nop
c001b1e0:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b1e3:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b1e7:	85 ff                	test   edi,edi
c001b1e9:	7e 21                	jle    c001b20c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b1eb:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b1f2:	31 c0                	xor    eax,eax
c001b1f4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b1f7:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b1fa:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b1fd:	01 d5                	add    ebp,edx
c001b1ff:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b202:	83 c0 04             	add    eax,0x4
c001b205:	39 c1                	cmp    ecx,eax
c001b207:	75 eb                	jne    c001b1f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b209:	8d 76 00             	lea    esi,[esi+0x0]
c001b20c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b20f:	83 ec 04             	sub    esp,0x4
c001b212:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b215:	29 f8                	sub    eax,edi
c001b217:	c1 e0 02             	shl    eax,0x2
c001b21a:	50                   	push   eax
c001b21b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b21e:	50                   	push   eax
c001b21f:	52                   	push   edx
c001b220:	e8 ab 51 fe ff       	call   c00003d0 <memmove>
c001b225:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b228:	29 f8                	sub    eax,edi
c001b22a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b22d:	83 c4 1c             	add    esp,0x1c
c001b230:	89 f8                	mov    eax,edi
c001b232:	5b                   	pop    ebx
c001b233:	5e                   	pop    esi
c001b234:	5f                   	pop    edi
c001b235:	5d                   	pop    ebp
c001b236:	c3                   	ret    
c001b237:	90                   	nop

c001b238 <PCI::open(int, int, void*)>:
c001b238:	83 ec 18             	sub    esp,0x18
c001b23b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b23f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b243:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b249:	8b 10                	mov    edx,DWORD PTR [eax]
c001b24b:	50                   	push   eax
c001b24c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b24f:	31 c0                	xor    eax,eax
c001b251:	83 c4 1c             	add    esp,0x1c
c001b254:	c3                   	ret    
c001b255:	90                   	nop

c001b256 <PCI::close(int, int, void*)>:
c001b256:	31 c0                	xor    eax,eax
c001b258:	c3                   	ret    
c001b259:	90                   	nop

c001b25a <PCI::PCI()>:
c001b25a:	83 ec 0c             	sub    esp,0xc
c001b25d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b261:	83 ec 08             	sub    esp,0x8
c001b264:	68 d7 32 02 c0       	push   0xc00232d7
c001b269:	50                   	push   eax
c001b26a:	e8 ed 10 ff ff       	call   c000c35c <Bus::Bus(char const*)>
c001b26f:	83 c4 10             	add    esp,0x10
c001b272:	ba 80 33 02 c0       	mov    edx,0xc0023380
c001b277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b27b:	89 10                	mov    DWORD PTR [eax],edx
c001b27d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b281:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b28b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b28f:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b298:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b29e:	0f b6 d0             	movzx  edx,al
c001b2a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2a5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b2b6:	0f b6 d0             	movzx  edx,al
c001b2b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2bd:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b2c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b2cc:	8d 50 01             	lea    edx,[eax+0x1]
c001b2cf:	88 d1                	mov    cl,dl
c001b2d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2d5:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b2db:	0f b6 d0             	movzx  edx,al
c001b2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2e2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b2e6:	83 c9 c0             	or     ecx,0xffffffc0
c001b2e9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b2ed:	90                   	nop
c001b2ee:	83 c4 0c             	add    esp,0xc
c001b2f1:	c3                   	ret    

c001b2f2 <PCI::readBAR8(unsigned int, int)>:
c001b2f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2fa:	f6 c2 01             	test   dl,0x1
c001b2fd:	74 07                	je     c001b306 <PCI::readBAR8(unsigned int, int)+0x14>
c001b2ff:	83 e2 fc             	and    edx,0xfffffffc
c001b302:	01 c2                	add    edx,eax
c001b304:	ec                   	in     al,dx
c001b305:	c3                   	ret    
c001b306:	83 e2 f0             	and    edx,0xfffffff0
c001b309:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b30c:	c3                   	ret    
c001b30d:	90                   	nop

c001b30e <PCI::readBAR16(unsigned int, int)>:
c001b30e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b312:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b316:	f6 c2 01             	test   dl,0x1
c001b319:	74 08                	je     c001b323 <PCI::readBAR16(unsigned int, int)+0x15>
c001b31b:	83 e2 fc             	and    edx,0xfffffffc
c001b31e:	01 c2                	add    edx,eax
c001b320:	66 ed                	in     ax,dx
c001b322:	c3                   	ret    
c001b323:	83 e2 f0             	and    edx,0xfffffff0
c001b326:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b32a:	c3                   	ret    
c001b32b:	90                   	nop

c001b32c <PCI::readBAR32(unsigned int, int)>:
c001b32c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b334:	f6 c2 01             	test   dl,0x1
c001b337:	74 07                	je     c001b340 <PCI::readBAR32(unsigned int, int)+0x14>
c001b339:	83 e2 fc             	and    edx,0xfffffffc
c001b33c:	01 c2                	add    edx,eax
c001b33e:	ed                   	in     eax,dx
c001b33f:	c3                   	ret    
c001b340:	83 e2 f0             	and    edx,0xfffffff0
c001b343:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b346:	c3                   	ret    
c001b347:	90                   	nop

c001b348 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b348:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b34c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b350:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b354:	f6 c2 01             	test   dl,0x1
c001b357:	74 07                	je     c001b360 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b359:	83 e2 fc             	and    edx,0xfffffffc
c001b35c:	01 ca                	add    edx,ecx
c001b35e:	ee                   	out    dx,al
c001b35f:	c3                   	ret    
c001b360:	83 e2 f0             	and    edx,0xfffffff0
c001b363:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b366:	c3                   	ret    
c001b367:	90                   	nop

c001b368 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b368:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b36c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b370:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b374:	f6 c2 01             	test   dl,0x1
c001b377:	74 08                	je     c001b381 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b379:	83 e2 fc             	and    edx,0xfffffffc
c001b37c:	01 ca                	add    edx,ecx
c001b37e:	66 ef                	out    dx,ax
c001b380:	c3                   	ret    
c001b381:	83 e2 f0             	and    edx,0xfffffff0
c001b384:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b388:	c3                   	ret    
c001b389:	90                   	nop

c001b38a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b38a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b38e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b392:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b396:	f6 c2 01             	test   dl,0x1
c001b399:	74 07                	je     c001b3a2 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b39b:	83 e2 fc             	and    edx,0xfffffffc
c001b39e:	01 ca                	add    edx,ecx
c001b3a0:	ef                   	out    dx,eax
c001b3a1:	c3                   	ret    
c001b3a2:	83 e2 f0             	and    edx,0xfffffff0
c001b3a5:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b3a8:	c3                   	ret    
c001b3a9:	90                   	nop

c001b3aa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b3aa:	55                   	push   ebp
c001b3ab:	57                   	push   edi
c001b3ac:	56                   	push   esi
c001b3ad:	53                   	push   ebx
c001b3ae:	83 ec 0c             	sub    esp,0xc
c001b3b1:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b3b6:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b3ba:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b3be:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b3c2:	83 fe 07             	cmp    esi,0x7
c001b3c5:	76 10                	jbe    c001b3d7 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b3c7:	83 ec 0c             	sub    esp,0xc
c001b3ca:	68 df 32 02 c0       	push   0xc00232df
c001b3cf:	e8 6b 62 ff ff       	call   c001163f <KePanic(char const*)>
c001b3d4:	83 c4 10             	add    esp,0x10
c001b3d7:	0f b6 db             	movzx  ebx,bl
c001b3da:	83 fb 0f             	cmp    ebx,0xf
c001b3dd:	76 10                	jbe    c001b3ef <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b3df:	83 ec 0c             	sub    esp,0xc
c001b3e2:	68 0f 33 02 c0       	push   0xc002330f
c001b3e7:	e8 53 62 ff ff       	call   c001163f <KePanic(char const*)>
c001b3ec:	83 c4 10             	add    esp,0x10
c001b3ef:	8d 04 36             	lea    eax,[esi+esi*1]
c001b3f2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3f7:	83 c8 f0             	or     eax,0xfffffff0
c001b3fa:	ee                   	out    dx,al
c001b3fb:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b400:	89 e8                	mov    eax,ebp
c001b402:	ee                   	out    dx,al
c001b403:	89 f9                	mov    ecx,edi
c001b405:	89 d8                	mov    eax,ebx
c001b407:	0f b6 d9             	movzx  ebx,cl
c001b40a:	83 c4 0c             	add    esp,0xc
c001b40d:	c1 e0 08             	shl    eax,0x8
c001b410:	83 e3 fc             	and    ebx,0xfffffffc
c001b413:	09 d8                	or     eax,ebx
c001b415:	5b                   	pop    ebx
c001b416:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b41b:	5e                   	pop    esi
c001b41c:	5f                   	pop    edi
c001b41d:	5d                   	pop    ebp
c001b41e:	c3                   	ret    
c001b41f:	90                   	nop

c001b420 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b420:	57                   	push   edi
c001b421:	56                   	push   esi
c001b422:	53                   	push   ebx
c001b423:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b427:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b42b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b42f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b433:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b439:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b43d:	83 ff 01             	cmp    edi,0x1
c001b440:	75 3f                	jne    c001b481 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b442:	89 de                	mov    esi,ebx
c001b444:	0f b6 c0             	movzx  eax,al
c001b447:	c1 e0 10             	shl    eax,0x10
c001b44a:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b450:	0f b6 c9             	movzx  ecx,cl
c001b453:	09 f0                	or     eax,esi
c001b455:	c1 e1 08             	shl    ecx,0x8
c001b458:	0f b6 d2             	movzx  edx,dl
c001b45b:	c1 e2 0b             	shl    edx,0xb
c001b45e:	09 c8                	or     eax,ecx
c001b460:	09 d0                	or     eax,edx
c001b462:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b467:	0d 00 00 00 80       	or     eax,0x80000000
c001b46c:	ef                   	out    dx,eax
c001b46d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b472:	ed                   	in     eax,dx
c001b473:	83 e3 02             	and    ebx,0x2
c001b476:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b47d:	d3 e8                	shr    eax,cl
c001b47f:	eb 44                	jmp    c001b4c5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b481:	83 ff 02             	cmp    edi,0x2
c001b484:	75 2d                	jne    c001b4b3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b486:	83 ec 0c             	sub    esp,0xc
c001b489:	0f b6 fb             	movzx  edi,bl
c001b48c:	57                   	push   edi
c001b48d:	0f b6 c9             	movzx  ecx,cl
c001b490:	51                   	push   ecx
c001b491:	0f b6 d2             	movzx  edx,dl
c001b494:	52                   	push   edx
c001b495:	0f b6 c0             	movzx  eax,al
c001b498:	50                   	push   eax
c001b499:	56                   	push   esi
c001b49a:	e8 0b ff ff ff       	call   c001b3aa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b49f:	89 c2                	mov    edx,eax
c001b4a1:	ed                   	in     eax,dx
c001b4a2:	83 e3 02             	and    ebx,0x2
c001b4a5:	83 c4 20             	add    esp,0x20
c001b4a8:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b4af:	d3 e8                	shr    eax,cl
c001b4b1:	eb 12                	jmp    c001b4c5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b4b3:	83 ec 0c             	sub    esp,0xc
c001b4b6:	68 3f 33 02 c0       	push   0xc002333f
c001b4bb:	e8 7f 61 ff ff       	call   c001163f <KePanic(char const*)>
c001b4c0:	83 c4 10             	add    esp,0x10
c001b4c3:	31 c0                	xor    eax,eax
c001b4c5:	5b                   	pop    ebx
c001b4c6:	5e                   	pop    esi
c001b4c7:	5f                   	pop    edi
c001b4c8:	c3                   	ret    
c001b4c9:	90                   	nop

c001b4ca <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b4ca:	83 ec 18             	sub    esp,0x18
c001b4cd:	6a 00                	push   0x0
c001b4cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4d4:	50                   	push   eax
c001b4d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4da:	50                   	push   eax
c001b4db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4e0:	50                   	push   eax
c001b4e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4e5:	e8 36 ff ff ff       	call   c001b420 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4ea:	83 c4 2c             	add    esp,0x2c
c001b4ed:	c3                   	ret    

c001b4ee <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b4ee:	83 ec 18             	sub    esp,0x18
c001b4f1:	6a 0e                	push   0xe
c001b4f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f8:	50                   	push   eax
c001b4f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4fe:	50                   	push   eax
c001b4ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b504:	50                   	push   eax
c001b505:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b509:	e8 12 ff ff ff       	call   c001b420 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b50e:	83 c4 2c             	add    esp,0x2c
c001b511:	0f b6 c0             	movzx  eax,al
c001b514:	c3                   	ret    
c001b515:	90                   	nop

c001b516 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b516:	55                   	push   ebp
c001b517:	57                   	push   edi
c001b518:	56                   	push   esi
c001b519:	53                   	push   ebx
c001b51a:	83 ec 18             	sub    esp,0x18
c001b51d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b522:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b527:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b52c:	6a 0a                	push   0xa
c001b52e:	56                   	push   esi
c001b52f:	55                   	push   ebp
c001b530:	57                   	push   edi
c001b531:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b535:	e8 e6 fe ff ff       	call   c001b420 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b53a:	83 c4 14             	add    esp,0x14
c001b53d:	6a 0a                	push   0xa
c001b53f:	56                   	push   esi
c001b540:	55                   	push   ebp
c001b541:	57                   	push   edi
c001b542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b546:	89 c3                	mov    ebx,eax
c001b548:	0f b6 db             	movzx  ebx,bl
c001b54b:	e8 d0 fe ff ff       	call   c001b420 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b550:	83 c4 2c             	add    esp,0x2c
c001b553:	25 00 ff 00 00       	and    eax,0xff00
c001b558:	09 d8                	or     eax,ebx
c001b55a:	5b                   	pop    ebx
c001b55b:	5e                   	pop    esi
c001b55c:	5f                   	pop    edi
c001b55d:	5d                   	pop    ebp
c001b55e:	c3                   	ret    
c001b55f:	90                   	nop

c001b560 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b560:	83 ec 18             	sub    esp,0x18
c001b563:	6a 08                	push   0x8
c001b565:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b56a:	50                   	push   eax
c001b56b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b570:	50                   	push   eax
c001b571:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b576:	50                   	push   eax
c001b577:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b57b:	e8 a0 fe ff ff       	call   c001b420 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b580:	83 c4 2c             	add    esp,0x2c
c001b583:	0f b6 c4             	movzx  eax,ah
c001b586:	c3                   	ret    
c001b587:	90                   	nop

c001b588 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b588:	83 ec 18             	sub    esp,0x18
c001b58b:	6a 08                	push   0x8
c001b58d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b592:	50                   	push   eax
c001b593:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b598:	50                   	push   eax
c001b599:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b59e:	50                   	push   eax
c001b59f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5a3:	e8 78 fe ff ff       	call   c001b420 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5a8:	83 c4 2c             	add    esp,0x2c
c001b5ab:	c3                   	ret    

c001b5ac <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b5ac:	83 ec 18             	sub    esp,0x18
c001b5af:	6a 3c                	push   0x3c
c001b5b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5b6:	50                   	push   eax
c001b5b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5bc:	50                   	push   eax
c001b5bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5c2:	50                   	push   eax
c001b5c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5c7:	e8 54 fe ff ff       	call   c001b420 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5cc:	83 c4 2c             	add    esp,0x2c
c001b5cf:	c3                   	ret    

c001b5d0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b5d0:	83 ec 18             	sub    esp,0x18
c001b5d3:	6a 18                	push   0x18
c001b5d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5da:	50                   	push   eax
c001b5db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5e0:	50                   	push   eax
c001b5e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5e6:	50                   	push   eax
c001b5e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5eb:	e8 30 fe ff ff       	call   c001b420 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5f0:	83 c4 2c             	add    esp,0x2c
c001b5f3:	0f b6 c4             	movzx  eax,ah
c001b5f6:	c3                   	ret    
c001b5f7:	90                   	nop

c001b5f8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b5f8:	55                   	push   ebp
c001b5f9:	57                   	push   edi
c001b5fa:	56                   	push   esi
c001b5fb:	53                   	push   ebx
c001b5fc:	83 ec 28             	sub    esp,0x28
c001b5ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b603:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b608:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b60d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b612:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b619:	8d 43 12             	lea    eax,[ebx+0x12]
c001b61c:	83 c3 10             	add    ebx,0x10
c001b61f:	0f b6 c0             	movzx  eax,al
c001b622:	0f b6 db             	movzx  ebx,bl
c001b625:	50                   	push   eax
c001b626:	51                   	push   ecx
c001b627:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b62b:	57                   	push   edi
c001b62c:	55                   	push   ebp
c001b62d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b631:	e8 ea fd ff ff       	call   c001b420 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b636:	83 c4 14             	add    esp,0x14
c001b639:	53                   	push   ebx
c001b63a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b63e:	51                   	push   ecx
c001b63f:	89 c6                	mov    esi,eax
c001b641:	57                   	push   edi
c001b642:	55                   	push   ebp
c001b643:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b647:	c1 e6 10             	shl    esi,0x10
c001b64a:	e8 d1 fd ff ff       	call   c001b420 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b64f:	83 c4 3c             	add    esp,0x3c
c001b652:	5b                   	pop    ebx
c001b653:	0f b7 c0             	movzx  eax,ax
c001b656:	09 f0                	or     eax,esi
c001b658:	5e                   	pop    esi
c001b659:	5f                   	pop    edi
c001b65a:	5d                   	pop    ebp
c001b65b:	c3                   	ret    

c001b65c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b65c:	55                   	push   ebp
c001b65d:	57                   	push   edi
c001b65e:	56                   	push   esi
c001b65f:	53                   	push   ebx
c001b660:	83 ec 0c             	sub    esp,0xc
c001b663:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b667:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b66b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b66f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b673:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b679:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b67d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b681:	83 f9 01             	cmp    ecx,0x1
c001b684:	75 5d                	jne    c001b6e3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b686:	0f b6 c8             	movzx  ecx,al
c001b689:	89 f0                	mov    eax,esi
c001b68b:	25 fc 00 00 00       	and    eax,0xfc
c001b690:	0f b6 d2             	movzx  edx,dl
c001b693:	c1 e1 10             	shl    ecx,0x10
c001b696:	c1 e2 0b             	shl    edx,0xb
c001b699:	09 c1                	or     ecx,eax
c001b69b:	89 f8                	mov    eax,edi
c001b69d:	0f b6 f8             	movzx  edi,al
c001b6a0:	c1 e7 08             	shl    edi,0x8
c001b6a3:	09 f9                	or     ecx,edi
c001b6a5:	09 d1                	or     ecx,edx
c001b6a7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b6ac:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b6b2:	89 c8                	mov    eax,ecx
c001b6b4:	ef                   	out    dx,eax
c001b6b5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b6ba:	ed                   	in     eax,dx
c001b6bb:	83 e6 02             	and    esi,0x2
c001b6be:	0f b7 db             	movzx  ebx,bx
c001b6c1:	74 0a                	je     c001b6cd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b6c3:	c1 e3 10             	shl    ebx,0x10
c001b6c6:	0f b7 d0             	movzx  edx,ax
c001b6c9:	09 d3                	or     ebx,edx
c001b6cb:	eb 05                	jmp    c001b6d2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b6cd:	66 31 c0             	xor    ax,ax
c001b6d0:	09 c3                	or     ebx,eax
c001b6d2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b6d7:	89 c8                	mov    eax,ecx
c001b6d9:	ef                   	out    dx,eax
c001b6da:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b6df:	89 d8                	mov    eax,ebx
c001b6e1:	eb 41                	jmp    c001b724 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b6e3:	83 f9 02             	cmp    ecx,0x2
c001b6e6:	75 45                	jne    c001b72d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b6e8:	89 f1                	mov    ecx,esi
c001b6ea:	83 ec 0c             	sub    esp,0xc
c001b6ed:	0f b6 f1             	movzx  esi,cl
c001b6f0:	89 f9                	mov    ecx,edi
c001b6f2:	56                   	push   esi
c001b6f3:	0f b6 f9             	movzx  edi,cl
c001b6f6:	57                   	push   edi
c001b6f7:	0f b6 d2             	movzx  edx,dl
c001b6fa:	52                   	push   edx
c001b6fb:	0f b6 c0             	movzx  eax,al
c001b6fe:	50                   	push   eax
c001b6ff:	55                   	push   ebp
c001b700:	e8 a5 fc ff ff       	call   c001b3aa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b705:	89 c2                	mov    edx,eax
c001b707:	ed                   	in     eax,dx
c001b708:	83 c4 20             	add    esp,0x20
c001b70b:	f6 c2 02             	test   dl,0x2
c001b70e:	0f b7 db             	movzx  ebx,bx
c001b711:	74 0c                	je     c001b71f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b713:	0f b7 c8             	movzx  ecx,ax
c001b716:	89 d8                	mov    eax,ebx
c001b718:	c1 e0 10             	shl    eax,0x10
c001b71b:	09 c8                	or     eax,ecx
c001b71d:	eb 05                	jmp    c001b724 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b71f:	66 31 c0             	xor    ax,ax
c001b722:	09 d8                	or     eax,ebx
c001b724:	ef                   	out    dx,eax
c001b725:	83 c4 0c             	add    esp,0xc
c001b728:	5b                   	pop    ebx
c001b729:	5e                   	pop    esi
c001b72a:	5f                   	pop    edi
c001b72b:	5d                   	pop    ebp
c001b72c:	c3                   	ret    
c001b72d:	c7 44 24 20 3f 33 02 c0 	mov    DWORD PTR [esp+0x20],0xc002333f
c001b735:	83 c4 0c             	add    esp,0xc
c001b738:	5b                   	pop    ebx
c001b739:	5e                   	pop    esi
c001b73a:	5f                   	pop    edi
c001b73b:	5d                   	pop    ebp
c001b73c:	e9 fe 5e ff ff       	jmp    c001163f <KePanic(char const*)>
c001b741:	90                   	nop

c001b742 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b742:	55                   	push   ebp
c001b743:	57                   	push   edi
c001b744:	56                   	push   esi
c001b745:	53                   	push   ebx
c001b746:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b74c:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b753:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b75a:	0f 85 bd 00 00 00    	jne    c001b81d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b760:	83 ec 0c             	sub    esp,0xc
c001b763:	68 14 01 00 00       	push   0x114
c001b768:	e8 c6 c3 fe ff       	call   c0007b33 <malloc>
c001b76d:	83 c4 0c             	add    esp,0xc
c001b770:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b776:	68 45 33 02 c0       	push   0xc0023345
c001b77b:	50                   	push   eax
c001b77c:	89 c3                	mov    ebx,eax
c001b77e:	e8 ff 03 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c001b783:	83 c4 10             	add    esp,0x10
c001b786:	85 db                	test   ebx,ebx
c001b788:	0f 84 6b 02 00 00    	je     c001b9f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b78e:	57                   	push   edi
c001b78f:	57                   	push   edi
c001b790:	6a 01                	push   0x1
c001b792:	53                   	push   ebx
c001b793:	e8 08 04 ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c001b798:	83 c4 10             	add    esp,0x10
c001b79b:	85 c0                	test   eax,eax
c001b79d:	0f 85 56 02 00 00    	jne    c001b9f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b7a3:	52                   	push   edx
c001b7a4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b7a8:	50                   	push   eax
c001b7a9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b7ad:	50                   	push   eax
c001b7ae:	53                   	push   ebx
c001b7af:	e8 ee 06 ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c001b7b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b7b8:	40                   	inc    eax
c001b7b9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7bc:	e8 72 c3 fe ff       	call   c0007b33 <malloc>
c001b7c1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b7c5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b7c9:	59                   	pop    ecx
c001b7ca:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b7cf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7d1:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b7d5:	51                   	push   ecx
c001b7d6:	50                   	push   eax
c001b7d7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b7db:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b7df:	53                   	push   ebx
c001b7e0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7e3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b7e7:	83 c4 20             	add    esp,0x20
c001b7ea:	89 c8                	mov    eax,ecx
c001b7ec:	99                   	cdq    
c001b7ed:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b7f1:	0f 85 02 02 00 00    	jne    c001b9f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b7f7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b7fb:	0f 85 f8 01 00 00    	jne    c001b9f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b801:	83 ec 0c             	sub    esp,0xc
c001b804:	53                   	push   ebx
c001b805:	e8 f4 03 ff ff       	call   c000bbfe <File::close()>
c001b80a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b80e:	83 c4 10             	add    esp,0x10
c001b811:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b818:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b81d:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b825:	31 c9                	xor    ecx,ecx
c001b827:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b82e:	8b 2d a4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0a4
c001b834:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b83b:	8b 15 a8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a8
c001b841:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b846:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b84e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b853:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b85b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b85f:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b867:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b86b:	39 cd                	cmp    ebp,ecx
c001b86d:	0f 8e 86 01 00 00    	jle    c001b9f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b873:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b876:	d4 40                	aam    0x40
c001b878:	d5 39                	aad    0x39
c001b87a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b87e:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b882:	d4 40                	aam    0x40
c001b884:	d5 39                	aad    0x39
c001b886:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b88a:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b88e:	d4 40                	aam    0x40
c001b890:	d5 39                	aad    0x39
c001b892:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b896:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b89a:	d4 40                	aam    0x40
c001b89c:	d5 39                	aad    0x39
c001b89e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b8a2:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b8a6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b8aa:	3c 56                	cmp    al,0x56
c001b8ac:	74 47                	je     c001b8f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b8ae:	d4 40                	aam    0x40
c001b8b0:	d5 39                	aad    0x39
c001b8b2:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b8b5:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b8b9:	0f b6 db             	movzx  ebx,bl
c001b8bc:	c1 e3 04             	shl    ebx,0x4
c001b8bf:	d4 40                	aam    0x40
c001b8c1:	d5 39                	aad    0x39
c001b8c3:	83 e8 30             	sub    eax,0x30
c001b8c6:	0f b6 c0             	movzx  eax,al
c001b8c9:	09 c3                	or     ebx,eax
c001b8cb:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b8cf:	c1 e3 04             	shl    ebx,0x4
c001b8d2:	d4 40                	aam    0x40
c001b8d4:	d5 39                	aad    0x39
c001b8d6:	83 e8 30             	sub    eax,0x30
c001b8d9:	0f b6 c0             	movzx  eax,al
c001b8dc:	09 c3                	or     ebx,eax
c001b8de:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b8e2:	c1 e3 04             	shl    ebx,0x4
c001b8e5:	d4 40                	aam    0x40
c001b8e7:	d5 39                	aad    0x39
c001b8e9:	83 e8 30             	sub    eax,0x30
c001b8ec:	0f b6 c0             	movzx  eax,al
c001b8ef:	09 c3                	or     ebx,eax
c001b8f1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b8f5:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b8f9:	80 fb 58             	cmp    bl,0x58
c001b8fc:	74 49                	je     c001b947 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b8fe:	88 d8                	mov    al,bl
c001b900:	d4 40                	aam    0x40
c001b902:	d5 39                	aad    0x39
c001b904:	83 e8 30             	sub    eax,0x30
c001b907:	0f b6 f8             	movzx  edi,al
c001b90a:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b90e:	c1 e7 04             	shl    edi,0x4
c001b911:	d4 40                	aam    0x40
c001b913:	d5 39                	aad    0x39
c001b915:	83 e8 30             	sub    eax,0x30
c001b918:	0f b6 c0             	movzx  eax,al
c001b91b:	09 c7                	or     edi,eax
c001b91d:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b921:	c1 e7 04             	shl    edi,0x4
c001b924:	d4 40                	aam    0x40
c001b926:	d5 39                	aad    0x39
c001b928:	83 e8 30             	sub    eax,0x30
c001b92b:	0f b6 c0             	movzx  eax,al
c001b92e:	09 c7                	or     edi,eax
c001b930:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b934:	c1 e7 04             	shl    edi,0x4
c001b937:	d4 40                	aam    0x40
c001b939:	d5 39                	aad    0x39
c001b93b:	83 e8 30             	sub    eax,0x30
c001b93e:	0f b6 c0             	movzx  eax,al
c001b941:	09 c7                	or     edi,eax
c001b943:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b947:	8d 41 10             	lea    eax,[ecx+0x10]
c001b94a:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b94e:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b952:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b956:	83 f9 0a             	cmp    ecx,0xa
c001b959:	74 07                	je     c001b962 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b95b:	47                   	inc    edi
c001b95c:	39 c5                	cmp    ebp,eax
c001b95e:	75 16                	jne    c001b976 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b960:	89 e8                	mov    eax,ebp
c001b962:	83 f9 0a             	cmp    ecx,0xa
c001b965:	0f 94 c1             	sete   cl
c001b968:	0f b6 c9             	movzx  ecx,cl
c001b96b:	01 c1                	add    ecx,eax
c001b96d:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b972:	75 0f                	jne    c001b983 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b974:	eb 1c                	jmp    c001b992 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b976:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b979:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b97d:	40                   	inc    eax
c001b97e:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b981:	eb cb                	jmp    c001b94e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b983:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b987:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b98c:	0f 85 d9 fe ff ff    	jne    c001b86b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b992:	80 fb 58             	cmp    bl,0x58
c001b995:	74 10                	je     c001b9a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b997:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b99c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b9a1:	0f 85 c4 fe ff ff    	jne    c001b86b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b9a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b9af:	83 e8 30             	sub    eax,0x30
c001b9b2:	c1 e0 04             	shl    eax,0x4
c001b9b5:	83 eb 30             	sub    ebx,0x30
c001b9b8:	09 d8                	or     eax,ebx
c001b9ba:	0f b6 c0             	movzx  eax,al
c001b9bd:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b9c1:	0f 85 a4 fe ff ff    	jne    c001b86b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b9c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9cb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b9cf:	83 e8 30             	sub    eax,0x30
c001b9d2:	c1 e0 04             	shl    eax,0x4
c001b9d5:	83 eb 30             	sub    ebx,0x30
c001b9d8:	09 d8                	or     eax,ebx
c001b9da:	0f b6 c0             	movzx  eax,al
c001b9dd:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b9e1:	0f 85 84 fe ff ff    	jne    c001b86b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b9e7:	50                   	push   eax
c001b9e8:	50                   	push   eax
c001b9e9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b9ed:	50                   	push   eax
c001b9ee:	56                   	push   esi
c001b9ef:	e8 5c 4c fe ff       	call   c0000650 <strcpy>
c001b9f4:	83 c4 10             	add    esp,0x10
c001b9f7:	eb 05                	jmp    c001b9fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b9f9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9fc:	31 f6                	xor    esi,esi
c001b9fe:	81 c4 4c 01 00 00    	add    esp,0x14c
c001ba04:	89 f0                	mov    eax,esi
c001ba06:	5b                   	pop    ebx
c001ba07:	5e                   	pop    esi
c001ba08:	5f                   	pop    edi
c001ba09:	5d                   	pop    ebp
c001ba0a:	c3                   	ret    
c001ba0b:	90                   	nop

c001ba0c <PCI::checkBus(unsigned char)>:
c001ba0c:	56                   	push   esi
c001ba0d:	53                   	push   ebx
c001ba0e:	31 db                	xor    ebx,ebx
c001ba10:	51                   	push   ecx
c001ba11:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ba16:	52                   	push   edx
c001ba17:	53                   	push   ebx
c001ba18:	43                   	inc    ebx
c001ba19:	56                   	push   esi
c001ba1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba1e:	e8 0f 03 00 00       	call   c001bd32 <PCI::checkDevice(unsigned char, unsigned char)>
c001ba23:	83 c4 10             	add    esp,0x10
c001ba26:	83 fb 20             	cmp    ebx,0x20
c001ba29:	75 eb                	jne    c001ba16 <PCI::checkBus(unsigned char)+0xa>
c001ba2b:	58                   	pop    eax
c001ba2c:	5b                   	pop    ebx
c001ba2d:	5e                   	pop    esi
c001ba2e:	c3                   	ret    
c001ba2f:	90                   	nop

c001ba30 <PCI::foundDevice(PCIDeviceInfo)>:
c001ba30:	55                   	push   ebp
c001ba31:	57                   	push   edi
c001ba32:	56                   	push   esi
c001ba33:	53                   	push   ebx
c001ba34:	83 ec 1c             	sub    esp,0x1c
c001ba37:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001ba3c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba40:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba45:	0f 84 63 01 00 00    	je     c001bbae <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001ba4b:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001ba50:	66 3d 06 04          	cmp    ax,0x406
c001ba54:	75 2c                	jne    c001ba82 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001ba56:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001ba5b:	50                   	push   eax
c001ba5c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001ba61:	50                   	push   eax
c001ba62:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001ba67:	50                   	push   eax
c001ba68:	53                   	push   ebx
c001ba69:	e8 62 fb ff ff       	call   c001b5d0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ba6e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ba72:	0f b6 c0             	movzx  eax,al
c001ba75:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ba79:	83 c4 2c             	add    esp,0x2c
c001ba7c:	5b                   	pop    ebx
c001ba7d:	5e                   	pop    esi
c001ba7e:	5f                   	pop    edi
c001ba7f:	5d                   	pop    ebp
c001ba80:	eb 8a                	jmp    c001ba0c <PCI::checkBus(unsigned char)>
c001ba82:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001ba87:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001ba8d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ba91:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ba95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ba99:	85 d2                	test   edx,edx
c001ba9b:	74 34                	je     c001bad1 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001ba9d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001baa0:	85 c9                	test   ecx,ecx
c001baa2:	74 29                	je     c001bacd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001baa4:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001baaa:	31 f5                	xor    ebp,esi
c001baac:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001bab2:	75 19                	jne    c001bacd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001bab4:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001baba:	75 11                	jne    c001bacd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001babc:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001bac3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001bac7:	0f 84 e1 00 00 00    	je     c001bbae <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001bacd:	8b 12                	mov    edx,DWORD PTR [edx]
c001bacf:	eb c8                	jmp    c001ba99 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001bad1:	3d 01 06 00 00       	cmp    eax,0x601
c001bad6:	75 19                	jne    c001baf1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001bad8:	83 ec 0c             	sub    esp,0xc
c001badb:	68 64 01 00 00       	push   0x164
c001bae0:	e8 4e c0 fe ff       	call   c0007b33 <malloc>
c001bae5:	89 04 24             	mov    DWORD PTR [esp],eax
c001bae8:	89 c5                	mov    ebp,eax
c001baea:	e8 ab 0e 00 00       	call   c001c99a <SATABus::SATABus()>
c001baef:	eb 1e                	jmp    c001bb0f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001baf1:	3d 01 01 00 00       	cmp    eax,0x101
c001baf6:	75 62                	jne    c001bb5a <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001baf8:	83 ec 0c             	sub    esp,0xc
c001bafb:	68 70 02 00 00       	push   0x270
c001bb00:	e8 2e c0 fe ff       	call   c0007b33 <malloc>
c001bb05:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb08:	89 c5                	mov    ebp,eax
c001bb0a:	e8 f3 02 00 00       	call   c001be02 <IDE::IDE()>
c001bb0f:	58                   	pop    eax
c001bb10:	5a                   	pop    edx
c001bb11:	55                   	push   ebp
c001bb12:	53                   	push   ebx
c001bb13:	e8 e8 0e ff ff       	call   c000ca00 <Device::addChild(Device*)>
c001bb18:	83 ec 1c             	sub    esp,0x1c
c001bb1b:	b9 09 00 00 00       	mov    ecx,0x9
c001bb20:	fc                   	cld    
c001bb21:	8d 74 24 60          	lea    esi,[esp+0x60]
c001bb25:	89 e7                	mov    edi,esp
c001bb27:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb29:	55                   	push   ebp
c001bb2a:	e8 17 0e ff ff       	call   c000c946 <Device::preOpenPCI(PCIDeviceInfo)>
c001bb2f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bb32:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bb36:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bb3e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bb46:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bb4e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001bb51:	83 c4 4c             	add    esp,0x4c
c001bb54:	5b                   	pop    ebx
c001bb55:	5e                   	pop    esi
c001bb56:	5f                   	pop    edi
c001bb57:	5d                   	pop    ebp
c001bb58:	ff e0                	jmp    eax
c001bb5a:	83 ec 0c             	sub    esp,0xc
c001bb5d:	68 58 01 00 00       	push   0x158
c001bb62:	e8 cc bf fe ff       	call   c0007b33 <malloc>
c001bb67:	5a                   	pop    edx
c001bb68:	59                   	pop    ecx
c001bb69:	68 5e 33 02 c0       	push   0xc002335e
c001bb6e:	50                   	push   eax
c001bb6f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bb73:	e8 26 11 ff ff       	call   c000cc9e <DriverlessDevice::DriverlessDevice(char const*)>
c001bb78:	5e                   	pop    esi
c001bb79:	5f                   	pop    edi
c001bb7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb7e:	50                   	push   eax
c001bb7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb83:	53                   	push   ebx
c001bb84:	e8 77 0e ff ff       	call   c000ca00 <Device::addChild(Device*)>
c001bb89:	83 c4 10             	add    esp,0x10
c001bb8c:	b9 09 00 00 00       	mov    ecx,0x9
c001bb91:	fc                   	cld    
c001bb92:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bb96:	89 fe                	mov    esi,edi
c001bb98:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bba2:	83 c4 1c             	add    esp,0x1c
c001bba5:	5b                   	pop    ebx
c001bba6:	5e                   	pop    esi
c001bba7:	5f                   	pop    edi
c001bba8:	5d                   	pop    ebp
c001bba9:	e9 98 0d ff ff       	jmp    c000c946 <Device::preOpenPCI(PCIDeviceInfo)>
c001bbae:	83 c4 1c             	add    esp,0x1c
c001bbb1:	5b                   	pop    ebx
c001bbb2:	5e                   	pop    esi
c001bbb3:	5f                   	pop    edi
c001bbb4:	5d                   	pop    ebp
c001bbb5:	c3                   	ret    

c001bbb6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bbb6:	55                   	push   ebp
c001bbb7:	57                   	push   edi
c001bbb8:	56                   	push   esi
c001bbb9:	53                   	push   ebx
c001bbba:	83 ec 68             	sub    esp,0x68
c001bbbd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bbc4:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bbc8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bbcc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bbd3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bbd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bbdc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bbe3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bbe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bbec:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bbf1:	6a 0c                	push   0xc
c001bbf3:	57                   	push   edi
c001bbf4:	53                   	push   ebx
c001bbf5:	56                   	push   esi
c001bbf6:	55                   	push   ebp
c001bbf7:	e8 24 f8 ff ff       	call   c001b420 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbfc:	83 c4 20             	add    esp,0x20
c001bbff:	57                   	push   edi
c001bc00:	53                   	push   ebx
c001bc01:	56                   	push   esi
c001bc02:	55                   	push   ebp
c001bc03:	e8 0e f9 ff ff       	call   c001b516 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bc08:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bc0d:	57                   	push   edi
c001bc0e:	53                   	push   ebx
c001bc0f:	56                   	push   esi
c001bc10:	55                   	push   ebp
c001bc11:	e8 96 f9 ff ff       	call   c001b5ac <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bc16:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bc1a:	83 c4 14             	add    esp,0x14
c001bc1d:	6a 3c                	push   0x3c
c001bc1f:	57                   	push   edi
c001bc20:	53                   	push   ebx
c001bc21:	56                   	push   esi
c001bc22:	55                   	push   ebp
c001bc23:	e8 f8 f7 ff ff       	call   c001b420 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc28:	0f b6 c4             	movzx  eax,ah
c001bc2b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bc2f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bc33:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bc37:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bc3c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bc42:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bc48:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bc4c:	83 c4 20             	add    esp,0x20
c001bc4f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bc54:	74 30                	je     c001bc86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc56:	31 c0                	xor    eax,eax
c001bc58:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bc5c:	7e 28                	jle    c001bc86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc5e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bc66:	39 cb                	cmp    ebx,ecx
c001bc68:	75 19                	jne    c001bc83 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc6a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bc72:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bc76:	75 0b                	jne    c001bc83 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc78:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bc7f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bc83:	40                   	inc    eax
c001bc84:	eb d2                	jmp    c001bc58 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bc86:	31 d2                	xor    edx,edx
c001bc88:	83 ec 0c             	sub    esp,0xc
c001bc8b:	57                   	push   edi
c001bc8c:	53                   	push   ebx
c001bc8d:	56                   	push   esi
c001bc8e:	52                   	push   edx
c001bc8f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bc93:	55                   	push   ebp
c001bc94:	e8 5f f9 ff ff       	call   c001b5f8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc99:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bc9d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bca1:	42                   	inc    edx
c001bca2:	83 c4 20             	add    esp,0x20
c001bca5:	83 fa 06             	cmp    edx,0x6
c001bca8:	75 de                	jne    c001bc88 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bcaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bcae:	83 ec 0c             	sub    esp,0xc
c001bcb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bcb5:	c1 e2 08             	shl    edx,0x8
c001bcb8:	0f b6 c4             	movzx  eax,ah
c001bcbb:	09 d0                	or     eax,edx
c001bcbd:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bcc2:	6a 02                	push   0x2
c001bcc4:	57                   	push   edi
c001bcc5:	53                   	push   ebx
c001bcc6:	56                   	push   esi
c001bcc7:	55                   	push   ebp
c001bcc8:	e8 53 f7 ff ff       	call   c001b420 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bccd:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bcd2:	83 c4 20             	add    esp,0x20
c001bcd5:	57                   	push   edi
c001bcd6:	53                   	push   ebx
c001bcd7:	56                   	push   esi
c001bcd8:	55                   	push   ebp
c001bcd9:	e8 82 f8 ff ff       	call   c001b560 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bcde:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bce2:	57                   	push   edi
c001bce3:	53                   	push   ebx
c001bce4:	56                   	push   esi
c001bce5:	55                   	push   ebp
c001bce6:	e8 df f7 ff ff       	call   c001b4ca <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bceb:	b9 09 00 00 00       	mov    ecx,0x9
c001bcf0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bcf5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bcf9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bcfd:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bd01:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bd05:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bd09:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bd0d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bd11:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bd15:	83 ec 0c             	sub    esp,0xc
c001bd18:	fc                   	cld    
c001bd19:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bd1d:	89 e7                	mov    edi,esp
c001bd1f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bd21:	55                   	push   ebp
c001bd22:	e8 09 fd ff ff       	call   c001ba30 <PCI::foundDevice(PCIDeviceInfo)>
c001bd27:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bd2d:	5b                   	pop    ebx
c001bd2e:	5e                   	pop    esi
c001bd2f:	5f                   	pop    edi
c001bd30:	5d                   	pop    ebp
c001bd31:	c3                   	ret    

c001bd32 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bd32:	55                   	push   ebp
c001bd33:	57                   	push   edi
c001bd34:	56                   	push   esi
c001bd35:	53                   	push   ebx
c001bd36:	83 ec 0c             	sub    esp,0xc
c001bd39:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bd3e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bd43:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bd47:	6a 00                	push   0x0
c001bd49:	56                   	push   esi
c001bd4a:	57                   	push   edi
c001bd4b:	55                   	push   ebp
c001bd4c:	e8 79 f7 ff ff       	call   c001b4ca <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd51:	6a 00                	push   0x0
c001bd53:	56                   	push   esi
c001bd54:	57                   	push   edi
c001bd55:	55                   	push   ebp
c001bd56:	e8 5b fe ff ff       	call   c001bbb6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd5b:	83 c4 20             	add    esp,0x20
c001bd5e:	6a 00                	push   0x0
c001bd60:	56                   	push   esi
c001bd61:	57                   	push   edi
c001bd62:	55                   	push   ebp
c001bd63:	e8 86 f7 ff ff       	call   c001b4ee <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd68:	83 c4 10             	add    esp,0x10
c001bd6b:	a8 80                	test   al,0x80
c001bd6d:	74 2d                	je     c001bd9c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bd6f:	bb 01 00 00 00       	mov    ebx,0x1
c001bd74:	53                   	push   ebx
c001bd75:	56                   	push   esi
c001bd76:	57                   	push   edi
c001bd77:	55                   	push   ebp
c001bd78:	e8 4d f7 ff ff       	call   c001b4ca <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd7d:	83 c4 10             	add    esp,0x10
c001bd80:	0f b7 c0             	movzx  eax,ax
c001bd83:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd88:	74 0c                	je     c001bd96 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bd8a:	53                   	push   ebx
c001bd8b:	56                   	push   esi
c001bd8c:	57                   	push   edi
c001bd8d:	55                   	push   ebp
c001bd8e:	e8 23 fe ff ff       	call   c001bbb6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd93:	83 c4 10             	add    esp,0x10
c001bd96:	43                   	inc    ebx
c001bd97:	83 fb 08             	cmp    ebx,0x8
c001bd9a:	75 d8                	jne    c001bd74 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bd9c:	83 c4 0c             	add    esp,0xc
c001bd9f:	5b                   	pop    ebx
c001bda0:	5e                   	pop    esi
c001bda1:	5f                   	pop    edi
c001bda2:	5d                   	pop    ebp
c001bda3:	c3                   	ret    

c001bda4 <PCI::detect()>:
c001bda4:	56                   	push   esi
c001bda5:	53                   	push   ebx
c001bda6:	53                   	push   ebx
c001bda7:	31 db                	xor    ebx,ebx
c001bda9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bdad:	6a 00                	push   0x0
c001bdaf:	6a 00                	push   0x0
c001bdb1:	6a 00                	push   0x0
c001bdb3:	56                   	push   esi
c001bdb4:	e8 35 f7 ff ff       	call   c001b4ee <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bdb9:	83 c4 10             	add    esp,0x10
c001bdbc:	a8 80                	test   al,0x80
c001bdbe:	75 21                	jne    c001bde1 <PCI::detect()+0x3d>
c001bdc0:	51                   	push   ecx
c001bdc1:	51                   	push   ecx
c001bdc2:	6a 00                	push   0x0
c001bdc4:	56                   	push   esi
c001bdc5:	e8 42 fc ff ff       	call   c001ba0c <PCI::checkBus(unsigned char)>
c001bdca:	83 c4 10             	add    esp,0x10
c001bdcd:	eb 2a                	jmp    c001bdf9 <PCI::detect()+0x55>
c001bdcf:	52                   	push   edx
c001bdd0:	52                   	push   edx
c001bdd1:	53                   	push   ebx
c001bdd2:	43                   	inc    ebx
c001bdd3:	56                   	push   esi
c001bdd4:	e8 33 fc ff ff       	call   c001ba0c <PCI::checkBus(unsigned char)>
c001bdd9:	83 c4 10             	add    esp,0x10
c001bddc:	83 fb 08             	cmp    ebx,0x8
c001bddf:	74 18                	je     c001bdf9 <PCI::detect()+0x55>
c001bde1:	53                   	push   ebx
c001bde2:	6a 00                	push   0x0
c001bde4:	6a 00                	push   0x0
c001bde6:	56                   	push   esi
c001bde7:	e8 de f6 ff ff       	call   c001b4ca <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bdec:	83 c4 10             	add    esp,0x10
c001bdef:	0f b7 c0             	movzx  eax,ax
c001bdf2:	3d ff ff 00 00       	cmp    eax,0xffff
c001bdf7:	74 d6                	je     c001bdcf <PCI::detect()+0x2b>
c001bdf9:	58                   	pop    eax
c001bdfa:	5b                   	pop    ebx
c001bdfb:	5e                   	pop    esi
c001bdfc:	c3                   	ret    
c001bdfd:	90                   	nop

c001bdfe <IDE::close(int, int, void*)>:
c001bdfe:	83 c8 ff             	or     eax,0xffffffff
c001be01:	c3                   	ret    

c001be02 <IDE::IDE()>:
c001be02:	83 ec 0c             	sub    esp,0xc
c001be05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be09:	83 ec 08             	sub    esp,0x8
c001be0c:	68 a4 33 02 c0       	push   0xc00233a4
c001be11:	50                   	push   eax
c001be12:	e8 2d 0f ff ff       	call   c000cd44 <HardDiskController::HardDiskController(char const*)>
c001be17:	83 c4 10             	add    esp,0x10
c001be1a:	ba 34 34 02 c0       	mov    edx,0xc0023434
c001be1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be23:	89 10                	mov    DWORD PTR [eax],edx
c001be25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be29:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001be30:	90                   	nop
c001be31:	83 c4 0c             	add    esp,0xc
c001be34:	c3                   	ret    
c001be35:	90                   	nop

c001be36 <IDE::prepareInterrupt(unsigned char)>:
c001be36:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be3b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be3f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001be47:	c3                   	ret    

c001be48 <selectDrive(unsigned char, unsigned char)>:
c001be48:	c3                   	ret    
c001be49:	90                   	nop

c001be4a <IDE::getBase(unsigned char)>:
c001be4a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001be4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be53:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001be5b:	c3                   	ret    

c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001be5c:	55                   	push   ebp
c001be5d:	57                   	push   edi
c001be5e:	56                   	push   esi
c001be5f:	53                   	push   ebx
c001be60:	83 ec 1c             	sub    esp,0x1c
c001be63:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be67:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001be6b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001be6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001be73:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001be76:	80 f9 03             	cmp    cl,0x3
c001be79:	77 4f                	ja     c001beca <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001be7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be7f:	0f b6 f2             	movzx  esi,dl
c001be82:	0f b6 db             	movzx  ebx,bl
c001be85:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001be88:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001be8d:	80 ca 80             	or     dl,0x80
c001be90:	52                   	push   edx
c001be91:	6a 0c                	push   0xc
c001be93:	56                   	push   esi
c001be94:	57                   	push   edi
c001be95:	e8 c2 ff ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be9a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001be9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bea3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bea7:	ee                   	out    dx,al
c001bea8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bead:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001beb1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001beb5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bebd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bec1:	83 c4 2c             	add    esp,0x2c
c001bec4:	5b                   	pop    ebx
c001bec5:	5e                   	pop    esi
c001bec6:	5f                   	pop    edi
c001bec7:	5d                   	pop    ebp
c001bec8:	eb 92                	jmp    c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001beca:	0f b6 cb             	movzx  ecx,bl
c001becd:	83 f9 07             	cmp    ecx,0x7
c001bed0:	77 12                	ja     c001bee4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bed2:	0f b6 d2             	movzx  edx,dl
c001bed5:	0f b6 db             	movzx  ebx,bl
c001bed8:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001bee0:	01 da                	add    edx,ebx
c001bee2:	eb 2f                	jmp    c001bf13 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bee4:	83 f9 0d             	cmp    ecx,0xd
c001bee7:	77 13                	ja     c001befc <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bee9:	0f b6 d2             	movzx  edx,dl
c001beec:	0f b6 db             	movzx  ebx,bl
c001beef:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bef6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001befa:	eb 17                	jmp    c001bf13 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001befc:	83 f9 15             	cmp    ecx,0x15
c001beff:	77 13                	ja     c001bf14 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bf01:	0f b6 d2             	movzx  edx,dl
c001bf04:	0f b6 db             	movzx  ebx,bl
c001bf07:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bf0f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bf13:	ee                   	out    dx,al
c001bf14:	83 c4 1c             	add    esp,0x1c
c001bf17:	5b                   	pop    ebx
c001bf18:	5e                   	pop    esi
c001bf19:	5f                   	pop    edi
c001bf1a:	5d                   	pop    ebp
c001bf1b:	c3                   	ret    

c001bf1c <IDE::read(unsigned char, unsigned char)>:
c001bf1c:	57                   	push   edi
c001bf1d:	56                   	push   esi
c001bf1e:	53                   	push   ebx
c001bf1f:	83 ec 10             	sub    esp,0x10
c001bf22:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bf26:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bf2a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bf2e:	8d 42 f8             	lea    eax,[edx-0x8]
c001bf31:	3c 03                	cmp    al,0x3
c001bf33:	77 48                	ja     c001bf7d <IDE::read(unsigned char, unsigned char)+0x61>
c001bf35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf39:	0f b6 f1             	movzx  esi,cl
c001bf3c:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001bf3f:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001bf44:	0c 80                	or     al,0x80
c001bf46:	50                   	push   eax
c001bf47:	6a 0c                	push   0xc
c001bf49:	56                   	push   esi
c001bf4a:	53                   	push   ebx
c001bf4b:	e8 0c ff ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf54:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001bf59:	0f b6 d2             	movzx  edx,dl
c001bf5c:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bf60:	ec                   	in     al,dx
c001bf61:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bf65:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001bf6a:	52                   	push   edx
c001bf6b:	6a 0c                	push   0xc
c001bf6d:	56                   	push   esi
c001bf6e:	53                   	push   ebx
c001bf6f:	e8 e8 fe ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf74:	83 c4 20             	add    esp,0x20
c001bf77:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bf7b:	eb 4c                	jmp    c001bfc9 <IDE::read(unsigned char, unsigned char)+0xad>
c001bf7d:	0f b6 f2             	movzx  esi,dl
c001bf80:	83 fe 07             	cmp    esi,0x7
c001bf83:	77 12                	ja     c001bf97 <IDE::read(unsigned char, unsigned char)+0x7b>
c001bf85:	0f b6 c9             	movzx  ecx,cl
c001bf88:	0f b6 d2             	movzx  edx,dl
c001bf8b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001bf93:	01 c2                	add    edx,eax
c001bf95:	eb 31                	jmp    c001bfc8 <IDE::read(unsigned char, unsigned char)+0xac>
c001bf97:	83 fe 0d             	cmp    esi,0xd
c001bf9a:	77 13                	ja     c001bfaf <IDE::read(unsigned char, unsigned char)+0x93>
c001bf9c:	0f b6 c9             	movzx  ecx,cl
c001bf9f:	0f b6 d2             	movzx  edx,dl
c001bfa2:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001bfa9:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bfad:	eb 19                	jmp    c001bfc8 <IDE::read(unsigned char, unsigned char)+0xac>
c001bfaf:	31 c0                	xor    eax,eax
c001bfb1:	83 fe 15             	cmp    esi,0x15
c001bfb4:	77 13                	ja     c001bfc9 <IDE::read(unsigned char, unsigned char)+0xad>
c001bfb6:	0f b6 c9             	movzx  ecx,cl
c001bfb9:	0f b6 d2             	movzx  edx,dl
c001bfbc:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001bfc4:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bfc8:	ec                   	in     al,dx
c001bfc9:	83 c4 10             	add    esp,0x10
c001bfcc:	5b                   	pop    ebx
c001bfcd:	5e                   	pop    esi
c001bfce:	5f                   	pop    edi
c001bfcf:	c3                   	ret    

c001bfd0 <IDE::waitInterrupt(unsigned char)>:
c001bfd0:	55                   	push   ebp
c001bfd1:	57                   	push   edi
c001bfd2:	56                   	push   esi
c001bfd3:	53                   	push   ebx
c001bfd4:	31 db                	xor    ebx,ebx
c001bfd6:	83 ec 0c             	sub    esp,0xc
c001bfd9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bfdd:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bfe2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bfea:	89 e8                	mov    eax,ebp
c001bfec:	84 c0                	test   al,al
c001bfee:	75 30                	jne    c001c020 <IDE::waitInterrupt(unsigned char)+0x50>
c001bff0:	50                   	push   eax
c001bff1:	6a 0c                	push   0xc
c001bff3:	56                   	push   esi
c001bff4:	57                   	push   edi
c001bff5:	e8 22 ff ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001bffa:	83 c4 10             	add    esp,0x10
c001bffd:	a8 01                	test   al,0x1
c001bfff:	75 27                	jne    c001c028 <IDE::waitInterrupt(unsigned char)+0x58>
c001c001:	f6 c3 04             	test   bl,0x4
c001c004:	75 12                	jne    c001c018 <IDE::waitInterrupt(unsigned char)+0x48>
c001c006:	83 fb 32             	cmp    ebx,0x32
c001c009:	7e 0d                	jle    c001c018 <IDE::waitInterrupt(unsigned char)+0x48>
c001c00b:	83 ec 0c             	sub    esp,0xc
c001c00e:	6a 64                	push   0x64
c001c010:	e8 73 a4 ff ff       	call   c0016488 <milliTenthSleep(unsigned int)>
c001c015:	83 c4 10             	add    esp,0x10
c001c018:	83 fb 3c             	cmp    ebx,0x3c
c001c01b:	74 0b                	je     c001c028 <IDE::waitInterrupt(unsigned char)+0x58>
c001c01d:	43                   	inc    ebx
c001c01e:	eb c2                	jmp    c001bfe2 <IDE::waitInterrupt(unsigned char)+0x12>
c001c020:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c028:	83 c4 0c             	add    esp,0xc
c001c02b:	89 e8                	mov    eax,ebp
c001c02d:	5b                   	pop    ebx
c001c02e:	5e                   	pop    esi
c001c02f:	5f                   	pop    edi
c001c030:	5d                   	pop    ebp
c001c031:	c3                   	ret    

c001c032 <ideChannel0IRQHandler(regs*, void*)>:
c001c032:	83 ec 10             	sub    esp,0x10
c001c035:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c039:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c040:	6a 07                	push   0x7
c001c042:	6a 00                	push   0x0
c001c044:	50                   	push   eax
c001c045:	e8 d2 fe ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c04a:	83 c4 1c             	add    esp,0x1c
c001c04d:	c3                   	ret    

c001c04e <ideChannel1IRQHandler(regs*, void*)>:
c001c04e:	83 ec 10             	sub    esp,0x10
c001c051:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c055:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c05c:	6a 07                	push   0x7
c001c05e:	6a 01                	push   0x1
c001c060:	50                   	push   eax
c001c061:	e8 b6 fe ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c066:	83 c4 1c             	add    esp,0x1c
c001c069:	c3                   	ret    

c001c06a <IDE::enableIRQs(unsigned char, bool)>:
c001c06a:	57                   	push   edi
c001c06b:	b8 02 00 00 00       	mov    eax,0x2
c001c070:	56                   	push   esi
c001c071:	53                   	push   ebx
c001c072:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c077:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c07b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c07f:	74 02                	je     c001c083 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c081:	31 c0                	xor    eax,eax
c001c083:	0f b6 db             	movzx  ebx,bl
c001c086:	bf 04 00 00 00       	mov    edi,0x4
c001c08b:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c092:	50                   	push   eax
c001c093:	6a 0c                	push   0xc
c001c095:	53                   	push   ebx
c001c096:	56                   	push   esi
c001c097:	e8 c0 fd ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c09c:	83 c4 10             	add    esp,0x10
c001c09f:	50                   	push   eax
c001c0a0:	6a 0c                	push   0xc
c001c0a2:	53                   	push   ebx
c001c0a3:	56                   	push   esi
c001c0a4:	e8 73 fe ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c0a9:	83 c4 10             	add    esp,0x10
c001c0ac:	4f                   	dec    edi
c001c0ad:	75 f0                	jne    c001c09f <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c0af:	5b                   	pop    ebx
c001c0b0:	5e                   	pop    esi
c001c0b1:	5f                   	pop    edi
c001c0b2:	c3                   	ret    
c001c0b3:	90                   	nop

c001c0b4 <IDE::open(int, int, void*)>:
c001c0b4:	55                   	push   ebp
c001c0b5:	57                   	push   edi
c001c0b6:	56                   	push   esi
c001c0b7:	53                   	push   ebx
c001c0b8:	83 ec 1c             	sub    esp,0x1c
c001c0bb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c0bf:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c0c6:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c0cf:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c0d8:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c0df:	0f 85 da 02 00 00    	jne    c001c3bf <IDE::open(int, int, void*)+0x30b>
c001c0e5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c0eb:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c0ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0f3:	83 e0 7f             	and    eax,0x7f
c001c0f6:	83 f8 05             	cmp    eax,0x5
c001c0f9:	74 05                	je     c001c100 <IDE::open(int, int, void*)+0x4c>
c001c0fb:	83 f8 0f             	cmp    eax,0xf
c001c0fe:	75 32                	jne    c001c132 <IDE::open(int, int, void*)+0x7e>
c001c100:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c106:	83 e0 fc             	and    eax,0xfffffffc
c001c109:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c110:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c116:	83 e0 fc             	and    eax,0xfffffffc
c001c119:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c120:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c126:	83 e0 fc             	and    eax,0xfffffffc
c001c129:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c130:	eb 14                	jmp    c001c146 <IDE::open(int, int, void*)+0x92>
c001c132:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c13c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c146:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001c14d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c152:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c159:	89 fa                	mov    edx,edi
c001c15b:	89 f1                	mov    ecx,esi
c001c15d:	c1 e1 10             	shl    ecx,0x10
c001c160:	89 e8                	mov    eax,ebp
c001c162:	c1 e0 0b             	shl    eax,0xb
c001c165:	09 c1                	or     ecx,eax
c001c167:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c16e:	c1 e0 08             	shl    eax,0x8
c001c171:	09 c1                	or     ecx,eax
c001c173:	89 c8                	mov    eax,ecx
c001c175:	0d 08 00 00 80       	or     eax,0x80000008
c001c17a:	ef                   	out    dx,eax
c001c17b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c180:	ed                   	in     eax,dx
c001c181:	c1 e8 10             	shr    eax,0x10
c001c184:	3d ff ff 00 00       	cmp    eax,0xffff
c001c189:	0f 84 f9 00 00 00    	je     c001c288 <IDE::open(int, int, void*)+0x1d4>
c001c18f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c195:	89 fa                	mov    edx,edi
c001c197:	89 c8                	mov    eax,ecx
c001c199:	ef                   	out    dx,eax
c001c19a:	b0 fe                	mov    al,0xfe
c001c19c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c1a1:	ee                   	out    dx,al
c001c1a2:	89 c8                	mov    eax,ecx
c001c1a4:	89 fa                	mov    edx,edi
c001c1a6:	ef                   	out    dx,eax
c001c1a7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c1ac:	ed                   	in     eax,dx
c001c1ad:	3c fe                	cmp    al,0xfe
c001c1af:	0f 85 a4 00 00 00    	jne    c001c259 <IDE::open(int, int, void*)+0x1a5>
c001c1b5:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c1bb:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c1c2:	74 30                	je     c001c1f4 <IDE::open(int, int, void*)+0x140>
c001c1c4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c1ca:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c1ce:	83 ec 0c             	sub    esp,0xc
c001c1d1:	40                   	inc    eax
c001c1d2:	0f b6 c0             	movzx  eax,al
c001c1d5:	50                   	push   eax
c001c1d6:	55                   	push   ebp
c001c1d7:	56                   	push   esi
c001c1d8:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c1de:	51                   	push   ecx
c001c1df:	e8 30 38 ff ff       	call   c000fa14 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c1e4:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c1e9:	83 c4 1c             	add    esp,0x1c
c001c1ec:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c1f2:	eb 0a                	jmp    c001c1fe <IDE::open(int, int, void*)+0x14a>
c001c1f4:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c1fe:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c205:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001c20a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c211:	89 ea                	mov    edx,ebp
c001c213:	c1 e1 10             	shl    ecx,0x10
c001c216:	c1 e0 08             	shl    eax,0x8
c001c219:	09 c1                	or     ecx,eax
c001c21b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c222:	c1 e0 0b             	shl    eax,0xb
c001c225:	09 c1                	or     ecx,eax
c001c227:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c22d:	89 c8                	mov    eax,ecx
c001c22f:	ef                   	out    dx,eax
c001c230:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001c236:	be fc 0c 00 00       	mov    esi,0xcfc
c001c23b:	89 f2                	mov    edx,esi
c001c23d:	89 f8                	mov    eax,edi
c001c23f:	ee                   	out    dx,al
c001c240:	89 c8                	mov    eax,ecx
c001c242:	89 ea                	mov    edx,ebp
c001c244:	ef                   	out    dx,eax
c001c245:	89 f2                	mov    edx,esi
c001c247:	ed                   	in     eax,dx
c001c248:	0f b6 c0             	movzx  eax,al
c001c24b:	39 f8                	cmp    eax,edi
c001c24d:	74 49                	je     c001c298 <IDE::open(int, int, void*)+0x1e4>
c001c24f:	83 ec 0c             	sub    esp,0xc
c001c252:	68 bc 33 02 c0       	push   0xc00233bc
c001c257:	eb 37                	jmp    c001c290 <IDE::open(int, int, void*)+0x1dc>
c001c259:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c262:	75 1a                	jne    c001c27e <IDE::open(int, int, void*)+0x1ca>
c001c264:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c269:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c26e:	74 05                	je     c001c275 <IDE::open(int, int, void*)+0x1c1>
c001c270:	83 c0 80             	add    eax,0xffffff80
c001c273:	75 09                	jne    c001c27e <IDE::open(int, int, void*)+0x1ca>
c001c275:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c27c:	eb 1a                	jmp    c001c298 <IDE::open(int, int, void*)+0x1e4>
c001c27e:	83 ec 0c             	sub    esp,0xc
c001c281:	68 c4 33 02 c0       	push   0xc00233c4
c001c286:	eb 08                	jmp    c001c290 <IDE::open(int, int, void*)+0x1dc>
c001c288:	83 ec 0c             	sub    esp,0xc
c001c28b:	68 f5 33 02 c0       	push   0xc00233f5
c001c290:	e8 aa 53 ff ff       	call   c001163f <KePanic(char const*)>
c001c295:	83 c4 10             	add    esp,0x10
c001c298:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c29f:	74 1a                	je     c001c2bb <IDE::open(int, int, void*)+0x207>
c001c2a1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c2a7:	83 e0 fc             	and    eax,0xfffffffc
c001c2aa:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c2b1:	83 c0 08             	add    eax,0x8
c001c2b4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c2bb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c2c1:	89 c2                	mov    edx,eax
c001c2c3:	83 e2 0f             	and    edx,0xf
c001c2c6:	83 fa 08             	cmp    edx,0x8
c001c2c9:	75 0a                	jne    c001c2d5 <IDE::open(int, int, void*)+0x221>
c001c2cb:	83 e8 02             	sub    eax,0x2
c001c2ce:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c2d5:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c2db:	89 c2                	mov    edx,eax
c001c2dd:	83 e2 0f             	and    edx,0xf
c001c2e0:	83 fa 08             	cmp    edx,0x8
c001c2e3:	75 0a                	jne    c001c2ef <IDE::open(int, int, void*)+0x23b>
c001c2e5:	83 e8 02             	sub    eax,0x2
c001c2e8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c2ef:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c2f6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c2fd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c300:	89 d0                	mov    eax,edx
c001c302:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c306:	8d 7a 01             	lea    edi,[edx+0x1]
c001c309:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c30d:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c311:	83 e1 3f             	and    ecx,0x3f
c001c314:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c318:	89 f9                	mov    ecx,edi
c001c31a:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c321:	8d 78 02             	lea    edi,[eax+0x2]
c001c324:	0f b6 c9             	movzx  ecx,cl
c001c327:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c32a:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c32e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c332:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c336:	83 e2 3f             	and    edx,0x3f
c001c339:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c33d:	89 f9                	mov    ecx,edi
c001c33f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c345:	8d 78 03             	lea    edi,[eax+0x3]
c001c348:	0f b6 d1             	movzx  edx,cl
c001c34b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c34e:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c352:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c356:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c35a:	83 e1 3f             	and    ecx,0x3f
c001c35d:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c361:	89 f9                	mov    ecx,edi
c001c363:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c369:	8d 78 04             	lea    edi,[eax+0x4]
c001c36c:	0f b6 c9             	movzx  ecx,cl
c001c36f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c372:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c376:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c37a:	89 fa                	mov    edx,edi
c001c37c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c382:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c386:	83 e2 3f             	and    edx,0x3f
c001c389:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c38d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c394:	66 85 f6             	test   si,si
c001c397:	74 65                	je     c001c3fe <IDE::open(int, int, void*)+0x34a>
c001c399:	89 f9                	mov    ecx,edi
c001c39b:	83 c0 05             	add    eax,0x5
c001c39e:	0f b6 d1             	movzx  edx,cl
c001c3a1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c3a4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c3a8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c3ac:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c3b2:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c3b6:	83 e0 3f             	and    eax,0x3f
c001c3b9:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c3bd:	eb 3f                	jmp    c001c3fe <IDE::open(int, int, void*)+0x34a>
c001c3bf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c3c6:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c3cc:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c3d3:	05 06 02 00 00       	add    eax,0x206
c001c3d8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c3df:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c3e6:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c3ed:	05 06 02 00 00       	add    eax,0x206
c001c3f2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c3f9:	e9 bd fe ff ff       	jmp    c001c2bb <IDE::open(int, int, void*)+0x207>
c001c3fe:	50                   	push   eax
c001c3ff:	50                   	push   eax
c001c400:	6a 00                	push   0x0
c001c402:	53                   	push   ebx
c001c403:	e8 2e fa ff ff       	call   c001be36 <IDE::prepareInterrupt(unsigned char)>
c001c408:	5a                   	pop    edx
c001c409:	59                   	pop    ecx
c001c40a:	6a 01                	push   0x1
c001c40c:	53                   	push   ebx
c001c40d:	e8 24 fa ff ff       	call   c001be36 <IDE::prepareInterrupt(unsigned char)>
c001c412:	83 c4 0c             	add    esp,0xc
c001c415:	6a 00                	push   0x0
c001c417:	6a 00                	push   0x0
c001c419:	53                   	push   ebx
c001c41a:	e8 4b fc ff ff       	call   c001c06a <IDE::enableIRQs(unsigned char, bool)>
c001c41f:	83 c4 0c             	add    esp,0xc
c001c422:	6a 00                	push   0x0
c001c424:	6a 01                	push   0x1
c001c426:	53                   	push   ebx
c001c427:	e8 3e fc ff ff       	call   c001c06a <IDE::enableIRQs(unsigned char, bool)>
c001c42c:	83 c4 10             	add    esp,0x10
c001c42f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c436:	74 34                	je     c001c46c <IDE::open(int, int, void*)+0x3b8>
c001c438:	83 ec 0c             	sub    esp,0xc
c001c43b:	53                   	push   ebx
c001c43c:	6a 01                	push   0x1
c001c43e:	68 32 c0 01 c0       	push   0xc001c032
c001c443:	6a 0e                	push   0xe
c001c445:	53                   	push   ebx
c001c446:	e8 61 05 ff ff       	call   c000c9ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c44b:	83 c4 14             	add    esp,0x14
c001c44e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c454:	53                   	push   ebx
c001c455:	6a 01                	push   0x1
c001c457:	68 4e c0 01 c0       	push   0xc001c04e
c001c45c:	6a 0f                	push   0xf
c001c45e:	53                   	push   ebx
c001c45f:	e8 48 05 ff ff       	call   c000c9ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c464:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c46a:	eb 38                	jmp    c001c4a4 <IDE::open(int, int, void*)+0x3f0>
c001c46c:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c476:	83 ec 0c             	sub    esp,0xc
c001c479:	53                   	push   ebx
c001c47a:	6a 00                	push   0x0
c001c47c:	68 32 c0 01 c0       	push   0xc001c032
c001c481:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c487:	53                   	push   ebx
c001c488:	e8 1f 05 ff ff       	call   c000c9ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c48d:	83 c4 14             	add    esp,0x14
c001c490:	53                   	push   ebx
c001c491:	6a 00                	push   0x0
c001c493:	68 4e c0 01 c0       	push   0xc001c04e
c001c498:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c49e:	53                   	push   ebx
c001c49f:	e8 08 05 ff ff       	call   c000c9ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c4a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4a6:	83 c4 20             	add    esp,0x20
c001c4a9:	83 ec 0c             	sub    esp,0xc
c001c4ac:	53                   	push   ebx
c001c4ad:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c4b0:	83 c4 0c             	add    esp,0xc
c001c4b3:	6a 07                	push   0x7
c001c4b5:	6a 00                	push   0x0
c001c4b7:	53                   	push   ebx
c001c4b8:	e8 5f fa ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c4bd:	83 c4 0c             	add    esp,0xc
c001c4c0:	6a 07                	push   0x7
c001c4c2:	6a 01                	push   0x1
c001c4c4:	53                   	push   ebx
c001c4c5:	e8 52 fa ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c4ca:	83 c4 0c             	add    esp,0xc
c001c4cd:	6a 01                	push   0x1
c001c4cf:	6a 00                	push   0x0
c001c4d1:	53                   	push   ebx
c001c4d2:	e8 93 fb ff ff       	call   c001c06a <IDE::enableIRQs(unsigned char, bool)>
c001c4d7:	83 c4 0c             	add    esp,0xc
c001c4da:	6a 01                	push   0x1
c001c4dc:	6a 01                	push   0x1
c001c4de:	53                   	push   ebx
c001c4df:	e8 86 fb ff ff       	call   c001c06a <IDE::enableIRQs(unsigned char, bool)>
c001c4e4:	83 c4 2c             	add    esp,0x2c
c001c4e7:	31 c0                	xor    eax,eax
c001c4e9:	5b                   	pop    ebx
c001c4ea:	5e                   	pop    esi
c001c4eb:	5f                   	pop    edi
c001c4ec:	5d                   	pop    ebp
c001c4ed:	c3                   	ret    

c001c4ee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c4ee:	55                   	push   ebp
c001c4ef:	57                   	push   edi
c001c4f0:	56                   	push   esi
c001c4f1:	53                   	push   ebx
c001c4f2:	83 ec 1c             	sub    esp,0x1c
c001c4f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c4f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c4fd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c501:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c505:	8d 42 f8             	lea    eax,[edx-0x8]
c001c508:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c50c:	3c 03                	cmp    al,0x3
c001c50e:	77 5a                	ja     c001c56a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c510:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c514:	0f b6 db             	movzx  ebx,bl
c001c517:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c51b:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c51e:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c523:	0c 80                	or     al,0x80
c001c525:	50                   	push   eax
c001c526:	6a 0c                	push   0xc
c001c528:	53                   	push   ebx
c001c529:	56                   	push   esi
c001c52a:	e8 2d f9 ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c52f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c533:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c538:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c53c:	0f b6 d2             	movzx  edx,dl
c001c53f:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c543:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c545:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c54a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c54e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c552:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c55a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c55e:	83 c4 2c             	add    esp,0x2c
c001c561:	5b                   	pop    ebx
c001c562:	5e                   	pop    esi
c001c563:	5f                   	pop    edi
c001c564:	5d                   	pop    ebp
c001c565:	e9 f2 f8 ff ff       	jmp    c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c56a:	0f b6 c2             	movzx  eax,dl
c001c56d:	83 f8 07             	cmp    eax,0x7
c001c570:	77 12                	ja     c001c584 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c572:	0f b6 db             	movzx  ebx,bl
c001c575:	0f b6 c2             	movzx  eax,dl
c001c578:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c580:	01 c2                	add    edx,eax
c001c582:	eb 2f                	jmp    c001c5b3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c584:	83 f8 0d             	cmp    eax,0xd
c001c587:	77 13                	ja     c001c59c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c589:	0f b6 db             	movzx  ebx,bl
c001c58c:	0f b6 d2             	movzx  edx,dl
c001c58f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c596:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c59a:	eb 17                	jmp    c001c5b3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c59c:	83 f8 15             	cmp    eax,0x15
c001c59f:	77 14                	ja     c001c5b5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c5a1:	0f b6 db             	movzx  ebx,bl
c001c5a4:	0f b6 d2             	movzx  edx,dl
c001c5a7:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c5af:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c5b3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c5b5:	83 c4 1c             	add    esp,0x1c
c001c5b8:	5b                   	pop    ebx
c001c5b9:	5e                   	pop    esi
c001c5ba:	5f                   	pop    edi
c001c5bb:	5d                   	pop    ebp
c001c5bc:	c3                   	ret    
c001c5bd:	90                   	nop

c001c5be <IDE::detect()>:
c001c5be:	55                   	push   ebp
c001c5bf:	57                   	push   edi
c001c5c0:	56                   	push   esi
c001c5c1:	53                   	push   ebx
c001c5c2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c5c8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c5cf:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c5d6:	0f 85 9e 02 00 00    	jne    c001c87a <IDE::detect()+0x2bc>
c001c5dc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c5e3:	31 f6                	xor    esi,esi
c001c5e5:	31 ff                	xor    edi,edi
c001c5e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c5ef:	89 f8                	mov    eax,edi
c001c5f1:	c1 e0 06             	shl    eax,0x6
c001c5f4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c5fc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c600:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c608:	c1 e0 04             	shl    eax,0x4
c001c60b:	83 c8 a0             	or     eax,0xffffffa0
c001c60e:	0f b6 c0             	movzx  eax,al
c001c611:	50                   	push   eax
c001c612:	6a 06                	push   0x6
c001c614:	56                   	push   esi
c001c615:	53                   	push   ebx
c001c616:	e8 41 f8 ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c61b:	83 c4 0c             	add    esp,0xc
c001c61e:	6a 0c                	push   0xc
c001c620:	56                   	push   esi
c001c621:	53                   	push   ebx
c001c622:	e8 f5 f8 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c627:	83 c4 0c             	add    esp,0xc
c001c62a:	6a 0c                	push   0xc
c001c62c:	56                   	push   esi
c001c62d:	53                   	push   ebx
c001c62e:	e8 e9 f8 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c633:	83 c4 0c             	add    esp,0xc
c001c636:	6a 0c                	push   0xc
c001c638:	56                   	push   esi
c001c639:	53                   	push   ebx
c001c63a:	e8 dd f8 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c63f:	83 c4 0c             	add    esp,0xc
c001c642:	6a 0c                	push   0xc
c001c644:	56                   	push   esi
c001c645:	53                   	push   ebx
c001c646:	e8 d1 f8 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c64b:	68 ec 00 00 00       	push   0xec
c001c650:	6a 07                	push   0x7
c001c652:	56                   	push   esi
c001c653:	53                   	push   ebx
c001c654:	e8 03 f8 ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c659:	83 c4 1c             	add    esp,0x1c
c001c65c:	6a 0c                	push   0xc
c001c65e:	56                   	push   esi
c001c65f:	53                   	push   ebx
c001c660:	e8 b7 f8 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c665:	83 c4 0c             	add    esp,0xc
c001c668:	6a 0c                	push   0xc
c001c66a:	56                   	push   esi
c001c66b:	53                   	push   ebx
c001c66c:	e8 ab f8 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c671:	83 c4 0c             	add    esp,0xc
c001c674:	6a 0c                	push   0xc
c001c676:	56                   	push   esi
c001c677:	53                   	push   ebx
c001c678:	e8 9f f8 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c67d:	83 c4 0c             	add    esp,0xc
c001c680:	6a 0c                	push   0xc
c001c682:	56                   	push   esi
c001c683:	53                   	push   ebx
c001c684:	e8 93 f8 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c689:	83 c4 0c             	add    esp,0xc
c001c68c:	6a 0c                	push   0xc
c001c68e:	56                   	push   esi
c001c68f:	53                   	push   ebx
c001c690:	e8 87 f8 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c695:	83 c4 10             	add    esp,0x10
c001c698:	84 c0                	test   al,al
c001c69a:	0f 84 61 01 00 00    	je     c001c801 <IDE::detect()+0x243>
c001c6a0:	31 ed                	xor    ebp,ebp
c001c6a2:	50                   	push   eax
c001c6a3:	6a 0c                	push   0xc
c001c6a5:	56                   	push   esi
c001c6a6:	53                   	push   ebx
c001c6a7:	e8 70 f8 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c6ac:	83 c4 10             	add    esp,0x10
c001c6af:	a8 01                	test   al,0x1
c001c6b1:	0f 85 6b 01 00 00    	jne    c001c822 <IDE::detect()+0x264>
c001c6b7:	a8 80                	test   al,0x80
c001c6b9:	75 04                	jne    c001c6bf <IDE::detect()+0x101>
c001c6bb:	a8 08                	test   al,0x8
c001c6bd:	75 23                	jne    c001c6e2 <IDE::detect()+0x124>
c001c6bf:	45                   	inc    ebp
c001c6c0:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c6c6:	7e da                	jle    c001c6a2 <IDE::detect()+0xe4>
c001c6c8:	83 ec 0c             	sub    esp,0xc
c001c6cb:	6a 32                	push   0x32
c001c6cd:	e8 b6 9d ff ff       	call   c0016488 <milliTenthSleep(unsigned int)>
c001c6d2:	83 c4 10             	add    esp,0x10
c001c6d5:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c6db:	75 c5                	jne    c001c6a2 <IDE::detect()+0xe4>
c001c6dd:	e9 40 01 00 00       	jmp    c001c822 <IDE::detect()+0x264>
c001c6e2:	31 c9                	xor    ecx,ecx
c001c6e4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c6e8:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c6ec:	83 ec 0c             	sub    esp,0xc
c001c6ef:	68 80 00 00 00       	push   0x80
c001c6f4:	55                   	push   ebp
c001c6f5:	6a 00                	push   0x0
c001c6f7:	56                   	push   esi
c001c6f8:	53                   	push   ebx
c001c6f9:	e8 f0 fd ff ff       	call   c001c4ee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c6fe:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c703:	89 f8                	mov    eax,edi
c001c705:	c1 e0 06             	shl    eax,0x6
c001c708:	01 d8                	add    eax,ebx
c001c70a:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c711:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c718:	89 d1                	mov    ecx,edx
c001c71a:	89 f2                	mov    edx,esi
c001c71c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c722:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c726:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c72c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c730:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c737:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c73f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c746:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c74e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c754:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c75b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c761:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c765:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c769:	83 c4 20             	add    esp,0x20
c001c76c:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c76f:	83 c5 02             	add    ebp,0x2
c001c772:	83 c0 02             	add    eax,0x2
c001c775:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c77b:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c77e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c784:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c788:	75 e2                	jne    c001c76c <IDE::detect()+0x1ae>
c001c78a:	89 f8                	mov    eax,edi
c001c78c:	c1 e0 06             	shl    eax,0x6
c001c78f:	01 d8                	add    eax,ebx
c001c791:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c798:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c79f:	c1 ea 09             	shr    edx,0x9
c001c7a2:	83 e2 01             	and    edx,0x1
c001c7a5:	80 e1 01             	and    cl,0x1
c001c7a8:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c7ae:	75 22                	jne    c001c7d2 <IDE::detect()+0x214>
c001c7b0:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c7b7:	74 47                	je     c001c800 <IDE::detect()+0x242>
c001c7b9:	83 ec 0c             	sub    esp,0xc
c001c7bc:	68 7c 01 00 00       	push   0x17c
c001c7c1:	e8 6d b3 fe ff       	call   c0007b33 <malloc>
c001c7c6:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7c9:	89 c5                	mov    ebp,eax
c001c7cb:	e8 16 05 00 00       	call   c001cce6 <ATA::ATA()>
c001c7d0:	eb 17                	jmp    c001c7e9 <IDE::detect()+0x22b>
c001c7d2:	83 ec 0c             	sub    esp,0xc
c001c7d5:	68 84 01 00 00       	push   0x184
c001c7da:	e8 54 b3 fe ff       	call   c0007b33 <malloc>
c001c7df:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7e2:	89 c5                	mov    ebp,eax
c001c7e4:	e8 6f 0e 00 00       	call   c001d658 <ATAPI::ATAPI()>
c001c7e9:	5a                   	pop    edx
c001c7ea:	59                   	pop    ecx
c001c7eb:	55                   	push   ebp
c001c7ec:	53                   	push   ebx
c001c7ed:	e8 0e 02 ff ff       	call   c000ca00 <Device::addChild(Device*)>
c001c7f2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c7f5:	53                   	push   ebx
c001c7f6:	57                   	push   edi
c001c7f7:	6a 00                	push   0x0
c001c7f9:	55                   	push   ebp
c001c7fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c7fd:	83 c4 20             	add    esp,0x20
c001c800:	47                   	inc    edi
c001c801:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c806:	74 0d                	je     c001c815 <IDE::detect()+0x257>
c001c808:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c810:	e9 da fd ff ff       	jmp    c001c5ef <IDE::detect()+0x31>
c001c815:	4e                   	dec    esi
c001c816:	74 62                	je     c001c87a <IDE::detect()+0x2bc>
c001c818:	be 01 00 00 00       	mov    esi,0x1
c001c81d:	e9 c5 fd ff ff       	jmp    c001c5e7 <IDE::detect()+0x29>
c001c822:	50                   	push   eax
c001c823:	6a 04                	push   0x4
c001c825:	56                   	push   esi
c001c826:	53                   	push   ebx
c001c827:	e8 f0 f6 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c82c:	83 c4 0c             	add    esp,0xc
c001c82f:	6a 05                	push   0x5
c001c831:	56                   	push   esi
c001c832:	53                   	push   ebx
c001c833:	89 c5                	mov    ebp,eax
c001c835:	e8 e2 f6 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c83a:	89 e9                	mov    ecx,ebp
c001c83c:	83 c4 10             	add    esp,0x10
c001c83f:	0f b6 e9             	movzx  ebp,cl
c001c842:	83 fd 14             	cmp    ebp,0x14
c001c845:	74 2d                	je     c001c874 <IDE::detect()+0x2b6>
c001c847:	83 fd 69             	cmp    ebp,0x69
c001c84a:	75 b5                	jne    c001c801 <IDE::detect()+0x243>
c001c84c:	3c 96                	cmp    al,0x96
c001c84e:	75 b1                	jne    c001c801 <IDE::detect()+0x243>
c001c850:	68 a1 00 00 00       	push   0xa1
c001c855:	6a 07                	push   0x7
c001c857:	56                   	push   esi
c001c858:	53                   	push   ebx
c001c859:	e8 fe f5 ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c85e:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c865:	e8 1e 9c ff ff       	call   c0016488 <milliTenthSleep(unsigned int)>
c001c86a:	83 c4 10             	add    esp,0x10
c001c86d:	b1 01                	mov    cl,0x1
c001c86f:	e9 70 fe ff ff       	jmp    c001c6e4 <IDE::detect()+0x126>
c001c874:	3c eb                	cmp    al,0xeb
c001c876:	75 cf                	jne    c001c847 <IDE::detect()+0x289>
c001c878:	eb d6                	jmp    c001c850 <IDE::detect()+0x292>
c001c87a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c880:	5b                   	pop    ebx
c001c881:	5e                   	pop    esi
c001c882:	5f                   	pop    edi
c001c883:	5d                   	pop    ebp
c001c884:	c3                   	ret    
c001c885:	90                   	nop

c001c886 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c886:	55                   	push   ebp
c001c887:	57                   	push   edi
c001c888:	56                   	push   esi
c001c889:	53                   	push   ebx
c001c88a:	83 ec 1c             	sub    esp,0x1c
c001c88d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c891:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c895:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c899:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c89d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8a1:	88 c3                	mov    bl,al
c001c8a3:	25 ff 00 00 00       	and    eax,0xff
c001c8a8:	0f 84 88 00 00 00    	je     c001c936 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8ae:	83 ec 0c             	sub    esp,0xc
c001c8b1:	89 c7                	mov    edi,eax
c001c8b3:	68 1f 34 02 c0       	push   0xc002341f
c001c8b8:	e8 ad e0 fe ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001c8bd:	83 c4 10             	add    esp,0x10
c001c8c0:	83 ff 01             	cmp    edi,0x1
c001c8c3:	74 6b                	je     c001c930 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c8c5:	83 ff 02             	cmp    edi,0x2
c001c8c8:	75 58                	jne    c001c922 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c8ca:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c8cf:	50                   	push   eax
c001c8d0:	6a 01                	push   0x1
c001c8d2:	01 ff                	add    edi,edi
c001c8d4:	09 fe                	or     esi,edi
c001c8d6:	89 f0                	mov    eax,esi
c001c8d8:	0f b6 f0             	movzx  esi,al
c001c8db:	c1 e6 06             	shl    esi,0x6
c001c8de:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c8e6:	50                   	push   eax
c001c8e7:	55                   	push   ebp
c001c8e8:	e8 2f f6 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c8ed:	83 c4 10             	add    esp,0x10
c001c8f0:	a8 01                	test   al,0x1
c001c8f2:	74 02                	je     c001c8f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c8f4:	b3 07                	mov    bl,0x7
c001c8f6:	a8 02                	test   al,0x2
c001c8f8:	74 02                	je     c001c8fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c8fa:	b3 03                	mov    bl,0x3
c001c8fc:	a8 04                	test   al,0x4
c001c8fe:	74 02                	je     c001c902 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c900:	b3 14                	mov    bl,0x14
c001c902:	a8 08                	test   al,0x8
c001c904:	74 02                	je     c001c908 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c906:	b3 03                	mov    bl,0x3
c001c908:	a8 10                	test   al,0x10
c001c90a:	74 02                	je     c001c90e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c90c:	b3 15                	mov    bl,0x15
c001c90e:	a8 20                	test   al,0x20
c001c910:	74 02                	je     c001c914 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c912:	b3 03                	mov    bl,0x3
c001c914:	a8 40                	test   al,0x40
c001c916:	74 02                	je     c001c91a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c918:	b3 16                	mov    bl,0x16
c001c91a:	a8 80                	test   al,0x80
c001c91c:	74 18                	je     c001c936 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c91e:	b3 0d                	mov    bl,0xd
c001c920:	eb 14                	jmp    c001c936 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c922:	83 ff 03             	cmp    edi,0x3
c001c925:	74 0d                	je     c001c934 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c927:	83 ff 04             	cmp    edi,0x4
c001c92a:	75 0a                	jne    c001c936 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c92c:	b3 08                	mov    bl,0x8
c001c92e:	eb 06                	jmp    c001c936 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c930:	b3 13                	mov    bl,0x13
c001c932:	eb 02                	jmp    c001c936 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c934:	b3 17                	mov    bl,0x17
c001c936:	83 c4 1c             	add    esp,0x1c
c001c939:	88 d8                	mov    al,bl
c001c93b:	5b                   	pop    ebx
c001c93c:	5e                   	pop    esi
c001c93d:	5f                   	pop    edi
c001c93e:	5d                   	pop    ebp
c001c93f:	c3                   	ret    

c001c940 <IDE::polling(unsigned char, unsigned int)>:
c001c940:	57                   	push   edi
c001c941:	56                   	push   esi
c001c942:	53                   	push   ebx
c001c943:	bb 04 00 00 00       	mov    ebx,0x4
c001c948:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c94c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c951:	52                   	push   edx
c001c952:	6a 0c                	push   0xc
c001c954:	56                   	push   esi
c001c955:	57                   	push   edi
c001c956:	e8 c1 f5 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c95b:	83 c4 10             	add    esp,0x10
c001c95e:	4b                   	dec    ebx
c001c95f:	75 f0                	jne    c001c951 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c961:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c966:	50                   	push   eax
c001c967:	6a 0c                	push   0xc
c001c969:	56                   	push   esi
c001c96a:	57                   	push   edi
c001c96b:	e8 ac f5 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001c970:	83 c4 10             	add    esp,0x10
c001c973:	a8 01                	test   al,0x1
c001c975:	75 17                	jne    c001c98e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c977:	a8 20                	test   al,0x20
c001c979:	75 0f                	jne    c001c98a <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c97b:	4b                   	dec    ebx
c001c97c:	74 10                	je     c001c98e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c97e:	a8 80                	test   al,0x80
c001c980:	75 e4                	jne    c001c966 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c982:	a8 08                	test   al,0x8
c001c984:	74 e0                	je     c001c966 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c986:	31 c0                	xor    eax,eax
c001c988:	eb 06                	jmp    c001c990 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c98a:	b0 01                	mov    al,0x1
c001c98c:	eb 02                	jmp    c001c990 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c98e:	b0 02                	mov    al,0x2
c001c990:	5b                   	pop    ebx
c001c991:	5e                   	pop    esi
c001c992:	5f                   	pop    edi
c001c993:	c3                   	ret    

c001c994 <SATABus::close(int, int, void*)>:
c001c994:	31 c0                	xor    eax,eax
c001c996:	c3                   	ret    
c001c997:	90                   	nop

c001c998 <SATABus::detect()>:
c001c998:	c3                   	ret    
c001c999:	90                   	nop

c001c99a <SATABus::SATABus()>:
c001c99a:	83 ec 0c             	sub    esp,0xc
c001c99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a1:	83 ec 08             	sub    esp,0x8
c001c9a4:	68 58 34 02 c0       	push   0xc0023458
c001c9a9:	50                   	push   eax
c001c9aa:	e8 95 03 ff ff       	call   c000cd44 <HardDiskController::HardDiskController(char const*)>
c001c9af:	83 c4 10             	add    esp,0x10
c001c9b2:	ba 84 34 02 c0       	mov    edx,0xc0023484
c001c9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9bb:	89 10                	mov    DWORD PTR [eax],edx
c001c9bd:	83 ec 0c             	sub    esp,0xc
c001c9c0:	6a 50                	push   0x50
c001c9c2:	e8 4a b5 fe ff       	call   c0007f11 <Phys::allocateContiguousPages(int)>
c001c9c7:	83 c4 10             	add    esp,0x10
c001c9ca:	89 c2                	mov    edx,eax
c001c9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c9d6:	83 ec 0c             	sub    esp,0xc
c001c9d9:	6a 50                	push   0x50
c001c9db:	e8 75 cc fe ff       	call   c0009655 <Virt::allocateKernelVirtualPages(int)>
c001c9e0:	83 c4 10             	add    esp,0x10
c001c9e3:	89 c2                	mov    edx,eax
c001c9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9e9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c9ef:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c9f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c9f8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c9fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ca02:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ca08:	83 ec 0c             	sub    esp,0xc
c001ca0b:	6a 03                	push   0x3
c001ca0d:	6a 50                	push   0x50
c001ca0f:	51                   	push   ecx
c001ca10:	52                   	push   edx
c001ca11:	50                   	push   eax
c001ca12:	e8 51 d5 fe ff       	call   c0009f68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ca17:	83 c4 20             	add    esp,0x20
c001ca1a:	90                   	nop
c001ca1b:	83 c4 0c             	add    esp,0xc
c001ca1e:	c3                   	ret    
c001ca1f:	90                   	nop

c001ca20 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ca20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca24:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001ca27:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ca2a:	09 c2                	or     edx,eax
c001ca2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ca36:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ca38:	31 c0                	xor    eax,eax
c001ca3a:	c1 e9 08             	shr    ecx,0x8
c001ca3d:	83 e1 0f             	and    ecx,0xf
c001ca40:	39 c8                	cmp    eax,ecx
c001ca42:	74 0a                	je     c001ca4e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ca44:	f6 c2 01             	test   dl,0x1
c001ca47:	74 08                	je     c001ca51 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ca49:	d1 ea                	shr    edx,1
c001ca4b:	40                   	inc    eax
c001ca4c:	eb f2                	jmp    c001ca40 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ca4e:	83 c8 ff             	or     eax,0xffffffff
c001ca51:	c3                   	ret    

c001ca52 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ca52:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ca56:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ca59:	89 c2                	mov    edx,eax
c001ca5b:	c1 ea 08             	shr    edx,0x8
c001ca5e:	83 e2 0f             	and    edx,0xf
c001ca61:	4a                   	dec    edx
c001ca62:	75 32                	jne    c001ca96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca64:	83 e0 0f             	and    eax,0xf
c001ca67:	83 f8 03             	cmp    eax,0x3
c001ca6a:	75 2a                	jne    c001ca96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca6c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ca6f:	b8 02 00 00 00       	mov    eax,0x2
c001ca74:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ca7a:	74 1c                	je     c001ca98 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca7c:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001ca82:	b8 04 00 00 00       	mov    eax,0x4
c001ca87:	74 0f                	je     c001ca98 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca89:	31 c0                	xor    eax,eax
c001ca8b:	83 fa 03             	cmp    edx,0x3
c001ca8e:	0f 94 c0             	sete   al
c001ca91:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ca95:	c3                   	ret    
c001ca96:	31 c0                	xor    eax,eax
c001ca98:	c3                   	ret    
c001ca99:	90                   	nop

c001ca9a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca9e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caa1:	0f ba e2 0f          	bt     edx,0xf
c001caa5:	72 f7                	jb     c001ca9e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001caa7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caaa:	83 ca 10             	or     edx,0x10
c001caad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cab0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cab3:	83 ca 01             	or     edx,0x1
c001cab6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cab9:	c3                   	ret    

c001caba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001caba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cabe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cac1:	83 e2 fe             	and    edx,0xfffffffe
c001cac4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cac7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caca:	83 e2 ef             	and    edx,0xffffffef
c001cacd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cad0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cad3:	0f ba e2 0e          	bt     edx,0xe
c001cad7:	72 f7                	jb     c001cad0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001cad9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cadc:	0f ba e2 0f          	bt     edx,0xf
c001cae0:	72 ee                	jb     c001cad0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001cae2:	c3                   	ret    
c001cae3:	90                   	nop

c001cae4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001cae4:	55                   	push   ebp
c001cae5:	57                   	push   edi
c001cae6:	56                   	push   esi
c001cae7:	53                   	push   ebx
c001cae8:	83 ec 1c             	sub    esp,0x1c
c001caeb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001caef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001caf3:	53                   	push   ebx
c001caf4:	57                   	push   edi
c001caf5:	e8 c0 ff ff ff       	call   c001caba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001cafa:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001cafe:	83 ec 0c             	sub    esp,0xc
c001cb01:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cb07:	c1 e5 0a             	shl    ebp,0xa
c001cb0a:	01 e8                	add    eax,ebp
c001cb0c:	89 03                	mov    DWORD PTR [ebx],eax
c001cb0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb10:	68 00 04 00 00       	push   0x400
c001cb15:	6a 00                	push   0x0
c001cb17:	50                   	push   eax
c001cb18:	e8 d3 39 fe ff       	call   c00004f0 <memset>
c001cb1d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cb23:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001cb27:	83 c4 1c             	add    esp,0x1c
c001cb2a:	01 e8                	add    eax,ebp
c001cb2c:	89 03                	mov    DWORD PTR [ebx],eax
c001cb2e:	c1 e6 08             	shl    esi,0x8
c001cb31:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb38:	81 c6 00 80 00 00    	add    esi,0x8000
c001cb3e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cb44:	01 f0                	add    eax,esi
c001cb46:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb49:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cb4c:	68 00 01 00 00       	push   0x100
c001cb51:	6a 00                	push   0x0
c001cb53:	50                   	push   eax
c001cb54:	e8 97 39 fe ff       	call   c00004f0 <memset>
c001cb59:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cb5f:	31 d2                	xor    edx,edx
c001cb61:	01 f0                	add    eax,esi
c001cb63:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb66:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cb6d:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001cb73:	01 ee                	add    esi,ebp
c001cb75:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001cb79:	83 c4 10             	add    esp,0x10
c001cb7c:	c1 e5 0d             	shl    ebp,0xd
c001cb7f:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001cb85:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001cb8b:	83 c6 20             	add    esi,0x20
c001cb8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cb92:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cb98:	01 e8                	add    eax,ebp
c001cb9a:	01 d0                	add    eax,edx
c001cb9c:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cb9f:	52                   	push   edx
c001cba0:	68 00 01 00 00       	push   0x100
c001cba5:	6a 00                	push   0x0
c001cba7:	50                   	push   eax
c001cba8:	e8 43 39 fe ff       	call   c00004f0 <memset>
c001cbad:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cbb3:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001cbba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbbe:	83 c4 10             	add    esp,0x10
c001cbc1:	01 e8                	add    eax,ebp
c001cbc3:	01 d0                	add    eax,edx
c001cbc5:	81 c2 00 01 00 00    	add    edx,0x100
c001cbcb:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cbce:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001cbd4:	75 af                	jne    c001cb85 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001cbd6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cbdd:	50                   	push   eax
c001cbde:	50                   	push   eax
c001cbdf:	53                   	push   ebx
c001cbe0:	57                   	push   edi
c001cbe1:	e8 b4 fe ff ff       	call   c001ca9a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cbe6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cbed:	83 c4 2c             	add    esp,0x2c
c001cbf0:	5b                   	pop    ebx
c001cbf1:	5e                   	pop    esi
c001cbf2:	5f                   	pop    edi
c001cbf3:	5d                   	pop    ebp
c001cbf4:	c3                   	ret    
c001cbf5:	90                   	nop

c001cbf6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cbf6:	55                   	push   ebp
c001cbf7:	57                   	push   edi
c001cbf8:	56                   	push   esi
c001cbf9:	53                   	push   ebx
c001cbfa:	31 db                	xor    ebx,ebx
c001cbfc:	83 ec 0c             	sub    esp,0xc
c001cbff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc03:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cc07:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cc0a:	f7 c7 01 00 00 00    	test   edi,0x1
c001cc10:	74 7a                	je     c001cc8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc12:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc16:	89 d8                	mov    eax,ebx
c001cc18:	c1 e0 07             	shl    eax,0x7
c001cc1b:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cc22:	55                   	push   ebp
c001cc23:	56                   	push   esi
c001cc24:	e8 29 fe ff ff       	call   c001ca52 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cc29:	5a                   	pop    edx
c001cc2a:	59                   	pop    ecx
c001cc2b:	83 f8 01             	cmp    eax,0x1
c001cc2e:	75 21                	jne    c001cc51 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cc30:	50                   	push   eax
c001cc31:	53                   	push   ebx
c001cc32:	55                   	push   ebp
c001cc33:	56                   	push   esi
c001cc34:	e8 ab fe ff ff       	call   c001cae4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc39:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cc40:	e8 ee ae fe ff       	call   c0007b33 <malloc>
c001cc45:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc48:	89 c5                	mov    ebp,eax
c001cc4a:	e8 c1 10 00 00       	call   c001dd10 <SATA::SATA()>
c001cc4f:	eb 24                	jmp    c001cc75 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cc51:	83 f8 04             	cmp    eax,0x4
c001cc54:	75 36                	jne    c001cc8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc56:	51                   	push   ecx
c001cc57:	53                   	push   ebx
c001cc58:	55                   	push   ebp
c001cc59:	56                   	push   esi
c001cc5a:	e8 85 fe ff ff       	call   c001cae4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc5f:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cc66:	e8 c8 ae fe ff       	call   c0007b33 <malloc>
c001cc6b:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc6e:	89 c5                	mov    ebp,eax
c001cc70:	e8 f5 17 00 00       	call   c001e46a <SATAPI::SATAPI()>
c001cc75:	58                   	pop    eax
c001cc76:	5a                   	pop    edx
c001cc77:	55                   	push   ebp
c001cc78:	56                   	push   esi
c001cc79:	e8 82 fd fe ff       	call   c000ca00 <Device::addChild(Device*)>
c001cc7e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cc81:	56                   	push   esi
c001cc82:	6a 00                	push   0x0
c001cc84:	53                   	push   ebx
c001cc85:	55                   	push   ebp
c001cc86:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cc89:	83 c4 20             	add    esp,0x20
c001cc8c:	d1 ef                	shr    edi,1
c001cc8e:	43                   	inc    ebx
c001cc8f:	83 fb 20             	cmp    ebx,0x20
c001cc92:	0f 85 72 ff ff ff    	jne    c001cc0a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cc98:	83 c4 0c             	add    esp,0xc
c001cc9b:	5b                   	pop    ebx
c001cc9c:	5e                   	pop    esi
c001cc9d:	5f                   	pop    edi
c001cc9e:	5d                   	pop    ebp
c001cc9f:	c3                   	ret    

c001cca0 <SATABus::open(int, int, void*)>:
c001cca0:	83 ec 14             	sub    esp,0x14
c001cca3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cca7:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001ccad:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ccb3:	52                   	push   edx
c001ccb4:	50                   	push   eax
c001ccb5:	e8 3c ff ff ff       	call   c001cbf6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ccba:	31 c0                	xor    eax,eax
c001ccbc:	83 c4 1c             	add    esp,0x1c
c001ccbf:	c3                   	ret    

c001ccc0 <ATA::close(int, int, void*)>:
c001ccc0:	83 ec 0c             	sub    esp,0xc
c001ccc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccc7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cccd:	85 c0                	test   eax,eax
c001cccf:	74 0c                	je     c001ccdd <ATA::close(int, int, void*)+0x1d>
c001ccd1:	8b 10                	mov    edx,DWORD PTR [eax]
c001ccd3:	83 ec 0c             	sub    esp,0xc
c001ccd6:	50                   	push   eax
c001ccd7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ccda:	83 c4 10             	add    esp,0x10
c001ccdd:	31 c0                	xor    eax,eax
c001ccdf:	83 c4 0c             	add    esp,0xc
c001cce2:	c3                   	ret    
c001cce3:	90                   	nop

c001cce4 <ATA::powerSaving(PowerSavingLevel)>:
c001cce4:	c3                   	ret    
c001cce5:	90                   	nop

c001cce6 <ATA::ATA()>:
c001cce6:	83 ec 0c             	sub    esp,0xc
c001cce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cced:	83 ec 04             	sub    esp,0x4
c001ccf0:	68 00 02 00 00       	push   0x200
c001ccf5:	68 51 35 02 c0       	push   0xc0023551
c001ccfa:	50                   	push   eax
c001ccfb:	e8 ce 00 ff ff       	call   c000cdce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cd00:	83 c4 10             	add    esp,0x10
c001cd03:	ba c4 34 02 c0       	mov    edx,0xc00234c4
c001cd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd0c:	89 10                	mov    DWORD PTR [eax],edx
c001cd0e:	90                   	nop
c001cd0f:	83 c4 0c             	add    esp,0xc
c001cd12:	c3                   	ret    
c001cd13:	90                   	nop

c001cd14 <ATA::flush(bool)>:
c001cd14:	53                   	push   ebx
c001cd15:	83 ec 08             	sub    esp,0x8
c001cd18:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cd1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd21:	83 f8 01             	cmp    eax,0x1
c001cd24:	19 c0                	sbb    eax,eax
c001cd26:	83 e0 fd             	and    eax,0xfffffffd
c001cd29:	05 ea 00 00 00       	add    eax,0xea
c001cd2e:	50                   	push   eax
c001cd2f:	6a 07                	push   0x7
c001cd31:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd38:	50                   	push   eax
c001cd39:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd3f:	e8 18 f1 ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd44:	83 c4 0c             	add    esp,0xc
c001cd47:	6a 00                	push   0x0
c001cd49:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd50:	50                   	push   eax
c001cd51:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd57:	e8 e4 fb ff ff       	call   c001c940 <IDE::polling(unsigned char, unsigned int)>
c001cd5c:	83 c4 18             	add    esp,0x18
c001cd5f:	5b                   	pop    ebx
c001cd60:	c3                   	ret    
c001cd61:	90                   	nop

c001cd62 <ATA::readyForCommand()>:
c001cd62:	56                   	push   esi
c001cd63:	53                   	push   ebx
c001cd64:	53                   	push   ebx
c001cd65:	31 db                	xor    ebx,ebx
c001cd67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd6b:	51                   	push   ecx
c001cd6c:	6a 0c                	push   0xc
c001cd6e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cd75:	50                   	push   eax
c001cd76:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cd7c:	e8 9b f1 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001cd81:	83 c4 10             	add    esp,0x10
c001cd84:	a8 88                	test   al,0x88
c001cd86:	74 1f                	je     c001cda7 <ATA::readyForCommand()+0x45>
c001cd88:	43                   	inc    ebx
c001cd89:	83 fb 63             	cmp    ebx,0x63
c001cd8c:	7e dd                	jle    c001cd6b <ATA::readyForCommand()+0x9>
c001cd8e:	83 ec 0c             	sub    esp,0xc
c001cd91:	6a 0a                	push   0xa
c001cd93:	e8 f0 96 ff ff       	call   c0016488 <milliTenthSleep(unsigned int)>
c001cd98:	83 c4 10             	add    esp,0x10
c001cd9b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cda1:	75 c8                	jne    c001cd6b <ATA::readyForCommand()+0x9>
c001cda3:	31 c0                	xor    eax,eax
c001cda5:	eb 02                	jmp    c001cda9 <ATA::readyForCommand()+0x47>
c001cda7:	b0 01                	mov    al,0x1
c001cda9:	5a                   	pop    edx
c001cdaa:	5b                   	pop    ebx
c001cdab:	5e                   	pop    esi
c001cdac:	c3                   	ret    
c001cdad:	90                   	nop

c001cdae <ATA::access(unsigned long long, int, void*, bool)>:
c001cdae:	55                   	push   ebp
c001cdaf:	57                   	push   edi
c001cdb0:	56                   	push   esi
c001cdb1:	53                   	push   ebx
c001cdb2:	83 ec 2c             	sub    esp,0x2c
c001cdb5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cdb9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cdbd:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cdc1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cdc5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cdc9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cdcd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cdd1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cdd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cddb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cde1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cde5:	c1 e0 06             	shl    eax,0x6
c001cde8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cdf0:	74 5b                	je     c001ce4d <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001cdf2:	89 fa                	mov    edx,edi
c001cdf4:	89 f0                	mov    eax,esi
c001cdf6:	c1 ea 1c             	shr    edx,0x1c
c001cdf9:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001cdfd:	89 d1                	mov    ecx,edx
c001cdff:	09 c1                	or     ecx,eax
c001ce01:	74 25                	je     c001ce28 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001ce03:	31 ed                	xor    ebp,ebp
c001ce05:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001ce0c:	89 fa                	mov    edx,edi
c001ce0e:	89 f0                	mov    eax,esi
c001ce10:	0f ad d0             	shrd   eax,edx,cl
c001ce13:	d3 ea                	shr    edx,cl
c001ce15:	f6 c1 20             	test   cl,0x20
c001ce18:	74 02                	je     c001ce1c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001ce1a:	89 d0                	mov    eax,edx
c001ce1c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ce20:	45                   	inc    ebp
c001ce21:	83 fd 06             	cmp    ebp,0x6
c001ce24:	75 df                	jne    c001ce05 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001ce26:	eb 71                	jmp    c001ce99 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001ce28:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001ce2d:	89 f0                	mov    eax,esi
c001ce2f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce36:	0f ac f8 10          	shrd   eax,edi,0x10
c001ce3a:	bf 01 00 00 00       	mov    edi,0x1
c001ce3f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ce43:	c1 ee 18             	shr    esi,0x18
c001ce46:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce4b:	eb 53                	jmp    c001cea0 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ce4d:	6a 00                	push   0x0
c001ce4f:	6a 3f                	push   0x3f
c001ce51:	57                   	push   edi
c001ce52:	56                   	push   esi
c001ce53:	e8 d8 2a 00 00       	call   c001f930 <__umoddi3>
c001ce58:	83 c4 10             	add    esp,0x10
c001ce5b:	40                   	inc    eax
c001ce5c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ce60:	6a 00                	push   0x0
c001ce62:	68 f0 03 00 00       	push   0x3f0
c001ce67:	57                   	push   edi
c001ce68:	56                   	push   esi
c001ce69:	e8 c2 29 00 00       	call   c001f830 <__udivdi3>
c001ce6e:	83 c4 10             	add    esp,0x10
c001ce71:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ce76:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce7d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce82:	6a 00                	push   0x0
c001ce84:	6a 3f                	push   0x3f
c001ce86:	57                   	push   edi
c001ce87:	31 ff                	xor    edi,edi
c001ce89:	56                   	push   esi
c001ce8a:	e8 a1 29 00 00       	call   c001f830 <__udivdi3>
c001ce8f:	83 c4 10             	add    esp,0x10
c001ce92:	83 e0 0f             	and    eax,0xf
c001ce95:	89 c6                	mov    esi,eax
c001ce97:	eb 07                	jmp    c001cea0 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ce99:	31 f6                	xor    esi,esi
c001ce9b:	bf 02 00 00 00       	mov    edi,0x2
c001cea0:	50                   	push   eax
c001cea1:	6a 00                	push   0x0
c001cea3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ceaa:	50                   	push   eax
c001ceab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ceaf:	e8 b6 f1 ff ff       	call   c001c06a <IDE::enableIRQs(unsigned char, bool)>
c001ceb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ceb7:	e8 a6 fe ff ff       	call   c001cd62 <ATA::readyForCommand()>
c001cebc:	83 c4 10             	add    esp,0x10
c001cebf:	84 c0                	test   al,al
c001cec1:	75 0a                	jne    c001cecd <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001cec3:	be 01 00 00 00       	mov    esi,0x1
c001cec8:	e9 9b 02 00 00       	jmp    c001d168 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cecd:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ced3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ced9:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cee0:	c1 e0 04             	shl    eax,0x4
c001cee3:	09 c6                	or     esi,eax
c001cee5:	f7 c7 03 00 00 00    	test   edi,0x3
c001ceeb:	75 05                	jne    c001cef2 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001ceed:	83 ce a0             	or     esi,0xffffffa0
c001cef0:	eb 03                	jmp    c001cef5 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cef2:	83 ce e0             	or     esi,0xffffffe0
c001cef5:	89 f0                	mov    eax,esi
c001cef7:	0f b6 f0             	movzx  esi,al
c001cefa:	56                   	push   esi
c001cefb:	6a 06                	push   0x6
c001cefd:	51                   	push   ecx
c001cefe:	52                   	push   edx
c001ceff:	e8 58 ef ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf04:	83 c4 10             	add    esp,0x10
c001cf07:	6a 00                	push   0x0
c001cf09:	6a 01                	push   0x1
c001cf0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf12:	50                   	push   eax
c001cf13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf19:	e8 3e ef ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf1e:	89 f8                	mov    eax,edi
c001cf20:	83 c4 10             	add    esp,0x10
c001cf23:	0f b6 f0             	movzx  esi,al
c001cf26:	83 fe 02             	cmp    esi,0x2
c001cf29:	75 6e                	jne    c001cf99 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001cf2b:	6a 00                	push   0x0
c001cf2d:	6a 08                	push   0x8
c001cf2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf36:	50                   	push   eax
c001cf37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf3d:	e8 1a ef ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf42:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cf47:	50                   	push   eax
c001cf48:	6a 09                	push   0x9
c001cf4a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf51:	50                   	push   eax
c001cf52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf58:	e8 ff ee ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf5d:	83 c4 20             	add    esp,0x20
c001cf60:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cf65:	50                   	push   eax
c001cf66:	6a 0a                	push   0xa
c001cf68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf6f:	50                   	push   eax
c001cf70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf76:	e8 e1 ee ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf7b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cf80:	50                   	push   eax
c001cf81:	6a 0b                	push   0xb
c001cf83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf8a:	50                   	push   eax
c001cf8b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf91:	e8 c6 ee ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf96:	83 c4 20             	add    esp,0x20
c001cf99:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cf9e:	50                   	push   eax
c001cf9f:	6a 02                	push   0x2
c001cfa1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfa8:	50                   	push   eax
c001cfa9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfaf:	e8 a8 ee ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfb4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cfb9:	50                   	push   eax
c001cfba:	6a 03                	push   0x3
c001cfbc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfc3:	50                   	push   eax
c001cfc4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfca:	e8 8d ee ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfcf:	83 c4 20             	add    esp,0x20
c001cfd2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cfd7:	50                   	push   eax
c001cfd8:	6a 04                	push   0x4
c001cfda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfe1:	50                   	push   eax
c001cfe2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfe8:	e8 6f ee ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cff2:	50                   	push   eax
c001cff3:	6a 05                	push   0x5
c001cff5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cffc:	50                   	push   eax
c001cffd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d003:	e8 54 ee ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d008:	83 c4 20             	add    esp,0x20
c001d00b:	83 fe 02             	cmp    esi,0x2
c001d00e:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001d013:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001d018:	85 c9                	test   ecx,ecx
c001d01a:	74 07                	je     c001d023 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001d01c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d021:	75 47                	jne    c001d06a <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001d023:	89 f8                	mov    eax,edi
c001d025:	0f b6 f8             	movzx  edi,al
c001d028:	31 c0                	xor    eax,eax
c001d02a:	83 ff 02             	cmp    edi,0x2
c001d02d:	0f 95 c0             	setne  al
c001d030:	89 c6                	mov    esi,eax
c001d032:	74 0c                	je     c001d040 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d034:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d039:	b8 30 00 00 00       	mov    eax,0x30
c001d03e:	75 2f                	jne    c001d06f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001d040:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d044:	83 f2 01             	xor    edx,0x1
c001d047:	85 c9                	test   ecx,ecx
c001d049:	74 09                	je     c001d054 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001d04b:	84 d2                	test   dl,dl
c001d04d:	b8 24 00 00 00       	mov    eax,0x24
c001d052:	75 1b                	jne    c001d06f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001d054:	85 f6                	test   esi,esi
c001d056:	0f 84 67 fe ff ff    	je     c001cec3 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d05c:	84 d2                	test   dl,dl
c001d05e:	b8 20 00 00 00       	mov    eax,0x20
c001d063:	75 0a                	jne    c001d06f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001d065:	e9 59 fe ff ff       	jmp    c001cec3 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d06a:	b8 34 00 00 00       	mov    eax,0x34
c001d06f:	50                   	push   eax
c001d070:	6a 07                	push   0x7
c001d072:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d079:	50                   	push   eax
c001d07a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d080:	e8 d7 ed ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d085:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d089:	83 c4 10             	add    esp,0x10
c001d08c:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001d091:	85 f6                	test   esi,esi
c001d093:	0f 84 b5 00 00 00    	je     c001d14e <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001d099:	50                   	push   eax
c001d09a:	6a 01                	push   0x1
c001d09c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0a3:	50                   	push   eax
c001d0a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0aa:	e8 91 f8 ff ff       	call   c001c940 <IDE::polling(unsigned char, unsigned int)>
c001d0af:	83 c4 10             	add    esp,0x10
c001d0b2:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d0b8:	0f b6 c0             	movzx  eax,al
c001d0bb:	85 c0                	test   eax,eax
c001d0bd:	74 1f                	je     c001d0de <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001d0bf:	50                   	push   eax
c001d0c0:	89 c6                	mov    esi,eax
c001d0c2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d0c9:	0f b6 d2             	movzx  edx,dl
c001d0cc:	50                   	push   eax
c001d0cd:	52                   	push   edx
c001d0ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0d4:	e8 ad f7 ff ff       	call   c001c886 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d0d9:	e9 87 00 00 00       	jmp    c001d165 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001d0de:	85 ed                	test   ebp,ebp
c001d0e0:	74 3b                	je     c001d11d <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001d0e2:	31 ff                	xor    edi,edi
c001d0e4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d0e8:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001d0ec:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001d0f1:	50                   	push   eax
c001d0f2:	50                   	push   eax
c001d0f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0fa:	50                   	push   eax
c001d0fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d101:	e8 44 ed ff ff       	call   c001be4a <IDE::getBase(unsigned char)>
c001d106:	89 c2                	mov    edx,eax
c001d108:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001d10d:	66 ef                	out    dx,ax
c001d10f:	47                   	inc    edi
c001d110:	83 c4 10             	add    esp,0x10
c001d113:	81 ff 00 01 00 00    	cmp    edi,0x100
c001d119:	75 c9                	jne    c001d0e4 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001d11b:	eb 23                	jmp    c001d140 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001d11d:	51                   	push   ecx
c001d11e:	0f b6 d2             	movzx  edx,dl
c001d121:	51                   	push   ecx
c001d122:	52                   	push   edx
c001d123:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d129:	e8 1c ed ff ff       	call   c001be4a <IDE::getBase(unsigned char)>
c001d12e:	b9 00 01 00 00       	mov    ecx,0x100
c001d133:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d137:	89 c2                	mov    edx,eax
c001d139:	fc                   	cld    
c001d13a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d13d:	83 c4 10             	add    esp,0x10
c001d140:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d148:	4e                   	dec    esi
c001d149:	e9 43 ff ff ff       	jmp    c001d091 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001d14e:	31 f6                	xor    esi,esi
c001d150:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d155:	74 11                	je     c001d168 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001d157:	50                   	push   eax
c001d158:	50                   	push   eax
c001d159:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001d15e:	50                   	push   eax
c001d15f:	53                   	push   ebx
c001d160:	e8 af fb ff ff       	call   c001cd14 <ATA::flush(bool)>
c001d165:	83 c4 10             	add    esp,0x10
c001d168:	83 c4 2c             	add    esp,0x2c
c001d16b:	89 f0                	mov    eax,esi
c001d16d:	5b                   	pop    ebx
c001d16e:	5e                   	pop    esi
c001d16f:	5f                   	pop    edi
c001d170:	5d                   	pop    ebp
c001d171:	c3                   	ret    

c001d172 <ATA::detectCHS()>:
c001d172:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d176:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d17c:	c1 e0 06             	shl    eax,0x6
c001d17f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d185:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d18f:	c7 44 24 04 a8 34 02 c0 	mov    DWORD PTR [esp+0x4],0xc00234a8
c001d197:	e9 a3 44 ff ff       	jmp    c001163f <KePanic(char const*)>

c001d19c <ATA::open(int, int, void*)>:
c001d19c:	53                   	push   ebx
c001d19d:	83 ec 08             	sub    esp,0x8
c001d1a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d1a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1ac:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d1b2:	c1 e0 06             	shl    eax,0x6
c001d1b5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d1bb:	01 d0                	add    eax,edx
c001d1bd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d1c4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d1ca:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d1d1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d1db:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d1e2:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d1e8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d1ef:	75 0c                	jne    c001d1fd <ATA::open(int, int, void*)+0x61>
c001d1f1:	83 ec 0c             	sub    esp,0xc
c001d1f4:	53                   	push   ebx
c001d1f5:	e8 78 ff ff ff       	call   c001d172 <ATA::detectCHS()>
c001d1fa:	83 c4 10             	add    esp,0x10
c001d1fd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d203:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d209:	c1 e0 06             	shl    eax,0x6
c001d20c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d213:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d21d:	d1 e8                	shr    eax,1
c001d21f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d225:	6a 04                	push   0x4
c001d227:	6a 0c                	push   0xc
c001d229:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d230:	50                   	push   eax
c001d231:	52                   	push   edx
c001d232:	e8 25 ec ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d237:	90                   	nop
c001d238:	90                   	nop
c001d239:	6a 00                	push   0x0
c001d23b:	6a 0c                	push   0xc
c001d23d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d244:	50                   	push   eax
c001d245:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d24b:	e8 0c ec ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d250:	83 c4 14             	add    esp,0x14
c001d253:	53                   	push   ebx
c001d254:	e8 dd fb fe ff       	call   c000ce36 <PhysicalDisk::startCache()>
c001d259:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d25c:	e8 21 0e ff ff       	call   c000e082 <createPartitionsForDisk(PhysicalDisk*)>
c001d261:	83 c4 18             	add    esp,0x18
c001d264:	31 c0                	xor    eax,eax
c001d266:	5b                   	pop    ebx
c001d267:	c3                   	ret    

c001d268 <combineCharAndColour(char, unsigned char)>:
c001d268:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d26d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d273:	c1 e0 08             	shl    eax,0x8
c001d276:	09 d0                	or     eax,edx
c001d278:	c3                   	ret    

c001d279 <combineColours(unsigned char, unsigned char)>:
c001d279:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d27e:	c1 e0 04             	shl    eax,0x4
c001d281:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d285:	c3                   	ret    

c001d286 <ATA::read(unsigned long long, int, void*)>:
c001d286:	55                   	push   ebp
c001d287:	57                   	push   edi
c001d288:	56                   	push   esi
c001d289:	be 04 00 00 00       	mov    esi,0x4
c001d28e:	53                   	push   ebx
c001d28f:	83 ec 0c             	sub    esp,0xc
c001d292:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d296:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d29a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d29e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d2a2:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d2a5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d2ab:	0f 87 a1 01 00 00    	ja     c001d452 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d2b1:	85 c9                	test   ecx,ecx
c001d2b3:	be 06 00 00 00       	mov    esi,0x6
c001d2b8:	0f 84 94 01 00 00    	je     c001d452 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d2be:	55                   	push   ebp
c001d2bf:	55                   	push   ebp
c001d2c0:	6a 00                	push   0x0
c001d2c2:	51                   	push   ecx
c001d2c3:	53                   	push   ebx
c001d2c4:	52                   	push   edx
c001d2c5:	50                   	push   eax
c001d2c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d2ca:	e8 df fa ff ff       	call   c001cdae <ATA::access(unsigned long long, int, void*, bool)>
c001d2cf:	83 c4 20             	add    esp,0x20
c001d2d2:	85 c0                	test   eax,eax
c001d2d4:	89 c6                	mov    esi,eax
c001d2d6:	0f 85 71 01 00 00    	jne    c001d44d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d2dc:	50                   	push   eax
c001d2dd:	bd 10 27 00 00       	mov    ebp,0x2710
c001d2e2:	50                   	push   eax
c001d2e3:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d2e9:	6a 0f                	push   0xf
c001d2eb:	6a 00                	push   0x0
c001d2ed:	89 da                	mov    edx,ebx
c001d2ef:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d2f5:	e8 7f ff ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001d2fa:	59                   	pop    ecx
c001d2fb:	b9 0a 00 00 00       	mov    ecx,0xa
c001d300:	5b                   	pop    ebx
c001d301:	0f b6 d8             	movzx  ebx,al
c001d304:	89 d0                	mov    eax,edx
c001d306:	53                   	push   ebx
c001d307:	99                   	cdq    
c001d308:	f7 fd                	idiv   ebp
c001d30a:	99                   	cdq    
c001d30b:	f7 f9                	idiv   ecx
c001d30d:	83 c2 30             	add    edx,0x30
c001d310:	0f b6 d2             	movzx  edx,dl
c001d313:	52                   	push   edx
c001d314:	e8 4f ff ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d319:	5f                   	pop    edi
c001d31a:	bf e8 03 00 00       	mov    edi,0x3e8
c001d31f:	5a                   	pop    edx
c001d320:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d326:	53                   	push   ebx
c001d327:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d32c:	99                   	cdq    
c001d32d:	f7 ff                	idiv   edi
c001d32f:	99                   	cdq    
c001d330:	f7 f9                	idiv   ecx
c001d332:	8d 42 30             	lea    eax,[edx+0x30]
c001d335:	0f b6 c0             	movzx  eax,al
c001d338:	50                   	push   eax
c001d339:	e8 2a ff ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d33e:	5f                   	pop    edi
c001d33f:	bf 64 00 00 00       	mov    edi,0x64
c001d344:	5a                   	pop    edx
c001d345:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d34b:	53                   	push   ebx
c001d34c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d351:	99                   	cdq    
c001d352:	f7 ff                	idiv   edi
c001d354:	99                   	cdq    
c001d355:	f7 f9                	idiv   ecx
c001d357:	8d 42 30             	lea    eax,[edx+0x30]
c001d35a:	0f b6 c0             	movzx  eax,al
c001d35d:	50                   	push   eax
c001d35e:	e8 05 ff ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d363:	5a                   	pop    edx
c001d364:	5a                   	pop    edx
c001d365:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d36b:	53                   	push   ebx
c001d36c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d371:	99                   	cdq    
c001d372:	f7 f9                	idiv   ecx
c001d374:	99                   	cdq    
c001d375:	f7 f9                	idiv   ecx
c001d377:	8d 42 30             	lea    eax,[edx+0x30]
c001d37a:	0f b6 c0             	movzx  eax,al
c001d37d:	50                   	push   eax
c001d37e:	e8 e5 fe ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d383:	5a                   	pop    edx
c001d384:	5a                   	pop    edx
c001d385:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d38b:	53                   	push   ebx
c001d38c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d391:	99                   	cdq    
c001d392:	f7 f9                	idiv   ecx
c001d394:	83 c2 30             	add    edx,0x30
c001d397:	0f b6 d2             	movzx  edx,dl
c001d39a:	52                   	push   edx
c001d39b:	e8 c8 fe ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d3a0:	5a                   	pop    edx
c001d3a1:	5a                   	pop    edx
c001d3a2:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d3a8:	53                   	push   ebx
c001d3a9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3ae:	99                   	cdq    
c001d3af:	f7 fd                	idiv   ebp
c001d3b1:	99                   	cdq    
c001d3b2:	f7 f9                	idiv   ecx
c001d3b4:	8d 42 30             	lea    eax,[edx+0x30]
c001d3b7:	0f b6 c0             	movzx  eax,al
c001d3ba:	50                   	push   eax
c001d3bb:	e8 a8 fe ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d3c0:	5d                   	pop    ebp
c001d3c1:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d3c6:	5a                   	pop    edx
c001d3c7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d3cd:	53                   	push   ebx
c001d3ce:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3d3:	99                   	cdq    
c001d3d4:	f7 fd                	idiv   ebp
c001d3d6:	99                   	cdq    
c001d3d7:	f7 f9                	idiv   ecx
c001d3d9:	8d 42 30             	lea    eax,[edx+0x30]
c001d3dc:	0f b6 c0             	movzx  eax,al
c001d3df:	50                   	push   eax
c001d3e0:	e8 83 fe ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d3e5:	5d                   	pop    ebp
c001d3e6:	5a                   	pop    edx
c001d3e7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d3ed:	53                   	push   ebx
c001d3ee:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3f3:	99                   	cdq    
c001d3f4:	f7 ff                	idiv   edi
c001d3f6:	99                   	cdq    
c001d3f7:	f7 f9                	idiv   ecx
c001d3f9:	8d 42 30             	lea    eax,[edx+0x30]
c001d3fc:	0f b6 c0             	movzx  eax,al
c001d3ff:	50                   	push   eax
c001d400:	e8 63 fe ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d405:	5f                   	pop    edi
c001d406:	5d                   	pop    ebp
c001d407:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d40d:	53                   	push   ebx
c001d40e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d413:	99                   	cdq    
c001d414:	f7 f9                	idiv   ecx
c001d416:	99                   	cdq    
c001d417:	f7 f9                	idiv   ecx
c001d419:	8d 42 30             	lea    eax,[edx+0x30]
c001d41c:	0f b6 c0             	movzx  eax,al
c001d41f:	50                   	push   eax
c001d420:	e8 43 fe ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d425:	5a                   	pop    edx
c001d426:	5f                   	pop    edi
c001d427:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d42d:	53                   	push   ebx
c001d42e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d433:	99                   	cdq    
c001d434:	f7 f9                	idiv   ecx
c001d436:	83 c2 30             	add    edx,0x30
c001d439:	0f b6 d2             	movzx  edx,dl
c001d43c:	52                   	push   edx
c001d43d:	e8 26 fe ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d442:	83 c4 10             	add    esp,0x10
c001d445:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d44b:	eb 05                	jmp    c001d452 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d44d:	be 01 00 00 00       	mov    esi,0x1
c001d452:	83 c4 0c             	add    esp,0xc
c001d455:	89 f0                	mov    eax,esi
c001d457:	5b                   	pop    ebx
c001d458:	5e                   	pop    esi
c001d459:	5f                   	pop    edi
c001d45a:	5d                   	pop    ebp
c001d45b:	c3                   	ret    

c001d45c <ATA::write(unsigned long long, int, void*)>:
c001d45c:	55                   	push   ebp
c001d45d:	57                   	push   edi
c001d45e:	56                   	push   esi
c001d45f:	be 04 00 00 00       	mov    esi,0x4
c001d464:	53                   	push   ebx
c001d465:	83 ec 0c             	sub    esp,0xc
c001d468:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d46c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d470:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d474:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d478:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d47b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d481:	0f 87 9c 01 00 00    	ja     c001d623 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d487:	85 c9                	test   ecx,ecx
c001d489:	be 06 00 00 00       	mov    esi,0x6
c001d48e:	0f 84 8f 01 00 00    	je     c001d623 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d494:	55                   	push   ebp
c001d495:	55                   	push   ebp
c001d496:	6a 01                	push   0x1
c001d498:	51                   	push   ecx
c001d499:	53                   	push   ebx
c001d49a:	52                   	push   edx
c001d49b:	50                   	push   eax
c001d49c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d4a0:	e8 09 f9 ff ff       	call   c001cdae <ATA::access(unsigned long long, int, void*, bool)>
c001d4a5:	83 c4 20             	add    esp,0x20
c001d4a8:	85 c0                	test   eax,eax
c001d4aa:	89 c6                	mov    esi,eax
c001d4ac:	0f 85 6c 01 00 00    	jne    c001d61e <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d4b2:	50                   	push   eax
c001d4b3:	bd 10 27 00 00       	mov    ebp,0x2710
c001d4b8:	50                   	push   eax
c001d4b9:	6a 0f                	push   0xf
c001d4bb:	6a 00                	push   0x0
c001d4bd:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d4c3:	e8 b1 fd ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001d4c8:	5a                   	pop    edx
c001d4c9:	59                   	pop    ecx
c001d4ca:	b9 0a 00 00 00       	mov    ecx,0xa
c001d4cf:	0f b6 d8             	movzx  ebx,al
c001d4d2:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4d7:	53                   	push   ebx
c001d4d8:	99                   	cdq    
c001d4d9:	f7 fd                	idiv   ebp
c001d4db:	99                   	cdq    
c001d4dc:	f7 f9                	idiv   ecx
c001d4de:	8d 42 30             	lea    eax,[edx+0x30]
c001d4e1:	0f b6 c0             	movzx  eax,al
c001d4e4:	50                   	push   eax
c001d4e5:	e8 7e fd ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d4ea:	5f                   	pop    edi
c001d4eb:	bf e8 03 00 00       	mov    edi,0x3e8
c001d4f0:	5a                   	pop    edx
c001d4f1:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d4f7:	53                   	push   ebx
c001d4f8:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4fd:	99                   	cdq    
c001d4fe:	f7 ff                	idiv   edi
c001d500:	99                   	cdq    
c001d501:	f7 f9                	idiv   ecx
c001d503:	8d 42 30             	lea    eax,[edx+0x30]
c001d506:	0f b6 c0             	movzx  eax,al
c001d509:	50                   	push   eax
c001d50a:	e8 59 fd ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d50f:	5f                   	pop    edi
c001d510:	bf 64 00 00 00       	mov    edi,0x64
c001d515:	5a                   	pop    edx
c001d516:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d51c:	53                   	push   ebx
c001d51d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d522:	99                   	cdq    
c001d523:	f7 ff                	idiv   edi
c001d525:	99                   	cdq    
c001d526:	f7 f9                	idiv   ecx
c001d528:	8d 42 30             	lea    eax,[edx+0x30]
c001d52b:	0f b6 c0             	movzx  eax,al
c001d52e:	50                   	push   eax
c001d52f:	e8 34 fd ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d534:	5a                   	pop    edx
c001d535:	5a                   	pop    edx
c001d536:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d53c:	53                   	push   ebx
c001d53d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d542:	99                   	cdq    
c001d543:	f7 f9                	idiv   ecx
c001d545:	99                   	cdq    
c001d546:	f7 f9                	idiv   ecx
c001d548:	8d 42 30             	lea    eax,[edx+0x30]
c001d54b:	0f b6 c0             	movzx  eax,al
c001d54e:	50                   	push   eax
c001d54f:	e8 14 fd ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d554:	5a                   	pop    edx
c001d555:	5a                   	pop    edx
c001d556:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d55c:	53                   	push   ebx
c001d55d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d562:	99                   	cdq    
c001d563:	f7 f9                	idiv   ecx
c001d565:	83 c2 30             	add    edx,0x30
c001d568:	0f b6 d2             	movzx  edx,dl
c001d56b:	52                   	push   edx
c001d56c:	e8 f7 fc ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d571:	5a                   	pop    edx
c001d572:	5a                   	pop    edx
c001d573:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d579:	53                   	push   ebx
c001d57a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d57f:	99                   	cdq    
c001d580:	f7 fd                	idiv   ebp
c001d582:	99                   	cdq    
c001d583:	f7 f9                	idiv   ecx
c001d585:	8d 42 30             	lea    eax,[edx+0x30]
c001d588:	0f b6 c0             	movzx  eax,al
c001d58b:	50                   	push   eax
c001d58c:	e8 d7 fc ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d591:	5d                   	pop    ebp
c001d592:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d597:	5a                   	pop    edx
c001d598:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d59e:	53                   	push   ebx
c001d59f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5a4:	99                   	cdq    
c001d5a5:	f7 fd                	idiv   ebp
c001d5a7:	99                   	cdq    
c001d5a8:	f7 f9                	idiv   ecx
c001d5aa:	8d 42 30             	lea    eax,[edx+0x30]
c001d5ad:	0f b6 c0             	movzx  eax,al
c001d5b0:	50                   	push   eax
c001d5b1:	e8 b2 fc ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d5b6:	5d                   	pop    ebp
c001d5b7:	5a                   	pop    edx
c001d5b8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d5be:	53                   	push   ebx
c001d5bf:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5c4:	99                   	cdq    
c001d5c5:	f7 ff                	idiv   edi
c001d5c7:	99                   	cdq    
c001d5c8:	f7 f9                	idiv   ecx
c001d5ca:	8d 42 30             	lea    eax,[edx+0x30]
c001d5cd:	0f b6 c0             	movzx  eax,al
c001d5d0:	50                   	push   eax
c001d5d1:	e8 92 fc ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d5d6:	5f                   	pop    edi
c001d5d7:	5d                   	pop    ebp
c001d5d8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d5de:	53                   	push   ebx
c001d5df:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5e4:	99                   	cdq    
c001d5e5:	f7 f9                	idiv   ecx
c001d5e7:	99                   	cdq    
c001d5e8:	f7 f9                	idiv   ecx
c001d5ea:	8d 42 30             	lea    eax,[edx+0x30]
c001d5ed:	0f b6 c0             	movzx  eax,al
c001d5f0:	50                   	push   eax
c001d5f1:	e8 72 fc ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d5f6:	5a                   	pop    edx
c001d5f7:	5f                   	pop    edi
c001d5f8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d5fe:	53                   	push   ebx
c001d5ff:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d604:	99                   	cdq    
c001d605:	f7 f9                	idiv   ecx
c001d607:	83 c2 30             	add    edx,0x30
c001d60a:	0f b6 d2             	movzx  edx,dl
c001d60d:	52                   	push   edx
c001d60e:	e8 55 fc ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001d613:	83 c4 10             	add    esp,0x10
c001d616:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d61c:	eb 05                	jmp    c001d623 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d61e:	be 01 00 00 00       	mov    esi,0x1
c001d623:	83 c4 0c             	add    esp,0xc
c001d626:	89 f0                	mov    eax,esi
c001d628:	5b                   	pop    ebx
c001d629:	5e                   	pop    esi
c001d62a:	5f                   	pop    edi
c001d62b:	5d                   	pop    ebp
c001d62c:	c3                   	ret    
c001d62d:	90                   	nop

c001d62e <ATAPI::write(unsigned long long, int, void*)>:
c001d62e:	b8 03 00 00 00       	mov    eax,0x3
c001d633:	c3                   	ret    

c001d634 <ATAPI::close(int, int, void*)>:
c001d634:	83 ec 0c             	sub    esp,0xc
c001d637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d63b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d641:	85 c0                	test   eax,eax
c001d643:	74 0c                	je     c001d651 <ATAPI::close(int, int, void*)+0x1d>
c001d645:	8b 10                	mov    edx,DWORD PTR [eax]
c001d647:	83 ec 0c             	sub    esp,0xc
c001d64a:	50                   	push   eax
c001d64b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d64e:	83 c4 10             	add    esp,0x10
c001d651:	31 c0                	xor    eax,eax
c001d653:	83 c4 0c             	add    esp,0xc
c001d656:	c3                   	ret    
c001d657:	90                   	nop

c001d658 <ATAPI::ATAPI()>:
c001d658:	83 ec 0c             	sub    esp,0xc
c001d65b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d65f:	83 ec 04             	sub    esp,0x4
c001d662:	68 00 08 00 00       	push   0x800
c001d667:	68 f1 35 02 c0       	push   0xc00235f1
c001d66c:	50                   	push   eax
c001d66d:	e8 5c f7 fe ff       	call   c000cdce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d672:	83 c4 10             	add    esp,0x10
c001d675:	ba 0c 35 02 c0       	mov    edx,0xc002350c
c001d67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d67e:	89 10                	mov    DWORD PTR [eax],edx
c001d680:	90                   	nop
c001d681:	83 c4 0c             	add    esp,0xc
c001d684:	c3                   	ret    
c001d685:	90                   	nop

c001d686 <ATAPI::readyForCommand()>:
c001d686:	56                   	push   esi
c001d687:	53                   	push   ebx
c001d688:	53                   	push   ebx
c001d689:	31 db                	xor    ebx,ebx
c001d68b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d68f:	51                   	push   ecx
c001d690:	6a 0c                	push   0xc
c001d692:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d699:	50                   	push   eax
c001d69a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d6a0:	e8 77 e8 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001d6a5:	83 c4 10             	add    esp,0x10
c001d6a8:	a8 88                	test   al,0x88
c001d6aa:	74 25                	je     c001d6d1 <ATAPI::readyForCommand()+0x4b>
c001d6ac:	43                   	inc    ebx
c001d6ad:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d6b3:	7e da                	jle    c001d68f <ATAPI::readyForCommand()+0x9>
c001d6b5:	83 ec 0c             	sub    esp,0xc
c001d6b8:	68 5e 01 00 00       	push   0x15e
c001d6bd:	e8 c6 8d ff ff       	call   c0016488 <milliTenthSleep(unsigned int)>
c001d6c2:	83 c4 10             	add    esp,0x10
c001d6c5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d6cb:	75 c2                	jne    c001d68f <ATAPI::readyForCommand()+0x9>
c001d6cd:	31 c0                	xor    eax,eax
c001d6cf:	eb 02                	jmp    c001d6d3 <ATAPI::readyForCommand()+0x4d>
c001d6d1:	b0 01                	mov    al,0x1
c001d6d3:	5a                   	pop    edx
c001d6d4:	5b                   	pop    ebx
c001d6d5:	5e                   	pop    esi
c001d6d6:	c3                   	ret    
c001d6d7:	90                   	nop

c001d6d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d6d8:	55                   	push   ebp
c001d6d9:	57                   	push   edi
c001d6da:	56                   	push   esi
c001d6db:	53                   	push   ebx
c001d6dc:	83 ec 20             	sub    esp,0x20
c001d6df:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d6e3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d6e7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d6eb:	6a 01                	push   0x1
c001d6ed:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6f4:	50                   	push   eax
c001d6f5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6fb:	e8 6a e9 ff ff       	call   c001c06a <IDE::enableIRQs(unsigned char, bool)>
c001d700:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d707:	59                   	pop    ecx
c001d708:	5e                   	pop    esi
c001d709:	50                   	push   eax
c001d70a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d710:	e8 21 e7 ff ff       	call   c001be36 <IDE::prepareInterrupt(unsigned char)>
c001d715:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d718:	e8 69 ff ff ff       	call   c001d686 <ATAPI::readyForCommand()>
c001d71d:	83 c4 10             	add    esp,0x10
c001d720:	84 c0                	test   al,al
c001d722:	75 0a                	jne    c001d72e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d724:	bb 01 00 00 00       	mov    ebx,0x1
c001d729:	e9 5f 02 00 00       	jmp    c001d98d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d72e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d734:	c1 e0 04             	shl    eax,0x4
c001d737:	0f b6 c0             	movzx  eax,al
c001d73a:	50                   	push   eax
c001d73b:	6a 06                	push   0x6
c001d73d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d744:	50                   	push   eax
c001d745:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d74b:	e8 0c e7 ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d750:	6a 00                	push   0x0
c001d752:	6a 01                	push   0x1
c001d754:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d75b:	50                   	push   eax
c001d75c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d762:	e8 f5 e6 ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d767:	83 c4 20             	add    esp,0x20
c001d76a:	0f b6 c3             	movzx  eax,bl
c001d76d:	50                   	push   eax
c001d76e:	0f b6 df             	movzx  ebx,bh
c001d771:	6a 04                	push   0x4
c001d773:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d77a:	50                   	push   eax
c001d77b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d781:	e8 d6 e6 ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d786:	53                   	push   ebx
c001d787:	6a 05                	push   0x5
c001d789:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d790:	50                   	push   eax
c001d791:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d797:	e8 c0 e6 ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d79c:	83 c4 20             	add    esp,0x20
c001d79f:	68 a0 00 00 00       	push   0xa0
c001d7a4:	6a 07                	push   0x7
c001d7a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7ad:	50                   	push   eax
c001d7ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7b4:	e8 a3 e6 ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7b9:	83 c4 0c             	add    esp,0xc
c001d7bc:	6a 01                	push   0x1
c001d7be:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7c5:	50                   	push   eax
c001d7c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7cc:	e8 6f f1 ff ff       	call   c001c940 <IDE::polling(unsigned char, unsigned int)>
c001d7d1:	83 c4 10             	add    esp,0x10
c001d7d4:	0f b6 d8             	movzx  ebx,al
c001d7d7:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d7dd:	85 db                	test   ebx,ebx
c001d7df:	74 20                	je     c001d801 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d7e1:	53                   	push   ebx
c001d7e2:	0f b6 c0             	movzx  eax,al
c001d7e5:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d7ec:	52                   	push   edx
c001d7ed:	50                   	push   eax
c001d7ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7f4:	e8 8d f0 ff ff       	call   c001c886 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d7f9:	83 c4 10             	add    esp,0x10
c001d7fc:	e9 8c 01 00 00       	jmp    c001d98d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d801:	52                   	push   edx
c001d802:	0f b6 c0             	movzx  eax,al
c001d805:	52                   	push   edx
c001d806:	50                   	push   eax
c001d807:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d80d:	e8 38 e6 ff ff       	call   c001be4a <IDE::getBase(unsigned char)>
c001d812:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d816:	b9 06 00 00 00       	mov    ecx,0x6
c001d81b:	89 c2                	mov    edx,eax
c001d81d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d820:	89 e8                	mov    eax,ebp
c001d822:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d826:	83 c4 10             	add    esp,0x10
c001d829:	0f b6 c0             	movzx  eax,al
c001d82c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d830:	85 db                	test   ebx,ebx
c001d832:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d838:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d83f:	0f 84 eb 00 00 00    	je     c001d930 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d845:	55                   	push   ebp
c001d846:	55                   	push   ebp
c001d847:	52                   	push   edx
c001d848:	50                   	push   eax
c001d849:	e8 82 e7 ff ff       	call   c001bfd0 <IDE::waitInterrupt(unsigned char)>
c001d84e:	83 c4 10             	add    esp,0x10
c001d851:	84 c0                	test   al,al
c001d853:	0f 84 cb fe ff ff    	je     c001d724 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d859:	56                   	push   esi
c001d85a:	56                   	push   esi
c001d85b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d862:	50                   	push   eax
c001d863:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d869:	e8 c8 e5 ff ff       	call   c001be36 <IDE::prepareInterrupt(unsigned char)>
c001d86e:	83 c4 0c             	add    esp,0xc
c001d871:	6a 04                	push   0x4
c001d873:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d87a:	50                   	push   eax
c001d87b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d881:	e8 96 e6 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001d886:	83 c4 0c             	add    esp,0xc
c001d889:	6a 05                	push   0x5
c001d88b:	89 c6                	mov    esi,eax
c001d88d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d894:	50                   	push   eax
c001d895:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d89b:	e8 7c e6 ff ff       	call   c001bf1c <IDE::read(unsigned char, unsigned char)>
c001d8a0:	83 c4 10             	add    esp,0x10
c001d8a3:	0f b6 e8             	movzx  ebp,al
c001d8a6:	89 f0                	mov    eax,esi
c001d8a8:	c1 e5 08             	shl    ebp,0x8
c001d8ab:	0f b6 f0             	movzx  esi,al
c001d8ae:	09 f5                	or     ebp,esi
c001d8b0:	31 f6                	xor    esi,esi
c001d8b2:	d1 fd                	sar    ebp,1
c001d8b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d8b9:	74 5c                	je     c001d917 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d8bb:	39 ee                	cmp    esi,ebp
c001d8bd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8c3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d8ca:	75 0d                	jne    c001d8d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d8cc:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d8cf:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d8d3:	4b                   	dec    ebx
c001d8d4:	e9 57 ff ff ff       	jmp    c001d830 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d8d9:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d8dd:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d8e1:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d8e6:	51                   	push   ecx
c001d8e7:	51                   	push   ecx
c001d8e8:	52                   	push   edx
c001d8e9:	50                   	push   eax
c001d8ea:	e8 5b e5 ff ff       	call   c001be4a <IDE::getBase(unsigned char)>
c001d8ef:	89 c2                	mov    edx,eax
c001d8f1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d8f6:	66 ef                	out    dx,ax
c001d8f8:	46                   	inc    esi
c001d8f9:	83 c4 10             	add    esp,0x10
c001d8fc:	eb bd                	jmp    c001d8bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d8fe:	51                   	push   ecx
c001d8ff:	51                   	push   ecx
c001d900:	52                   	push   edx
c001d901:	50                   	push   eax
c001d902:	e8 43 e5 ff ff       	call   c001be4a <IDE::getBase(unsigned char)>
c001d907:	89 c2                	mov    edx,eax
c001d909:	66 ed                	in     ax,dx
c001d90b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d90f:	83 c4 10             	add    esp,0x10
c001d912:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d916:	46                   	inc    esi
c001d917:	39 ee                	cmp    esi,ebp
c001d919:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d91f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d926:	75 d6                	jne    c001d8fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d928:	01 f6                	add    esi,esi
c001d92a:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d92e:	eb a3                	jmp    c001d8d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d930:	51                   	push   ecx
c001d931:	51                   	push   ecx
c001d932:	52                   	push   edx
c001d933:	50                   	push   eax
c001d934:	e8 97 e6 ff ff       	call   c001bfd0 <IDE::waitInterrupt(unsigned char)>
c001d939:	83 c4 10             	add    esp,0x10
c001d93c:	84 c0                	test   al,al
c001d93e:	0f 84 e0 fd ff ff    	je     c001d724 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d944:	52                   	push   edx
c001d945:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d94a:	52                   	push   edx
c001d94b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d952:	50                   	push   eax
c001d953:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d959:	e8 d8 e4 ff ff       	call   c001be36 <IDE::prepareInterrupt(unsigned char)>
c001d95e:	83 c4 10             	add    esp,0x10
c001d961:	50                   	push   eax
c001d962:	50                   	push   eax
c001d963:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d96a:	50                   	push   eax
c001d96b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d971:	e8 d4 e4 ff ff       	call   c001be4a <IDE::getBase(unsigned char)>
c001d976:	8d 50 07             	lea    edx,[eax+0x7]
c001d979:	ec                   	in     al,dx
c001d97a:	83 c4 10             	add    esp,0x10
c001d97d:	a8 88                	test   al,0x88
c001d97f:	74 0a                	je     c001d98b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d981:	4b                   	dec    ebx
c001d982:	75 dd                	jne    c001d961 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d984:	bb 02 00 00 00       	mov    ebx,0x2
c001d989:	eb 02                	jmp    c001d98d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d98b:	31 db                	xor    ebx,ebx
c001d98d:	83 c4 1c             	add    esp,0x1c
c001d990:	89 d8                	mov    eax,ebx
c001d992:	5b                   	pop    ebx
c001d993:	5e                   	pop    esi
c001d994:	5f                   	pop    edi
c001d995:	5d                   	pop    ebp
c001d996:	c3                   	ret    
c001d997:	90                   	nop

c001d998 <ATAPI::diskRemoved()>:
c001d998:	53                   	push   ebx
c001d999:	83 ec 14             	sub    esp,0x14
c001d99c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d9a0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d9a7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d9ad:	e8 be 03 ff ff       	call   c000dd70 <LogicalDisk::unmount()>
c001d9b2:	58                   	pop    eax
c001d9b3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d9b9:	e8 96 0d ff ff       	call   c000e754 <VCache::writeWriteBuffer()>
c001d9be:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d9c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d9c8:	83 c4 18             	add    esp,0x18
c001d9cb:	5b                   	pop    ebx
c001d9cc:	e9 73 0d ff ff       	jmp    c000e744 <VCache::invalidateReadBuffer()>
c001d9d1:	90                   	nop

c001d9d2 <ATAPI::eject()>:
c001d9d2:	57                   	push   edi
c001d9d3:	b9 03 00 00 00       	mov    ecx,0x3
c001d9d8:	53                   	push   ebx
c001d9d9:	83 ec 14             	sub    esp,0x14
c001d9dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d9e0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d9e4:	fc                   	cld    
c001d9e5:	31 c0                	xor    eax,eax
c001d9e7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d9e9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d9ee:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d9f3:	50                   	push   eax
c001d9f4:	50                   	push   eax
c001d9f5:	6a 00                	push   0x0
c001d9f7:	6a 00                	push   0x0
c001d9f9:	6a 00                	push   0x0
c001d9fb:	6a 02                	push   0x2
c001d9fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001da01:	50                   	push   eax
c001da02:	53                   	push   ebx
c001da03:	e8 d0 fc ff ff       	call   c001d6d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da08:	83 c4 14             	add    esp,0x14
c001da0b:	53                   	push   ebx
c001da0c:	e8 87 ff ff ff       	call   c001d998 <ATAPI::diskRemoved()>
c001da11:	83 c4 24             	add    esp,0x24
c001da14:	31 c0                	xor    eax,eax
c001da16:	5b                   	pop    ebx
c001da17:	5f                   	pop    edi
c001da18:	c3                   	ret    
c001da19:	90                   	nop

c001da1a <ATAPI::diskInserted()>:
c001da1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da1e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001da25:	c3                   	ret    

c001da26 <ATAPI::detectMedia()>:
c001da26:	56                   	push   esi
c001da27:	53                   	push   ebx
c001da28:	83 ec 28             	sub    esp,0x28
c001da2b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001da2f:	6a 0c                	push   0xc
c001da31:	6a 00                	push   0x0
c001da33:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001da37:	56                   	push   esi
c001da38:	e8 b3 2a fe ff       	call   c00004f0 <memset>
c001da3d:	58                   	pop    eax
c001da3e:	5a                   	pop    edx
c001da3f:	6a 00                	push   0x0
c001da41:	6a 00                	push   0x0
c001da43:	6a 00                	push   0x0
c001da45:	6a 00                	push   0x0
c001da47:	56                   	push   esi
c001da48:	53                   	push   ebx
c001da49:	e8 8a fc ff ff       	call   c001d6d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da4e:	83 c4 1c             	add    esp,0x1c
c001da51:	6a 0c                	push   0xc
c001da53:	6a 00                	push   0x0
c001da55:	56                   	push   esi
c001da56:	e8 95 2a fe ff       	call   c00004f0 <memset>
c001da5b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001da60:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001da65:	59                   	pop    ecx
c001da66:	58                   	pop    eax
c001da67:	6a 01                	push   0x1
c001da69:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001da6d:	50                   	push   eax
c001da6e:	6a 00                	push   0x0
c001da70:	6a 12                	push   0x12
c001da72:	56                   	push   esi
c001da73:	53                   	push   ebx
c001da74:	e8 5f fc ff ff       	call   c001d6d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da79:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001da7d:	83 c4 20             	add    esp,0x20
c001da80:	83 e0 7f             	and    eax,0x7f
c001da83:	83 f8 70             	cmp    eax,0x70
c001da86:	74 15                	je     c001da9d <ATAPI::detectMedia()+0x77>
c001da88:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da8f:	75 0c                	jne    c001da9d <ATAPI::detectMedia()+0x77>
c001da91:	83 ec 0c             	sub    esp,0xc
c001da94:	53                   	push   ebx
c001da95:	e8 80 ff ff ff       	call   c001da1a <ATAPI::diskInserted()>
c001da9a:	83 c4 10             	add    esp,0x10
c001da9d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001daa1:	83 e0 0f             	and    eax,0xf
c001daa4:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001daa9:	0f b6 c0             	movzx  eax,al
c001daac:	75 19                	jne    c001dac7 <ATAPI::detectMedia()+0xa1>
c001daae:	83 f8 02             	cmp    eax,0x2
c001dab1:	75 14                	jne    c001dac7 <ATAPI::detectMedia()+0xa1>
c001dab3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001daba:	74 24                	je     c001dae0 <ATAPI::detectMedia()+0xba>
c001dabc:	83 ec 0c             	sub    esp,0xc
c001dabf:	53                   	push   ebx
c001dac0:	e8 d3 fe ff ff       	call   c001d998 <ATAPI::diskRemoved()>
c001dac5:	eb 16                	jmp    c001dadd <ATAPI::detectMedia()+0xb7>
c001dac7:	85 c0                	test   eax,eax
c001dac9:	75 15                	jne    c001dae0 <ATAPI::detectMedia()+0xba>
c001dacb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dad2:	75 0c                	jne    c001dae0 <ATAPI::detectMedia()+0xba>
c001dad4:	83 ec 0c             	sub    esp,0xc
c001dad7:	53                   	push   ebx
c001dad8:	e8 3d ff ff ff       	call   c001da1a <ATAPI::diskInserted()>
c001dadd:	83 c4 10             	add    esp,0x10
c001dae0:	83 c4 24             	add    esp,0x24
c001dae3:	5b                   	pop    ebx
c001dae4:	5e                   	pop    esi
c001dae5:	c3                   	ret    

c001dae6 <ATAPI::open(int, int, void*)>:
c001dae6:	56                   	push   esi
c001dae7:	53                   	push   ebx
c001dae8:	50                   	push   eax
c001dae9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001daed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001daf1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001daf5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dafb:	c1 e0 06             	shl    eax,0x6
c001dafe:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001db04:	01 d0                	add    eax,edx
c001db06:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001db0d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001db13:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001db1a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001db24:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001db2b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db31:	6a 04                	push   0x4
c001db33:	6a 0c                	push   0xc
c001db35:	51                   	push   ecx
c001db36:	52                   	push   edx
c001db37:	e8 20 e3 ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db3c:	90                   	nop
c001db3d:	90                   	nop
c001db3e:	6a 00                	push   0x0
c001db40:	6a 0c                	push   0xc
c001db42:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db49:	50                   	push   eax
c001db4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db50:	e8 07 e3 ff ff       	call   c001be5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db55:	83 c4 14             	add    esp,0x14
c001db58:	68 78 01 00 00       	push   0x178
c001db5d:	e8 d1 9f fe ff       	call   c0007b33 <malloc>
c001db62:	83 c4 0c             	add    esp,0xc
c001db65:	6a 00                	push   0x0
c001db67:	68 ff ff ff 7f       	push   0x7fffffff
c001db6c:	6a 00                	push   0x0
c001db6e:	6a 00                	push   0x0
c001db70:	53                   	push   ebx
c001db71:	68 a3 36 02 c0       	push   0xc00236a3
c001db76:	89 c6                	mov    esi,eax
c001db78:	50                   	push   eax
c001db79:	e8 30 00 ff ff       	call   c000dbae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001db7e:	83 c4 14             	add    esp,0x14
c001db81:	56                   	push   esi
c001db82:	e8 e7 00 ff ff       	call   c000dc6e <LogicalDisk::assignDriveLetter()>
c001db87:	5a                   	pop    edx
c001db88:	59                   	pop    ecx
c001db89:	0f be c0             	movsx  eax,al
c001db8c:	50                   	push   eax
c001db8d:	68 f4 34 02 c0       	push   0xc00234f4
c001db92:	e8 d3 cd fe ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001db97:	58                   	pop    eax
c001db98:	5a                   	pop    edx
c001db99:	56                   	push   esi
c001db9a:	53                   	push   ebx
c001db9b:	e8 60 ee fe ff       	call   c000ca00 <Device::addChild(Device*)>
c001dba0:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001dba6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dba9:	e8 88 f2 fe ff       	call   c000ce36 <PhysicalDisk::startCache()>
c001dbae:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001dbb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbb8:	e8 69 fe ff ff       	call   c001da26 <ATAPI::detectMedia()>
c001dbbd:	83 c4 14             	add    esp,0x14
c001dbc0:	31 c0                	xor    eax,eax
c001dbc2:	5b                   	pop    ebx
c001dbc3:	5e                   	pop    esi
c001dbc4:	c3                   	ret    
c001dbc5:	90                   	nop

c001dbc6 <ATAPI::read(unsigned long long, int, void*)>:
c001dbc6:	55                   	push   ebp
c001dbc7:	57                   	push   edi
c001dbc8:	56                   	push   esi
c001dbc9:	53                   	push   ebx
c001dbca:	83 ec 1c             	sub    esp,0x1c
c001dbcd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dbd1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dbd5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dbd9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dbe0:	74 3c                	je     c001dc1e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001dbe2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dbe6:	b9 03 00 00 00       	mov    ecx,0x3
c001dbeb:	fc                   	cld    
c001dbec:	31 c0                	xor    eax,eax
c001dbee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dbf0:	89 e8                	mov    eax,ebp
c001dbf2:	0f ce                	bswap  esi
c001dbf4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dbf8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dbfd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dc01:	50                   	push   eax
c001dc02:	50                   	push   eax
c001dc03:	55                   	push   ebp
c001dc04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dc08:	c1 e5 0b             	shl    ebp,0xb
c001dc0b:	6a 00                	push   0x0
c001dc0d:	55                   	push   ebp
c001dc0e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dc12:	50                   	push   eax
c001dc13:	53                   	push   ebx
c001dc14:	e8 bf fa ff ff       	call   c001d6d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dc19:	83 c4 20             	add    esp,0x20
c001dc1c:	eb 1a                	jmp    c001dc38 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dc1e:	83 ec 0c             	sub    esp,0xc
c001dc21:	53                   	push   ebx
c001dc22:	e8 ff fd ff ff       	call   c001da26 <ATAPI::detectMedia()>
c001dc27:	83 c4 10             	add    esp,0x10
c001dc2a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dc31:	75 af                	jne    c001dbe2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dc33:	b8 02 00 00 00       	mov    eax,0x2
c001dc38:	83 c4 1c             	add    esp,0x1c
c001dc3b:	5b                   	pop    ebx
c001dc3c:	5e                   	pop    esi
c001dc3d:	5f                   	pop    edi
c001dc3e:	5d                   	pop    ebp
c001dc3f:	c3                   	ret    

c001dc40 <SATA::close(int, int, void*)>:
c001dc40:	83 ec 0c             	sub    esp,0xc
c001dc43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc47:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dc4d:	85 c0                	test   eax,eax
c001dc4f:	74 0c                	je     c001dc5d <SATA::close(int, int, void*)+0x1d>
c001dc51:	8b 10                	mov    edx,DWORD PTR [eax]
c001dc53:	83 ec 0c             	sub    esp,0xc
c001dc56:	50                   	push   eax
c001dc57:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dc5a:	83 c4 10             	add    esp,0x10
c001dc5d:	31 c0                	xor    eax,eax
c001dc5f:	83 c4 0c             	add    esp,0xc
c001dc62:	c3                   	ret    
c001dc63:	90                   	nop

c001dc64 <SATA::powerSaving(PowerSavingLevel)>:
c001dc64:	c3                   	ret    
c001dc65:	90                   	nop

c001dc66 <SATA::open(int, int, void*)>:
c001dc66:	56                   	push   esi
c001dc67:	53                   	push   ebx
c001dc68:	50                   	push   eax
c001dc69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc71:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dc7b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dc81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc85:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dc8f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dc99:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dca0:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dca6:	e8 97 a1 fe ff       	call   c0007e42 <Phys::allocatePage()>
c001dcab:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dcb1:	89 c6                	mov    esi,eax
c001dcb3:	e8 8a a1 fe ff       	call   c0007e42 <Phys::allocatePage()>
c001dcb8:	81 c6 00 10 00 00    	add    esi,0x1000
c001dcbe:	39 c6                	cmp    esi,eax
c001dcc0:	74 10                	je     c001dcd2 <SATA::open(int, int, void*)+0x6c>
c001dcc2:	83 ec 0c             	sub    esp,0xc
c001dcc5:	68 3c 35 02 c0       	push   0xc002353c
c001dcca:	e8 70 39 ff ff       	call   c001163f <KePanic(char const*)>
c001dccf:	83 c4 10             	add    esp,0x10
c001dcd2:	83 ec 0c             	sub    esp,0xc
c001dcd5:	6a 02                	push   0x2
c001dcd7:	e8 79 b9 fe ff       	call   c0009655 <Virt::allocateKernelVirtualPages(int)>
c001dcdc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dce2:	6a 03                	push   0x3
c001dce4:	50                   	push   eax
c001dce5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dceb:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dcf1:	e8 68 c0 fe ff       	call   c0009d5e <VAS::mapPage(unsigned long, unsigned long, int)>
c001dcf6:	83 c4 14             	add    esp,0x14
c001dcf9:	53                   	push   ebx
c001dcfa:	e8 37 f1 fe ff       	call   c000ce36 <PhysicalDisk::startCache()>
c001dcff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dd02:	e8 7b 03 ff ff       	call   c000e082 <createPartitionsForDisk(PhysicalDisk*)>
c001dd07:	83 c4 14             	add    esp,0x14
c001dd0a:	31 c0                	xor    eax,eax
c001dd0c:	5b                   	pop    ebx
c001dd0d:	5e                   	pop    esi
c001dd0e:	c3                   	ret    
c001dd0f:	90                   	nop

c001dd10 <SATA::SATA()>:
c001dd10:	83 ec 0c             	sub    esp,0xc
c001dd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd17:	83 ec 04             	sub    esp,0x4
c001dd1a:	68 00 02 00 00       	push   0x200
c001dd1f:	68 50 35 02 c0       	push   0xc0023550
c001dd24:	50                   	push   eax
c001dd25:	e8 a4 f0 fe ff       	call   c000cdce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dd2a:	83 c4 10             	add    esp,0x10
c001dd2d:	ba c0 35 02 c0       	mov    edx,0xc00235c0
c001dd32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd36:	89 10                	mov    DWORD PTR [eax],edx
c001dd38:	90                   	nop
c001dd39:	83 c4 0c             	add    esp,0xc
c001dd3c:	c3                   	ret    
c001dd3d:	90                   	nop

c001dd3e <SATA::access(unsigned long long, int, void*, bool)>:
c001dd3e:	55                   	push   ebp
c001dd3f:	57                   	push   edi
c001dd40:	56                   	push   esi
c001dd41:	53                   	push   ebx
c001dd42:	83 ec 2c             	sub    esp,0x2c
c001dd45:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dd49:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dd4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dd52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dd56:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dd5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dd5e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd66:	7e 10                	jle    c001dd78 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001dd68:	83 ec 0c             	sub    esp,0xc
c001dd6b:	68 60 35 02 c0       	push   0xc0023560
c001dd70:	e8 ca 38 ff ff       	call   c001163f <KePanic(char const*)>
c001dd75:	83 c4 10             	add    esp,0x10
c001dd78:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dd7e:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001dd84:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dd8a:	89 e8                	mov    eax,ebp
c001dd8c:	c1 e0 07             	shl    eax,0x7
c001dd8f:	01 d0                	add    eax,edx
c001dd91:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dd9b:	8d 45 02             	lea    eax,[ebp+0x2]
c001dd9e:	51                   	push   ecx
c001dd9f:	c1 e0 07             	shl    eax,0x7
c001dda2:	51                   	push   ecx
c001dda3:	01 d0                	add    eax,edx
c001dda5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001dda9:	50                   	push   eax
c001ddaa:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ddb0:	e8 6b ec ff ff       	call   c001ca20 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ddb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ddb9:	83 c4 10             	add    esp,0x10
c001ddbc:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001ddc1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ddc5:	0f 84 5b 01 00 00    	je     c001df26 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001ddcb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ddcf:	c1 e0 09             	shl    eax,0x9
c001ddd2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ddd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dddb:	74 0e                	je     c001ddeb <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001dddd:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dde3:	89 c1                	mov    ecx,eax
c001dde5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dde9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ddeb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ddef:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ddf5:	8d 45 02             	lea    eax,[ebp+0x2]
c001ddf8:	c1 e0 07             	shl    eax,0x7
c001ddfb:	01 d0                	add    eax,edx
c001ddfd:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddff:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001de05:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001de0b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de0f:	c1 e1 05             	shl    ecx,0x5
c001de12:	01 c8                	add    eax,ecx
c001de14:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001de18:	83 e1 01             	and    ecx,0x1
c001de1b:	89 ce                	mov    esi,ecx
c001de1d:	8a 08                	mov    cl,BYTE PTR [eax]
c001de1f:	c1 e6 06             	shl    esi,0x6
c001de22:	83 e1 bf             	and    ecx,0xffffffbf
c001de25:	09 f1                	or     ecx,esi
c001de27:	88 08                	mov    BYTE PTR [eax],cl
c001de29:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de2b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001de31:	81 c9 05 00 01 00    	or     ecx,0x10005
c001de37:	89 08                	mov    DWORD PTR [eax],ecx
c001de39:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001de3f:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001de45:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001de4b:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001de4e:	50                   	push   eax
c001de4f:	68 90 00 00 00       	push   0x90
c001de54:	6a 00                	push   0x0
c001de56:	56                   	push   esi
c001de57:	e8 94 26 fe ff       	call   c00004f0 <memset>
c001de5c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001de62:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001de68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de6c:	83 c4 10             	add    esp,0x10
c001de6f:	48                   	dec    eax
c001de70:	25 ff ff 3f 00       	and    eax,0x3fffff
c001de75:	89 c1                	mov    ecx,eax
c001de77:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001de7d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001de82:	09 c8                	or     eax,ecx
c001de84:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001de8a:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001de90:	83 c8 80             	or     eax,0xffffff80
c001de93:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001de99:	66 8b 06             	mov    ax,WORD PTR [esi]
c001de9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dea0:	25 00 7f 00 00       	and    eax,0x7f00
c001dea5:	0d 27 80 ff ff       	or     eax,0xffff8027
c001deaa:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001deaf:	66 89 06             	mov    WORD PTR [esi],ax
c001deb2:	b0 35                	mov    al,0x35
c001deb4:	75 02                	jne    c001deb8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001deb6:	b0 25                	mov    al,0x25
c001deb8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001debb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001debf:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001dec3:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001dec7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001decb:	c1 e8 10             	shr    eax,0x10
c001dece:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ded1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ded5:	c1 e8 18             	shr    eax,0x18
c001ded8:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001dedb:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001dedf:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001dee2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dee6:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001dee9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001deed:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001def1:	89 ee                	mov    esi,ebp
c001def3:	31 c0                	xor    eax,eax
c001def5:	c1 e6 07             	shl    esi,0x7
c001def8:	01 d6                	add    esi,edx
c001defa:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001df00:	80 e1 88             	and    cl,0x88
c001df03:	74 0a                	je     c001df0f <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001df05:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df0a:	74 0a                	je     c001df16 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001df0c:	40                   	inc    eax
c001df0d:	eb eb                	jmp    c001defa <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001df0f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df14:	75 17                	jne    c001df2d <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001df16:	83 ec 0c             	sub    esp,0xc
c001df19:	68 99 35 02 c0       	push   0xc0023599
c001df1e:	e8 47 ca fe ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001df23:	83 c4 10             	add    esp,0x10
c001df26:	b8 01 00 00 00       	mov    eax,0x1
c001df2b:	eb 5b                	jmp    c001df88 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001df2d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001df31:	c1 e5 07             	shl    ebp,0x7
c001df34:	b8 01 00 00 00       	mov    eax,0x1
c001df39:	01 ea                	add    edx,ebp
c001df3b:	d3 e0                	shl    eax,cl
c001df3d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001df43:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001df49:	85 c8                	test   eax,ecx
c001df4b:	74 16                	je     c001df63 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001df4d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001df53:	0f ba e1 1e          	bt     ecx,0x1e
c001df57:	73 ea                	jae    c001df43 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001df59:	83 ec 0c             	sub    esp,0xc
c001df5c:	68 a7 35 02 c0       	push   0xc00235a7
c001df61:	eb bb                	jmp    c001df1e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001df63:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001df69:	0f ba e0 1e          	bt     eax,0x1e
c001df6d:	72 b7                	jb     c001df26 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001df6f:	31 c0                	xor    eax,eax
c001df71:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001df76:	75 10                	jne    c001df88 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001df78:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001df7e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001df82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df88:	83 c4 2c             	add    esp,0x2c
c001df8b:	5b                   	pop    ebx
c001df8c:	5e                   	pop    esi
c001df8d:	5f                   	pop    edi
c001df8e:	5d                   	pop    ebp
c001df8f:	c3                   	ret    

c001df90 <SATA::read(unsigned long long, int, void*)>:
c001df90:	55                   	push   ebp
c001df91:	57                   	push   edi
c001df92:	56                   	push   esi
c001df93:	be 04 00 00 00       	mov    esi,0x4
c001df98:	53                   	push   ebx
c001df99:	83 ec 0c             	sub    esp,0xc
c001df9c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dfa0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dfa4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dfa8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001dfac:	8d 7b ff             	lea    edi,[ebx-0x1]
c001dfaf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dfb5:	0f 87 1a 02 00 00    	ja     c001e1d5 <SATA::read(unsigned long long, int, void*)+0x245>
c001dfbb:	85 c9                	test   ecx,ecx
c001dfbd:	be 06 00 00 00       	mov    esi,0x6
c001dfc2:	0f 84 0d 02 00 00    	je     c001e1d5 <SATA::read(unsigned long long, int, void*)+0x245>
c001dfc8:	56                   	push   esi
c001dfc9:	56                   	push   esi
c001dfca:	6a 00                	push   0x0
c001dfcc:	51                   	push   ecx
c001dfcd:	53                   	push   ebx
c001dfce:	52                   	push   edx
c001dfcf:	50                   	push   eax
c001dfd0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dfd4:	e8 65 fd ff ff       	call   c001dd3e <SATA::access(unsigned long long, int, void*, bool)>
c001dfd9:	83 c4 20             	add    esp,0x20
c001dfdc:	85 c0                	test   eax,eax
c001dfde:	89 c6                	mov    esi,eax
c001dfe0:	0f 85 ea 01 00 00    	jne    c001e1d0 <SATA::read(unsigned long long, int, void*)+0x240>
c001dfe6:	50                   	push   eax
c001dfe7:	50                   	push   eax
c001dfe8:	6a 0f                	push   0xf
c001dfea:	6a 00                	push   0x0
c001dfec:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001dff2:	bb 0a 00 00 00       	mov    ebx,0xa
c001dff7:	e8 7d f2 ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001dffc:	5a                   	pop    edx
c001dffd:	59                   	pop    ecx
c001dffe:	b9 10 27 00 00       	mov    ecx,0x2710
c001e003:	0f b6 c0             	movzx  eax,al
c001e006:	50                   	push   eax
c001e007:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e00c:	99                   	cdq    
c001e00d:	f7 f9                	idiv   ecx
c001e00f:	99                   	cdq    
c001e010:	f7 fb                	idiv   ebx
c001e012:	8d 42 30             	lea    eax,[edx+0x30]
c001e015:	0f b6 c0             	movzx  eax,al
c001e018:	50                   	push   eax
c001e019:	e8 4a f2 ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e01e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e024:	5f                   	pop    edi
c001e025:	5d                   	pop    ebp
c001e026:	bd e8 03 00 00       	mov    ebp,0x3e8
c001e02b:	6a 0f                	push   0xf
c001e02d:	6a 00                	push   0x0
c001e02f:	e8 45 f2 ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e034:	5a                   	pop    edx
c001e035:	59                   	pop    ecx
c001e036:	0f b6 c0             	movzx  eax,al
c001e039:	50                   	push   eax
c001e03a:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e03f:	99                   	cdq    
c001e040:	f7 fd                	idiv   ebp
c001e042:	99                   	cdq    
c001e043:	f7 fb                	idiv   ebx
c001e045:	8d 42 30             	lea    eax,[edx+0x30]
c001e048:	0f b6 c0             	movzx  eax,al
c001e04b:	50                   	push   eax
c001e04c:	e8 17 f2 ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e051:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e057:	5f                   	pop    edi
c001e058:	bf 64 00 00 00       	mov    edi,0x64
c001e05d:	58                   	pop    eax
c001e05e:	6a 0f                	push   0xf
c001e060:	6a 00                	push   0x0
c001e062:	e8 12 f2 ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e067:	5a                   	pop    edx
c001e068:	59                   	pop    ecx
c001e069:	0f b6 c0             	movzx  eax,al
c001e06c:	50                   	push   eax
c001e06d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e072:	99                   	cdq    
c001e073:	f7 ff                	idiv   edi
c001e075:	99                   	cdq    
c001e076:	f7 fb                	idiv   ebx
c001e078:	8d 42 30             	lea    eax,[edx+0x30]
c001e07b:	0f b6 c0             	movzx  eax,al
c001e07e:	50                   	push   eax
c001e07f:	e8 e4 f1 ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e084:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e08a:	58                   	pop    eax
c001e08b:	5a                   	pop    edx
c001e08c:	6a 0f                	push   0xf
c001e08e:	6a 00                	push   0x0
c001e090:	e8 e4 f1 ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e095:	59                   	pop    ecx
c001e096:	5a                   	pop    edx
c001e097:	0f b6 c0             	movzx  eax,al
c001e09a:	50                   	push   eax
c001e09b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e0a0:	99                   	cdq    
c001e0a1:	f7 fb                	idiv   ebx
c001e0a3:	99                   	cdq    
c001e0a4:	f7 fb                	idiv   ebx
c001e0a6:	8d 42 30             	lea    eax,[edx+0x30]
c001e0a9:	0f b6 c0             	movzx  eax,al
c001e0ac:	50                   	push   eax
c001e0ad:	e8 b6 f1 ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e0b2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e0b8:	59                   	pop    ecx
c001e0b9:	58                   	pop    eax
c001e0ba:	6a 0f                	push   0xf
c001e0bc:	6a 00                	push   0x0
c001e0be:	e8 b6 f1 ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e0c3:	5a                   	pop    edx
c001e0c4:	59                   	pop    ecx
c001e0c5:	0f b6 c0             	movzx  eax,al
c001e0c8:	50                   	push   eax
c001e0c9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e0ce:	99                   	cdq    
c001e0cf:	f7 fb                	idiv   ebx
c001e0d1:	83 c2 30             	add    edx,0x30
c001e0d4:	0f b6 d2             	movzx  edx,dl
c001e0d7:	52                   	push   edx
c001e0d8:	e8 8b f1 ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e0dd:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e0e3:	58                   	pop    eax
c001e0e4:	5a                   	pop    edx
c001e0e5:	6a 0f                	push   0xf
c001e0e7:	6a 00                	push   0x0
c001e0e9:	e8 8b f1 ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e0ee:	59                   	pop    ecx
c001e0ef:	b9 10 27 00 00       	mov    ecx,0x2710
c001e0f4:	5a                   	pop    edx
c001e0f5:	0f b6 c0             	movzx  eax,al
c001e0f8:	50                   	push   eax
c001e0f9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0fe:	99                   	cdq    
c001e0ff:	f7 f9                	idiv   ecx
c001e101:	99                   	cdq    
c001e102:	f7 fb                	idiv   ebx
c001e104:	8d 42 30             	lea    eax,[edx+0x30]
c001e107:	0f b6 c0             	movzx  eax,al
c001e10a:	50                   	push   eax
c001e10b:	e8 58 f1 ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e110:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e116:	59                   	pop    ecx
c001e117:	58                   	pop    eax
c001e118:	6a 0f                	push   0xf
c001e11a:	6a 00                	push   0x0
c001e11c:	e8 58 f1 ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e121:	5a                   	pop    edx
c001e122:	59                   	pop    ecx
c001e123:	0f b6 c0             	movzx  eax,al
c001e126:	50                   	push   eax
c001e127:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e12c:	99                   	cdq    
c001e12d:	f7 fd                	idiv   ebp
c001e12f:	99                   	cdq    
c001e130:	f7 fb                	idiv   ebx
c001e132:	8d 42 30             	lea    eax,[edx+0x30]
c001e135:	0f b6 c0             	movzx  eax,al
c001e138:	50                   	push   eax
c001e139:	e8 2a f1 ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e13e:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e144:	5d                   	pop    ebp
c001e145:	58                   	pop    eax
c001e146:	6a 0f                	push   0xf
c001e148:	6a 00                	push   0x0
c001e14a:	e8 2a f1 ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e14f:	5a                   	pop    edx
c001e150:	59                   	pop    ecx
c001e151:	0f b6 c0             	movzx  eax,al
c001e154:	50                   	push   eax
c001e155:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e15a:	99                   	cdq    
c001e15b:	f7 ff                	idiv   edi
c001e15d:	99                   	cdq    
c001e15e:	f7 fb                	idiv   ebx
c001e160:	8d 42 30             	lea    eax,[edx+0x30]
c001e163:	0f b6 c0             	movzx  eax,al
c001e166:	50                   	push   eax
c001e167:	e8 fc f0 ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e16c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e172:	5f                   	pop    edi
c001e173:	5d                   	pop    ebp
c001e174:	6a 0f                	push   0xf
c001e176:	6a 00                	push   0x0
c001e178:	e8 fc f0 ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e17d:	5a                   	pop    edx
c001e17e:	59                   	pop    ecx
c001e17f:	0f b6 c0             	movzx  eax,al
c001e182:	50                   	push   eax
c001e183:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e188:	99                   	cdq    
c001e189:	f7 fb                	idiv   ebx
c001e18b:	99                   	cdq    
c001e18c:	f7 fb                	idiv   ebx
c001e18e:	8d 42 30             	lea    eax,[edx+0x30]
c001e191:	0f b6 c0             	movzx  eax,al
c001e194:	50                   	push   eax
c001e195:	e8 ce f0 ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e19a:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e1a0:	5f                   	pop    edi
c001e1a1:	5d                   	pop    ebp
c001e1a2:	6a 0f                	push   0xf
c001e1a4:	6a 00                	push   0x0
c001e1a6:	e8 ce f0 ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e1ab:	5a                   	pop    edx
c001e1ac:	59                   	pop    ecx
c001e1ad:	0f b6 c0             	movzx  eax,al
c001e1b0:	50                   	push   eax
c001e1b1:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e1b6:	99                   	cdq    
c001e1b7:	f7 fb                	idiv   ebx
c001e1b9:	83 c2 30             	add    edx,0x30
c001e1bc:	0f b6 d2             	movzx  edx,dl
c001e1bf:	52                   	push   edx
c001e1c0:	e8 a3 f0 ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e1c5:	83 c4 10             	add    esp,0x10
c001e1c8:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e1ce:	eb 05                	jmp    c001e1d5 <SATA::read(unsigned long long, int, void*)+0x245>
c001e1d0:	be 01 00 00 00       	mov    esi,0x1
c001e1d5:	83 c4 0c             	add    esp,0xc
c001e1d8:	89 f0                	mov    eax,esi
c001e1da:	5b                   	pop    ebx
c001e1db:	5e                   	pop    esi
c001e1dc:	5f                   	pop    edi
c001e1dd:	5d                   	pop    ebp
c001e1de:	c3                   	ret    
c001e1df:	90                   	nop

c001e1e0 <SATA::write(unsigned long long, int, void*)>:
c001e1e0:	55                   	push   ebp
c001e1e1:	57                   	push   edi
c001e1e2:	56                   	push   esi
c001e1e3:	53                   	push   ebx
c001e1e4:	83 ec 0c             	sub    esp,0xc
c001e1e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1eb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e1ef:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e1f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e1f7:	8d 70 ff             	lea    esi,[eax-0x1]
c001e1fa:	b8 04 00 00 00       	mov    eax,0x4
c001e1ff:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e205:	0f 87 2c 02 00 00    	ja     c001e437 <SATA::write(unsigned long long, int, void*)+0x257>
c001e20b:	85 db                	test   ebx,ebx
c001e20d:	b8 06 00 00 00       	mov    eax,0x6
c001e212:	0f 84 1f 02 00 00    	je     c001e437 <SATA::write(unsigned long long, int, void*)+0x257>
c001e218:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e21c:	c1 e6 09             	shl    esi,0x9
c001e21f:	01 de                	add    esi,ebx
c001e221:	50                   	push   eax
c001e222:	89 d7                	mov    edi,edx
c001e224:	50                   	push   eax
c001e225:	83 c7 01             	add    edi,0x1
c001e228:	6a 01                	push   0x1
c001e22a:	89 cd                	mov    ebp,ecx
c001e22c:	53                   	push   ebx
c001e22d:	83 d5 00             	adc    ebp,0x0
c001e230:	6a 01                	push   0x1
c001e232:	81 c3 00 02 00 00    	add    ebx,0x200
c001e238:	51                   	push   ecx
c001e239:	52                   	push   edx
c001e23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e23e:	e8 fb fa ff ff       	call   c001dd3e <SATA::access(unsigned long long, int, void*, bool)>
c001e243:	83 c4 20             	add    esp,0x20
c001e246:	39 f3                	cmp    ebx,esi
c001e248:	89 fa                	mov    edx,edi
c001e24a:	89 e9                	mov    ecx,ebp
c001e24c:	75 d3                	jne    c001e221 <SATA::write(unsigned long long, int, void*)+0x41>
c001e24e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e252:	bd 10 27 00 00       	mov    ebp,0x2710
c001e257:	bb 0a 00 00 00       	mov    ebx,0xa
c001e25c:	01 05 b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,eax
c001e262:	50                   	push   eax
c001e263:	50                   	push   eax
c001e264:	6a 0f                	push   0xf
c001e266:	6a 00                	push   0x0
c001e268:	e8 0c f0 ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e26d:	5a                   	pop    edx
c001e26e:	59                   	pop    ecx
c001e26f:	0f b6 c0             	movzx  eax,al
c001e272:	50                   	push   eax
c001e273:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e278:	99                   	cdq    
c001e279:	f7 fd                	idiv   ebp
c001e27b:	99                   	cdq    
c001e27c:	f7 fb                	idiv   ebx
c001e27e:	8d 42 30             	lea    eax,[edx+0x30]
c001e281:	0f b6 c0             	movzx  eax,al
c001e284:	50                   	push   eax
c001e285:	e8 de ef ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e28a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e290:	5e                   	pop    esi
c001e291:	5f                   	pop    edi
c001e292:	bf e8 03 00 00       	mov    edi,0x3e8
c001e297:	6a 0f                	push   0xf
c001e299:	6a 00                	push   0x0
c001e29b:	e8 d9 ef ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e2a0:	5a                   	pop    edx
c001e2a1:	59                   	pop    ecx
c001e2a2:	0f b6 c0             	movzx  eax,al
c001e2a5:	50                   	push   eax
c001e2a6:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2ab:	99                   	cdq    
c001e2ac:	f7 ff                	idiv   edi
c001e2ae:	99                   	cdq    
c001e2af:	f7 fb                	idiv   ebx
c001e2b1:	8d 42 30             	lea    eax,[edx+0x30]
c001e2b4:	0f b6 c0             	movzx  eax,al
c001e2b7:	50                   	push   eax
c001e2b8:	e8 ab ef ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e2bd:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e2c3:	5e                   	pop    esi
c001e2c4:	be 64 00 00 00       	mov    esi,0x64
c001e2c9:	58                   	pop    eax
c001e2ca:	6a 0f                	push   0xf
c001e2cc:	6a 00                	push   0x0
c001e2ce:	e8 a6 ef ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e2d3:	5a                   	pop    edx
c001e2d4:	59                   	pop    ecx
c001e2d5:	0f b6 c0             	movzx  eax,al
c001e2d8:	50                   	push   eax
c001e2d9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2de:	99                   	cdq    
c001e2df:	f7 fe                	idiv   esi
c001e2e1:	99                   	cdq    
c001e2e2:	f7 fb                	idiv   ebx
c001e2e4:	8d 42 30             	lea    eax,[edx+0x30]
c001e2e7:	0f b6 c0             	movzx  eax,al
c001e2ea:	50                   	push   eax
c001e2eb:	e8 78 ef ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e2f0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e2f6:	58                   	pop    eax
c001e2f7:	5a                   	pop    edx
c001e2f8:	6a 0f                	push   0xf
c001e2fa:	6a 00                	push   0x0
c001e2fc:	e8 78 ef ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e301:	59                   	pop    ecx
c001e302:	5a                   	pop    edx
c001e303:	0f b6 c0             	movzx  eax,al
c001e306:	50                   	push   eax
c001e307:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e30c:	99                   	cdq    
c001e30d:	f7 fb                	idiv   ebx
c001e30f:	99                   	cdq    
c001e310:	f7 fb                	idiv   ebx
c001e312:	8d 42 30             	lea    eax,[edx+0x30]
c001e315:	0f b6 c0             	movzx  eax,al
c001e318:	50                   	push   eax
c001e319:	e8 4a ef ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e31e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e324:	59                   	pop    ecx
c001e325:	58                   	pop    eax
c001e326:	6a 0f                	push   0xf
c001e328:	6a 00                	push   0x0
c001e32a:	e8 4a ef ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e32f:	5a                   	pop    edx
c001e330:	59                   	pop    ecx
c001e331:	0f b6 c0             	movzx  eax,al
c001e334:	50                   	push   eax
c001e335:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e33a:	99                   	cdq    
c001e33b:	f7 fb                	idiv   ebx
c001e33d:	83 c2 30             	add    edx,0x30
c001e340:	0f b6 d2             	movzx  edx,dl
c001e343:	52                   	push   edx
c001e344:	e8 1f ef ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e349:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e34f:	58                   	pop    eax
c001e350:	5a                   	pop    edx
c001e351:	6a 0f                	push   0xf
c001e353:	6a 00                	push   0x0
c001e355:	e8 1f ef ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e35a:	59                   	pop    ecx
c001e35b:	5a                   	pop    edx
c001e35c:	0f b6 c0             	movzx  eax,al
c001e35f:	50                   	push   eax
c001e360:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e365:	99                   	cdq    
c001e366:	f7 fd                	idiv   ebp
c001e368:	99                   	cdq    
c001e369:	f7 fb                	idiv   ebx
c001e36b:	8d 42 30             	lea    eax,[edx+0x30]
c001e36e:	0f b6 c0             	movzx  eax,al
c001e371:	50                   	push   eax
c001e372:	e8 f1 ee ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e377:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e37d:	59                   	pop    ecx
c001e37e:	5d                   	pop    ebp
c001e37f:	6a 0f                	push   0xf
c001e381:	6a 00                	push   0x0
c001e383:	e8 f1 ee ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e388:	5a                   	pop    edx
c001e389:	59                   	pop    ecx
c001e38a:	0f b6 c0             	movzx  eax,al
c001e38d:	50                   	push   eax
c001e38e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e393:	99                   	cdq    
c001e394:	f7 ff                	idiv   edi
c001e396:	99                   	cdq    
c001e397:	f7 fb                	idiv   ebx
c001e399:	8d 42 30             	lea    eax,[edx+0x30]
c001e39c:	0f b6 c0             	movzx  eax,al
c001e39f:	50                   	push   eax
c001e3a0:	e8 c3 ee ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e3a5:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e3ab:	5f                   	pop    edi
c001e3ac:	5d                   	pop    ebp
c001e3ad:	6a 0f                	push   0xf
c001e3af:	6a 00                	push   0x0
c001e3b1:	e8 c3 ee ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e3b6:	5a                   	pop    edx
c001e3b7:	59                   	pop    ecx
c001e3b8:	0f b6 c0             	movzx  eax,al
c001e3bb:	50                   	push   eax
c001e3bc:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3c1:	99                   	cdq    
c001e3c2:	f7 fe                	idiv   esi
c001e3c4:	99                   	cdq    
c001e3c5:	f7 fb                	idiv   ebx
c001e3c7:	8d 42 30             	lea    eax,[edx+0x30]
c001e3ca:	0f b6 c0             	movzx  eax,al
c001e3cd:	50                   	push   eax
c001e3ce:	e8 95 ee ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e3d3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e3d9:	5e                   	pop    esi
c001e3da:	5f                   	pop    edi
c001e3db:	6a 0f                	push   0xf
c001e3dd:	6a 00                	push   0x0
c001e3df:	e8 95 ee ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e3e4:	5d                   	pop    ebp
c001e3e5:	5a                   	pop    edx
c001e3e6:	0f b6 c0             	movzx  eax,al
c001e3e9:	50                   	push   eax
c001e3ea:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3ef:	99                   	cdq    
c001e3f0:	f7 fb                	idiv   ebx
c001e3f2:	99                   	cdq    
c001e3f3:	f7 fb                	idiv   ebx
c001e3f5:	8d 42 30             	lea    eax,[edx+0x30]
c001e3f8:	0f b6 c0             	movzx  eax,al
c001e3fb:	50                   	push   eax
c001e3fc:	e8 67 ee ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e401:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e407:	59                   	pop    ecx
c001e408:	5e                   	pop    esi
c001e409:	6a 0f                	push   0xf
c001e40b:	6a 00                	push   0x0
c001e40d:	e8 67 ee ff ff       	call   c001d279 <combineColours(unsigned char, unsigned char)>
c001e412:	5f                   	pop    edi
c001e413:	5d                   	pop    ebp
c001e414:	0f b6 c0             	movzx  eax,al
c001e417:	50                   	push   eax
c001e418:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e41d:	99                   	cdq    
c001e41e:	f7 fb                	idiv   ebx
c001e420:	83 c2 30             	add    edx,0x30
c001e423:	0f b6 d2             	movzx  edx,dl
c001e426:	52                   	push   edx
c001e427:	e8 3c ee ff ff       	call   c001d268 <combineCharAndColour(char, unsigned char)>
c001e42c:	83 c4 10             	add    esp,0x10
c001e42f:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e435:	31 c0                	xor    eax,eax
c001e437:	83 c4 0c             	add    esp,0xc
c001e43a:	5b                   	pop    ebx
c001e43b:	5e                   	pop    esi
c001e43c:	5f                   	pop    edi
c001e43d:	5d                   	pop    ebp
c001e43e:	c3                   	ret    
c001e43f:	90                   	nop

c001e440 <SATAPI::write(unsigned long long, int, void*)>:
c001e440:	b8 03 00 00 00       	mov    eax,0x3
c001e445:	c3                   	ret    

c001e446 <SATAPI::close(int, int, void*)>:
c001e446:	83 ec 0c             	sub    esp,0xc
c001e449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e44d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e453:	85 c0                	test   eax,eax
c001e455:	74 0c                	je     c001e463 <SATAPI::close(int, int, void*)+0x1d>
c001e457:	8b 10                	mov    edx,DWORD PTR [eax]
c001e459:	83 ec 0c             	sub    esp,0xc
c001e45c:	50                   	push   eax
c001e45d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e460:	83 c4 10             	add    esp,0x10
c001e463:	31 c0                	xor    eax,eax
c001e465:	83 c4 0c             	add    esp,0xc
c001e468:	c3                   	ret    
c001e469:	90                   	nop

c001e46a <SATAPI::SATAPI()>:
c001e46a:	83 ec 0c             	sub    esp,0xc
c001e46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e471:	83 ec 04             	sub    esp,0x4
c001e474:	68 00 08 00 00       	push   0x800
c001e479:	68 f0 35 02 c0       	push   0xc00235f0
c001e47e:	50                   	push   eax
c001e47f:	e8 4a e9 fe ff       	call   c000cdce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e484:	83 c4 10             	add    esp,0x10
c001e487:	ba e4 36 02 c0       	mov    edx,0xc00236e4
c001e48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e490:	89 10                	mov    DWORD PTR [eax],edx
c001e492:	90                   	nop
c001e493:	83 c4 0c             	add    esp,0xc
c001e496:	c3                   	ret    
c001e497:	90                   	nop

c001e498 <SATAPI::diskRemoved()>:
c001e498:	c3                   	ret    
c001e499:	90                   	nop

c001e49a <SATAPI::diskInserted()>:
c001e49a:	83 ec 18             	sub    esp,0x18
c001e49d:	68 fc 35 02 c0       	push   0xc00235fc
c001e4a2:	e8 c3 c4 fe ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001e4a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4ab:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e4b2:	83 c4 1c             	add    esp,0x1c
c001e4b5:	c3                   	ret    

c001e4b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e4b6:	55                   	push   ebp
c001e4b7:	57                   	push   edi
c001e4b8:	56                   	push   esi
c001e4b9:	53                   	push   ebx
c001e4ba:	83 ec 34             	sub    esp,0x34
c001e4bd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e4c1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e4c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e4c9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e4cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e4d1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e4dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e4e1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e4e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e4eb:	83 c0 02             	add    eax,0x2
c001e4ee:	c1 e0 07             	shl    eax,0x7
c001e4f1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4fd:	c1 e0 07             	shl    eax,0x7
c001e500:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e504:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e508:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e512:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e516:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e51c:	e8 ff e4 ff ff       	call   c001ca20 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e521:	83 c4 10             	add    esp,0x10
c001e524:	89 c2                	mov    edx,eax
c001e526:	b8 01 00 00 00       	mov    eax,0x1
c001e52b:	83 fa ff             	cmp    edx,0xffffffff
c001e52e:	0f 84 5f 02 00 00    	je     c001e793 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e53c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e542:	8b 00                	mov    eax,DWORD PTR [eax]
c001e544:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e54a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e550:	89 d1                	mov    ecx,edx
c001e552:	c1 e1 05             	shl    ecx,0x5
c001e555:	01 c8                	add    eax,ecx
c001e557:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e559:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e55f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e565:	89 08                	mov    DWORD PTR [eax],ecx
c001e567:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e56d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e573:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e579:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e57c:	50                   	push   eax
c001e57d:	68 90 00 00 00       	push   0x90
c001e582:	6a 00                	push   0x0
c001e584:	53                   	push   ebx
c001e585:	e8 66 1f fe ff       	call   c00004f0 <memset>
c001e58a:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e58d:	b9 0c 00 00 00       	mov    ecx,0xc
c001e592:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e596:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e598:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e59e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e5a2:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e5a6:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e5ac:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e5b0:	48                   	dec    eax
c001e5b1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e5b6:	89 c1                	mov    ecx,eax
c001e5b8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e5be:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e5c3:	09 c8                	or     eax,ecx
c001e5c5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e5cb:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e5d1:	83 c8 80             	or     eax,0xffffff80
c001e5d4:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e5da:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e5dd:	25 00 7f 00 00       	and    eax,0x7f00
c001e5e2:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e5e7:	66 89 03             	mov    WORD PTR [ebx],ax
c001e5ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5ee:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e5f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5f6:	c1 e8 10             	shr    eax,0x10
c001e5f9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e5fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e600:	c1 e8 18             	shr    eax,0x18
c001e603:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e606:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e60a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e60d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e611:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e614:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e618:	83 c4 10             	add    esp,0x10
c001e61b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e61f:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e623:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e627:	31 c0                	xor    eax,eax
c001e629:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e62f:	80 e1 88             	and    cl,0x88
c001e632:	74 0a                	je     c001e63e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e634:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e639:	74 0a                	je     c001e645 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e63b:	40                   	inc    eax
c001e63c:	eb eb                	jmp    c001e629 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e63e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e643:	75 43                	jne    c001e688 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e645:	83 ec 0c             	sub    esp,0xc
c001e648:	68 14 36 02 c0       	push   0xc0023614
c001e64d:	e8 18 c3 fe ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001e652:	58                   	pop    eax
c001e653:	5a                   	pop    edx
c001e654:	68 29 36 02 c0       	push   0xc0023629
c001e659:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e65f:	e8 a8 a4 fe ff       	call   c0008b0c <VgaText::puts(char const*)>
c001e664:	59                   	pop    ecx
c001e665:	5b                   	pop    ebx
c001e666:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e66a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e670:	e8 45 e4 ff ff       	call   c001caba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e675:	5e                   	pop    esi
c001e676:	5f                   	pop    edi
c001e677:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e67b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e681:	e8 14 e4 ff ff       	call   c001ca9a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e686:	eb 48                	jmp    c001e6d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e688:	b8 01 00 00 00       	mov    eax,0x1
c001e68d:	88 d1                	mov    cl,dl
c001e68f:	d3 e0                	shl    eax,cl
c001e691:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e696:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e69c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e6a0:	89 c7                	mov    edi,eax
c001e6a2:	c1 e3 07             	shl    ebx,0x7
c001e6a5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e6a9:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e6af:	85 c7                	test   edi,eax
c001e6b1:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e6b7:	0f 84 a3 00 00 00    	je     c001e760 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e6bd:	0f ba e0 1e          	bt     eax,0x1e
c001e6c1:	73 1a                	jae    c001e6dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e6c3:	83 ec 0c             	sub    esp,0xc
c001e6c6:	68 3b 36 02 c0       	push   0xc002363b
c001e6cb:	e8 9a c2 fe ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001e6d0:	83 c4 10             	add    esp,0x10
c001e6d3:	b8 01 00 00 00       	mov    eax,0x1
c001e6d8:	e9 b6 00 00 00       	jmp    c001e793 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e6dd:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e6e3:	83 f8 0d             	cmp    eax,0xd
c001e6e6:	77 0a                	ja     c001e6f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e6e8:	83 ec 0c             	sub    esp,0xc
c001e6eb:	68 c8 00 00 00       	push   0xc8
c001e6f0:	eb 28                	jmp    c001e71a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e6f2:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e6f8:	83 f8 0d             	cmp    eax,0xd
c001e6fb:	77 0a                	ja     c001e707 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e6fd:	83 ec 0c             	sub    esp,0xc
c001e700:	68 58 02 00 00       	push   0x258
c001e705:	eb 13                	jmp    c001e71a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e707:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e70d:	83 f8 06             	cmp    eax,0x6
c001e710:	77 10                	ja     c001e722 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e712:	83 ec 0c             	sub    esp,0xc
c001e715:	68 dc 05 00 00       	push   0x5dc
c001e71a:	e8 69 7d ff ff       	call   c0016488 <milliTenthSleep(unsigned int)>
c001e71f:	83 c4 10             	add    esp,0x10
c001e722:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e726:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e729:	75 06                	jne    c001e731 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e72b:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e72f:	74 15                	je     c001e746 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e731:	83 fe 06             	cmp    esi,0x6
c001e734:	77 10                	ja     c001e746 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e736:	83 ec 0c             	sub    esp,0xc
c001e739:	68 c4 09 00 00       	push   0x9c4
c001e73e:	e8 45 7d ff ff       	call   c0016488 <milliTenthSleep(unsigned int)>
c001e743:	83 c4 10             	add    esp,0x10
c001e746:	46                   	inc    esi
c001e747:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e74d:	0f 85 56 ff ff ff    	jne    c001e6a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e753:	83 ec 0c             	sub    esp,0xc
c001e756:	68 4e 36 02 c0       	push   0xc002364e
c001e75b:	e9 6b ff ff ff       	jmp    c001e6cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e760:	0f ba e0 1e          	bt     eax,0x1e
c001e764:	73 0d                	jae    c001e773 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e766:	83 ec 0c             	sub    esp,0xc
c001e769:	68 62 36 02 c0       	push   0xc0023662
c001e76e:	e9 58 ff ff ff       	jmp    c001e6cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e773:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e778:	74 17                	je     c001e791 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e77a:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e77f:	74 10                	je     c001e791 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e781:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e787:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e78b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e78f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e791:	31 c0                	xor    eax,eax
c001e793:	83 c4 2c             	add    esp,0x2c
c001e796:	5b                   	pop    ebx
c001e797:	5e                   	pop    esi
c001e798:	5f                   	pop    edi
c001e799:	5d                   	pop    ebp
c001e79a:	c3                   	ret    
c001e79b:	90                   	nop

c001e79c <SATAPI::eject()>:
c001e79c:	57                   	push   edi
c001e79d:	b9 03 00 00 00       	mov    ecx,0x3
c001e7a2:	83 ec 18             	sub    esp,0x18
c001e7a5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e7a9:	fc                   	cld    
c001e7aa:	31 c0                	xor    eax,eax
c001e7ac:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e7ae:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e7b3:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e7b8:	50                   	push   eax
c001e7b9:	6a 00                	push   0x0
c001e7bb:	6a 00                	push   0x0
c001e7bd:	6a 00                	push   0x0
c001e7bf:	6a 00                	push   0x0
c001e7c1:	6a 02                	push   0x2
c001e7c3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e7c7:	50                   	push   eax
c001e7c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e7cc:	e8 e5 fc ff ff       	call   c001e4b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e7d1:	83 c4 38             	add    esp,0x38
c001e7d4:	31 c0                	xor    eax,eax
c001e7d6:	5f                   	pop    edi
c001e7d7:	c3                   	ret    

c001e7d8 <SATAPI::detectMedia()>:
c001e7d8:	53                   	push   ebx
c001e7d9:	83 ec 14             	sub    esp,0x14
c001e7dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e7e0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e7e6:	e8 69 ff fe ff       	call   c000e754 <VCache::writeWriteBuffer()>
c001e7eb:	59                   	pop    ecx
c001e7ec:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e7f2:	e8 4d ff fe ff       	call   c000e744 <VCache::invalidateReadBuffer()>
c001e7f7:	c7 04 24 77 36 02 c0 	mov    DWORD PTR [esp],0xc0023677
c001e7fe:	e8 67 c1 fe ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001e803:	83 c4 10             	add    esp,0x10
c001e806:	31 c0                	xor    eax,eax
c001e808:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e80f:	85 d2                	test   edx,edx
c001e811:	74 0f                	je     c001e822 <SATAPI::detectMedia()+0x4a>
c001e813:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e819:	75 07                	jne    c001e822 <SATAPI::detectMedia()+0x4a>
c001e81b:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e822:	40                   	inc    eax
c001e823:	83 f8 1a             	cmp    eax,0x1a
c001e826:	75 e0                	jne    c001e808 <SATAPI::detectMedia()+0x30>
c001e828:	83 c4 08             	add    esp,0x8
c001e82b:	5b                   	pop    ebx
c001e82c:	c3                   	ret    
c001e82d:	90                   	nop

c001e82e <SATAPI::open(int, int, void*)>:
c001e82e:	56                   	push   esi
c001e82f:	53                   	push   ebx
c001e830:	51                   	push   ecx
c001e831:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e835:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e839:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e843:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e849:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e84d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e857:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e861:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e868:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e86e:	e8 cf 95 fe ff       	call   c0007e42 <Phys::allocatePage()>
c001e873:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e879:	89 c6                	mov    esi,eax
c001e87b:	e8 c2 95 fe ff       	call   c0007e42 <Phys::allocatePage()>
c001e880:	81 c6 00 10 00 00    	add    esi,0x1000
c001e886:	39 c6                	cmp    esi,eax
c001e888:	74 10                	je     c001e89a <SATAPI::open(int, int, void*)+0x6c>
c001e88a:	83 ec 0c             	sub    esp,0xc
c001e88d:	68 8c 36 02 c0       	push   0xc002368c
c001e892:	e8 a8 2d ff ff       	call   c001163f <KePanic(char const*)>
c001e897:	83 c4 10             	add    esp,0x10
c001e89a:	83 ec 0c             	sub    esp,0xc
c001e89d:	6a 02                	push   0x2
c001e89f:	e8 b1 ad fe ff       	call   c0009655 <Virt::allocateKernelVirtualPages(int)>
c001e8a4:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e8aa:	6a 03                	push   0x3
c001e8ac:	50                   	push   eax
c001e8ad:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e8b3:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e8b9:	e8 a0 b4 fe ff       	call   c0009d5e <VAS::mapPage(unsigned long, unsigned long, int)>
c001e8be:	83 c4 14             	add    esp,0x14
c001e8c1:	68 78 01 00 00       	push   0x178
c001e8c6:	e8 68 92 fe ff       	call   c0007b33 <malloc>
c001e8cb:	83 c4 0c             	add    esp,0xc
c001e8ce:	6a 00                	push   0x0
c001e8d0:	68 ff ff ff 7f       	push   0x7fffffff
c001e8d5:	6a 00                	push   0x0
c001e8d7:	6a 00                	push   0x0
c001e8d9:	53                   	push   ebx
c001e8da:	68 a2 36 02 c0       	push   0xc00236a2
c001e8df:	89 c6                	mov    esi,eax
c001e8e1:	50                   	push   eax
c001e8e2:	e8 c7 f2 fe ff       	call   c000dbae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e8e7:	83 c4 14             	add    esp,0x14
c001e8ea:	56                   	push   esi
c001e8eb:	e8 7e f3 fe ff       	call   c000dc6e <LogicalDisk::assignDriveLetter()>
c001e8f0:	5a                   	pop    edx
c001e8f1:	59                   	pop    ecx
c001e8f2:	0f be c0             	movsx  eax,al
c001e8f5:	50                   	push   eax
c001e8f6:	68 f4 34 02 c0       	push   0xc00234f4
c001e8fb:	e8 6a c0 fe ff       	call   c000a96a <Dbg::kprintf(char const*, ...)>
c001e900:	58                   	pop    eax
c001e901:	5a                   	pop    edx
c001e902:	56                   	push   esi
c001e903:	53                   	push   ebx
c001e904:	e8 f7 e0 fe ff       	call   c000ca00 <Device::addChild(Device*)>
c001e909:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e90f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e912:	e8 1f e5 fe ff       	call   c000ce36 <PhysicalDisk::startCache()>
c001e917:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e91e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e921:	e8 b2 fe ff ff       	call   c001e7d8 <SATAPI::detectMedia()>
c001e926:	83 c4 14             	add    esp,0x14
c001e929:	31 c0                	xor    eax,eax
c001e92b:	5b                   	pop    ebx
c001e92c:	5e                   	pop    esi
c001e92d:	c3                   	ret    

c001e92e <SATAPI::read(unsigned long long, int, void*)>:
c001e92e:	55                   	push   ebp
c001e92f:	57                   	push   edi
c001e930:	56                   	push   esi
c001e931:	53                   	push   ebx
c001e932:	83 ec 3c             	sub    esp,0x3c
c001e935:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e939:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e93d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e941:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e945:	83 fd 04             	cmp    ebp,0x4
c001e948:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e94c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e950:	7e 10                	jle    c001e962 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e952:	83 ec 0c             	sub    esp,0xc
c001e955:	68 b0 36 02 c0       	push   0xc00236b0
c001e95a:	e8 e0 2c ff ff       	call   c001163f <KePanic(char const*)>
c001e95f:	83 c4 10             	add    esp,0x10
c001e962:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e968:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e96e:	51                   	push   ecx
c001e96f:	50                   	push   eax
c001e970:	83 c0 02             	add    eax,0x2
c001e973:	c1 e0 07             	shl    eax,0x7
c001e976:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e97c:	50                   	push   eax
c001e97d:	52                   	push   edx
c001e97e:	e8 61 e1 ff ff       	call   c001cae4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e983:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e987:	b9 03 00 00 00       	mov    ecx,0x3
c001e98c:	fc                   	cld    
c001e98d:	31 c0                	xor    eax,eax
c001e98f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e991:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e996:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e99b:	83 c4 0c             	add    esp,0xc
c001e99e:	6a 00                	push   0x0
c001e9a0:	6a 00                	push   0x0
c001e9a2:	6a 00                	push   0x0
c001e9a4:	6a 00                	push   0x0
c001e9a6:	6a 02                	push   0x2
c001e9a8:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e9ac:	50                   	push   eax
c001e9ad:	53                   	push   ebx
c001e9ae:	e8 03 fb ff ff       	call   c001e4b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e9b3:	83 c4 20             	add    esp,0x20
c001e9b6:	85 c0                	test   eax,eax
c001e9b8:	89 c6                	mov    esi,eax
c001e9ba:	75 46                	jne    c001ea02 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e9bc:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e9c0:	b9 03 00 00 00       	mov    ecx,0x3
c001e9c5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e9c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9cb:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e9d0:	0f c8                	bswap  eax
c001e9d2:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e9d6:	89 e8                	mov    eax,ebp
c001e9d8:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e9dc:	50                   	push   eax
c001e9dd:	55                   	push   ebp
c001e9de:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e9e2:	c1 e5 0b             	shl    ebp,0xb
c001e9e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e9e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e9ed:	55                   	push   ebp
c001e9ee:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e9f2:	50                   	push   eax
c001e9f3:	53                   	push   ebx
c001e9f4:	e8 bd fa ff ff       	call   c001e4b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e9f9:	83 c4 20             	add    esp,0x20
c001e9fc:	85 c0                	test   eax,eax
c001e9fe:	89 c6                	mov    esi,eax
c001ea00:	74 0c                	je     c001ea0e <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001ea02:	83 ec 0c             	sub    esp,0xc
c001ea05:	53                   	push   ebx
c001ea06:	e8 cd fd ff ff       	call   c001e7d8 <SATAPI::detectMedia()>
c001ea0b:	83 c4 10             	add    esp,0x10
c001ea0e:	83 c4 3c             	add    esp,0x3c
c001ea11:	89 f0                	mov    eax,esi
c001ea13:	5b                   	pop    ebx
c001ea14:	5e                   	pop    esi
c001ea15:	5f                   	pop    edi
c001ea16:	5d                   	pop    ebp
c001ea17:	c3                   	ret    

c001ea18 <IOAPIC::close(int, int, void*)>:
c001ea18:	b8 00 00 00 00       	mov    eax,0x0
c001ea1d:	c3                   	ret    

c001ea1e <apicGetBase()>:
c001ea1e:	55                   	push   ebp
c001ea1f:	89 e5                	mov    ebp,esp
c001ea21:	83 ec 18             	sub    esp,0x18
c001ea24:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea29:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ea2f:	83 e0 08             	and    eax,0x8
c001ea32:	0f b6 c0             	movzx  eax,al
c001ea35:	85 c0                	test   eax,eax
c001ea37:	75 07                	jne    c001ea40 <apicGetBase()+0x22>
c001ea39:	b8 00 00 00 00       	mov    eax,0x0
c001ea3e:	eb 21                	jmp    c001ea61 <apicGetBase()+0x43>
c001ea40:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea45:	83 ec 08             	sub    esp,0x8
c001ea48:	6a 1b                	push   0x1b
c001ea4a:	50                   	push   eax
c001ea4b:	e8 f4 86 fe ff       	call   c0007144 <Computer::rdmsr(unsigned int)>
c001ea50:	83 c4 10             	add    esp,0x10
c001ea53:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ea56:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001ea59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea5c:	25 00 00 ff ff       	and    eax,0xffff0000
c001ea61:	c9                   	leave  
c001ea62:	c3                   	ret    
c001ea63:	90                   	nop

c001ea64 <IOAPIC::IOAPIC()>:
c001ea64:	83 ec 0c             	sub    esp,0xc
c001ea67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6b:	83 ec 08             	sub    esp,0x8
c001ea6e:	68 14 37 02 c0       	push   0xc0023714
c001ea73:	50                   	push   eax
c001ea74:	e8 1f e1 fe ff       	call   c000cb98 <Device::Device(char const*)>
c001ea79:	83 c4 10             	add    esp,0x10
c001ea7c:	ba 24 37 02 c0       	mov    edx,0xc0023724
c001ea81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea85:	89 10                	mov    DWORD PTR [eax],edx
c001ea87:	90                   	nop
c001ea88:	83 c4 0c             	add    esp,0xc
c001ea8b:	c3                   	ret    

c001ea8c <apicOpen()>:
c001ea8c:	55                   	push   ebp
c001ea8d:	89 e5                	mov    ebp,esp
c001ea8f:	53                   	push   ebx
c001ea90:	83 ec 34             	sub    esp,0x34
c001ea93:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001ea98:	83 f0 01             	xor    eax,0x1
c001ea9b:	0f b6 c0             	movzx  eax,al
c001ea9e:	85 c0                	test   eax,eax
c001eaa0:	0f 84 a3 00 00 00    	je     c001eb49 <apicOpen()+0xbd>
c001eaa6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001eaaa:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001eaaf:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eab3:	0f b6 c0             	movzx  eax,al
c001eab6:	39 c2                	cmp    edx,eax
c001eab8:	0f 83 84 00 00 00    	jae    c001eb42 <apicOpen()+0xb6>
c001eabe:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001eac5:	83 ec 0c             	sub    esp,0xc
c001eac8:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001eacb:	e8 63 90 fe ff       	call   c0007b33 <malloc>
c001ead0:	83 c4 10             	add    esp,0x10
c001ead3:	89 c3                	mov    ebx,eax
c001ead5:	83 ec 0c             	sub    esp,0xc
c001ead8:	53                   	push   ebx
c001ead9:	e8 86 ff ff ff       	call   c001ea64 <IOAPIC::IOAPIC()>
c001eade:	83 c4 10             	add    esp,0x10
c001eae1:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001eae4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001eae8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001eaeb:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001eaf2:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001eaf7:	83 c0 01             	add    eax,0x1
c001eafa:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001eaff:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001eb04:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001eb0a:	83 ec 08             	sub    esp,0x8
c001eb0d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eb10:	50                   	push   eax
c001eb11:	e8 ea de fe ff       	call   c000ca00 <Device::addChild(Device*)>
c001eb16:	83 c4 10             	add    esp,0x10
c001eb19:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eb1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb1e:	83 c0 08             	add    eax,0x8
c001eb21:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb23:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eb27:	6a 00                	push   0x0
c001eb29:	6a 00                	push   0x0
c001eb2b:	52                   	push   edx
c001eb2c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eb2f:	ff d0                	call   eax
c001eb31:	83 c4 10             	add    esp,0x10
c001eb34:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001eb37:	83 c0 01             	add    eax,0x1
c001eb3a:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001eb3d:	e9 68 ff ff ff       	jmp    c001eaaa <apicOpen()+0x1e>
c001eb42:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001eb49:	e8 d0 fe ff ff       	call   c001ea1e <apicGetBase()>
c001eb4e:	05 f0 00 00 00       	add    eax,0xf0
c001eb53:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eb56:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb59:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb5b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eb5e:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eb65:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eb6c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb6f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eb72:	89 10                	mov    DWORD PTR [eax],edx
c001eb74:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eb7b:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eb80:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eb83:	7d 7c                	jge    c001ec01 <apicOpen()+0x175>
c001eb85:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb88:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb8f:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001eb92:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb95:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb9c:	c1 e8 08             	shr    eax,0x8
c001eb9f:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eba3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eba6:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ebad:	c1 e8 18             	shr    eax,0x18
c001ebb0:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ebb3:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ebb7:	3d ff 00 00 00       	cmp    eax,0xff
c001ebbc:	75 3a                	jne    c001ebf8 <apicOpen()+0x16c>
c001ebbe:	e8 5b fe ff ff       	call   c001ea1e <apicGetBase()>
c001ebc3:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ebc7:	83 fa 01             	cmp    edx,0x1
c001ebca:	75 07                	jne    c001ebd3 <apicOpen()+0x147>
c001ebcc:	ba 60 03 00 00       	mov    edx,0x360
c001ebd1:	eb 05                	jmp    c001ebd8 <apicOpen()+0x14c>
c001ebd3:	ba 50 03 00 00       	mov    edx,0x350
c001ebd8:	01 d0                	add    eax,edx
c001ebda:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ebdd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ebe0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebe2:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ebe5:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ebec:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ebf0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ebf3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ebf6:	89 10                	mov    DWORD PTR [eax],edx
c001ebf8:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ebfc:	e9 7a ff ff ff       	jmp    c001eb7b <apicOpen()+0xef>
c001ec01:	90                   	nop
c001ec02:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ec05:	c9                   	leave  
c001ec06:	c3                   	ret    
c001ec07:	90                   	nop

c001ec08 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ec08:	55                   	push   ebp
c001ec09:	89 e5                	mov    ebp,esp
c001ec0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ec14:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ec17:	72 1d                	jb     c001ec36 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ec19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec1c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ec22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec25:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ec2b:	01 d0                	add    eax,edx
c001ec2d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ec30:	73 04                	jae    c001ec36 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ec32:	b0 01                	mov    al,0x1
c001ec34:	eb 02                	jmp    c001ec38 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ec36:	b0 00                	mov    al,0x0
c001ec38:	5d                   	pop    ebp
c001ec39:	c3                   	ret    

c001ec3a <IOAPIC::read(int)>:
c001ec3a:	55                   	push   ebp
c001ec3b:	89 e5                	mov    ebp,esp
c001ec3d:	83 ec 10             	sub    esp,0x10
c001ec40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec43:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec49:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec4f:	0f b6 d0             	movzx  edx,al
c001ec52:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec55:	89 10                	mov    DWORD PTR [eax],edx
c001ec57:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec5a:	83 c0 10             	add    eax,0x10
c001ec5d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec5f:	c9                   	leave  
c001ec60:	c3                   	ret    
c001ec61:	90                   	nop

c001ec62 <IOAPIC::open(int, int, void*)>:
c001ec62:	55                   	push   ebp
c001ec63:	89 e5                	mov    ebp,esp
c001ec65:	57                   	push   edi
c001ec66:	56                   	push   esi
c001ec67:	53                   	push   ebx
c001ec68:	83 ec 04             	sub    esp,0x4
c001ec6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec6e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ec71:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec7a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec80:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ec87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec8a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ec90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec93:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec99:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001eca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eca3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001eca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecac:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ecb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecb5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ecbb:	0f b6 f0             	movzx  esi,al
c001ecbe:	89 d0                	mov    eax,edx
c001ecc0:	ba 00 00 00 00       	mov    edx,0x0
c001ecc5:	89 c7                	mov    edi,eax
c001ecc7:	83 e7 ff             	and    edi,0xffffffff
c001ecca:	89 f9                	mov    ecx,edi
c001eccc:	0f b6 da             	movzx  ebx,dl
c001eccf:	89 c8                	mov    eax,ecx
c001ecd1:	89 da                	mov    edx,ebx
c001ecd3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ecd6:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ecd9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ecdd:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ece1:	83 e0 00             	and    eax,0x0
c001ece4:	09 d0                	or     eax,edx
c001ece6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ecea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eced:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ecf3:	8d 50 01             	lea    edx,[eax+0x1]
c001ecf6:	88 d1                	mov    cl,dl
c001ecf8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ecfb:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ed01:	0f b6 d0             	movzx  edx,al
c001ed04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed07:	83 c2 08             	add    edx,0x8
c001ed0a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ed0e:	0f b6 c9             	movzx  ecx,cl
c001ed11:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ed17:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ed1b:	6a 01                	push   0x1
c001ed1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed20:	e8 15 ff ff ff       	call   c001ec3a <IOAPIC::read(int)>
c001ed25:	83 c4 08             	add    esp,0x8
c001ed28:	c1 f8 10             	sar    eax,0x10
c001ed2b:	0f b6 c0             	movzx  eax,al
c001ed2e:	8d 50 01             	lea    edx,[eax+0x1]
c001ed31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed34:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ed3a:	b8 00 00 00 00       	mov    eax,0x0
c001ed3f:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ed42:	5b                   	pop    ebx
c001ed43:	5e                   	pop    esi
c001ed44:	5f                   	pop    edi
c001ed45:	5d                   	pop    ebp
c001ed46:	c3                   	ret    
c001ed47:	90                   	nop

c001ed48 <IOAPIC::write(int, int)>:
c001ed48:	55                   	push   ebp
c001ed49:	89 e5                	mov    ebp,esp
c001ed4b:	83 ec 10             	sub    esp,0x10
c001ed4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed51:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed57:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ed5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed5d:	0f b6 d0             	movzx  edx,al
c001ed60:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed63:	89 10                	mov    DWORD PTR [eax],edx
c001ed65:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed68:	8d 50 10             	lea    edx,[eax+0x10]
c001ed6b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed6e:	89 02                	mov    DWORD PTR [edx],eax
c001ed70:	90                   	nop
c001ed71:	c9                   	leave  
c001ed72:	c3                   	ret    
c001ed73:	90                   	nop

c001ed74 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ed74:	55                   	push   ebp
c001ed75:	89 e5                	mov    ebp,esp
c001ed77:	53                   	push   ebx
c001ed78:	83 ec 2c             	sub    esp,0x2c
c001ed7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed7e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ed81:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ed84:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ed87:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ed8a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed8d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ed90:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ed93:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ed96:	88 d8                	mov    al,bl
c001ed98:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ed9b:	88 c8                	mov    al,cl
c001ed9d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001eda0:	88 d0                	mov    al,dl
c001eda2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001eda5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001eda9:	83 c0 08             	add    eax,0x8
c001edac:	d1 e0                	shl    eax,1
c001edae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001edb1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001edb5:	83 c0 08             	add    eax,0x8
c001edb8:	d1 e0                	shl    eax,1
c001edba:	83 c0 01             	add    eax,0x1
c001edbd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001edc0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001edc3:	50                   	push   eax
c001edc4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edc7:	e8 6e fe ff ff       	call   c001ec3a <IOAPIC::read(int)>
c001edcc:	83 c4 08             	add    esp,0x8
c001edcf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001edd2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001edd9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eddc:	c1 e0 18             	shl    eax,0x18
c001eddf:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ede2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ede5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ede8:	52                   	push   edx
c001ede9:	50                   	push   eax
c001edea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eded:	e8 56 ff ff ff       	call   c001ed48 <IOAPIC::write(int, int)>
c001edf2:	83 c4 0c             	add    esp,0xc
c001edf5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001edf8:	50                   	push   eax
c001edf9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edfc:	e8 39 fe ff ff       	call   c001ec3a <IOAPIC::read(int)>
c001ee01:	83 c4 08             	add    esp,0x8
c001ee04:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ee07:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ee0e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ee15:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ee1c:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ee20:	85 c0                	test   eax,eax
c001ee22:	74 09                	je     c001ee2d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ee24:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ee2b:	eb 07                	jmp    c001ee34 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ee2d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ee34:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ee38:	85 c0                	test   eax,eax
c001ee3a:	74 09                	je     c001ee45 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ee3c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ee43:	eb 07                	jmp    c001ee4c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ee45:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ee4c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ee53:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ee57:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ee5a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ee5d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee60:	52                   	push   edx
c001ee61:	50                   	push   eax
c001ee62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee65:	e8 de fe ff ff       	call   c001ed48 <IOAPIC::write(int, int)>
c001ee6a:	83 c4 0c             	add    esp,0xc
c001ee6d:	90                   	nop
c001ee6e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee71:	c9                   	leave  
c001ee72:	c3                   	ret    
c001ee73:	90                   	nop

c001ee74 <APICTimer::close(int, int, void*)>:
c001ee74:	b8 00 00 00 00       	mov    eax,0x0
c001ee79:	c3                   	ret    
c001ee7a:	66 90                	xchg   ax,ax

c001ee7c <apicTimerHandler(regs*, void*)>:
c001ee7c:	83 ec 0c             	sub    esp,0xc
c001ee7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee83:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ee85:	b8 10 27 00 00       	mov    eax,0x2710
c001ee8a:	ba 00 00 00 00       	mov    edx,0x0
c001ee8f:	f7 f1                	div    ecx
c001ee91:	83 ec 0c             	sub    esp,0xc
c001ee94:	50                   	push   eax
c001ee95:	e8 d2 f5 fe ff       	call   c000e46c <timerHandler(unsigned int)>
c001ee9a:	83 c4 10             	add    esp,0x10
c001ee9d:	90                   	nop
c001ee9e:	83 c4 0c             	add    esp,0xc
c001eea1:	c3                   	ret    
c001eea2:	66 90                	xchg   ax,ax

c001eea4 <APICTimer::open(int, int, void*)>:
c001eea4:	83 ec 0c             	sub    esp,0xc
c001eea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeab:	8b 00                	mov    eax,DWORD PTR [eax]
c001eead:	83 c0 24             	add    eax,0x24
c001eeb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeb2:	83 ec 08             	sub    esp,0x8
c001eeb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eebd:	ff d0                	call   eax
c001eebf:	83 c4 10             	add    esp,0x10
c001eec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eeca:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eed8:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001eede:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eee2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001eee8:	83 ec 0c             	sub    esp,0xc
c001eeeb:	51                   	push   ecx
c001eeec:	6a 01                	push   0x1
c001eeee:	68 7c ee 01 c0       	push   0xc001ee7c
c001eef3:	52                   	push   edx
c001eef4:	50                   	push   eax
c001eef5:	e8 b2 da fe ff       	call   c000c9ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eefa:	83 c4 20             	add    esp,0x20
c001eefd:	89 c2                	mov    edx,eax
c001eeff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef03:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef09:	b8 00 00 00 00       	mov    eax,0x0
c001ef0e:	83 c4 0c             	add    esp,0xc
c001ef11:	c3                   	ret    
c001ef12:	66 90                	xchg   ax,ax

c001ef14 <APICTimer::write(int)>:
c001ef14:	83 ec 0c             	sub    esp,0xc
c001ef17:	83 ec 0c             	sub    esp,0xc
c001ef1a:	68 48 37 02 c0       	push   0xc0023748
c001ef1f:	e8 1b 27 ff ff       	call   c001163f <KePanic(char const*)>
c001ef24:	83 c4 10             	add    esp,0x10
c001ef27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef2f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef35:	90                   	nop
c001ef36:	83 c4 0c             	add    esp,0xc
c001ef39:	c3                   	ret    
c001ef3a:	66 90                	xchg   ax,ax

c001ef3c <APICTimer::APICTimer()>:
c001ef3c:	83 ec 0c             	sub    esp,0xc
c001ef3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef43:	83 ec 08             	sub    esp,0x8
c001ef46:	68 58 37 02 c0       	push   0xc0023758
c001ef4b:	50                   	push   eax
c001ef4c:	e8 4f f4 fe ff       	call   c000e3a0 <Timer::Timer(char const*)>
c001ef51:	83 c4 10             	add    esp,0x10
c001ef54:	ba 6c 37 02 c0       	mov    edx,0xc002376c
c001ef59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5d:	89 10                	mov    DWORD PTR [eax],edx
c001ef5f:	90                   	nop
c001ef60:	83 c4 0c             	add    esp,0xc
c001ef63:	c3                   	ret    

c001ef64 <PIT::write(int)>:
c001ef64:	83 ec 10             	sub    esp,0x10
c001ef67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef6f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef79:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ef7e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ef83:	89 c2                	mov    edx,eax
c001ef85:	c1 fa 1f             	sar    edx,0x1f
c001ef88:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ef8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef90:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ef97:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ef9c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001efa0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001efa5:	ee                   	out    dx,al
c001efa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efaa:	0f b6 c0             	movzx  eax,al
c001efad:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001efb4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001efb8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001efbc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001efc1:	ee                   	out    dx,al
c001efc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efc6:	c1 f8 08             	sar    eax,0x8
c001efc9:	0f b6 c0             	movzx  eax,al
c001efcc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001efd3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001efd7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001efdb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001efe0:	ee                   	out    dx,al
c001efe1:	90                   	nop
c001efe2:	83 c4 10             	add    esp,0x10
c001efe5:	c3                   	ret    
c001efe6:	66 90                	xchg   ax,ax

c001efe8 <pitHandler(regs*, void*)>:
c001efe8:	83 ec 0c             	sub    esp,0xc
c001efeb:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001eff1:	b8 10 27 00 00       	mov    eax,0x2710
c001eff6:	89 c2                	mov    edx,eax
c001eff8:	c1 fa 1f             	sar    edx,0x1f
c001effb:	f7 f9                	idiv   ecx
c001effd:	83 ec 0c             	sub    esp,0xc
c001f000:	50                   	push   eax
c001f001:	e8 66 f4 fe ff       	call   c000e46c <timerHandler(unsigned int)>
c001f006:	83 c4 10             	add    esp,0x10
c001f009:	90                   	nop
c001f00a:	83 c4 0c             	add    esp,0xc
c001f00d:	c3                   	ret    
c001f00e:	66 90                	xchg   ax,ax

c001f010 <PIT::open(int, int, void*)>:
c001f010:	83 ec 0c             	sub    esp,0xc
c001f013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f017:	8b 00                	mov    eax,DWORD PTR [eax]
c001f019:	83 c0 24             	add    eax,0x24
c001f01c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f01e:	83 ec 08             	sub    esp,0x8
c001f021:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f025:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f029:	ff d0                	call   eax
c001f02b:	83 c4 10             	add    esp,0x10
c001f02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f032:	83 ec 0c             	sub    esp,0xc
c001f035:	6a 00                	push   0x0
c001f037:	6a 01                	push   0x1
c001f039:	68 e8 ef 01 c0       	push   0xc001efe8
c001f03e:	6a 00                	push   0x0
c001f040:	50                   	push   eax
c001f041:	e8 66 d9 fe ff       	call   c000c9ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f046:	83 c4 20             	add    esp,0x20
c001f049:	89 c2                	mov    edx,eax
c001f04b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f04f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f055:	b8 00 00 00 00       	mov    eax,0x0
c001f05a:	83 c4 0c             	add    esp,0xc
c001f05d:	c3                   	ret    
c001f05e:	66 90                	xchg   ax,ax

c001f060 <PIT::close(int, int, void*)>:
c001f060:	83 ec 0c             	sub    esp,0xc
c001f063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f067:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f075:	6a 01                	push   0x1
c001f077:	68 e8 ef 01 c0       	push   0xc001efe8
c001f07c:	6a 00                	push   0x0
c001f07e:	50                   	push   eax
c001f07f:	e8 5e d9 fe ff       	call   c000c9e2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f084:	83 c4 10             	add    esp,0x10
c001f087:	b8 00 00 00 00       	mov    eax,0x0
c001f08c:	83 c4 0c             	add    esp,0xc
c001f08f:	c3                   	ret    

c001f090 <PIT::PIT()>:
c001f090:	83 ec 0c             	sub    esp,0xc
c001f093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f097:	83 ec 08             	sub    esp,0x8
c001f09a:	68 94 37 02 c0       	push   0xc0023794
c001f09f:	50                   	push   eax
c001f0a0:	e8 fb f2 fe ff       	call   c000e3a0 <Timer::Timer(char const*)>
c001f0a5:	83 c4 10             	add    esp,0x10
c001f0a8:	ba bc 37 02 c0       	mov    edx,0xc00237bc
c001f0ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b1:	89 10                	mov    DWORD PTR [eax],edx
c001f0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0bd:	0f b6 d0             	movzx  edx,al
c001f0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0d5:	0f b6 d0             	movzx  edx,al
c001f0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0dc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0eb:	8d 50 01             	lea    edx,[eax+0x1]
c001f0ee:	88 d1                	mov    cl,dl
c001f0f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0f4:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f0fa:	0f b6 d0             	movzx  edx,al
c001f0fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f101:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f105:	83 e1 3f             	and    ecx,0x3f
c001f108:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f10c:	90                   	nop
c001f10d:	83 c4 0c             	add    esp,0xc
c001f110:	c3                   	ret    
c001f111:	66 90                	xchg   ax,ax
c001f113:	66 90                	xchg   ax,ax
c001f115:	66 90                	xchg   ax,ax
c001f117:	66 90                	xchg   ax,ax
c001f119:	66 90                	xchg   ax,ax
c001f11b:	66 90                	xchg   ax,ax
c001f11d:	66 90                	xchg   ax,ax
c001f11f:	90                   	nop

c001f120 <avxDetect>:
c001f120:	b8 01 00 00 00       	mov    eax,0x1
c001f125:	0f a2                	cpuid  
c001f127:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f12d:	74 15                	je     c001f144 <avxDetect.noAVX>
c001f12f:	b8 01 00 00 00       	mov    eax,0x1
c001f134:	0f a2                	cpuid  
c001f136:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f13c:	74 06                	je     c001f144 <avxDetect.noAVX>
c001f13e:	b8 01 00 00 00       	mov    eax,0x1
c001f143:	c3                   	ret    

c001f144 <avxDetect.noAVX>:
c001f144:	b8 00 00 00 00       	mov    eax,0x0
c001f149:	c3                   	ret    

c001f14a <avxSave>:
c001f14a:	53                   	push   ebx
c001f14b:	52                   	push   edx
c001f14c:	31 c0                	xor    eax,eax
c001f14e:	48                   	dec    eax
c001f14f:	89 c2                	mov    edx,eax
c001f151:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f155:	0f ae 23             	xsave  [ebx]
c001f158:	5a                   	pop    edx
c001f159:	5b                   	pop    ebx
c001f15a:	c3                   	ret    

c001f15b <avxLoad>:
c001f15b:	53                   	push   ebx
c001f15c:	52                   	push   edx
c001f15d:	31 c0                	xor    eax,eax
c001f15f:	48                   	dec    eax
c001f160:	89 c2                	mov    edx,eax
c001f162:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f166:	0f ae 2b             	xrstor [ebx]
c001f169:	5a                   	pop    edx
c001f16a:	5b                   	pop    ebx
c001f16b:	c3                   	ret    

c001f16c <avxInit>:
c001f16c:	e8 67 03 00 00       	call   c001f4d8 <sseInit>
c001f171:	50                   	push   eax
c001f172:	51                   	push   ecx
c001f173:	0f 20 e0             	mov    eax,cr4
c001f176:	0d 00 00 04 00       	or     eax,0x40000
c001f17b:	0f 22 e0             	mov    cr4,eax
c001f17e:	31 c9                	xor    ecx,ecx
c001f180:	0f 01 d0             	xgetbv 
c001f183:	0d 07 00 00 00       	or     eax,0x7
c001f188:	0f 01 d1             	xsetbv 
c001f18b:	59                   	pop    ecx
c001f18c:	58                   	pop    eax
c001f18d:	c3                   	ret    

c001f18e <avxClose>:
c001f18e:	c3                   	ret    

c001f18f <wouldSheSayYes>:
c001f18f:	c3                   	ret    
c001f190:	49                   	dec    ecx
c001f191:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f195:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f199:	75 20                	jne    c001f1bb <isr0+0xb>
c001f19b:	4e                   	dec    esi
c001f19c:	79 61                	jns    c001f1ff <isr7+0x3>
c001f19e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f1a3:	66 90                	xchg   ax,ax
c001f1a5:	66 90                	xchg   ax,ax
c001f1a7:	66 90                	xchg   ax,ax
c001f1a9:	66 90                	xchg   ax,ax
c001f1ab:	66 90                	xchg   ax,ax
c001f1ad:	66 90                	xchg   ax,ax
c001f1af:	90                   	nop

c001f1b0 <isr0>:
c001f1b0:	fa                   	cli    
c001f1b1:	68 00 00 00 00       	push   0x0
c001f1b6:	68 00 00 00 00       	push   0x0
c001f1bb:	e9 56 01 00 00       	jmp    c001f316 <int_common_stub>

c001f1c0 <isr1>:
c001f1c0:	fa                   	cli    
c001f1c1:	6a 00                	push   0x0
c001f1c3:	6a 01                	push   0x1
c001f1c5:	e9 4c 01 00 00       	jmp    c001f316 <int_common_stub>

c001f1ca <isr2>:
c001f1ca:	fa                   	cli    
c001f1cb:	6a 00                	push   0x0
c001f1cd:	6a 02                	push   0x2
c001f1cf:	e9 42 01 00 00       	jmp    c001f316 <int_common_stub>

c001f1d4 <isr3>:
c001f1d4:	fa                   	cli    
c001f1d5:	6a 00                	push   0x0
c001f1d7:	6a 03                	push   0x3
c001f1d9:	e9 38 01 00 00       	jmp    c001f316 <int_common_stub>

c001f1de <isr4>:
c001f1de:	fa                   	cli    
c001f1df:	6a 00                	push   0x0
c001f1e1:	6a 04                	push   0x4
c001f1e3:	e9 2e 01 00 00       	jmp    c001f316 <int_common_stub>

c001f1e8 <isr5>:
c001f1e8:	fa                   	cli    
c001f1e9:	6a 00                	push   0x0
c001f1eb:	6a 05                	push   0x5
c001f1ed:	e9 24 01 00 00       	jmp    c001f316 <int_common_stub>

c001f1f2 <isr6>:
c001f1f2:	fa                   	cli    
c001f1f3:	6a 00                	push   0x0
c001f1f5:	6a 06                	push   0x6
c001f1f7:	e9 1a 01 00 00       	jmp    c001f316 <int_common_stub>

c001f1fc <isr7>:
c001f1fc:	fa                   	cli    
c001f1fd:	6a 00                	push   0x0
c001f1ff:	6a 07                	push   0x7
c001f201:	e9 10 01 00 00       	jmp    c001f316 <int_common_stub>

c001f206 <isr8>:
c001f206:	fa                   	cli    
c001f207:	6a 08                	push   0x8
c001f209:	e9 08 01 00 00       	jmp    c001f316 <int_common_stub>

c001f20e <isr9>:
c001f20e:	fa                   	cli    
c001f20f:	6a 00                	push   0x0
c001f211:	6a 09                	push   0x9
c001f213:	e9 fe 00 00 00       	jmp    c001f316 <int_common_stub>

c001f218 <isr10>:
c001f218:	fa                   	cli    
c001f219:	6a 0a                	push   0xa
c001f21b:	e9 f6 00 00 00       	jmp    c001f316 <int_common_stub>

c001f220 <isr11>:
c001f220:	fa                   	cli    
c001f221:	6a 0b                	push   0xb
c001f223:	e9 ee 00 00 00       	jmp    c001f316 <int_common_stub>

c001f228 <isr12>:
c001f228:	fa                   	cli    
c001f229:	6a 0c                	push   0xc
c001f22b:	e9 e6 00 00 00       	jmp    c001f316 <int_common_stub>

c001f230 <isr13>:
c001f230:	fa                   	cli    
c001f231:	6a 0d                	push   0xd
c001f233:	53                   	push   ebx
c001f234:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f238:	81 fb 06 f4 01 c0    	cmp    ebx,0xc001f406
c001f23e:	5b                   	pop    ebx
c001f23f:	0f 84 c3 01 00 00    	je     c001f408 <finishSignal2>
c001f245:	e9 cc 00 00 00       	jmp    c001f316 <int_common_stub>

c001f24a <isr14>:
c001f24a:	fa                   	cli    
c001f24b:	6a 0e                	push   0xe
c001f24d:	e9 c4 00 00 00       	jmp    c001f316 <int_common_stub>

c001f252 <isr15>:
c001f252:	fa                   	cli    
c001f253:	6a 00                	push   0x0
c001f255:	6a 0f                	push   0xf
c001f257:	e9 ba 00 00 00       	jmp    c001f316 <int_common_stub>

c001f25c <isr16>:
c001f25c:	fa                   	cli    
c001f25d:	6a 00                	push   0x0
c001f25f:	6a 10                	push   0x10
c001f261:	e9 b0 00 00 00       	jmp    c001f316 <int_common_stub>

c001f266 <isr17>:
c001f266:	fa                   	cli    
c001f267:	6a 00                	push   0x0
c001f269:	6a 11                	push   0x11
c001f26b:	e9 a6 00 00 00       	jmp    c001f316 <int_common_stub>

c001f270 <isr18>:
c001f270:	fa                   	cli    
c001f271:	6a 00                	push   0x0
c001f273:	6a 12                	push   0x12
c001f275:	e9 9c 00 00 00       	jmp    c001f316 <int_common_stub>

c001f27a <irq3>:
c001f27a:	fa                   	cli    
c001f27b:	6a 00                	push   0x0
c001f27d:	6a 23                	push   0x23
c001f27f:	e9 92 00 00 00       	jmp    c001f316 <int_common_stub>

c001f284 <irq4>:
c001f284:	fa                   	cli    
c001f285:	6a 00                	push   0x0
c001f287:	6a 24                	push   0x24
c001f289:	e9 88 00 00 00       	jmp    c001f316 <int_common_stub>

c001f28e <irq5>:
c001f28e:	fa                   	cli    
c001f28f:	6a 00                	push   0x0
c001f291:	6a 25                	push   0x25
c001f293:	e9 7e 00 00 00       	jmp    c001f316 <int_common_stub>

c001f298 <irq6>:
c001f298:	fa                   	cli    
c001f299:	6a 00                	push   0x0
c001f29b:	6a 26                	push   0x26
c001f29d:	e9 74 00 00 00       	jmp    c001f316 <int_common_stub>

c001f2a2 <irq7>:
c001f2a2:	fa                   	cli    
c001f2a3:	6a 00                	push   0x0
c001f2a5:	6a 27                	push   0x27
c001f2a7:	e9 6a 00 00 00       	jmp    c001f316 <int_common_stub>

c001f2ac <irq8>:
c001f2ac:	fa                   	cli    
c001f2ad:	6a 00                	push   0x0
c001f2af:	6a 28                	push   0x28
c001f2b1:	e9 60 00 00 00       	jmp    c001f316 <int_common_stub>

c001f2b6 <irq9>:
c001f2b6:	fa                   	cli    
c001f2b7:	6a 00                	push   0x0
c001f2b9:	6a 29                	push   0x29
c001f2bb:	e9 56 00 00 00       	jmp    c001f316 <int_common_stub>

c001f2c0 <irq10>:
c001f2c0:	fa                   	cli    
c001f2c1:	6a 00                	push   0x0
c001f2c3:	6a 2a                	push   0x2a
c001f2c5:	e9 4c 00 00 00       	jmp    c001f316 <int_common_stub>

c001f2ca <irq11>:
c001f2ca:	fa                   	cli    
c001f2cb:	6a 00                	push   0x0
c001f2cd:	6a 2b                	push   0x2b
c001f2cf:	e9 42 00 00 00       	jmp    c001f316 <int_common_stub>

c001f2d4 <irq12>:
c001f2d4:	fa                   	cli    
c001f2d5:	6a 00                	push   0x0
c001f2d7:	6a 2c                	push   0x2c
c001f2d9:	e9 38 00 00 00       	jmp    c001f316 <int_common_stub>

c001f2de <irq13>:
c001f2de:	fa                   	cli    
c001f2df:	6a 00                	push   0x0
c001f2e1:	6a 2d                	push   0x2d
c001f2e3:	e9 2e 00 00 00       	jmp    c001f316 <int_common_stub>

c001f2e8 <irq14>:
c001f2e8:	fa                   	cli    
c001f2e9:	6a 00                	push   0x0
c001f2eb:	6a 2e                	push   0x2e
c001f2ed:	e9 24 00 00 00       	jmp    c001f316 <int_common_stub>

c001f2f2 <irq15>:
c001f2f2:	fa                   	cli    
c001f2f3:	6a 00                	push   0x0
c001f2f5:	6a 2f                	push   0x2f
c001f2f7:	e9 1a 00 00 00       	jmp    c001f316 <int_common_stub>

c001f2fc <irq1>:
c001f2fc:	fa                   	cli    
c001f2fd:	6a 00                	push   0x0
c001f2ff:	6a 21                	push   0x21
c001f301:	eb 13                	jmp    c001f316 <int_common_stub>

c001f303 <irq2>:
c001f303:	fa                   	cli    
c001f304:	6a 00                	push   0x0
c001f306:	6a 22                	push   0x22
c001f308:	eb 0c                	jmp    c001f316 <int_common_stub>

c001f30a <isr96>:
c001f30a:	6a 00                	push   0x0
c001f30c:	6a 60                	push   0x60
c001f30e:	fb                   	sti    
c001f30f:	eb 37                	jmp    c001f348 <syscall_common_stub>

c001f311 <irq0>:
c001f311:	fa                   	cli    
c001f312:	6a 00                	push   0x0
c001f314:	6a 20                	push   0x20

c001f316 <int_common_stub>:
c001f316:	60                   	pusha  
c001f317:	1e                   	push   ds
c001f318:	06                   	push   es
c001f319:	0f a0                	push   fs
c001f31b:	0f a8                	push   gs
c001f31d:	66 b8 10 00          	mov    ax,0x10
c001f321:	66 8e d8             	mov    ds,ax
c001f324:	66 8e c0             	mov    es,ax
c001f327:	66 8e e0             	mov    fs,ax
c001f32a:	66 8e e8             	mov    gs,ax
c001f32d:	54                   	push   esp
c001f32e:	fc                   	cld    
c001f32f:	e8 78 db fe ff       	call   c000ceac <int_handler>
c001f334:	81 c4 04 00 00 00    	add    esp,0x4
c001f33a:	0f a9                	pop    gs
c001f33c:	0f a1                	pop    fs
c001f33e:	07                   	pop    es
c001f33f:	1f                   	pop    ds
c001f340:	61                   	popa   
c001f341:	81 c4 08 00 00 00    	add    esp,0x8
c001f347:	cf                   	iret   

c001f348 <syscall_common_stub>:
c001f348:	60                   	pusha  
c001f349:	1e                   	push   ds
c001f34a:	06                   	push   es
c001f34b:	0f a0                	push   fs
c001f34d:	0f a8                	push   gs
c001f34f:	66 b8 10 00          	mov    ax,0x10
c001f353:	66 8e d8             	mov    ds,ax
c001f356:	66 8e c0             	mov    es,ax
c001f359:	66 8e e0             	mov    fs,ax
c001f35c:	66 8e e8             	mov    gs,ax
c001f35f:	54                   	push   esp
c001f360:	fc                   	cld    
c001f361:	e8 46 db fe ff       	call   c000ceac <int_handler>
c001f366:	81 c4 04 00 00 00    	add    esp,0x4
c001f36c:	0f a9                	pop    gs
c001f36e:	0f a1                	pop    fs
c001f370:	07                   	pop    es
c001f371:	1f                   	pop    ds
c001f372:	e8 d8 28 ff ff       	call   c0011c4f <KiCheckSignalZ>
c001f377:	3d 00 00 00 00       	cmp    eax,0x0
c001f37c:	0f 84 c0 00 00 00    	je     c001f442 <skipSignals>
c001f382:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f387:	61                   	popa   
c001f388:	53                   	push   ebx
c001f389:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f38f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f392:	5b                   	pop    ebx
c001f393:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f398:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f39b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f39e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f3a1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f3a4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f3a7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f3aa:	81 c4 08 00 00 00    	add    esp,0x8
c001f3b0:	5e                   	pop    esi
c001f3b1:	5b                   	pop    ebx
c001f3b2:	59                   	pop    ecx
c001f3b3:	5a                   	pop    edx
c001f3b4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f3b7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f3ba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f3bd:	52                   	push   edx
c001f3be:	51                   	push   ecx
c001f3bf:	53                   	push   ebx
c001f3c0:	56                   	push   esi
c001f3c1:	81 ec 08 00 00 00    	sub    esp,0x8
c001f3c7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f3ca:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f3cd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f3d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f3d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f3d6:	60                   	pusha  
c001f3d7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f3dd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f3e0:	89 e3                	mov    ebx,esp
c001f3e2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f3e5:	52                   	push   edx
c001f3e6:	68 06 f4 01 c0       	push   0xc001f406
c001f3eb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f3ee:	89 dc                	mov    esp,ebx
c001f3f0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f3f3:	68 23 00 00 00       	push   0x23
c001f3f8:	51                   	push   ecx
c001f3f9:	68 02 02 00 00       	push   0x202
c001f3fe:	68 1b 00 00 00       	push   0x1b
c001f403:	ff 36                	push   DWORD PTR [esi]
c001f405:	cf                   	iret   

c001f406 <finishSignal>:
c001f406:	cd 0f                	int    0xf

c001f408 <finishSignal2>:
c001f408:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f40e:	e8 b9 28 ff ff       	call   c0011ccc <KiFinishSignalZ>
c001f413:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f419:	68 23 00 00 00       	push   0x23
c001f41e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f421:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f424:	68 1b 00 00 00       	push   0x1b
c001f429:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f42c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f42f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f432:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f435:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f438:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f43b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f43e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f441:	cf                   	iret   

c001f442 <skipSignals>:
c001f442:	61                   	popa   
c001f443:	81 c4 08 00 00 00    	add    esp,0x8
c001f449:	cf                   	iret   
c001f44a:	90                   	nop
c001f44b:	90                   	nop

c001f44c <irq16>:
c001f44c:	fa                   	cli    
c001f44d:	6a 00                	push   0x0
c001f44f:	6a 30                	push   0x30
c001f451:	e9 c0 fe ff ff       	jmp    c001f316 <int_common_stub>

c001f456 <irq17>:
c001f456:	fa                   	cli    
c001f457:	6a 00                	push   0x0
c001f459:	6a 31                	push   0x31
c001f45b:	e9 b6 fe ff ff       	jmp    c001f316 <int_common_stub>

c001f460 <irq18>:
c001f460:	fa                   	cli    
c001f461:	6a 00                	push   0x0
c001f463:	6a 32                	push   0x32
c001f465:	e9 ac fe ff ff       	jmp    c001f316 <int_common_stub>

c001f46a <irq19>:
c001f46a:	fa                   	cli    
c001f46b:	6a 00                	push   0x0
c001f46d:	6a 33                	push   0x33
c001f46f:	e9 a2 fe ff ff       	jmp    c001f316 <int_common_stub>

c001f474 <irq20>:
c001f474:	fa                   	cli    
c001f475:	6a 00                	push   0x0
c001f477:	6a 34                	push   0x34
c001f479:	e9 98 fe ff ff       	jmp    c001f316 <int_common_stub>

c001f47e <irq21>:
c001f47e:	fa                   	cli    
c001f47f:	6a 00                	push   0x0
c001f481:	6a 35                	push   0x35
c001f483:	e9 8e fe ff ff       	jmp    c001f316 <int_common_stub>

c001f488 <irq22>:
c001f488:	fa                   	cli    
c001f489:	6a 00                	push   0x0
c001f48b:	6a 36                	push   0x36
c001f48d:	e9 84 fe ff ff       	jmp    c001f316 <int_common_stub>

c001f492 <irq23>:
c001f492:	fa                   	cli    
c001f493:	6a 00                	push   0x0
c001f495:	6a 37                	push   0x37
c001f497:	e9 7a fe ff ff       	jmp    c001f316 <int_common_stub>
c001f49c:	66 90                	xchg   ax,ax
c001f49e:	66 90                	xchg   ax,ax

c001f4a0 <i386GetRDRAND>:
c001f4a0:	b9 64 00 00 00       	mov    ecx,0x64

c001f4a5 <retry>:
c001f4a5:	0f c7 f0             	rdrand eax
c001f4a8:	72 05                	jb     c001f4af <retry.done>
c001f4aa:	e2 f9                	loop   c001f4a5 <retry>

c001f4ac <retry.fail>:
c001f4ac:	31 c0                	xor    eax,eax
c001f4ae:	c3                   	ret    

c001f4af <retry.done>:
c001f4af:	c3                   	ret    

c001f4b0 <absolutelyNoChanceInHell>:
c001f4b0:	b8 01 00 00 00       	mov    eax,0x1
c001f4b5:	0f a2                	cpuid  
c001f4b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f4bd:	74 06                	je     c001f4c5 <sseDetect.noSSE>
c001f4bf:	b8 01 00 00 00       	mov    eax,0x1
c001f4c4:	c3                   	ret    

c001f4c5 <sseDetect.noSSE>:
c001f4c5:	31 c0                	xor    eax,eax
c001f4c7:	c3                   	ret    

c001f4c8 <sseSave>:
c001f4c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4cc:	0f ae 00             	fxsave [eax]
c001f4cf:	c3                   	ret    

c001f4d0 <sseLoad>:
c001f4d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4d4:	0f ae 08             	fxrstor [eax]
c001f4d7:	c3                   	ret    

c001f4d8 <sseInit>:
c001f4d8:	e8 42 00 00 00       	call   c001f51f <x87Init>
c001f4dd:	0f 20 e0             	mov    eax,cr4
c001f4e0:	66 0d 00 06          	or     ax,0x600
c001f4e4:	0f 22 e0             	mov    cr4,eax
c001f4e7:	c3                   	ret    

c001f4e8 <sseClose>:
c001f4e8:	c3                   	ret    
c001f4e9:	66 90                	xchg   ax,ax
c001f4eb:	66 90                	xchg   ax,ax
c001f4ed:	66 90                	xchg   ax,ax
c001f4ef:	90                   	nop

c001f4f0 <value_37F>:
c001f4f0:	7f 03                	jg     c001f4f5 <value_37A+0x1>

c001f4f2 <value_37E>:
c001f4f2:	7e 03                	jle    c001f4f7 <x87Detect+0x1>

c001f4f4 <value_37A>:
c001f4f4:	7a 03                	jp     c001f4f9 <x87Detect+0x3>

c001f4f6 <x87Detect>:
c001f4f6:	b8 01 00 00 00       	mov    eax,0x1
c001f4fb:	0f a2                	cpuid  
c001f4fd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f503:	74 06                	je     c001f50b <x87Detect.nox87>
c001f505:	b8 01 00 00 00       	mov    eax,0x1
c001f50a:	c3                   	ret    

c001f50b <x87Detect.nox87>:
c001f50b:	b8 00 00 00 00       	mov    eax,0x0
c001f510:	c3                   	ret    

c001f511 <x87Save>:
c001f511:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f515:	dd 30                	fnsave [eax]
c001f517:	c3                   	ret    

c001f518 <x87Load>:
c001f518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f51c:	dd 20                	frstor [eax]
c001f51e:	c3                   	ret    

c001f51f <x87Init>:
c001f51f:	0f 20 c0             	mov    eax,cr0
c001f522:	66 25 fb ff          	and    ax,0xfffb
c001f526:	66 0d 22 00          	or     ax,0x22
c001f52a:	0f 22 c0             	mov    cr0,eax
c001f52d:	db e3                	fninit 
c001f52f:	0f 06                	clts   
c001f531:	d9 2d f4 f4 01 c0    	fldcw  WORD PTR ds:0xc001f4f4
c001f537:	c3                   	ret    

c001f538 <x87Close>:
c001f538:	c3                   	ret    
c001f539:	66 90                	xchg   ax,ax
c001f53b:	90                   	nop

c001f53c <__do_global_ctors_aux>:
c001f53c:	a1 f0 04 02 c0       	mov    eax,ds:0xc00204f0
c001f541:	83 f8 ff             	cmp    eax,0xffffffff
c001f544:	74 1a                	je     c001f560 <__do_global_ctors_aux+0x24>
c001f546:	55                   	push   ebp
c001f547:	89 e5                	mov    ebp,esp
c001f549:	53                   	push   ebx
c001f54a:	52                   	push   edx
c001f54b:	bb f0 04 02 c0       	mov    ebx,0xc00204f0
c001f550:	ff d0                	call   eax
c001f552:	83 eb 04             	sub    ebx,0x4
c001f555:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f557:	83 f8 ff             	cmp    eax,0xffffffff
c001f55a:	75 f4                	jne    c001f550 <__do_global_ctors_aux+0x14>
c001f55c:	58                   	pop    eax
c001f55d:	5b                   	pop    ebx
c001f55e:	5d                   	pop    ebp
c001f55f:	c3                   	ret    
c001f560:	c3                   	ret    
c001f561:	66 90                	xchg   ax,ax
c001f563:	90                   	nop

c001f564 <__divdi3>:
c001f564:	55                   	push   ebp
c001f565:	57                   	push   edi
c001f566:	56                   	push   esi
c001f567:	53                   	push   ebx
c001f568:	83 ec 1c             	sub    esp,0x1c
c001f56b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f56f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f573:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f576:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f57a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f57e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f582:	85 db                	test   ebx,ebx
c001f584:	0f 88 8e 00 00 00    	js     c001f618 <__divdi3+0xb4>
c001f58a:	89 dd                	mov    ebp,ebx
c001f58c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f594:	89 d3                	mov    ebx,edx
c001f596:	85 d2                	test   edx,edx
c001f598:	79 0d                	jns    c001f5a7 <__divdi3+0x43>
c001f59a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f59e:	f7 d8                	neg    eax
c001f5a0:	83 d2 00             	adc    edx,0x0
c001f5a3:	f7 da                	neg    edx
c001f5a5:	89 d3                	mov    ebx,edx
c001f5a7:	89 c7                	mov    edi,eax
c001f5a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f5ac:	85 db                	test   ebx,ebx
c001f5ae:	75 48                	jne    c001f5f8 <__divdi3+0x94>
c001f5b0:	39 ef                	cmp    edi,ebp
c001f5b2:	76 24                	jbe    c001f5d8 <__divdi3+0x74>
c001f5b4:	89 ea                	mov    edx,ebp
c001f5b6:	f7 f7                	div    edi
c001f5b8:	89 c1                	mov    ecx,eax
c001f5ba:	31 f6                	xor    esi,esi
c001f5bc:	89 c8                	mov    eax,ecx
c001f5be:	89 f2                	mov    edx,esi
c001f5c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5c4:	85 c9                	test   ecx,ecx
c001f5c6:	74 07                	je     c001f5cf <__divdi3+0x6b>
c001f5c8:	f7 d8                	neg    eax
c001f5ca:	83 d2 00             	adc    edx,0x0
c001f5cd:	f7 da                	neg    edx
c001f5cf:	83 c4 1c             	add    esp,0x1c
c001f5d2:	5b                   	pop    ebx
c001f5d3:	5e                   	pop    esi
c001f5d4:	5f                   	pop    edi
c001f5d5:	5d                   	pop    ebp
c001f5d6:	c3                   	ret    
c001f5d7:	90                   	nop
c001f5d8:	85 ff                	test   edi,edi
c001f5da:	75 0b                	jne    c001f5e7 <__divdi3+0x83>
c001f5dc:	b8 01 00 00 00       	mov    eax,0x1
c001f5e1:	31 d2                	xor    edx,edx
c001f5e3:	f7 f3                	div    ebx
c001f5e5:	89 c7                	mov    edi,eax
c001f5e7:	31 d2                	xor    edx,edx
c001f5e9:	89 e8                	mov    eax,ebp
c001f5eb:	f7 f7                	div    edi
c001f5ed:	89 c6                	mov    esi,eax
c001f5ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f5f2:	f7 f7                	div    edi
c001f5f4:	89 c1                	mov    ecx,eax
c001f5f6:	eb c4                	jmp    c001f5bc <__divdi3+0x58>
c001f5f8:	39 eb                	cmp    ebx,ebp
c001f5fa:	77 3c                	ja     c001f638 <__divdi3+0xd4>
c001f5fc:	0f bd f3             	bsr    esi,ebx
c001f5ff:	83 f6 1f             	xor    esi,0x1f
c001f602:	75 40                	jne    c001f644 <__divdi3+0xe0>
c001f604:	39 eb                	cmp    ebx,ebp
c001f606:	72 09                	jb     c001f611 <__divdi3+0xad>
c001f608:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f60b:	0f 87 97 00 00 00    	ja     c001f6a8 <__divdi3+0x144>
c001f611:	b9 01 00 00 00       	mov    ecx,0x1
c001f616:	eb a4                	jmp    c001f5bc <__divdi3+0x58>
c001f618:	f7 d9                	neg    ecx
c001f61a:	83 d3 00             	adc    ebx,0x0
c001f61d:	f7 db                	neg    ebx
c001f61f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f622:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f626:	89 dd                	mov    ebp,ebx
c001f628:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f630:	e9 5f ff ff ff       	jmp    c001f594 <__divdi3+0x30>
c001f635:	8d 76 00             	lea    esi,[esi+0x0]
c001f638:	31 f6                	xor    esi,esi
c001f63a:	31 c9                	xor    ecx,ecx
c001f63c:	e9 7b ff ff ff       	jmp    c001f5bc <__divdi3+0x58>
c001f641:	8d 76 00             	lea    esi,[esi+0x0]
c001f644:	b8 20 00 00 00       	mov    eax,0x20
c001f649:	29 f0                	sub    eax,esi
c001f64b:	89 f1                	mov    ecx,esi
c001f64d:	d3 e3                	shl    ebx,cl
c001f64f:	89 fa                	mov    edx,edi
c001f651:	88 c1                	mov    cl,al
c001f653:	d3 ea                	shr    edx,cl
c001f655:	09 da                	or     edx,ebx
c001f657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f65b:	89 f1                	mov    ecx,esi
c001f65d:	d3 e7                	shl    edi,cl
c001f65f:	89 eb                	mov    ebx,ebp
c001f661:	88 c1                	mov    cl,al
c001f663:	d3 eb                	shr    ebx,cl
c001f665:	89 f1                	mov    ecx,esi
c001f667:	d3 e5                	shl    ebp,cl
c001f669:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f66c:	88 c1                	mov    cl,al
c001f66e:	d3 ea                	shr    edx,cl
c001f670:	09 d5                	or     ebp,edx
c001f672:	89 e8                	mov    eax,ebp
c001f674:	89 da                	mov    edx,ebx
c001f676:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f67a:	89 d3                	mov    ebx,edx
c001f67c:	89 c5                	mov    ebp,eax
c001f67e:	f7 e7                	mul    edi
c001f680:	39 d3                	cmp    ebx,edx
c001f682:	72 18                	jb     c001f69c <__divdi3+0x138>
c001f684:	74 0a                	je     c001f690 <__divdi3+0x12c>
c001f686:	89 e9                	mov    ecx,ebp
c001f688:	31 f6                	xor    esi,esi
c001f68a:	e9 2d ff ff ff       	jmp    c001f5bc <__divdi3+0x58>
c001f68f:	90                   	nop
c001f690:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f693:	89 f1                	mov    ecx,esi
c001f695:	d3 e7                	shl    edi,cl
c001f697:	39 c7                	cmp    edi,eax
c001f699:	73 eb                	jae    c001f686 <__divdi3+0x122>
c001f69b:	90                   	nop
c001f69c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f69f:	31 f6                	xor    esi,esi
c001f6a1:	e9 16 ff ff ff       	jmp    c001f5bc <__divdi3+0x58>
c001f6a6:	66 90                	xchg   ax,ax
c001f6a8:	31 c9                	xor    ecx,ecx
c001f6aa:	e9 0d ff ff ff       	jmp    c001f5bc <__divdi3+0x58>
c001f6af:	90                   	nop

c001f6b0 <__moddi3>:
c001f6b0:	55                   	push   ebp
c001f6b1:	57                   	push   edi
c001f6b2:	56                   	push   esi
c001f6b3:	53                   	push   ebx
c001f6b4:	83 ec 2c             	sub    esp,0x2c
c001f6b7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f6bb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f6bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f6c3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f6c7:	85 db                	test   ebx,ebx
c001f6c9:	0f 88 85 00 00 00    	js     c001f754 <__moddi3+0xa4>
c001f6cf:	89 de                	mov    esi,ebx
c001f6d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f6d9:	89 d7                	mov    edi,edx
c001f6db:	85 d2                	test   edx,edx
c001f6dd:	79 09                	jns    c001f6e8 <__moddi3+0x38>
c001f6df:	f7 d8                	neg    eax
c001f6e1:	83 d2 00             	adc    edx,0x0
c001f6e4:	f7 da                	neg    edx
c001f6e6:	89 d7                	mov    edi,edx
c001f6e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6ec:	89 cd                	mov    ebp,ecx
c001f6ee:	85 ff                	test   edi,edi
c001f6f0:	75 52                	jne    c001f744 <__moddi3+0x94>
c001f6f2:	89 c3                	mov    ebx,eax
c001f6f4:	39 f0                	cmp    eax,esi
c001f6f6:	76 24                	jbe    c001f71c <__moddi3+0x6c>
c001f6f8:	89 c8                	mov    eax,ecx
c001f6fa:	89 f2                	mov    edx,esi
c001f6fc:	f7 f3                	div    ebx
c001f6fe:	89 d6                	mov    esi,edx
c001f700:	89 f0                	mov    eax,esi
c001f702:	31 d2                	xor    edx,edx
c001f704:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f708:	85 c9                	test   ecx,ecx
c001f70a:	74 07                	je     c001f713 <__moddi3+0x63>
c001f70c:	f7 d8                	neg    eax
c001f70e:	83 d2 00             	adc    edx,0x0
c001f711:	f7 da                	neg    edx
c001f713:	83 c4 2c             	add    esp,0x2c
c001f716:	5b                   	pop    ebx
c001f717:	5e                   	pop    esi
c001f718:	5f                   	pop    edi
c001f719:	5d                   	pop    ebp
c001f71a:	c3                   	ret    
c001f71b:	90                   	nop
c001f71c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f720:	85 db                	test   ebx,ebx
c001f722:	75 0d                	jne    c001f731 <__moddi3+0x81>
c001f724:	b8 01 00 00 00       	mov    eax,0x1
c001f729:	31 d2                	xor    edx,edx
c001f72b:	f7 f7                	div    edi
c001f72d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f731:	89 f0                	mov    eax,esi
c001f733:	31 d2                	xor    edx,edx
c001f735:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f739:	f7 f7                	div    edi
c001f73b:	89 e8                	mov    eax,ebp
c001f73d:	f7 f7                	div    edi
c001f73f:	89 d6                	mov    esi,edx
c001f741:	eb bd                	jmp    c001f700 <__moddi3+0x50>
c001f743:	90                   	nop
c001f744:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f748:	39 f7                	cmp    edi,esi
c001f74a:	76 20                	jbe    c001f76c <__moddi3+0xbc>
c001f74c:	89 c8                	mov    eax,ecx
c001f74e:	89 f2                	mov    edx,esi
c001f750:	eb b2                	jmp    c001f704 <__moddi3+0x54>
c001f752:	66 90                	xchg   ax,ax
c001f754:	f7 d9                	neg    ecx
c001f756:	83 d3 00             	adc    ebx,0x0
c001f759:	f7 db                	neg    ebx
c001f75b:	89 de                	mov    esi,ebx
c001f75d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f765:	e9 6f ff ff ff       	jmp    c001f6d9 <__moddi3+0x29>
c001f76a:	66 90                	xchg   ax,ax
c001f76c:	0f bd c7             	bsr    eax,edi
c001f76f:	83 f0 1f             	xor    eax,0x1f
c001f772:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f776:	75 24                	jne    c001f79c <__moddi3+0xec>
c001f778:	39 f7                	cmp    edi,esi
c001f77a:	72 06                	jb     c001f782 <__moddi3+0xd2>
c001f77c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f780:	77 0c                	ja     c001f78e <__moddi3+0xde>
c001f782:	89 e9                	mov    ecx,ebp
c001f784:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f788:	19 fe                	sbb    esi,edi
c001f78a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f78e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f792:	89 f2                	mov    edx,esi
c001f794:	e9 6b ff ff ff       	jmp    c001f704 <__moddi3+0x54>
c001f799:	8d 76 00             	lea    esi,[esi+0x0]
c001f79c:	b8 20 00 00 00       	mov    eax,0x20
c001f7a1:	89 c2                	mov    edx,eax
c001f7a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f7a7:	29 da                	sub    edx,ebx
c001f7a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f7ad:	88 d9                	mov    cl,bl
c001f7af:	d3 e7                	shl    edi,cl
c001f7b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7b5:	88 d1                	mov    cl,dl
c001f7b7:	d3 e8                	shr    eax,cl
c001f7b9:	09 c7                	or     edi,eax
c001f7bb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f7bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f7c3:	89 d8                	mov    eax,ebx
c001f7c5:	88 d9                	mov    cl,bl
c001f7c7:	d3 e7                	shl    edi,cl
c001f7c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f7cd:	89 f3                	mov    ebx,esi
c001f7cf:	88 d1                	mov    cl,dl
c001f7d1:	d3 eb                	shr    ebx,cl
c001f7d3:	89 c7                	mov    edi,eax
c001f7d5:	88 c1                	mov    cl,al
c001f7d7:	d3 e6                	shl    esi,cl
c001f7d9:	89 e8                	mov    eax,ebp
c001f7db:	88 d1                	mov    cl,dl
c001f7dd:	d3 e8                	shr    eax,cl
c001f7df:	09 f0                	or     eax,esi
c001f7e1:	89 f9                	mov    ecx,edi
c001f7e3:	d3 e5                	shl    ebp,cl
c001f7e5:	89 da                	mov    edx,ebx
c001f7e7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f7eb:	89 d3                	mov    ebx,edx
c001f7ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f7f1:	89 c6                	mov    esi,eax
c001f7f3:	89 d1                	mov    ecx,edx
c001f7f5:	39 d3                	cmp    ebx,edx
c001f7f7:	72 27                	jb     c001f820 <__moddi3+0x170>
c001f7f9:	74 21                	je     c001f81c <__moddi3+0x16c>
c001f7fb:	29 f5                	sub    ebp,esi
c001f7fd:	19 cb                	sbb    ebx,ecx
c001f7ff:	89 de                	mov    esi,ebx
c001f801:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f805:	d3 e6                	shl    esi,cl
c001f807:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f80b:	89 f9                	mov    ecx,edi
c001f80d:	d3 ed                	shr    ebp,cl
c001f80f:	09 ee                	or     esi,ebp
c001f811:	89 f0                	mov    eax,esi
c001f813:	d3 eb                	shr    ebx,cl
c001f815:	89 da                	mov    edx,ebx
c001f817:	e9 e8 fe ff ff       	jmp    c001f704 <__moddi3+0x54>
c001f81c:	39 c5                	cmp    ebp,eax
c001f81e:	73 db                	jae    c001f7fb <__moddi3+0x14b>
c001f820:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f824:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f828:	89 d1                	mov    ecx,edx
c001f82a:	89 c6                	mov    esi,eax
c001f82c:	eb cd                	jmp    c001f7fb <__moddi3+0x14b>
c001f82e:	66 90                	xchg   ax,ax

c001f830 <__udivdi3>:
c001f830:	55                   	push   ebp
c001f831:	57                   	push   edi
c001f832:	56                   	push   esi
c001f833:	53                   	push   ebx
c001f834:	83 ec 1c             	sub    esp,0x1c
c001f837:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f83b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f83f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f843:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f847:	85 d2                	test   edx,edx
c001f849:	75 41                	jne    c001f88c <__udivdi3+0x5c>
c001f84b:	39 f7                	cmp    edi,esi
c001f84d:	76 15                	jbe    c001f864 <__udivdi3+0x34>
c001f84f:	89 e8                	mov    eax,ebp
c001f851:	89 f2                	mov    edx,esi
c001f853:	f7 f7                	div    edi
c001f855:	31 db                	xor    ebx,ebx
c001f857:	89 da                	mov    edx,ebx
c001f859:	83 c4 1c             	add    esp,0x1c
c001f85c:	5b                   	pop    ebx
c001f85d:	5e                   	pop    esi
c001f85e:	5f                   	pop    edi
c001f85f:	5d                   	pop    ebp
c001f860:	c3                   	ret    
c001f861:	8d 76 00             	lea    esi,[esi+0x0]
c001f864:	89 f9                	mov    ecx,edi
c001f866:	85 ff                	test   edi,edi
c001f868:	75 0b                	jne    c001f875 <__udivdi3+0x45>
c001f86a:	b8 01 00 00 00       	mov    eax,0x1
c001f86f:	31 d2                	xor    edx,edx
c001f871:	f7 f7                	div    edi
c001f873:	89 c1                	mov    ecx,eax
c001f875:	31 d2                	xor    edx,edx
c001f877:	89 f0                	mov    eax,esi
c001f879:	f7 f1                	div    ecx
c001f87b:	89 c3                	mov    ebx,eax
c001f87d:	89 e8                	mov    eax,ebp
c001f87f:	f7 f1                	div    ecx
c001f881:	89 da                	mov    edx,ebx
c001f883:	83 c4 1c             	add    esp,0x1c
c001f886:	5b                   	pop    ebx
c001f887:	5e                   	pop    esi
c001f888:	5f                   	pop    edi
c001f889:	5d                   	pop    ebp
c001f88a:	c3                   	ret    
c001f88b:	90                   	nop
c001f88c:	39 f2                	cmp    edx,esi
c001f88e:	77 1c                	ja     c001f8ac <__udivdi3+0x7c>
c001f890:	0f bd da             	bsr    ebx,edx
c001f893:	83 f3 1f             	xor    ebx,0x1f
c001f896:	75 24                	jne    c001f8bc <__udivdi3+0x8c>
c001f898:	39 f2                	cmp    edx,esi
c001f89a:	72 08                	jb     c001f8a4 <__udivdi3+0x74>
c001f89c:	39 ef                	cmp    edi,ebp
c001f89e:	0f 87 84 00 00 00    	ja     c001f928 <__udivdi3+0xf8>
c001f8a4:	b8 01 00 00 00       	mov    eax,0x1
c001f8a9:	eb ac                	jmp    c001f857 <__udivdi3+0x27>
c001f8ab:	90                   	nop
c001f8ac:	31 db                	xor    ebx,ebx
c001f8ae:	31 c0                	xor    eax,eax
c001f8b0:	89 da                	mov    edx,ebx
c001f8b2:	83 c4 1c             	add    esp,0x1c
c001f8b5:	5b                   	pop    ebx
c001f8b6:	5e                   	pop    esi
c001f8b7:	5f                   	pop    edi
c001f8b8:	5d                   	pop    ebp
c001f8b9:	c3                   	ret    
c001f8ba:	66 90                	xchg   ax,ax
c001f8bc:	b8 20 00 00 00       	mov    eax,0x20
c001f8c1:	29 d8                	sub    eax,ebx
c001f8c3:	88 d9                	mov    cl,bl
c001f8c5:	d3 e2                	shl    edx,cl
c001f8c7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f8cb:	89 fa                	mov    edx,edi
c001f8cd:	88 c1                	mov    cl,al
c001f8cf:	d3 ea                	shr    edx,cl
c001f8d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8d5:	09 d1                	or     ecx,edx
c001f8d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f8db:	88 d9                	mov    cl,bl
c001f8dd:	d3 e7                	shl    edi,cl
c001f8df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f8e3:	89 f7                	mov    edi,esi
c001f8e5:	88 c1                	mov    cl,al
c001f8e7:	d3 ef                	shr    edi,cl
c001f8e9:	88 d9                	mov    cl,bl
c001f8eb:	d3 e6                	shl    esi,cl
c001f8ed:	89 ea                	mov    edx,ebp
c001f8ef:	88 c1                	mov    cl,al
c001f8f1:	d3 ea                	shr    edx,cl
c001f8f3:	09 d6                	or     esi,edx
c001f8f5:	89 f0                	mov    eax,esi
c001f8f7:	89 fa                	mov    edx,edi
c001f8f9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f8fd:	89 d7                	mov    edi,edx
c001f8ff:	89 c6                	mov    esi,eax
c001f901:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f905:	39 d7                	cmp    edi,edx
c001f907:	72 13                	jb     c001f91c <__udivdi3+0xec>
c001f909:	74 09                	je     c001f914 <__udivdi3+0xe4>
c001f90b:	89 f0                	mov    eax,esi
c001f90d:	31 db                	xor    ebx,ebx
c001f90f:	e9 43 ff ff ff       	jmp    c001f857 <__udivdi3+0x27>
c001f914:	88 d9                	mov    cl,bl
c001f916:	d3 e5                	shl    ebp,cl
c001f918:	39 c5                	cmp    ebp,eax
c001f91a:	73 ef                	jae    c001f90b <__udivdi3+0xdb>
c001f91c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f91f:	31 db                	xor    ebx,ebx
c001f921:	e9 31 ff ff ff       	jmp    c001f857 <__udivdi3+0x27>
c001f926:	66 90                	xchg   ax,ax
c001f928:	31 c0                	xor    eax,eax
c001f92a:	e9 28 ff ff ff       	jmp    c001f857 <__udivdi3+0x27>
c001f92f:	90                   	nop

c001f930 <__umoddi3>:
c001f930:	55                   	push   ebp
c001f931:	57                   	push   edi
c001f932:	56                   	push   esi
c001f933:	53                   	push   ebx
c001f934:	83 ec 1c             	sub    esp,0x1c
c001f937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f93b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f93f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f943:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f947:	89 da                	mov    edx,ebx
c001f949:	85 c0                	test   eax,eax
c001f94b:	75 37                	jne    c001f984 <__umoddi3+0x54>
c001f94d:	39 df                	cmp    edi,ebx
c001f94f:	76 13                	jbe    c001f964 <__umoddi3+0x34>
c001f951:	89 f0                	mov    eax,esi
c001f953:	f7 f7                	div    edi
c001f955:	89 d0                	mov    eax,edx
c001f957:	31 d2                	xor    edx,edx
c001f959:	83 c4 1c             	add    esp,0x1c
c001f95c:	5b                   	pop    ebx
c001f95d:	5e                   	pop    esi
c001f95e:	5f                   	pop    edi
c001f95f:	5d                   	pop    ebp
c001f960:	c3                   	ret    
c001f961:	8d 76 00             	lea    esi,[esi+0x0]
c001f964:	89 fd                	mov    ebp,edi
c001f966:	85 ff                	test   edi,edi
c001f968:	75 0b                	jne    c001f975 <__umoddi3+0x45>
c001f96a:	b8 01 00 00 00       	mov    eax,0x1
c001f96f:	31 d2                	xor    edx,edx
c001f971:	f7 f7                	div    edi
c001f973:	89 c5                	mov    ebp,eax
c001f975:	89 d8                	mov    eax,ebx
c001f977:	31 d2                	xor    edx,edx
c001f979:	f7 f5                	div    ebp
c001f97b:	89 f0                	mov    eax,esi
c001f97d:	f7 f5                	div    ebp
c001f97f:	89 d0                	mov    eax,edx
c001f981:	eb d4                	jmp    c001f957 <__umoddi3+0x27>
c001f983:	90                   	nop
c001f984:	89 f1                	mov    ecx,esi
c001f986:	39 d8                	cmp    eax,ebx
c001f988:	76 0a                	jbe    c001f994 <__umoddi3+0x64>
c001f98a:	89 f0                	mov    eax,esi
c001f98c:	83 c4 1c             	add    esp,0x1c
c001f98f:	5b                   	pop    ebx
c001f990:	5e                   	pop    esi
c001f991:	5f                   	pop    edi
c001f992:	5d                   	pop    ebp
c001f993:	c3                   	ret    
c001f994:	0f bd e8             	bsr    ebp,eax
c001f997:	83 f5 1f             	xor    ebp,0x1f
c001f99a:	75 1c                	jne    c001f9b8 <__umoddi3+0x88>
c001f99c:	39 d8                	cmp    eax,ebx
c001f99e:	72 04                	jb     c001f9a4 <__umoddi3+0x74>
c001f9a0:	39 f7                	cmp    edi,esi
c001f9a2:	77 08                	ja     c001f9ac <__umoddi3+0x7c>
c001f9a4:	89 da                	mov    edx,ebx
c001f9a6:	29 fe                	sub    esi,edi
c001f9a8:	19 c2                	sbb    edx,eax
c001f9aa:	89 f1                	mov    ecx,esi
c001f9ac:	89 c8                	mov    eax,ecx
c001f9ae:	83 c4 1c             	add    esp,0x1c
c001f9b1:	5b                   	pop    ebx
c001f9b2:	5e                   	pop    esi
c001f9b3:	5f                   	pop    edi
c001f9b4:	5d                   	pop    ebp
c001f9b5:	c3                   	ret    
c001f9b6:	66 90                	xchg   ax,ax
c001f9b8:	ba 20 00 00 00       	mov    edx,0x20
c001f9bd:	29 ea                	sub    edx,ebp
c001f9bf:	89 e9                	mov    ecx,ebp
c001f9c1:	d3 e0                	shl    eax,cl
c001f9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f9c7:	89 f8                	mov    eax,edi
c001f9c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f9cd:	88 d1                	mov    cl,dl
c001f9cf:	d3 e8                	shr    eax,cl
c001f9d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9d5:	09 c1                	or     ecx,eax
c001f9d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f9db:	89 e9                	mov    ecx,ebp
c001f9dd:	d3 e7                	shl    edi,cl
c001f9df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f9e3:	89 d8                	mov    eax,ebx
c001f9e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9e9:	88 d1                	mov    cl,dl
c001f9eb:	d3 e8                	shr    eax,cl
c001f9ed:	89 c7                	mov    edi,eax
c001f9ef:	89 e9                	mov    ecx,ebp
c001f9f1:	d3 e3                	shl    ebx,cl
c001f9f3:	89 f0                	mov    eax,esi
c001f9f5:	88 d1                	mov    cl,dl
c001f9f7:	d3 e8                	shr    eax,cl
c001f9f9:	09 d8                	or     eax,ebx
c001f9fb:	89 e9                	mov    ecx,ebp
c001f9fd:	d3 e6                	shl    esi,cl
c001f9ff:	89 f3                	mov    ebx,esi
c001fa01:	89 fa                	mov    edx,edi
c001fa03:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fa07:	89 d1                	mov    ecx,edx
c001fa09:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fa0d:	89 c6                	mov    esi,eax
c001fa0f:	89 d7                	mov    edi,edx
c001fa11:	39 d1                	cmp    ecx,edx
c001fa13:	72 27                	jb     c001fa3c <__umoddi3+0x10c>
c001fa15:	74 21                	je     c001fa38 <__umoddi3+0x108>
c001fa17:	89 ca                	mov    edx,ecx
c001fa19:	29 f3                	sub    ebx,esi
c001fa1b:	19 fa                	sbb    edx,edi
c001fa1d:	89 d0                	mov    eax,edx
c001fa1f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001fa23:	d3 e0                	shl    eax,cl
c001fa25:	89 e9                	mov    ecx,ebp
c001fa27:	d3 eb                	shr    ebx,cl
c001fa29:	09 d8                	or     eax,ebx
c001fa2b:	d3 ea                	shr    edx,cl
c001fa2d:	83 c4 1c             	add    esp,0x1c
c001fa30:	5b                   	pop    ebx
c001fa31:	5e                   	pop    esi
c001fa32:	5f                   	pop    edi
c001fa33:	5d                   	pop    ebp
c001fa34:	c3                   	ret    
c001fa35:	8d 76 00             	lea    esi,[esi+0x0]
c001fa38:	39 c3                	cmp    ebx,eax
c001fa3a:	73 db                	jae    c001fa17 <__umoddi3+0xe7>
c001fa3c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fa40:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fa44:	89 d7                	mov    edi,edx
c001fa46:	89 c6                	mov    esi,eax
c001fa48:	eb cd                	jmp    c001fa17 <__umoddi3+0xe7>

Disassembly of section .init:

c001fa4a <_init>:
c001fa4a:	55                   	push   ebp
c001fa4b:	89 e5                	mov    ebp,esp
c001fa4d:	e8 a2 06 fe ff       	call   c00000f4 <frame_dummy>
c001fa52:	e8 e5 fa ff ff       	call   c001f53c <__do_global_ctors_aux>
c001fa57:	5d                   	pop    ebp
c001fa58:	c3                   	ret    

Disassembly of section .fini:

c001fa59 <_fini>:
c001fa59:	55                   	push   ebp
c001fa5a:	89 e5                	mov    ebp,esp
c001fa5c:	e8 23 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fa61:	5d                   	pop    ebp
c001fa62:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001fa64 <Computer::~Computer()>:
c001fa64:	83 ec 0c             	sub    esp,0xc
c001fa67:	ba dc 0d 02 c0       	mov    edx,0xc0020ddc
c001fa6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa70:	89 10                	mov    DWORD PTR [eax],edx
c001fa72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa76:	83 ec 0c             	sub    esp,0xc
c001fa79:	50                   	push   eax
c001fa7a:	e8 83 ce fe ff       	call   c000c902 <Device::~Device()>
c001fa7f:	83 c4 10             	add    esp,0x10
c001fa82:	90                   	nop
c001fa83:	83 c4 0c             	add    esp,0xc
c001fa86:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001fa88 <Computer::~Computer()>:
c001fa88:	83 ec 0c             	sub    esp,0xc
c001fa8b:	83 ec 0c             	sub    esp,0xc
c001fa8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa92:	e8 cd ff ff ff       	call   c001fa64 <Computer::~Computer()>
c001fa97:	83 c4 10             	add    esp,0x10
c001fa9a:	83 ec 08             	sub    esp,0x8
c001fa9d:	68 70 01 00 00       	push   0x170
c001faa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faa6:	e8 c1 ad fe ff       	call   c000a86c <operator delete(void*, unsigned long)>
c001faab:	83 c4 10             	add    esp,0x10
c001faae:	83 c4 0c             	add    esp,0xc
c001fab1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001fab2 <idleCommon()>:
c001fab2:	83 ec 0c             	sub    esp,0xc
c001fab5:	fa                   	cli    
c001fab6:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001fabc:	e8 ab 66 ff ff       	call   c001616c <schedule()>
c001fac1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fac6:	48                   	dec    eax
c001fac7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001facc:	75 01                	jne    c001facf <idleCommon()+0x1d>
c001face:	fb                   	sti    
c001facf:	83 c4 0c             	add    esp,0xc
c001fad2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fad4 <LinkedList<UnixFile>::~LinkedList()>:
c001fad4:	90                   	nop
c001fad5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fad6 <LinkedList<UnixFile>::LinkedList()>:
c001fad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fada:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fae4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001faeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001faf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fafa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb16:	90                   	nop
c001fb17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fb18 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fb18:	83 ec 0c             	sub    esp,0xc
c001fb1b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb20:	75 10                	jne    c001fb32 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fb22:	83 ec 0c             	sub    esp,0xc
c001fb25:	68 f0 0f 02 c0       	push   0xc0020ff0
c001fb2a:	e8 10 1b ff ff       	call   c001163f <KePanic(char const*)>
c001fb2f:	83 c4 10             	add    esp,0x10
c001fb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb36:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb38:	85 c0                	test   eax,eax
c001fb3a:	74 34                	je     c001fb70 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb43:	85 c0                	test   eax,eax
c001fb45:	74 29                	je     c001fb70 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb6e:	eb 65                	jmp    c001fbd5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb74:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb76:	85 c0                	test   eax,eax
c001fb78:	75 4b                	jne    c001fbc5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb81:	85 c0                	test   eax,eax
c001fb83:	75 40                	jne    c001fbc5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb8d:	89 10                	mov    DWORD PTR [eax],edx
c001fb8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fba1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbaf:	85 c0                	test   eax,eax
c001fbb1:	74 22                	je     c001fbd5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fbb3:	83 ec 0c             	sub    esp,0xc
c001fbb6:	68 12 10 02 c0       	push   0xc0021012
c001fbbb:	e8 7f 1a ff ff       	call   c001163f <KePanic(char const*)>
c001fbc0:	83 c4 10             	add    esp,0x10
c001fbc3:	eb 10                	jmp    c001fbd5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fbc5:	83 ec 0c             	sub    esp,0xc
c001fbc8:	68 1c 10 02 c0       	push   0xc002101c
c001fbcd:	e8 6d 1a ff ff       	call   c001163f <KePanic(char const*)>
c001fbd2:	83 c4 10             	add    esp,0x10
c001fbd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbdc:	8d 50 01             	lea    edx,[eax+0x1]
c001fbdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fbe6:	90                   	nop
c001fbe7:	83 c4 0c             	add    esp,0xc
c001fbea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fbec <LinkedList<UnixFile>::getFirstElement()>:
c001fbec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fbf4 <LinkedList<UnixFile>::removeFirst()>:
c001fbf4:	83 ec 0c             	sub    esp,0xc
c001fbf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbfd:	85 c0                	test   eax,eax
c001fbff:	75 12                	jne    c001fc13 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fc01:	83 ec 0c             	sub    esp,0xc
c001fc04:	68 28 10 02 c0       	push   0xc0021028
c001fc09:	e8 31 1a ff ff       	call   c001163f <KePanic(char const*)>
c001fc0e:	83 c4 10             	add    esp,0x10
c001fc11:	eb 7e                	jmp    c001fc91 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fc13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc1d:	85 c0                	test   eax,eax
c001fc1f:	74 10                	je     c001fc31 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fc21:	83 ec 0c             	sub    esp,0xc
c001fc24:	68 73 10 02 c0       	push   0xc0021073
c001fc29:	e8 11 1a ff ff       	call   c001163f <KePanic(char const*)>
c001fc2e:	83 c4 10             	add    esp,0x10
c001fc31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc35:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc3a:	85 c0                	test   eax,eax
c001fc3c:	75 33                	jne    c001fc71 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fc3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc5a:	83 f8 01             	cmp    eax,0x1
c001fc5d:	74 21                	je     c001fc80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc5f:	83 ec 0c             	sub    esp,0xc
c001fc62:	68 4c 10 02 c0       	push   0xc002104c
c001fc67:	e8 d3 19 ff ff       	call   c001163f <KePanic(char const*)>
c001fc6c:	83 c4 10             	add    esp,0x10
c001fc6f:	eb 0f                	jmp    c001fc80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc75:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc77:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7e:	89 10                	mov    DWORD PTR [eax],edx
c001fc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc87:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc91:	83 c4 0c             	add    esp,0xc
c001fc94:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fc96 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fc96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc9d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fc9e <DriverlessDevice::~DriverlessDevice()>:
c001fc9e:	ba 7c 1c 02 c0       	mov    edx,0xc0021c7c
c001fca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fca7:	89 10                	mov    DWORD PTR [eax],edx
c001fca9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcad:	50                   	push   eax
c001fcae:	e8 4f cc fe ff       	call   c000c902 <Device::~Device()>
c001fcb3:	83 c4 04             	add    esp,0x4
c001fcb6:	90                   	nop
c001fcb7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fcb8 <DriverlessDevice::~DriverlessDevice()>:
c001fcb8:	83 ec 0c             	sub    esp,0xc
c001fcbb:	83 ec 0c             	sub    esp,0xc
c001fcbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc2:	e8 d7 ff ff ff       	call   c001fc9e <DriverlessDevice::~DriverlessDevice()>
c001fcc7:	83 c4 10             	add    esp,0x10
c001fcca:	83 ec 08             	sub    esp,0x8
c001fccd:	68 58 01 00 00       	push   0x158
c001fcd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcd6:	e8 91 ab fe ff       	call   c000a86c <operator delete(void*, unsigned long)>
c001fcdb:	83 c4 10             	add    esp,0x10
c001fcde:	83 c4 0c             	add    esp,0xc
c001fce1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fce2 <LinkedList<Device>::addElement(Device*)>:
c001fce2:	83 ec 0c             	sub    esp,0xc
c001fce5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcea:	75 10                	jne    c001fcfc <LinkedList<Device>::addElement(Device*)+0x1a>
c001fcec:	83 ec 0c             	sub    esp,0xc
c001fcef:	68 f0 0f 02 c0       	push   0xc0020ff0
c001fcf4:	e8 46 19 ff ff       	call   c001163f <KePanic(char const*)>
c001fcf9:	83 c4 10             	add    esp,0x10
c001fcfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd00:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd02:	85 c0                	test   eax,eax
c001fd04:	74 3a                	je     c001fd40 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd0d:	85 c0                	test   eax,eax
c001fd0f:	74 2f                	je     c001fd40 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd1c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd34:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd3e:	eb 68                	jmp    c001fda8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd44:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd46:	85 c0                	test   eax,eax
c001fd48:	75 4e                	jne    c001fd98 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd51:	85 c0                	test   eax,eax
c001fd53:	75 43                	jne    c001fd98 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd5d:	89 10                	mov    DWORD PTR [eax],edx
c001fd5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd71:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd82:	85 c0                	test   eax,eax
c001fd84:	74 22                	je     c001fda8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd86:	83 ec 0c             	sub    esp,0xc
c001fd89:	68 12 10 02 c0       	push   0xc0021012
c001fd8e:	e8 ac 18 ff ff       	call   c001163f <KePanic(char const*)>
c001fd93:	83 c4 10             	add    esp,0x10
c001fd96:	eb 10                	jmp    c001fda8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	68 1c 10 02 c0       	push   0xc002101c
c001fda0:	e8 9a 18 ff ff       	call   c001163f <KePanic(char const*)>
c001fda5:	83 c4 10             	add    esp,0x10
c001fda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdaf:	8d 50 01             	lea    edx,[eax+0x1]
c001fdb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fdb9:	90                   	nop
c001fdba:	83 c4 0c             	add    esp,0xc
c001fdbd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fdbe <LinkedList<Device>::LinkedList()>:
c001fdbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdc2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdd7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fde2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fde8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdf7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdfe:	90                   	nop
c001fdff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fe00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fe00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe04:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe06:	85 c0                	test   eax,eax
c001fe08:	75 0e                	jne    c001fe18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe11:	85 c0                	test   eax,eax
c001fe13:	75 03                	jne    c001fe18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe15:	b0 01                	mov    al,0x1
c001fe17:	c3                   	ret    
c001fe18:	b0 00                	mov    al,0x0
c001fe1a:	90                   	nop
c001fe1b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fe1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fe1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe20:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fe24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fe24:	83 ec 0c             	sub    esp,0xc
c001fe27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe2d:	85 c0                	test   eax,eax
c001fe2f:	75 17                	jne    c001fe48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fe31:	83 ec 0c             	sub    esp,0xc
c001fe34:	68 28 10 02 c0       	push   0xc0021028
c001fe39:	e8 01 18 ff ff       	call   c001163f <KePanic(char const*)>
c001fe3e:	83 c4 10             	add    esp,0x10
c001fe41:	e9 96 00 00 00       	jmp    c001fedc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fe46:	66 90                	xchg   ax,ax
c001fe48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe52:	85 c0                	test   eax,eax
c001fe54:	0f 95 c0             	setne  al
c001fe57:	0f b6 c0             	movzx  eax,al
c001fe5a:	85 c0                	test   eax,eax
c001fe5c:	74 12                	je     c001fe70 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fe5e:	83 ec 0c             	sub    esp,0xc
c001fe61:	68 73 10 02 c0       	push   0xc0021073
c001fe66:	e8 d4 17 ff ff       	call   c001163f <KePanic(char const*)>
c001fe6b:	83 c4 10             	add    esp,0x10
c001fe6e:	66 90                	xchg   ax,ax
c001fe70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe74:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe76:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe79:	85 c0                	test   eax,eax
c001fe7b:	0f 94 c0             	sete   al
c001fe7e:	0f b6 c0             	movzx  eax,al
c001fe81:	85 c0                	test   eax,eax
c001fe83:	74 33                	je     c001feb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fe85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fea1:	83 f8 01             	cmp    eax,0x1
c001fea4:	74 22                	je     c001fec8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fea6:	83 ec 0c             	sub    esp,0xc
c001fea9:	68 4c 10 02 c0       	push   0xc002104c
c001feae:	e8 8c 17 ff ff       	call   c001163f <KePanic(char const*)>
c001feb3:	83 c4 10             	add    esp,0x10
c001feb6:	eb 10                	jmp    c001fec8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001feb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febc:	8b 00                	mov    eax,DWORD PTR [eax]
c001febe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec5:	89 10                	mov    DWORD PTR [eax],edx
c001fec7:	90                   	nop
c001fec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fecc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fecf:	8d 50 ff             	lea    edx,[eax-0x1]
c001fed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fed9:	8d 76 00             	lea    esi,[esi+0x0]
c001fedc:	83 c4 0c             	add    esp,0xc
c001fedf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fee0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fee0:	83 ec 0c             	sub    esp,0xc
c001fee3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fee8:	75 12                	jne    c001fefc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001feea:	83 ec 0c             	sub    esp,0xc
c001feed:	68 f0 0f 02 c0       	push   0xc0020ff0
c001fef2:	e8 48 17 ff ff       	call   c001163f <KePanic(char const*)>
c001fef7:	83 c4 10             	add    esp,0x10
c001fefa:	66 90                	xchg   ax,ax
c001fefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff02:	85 c0                	test   eax,eax
c001ff04:	74 36                	je     c001ff3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff0d:	85 c0                	test   eax,eax
c001ff0f:	74 2b                	je     c001ff3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff1c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ff1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff31:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff38:	eb 6a                	jmp    c001ffa4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff3a:	66 90                	xchg   ax,ax
c001ff3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff42:	85 c0                	test   eax,eax
c001ff44:	75 4e                	jne    c001ff94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff4d:	85 c0                	test   eax,eax
c001ff4f:	75 43                	jne    c001ff94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff59:	89 10                	mov    DWORD PTR [eax],edx
c001ff5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff63:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff6d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff7b:	85 c0                	test   eax,eax
c001ff7d:	74 25                	je     c001ffa4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff7f:	83 ec 0c             	sub    esp,0xc
c001ff82:	68 12 10 02 c0       	push   0xc0021012
c001ff87:	e8 b3 16 ff ff       	call   c001163f <KePanic(char const*)>
c001ff8c:	83 c4 10             	add    esp,0x10
c001ff8f:	eb 13                	jmp    c001ffa4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff91:	8d 76 00             	lea    esi,[esi+0x0]
c001ff94:	83 ec 0c             	sub    esp,0xc
c001ff97:	68 1c 10 02 c0       	push   0xc002101c
c001ff9c:	e8 9e 16 ff ff       	call   c001163f <KePanic(char const*)>
c001ffa1:	83 c4 10             	add    esp,0x10
c001ffa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffab:	8d 50 01             	lea    edx,[eax+0x1]
c001ffae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffb5:	90                   	nop
c001ffb6:	83 c4 0c             	add    esp,0xc
c001ffb9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ffbc <ACPI::~ACPI()>:
c001ffbc:	83 ec 0c             	sub    esp,0xc
c001ffbf:	ba f8 22 02 c0       	mov    edx,0xc00222f8
c001ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc8:	89 10                	mov    DWORD PTR [eax],edx
c001ffca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffce:	83 ec 0c             	sub    esp,0xc
c001ffd1:	50                   	push   eax
c001ffd2:	e8 2b c9 fe ff       	call   c000c902 <Device::~Device()>
c001ffd7:	83 c4 10             	add    esp,0x10
c001ffda:	90                   	nop
c001ffdb:	83 c4 0c             	add    esp,0xc
c001ffde:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ffe0 <ACPI::~ACPI()>:
c001ffe0:	83 ec 0c             	sub    esp,0xc
c001ffe3:	83 ec 0c             	sub    esp,0xc
c001ffe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffea:	e8 cd ff ff ff       	call   c001ffbc <ACPI::~ACPI()>
c001ffef:	83 c4 10             	add    esp,0x10
c001fff2:	83 ec 08             	sub    esp,0x8
c001fff5:	68 64 12 00 00       	push   0x1264
c001fffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fffe:	e8 69 a8 fe ff       	call   c000a86c <operator delete(void*, unsigned long)>
c0020003:	83 c4 10             	add    esp,0x10
c0020006:	83 c4 0c             	add    esp,0xc
c0020009:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002000c <LinkedList<Device>::~LinkedList()>:
c002000c:	90                   	nop
c002000d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0020010 <LinkedList<Device>::isEmpty()>:
c0020010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020014:	8b 00                	mov    eax,DWORD PTR [eax]
c0020016:	85 c0                	test   eax,eax
c0020018:	75 0e                	jne    c0020028 <LinkedList<Device>::isEmpty()+0x18>
c002001a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002001e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020021:	85 c0                	test   eax,eax
c0020023:	75 03                	jne    c0020028 <LinkedList<Device>::isEmpty()+0x18>
c0020025:	b0 01                	mov    al,0x1
c0020027:	c3                   	ret    
c0020028:	b0 00                	mov    al,0x0
c002002a:	90                   	nop
c002002b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002002c <LinkedList<Device>::getFirstElement()>:
c002002c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020030:	8b 00                	mov    eax,DWORD PTR [eax]
c0020032:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020034 <LinkedList<Device>::removeFirst()>:
c0020034:	83 ec 0c             	sub    esp,0xc
c0020037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002003b:	8b 00                	mov    eax,DWORD PTR [eax]
c002003d:	85 c0                	test   eax,eax
c002003f:	75 17                	jne    c0020058 <LinkedList<Device>::removeFirst()+0x24>
c0020041:	83 ec 0c             	sub    esp,0xc
c0020044:	68 28 10 02 c0       	push   0xc0021028
c0020049:	e8 f1 15 ff ff       	call   c001163f <KePanic(char const*)>
c002004e:	83 c4 10             	add    esp,0x10
c0020051:	e9 92 00 00 00       	jmp    c00200e8 <LinkedList<Device>::removeFirst()+0xb4>
c0020056:	66 90                	xchg   ax,ax
c0020058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002005c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002005f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020065:	85 c0                	test   eax,eax
c0020067:	74 13                	je     c002007c <LinkedList<Device>::removeFirst()+0x48>
c0020069:	83 ec 0c             	sub    esp,0xc
c002006c:	68 73 10 02 c0       	push   0xc0021073
c0020071:	e8 c9 15 ff ff       	call   c001163f <KePanic(char const*)>
c0020076:	83 c4 10             	add    esp,0x10
c0020079:	8d 76 00             	lea    esi,[esi+0x0]
c002007c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020080:	8b 00                	mov    eax,DWORD PTR [eax]
c0020082:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020088:	85 c0                	test   eax,eax
c002008a:	75 34                	jne    c00200c0 <LinkedList<Device>::removeFirst()+0x8c>
c002008c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020090:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002009a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200a8:	83 f8 01             	cmp    eax,0x1
c00200ab:	74 27                	je     c00200d4 <LinkedList<Device>::removeFirst()+0xa0>
c00200ad:	83 ec 0c             	sub    esp,0xc
c00200b0:	68 4c 10 02 c0       	push   0xc002104c
c00200b5:	e8 85 15 ff ff       	call   c001163f <KePanic(char const*)>
c00200ba:	83 c4 10             	add    esp,0x10
c00200bd:	eb 15                	jmp    c00200d4 <LinkedList<Device>::removeFirst()+0xa0>
c00200bf:	90                   	nop
c00200c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00200c6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00200cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d0:	89 10                	mov    DWORD PTR [eax],edx
c00200d2:	66 90                	xchg   ax,ax
c00200d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200db:	8d 50 ff             	lea    edx,[eax-0x1]
c00200de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00200e5:	8d 76 00             	lea    esi,[esi+0x0]
c00200e8:	83 c4 0c             	add    esp,0xc
c00200eb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00200ec <CPU::~CPU()>:
c00200ec:	83 ec 0c             	sub    esp,0xc
c00200ef:	ba a0 24 02 c0       	mov    edx,0xc00224a0
c00200f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f8:	89 10                	mov    DWORD PTR [eax],edx
c00200fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200fe:	83 ec 0c             	sub    esp,0xc
c0020101:	50                   	push   eax
c0020102:	e8 fb c7 fe ff       	call   c000c902 <Device::~Device()>
c0020107:	83 c4 10             	add    esp,0x10
c002010a:	90                   	nop
c002010b:	83 c4 0c             	add    esp,0xc
c002010e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020110 <CPU::~CPU()>:
c0020110:	83 ec 0c             	sub    esp,0xc
c0020113:	83 ec 0c             	sub    esp,0xc
c0020116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002011a:	e8 cd ff ff ff       	call   c00200ec <CPU::~CPU()>
c002011f:	83 c4 10             	add    esp,0x10
c0020122:	83 ec 08             	sub    esp,0x8
c0020125:	68 94 11 00 00       	push   0x1194
c002012a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002012e:	e8 39 a7 fe ff       	call   c000a86c <operator delete(void*, unsigned long)>
c0020133:	83 c4 10             	add    esp,0x10
c0020136:	83 c4 0c             	add    esp,0xc
c0020139:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002013c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002013c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020140:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020143:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020144 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020144:	90                   	nop
c0020145:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020148 <ThreadControlBlock::ThreadControlBlock()>:
c0020148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002014c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020157:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002015e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020162:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020169:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002016d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020178:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002017f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020183:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020187:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002018b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002018f:	90                   	nop
c0020190:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020194 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020198:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002019e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00201a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00201be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00201c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201cd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201d4:	90                   	nop
c00201d5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00201d6 <PCI::~PCI()>:
c00201d6:	83 ec 0c             	sub    esp,0xc
c00201d9:	ba 80 33 02 c0       	mov    edx,0xc0023380
c00201de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201e2:	89 10                	mov    DWORD PTR [eax],edx
c00201e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201e8:	83 ec 0c             	sub    esp,0xc
c00201eb:	50                   	push   eax
c00201ec:	e8 a3 c1 fe ff       	call   c000c394 <Bus::~Bus()>
c00201f1:	83 c4 10             	add    esp,0x10
c00201f4:	90                   	nop
c00201f5:	83 c4 0c             	add    esp,0xc
c00201f8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00201fa <PCI::~PCI()>:
c00201fa:	83 ec 0c             	sub    esp,0xc
c00201fd:	83 ec 0c             	sub    esp,0xc
c0020200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020204:	e8 cd ff ff ff       	call   c00201d6 <PCI::~PCI()>
c0020209:	83 c4 10             	add    esp,0x10
c002020c:	83 ec 08             	sub    esp,0x8
c002020f:	68 5c 01 00 00       	push   0x15c
c0020214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020218:	e8 4f a6 fe ff       	call   c000a86c <operator delete(void*, unsigned long)>
c002021d:	83 c4 10             	add    esp,0x10
c0020220:	83 c4 0c             	add    esp,0xc
c0020223:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020224 <IDE::~IDE()>:
c0020224:	83 ec 0c             	sub    esp,0xc
c0020227:	ba 34 34 02 c0       	mov    edx,0xc0023434
c002022c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020230:	89 10                	mov    DWORD PTR [eax],edx
c0020232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020236:	83 ec 0c             	sub    esp,0xc
c0020239:	50                   	push   eax
c002023a:	e8 3d cb fe ff       	call   c000cd7c <HardDiskController::~HardDiskController()>
c002023f:	83 c4 10             	add    esp,0x10
c0020242:	90                   	nop
c0020243:	83 c4 0c             	add    esp,0xc
c0020246:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020248 <IDE::~IDE()>:
c0020248:	83 ec 0c             	sub    esp,0xc
c002024b:	83 ec 0c             	sub    esp,0xc
c002024e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020252:	e8 cd ff ff ff       	call   c0020224 <IDE::~IDE()>
c0020257:	83 c4 10             	add    esp,0x10
c002025a:	83 ec 08             	sub    esp,0x8
c002025d:	68 70 02 00 00       	push   0x270
c0020262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020266:	e8 01 a6 fe ff       	call   c000a86c <operator delete(void*, unsigned long)>
c002026b:	83 c4 10             	add    esp,0x10
c002026e:	83 c4 0c             	add    esp,0xc
c0020271:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020272 <SATABus::~SATABus()>:
c0020272:	83 ec 0c             	sub    esp,0xc
c0020275:	ba 84 34 02 c0       	mov    edx,0xc0023484
c002027a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002027e:	89 10                	mov    DWORD PTR [eax],edx
c0020280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020284:	83 ec 0c             	sub    esp,0xc
c0020287:	50                   	push   eax
c0020288:	e8 ef ca fe ff       	call   c000cd7c <HardDiskController::~HardDiskController()>
c002028d:	83 c4 10             	add    esp,0x10
c0020290:	90                   	nop
c0020291:	83 c4 0c             	add    esp,0xc
c0020294:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020296 <SATABus::~SATABus()>:
c0020296:	83 ec 0c             	sub    esp,0xc
c0020299:	83 ec 0c             	sub    esp,0xc
c002029c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202a0:	e8 cd ff ff ff       	call   c0020272 <SATABus::~SATABus()>
c00202a5:	83 c4 10             	add    esp,0x10
c00202a8:	83 ec 08             	sub    esp,0x8
c00202ab:	68 64 01 00 00       	push   0x164
c00202b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202b4:	e8 b3 a5 fe ff       	call   c000a86c <operator delete(void*, unsigned long)>
c00202b9:	83 c4 10             	add    esp,0x10
c00202bc:	83 c4 0c             	add    esp,0xc
c00202bf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00202c0 <ATA::~ATA()>:
c00202c0:	83 ec 0c             	sub    esp,0xc
c00202c3:	ba c4 34 02 c0       	mov    edx,0xc00234c4
c00202c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202cc:	89 10                	mov    DWORD PTR [eax],edx
c00202ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d2:	83 ec 0c             	sub    esp,0xc
c00202d5:	50                   	push   eax
c00202d6:	e8 83 cb fe ff       	call   c000ce5e <PhysicalDisk::~PhysicalDisk()>
c00202db:	83 c4 10             	add    esp,0x10
c00202de:	90                   	nop
c00202df:	83 c4 0c             	add    esp,0xc
c00202e2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00202e4 <ATA::~ATA()>:
c00202e4:	83 ec 0c             	sub    esp,0xc
c00202e7:	83 ec 0c             	sub    esp,0xc
c00202ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ee:	e8 cd ff ff ff       	call   c00202c0 <ATA::~ATA()>
c00202f3:	83 c4 10             	add    esp,0x10
c00202f6:	83 ec 08             	sub    esp,0x8
c00202f9:	68 7c 01 00 00       	push   0x17c
c00202fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020302:	e8 65 a5 fe ff       	call   c000a86c <operator delete(void*, unsigned long)>
c0020307:	83 c4 10             	add    esp,0x10
c002030a:	83 c4 0c             	add    esp,0xc
c002030d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002030e <ATAPI::~ATAPI()>:
c002030e:	83 ec 0c             	sub    esp,0xc
c0020311:	ba 0c 35 02 c0       	mov    edx,0xc002350c
c0020316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002031a:	89 10                	mov    DWORD PTR [eax],edx
c002031c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020320:	83 ec 0c             	sub    esp,0xc
c0020323:	50                   	push   eax
c0020324:	e8 35 cb fe ff       	call   c000ce5e <PhysicalDisk::~PhysicalDisk()>
c0020329:	83 c4 10             	add    esp,0x10
c002032c:	90                   	nop
c002032d:	83 c4 0c             	add    esp,0xc
c0020330:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020332 <ATAPI::~ATAPI()>:
c0020332:	83 ec 0c             	sub    esp,0xc
c0020335:	83 ec 0c             	sub    esp,0xc
c0020338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002033c:	e8 cd ff ff ff       	call   c002030e <ATAPI::~ATAPI()>
c0020341:	83 c4 10             	add    esp,0x10
c0020344:	83 ec 08             	sub    esp,0x8
c0020347:	68 84 01 00 00       	push   0x184
c002034c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020350:	e8 17 a5 fe ff       	call   c000a86c <operator delete(void*, unsigned long)>
c0020355:	83 c4 10             	add    esp,0x10
c0020358:	83 c4 0c             	add    esp,0xc
c002035b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002035c <SATA::~SATA()>:
c002035c:	83 ec 0c             	sub    esp,0xc
c002035f:	ba c0 35 02 c0       	mov    edx,0xc00235c0
c0020364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020368:	89 10                	mov    DWORD PTR [eax],edx
c002036a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002036e:	83 ec 0c             	sub    esp,0xc
c0020371:	50                   	push   eax
c0020372:	e8 e7 ca fe ff       	call   c000ce5e <PhysicalDisk::~PhysicalDisk()>
c0020377:	83 c4 10             	add    esp,0x10
c002037a:	90                   	nop
c002037b:	83 c4 0c             	add    esp,0xc
c002037e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020380 <SATA::~SATA()>:
c0020380:	83 ec 0c             	sub    esp,0xc
c0020383:	83 ec 0c             	sub    esp,0xc
c0020386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002038a:	e8 cd ff ff ff       	call   c002035c <SATA::~SATA()>
c002038f:	83 c4 10             	add    esp,0x10
c0020392:	83 ec 08             	sub    esp,0x8
c0020395:	68 7c 01 00 00       	push   0x17c
c002039a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002039e:	e8 c9 a4 fe ff       	call   c000a86c <operator delete(void*, unsigned long)>
c00203a3:	83 c4 10             	add    esp,0x10
c00203a6:	83 c4 0c             	add    esp,0xc
c00203a9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00203aa <SATAPI::~SATAPI()>:
c00203aa:	83 ec 0c             	sub    esp,0xc
c00203ad:	ba e4 36 02 c0       	mov    edx,0xc00236e4
c00203b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203b6:	89 10                	mov    DWORD PTR [eax],edx
c00203b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203bc:	83 ec 0c             	sub    esp,0xc
c00203bf:	50                   	push   eax
c00203c0:	e8 99 ca fe ff       	call   c000ce5e <PhysicalDisk::~PhysicalDisk()>
c00203c5:	83 c4 10             	add    esp,0x10
c00203c8:	90                   	nop
c00203c9:	83 c4 0c             	add    esp,0xc
c00203cc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00203ce <SATAPI::~SATAPI()>:
c00203ce:	83 ec 0c             	sub    esp,0xc
c00203d1:	83 ec 0c             	sub    esp,0xc
c00203d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203d8:	e8 cd ff ff ff       	call   c00203aa <SATAPI::~SATAPI()>
c00203dd:	83 c4 10             	add    esp,0x10
c00203e0:	83 ec 08             	sub    esp,0x8
c00203e3:	68 84 01 00 00       	push   0x184
c00203e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203ec:	e8 7b a4 fe ff       	call   c000a86c <operator delete(void*, unsigned long)>
c00203f1:	83 c4 10             	add    esp,0x10
c00203f4:	83 c4 0c             	add    esp,0xc
c00203f7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00203f8 <IOAPIC::~IOAPIC()>:
c00203f8:	83 ec 0c             	sub    esp,0xc
c00203fb:	ba 24 37 02 c0       	mov    edx,0xc0023724
c0020400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020404:	89 10                	mov    DWORD PTR [eax],edx
c0020406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002040a:	83 ec 0c             	sub    esp,0xc
c002040d:	50                   	push   eax
c002040e:	e8 ef c4 fe ff       	call   c000c902 <Device::~Device()>
c0020413:	83 c4 10             	add    esp,0x10
c0020416:	90                   	nop
c0020417:	83 c4 0c             	add    esp,0xc
c002041a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002041c <IOAPIC::~IOAPIC()>:
c002041c:	83 ec 0c             	sub    esp,0xc
c002041f:	83 ec 0c             	sub    esp,0xc
c0020422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020426:	e8 cd ff ff ff       	call   c00203f8 <IOAPIC::~IOAPIC()>
c002042b:	83 c4 10             	add    esp,0x10
c002042e:	83 ec 08             	sub    esp,0x8
c0020431:	68 68 01 00 00       	push   0x168
c0020436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002043a:	e8 2d a4 fe ff       	call   c000a86c <operator delete(void*, unsigned long)>
c002043f:	83 c4 10             	add    esp,0x10
c0020442:	83 c4 0c             	add    esp,0xc
c0020445:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020448 <APICTimer::~APICTimer()>:
c0020448:	83 ec 0c             	sub    esp,0xc
c002044b:	ba 6c 37 02 c0       	mov    edx,0xc002376c
c0020450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020454:	89 10                	mov    DWORD PTR [eax],edx
c0020456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002045a:	83 ec 0c             	sub    esp,0xc
c002045d:	50                   	push   eax
c002045e:	e8 75 df fe ff       	call   c000e3d8 <Timer::~Timer()>
c0020463:	83 c4 10             	add    esp,0x10
c0020466:	90                   	nop
c0020467:	83 c4 0c             	add    esp,0xc
c002046a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002046c <APICTimer::~APICTimer()>:
c002046c:	83 ec 0c             	sub    esp,0xc
c002046f:	83 ec 0c             	sub    esp,0xc
c0020472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020476:	e8 cd ff ff ff       	call   c0020448 <APICTimer::~APICTimer()>
c002047b:	83 c4 10             	add    esp,0x10
c002047e:	83 ec 08             	sub    esp,0x8
c0020481:	68 60 01 00 00       	push   0x160
c0020486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002048a:	e8 dd a3 fe ff       	call   c000a86c <operator delete(void*, unsigned long)>
c002048f:	83 c4 10             	add    esp,0x10
c0020492:	83 c4 0c             	add    esp,0xc
c0020495:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020498 <PIT::~PIT()>:
c0020498:	83 ec 0c             	sub    esp,0xc
c002049b:	ba bc 37 02 c0       	mov    edx,0xc00237bc
c00204a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204a4:	89 10                	mov    DWORD PTR [eax],edx
c00204a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204aa:	83 ec 0c             	sub    esp,0xc
c00204ad:	50                   	push   eax
c00204ae:	e8 25 df fe ff       	call   c000e3d8 <Timer::~Timer()>
c00204b3:	83 c4 10             	add    esp,0x10
c00204b6:	90                   	nop
c00204b7:	83 c4 0c             	add    esp,0xc
c00204ba:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00204bc <PIT::~PIT()>:
c00204bc:	83 ec 0c             	sub    esp,0xc
c00204bf:	83 ec 0c             	sub    esp,0xc
c00204c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204c6:	e8 cd ff ff ff       	call   c0020498 <PIT::~PIT()>
c00204cb:	83 c4 10             	add    esp,0x10
c00204ce:	83 ec 08             	sub    esp,0x8
c00204d1:	68 5c 01 00 00       	push   0x15c
c00204d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204da:	e8 8d a3 fe ff       	call   c000a86c <operator delete(void*, unsigned long)>
c00204df:	83 c4 10             	add    esp,0x10
c00204e2:	83 c4 0c             	add    esp,0xc
c00204e5:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be d1 25 02 c0       	mov    esi,0xc00225d1
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be ed 25 02 c0       	mov    esi,0xc00225ed
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
