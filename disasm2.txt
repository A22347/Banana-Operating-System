
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 84 36 02 c0       	mov    eax,0xc0023684
c0000025:	3d 84 36 02 c0       	cmp    eax,0xc0023684
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 84 36 02 c0       	push   0xc0023684
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 84 36 02 c0       	mov    eax,0xc0023684
c0000051:	2d 84 36 02 c0       	sub    eax,0xc0023684
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 84 36 02 c0       	push   0xc0023684
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb ec fd 01 c0       	mov    ebx,0xc001fdec
c0000097:	81 eb e8 fd 01 c0    	sub    ebx,0xc001fde8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be e8 fd 01 c0       	mov    esi,0xc001fde8
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 84 36 02 c0       	push   0xc0023684
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 84 36 02 c0       	push   0xc0023684
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 eb 4f 01 00       	call   c0015298 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 c9 4f 01 00       	call   c0015298 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 d6 54 01 00       	call   c00157c4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 71 5b 01 00       	call   c0015e68 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 c9 0d 01 00       	jmp    c0011148 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 00 fe 01 c0 02 	test   BYTE PTR [edx-0x3ffe0200],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 00 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0200],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 00 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe0200],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 00 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe0200],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 00 fe 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0200],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 00 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0200],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000e2a:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c00011af:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001206:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c000124f:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c000126a:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c0001324:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c000132a:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c0001331:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013f7:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013fd:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c0001404:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001552:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 04 ff 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe00fc]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 5a 76 01 00       	jmp    c0019434 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 84 76 01 00       	jmp    c0019474 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 a5 76 01 00       	jmp    c00194b4 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 60 00 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdffa0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 60 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdffa0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 9c 26 02 c0       	mov    edx,0xc002269c
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 1c ff 01 c0       	mov    edx,0xc001ff1c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 22 ff 01 c0       	mov    eax,0xc001ff22
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf e0 ff 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0020]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 2b ff 01 c0       	mov    eax,0xc001ff2b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 60 00 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdffa0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 b0 ff 01 c0       	mov    eax,0xc001ffb0
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb a0 ff 01 c0       	mov    ebx,0xc001ffa0
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 80 ff 01 c0       	mov    eax,0xc001ff80
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 90 ff 01 c0       	mov    eax,0xc001ff90
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 32 ff 01 c0       	mov    edx,0xc001ff32
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 3e ff 01 c0       	mov    edx,0xc001ff3e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 52 ff 01 c0       	mov    edx,0xc001ff52
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 80 03 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020380
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 80 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020380
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 80 01 02 c0       	mov    eax,0xc0020180
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 c0 00 02 c0       	mov    eax,0xc00200c0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 80 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff80]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 80 04 02 c0       	push   0xc0020480
c0006147:	e8 8c 3c 01 00       	call   c0019dd8 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 8e 04 02 c0       	push   0xc002048e
c000617f:	e8 54 3c 01 00       	call   c0019dd8 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 bd 3b 01 00       	call   c0019d7c <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 50 02 c0       	mov    eax,0xc0025020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 9d 04 02 c0       	push   0xc002049d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000657b:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c0006585:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c000659d:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c0006616:	8b 9d 4c 55 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdaab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c00066ad:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c000670f:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000674c:	05 40 55 02 c0       	add    eax,0xc0025540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c000680c:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 a0 04 02 c0       	push   0xc00204a0
c000682f:	e8 a4 35 01 00       	call   c0019dd8 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 b2 35 01 00       	call   c0019df4 <iso_kprintfd>
c0006842:	c7 04 24 a5 04 02 c0 	mov    DWORD PTR [esp],0xc00204a5
c0006849:	e8 8a 35 01 00       	call   c0019dd8 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006855:	e8 9a 35 01 00       	call   c0019df4 <iso_kprintfd>
c000685a:	c7 04 24 ab 04 02 c0 	mov    DWORD PTR [esp],0xc00204ab
c0006861:	e8 72 35 01 00       	call   c0019dd8 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c000686d:	e8 82 35 01 00       	call   c0019df4 <iso_kprintfd>
c0006872:	c7 04 24 b1 04 02 c0 	mov    DWORD PTR [esp],0xc00204b1
c0006879:	e8 5a 35 01 00       	call   c0019dd8 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006885:	e8 6a 35 01 00       	call   c0019df4 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068eb:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 55 02 c0    	lea    ebp,[edi-0x3ffdaaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 55 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdaaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 9d 04 02 c0       	push   0xc002049d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a2a:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a30:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 55 02 c0    	lea    eax,[edi-0x3ffdaab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 ba 04 02 c0       	push   0xc00204ba
c0006a52:	e8 81 33 01 00       	call   c0019dd8 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a87:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 c5 04 02 c0       	push   0xc00204c5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 cc 04 02 c0       	push   0xc00204cc
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b25:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b48:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 d3 04 02 c0       	push   0xc00204d3
c0006b69:	e8 6a 32 01 00       	call   c0019dd8 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 de 04 02 c0       	push   0xc00204de
c0006b84:	e8 4f 32 01 00       	call   c0019dd8 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 55 02 c0       	push   0xc0025540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 3d 9d 00 00       	call   c00109d1 <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 5f 5a 00 00       	call   c000c702 <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 ef 04 02 c0       	push   0xc00204ef
c0006cd4:	e8 af 9d 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0006cf3:	50                   	push   eax
c0006cf4:	68 08 05 02 c0       	push   0xc0020508
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 ef e8 00 00       	call   c00155f0 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 fe ea 00 00       	call   c0015814 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 90 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a490
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 d8 62 01 c0       	push   0xc00162d8
c0006d25:	52                   	push   edx
c0006d26:	e8 e9 ea 00 00       	call   c0015814 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 04 06 02 c0       	push   0xc0020604
c0006d33:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c0006d38:	e8 4b 9d 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d44:	e8 cb a5 00 00       	call   c0011314 <KeInitRand()>
c0006d49:	e8 ad f9 00 00       	call   c00166fb <Vm::initialise8086()>
c0006d4e:	e8 7d 47 00 00       	call   c000b4d0 <Fs::initVFS()>
c0006d53:	c7 04 24 15 05 02 c0 	mov    DWORD PTR [esp],0xc0020515
c0006d5a:	e8 29 9d 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 04 06 02 c0       	push   0xc0020604
c0006d7e:	e8 05 9d 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c0006d83:	e8 3e 41 00 00       	call   c000aec6 <KeInitialiseSymlinks()>
c0006d88:	e8 33 a2 00 00       	call   c0010fc0 <KeLoadSystemEnv()>
c0006d8d:	e8 90 a4 00 00       	call   c0011222 <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 2f 05 02 c0       	push   0xc002052f
c0006d9c:	68 38 05 02 c0       	push   0xc0020538
c0006da1:	e8 78 ca 00 00       	call   c001381e <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 ae 52 00 00       	call   c000c05c <User::loadClockSettings(int)>
c0006dae:	c7 04 24 28 06 02 c0 	mov    DWORD PTR [esp],0xc0020628
c0006db5:	e8 ce 9c 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 34 59 00 00       	call   c000c700 <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 40 05 02 c0 	mov    DWORD PTR [esp],0xc0020540
c0006dd3:	e8 b0 9c 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 51 05 02 c0       	push   0xc0020551
c0006de7:	e8 08 e2 00 00       	call   c0014ff4 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 3f e4 00 00       	call   c0015234 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 5e ee 00 00       	call   c0015c60 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 6d 05 02 c0       	push   0xc002056d
c0006e17:	50                   	push   eax
c0006e18:	e8 5f 59 00 00       	call   c000c77c <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba 74 06 02 c0       	mov    edx,0xc0020674
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 cf 7e 01 00       	call   c001ede6 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 91 8f 00 00       	call   c000fee6 <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 6a 8f 00 00       	call   c000fee6 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 48 8f 00 00       	call   c000fee6 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 26 8f 00 00       	call   c000fee6 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 33 8e 00 00       	call   c000fe62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 0e 8e 00 00       	call   c000fe62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 2e 7d 01 00       	call   c001eda0 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 7c 79 01 00       	call   c001ea10 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 24 8e 00 00       	call   c000fee6 <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 76 05 02 c0       	push   0xc0020576
c0007104:	e8 54 a0 00 00       	call   c001115d <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 7c 05 02 c0       	push   0xc002057c
c0007140:	e8 18 a0 00 00       	call   c001115d <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 2b 88 00 00       	jmp    c000f9b8 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 82 05 02 c0       	push   0xc0020582
c00071e3:	0f 94 05 e0 2e 02 c0 	sete   BYTE PTR ds:0xc0022ee0
c00071ea:	e8 99 98 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 27 83 00 00       	call   c000f52c <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 d0 53 00 00       	call   c000c5e4 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 9a 05 02 c0 	mov    DWORD PTR [esp],0xc002059a
c000722d:	e8 56 98 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 56 8d 00 00       	call   c000ff9e <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 8d 53 00 00       	call   c000c5e4 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 48 06 02 c0       	push   0xc0020648
c0007274:	e8 0f 98 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c0007279:	e8 c4 06 01 00       	call   c0017942 <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 b4 05 02 c0 	mov    DWORD PTR [esp],0xc00205b4
c0007285:	e8 fe 97 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 a6 e6 00 00       	call   c001593c <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 cf 05 02 c0       	push   0xc00205cf
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 e0 05 02 c0       	push   0xc00205e0
c000730d:	e8 4b 9e 00 00       	call   c001115d <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 ed 05 02 c0       	push   0xc00205ed
c0007322:	e8 36 9e 00 00       	call   c001115d <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 f7 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc00205f7
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 1c 9e 00 00       	jmp    c001115d <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007525:	48                   	dec    eax
c0007526:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 db 00 01 00       	call   c001760e <HalSystemIdle()>
c0007533:	e8 6a 7e 01 00       	call   c001f3a2 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000763a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 a0 ea 01 c0       	push   0xc001eaa0
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 b0 ea 01 c0       	push   0xc001eab0
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 ba ea 01 c0       	push   0xc001eaba
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 c4 ea 01 c0       	push   0xc001eac4
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 ce ea 01 c0       	push   0xc001eace
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 d8 ea 01 c0       	push   0xc001ead8
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 e2 ea 01 c0       	push   0xc001eae2
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 ec ea 01 c0       	push   0xc001eaec
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 f6 ea 01 c0       	push   0xc001eaf6
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 fe ea 01 c0       	push   0xc001eafe
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 08 eb 01 c0       	push   0xc001eb08
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 10 eb 01 c0       	push   0xc001eb10
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 18 eb 01 c0       	push   0xc001eb18
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 20 eb 01 c0       	push   0xc001eb20
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 3a eb 01 c0       	push   0xc001eb3a
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 42 eb 01 c0       	push   0xc001eb42
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 4c eb 01 c0       	push   0xc001eb4c
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 56 eb 01 c0       	push   0xc001eb56
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 60 eb 01 c0       	push   0xc001eb60
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 fa eb 01 c0       	push   0xc001ebfa
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 01 ec 01 c0       	push   0xc001ec01
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 ec eb 01 c0       	push   0xc001ebec
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 f3 eb 01 c0       	push   0xc001ebf3
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 6a eb 01 c0       	push   0xc001eb6a
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 74 eb 01 c0       	push   0xc001eb74
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 7e eb 01 c0       	push   0xc001eb7e
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 88 eb 01 c0       	push   0xc001eb88
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 92 eb 01 c0       	push   0xc001eb92
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 9c eb 01 c0       	push   0xc001eb9c
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 a6 eb 01 c0       	push   0xc001eba6
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 b0 eb 01 c0       	push   0xc001ebb0
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 ba eb 01 c0       	push   0xc001ebba
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 c4 eb 01 c0       	push   0xc001ebc4
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 ce eb 01 c0       	push   0xc001ebce
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 d8 eb 01 c0       	push   0xc001ebd8
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 e2 eb 01 c0       	push   0xc001ebe2
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 3c ed 01 c0       	push   0xc001ed3c
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 46 ed 01 c0       	push   0xc001ed46
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 50 ed 01 c0       	push   0xc001ed50
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 5a ed 01 c0       	push   0xc001ed5a
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 64 ed 01 c0       	push   0xc001ed64
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 6e ed 01 c0       	push   0xc001ed6e
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 78 ed 01 c0       	push   0xc001ed78
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 82 ed 01 c0       	push   0xc001ed82
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 f6 ea 01 c0       	push   0xc001eaf6
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 cc 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ecc
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079df:	8b 3d cc 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022ecc
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 cc 2e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022ecc,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 cc 2e 02 c0       	mov    eax,ds:0xc0022ecc
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 98 06 02 c0       	push   0xc0020698
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 c8 06 02 c0       	push   0xc00206c8
c0007a44:	e8 14 97 00 00       	call   c001115d <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 cd 06 02 c0       	push   0xc00206cd
c0007a5a:	e8 fe 96 00 00       	call   c001115d <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 68 a4 02 c0 01 	add    DWORD PTR ds:0xc002a468,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 d4 06 02 c0       	push   0xc00206d4
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 86 8e 00 00       	call   c0010a0c <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 d4 8d 00 00       	call   c001097b <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007bb8:	e8 7d 77 01 00       	call   c001f33a <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 ec 06 02 c0       	push   0xc00206ec
c0007c4b:	e8 0d 95 00 00       	call   c001115d <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 5e 02 c0    	lea    edx,[esi-0x3ffda114]
c0007c92:	8d 84 06 ed 5e 02 c0 	lea    eax,[esi+eax*1-0x3ffda113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 ec 06 02 c0       	push   0xc00206ec
c0007cc5:	e8 93 94 00 00       	call   c001115d <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 d0 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022ed0
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d d0 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ed0
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 d0 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ed0
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 91 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020791
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 8d 93 00 00       	jmp    c001115d <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 14 07 02 c0       	push   0xc0020714
c0007e54:	e8 04 93 00 00       	call   c001115d <KePanic(char const*)>
c0007e59:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 a7 07 02 c0       	push   0xc00207a7
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 44 07 02 c0       	push   0xc0020744
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 bf 07 02 c0       	push   0xc00207bf
c000810a:	e8 4e 90 00 00       	call   c001115d <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 68 07 02 c0       	push   0xc0020768
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 cd 07 02 c0       	push   0xc00207cd
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba 2c 08 02 c0       	mov    edx,0xc002082c
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 e9 07 02 c0       	push   0xc00207e9
c0008331:	e8 27 8e 00 00       	call   c001115d <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000837a:	e8 e1 d6 00 00       	call   c0015a60 <schedule()>
c000837f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0008384:	48                   	dec    eax
c0008385:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 13 6e 01 00       	call   c001f220 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 06 08 02 c0       	push   0xc0020806
c0008422:	e8 36 8d 00 00       	call   c001115d <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba 2c 08 02 c0       	mov    edx,0xc002082c
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba 74 08 02 c0       	mov    edx,0xc0020874
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 ba 4f 00 00       	call   c000d4c6 <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 ce 02 01 00       	call   c0018800 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d 00 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd100]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d 00 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd100]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 b8 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd248]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 90 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd270]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 00 00 01 00       	call   c0018694 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 5d 00 01 00       	jmp    c001879c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 40 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020840
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 d1 89 00 00       	jmp    c001115d <KePanic(char const*)>
c000878c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 1a 37 00 00       	jmp    c000c003 <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be 4e 08 02 c0       	mov    esi,0xc002084e
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 74 fb 00 00       	call   c001879c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba 74 08 02 c0       	mov    edx,0xc0020874
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 5f 08 02 c0       	push   0xc002085f
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 65 08 02 c0       	push   0xc0020865
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba 3c 09 02 c0       	mov    edx,0xc002093c
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 40 2f 02 c0       	mov    eax,ds:0xc0022f40
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 40 2f 02 c0    	mov    DWORD PTR ds:0xc0022f40,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 5f 02 c0       	push   0xc0025f98
c00091e4:	e8 1f 62 01 00       	call   c001f408 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba 58 09 02 c0       	mov    edx,0xc0020958
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba 3c 09 02 c0       	mov    edx,0xc002093c
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 5f 02 c0       	push   0xc0025f98
c00093b8:	e8 1f 61 01 00       	call   c001f4dc <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 5f 02 c0       	push   0xc0025f98
c00093cc:	e8 13 61 01 00       	call   c001f4e4 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 5f 02 c0       	push   0xc0025f98
c00093ea:	e8 19 60 01 00       	call   c001f408 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 14 09 02 c0       	push   0xc0020914
c0009414:	e8 44 7d 00 00       	call   c001115d <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba 58 09 02 c0       	mov    edx,0xc0020958
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 5f 02 c0       	push   0xc0025f98
c00094b9:	e8 1e 60 01 00       	call   c001f4dc <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 5f 02 c0       	push   0xc0025f98
c00094d6:	e8 ab 60 01 00       	call   c001f586 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 5f 02 c0       	push   0xc0025f98
c0009558:	e8 69 5e 01 00       	call   c001f3c6 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 c8 2e 02 c0       	push   0xc0022ec8
c0009568:	68 98 5f 02 c0       	push   0xc0025f98
c000956d:	68 c4 f3 01 c0       	push   0xc001f3c4
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 48 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f48
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 48 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f48
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 44 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022f44
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 44 2f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022f44,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 44 2f 02 c0    	mov    DWORD PTR ds:0xc0022f44,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 6c 09 02 c0       	push   0xc002096c
c0009674:	e8 e4 7a 00 00       	call   c001115d <KePanic(char const*)>
c0009679:	8b 2d 44 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022f44
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 44 2f 02 c0    	mov    DWORD PTR ds:0xc0022f44,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 44 2f 02 c0       	mov    eax,ds:0xc0022f44
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 44 2f 02 c0    	mov    DWORD PTR ds:0xc0022f44,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 44 2f 02 c0       	mov    ds:0xc0022f44,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 4c 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f4c
c000973e:	8b 0d 54 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f54
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 50 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f50
c0009759:	8b 0d 4c 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f4c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 00 0c 02 c0       	push   0xc0020c00
c000979e:	e8 ba 79 00 00       	call   c001115d <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 e8 94 02 c0       	mov    eax,ds:0xc00294e8
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 17 0c 02 c0       	push   0xc0020c17
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 50 2f 02 c0    	mov    DWORD PTR ds:0xc0022f50,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 58 2f 02 c0 43 	mov    BYTE PTR ds:0xc0022f58,0x43
c000984f:	c7 05 4c 2f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0022f4c,0x8
c0009859:	a3 54 2f 02 c0       	mov    ds:0xc0022f54,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 50 2f 02 c0       	mov    eax,ds:0xc0022f50
c0009874:	f7 35 4c 2f 02 c0    	div    DWORD PTR ds:0xc0022f4c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 8c 09 02 c0       	push   0xc002098c
c00098af:	e8 a9 78 00 00       	call   c001115d <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 2e 0c 02 c0       	push   0xc0020c2e
c0009981:	e8 d7 77 00 00       	call   c001115d <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 b0 09 02 c0 	mov    DWORD PTR [esp+0x30],0xc00209b0
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 74 77 00 00       	jmp    c001115d <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 4a 0c 02 c0       	push   0xc0020c4a
c00099f6:	e8 62 77 00 00       	call   c001115d <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 66 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020c66
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 18 77 00 00       	jmp    c001115d <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 d4 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209d4
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b04:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0009cee:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 f8 09 02 c0       	push   0xc00209f8
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 60 0a 02 c0       	push   0xc0020a60
c0009d87:	e8 d1 73 00 00       	call   c001115d <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 84 0a 02 c0       	push   0xc0020a84
c0009e7b:	e8 dd 72 00 00       	call   c001115d <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 b0 0a 02 c0       	push   0xc0020ab0
c0009fd9:	e8 7f 71 00 00       	call   c001115d <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 6a 26 00 00       	call   c000c878 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 80 0c 02 c0       	push   0xc0020c80
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 4c 2f 02 c0       	mov    eax,ds:0xc0022f4c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 58 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022f58
c000a2e7:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 46 37 00 00       	call   c000da3a <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 4c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f4c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 d4 0a 02 c0       	push   0xc0020ad4
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a359:	c7 44 24 50 8e 0c 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020c8e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 b1 0c 02 c0       	push   0xc0020cb1
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 9f 0c 02 c0       	push   0xc0020c9f
c000a413:	e8 45 6d 00 00       	call   c001115d <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 04 0b 02 c0       	push   0xc0020b04
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 4c 2f 02 c0       	mov    eax,ds:0xc0022f4c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 58 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022f58
c000a4bf:	8b 2c 85 dc 93 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd6c24]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 02 35 00 00       	call   c000d9ce <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 4c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f4c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 c4 0c 02 c0       	push   0xc0020cc4
c000a4e9:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 24 0b 02 c0       	push   0xc0020b24
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 84 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b84
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 d9 0c 02 c0       	push   0xc0020cd9
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 ed 0c 02 c0       	push   0xc0020ced
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 00 0d 02 c0       	push   0xc0020d00
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 0d 0d 02 c0       	push   0xc0020d0d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 26 0d 02 c0       	push   0xc0020d26
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 26 0d 02 c0       	push   0xc0020d26
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 2e 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d2e
c000a7ec:	e8 6c 69 00 00       	call   c001115d <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 46 0d 02 c0       	push   0xc0020d46
c000a7fe:	e8 5a 69 00 00       	call   c001115d <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 5c 0d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf2a4]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 ac 0e 02 c0       	push   0xc0020eac
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 c0 0e 02 c0       	push   0xc0020ec0
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 ca 0e 02 c0       	push   0xc0020eca
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 d4 0e 02 c0       	push   0xc0020ed4
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 18 10 02 c0       	push   0xc0021018
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 de 0e 02 c0       	push   0xc0020ede
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 38 10 02 c0       	push   0xc0021038
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 f3 0e 02 c0       	push   0xc0020ef3
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 0d 0f 02 c0       	push   0xc0020f0d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 60 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0a0]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 60 10 02 c0       	push   0xc0021060
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 18 10 02 c0       	push   0xc0021018
c000ab78:	e8 e0 65 00 00       	call   c001115d <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 a8 10 02 c0       	push   0xc00210a8
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 a8 10 02 c0       	push   0xc00210a8
c000aba7:	e8 b1 65 00 00       	call   c001115d <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 18 0f 02 c0       	push   0xc0020f18
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 18 0f 02 c0       	push   0xc0020f18
c000abd3:	e8 85 65 00 00       	call   c001115d <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 35 0f 02 c0       	push   0xc0020f35
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 35 0f 02 c0       	push   0xc0020f35
c000abff:	e8 59 65 00 00       	call   c001115d <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 c8 10 02 c0       	push   0xc00210c8
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 c8 10 02 c0       	push   0xc00210c8
c000ac2b:	e8 2d 65 00 00       	call   c001115d <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 ec 10 02 c0       	push   0xc00210ec
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 ec 10 02 c0       	push   0xc00210ec
c000ac57:	e8 01 65 00 00       	call   c001115d <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 51 0f 02 c0       	push   0xc0020f51
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 51 0f 02 c0       	push   0xc0020f51
c000ac83:	e8 d5 64 00 00       	call   c001115d <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 6d 0f 02 c0       	push   0xc0020f6d
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 6d 0f 02 c0       	push   0xc0020f6d
c000acaf:	e8 a9 64 00 00       	call   c001115d <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 0c 11 02 c0       	push   0xc002110c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 0c 11 02 c0       	push   0xc002110c
c000acdb:	e8 7d 64 00 00       	call   c001115d <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 30 11 02 c0       	push   0xc0021130
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 30 11 02 c0       	push   0xc0021130
c000ad07:	e8 51 64 00 00       	call   c001115d <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiCreateSymlinkID()>:
c000ad14:	55                   	push   ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	31 db                	xor    ebx,ebx
c000ad1a:	83 ec 1c             	sub    esp,0x1c
c000ad1d:	e8 89 65 00 00       	call   c00112ab <KeRand()>
c000ad22:	8b 2d 60 70 02 c0    	mov    ebp,DWORD PTR ds:0xc0027060
c000ad28:	31 d2                	xor    edx,edx
c000ad2a:	43                   	inc    ebx
c000ad2b:	31 ff                	xor    edi,edi
c000ad2d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad30:	89 ee                	mov    esi,ebp
c000ad32:	89 0d 60 70 02 c0    	mov    DWORD PTR ds:0xc0027060,ecx
c000ad38:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad40:	c1 e0 1b             	shl    eax,0x1b
c000ad43:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4d:	75 10                	jne    c000ad5f <KiCreateSymlinkID()+0x4b>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	68 4f 11 02 c0       	push   0xc002114f
c000ad57:	e8 01 64 00 00       	call   c001115d <KePanic(char const*)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000ad63:	75 06                	jne    c000ad6b <KiCreateSymlinkID()+0x57>
c000ad65:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000ad69:	74 b2                	je     c000ad1d <KiCreateSymlinkID()+0x9>
c000ad6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad73:	83 c4 1c             	add    esp,0x1c
c000ad76:	5b                   	pop    ebx
c000ad77:	31 f0                	xor    eax,esi
c000ad79:	5e                   	pop    esi
c000ad7a:	31 fa                	xor    edx,edi
c000ad7c:	5f                   	pop    edi
c000ad7d:	5d                   	pop    ebp
c000ad7e:	c3                   	ret    

c000ad7f <KiFlushSymlinkChanges()>:
c000ad7f:	56                   	push   esi
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 20             	sub    esp,0x20
c000ad84:	68 14 01 00 00       	push   0x114
c000ad89:	e8 45 cd ff ff       	call   c0007ad3 <malloc>
c000ad8e:	83 c4 0c             	add    esp,0xc
c000ad91:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000ad97:	68 58 11 02 c0       	push   0xc0021158
c000ad9c:	50                   	push   eax
c000ad9d:	89 c3                	mov    ebx,eax
c000ad9f:	e8 32 09 00 00       	call   c000b6d6 <File::File(char const*, Process*)>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	85 db                	test   ebx,ebx
c000ada9:	75 10                	jne    c000adbb <KiFlushSymlinkChanges()+0x3c>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	68 76 11 02 c0       	push   0xc0021176
c000adb3:	e8 a5 63 00 00       	call   c001115d <KePanic(char const*)>
c000adb8:	83 c4 10             	add    esp,0x10
c000adbb:	50                   	push   eax
c000adbc:	50                   	push   eax
c000adbd:	6a 06                	push   0x6
c000adbf:	53                   	push   ebx
c000adc0:	e8 cd 09 00 00       	call   c000b792 <File::open(FileOpenMode)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	85 c0                	test   eax,eax
c000adca:	74 10                	je     c000addc <KiFlushSymlinkChanges()+0x5d>
c000adcc:	83 ec 0c             	sub    esp,0xc
c000adcf:	68 90 11 02 c0       	push   0xc0021190
c000add4:	e8 84 63 00 00       	call   c001115d <KePanic(char const*)>
c000add9:	83 c4 10             	add    esp,0x10
c000addc:	31 f6                	xor    esi,esi
c000adde:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ade4:	7e 40                	jle    c000ae26 <KiFlushSymlinkChanges()+0xa7>
c000ade6:	83 ec 0c             	sub    esp,0xc
c000ade9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000adef:	50                   	push   eax
c000adf0:	89 f0                	mov    eax,esi
c000adf2:	c1 e0 08             	shl    eax,0x8
c000adf5:	05 60 60 02 c0       	add    eax,0xc0026060
c000adfa:	50                   	push   eax
c000adfb:	6a 00                	push   0x0
c000adfd:	68 00 01 00 00       	push   0x100
c000ae02:	53                   	push   ebx
c000ae03:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae06:	83 c4 20             	add    esp,0x20
c000ae09:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae11:	74 10                	je     c000ae23 <KiFlushSymlinkChanges()+0xa4>
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	68 aa 11 02 c0       	push   0xc00211aa
c000ae1b:	e8 3d 63 00 00       	call   c001115d <KePanic(char const*)>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	46                   	inc    esi
c000ae24:	eb b8                	jmp    c000adde <KiFlushSymlinkChanges()+0x5f>
c000ae26:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae30:	83 ec 0c             	sub    esp,0xc
c000ae33:	53                   	push   ebx
c000ae34:	e8 b7 09 00 00       	call   c000b7f0 <File::close()>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	85 db                	test   ebx,ebx
c000ae3e:	74 0c                	je     c000ae4c <KiFlushSymlinkChanges()+0xcd>
c000ae40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	53                   	push   ebx
c000ae46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae49:	83 c4 10             	add    esp,0x10
c000ae4c:	83 c4 14             	add    esp,0x14
c000ae4f:	5b                   	pop    ebx
c000ae50:	5e                   	pop    esi
c000ae51:	c3                   	ret    

c000ae52 <KiDeinitialiseSymlinks(void*)>:
c000ae52:	e9 28 ff ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>

c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae57:	53                   	push   ebx
c000ae58:	83 ec 0c             	sub    esp,0xc
c000ae5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ae63:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae6c:	68 00 01 00 00       	push   0x100
c000ae71:	6a 00                	push   0x0
c000ae73:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000ae7a:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000ae81:	c1 e0 08             	shl    eax,0x8
c000ae84:	05 60 60 02 c0       	add    eax,0xc0026060
c000ae89:	50                   	push   eax
c000ae8a:	e8 61 56 ff ff       	call   c00004f0 <memset>
c000ae8f:	58                   	pop    eax
c000ae90:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae95:	5a                   	pop    edx
c000ae96:	c1 e0 08             	shl    eax,0x8
c000ae99:	53                   	push   ebx
c000ae9a:	05 60 60 02 c0       	add    eax,0xc0026060
c000ae9f:	50                   	push   eax
c000aea0:	e8 ab 57 ff ff       	call   c0000650 <strcpy>
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	40                   	inc    eax
c000aeae:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aeb3:	83 f8 0f             	cmp    eax,0xf
c000aeb6:	7e 09                	jle    c000aec1 <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aeb8:	83 c4 08             	add    esp,0x8
c000aebb:	5b                   	pop    ebx
c000aebc:	e9 be fe ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>
c000aec1:	83 c4 08             	add    esp,0x8
c000aec4:	5b                   	pop    ebx
c000aec5:	c3                   	ret    

c000aec6 <KeInitialiseSymlinks()>:
c000aec6:	53                   	push   ebx
c000aec7:	83 ec 10             	sub    esp,0x10
c000aeca:	6a 00                	push   0x0
c000aecc:	68 52 ae 00 c0       	push   0xc000ae52
c000aed1:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000aedb:	e8 bd 5a 00 00       	call   c001099d <KeRegisterAtexit(void (*)(void*), void*)>
c000aee0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000aee7:	e8 e7 cb ff ff       	call   c0007ad3 <malloc>
c000aeec:	83 c4 0c             	add    esp,0xc
c000aeef:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000aef5:	68 58 11 02 c0       	push   0xc0021158
c000aefa:	50                   	push   eax
c000aefb:	89 c3                	mov    ebx,eax
c000aefd:	e8 d4 07 00 00       	call   c000b6d6 <File::File(char const*, Process*)>
c000af02:	83 c4 10             	add    esp,0x10
c000af05:	85 db                	test   ebx,ebx
c000af07:	75 10                	jne    c000af19 <KeInitialiseSymlinks()+0x53>
c000af09:	83 ec 0c             	sub    esp,0xc
c000af0c:	68 c4 11 02 c0       	push   0xc00211c4
c000af11:	e8 47 62 00 00       	call   c001115d <KePanic(char const*)>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	83 ec 0c             	sub    esp,0xc
c000af1c:	53                   	push   ebx
c000af1d:	e8 34 0b 00 00       	call   c000ba56 <File::exists()>
c000af22:	83 c4 10             	add    esp,0x10
c000af25:	84 c0                	test   al,al
c000af27:	75 2d                	jne    c000af56 <KeInitialiseSymlinks()+0x90>
c000af29:	51                   	push   ecx
c000af2a:	51                   	push   ecx
c000af2b:	6a 12                	push   0x12
c000af2d:	53                   	push   ebx
c000af2e:	e8 5f 08 00 00       	call   c000b792 <File::open(FileOpenMode)>
c000af33:	83 c4 10             	add    esp,0x10
c000af36:	85 c0                	test   eax,eax
c000af38:	74 10                	je     c000af4a <KeInitialiseSymlinks()+0x84>
c000af3a:	83 ec 0c             	sub    esp,0xc
c000af3d:	68 e1 11 02 c0       	push   0xc00211e1
c000af42:	e8 16 62 00 00       	call   c001115d <KePanic(char const*)>
c000af47:	83 c4 10             	add    esp,0x10
c000af4a:	83 ec 0c             	sub    esp,0xc
c000af4d:	53                   	push   ebx
c000af4e:	e8 9d 08 00 00       	call   c000b7f0 <File::close()>
c000af53:	83 c4 10             	add    esp,0x10
c000af56:	85 db                	test   ebx,ebx
c000af58:	74 0c                	je     c000af66 <KeInitialiseSymlinks()+0xa0>
c000af5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af5c:	83 ec 0c             	sub    esp,0xc
c000af5f:	53                   	push   ebx
c000af60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af63:	83 c4 10             	add    esp,0x10
c000af66:	83 c4 08             	add    esp,0x8
c000af69:	5b                   	pop    ebx
c000af6a:	c3                   	ret    

c000af6b <KiIsSymlinkRegistered(char const*)>:
c000af6b:	31 c0                	xor    eax,eax
c000af6d:	31 d2                	xor    edx,edx
c000af6f:	c3                   	ret    

c000af70 <KeDereferenceSymlink(char const*, char*)>:
c000af70:	55                   	push   ebp
c000af71:	57                   	push   edi
c000af72:	56                   	push   esi
c000af73:	53                   	push   ebx
c000af74:	83 ec 50             	sub    esp,0x50
c000af77:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c000af7b:	53                   	push   ebx
c000af7c:	e8 ea ff ff ff       	call   c000af6b <KiIsSymlinkRegistered(char const*)>
c000af81:	5e                   	pop    esi
c000af82:	5f                   	pop    edi
c000af83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af87:	09 d0                	or     eax,edx
c000af89:	75 07                	jne    c000af92 <KeDereferenceSymlink(char const*, char*)+0x22>
c000af8b:	31 db                	xor    ebx,ebx
c000af8d:	e9 8b 01 00 00       	jmp    c000b11d <KeDereferenceSymlink(char const*, char*)+0x1ad>
c000af92:	83 ec 0c             	sub    esp,0xc
c000af95:	89 d7                	mov    edi,edx
c000af97:	68 14 01 00 00       	push   0x114
c000af9c:	e8 32 cb ff ff       	call   c0007ad3 <malloc>
c000afa1:	83 c4 0c             	add    esp,0xc
c000afa4:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000afaa:	53                   	push   ebx
c000afab:	50                   	push   eax
c000afac:	89 c5                	mov    ebp,eax
c000afae:	e8 23 07 00 00       	call   c000b6d6 <File::File(char const*, Process*)>
c000afb3:	83 c4 10             	add    esp,0x10
c000afb6:	85 ed                	test   ebp,ebp
c000afb8:	0f 84 45 01 00 00    	je     c000b103 <KeDereferenceSymlink(char const*, char*)+0x193>
c000afbe:	51                   	push   ecx
c000afbf:	51                   	push   ecx
c000afc0:	6a 01                	push   0x1
c000afc2:	55                   	push   ebp
c000afc3:	e8 ca 07 00 00       	call   c000b792 <File::open(FileOpenMode)>
c000afc8:	83 c4 10             	add    esp,0x10
c000afcb:	85 c0                	test   eax,eax
c000afcd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000afd0:	74 09                	je     c000afdb <KeDereferenceSymlink(char const*, char*)+0x6b>
c000afd2:	83 ec 0c             	sub    esp,0xc
c000afd5:	55                   	push   ebp
c000afd6:	e9 22 01 00 00       	jmp    c000b0fd <KeDereferenceSymlink(char const*, char*)+0x18d>
c000afdb:	83 ec 0c             	sub    esp,0xc
c000afde:	8d 74 24 28          	lea    esi,[esp+0x28]
c000afe2:	56                   	push   esi
c000afe3:	8d 5c 24 47          	lea    ebx,[esp+0x47]
c000afe7:	53                   	push   ebx
c000afe8:	6a 00                	push   0x0
c000afea:	6a 08                	push   0x8
c000afec:	55                   	push   ebp
c000afed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000aff0:	83 c4 20             	add    esp,0x20
c000aff3:	85 c0                	test   eax,eax
c000aff5:	0f 85 f3 00 00 00    	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000affb:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b000:	0f 85 e8 00 00 00    	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b006:	52                   	push   edx
c000b007:	52                   	push   edx
c000b008:	68 fe 11 02 c0       	push   0xc00211fe
c000b00d:	53                   	push   ebx
c000b00e:	e8 6d 57 ff ff       	call   c0000780 <strcmp>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	85 c0                	test   eax,eax
c000b018:	89 c3                	mov    ebx,eax
c000b01a:	0f 85 ce 00 00 00    	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b020:	83 ec 0c             	sub    esp,0xc
c000b023:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b026:	56                   	push   esi
c000b027:	8d 4c 24 30          	lea    ecx,[esp+0x30]
c000b02b:	51                   	push   ecx
c000b02c:	6a 00                	push   0x0
c000b02e:	6a 08                	push   0x8
c000b030:	55                   	push   ebp
c000b031:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b034:	83 c4 20             	add    esp,0x20
c000b037:	85 c0                	test   eax,eax
c000b039:	0f 85 af 00 00 00    	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b03f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b044:	0f 85 a4 00 00 00    	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b04a:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c000b04e:	0f 85 37 ff ff ff    	jne    c000af8b <KeDereferenceSymlink(char const*, char*)+0x1b>
c000b054:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b058:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000b05c:	0f 85 29 ff ff ff    	jne    c000af8b <KeDereferenceSymlink(char const*, char*)+0x1b>
c000b062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b06a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b072:	50                   	push   eax
c000b073:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c000b077:	50                   	push   eax
c000b078:	8d 44 24 30          	lea    eax,[esp+0x30]
c000b07c:	50                   	push   eax
c000b07d:	55                   	push   ebp
c000b07e:	e8 11 0a 00 00       	call   c000ba94 <File::stat(unsigned long long*, bool*)>
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c000b08b:	85 c0                	test   eax,eax
c000b08d:	75 5f                	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b08f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b093:	b9 0f 00 00 00       	mov    ecx,0xf
c000b098:	89 c2                	mov    edx,eax
c000b09a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000b09e:	39 f1                	cmp    ecx,esi
c000b0a0:	19 fa                	sbb    edx,edi
c000b0a2:	73 4a                	jae    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b0a4:	83 c6 f0             	add    esi,0xfffffff0
c000b0a7:	b9 ff 00 00 00       	mov    ecx,0xff
c000b0ac:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000b0b0:	83 d7 ff             	adc    edi,0xffffffff
c000b0b3:	39 f1                	cmp    ecx,esi
c000b0b5:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c000b0b9:	19 f8                	sbb    eax,edi
c000b0bb:	72 46                	jb     c000b103 <KeDereferenceSymlink(char const*, char*)+0x193>
c000b0bd:	83 ec 0c             	sub    esp,0xc
c000b0c0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b0c3:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c000b0c7:	51                   	push   ecx
c000b0c8:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000b0cc:	57                   	push   edi
c000b0cd:	56                   	push   esi
c000b0ce:	55                   	push   ebp
c000b0cf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0d2:	83 c4 20             	add    esp,0x20
c000b0d5:	85 c0                	test   eax,eax
c000b0d7:	75 15                	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b0d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b0dd:	89 c7                	mov    edi,eax
c000b0df:	c1 ff 1f             	sar    edi,0x1f
c000b0e2:	3b 7c 24 2c          	cmp    edi,DWORD PTR [esp+0x2c]
c000b0e6:	75 06                	jne    c000b0ee <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b0e8:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000b0ec:	74 1a                	je     c000b108 <KeDereferenceSymlink(char const*, char*)+0x198>
c000b0ee:	83 ec 0c             	sub    esp,0xc
c000b0f1:	55                   	push   ebp
c000b0f2:	e8 f9 06 00 00       	call   c000b7f0 <File::close()>
c000b0f7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b0fa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b0fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b100:	83 c4 10             	add    esp,0x10
c000b103:	83 cb ff             	or     ebx,0xffffffff
c000b106:	eb 15                	jmp    c000b11d <KeDereferenceSymlink(char const*, char*)+0x1ad>
c000b108:	83 ec 0c             	sub    esp,0xc
c000b10b:	55                   	push   ebp
c000b10c:	e8 df 06 00 00       	call   c000b7f0 <File::close()>
c000b111:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b114:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b117:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b11a:	83 c4 10             	add    esp,0x10
c000b11d:	83 c4 4c             	add    esp,0x4c
c000b120:	89 d8                	mov    eax,ebx
c000b122:	5b                   	pop    ebx
c000b123:	5e                   	pop    esi
c000b124:	5f                   	pop    edi
c000b125:	5d                   	pop    ebp
c000b126:	c3                   	ret    

c000b127 <KeCreateSymlink(char const*, char const*)>:
c000b127:	55                   	push   ebp
c000b128:	57                   	push   edi
c000b129:	56                   	push   esi
c000b12a:	53                   	push   ebx
c000b12b:	83 ec 38             	sub    esp,0x38
c000b12e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b132:	68 14 01 00 00       	push   0x114
c000b137:	e8 97 c9 ff ff       	call   c0007ad3 <malloc>
c000b13c:	83 c4 0c             	add    esp,0xc
c000b13f:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000b145:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b149:	89 c3                	mov    ebx,eax
c000b14b:	50                   	push   eax
c000b14c:	e8 85 05 00 00       	call   c000b6d6 <File::File(char const*, Process*)>
c000b151:	83 c4 10             	add    esp,0x10
c000b154:	85 db                	test   ebx,ebx
c000b156:	b8 01 00 00 00       	mov    eax,0x1
c000b15b:	0f 84 fb 00 00 00    	je     c000b25c <KeCreateSymlink(char const*, char const*)+0x135>
c000b161:	52                   	push   edx
c000b162:	52                   	push   edx
c000b163:	6a 12                	push   0x12
c000b165:	53                   	push   ebx
c000b166:	e8 27 06 00 00       	call   c000b792 <File::open(FileOpenMode)>
c000b16b:	83 c4 10             	add    esp,0x10
c000b16e:	85 c0                	test   eax,eax
c000b170:	74 0b                	je     c000b17d <KeCreateSymlink(char const*, char const*)+0x56>
c000b172:	83 ec 0c             	sub    esp,0xc
c000b175:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b177:	53                   	push   ebx
c000b178:	e9 d4 00 00 00       	jmp    c000b251 <KeCreateSymlink(char const*, char const*)+0x12a>
c000b17d:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b181:	be 06 12 02 c0       	mov    esi,0xc0021206
c000b186:	b9 09 00 00 00       	mov    ecx,0x9
c000b18b:	fc                   	cld    
c000b18c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b18e:	83 ec 0c             	sub    esp,0xc
c000b191:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b195:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b197:	56                   	push   esi
c000b198:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b19c:	52                   	push   edx
c000b19d:	6a 00                	push   0x0
c000b19f:	6a 08                	push   0x8
c000b1a1:	53                   	push   ebx
c000b1a2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1a5:	83 c4 20             	add    esp,0x20
c000b1a8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1ad:	0f 85 90 00 00 00    	jne    c000b243 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1b3:	85 c0                	test   eax,eax
c000b1b5:	0f 85 88 00 00 00    	jne    c000b243 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1bb:	e8 54 fb ff ff       	call   c000ad14 <KiCreateSymlinkID()>
c000b1c0:	83 ec 0c             	sub    esp,0xc
c000b1c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1c7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b1cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1cd:	56                   	push   esi
c000b1ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b1d2:	52                   	push   edx
c000b1d3:	6a 00                	push   0x0
c000b1d5:	6a 08                	push   0x8
c000b1d7:	53                   	push   ebx
c000b1d8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1db:	83 c4 20             	add    esp,0x20
c000b1de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1e3:	75 5e                	jne    c000b243 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1e5:	85 c0                	test   eax,eax
c000b1e7:	75 5a                	jne    c000b243 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1eb:	83 ec 0c             	sub    esp,0xc
c000b1ee:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b1f1:	55                   	push   ebp
c000b1f2:	e8 89 53 ff ff       	call   c0000580 <strlen>
c000b1f7:	31 d2                	xor    edx,edx
c000b1f9:	89 34 24             	mov    DWORD PTR [esp],esi
c000b1fc:	55                   	push   ebp
c000b1fd:	52                   	push   edx
c000b1fe:	50                   	push   eax
c000b1ff:	53                   	push   ebx
c000b200:	ff d7                	call   edi
c000b202:	83 c4 14             	add    esp,0x14
c000b205:	55                   	push   ebp
c000b206:	89 c6                	mov    esi,eax
c000b208:	e8 73 53 ff ff       	call   c0000580 <strlen>
c000b20d:	83 c4 10             	add    esp,0x10
c000b210:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b214:	75 2d                	jne    c000b243 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b216:	85 f6                	test   esi,esi
c000b218:	75 29                	jne    c000b243 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b21a:	50                   	push   eax
c000b21b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b223:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b227:	e8 2b fc ff ff       	call   c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>
c000b22c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b22f:	e8 bc 05 00 00       	call   c000b7f0 <File::close()>
c000b234:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b236:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b239:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b23c:	83 c4 10             	add    esp,0x10
c000b23f:	31 c0                	xor    eax,eax
c000b241:	eb 19                	jmp    c000b25c <KeCreateSymlink(char const*, char const*)+0x135>
c000b243:	83 ec 0c             	sub    esp,0xc
c000b246:	53                   	push   ebx
c000b247:	e8 a4 05 00 00       	call   c000b7f0 <File::close()>
c000b24c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b24e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b251:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b254:	83 c4 10             	add    esp,0x10
c000b257:	b8 01 00 00 00       	mov    eax,0x1
c000b25c:	83 c4 2c             	add    esp,0x2c
c000b25f:	5b                   	pop    ebx
c000b260:	5e                   	pop    esi
c000b261:	5f                   	pop    edi
c000b262:	5d                   	pop    ebp
c000b263:	c3                   	ret    

c000b264 <File::read(unsigned long long, void*, int*)>:
c000b264:	53                   	push   ebx
c000b265:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b269:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b26d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b274:	83 f8 19             	cmp    eax,0x19
c000b277:	77 35                	ja     c000b2ae <File::read(unsigned long long, void*, int*)+0x4a>
c000b279:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b280:	85 c0                	test   eax,eax
c000b282:	74 2a                	je     c000b2ae <File::read(unsigned long long, void*, int*)+0x4a>
c000b284:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b28a:	85 c0                	test   eax,eax
c000b28c:	74 20                	je     c000b2ae <File::read(unsigned long long, void*, int*)+0x4a>
c000b28e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b292:	74 21                	je     c000b2b5 <File::read(unsigned long long, void*, int*)+0x51>
c000b294:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b296:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b29a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b2a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b2a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b2a8:	5b                   	pop    ebx
c000b2a9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b2ac:	ff e0                	jmp    eax
c000b2ae:	b8 0b 00 00 00       	mov    eax,0xb
c000b2b3:	eb 05                	jmp    c000b2ba <File::read(unsigned long long, void*, int*)+0x56>
c000b2b5:	b8 05 00 00 00       	mov    eax,0x5
c000b2ba:	5b                   	pop    ebx
c000b2bb:	c3                   	ret    

c000b2bc <File::write(unsigned long long, void*, int*)>:
c000b2bc:	53                   	push   ebx
c000b2bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b2c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b2c5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b2cc:	83 f8 19             	cmp    eax,0x19
c000b2cf:	77 35                	ja     c000b306 <File::write(unsigned long long, void*, int*)+0x4a>
c000b2d1:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b2d8:	85 c0                	test   eax,eax
c000b2da:	74 2a                	je     c000b306 <File::write(unsigned long long, void*, int*)+0x4a>
c000b2dc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2e2:	85 c0                	test   eax,eax
c000b2e4:	74 20                	je     c000b306 <File::write(unsigned long long, void*, int*)+0x4a>
c000b2e6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2ea:	74 21                	je     c000b30d <File::write(unsigned long long, void*, int*)+0x51>
c000b2ec:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2ee:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b2f2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b2f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b2fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b300:	5b                   	pop    ebx
c000b301:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b304:	ff e0                	jmp    eax
c000b306:	b8 0b 00 00 00       	mov    eax,0xb
c000b30b:	eb 05                	jmp    c000b312 <File::write(unsigned long long, void*, int*)+0x56>
c000b30d:	b8 05 00 00 00       	mov    eax,0x5
c000b312:	5b                   	pop    ebx
c000b313:	c3                   	ret    

c000b314 <Directory::read(unsigned long long, void*, int*)>:
c000b314:	53                   	push   ebx
c000b315:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b319:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b31d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b324:	83 f8 19             	cmp    eax,0x19
c000b327:	77 35                	ja     c000b35e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b329:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b330:	85 c0                	test   eax,eax
c000b332:	74 2a                	je     c000b35e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b334:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b33a:	85 c0                	test   eax,eax
c000b33c:	74 20                	je     c000b35e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b33e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b342:	74 21                	je     c000b365 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b344:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b346:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b34a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b350:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b354:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b358:	5b                   	pop    ebx
c000b359:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b35c:	ff e0                	jmp    eax
c000b35e:	b8 0b 00 00 00       	mov    eax,0xb
c000b363:	eb 05                	jmp    c000b36a <Directory::read(unsigned long long, void*, int*)+0x56>
c000b365:	b8 05 00 00 00       	mov    eax,0x5
c000b36a:	5b                   	pop    ebx
c000b36b:	c3                   	ret    

c000b36c <Directory::write(unsigned long long, void*, int*)>:
c000b36c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b370:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b377:	b8 0b 00 00 00       	mov    eax,0xb
c000b37c:	83 fa 19             	cmp    edx,0x19
c000b37f:	77 18                	ja     c000b399 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b381:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b388:	85 d2                	test   edx,edx
c000b38a:	74 0d                	je     c000b399 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b38c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b393:	19 c0                	sbb    eax,eax
c000b395:	83 e0 0a             	and    eax,0xa
c000b398:	40                   	inc    eax
c000b399:	c3                   	ret    

c000b39a <File::isAtty()>:
c000b39a:	31 c0                	xor    eax,eax
c000b39c:	c3                   	ret    
c000b39d:	90                   	nop

c000b39e <Directory::isAtty()>:
c000b39e:	31 c0                	xor    eax,eax
c000b3a0:	c3                   	ret    
c000b3a1:	90                   	nop

c000b3a2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b3a2:	b8 0a 00 00 00       	mov    eax,0xa
c000b3a7:	c3                   	ret    

c000b3a8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b3a8:	b8 0a 00 00 00       	mov    eax,0xa
c000b3ad:	c3                   	ret    

c000b3ae <Filesystem::allocateSwapfile(char const*, int)>:
c000b3ae:	31 c0                	xor    eax,eax
c000b3b0:	31 d2                	xor    edx,edx
c000b3b2:	c3                   	ret    
c000b3b3:	90                   	nop

c000b3b4 <File::~File()>:
c000b3b4:	83 ec 0c             	sub    esp,0xc
c000b3b7:	ba 84 12 02 c0       	mov    edx,0xc0021284
c000b3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c0:	89 10                	mov    DWORD PTR [eax],edx
c000b3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	50                   	push   eax
c000b3ca:	e8 bd df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b3cf:	83 c4 10             	add    esp,0x10
c000b3d2:	90                   	nop
c000b3d3:	83 c4 0c             	add    esp,0xc
c000b3d6:	c3                   	ret    
c000b3d7:	90                   	nop

c000b3d8 <File::~File()>:
c000b3d8:	83 ec 0c             	sub    esp,0xc
c000b3db:	83 ec 0c             	sub    esp,0xc
c000b3de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3e2:	e8 cd ff ff ff       	call   c000b3b4 <File::~File()>
c000b3e7:	83 c4 10             	add    esp,0x10
c000b3ea:	83 ec 08             	sub    esp,0x8
c000b3ed:	68 14 01 00 00       	push   0x114
c000b3f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f6:	e8 11 f4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b3fb:	83 c4 10             	add    esp,0x10
c000b3fe:	83 c4 0c             	add    esp,0xc
c000b401:	c3                   	ret    

c000b402 <Directory::~Directory()>:
c000b402:	83 ec 0c             	sub    esp,0xc
c000b405:	ba a0 12 02 c0       	mov    edx,0xc00212a0
c000b40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40e:	89 10                	mov    DWORD PTR [eax],edx
c000b410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b414:	83 ec 0c             	sub    esp,0xc
c000b417:	50                   	push   eax
c000b418:	e8 6f df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b41d:	83 c4 10             	add    esp,0x10
c000b420:	90                   	nop
c000b421:	83 c4 0c             	add    esp,0xc
c000b424:	c3                   	ret    
c000b425:	90                   	nop

c000b426 <Directory::~Directory()>:
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	83 ec 0c             	sub    esp,0xc
c000b42c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b430:	e8 cd ff ff ff       	call   c000b402 <Directory::~Directory()>
c000b435:	83 c4 10             	add    esp,0x10
c000b438:	83 ec 08             	sub    esp,0x8
c000b43b:	68 14 01 00 00       	push   0x114
c000b440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b444:	e8 c3 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b449:	83 c4 10             	add    esp,0x10
c000b44c:	83 c4 0c             	add    esp,0xc
c000b44f:	c3                   	ret    

c000b450 <Filesystem::Filesystem()>:
c000b450:	ba 18 12 02 c0       	mov    edx,0xc0021218
c000b455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b459:	89 10                	mov    DWORD PTR [eax],edx
c000b45b:	8b 15 64 70 02 c0    	mov    edx,DWORD PTR ds:0xc0027064
c000b461:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b465:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b46c:	a3 64 70 02 c0       	mov    ds:0xc0027064,eax
c000b471:	90                   	nop
c000b472:	c3                   	ret    
c000b473:	90                   	nop

c000b474 <Filesystem::~Filesystem()>:
c000b474:	ba 18 12 02 c0       	mov    edx,0xc0021218
c000b479:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b47d:	89 10                	mov    DWORD PTR [eax],edx
c000b47f:	90                   	nop
c000b480:	c3                   	ret    
c000b481:	90                   	nop

c000b482 <Filesystem::~Filesystem()>:
c000b482:	83 ec 0c             	sub    esp,0xc
c000b485:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b489:	e8 e6 ff ff ff       	call   c000b474 <Filesystem::~Filesystem()>
c000b48e:	83 c4 04             	add    esp,0x4
c000b491:	83 ec 08             	sub    esp,0x8
c000b494:	6a 08                	push   0x8
c000b496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b49a:	e8 6d f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b49f:	83 c4 10             	add    esp,0x10
c000b4a2:	83 c4 0c             	add    esp,0xc
c000b4a5:	c3                   	ret    

c000b4a6 <Fs::getcwd(Process*, char*, int)>:
c000b4a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b4aa:	31 c0                	xor    eax,eax
c000b4ac:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b4b0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b4b3:	7d 15                	jge    c000b4ca <Fs::getcwd(Process*, char*, int)+0x24>
c000b4b5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b4b9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b4c0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b4c3:	84 c9                	test   cl,cl
c000b4c5:	74 06                	je     c000b4cd <Fs::getcwd(Process*, char*, int)+0x27>
c000b4c7:	40                   	inc    eax
c000b4c8:	eb e2                	jmp    c000b4ac <Fs::getcwd(Process*, char*, int)+0x6>
c000b4ca:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b4cd:	31 c0                	xor    eax,eax
c000b4cf:	c3                   	ret    

c000b4d0 <Fs::initVFS()>:
c000b4d0:	83 ec 18             	sub    esp,0x18
c000b4d3:	6a 08                	push   0x8
c000b4d5:	e8 f9 c5 ff ff       	call   c0007ad3 <malloc>
c000b4da:	89 04 24             	mov    DWORD PTR [esp],eax
c000b4dd:	e8 f2 e0 00 00       	call   c00195d4 <FAT::FAT()>
c000b4e2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b4e9:	e8 e5 c5 ff ff       	call   c0007ad3 <malloc>
c000b4ee:	89 04 24             	mov    DWORD PTR [esp],eax
c000b4f1:	e8 0c f0 00 00       	call   c001a502 <ISO9660::ISO9660()>
c000b4f6:	83 c4 1c             	add    esp,0x1c
c000b4f9:	c3                   	ret    

c000b4fa <Fs::standardiseFiles(char*, char const*, char const*)>:
c000b4fa:	55                   	push   ebp
c000b4fb:	57                   	push   edi
c000b4fc:	56                   	push   esi
c000b4fd:	53                   	push   ebx
c000b4fe:	81 ec 20 04 00 00    	sub    esp,0x420
c000b504:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000b50b:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b512:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b519:	68 00 04 00 00       	push   0x400
c000b51e:	6a 00                	push   0x0
c000b520:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b524:	56                   	push   esi
c000b525:	e8 c6 4f ff ff       	call   c00004f0 <memset>
c000b52a:	83 c4 10             	add    esp,0x10
c000b52d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b531:	75 0b                	jne    c000b53e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b533:	50                   	push   eax
c000b534:	50                   	push   eax
c000b535:	57                   	push   edi
c000b536:	56                   	push   esi
c000b537:	e8 14 51 ff ff       	call   c0000650 <strcpy>
c000b53c:	eb 45                	jmp    c000b583 <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000b53e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b541:	83 f8 2f             	cmp    eax,0x2f
c000b544:	74 05                	je     c000b54b <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b546:	83 f8 5c             	cmp    eax,0x5c
c000b549:	75 19                	jne    c000b564 <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000b54b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b54e:	3c 60                	cmp    al,0x60
c000b550:	7e 03                	jle    c000b555 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b552:	83 e8 20             	sub    eax,0x20
c000b555:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b559:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b560:	50                   	push   eax
c000b561:	50                   	push   eax
c000b562:	eb 18                	jmp    c000b57c <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000b564:	50                   	push   eax
c000b565:	50                   	push   eax
c000b566:	55                   	push   ebp
c000b567:	56                   	push   esi
c000b568:	e8 e3 50 ff ff       	call   c0000650 <strcpy>
c000b56d:	5a                   	pop    edx
c000b56e:	59                   	pop    ecx
c000b56f:	68 b8 21 02 c0       	push   0xc00221b8
c000b574:	56                   	push   esi
c000b575:	e8 f6 52 ff ff       	call   c0000870 <strcat>
c000b57a:	5d                   	pop    ebp
c000b57b:	58                   	pop    eax
c000b57c:	57                   	push   edi
c000b57d:	56                   	push   esi
c000b57e:	e8 ed 52 ff ff       	call   c0000870 <strcat>
c000b583:	83 c4 10             	add    esp,0x10
c000b586:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b58a:	3c 60                	cmp    al,0x60
c000b58c:	7e 03                	jle    c000b591 <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000b58e:	83 e8 20             	sub    eax,0x20
c000b591:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b595:	88 03                	mov    BYTE PTR [ebx],al
c000b597:	b8 03 00 00 00       	mov    eax,0x3
c000b59c:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b5a3:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b5a9:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b5ad:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000b5b5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b5b9:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000b5be:	89 fa                	mov    edx,edi
c000b5c0:	0f be ea             	movsx  ebp,dl
c000b5c3:	85 ed                	test   ebp,ebp
c000b5c5:	0f 84 af 00 00 00    	je     c000b67a <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000b5cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b5cf:	42                   	inc    edx
c000b5d0:	83 fd 2f             	cmp    ebp,0x2f
c000b5d3:	74 05                	je     c000b5da <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000b5d5:	83 fd 5c             	cmp    ebp,0x5c
c000b5d8:	75 14                	jne    c000b5ee <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b5da:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b5df:	89 c5                	mov    ebp,eax
c000b5e1:	74 0b                	je     c000b5ee <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b5e3:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b5e7:	40                   	inc    eax
c000b5e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5ec:	eb c7                	jmp    c000b5b5 <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000b5ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b5f2:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000b5f7:	89 f9                	mov    ecx,edi
c000b5f9:	0f be e9             	movsx  ebp,cl
c000b5fc:	75 63                	jne    c000b661 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b5fe:	83 fd 2e             	cmp    ebp,0x2e
c000b601:	75 5e                	jne    c000b661 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b603:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b607:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b60c:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000b611:	74 18                	je     c000b62b <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000b613:	83 fd 2e             	cmp    ebp,0x2e
c000b616:	74 57                	je     c000b66f <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b618:	89 ca                	mov    edx,ecx
c000b61a:	42                   	inc    edx
c000b61b:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b61f:	83 f9 2f             	cmp    ecx,0x2f
c000b622:	74 f6                	je     c000b61a <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b624:	83 f9 5c             	cmp    ecx,0x5c
c000b627:	74 f1                	je     c000b61a <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b629:	eb bd                	jmp    c000b5e8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b62b:	83 fd 2e             	cmp    ebp,0x2e
c000b62e:	74 3f                	je     c000b66f <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b630:	83 f8 03             	cmp    eax,0x3
c000b633:	74 b3                	je     c000b5e8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b635:	42                   	inc    edx
c000b636:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b63a:	83 f9 2f             	cmp    ecx,0x2f
c000b63d:	74 f6                	je     c000b635 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b63f:	83 f9 5c             	cmp    ecx,0x5c
c000b642:	74 f1                	je     c000b635 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b644:	48                   	dec    eax
c000b645:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b649:	75 06                	jne    c000b651 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b64b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b64f:	eb f3                	jmp    c000b644 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b651:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b655:	74 07                	je     c000b65e <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000b657:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b65b:	48                   	dec    eax
c000b65c:	eb f3                	jmp    c000b651 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b65e:	40                   	inc    eax
c000b65f:	eb 87                	jmp    c000b5e8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b661:	83 fd 2f             	cmp    ebp,0x2f
c000b664:	74 82                	je     c000b5e8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b666:	83 fd 5c             	cmp    ebp,0x5c
c000b669:	0f 84 79 ff ff ff    	je     c000b5e8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b66f:	89 f9                	mov    ecx,edi
c000b671:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b674:	40                   	inc    eax
c000b675:	e9 6e ff ff ff       	jmp    c000b5e8 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b67a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b67e:	83 ec 0c             	sub    esp,0xc
c000b681:	53                   	push   ebx
c000b682:	e8 f9 4e ff ff       	call   c0000580 <strlen>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b68f:	75 26                	jne    c000b6b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000b691:	83 ec 0c             	sub    esp,0xc
c000b694:	53                   	push   ebx
c000b695:	e8 e6 4e ff ff       	call   c0000580 <strlen>
c000b69a:	83 c4 10             	add    esp,0x10
c000b69d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b6a2:	74 26                	je     c000b6ca <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000b6a4:	83 ec 0c             	sub    esp,0xc
c000b6a7:	53                   	push   ebx
c000b6a8:	e8 d3 4e ff ff       	call   c0000580 <strlen>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b6b5:	eb c7                	jmp    c000b67e <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000b6b7:	83 ec 0c             	sub    esp,0xc
c000b6ba:	53                   	push   ebx
c000b6bb:	e8 c0 4e ff ff       	call   c0000580 <strlen>
c000b6c0:	83 c4 10             	add    esp,0x10
c000b6c3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b6c8:	74 c7                	je     c000b691 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b6ca:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b6d0:	5b                   	pop    ebx
c000b6d1:	5e                   	pop    esi
c000b6d2:	5f                   	pop    edi
c000b6d3:	5d                   	pop    ebp
c000b6d4:	c3                   	ret    
c000b6d5:	90                   	nop

c000b6d6 <File::File(char const*, Process*)>:
c000b6d6:	83 ec 0c             	sub    esp,0xc
c000b6d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6dd:	83 ec 08             	sub    esp,0x8
c000b6e0:	6a 00                	push   0x0
c000b6e2:	50                   	push   eax
c000b6e3:	e8 be da ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000b6e8:	83 c4 10             	add    esp,0x10
c000b6eb:	ba 84 12 02 c0       	mov    edx,0xc0021284
c000b6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6f4:	89 10                	mov    DWORD PTR [eax],edx
c000b6f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6fa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b704:	83 c0 0d             	add    eax,0xd
c000b707:	83 ec 04             	sub    esp,0x4
c000b70a:	52                   	push   edx
c000b70b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b70f:	50                   	push   eax
c000b710:	e8 e5 fd ff ff       	call   c000b4fa <Fs::standardiseFiles(char*, char const*, char const*)>
c000b715:	83 c4 10             	add    esp,0x10
c000b718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b71f:	83 e8 41             	sub    eax,0x41
c000b722:	88 c2                	mov    dl,al
c000b724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b728:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b732:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b73a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b740:	0f b6 c0             	movzx  eax,al
c000b743:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b74a:	85 c0                	test   eax,eax
c000b74c:	74 3e                	je     c000b78c <File::File(char const*, Process*)+0xb6>
c000b74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b752:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b758:	0f b6 c0             	movzx  eax,al
c000b75b:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b762:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b768:	85 c0                	test   eax,eax
c000b76a:	75 20                	jne    c000b78c <File::File(char const*, Process*)+0xb6>
c000b76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b770:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b776:	0f b6 c0             	movzx  eax,al
c000b779:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b780:	83 ec 0c             	sub    esp,0xc
c000b783:	50                   	push   eax
c000b784:	e8 83 21 00 00       	call   c000d90c <LogicalDisk::mount()>
c000b789:	83 c4 10             	add    esp,0x10
c000b78c:	90                   	nop
c000b78d:	83 c4 0c             	add    esp,0xc
c000b790:	c3                   	ret    
c000b791:	90                   	nop

c000b792 <File::open(FileOpenMode)>:
c000b792:	53                   	push   ebx
c000b793:	b8 0b 00 00 00       	mov    eax,0xb
c000b798:	83 ec 08             	sub    esp,0x8
c000b79b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b79f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b7a6:	83 fa 19             	cmp    edx,0x19
c000b7a9:	77 40                	ja     c000b7eb <File::open(FileOpenMode)+0x59>
c000b7ab:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b7b2:	85 d2                	test   edx,edx
c000b7b4:	74 35                	je     c000b7eb <File::open(FileOpenMode)+0x59>
c000b7b6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b7bc:	85 d2                	test   edx,edx
c000b7be:	74 2b                	je     c000b7eb <File::open(FileOpenMode)+0x59>
c000b7c0:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b7c4:	b8 06 00 00 00       	mov    eax,0x6
c000b7c9:	75 20                	jne    c000b7eb <File::open(FileOpenMode)+0x59>
c000b7cb:	8b 02                	mov    eax,DWORD PTR [edx]
c000b7cd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b7d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d7:	51                   	push   ecx
c000b7d8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b7db:	51                   	push   ecx
c000b7dc:	52                   	push   edx
c000b7dd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b7e0:	83 c4 10             	add    esp,0x10
c000b7e3:	85 c0                	test   eax,eax
c000b7e5:	75 04                	jne    c000b7eb <File::open(FileOpenMode)+0x59>
c000b7e7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b7eb:	83 c4 08             	add    esp,0x8
c000b7ee:	5b                   	pop    ebx
c000b7ef:	c3                   	ret    

c000b7f0 <File::close()>:
c000b7f0:	53                   	push   ebx
c000b7f1:	b8 0b 00 00 00       	mov    eax,0xb
c000b7f6:	83 ec 08             	sub    esp,0x8
c000b7f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7fd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b804:	83 f9 19             	cmp    ecx,0x19
c000b807:	77 41                	ja     c000b84a <File::close()+0x5a>
c000b809:	8b 1c 8d e0 94 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b810:	85 db                	test   ebx,ebx
c000b812:	74 36                	je     c000b84a <File::close()+0x5a>
c000b814:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b81b:	74 2d                	je     c000b84a <File::close()+0x5a>
c000b81d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b821:	b8 05 00 00 00       	mov    eax,0x5
c000b826:	74 22                	je     c000b84a <File::close()+0x5a>
c000b828:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b82c:	8b 04 8d e0 94 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6b20]
c000b833:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b839:	53                   	push   ebx
c000b83a:	53                   	push   ebx
c000b83b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b83d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b843:	50                   	push   eax
c000b844:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b847:	83 c4 10             	add    esp,0x10
c000b84a:	83 c4 08             	add    esp,0x8
c000b84d:	5b                   	pop    ebx
c000b84e:	c3                   	ret    
c000b84f:	90                   	nop

c000b850 <File::seek(unsigned long long)>:
c000b850:	56                   	push   esi
c000b851:	b8 0b 00 00 00       	mov    eax,0xb
c000b856:	53                   	push   ebx
c000b857:	51                   	push   ecx
c000b858:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b85c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b860:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b864:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b86b:	83 fa 19             	cmp    edx,0x19
c000b86e:	77 31                	ja     c000b8a1 <File::seek(unsigned long long)+0x51>
c000b870:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b877:	85 d2                	test   edx,edx
c000b879:	74 26                	je     c000b8a1 <File::seek(unsigned long long)+0x51>
c000b87b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b881:	85 d2                	test   edx,edx
c000b883:	74 1c                	je     c000b8a1 <File::seek(unsigned long long)+0x51>
c000b885:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b889:	b8 05 00 00 00       	mov    eax,0x5
c000b88e:	74 11                	je     c000b8a1 <File::seek(unsigned long long)+0x51>
c000b890:	8b 02                	mov    eax,DWORD PTR [edx]
c000b892:	53                   	push   ebx
c000b893:	51                   	push   ecx
c000b894:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b89a:	52                   	push   edx
c000b89b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b89e:	83 c4 10             	add    esp,0x10
c000b8a1:	5a                   	pop    edx
c000b8a2:	5b                   	pop    ebx
c000b8a3:	5e                   	pop    esi
c000b8a4:	c3                   	ret    
c000b8a5:	90                   	nop

c000b8a6 <File::truncate(unsigned long long)>:
c000b8a6:	56                   	push   esi
c000b8a7:	b8 0b 00 00 00       	mov    eax,0xb
c000b8ac:	53                   	push   ebx
c000b8ad:	51                   	push   ecx
c000b8ae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b8b6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8ba:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b8c1:	83 fa 19             	cmp    edx,0x19
c000b8c4:	77 31                	ja     c000b8f7 <File::truncate(unsigned long long)+0x51>
c000b8c6:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b8cd:	85 d2                	test   edx,edx
c000b8cf:	74 26                	je     c000b8f7 <File::truncate(unsigned long long)+0x51>
c000b8d1:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8d7:	85 d2                	test   edx,edx
c000b8d9:	74 1c                	je     c000b8f7 <File::truncate(unsigned long long)+0x51>
c000b8db:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b8df:	b8 05 00 00 00       	mov    eax,0x5
c000b8e4:	74 11                	je     c000b8f7 <File::truncate(unsigned long long)+0x51>
c000b8e6:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8e8:	53                   	push   ebx
c000b8e9:	51                   	push   ecx
c000b8ea:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b8f0:	52                   	push   edx
c000b8f1:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b8f4:	83 c4 10             	add    esp,0x10
c000b8f7:	5a                   	pop    edx
c000b8f8:	5b                   	pop    ebx
c000b8f9:	5e                   	pop    esi
c000b8fa:	c3                   	ret    
c000b8fb:	90                   	nop

c000b8fc <File::tell(unsigned long long*)>:
c000b8fc:	83 ec 0c             	sub    esp,0xc
c000b8ff:	b8 0b 00 00 00       	mov    eax,0xb
c000b904:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b908:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b90f:	83 fa 19             	cmp    edx,0x19
c000b912:	77 34                	ja     c000b948 <File::tell(unsigned long long*)+0x4c>
c000b914:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b91b:	85 d2                	test   edx,edx
c000b91d:	74 29                	je     c000b948 <File::tell(unsigned long long*)+0x4c>
c000b91f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b925:	85 d2                	test   edx,edx
c000b927:	74 1f                	je     c000b948 <File::tell(unsigned long long*)+0x4c>
c000b929:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b92d:	b8 05 00 00 00       	mov    eax,0x5
c000b932:	74 14                	je     c000b948 <File::tell(unsigned long long*)+0x4c>
c000b934:	50                   	push   eax
c000b935:	8b 02                	mov    eax,DWORD PTR [edx]
c000b937:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b93b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b941:	52                   	push   edx
c000b942:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b945:	83 c4 10             	add    esp,0x10
c000b948:	83 c4 0c             	add    esp,0xc
c000b94b:	c3                   	ret    

c000b94c <File::rewind()>:
c000b94c:	83 ec 10             	sub    esp,0x10
c000b94f:	6a 00                	push   0x0
c000b951:	6a 00                	push   0x0
c000b953:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b957:	e8 f4 fe ff ff       	call   c000b850 <File::seek(unsigned long long)>
c000b95c:	83 c4 1c             	add    esp,0x1c
c000b95f:	c3                   	ret    

c000b960 <File::unlink()>:
c000b960:	83 ec 0c             	sub    esp,0xc
c000b963:	b8 0b 00 00 00       	mov    eax,0xb
c000b968:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b96c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b973:	83 f9 19             	cmp    ecx,0x19
c000b976:	77 2f                	ja     c000b9a7 <File::unlink()+0x47>
c000b978:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b97f:	85 c9                	test   ecx,ecx
c000b981:	74 24                	je     c000b9a7 <File::unlink()+0x47>
c000b983:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b989:	85 c9                	test   ecx,ecx
c000b98b:	74 1a                	je     c000b9a7 <File::unlink()+0x47>
c000b98d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b991:	b8 06 00 00 00       	mov    eax,0x6
c000b996:	75 0f                	jne    c000b9a7 <File::unlink()+0x47>
c000b998:	50                   	push   eax
c000b999:	83 c2 0d             	add    edx,0xd
c000b99c:	50                   	push   eax
c000b99d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b99f:	52                   	push   edx
c000b9a0:	51                   	push   ecx
c000b9a1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b9a4:	83 c4 10             	add    esp,0x10
c000b9a7:	83 c4 0c             	add    esp,0xc
c000b9aa:	c3                   	ret    
c000b9ab:	90                   	nop

c000b9ac <File::rename(char const*)>:
c000b9ac:	83 ec 0c             	sub    esp,0xc
c000b9af:	b8 0b 00 00 00       	mov    eax,0xb
c000b9b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9b8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9bf:	83 f9 19             	cmp    ecx,0x19
c000b9c2:	77 32                	ja     c000b9f6 <File::rename(char const*)+0x4a>
c000b9c4:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b9cb:	85 c9                	test   ecx,ecx
c000b9cd:	74 27                	je     c000b9f6 <File::rename(char const*)+0x4a>
c000b9cf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9d5:	85 c9                	test   ecx,ecx
c000b9d7:	74 1d                	je     c000b9f6 <File::rename(char const*)+0x4a>
c000b9d9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9dd:	b8 06 00 00 00       	mov    eax,0x6
c000b9e2:	75 12                	jne    c000b9f6 <File::rename(char const*)+0x4a>
c000b9e4:	50                   	push   eax
c000b9e5:	83 c2 0d             	add    edx,0xd
c000b9e8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b9ee:	52                   	push   edx
c000b9ef:	51                   	push   ecx
c000b9f0:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b9f3:	83 c4 10             	add    esp,0x10
c000b9f6:	83 c4 0c             	add    esp,0xc
c000b9f9:	c3                   	ret    

c000b9fa <File::chfatattr(unsigned char, unsigned char)>:
c000b9fa:	57                   	push   edi
c000b9fb:	b8 0b 00 00 00       	mov    eax,0xb
c000ba00:	56                   	push   esi
c000ba01:	53                   	push   ebx
c000ba02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ba0a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ba0e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba15:	83 f9 19             	cmp    ecx,0x19
c000ba18:	77 37                	ja     c000ba51 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba1a:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000ba21:	85 c9                	test   ecx,ecx
c000ba23:	74 2c                	je     c000ba51 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba25:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba2b:	85 c9                	test   ecx,ecx
c000ba2d:	74 22                	je     c000ba51 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba2f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba33:	b8 06 00 00 00       	mov    eax,0x6
c000ba38:	75 17                	jne    c000ba51 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba3a:	89 f0                	mov    eax,esi
c000ba3c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ba3e:	0f b6 db             	movzx  ebx,bl
c000ba41:	0f b6 f0             	movzx  esi,al
c000ba44:	83 c2 0d             	add    edx,0xd
c000ba47:	56                   	push   esi
c000ba48:	53                   	push   ebx
c000ba49:	52                   	push   edx
c000ba4a:	51                   	push   ecx
c000ba4b:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000ba4e:	83 c4 10             	add    esp,0x10
c000ba51:	5b                   	pop    ebx
c000ba52:	5e                   	pop    esi
c000ba53:	5f                   	pop    edi
c000ba54:	c3                   	ret    
c000ba55:	90                   	nop

c000ba56 <File::exists()>:
c000ba56:	83 ec 0c             	sub    esp,0xc
c000ba59:	31 c0                	xor    eax,eax
c000ba5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba5f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba66:	83 f9 19             	cmp    ecx,0x19
c000ba69:	77 24                	ja     c000ba8f <File::exists()+0x39>
c000ba6b:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000ba72:	85 c9                	test   ecx,ecx
c000ba74:	74 19                	je     c000ba8f <File::exists()+0x39>
c000ba76:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba7c:	85 c9                	test   ecx,ecx
c000ba7e:	74 0f                	je     c000ba8f <File::exists()+0x39>
c000ba80:	50                   	push   eax
c000ba81:	83 c2 0d             	add    edx,0xd
c000ba84:	50                   	push   eax
c000ba85:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba87:	52                   	push   edx
c000ba88:	51                   	push   ecx
c000ba89:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000ba8c:	83 c4 10             	add    esp,0x10
c000ba8f:	83 c4 0c             	add    esp,0xc
c000ba92:	c3                   	ret    
c000ba93:	90                   	nop

c000ba94 <File::stat(unsigned long long*, bool*)>:
c000ba94:	56                   	push   esi
c000ba95:	53                   	push   ebx
c000ba96:	50                   	push   eax
c000ba97:	b8 0b 00 00 00       	mov    eax,0xb
c000ba9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000baa0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000baa4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000baa8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baaf:	83 f9 19             	cmp    ecx,0x19
c000bab2:	77 3d                	ja     c000baf1 <File::stat(unsigned long long*, bool*)+0x5d>
c000bab4:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000babb:	85 c9                	test   ecx,ecx
c000babd:	74 32                	je     c000baf1 <File::stat(unsigned long long*, bool*)+0x5d>
c000babf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bac5:	85 c9                	test   ecx,ecx
c000bac7:	74 28                	je     c000baf1 <File::stat(unsigned long long*, bool*)+0x5d>
c000bac9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bacd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bacf:	74 13                	je     c000bae4 <File::stat(unsigned long long*, bool*)+0x50>
c000bad1:	83 ec 04             	sub    esp,0x4
c000bad4:	56                   	push   esi
c000bad5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000badb:	51                   	push   ecx
c000badc:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000badf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bae2:	eb 0a                	jmp    c000baee <File::stat(unsigned long long*, bool*)+0x5a>
c000bae4:	53                   	push   ebx
c000bae5:	83 c2 0d             	add    edx,0xd
c000bae8:	56                   	push   esi
c000bae9:	52                   	push   edx
c000baea:	51                   	push   ecx
c000baeb:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000baee:	83 c4 10             	add    esp,0x10
c000baf1:	5a                   	pop    edx
c000baf2:	5b                   	pop    ebx
c000baf3:	5e                   	pop    esi
c000baf4:	c3                   	ret    

c000baf5 <Fs::setcwd(Process*, char*)>:
c000baf5:	55                   	push   ebp
c000baf6:	57                   	push   edi
c000baf7:	56                   	push   esi
c000baf8:	53                   	push   ebx
c000baf9:	81 ec 20 02 00 00    	sub    esp,0x220
c000baff:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000bb06:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bb0c:	57                   	push   edi
c000bb0d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bb14:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bb18:	56                   	push   esi
c000bb19:	e8 dc f9 ff ff       	call   c000b4fa <Fs::standardiseFiles(char*, char const*, char const*)>
c000bb1e:	89 34 24             	mov    DWORD PTR [esp],esi
c000bb21:	e8 5a 4a ff ff       	call   c0000580 <strlen>
c000bb26:	83 c4 10             	add    esp,0x10
c000bb29:	83 f8 02             	cmp    eax,0x2
c000bb2c:	77 15                	ja     c000bb43 <Fs::setcwd(Process*, char*)+0x4e>
c000bb2e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bb33:	83 eb 41             	sub    ebx,0x41
c000bb36:	8b 04 9d e0 94 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6b20]
c000bb3d:	85 c0                	test   eax,eax
c000bb3f:	75 1c                	jne    c000bb5d <Fs::setcwd(Process*, char*)+0x68>
c000bb41:	eb 2f                	jmp    c000bb72 <Fs::setcwd(Process*, char*)+0x7d>
c000bb43:	83 ec 0c             	sub    esp,0xc
c000bb46:	56                   	push   esi
c000bb47:	e8 34 4a ff ff       	call   c0000580 <strlen>
c000bb4c:	83 c4 10             	add    esp,0x10
c000bb4f:	83 f8 03             	cmp    eax,0x3
c000bb52:	75 57                	jne    c000bbab <Fs::setcwd(Process*, char*)+0xb6>
c000bb54:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bb59:	75 50                	jne    c000bbab <Fs::setcwd(Process*, char*)+0xb6>
c000bb5b:	eb d1                	jmp    c000bb2e <Fs::setcwd(Process*, char*)+0x39>
c000bb5d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bb64:	75 0c                	jne    c000bb72 <Fs::setcwd(Process*, char*)+0x7d>
c000bb66:	83 ec 0c             	sub    esp,0xc
c000bb69:	50                   	push   eax
c000bb6a:	e8 9d 1d 00 00       	call   c000d90c <LogicalDisk::mount()>
c000bb6f:	83 c4 10             	add    esp,0x10
c000bb72:	83 fb 19             	cmp    ebx,0x19
c000bb75:	b8 03 00 00 00       	mov    eax,0x3
c000bb7a:	0f 87 c6 00 00 00    	ja     c000bc46 <Fs::setcwd(Process*, char*)+0x151>
c000bb80:	8b 14 9d e0 94 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6b20]
c000bb87:	b8 05 00 00 00       	mov    eax,0x5
c000bb8c:	85 d2                	test   edx,edx
c000bb8e:	0f 84 b2 00 00 00    	je     c000bc46 <Fs::setcwd(Process*, char*)+0x151>
c000bb94:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bb9b:	b8 06 00 00 00       	mov    eax,0x6
c000bba0:	0f 85 92 00 00 00    	jne    c000bc38 <Fs::setcwd(Process*, char*)+0x143>
c000bba6:	e9 9b 00 00 00       	jmp    c000bc46 <Fs::setcwd(Process*, char*)+0x151>
c000bbab:	83 ec 0c             	sub    esp,0xc
c000bbae:	68 14 01 00 00       	push   0x114
c000bbb3:	e8 1b bf ff ff       	call   c0007ad3 <malloc>
c000bbb8:	83 c4 0c             	add    esp,0xc
c000bbbb:	55                   	push   ebp
c000bbbc:	56                   	push   esi
c000bbbd:	50                   	push   eax
c000bbbe:	89 c3                	mov    ebx,eax
c000bbc0:	e8 11 fb ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c000bbc5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bbca:	83 c4 0c             	add    esp,0xc
c000bbcd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bbd1:	50                   	push   eax
c000bbd2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bbd6:	50                   	push   eax
c000bbd7:	53                   	push   ebx
c000bbd8:	e8 b7 fe ff ff       	call   c000ba94 <File::stat(unsigned long long*, bool*)>
c000bbdd:	83 c4 10             	add    esp,0x10
c000bbe0:	83 f8 02             	cmp    eax,0x2
c000bbe3:	74 27                	je     c000bc0c <Fs::setcwd(Process*, char*)+0x117>
c000bbe5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bbea:	75 1c                	jne    c000bc08 <Fs::setcwd(Process*, char*)+0x113>
c000bbec:	85 db                	test   ebx,ebx
c000bbee:	b8 02 00 00 00       	mov    eax,0x2
c000bbf3:	74 51                	je     c000bc46 <Fs::setcwd(Process*, char*)+0x151>
c000bbf5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbf7:	83 ec 0c             	sub    esp,0xc
c000bbfa:	53                   	push   ebx
c000bbfb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bbfe:	83 c4 10             	add    esp,0x10
c000bc01:	b8 02 00 00 00       	mov    eax,0x2
c000bc06:	eb 3e                	jmp    c000bc46 <Fs::setcwd(Process*, char*)+0x151>
c000bc08:	85 c0                	test   eax,eax
c000bc0a:	74 1c                	je     c000bc28 <Fs::setcwd(Process*, char*)+0x133>
c000bc0c:	85 db                	test   ebx,ebx
c000bc0e:	b8 01 00 00 00       	mov    eax,0x1
c000bc13:	74 31                	je     c000bc46 <Fs::setcwd(Process*, char*)+0x151>
c000bc15:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc17:	83 ec 0c             	sub    esp,0xc
c000bc1a:	53                   	push   ebx
c000bc1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc1e:	83 c4 10             	add    esp,0x10
c000bc21:	b8 01 00 00 00       	mov    eax,0x1
c000bc26:	eb 1e                	jmp    c000bc46 <Fs::setcwd(Process*, char*)+0x151>
c000bc28:	85 db                	test   ebx,ebx
c000bc2a:	74 0c                	je     c000bc38 <Fs::setcwd(Process*, char*)+0x143>
c000bc2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc2e:	83 ec 0c             	sub    esp,0xc
c000bc31:	53                   	push   ebx
c000bc32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc35:	83 c4 10             	add    esp,0x10
c000bc38:	50                   	push   eax
c000bc39:	50                   	push   eax
c000bc3a:	56                   	push   esi
c000bc3b:	57                   	push   edi
c000bc3c:	e8 0f 4a ff ff       	call   c0000650 <strcpy>
c000bc41:	83 c4 10             	add    esp,0x10
c000bc44:	31 c0                	xor    eax,eax
c000bc46:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bc4c:	5b                   	pop    ebx
c000bc4d:	5e                   	pop    esi
c000bc4e:	5f                   	pop    edi
c000bc4f:	5d                   	pop    ebp
c000bc50:	c3                   	ret    
c000bc51:	90                   	nop

c000bc52 <Directory::Directory(char const*, Process*)>:
c000bc52:	83 ec 0c             	sub    esp,0xc
c000bc55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc59:	83 ec 08             	sub    esp,0x8
c000bc5c:	6a 00                	push   0x0
c000bc5e:	50                   	push   eax
c000bc5f:	e8 42 d5 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bc64:	83 c4 10             	add    esp,0x10
c000bc67:	ba a0 12 02 c0       	mov    edx,0xc00212a0
c000bc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc70:	89 10                	mov    DWORD PTR [eax],edx
c000bc72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bc76:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000bc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc80:	83 c0 0d             	add    eax,0xd
c000bc83:	83 ec 04             	sub    esp,0x4
c000bc86:	52                   	push   edx
c000bc87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc8b:	50                   	push   eax
c000bc8c:	e8 69 f8 ff ff       	call   c000b4fa <Fs::standardiseFiles(char*, char const*, char const*)>
c000bc91:	83 c4 10             	add    esp,0x10
c000bc94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc98:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bc9b:	83 e8 41             	sub    eax,0x41
c000bc9e:	88 c2                	mov    dl,al
c000bca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bcaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcae:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bcbc:	0f b6 c0             	movzx  eax,al
c000bcbf:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bcc6:	85 c0                	test   eax,eax
c000bcc8:	74 3e                	je     c000bd08 <Directory::Directory(char const*, Process*)+0xb6>
c000bcca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcce:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bcd4:	0f b6 c0             	movzx  eax,al
c000bcd7:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bcde:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bce4:	85 c0                	test   eax,eax
c000bce6:	75 20                	jne    c000bd08 <Directory::Directory(char const*, Process*)+0xb6>
c000bce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcec:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bcf2:	0f b6 c0             	movzx  eax,al
c000bcf5:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bcfc:	83 ec 0c             	sub    esp,0xc
c000bcff:	50                   	push   eax
c000bd00:	e8 07 1c 00 00       	call   c000d90c <LogicalDisk::mount()>
c000bd05:	83 c4 10             	add    esp,0x10
c000bd08:	90                   	nop
c000bd09:	83 c4 0c             	add    esp,0xc
c000bd0c:	c3                   	ret    
c000bd0d:	90                   	nop

c000bd0e <Directory::open()>:
c000bd0e:	53                   	push   ebx
c000bd0f:	b8 0b 00 00 00       	mov    eax,0xb
c000bd14:	83 ec 08             	sub    esp,0x8
c000bd17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd1b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bd22:	83 fa 19             	cmp    edx,0x19
c000bd25:	77 3d                	ja     c000bd64 <Directory::open()+0x56>
c000bd27:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000bd2e:	85 d2                	test   edx,edx
c000bd30:	74 32                	je     c000bd64 <Directory::open()+0x56>
c000bd32:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd38:	85 d2                	test   edx,edx
c000bd3a:	74 28                	je     c000bd64 <Directory::open()+0x56>
c000bd3c:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bd40:	b8 06 00 00 00       	mov    eax,0x6
c000bd45:	75 1d                	jne    c000bd64 <Directory::open()+0x56>
c000bd47:	50                   	push   eax
c000bd48:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd4a:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bd50:	51                   	push   ecx
c000bd51:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bd54:	51                   	push   ecx
c000bd55:	52                   	push   edx
c000bd56:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bd59:	83 c4 10             	add    esp,0x10
c000bd5c:	85 c0                	test   eax,eax
c000bd5e:	75 04                	jne    c000bd64 <Directory::open()+0x56>
c000bd60:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bd64:	83 c4 08             	add    esp,0x8
c000bd67:	5b                   	pop    ebx
c000bd68:	c3                   	ret    
c000bd69:	90                   	nop

c000bd6a <Directory::close()>:
c000bd6a:	53                   	push   ebx
c000bd6b:	b8 0b 00 00 00       	mov    eax,0xb
c000bd70:	83 ec 08             	sub    esp,0x8
c000bd73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd77:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd7e:	83 f9 19             	cmp    ecx,0x19
c000bd81:	77 41                	ja     c000bdc4 <Directory::close()+0x5a>
c000bd83:	8b 1c 8d e0 94 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bd8a:	85 db                	test   ebx,ebx
c000bd8c:	74 36                	je     c000bdc4 <Directory::close()+0x5a>
c000bd8e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bd95:	74 2d                	je     c000bdc4 <Directory::close()+0x5a>
c000bd97:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd9b:	b8 05 00 00 00       	mov    eax,0x5
c000bda0:	74 22                	je     c000bdc4 <Directory::close()+0x5a>
c000bda2:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bda6:	8b 04 8d e0 94 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6b20]
c000bdad:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bdb3:	53                   	push   ebx
c000bdb4:	53                   	push   ebx
c000bdb5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bdb7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bdbd:	50                   	push   eax
c000bdbe:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bdc1:	83 c4 10             	add    esp,0x10
c000bdc4:	83 c4 08             	add    esp,0x8
c000bdc7:	5b                   	pop    ebx
c000bdc8:	c3                   	ret    
c000bdc9:	90                   	nop

c000bdca <Directory::unlink()>:
c000bdca:	83 ec 0c             	sub    esp,0xc
c000bdcd:	b8 0b 00 00 00       	mov    eax,0xb
c000bdd2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdd6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bddd:	83 f9 19             	cmp    ecx,0x19
c000bde0:	77 2f                	ja     c000be11 <Directory::unlink()+0x47>
c000bde2:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bde9:	85 c9                	test   ecx,ecx
c000bdeb:	74 24                	je     c000be11 <Directory::unlink()+0x47>
c000bded:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdf3:	85 c9                	test   ecx,ecx
c000bdf5:	74 1a                	je     c000be11 <Directory::unlink()+0x47>
c000bdf7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdfb:	b8 06 00 00 00       	mov    eax,0x6
c000be00:	75 0f                	jne    c000be11 <Directory::unlink()+0x47>
c000be02:	50                   	push   eax
c000be03:	83 c2 0d             	add    edx,0xd
c000be06:	50                   	push   eax
c000be07:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be09:	52                   	push   edx
c000be0a:	51                   	push   ecx
c000be0b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000be0e:	83 c4 10             	add    esp,0x10
c000be11:	83 c4 0c             	add    esp,0xc
c000be14:	c3                   	ret    
c000be15:	90                   	nop

c000be16 <Directory::rename(char const*)>:
c000be16:	83 ec 0c             	sub    esp,0xc
c000be19:	b8 0b 00 00 00       	mov    eax,0xb
c000be1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be22:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be29:	83 f9 19             	cmp    ecx,0x19
c000be2c:	77 32                	ja     c000be60 <Directory::rename(char const*)+0x4a>
c000be2e:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000be35:	85 c9                	test   ecx,ecx
c000be37:	74 27                	je     c000be60 <Directory::rename(char const*)+0x4a>
c000be39:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be3f:	85 c9                	test   ecx,ecx
c000be41:	74 1d                	je     c000be60 <Directory::rename(char const*)+0x4a>
c000be43:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be47:	b8 06 00 00 00       	mov    eax,0x6
c000be4c:	75 12                	jne    c000be60 <Directory::rename(char const*)+0x4a>
c000be4e:	50                   	push   eax
c000be4f:	83 c2 0d             	add    edx,0xd
c000be52:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be58:	52                   	push   edx
c000be59:	51                   	push   ecx
c000be5a:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be5d:	83 c4 10             	add    esp,0x10
c000be60:	83 c4 0c             	add    esp,0xc
c000be63:	c3                   	ret    

c000be64 <Directory::exists()>:
c000be64:	83 ec 0c             	sub    esp,0xc
c000be67:	31 c0                	xor    eax,eax
c000be69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be6d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be74:	83 f9 19             	cmp    ecx,0x19
c000be77:	77 24                	ja     c000be9d <Directory::exists()+0x39>
c000be79:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000be80:	85 c9                	test   ecx,ecx
c000be82:	74 19                	je     c000be9d <Directory::exists()+0x39>
c000be84:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be8a:	85 c9                	test   ecx,ecx
c000be8c:	74 0f                	je     c000be9d <Directory::exists()+0x39>
c000be8e:	50                   	push   eax
c000be8f:	83 c2 0d             	add    edx,0xd
c000be92:	50                   	push   eax
c000be93:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be95:	52                   	push   edx
c000be96:	51                   	push   ecx
c000be97:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be9a:	83 c4 10             	add    esp,0x10
c000be9d:	83 c4 0c             	add    esp,0xc
c000bea0:	c3                   	ret    
c000bea1:	90                   	nop

c000bea2 <Directory::read(dirent*)>:
c000bea2:	83 ec 1c             	sub    esp,0x1c
c000bea5:	b8 0b 00 00 00       	mov    eax,0xb
c000beaa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000beae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000beb5:	83 f9 19             	cmp    ecx,0x19
c000beb8:	77 30                	ja     c000beea <Directory::read(dirent*)+0x48>
c000beba:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bec1:	85 c9                	test   ecx,ecx
c000bec3:	74 25                	je     c000beea <Directory::read(dirent*)+0x48>
c000bec5:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000becc:	74 1c                	je     c000beea <Directory::read(dirent*)+0x48>
c000bece:	83 ec 0c             	sub    esp,0xc
c000bed1:	8b 02                	mov    eax,DWORD PTR [edx]
c000bed3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000bed7:	51                   	push   ecx
c000bed8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bedc:	6a 00                	push   0x0
c000bede:	68 10 01 00 00       	push   0x110
c000bee3:	52                   	push   edx
c000bee4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bee7:	83 c4 20             	add    esp,0x20
c000beea:	83 c4 1c             	add    esp,0x1c
c000beed:	c3                   	ret    

c000beee <Directory::create()>:
c000beee:	83 ec 0c             	sub    esp,0xc
c000bef1:	b8 0b 00 00 00       	mov    eax,0xb
c000bef6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000befa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf01:	83 f9 19             	cmp    ecx,0x19
c000bf04:	77 2f                	ja     c000bf35 <Directory::create()+0x47>
c000bf06:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bf0d:	85 c9                	test   ecx,ecx
c000bf0f:	74 24                	je     c000bf35 <Directory::create()+0x47>
c000bf11:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf17:	85 c9                	test   ecx,ecx
c000bf19:	74 1a                	je     c000bf35 <Directory::create()+0x47>
c000bf1b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf1f:	b8 06 00 00 00       	mov    eax,0x6
c000bf24:	75 0f                	jne    c000bf35 <Directory::create()+0x47>
c000bf26:	50                   	push   eax
c000bf27:	83 c2 0d             	add    edx,0xd
c000bf2a:	50                   	push   eax
c000bf2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf2d:	52                   	push   edx
c000bf2e:	51                   	push   ecx
c000bf2f:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000bf32:	83 c4 10             	add    esp,0x10
c000bf35:	83 c4 0c             	add    esp,0xc
c000bf38:	c3                   	ret    
c000bf39:	90                   	nop

c000bf3a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000bf3a:	b8 0a 00 00 00       	mov    eax,0xa
c000bf3f:	c3                   	ret    

c000bf40 <Bus::Bus(char const*)>:
c000bf40:	83 ec 0c             	sub    esp,0xc
c000bf43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf47:	83 ec 08             	sub    esp,0x8
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	50                   	push   eax
c000bf4f:	e8 28 08 00 00       	call   c000c77c <Device::Device(char const*)>
c000bf54:	83 c4 10             	add    esp,0x10
c000bf57:	ba bc 12 02 c0       	mov    edx,0xc00212bc
c000bf5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf60:	89 10                	mov    DWORD PTR [eax],edx
c000bf62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf66:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000bf70:	90                   	nop
c000bf71:	83 c4 0c             	add    esp,0xc
c000bf74:	c3                   	ret    
c000bf75:	90                   	nop
c000bf76:	66 90                	xchg   ax,ax

c000bf78 <Bus::~Bus()>:
c000bf78:	83 ec 0c             	sub    esp,0xc
c000bf7b:	ba bc 12 02 c0       	mov    edx,0xc00212bc
c000bf80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf84:	89 10                	mov    DWORD PTR [eax],edx
c000bf86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8a:	83 ec 0c             	sub    esp,0xc
c000bf8d:	50                   	push   eax
c000bf8e:	e8 53 05 00 00       	call   c000c4e6 <Device::~Device()>
c000bf93:	83 c4 10             	add    esp,0x10
c000bf96:	90                   	nop
c000bf97:	83 c4 0c             	add    esp,0xc
c000bf9a:	c3                   	ret    
c000bf9b:	90                   	nop

c000bf9c <Bus::~Bus()>:
c000bf9c:	83 ec 0c             	sub    esp,0xc
c000bf9f:	83 ec 0c             	sub    esp,0xc
c000bfa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfa6:	e8 cd ff ff ff       	call   c000bf78 <Bus::~Bus()>
c000bfab:	83 c4 10             	add    esp,0x10
c000bfae:	83 ec 08             	sub    esp,0x8
c000bfb1:	68 58 01 00 00       	push   0x158
c000bfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfba:	e8 4d e8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000bfbf:	83 c4 10             	add    esp,0x10
c000bfc2:	83 c4 0c             	add    esp,0xc
c000bfc5:	c3                   	ret    

c000bfc6 <beepThread(void*)>:
c000bfc6:	83 ec 0c             	sub    esp,0xc
c000bfc9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000bfce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfd2:	48                   	dec    eax
c000bfd3:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000bfd8:	75 01                	jne    c000bfdb <beepThread(void*)+0x15>
c000bfda:	fb                   	sti    
c000bfdb:	6b c2 0a             	imul   eax,edx,0xa
c000bfde:	83 ec 0c             	sub    esp,0xc
c000bfe1:	50                   	push   eax
c000bfe2:	e8 95 9d 00 00       	call   c0015d7c <milliTenthSleep(unsigned int)>
c000bfe7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000bfee:	e8 e2 bc 00 00       	call   c0017cd5 <HalMakeBeep(int)>
c000bff3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000bffb:	83 c4 1c             	add    esp,0x1c
c000bffe:	e9 5d 9c 00 00       	jmp    c0015c60 <blockTask(TaskState)>

c000c003 <Krnl::beep(int, int, bool)>:
c000c003:	56                   	push   esi
c000c004:	53                   	push   ebx
c000c005:	83 ec 10             	sub    esp,0x10
c000c008:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c00c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c014:	e8 bc bc 00 00       	call   c0017cd5 <HalMakeBeep(int)>
c000c019:	89 f0                	mov    eax,esi
c000c01b:	83 c4 10             	add    esp,0x10
c000c01e:	84 c0                	test   al,al
c000c020:	74 1e                	je     c000c040 <Krnl::beep(int, int, bool)+0x3d>
c000c022:	6b db 0a             	imul   ebx,ebx,0xa
c000c025:	83 ec 0c             	sub    esp,0xc
c000c028:	53                   	push   ebx
c000c029:	e8 4e 9d 00 00       	call   c0015d7c <milliTenthSleep(unsigned int)>
c000c02e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c036:	83 c4 14             	add    esp,0x14
c000c039:	5b                   	pop    ebx
c000c03a:	5e                   	pop    esi
c000c03b:	e9 95 bc 00 00       	jmp    c0017cd5 <HalMakeBeep(int)>
c000c040:	68 e6 00 00 00       	push   0xe6
c000c045:	53                   	push   ebx
c000c046:	68 c6 bf 00 c0       	push   0xc000bfc6
c000c04b:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000c051:	e8 be 97 00 00       	call   c0015814 <Process::createThread(void (*)(void*), void*, int)>
c000c056:	83 c4 14             	add    esp,0x14
c000c059:	5b                   	pop    ebx
c000c05a:	5e                   	pop    esi
c000c05b:	c3                   	ret    

c000c05c <User::loadClockSettings(int)>:
c000c05c:	53                   	push   ebx
c000c05d:	83 ec 14             	sub    esp,0x14
c000c060:	68 14 01 00 00       	push   0x114
c000c065:	e8 69 ba ff ff       	call   c0007ad3 <malloc>
c000c06a:	83 c4 0c             	add    esp,0xc
c000c06d:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000c073:	68 e0 12 02 c0       	push   0xc00212e0
c000c078:	50                   	push   eax
c000c079:	89 c3                	mov    ebx,eax
c000c07b:	e8 56 f6 ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c000c080:	58                   	pop    eax
c000c081:	5a                   	pop    edx
c000c082:	6a 01                	push   0x1
c000c084:	53                   	push   ebx
c000c085:	e8 08 f7 ff ff       	call   c000b792 <File::open(FileOpenMode)>
c000c08a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c08d:	e8 5e f7 ff ff       	call   c000b7f0 <File::close()>
c000c092:	83 c4 10             	add    esp,0x10
c000c095:	85 db                	test   ebx,ebx
c000c097:	74 0f                	je     c000c0a8 <User::loadClockSettings(int)+0x4c>
c000c099:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c09b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c09f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c0a2:	83 c4 08             	add    esp,0x8
c000c0a5:	5b                   	pop    ebx
c000c0a6:	ff e0                	jmp    eax
c000c0a8:	83 c4 08             	add    esp,0x8
c000c0ab:	5b                   	pop    ebx
c000c0ac:	c3                   	ret    
c000c0ad:	90                   	nop

c000c0ae <Clock::Clock(char const*)>:
c000c0ae:	83 ec 0c             	sub    esp,0xc
c000c0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b5:	83 ec 08             	sub    esp,0x8
c000c0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0bc:	50                   	push   eax
c000c0bd:	e8 ba 06 00 00       	call   c000c77c <Device::Device(char const*)>
c000c0c2:	83 c4 10             	add    esp,0x10
c000c0c5:	ba 08 13 02 c0       	mov    edx,0xc0021308
c000c0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ce:	89 10                	mov    DWORD PTR [eax],edx
c000c0d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c0de:	90                   	nop
c000c0df:	83 c4 0c             	add    esp,0xc
c000c0e2:	c3                   	ret    
c000c0e3:	90                   	nop

c000c0e4 <Clock::~Clock()>:
c000c0e4:	83 ec 0c             	sub    esp,0xc
c000c0e7:	ba 08 13 02 c0       	mov    edx,0xc0021308
c000c0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f0:	89 10                	mov    DWORD PTR [eax],edx
c000c0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f6:	83 ec 0c             	sub    esp,0xc
c000c0f9:	50                   	push   eax
c000c0fa:	e8 e7 03 00 00       	call   c000c4e6 <Device::~Device()>
c000c0ff:	83 c4 10             	add    esp,0x10
c000c102:	90                   	nop
c000c103:	83 c4 0c             	add    esp,0xc
c000c106:	c3                   	ret    
c000c107:	90                   	nop

c000c108 <Clock::~Clock()>:
c000c108:	83 ec 0c             	sub    esp,0xc
c000c10b:	83 ec 0c             	sub    esp,0xc
c000c10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c112:	e8 cd ff ff ff       	call   c000c0e4 <Clock::~Clock()>
c000c117:	83 c4 10             	add    esp,0x10
c000c11a:	83 ec 08             	sub    esp,0x8
c000c11d:	68 58 01 00 00       	push   0x158
c000c122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c126:	e8 e1 e6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c12b:	83 c4 10             	add    esp,0x10
c000c12e:	83 c4 0c             	add    esp,0xc
c000c131:	c3                   	ret    

c000c132 <Clock::timeInSecondsLocal()>:
c000c132:	53                   	push   ebx
c000c133:	83 ec 14             	sub    esp,0x14
c000c136:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c13a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c13c:	50                   	push   eax
c000c13d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c140:	0f b6 0d 68 70 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027068
c000c147:	03 0d 6c 70 02 c0    	add    ecx,DWORD PTR ds:0xc002706c
c000c14d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c153:	89 cb                	mov    ebx,ecx
c000c155:	c1 fb 1f             	sar    ebx,0x1f
c000c158:	01 c8                	add    eax,ecx
c000c15a:	11 da                	adc    edx,ebx
c000c15c:	83 c4 10             	add    esp,0x10
c000c15f:	31 c9                	xor    ecx,ecx
c000c161:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c168:	74 05                	je     c000c16f <Clock::timeInSecondsLocal()+0x3d>
c000c16a:	b9 08 07 00 00       	mov    ecx,0x708
c000c16f:	31 db                	xor    ebx,ebx
c000c171:	01 c8                	add    eax,ecx
c000c173:	11 da                	adc    edx,ebx
c000c175:	83 c4 08             	add    esp,0x8
c000c178:	5b                   	pop    ebx
c000c179:	c3                   	ret    

c000c17a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c17a:	57                   	push   edi
c000c17b:	56                   	push   esi
c000c17c:	53                   	push   ebx
c000c17d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c181:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c185:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c189:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c18b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c18e:	0f b6 05 68 70 02 c0 	movzx  eax,BYTE PTR ds:0xc0027068
c000c195:	03 05 6c 70 02 c0    	add    eax,DWORD PTR ds:0xc002706c
c000c19b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c1a1:	99                   	cdq    
c000c1a2:	29 c6                	sub    esi,eax
c000c1a4:	19 d7                	sbb    edi,edx
c000c1a6:	89 f0                	mov    eax,esi
c000c1a8:	31 f6                	xor    esi,esi
c000c1aa:	89 fa                	mov    edx,edi
c000c1ac:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c1b3:	74 05                	je     c000c1ba <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c1b5:	be 08 07 00 00       	mov    esi,0x708
c000c1ba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c1be:	31 ff                	xor    edi,edi
c000c1c0:	29 f0                	sub    eax,esi
c000c1c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c6:	19 fa                	sbb    edx,edi
c000c1c8:	89 d8                	mov    eax,ebx
c000c1ca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ce:	5b                   	pop    ebx
c000c1cf:	5e                   	pop    esi
c000c1d0:	5f                   	pop    edi
c000c1d1:	ff e0                	jmp    eax

c000c1d3 <datetimeToSeconds(datetime_t)>:
c000c1d3:	55                   	push   ebp
c000c1d4:	57                   	push   edi
c000c1d5:	56                   	push   esi
c000c1d6:	53                   	push   ebx
c000c1d7:	83 ec 0c             	sub    esp,0xc
c000c1da:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c1de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c1e2:	89 f7                	mov    edi,esi
c000c1e4:	89 f0                	mov    eax,esi
c000c1e6:	0f b6 cf             	movzx  ecx,bh
c000c1e9:	0f b6 c4             	movzx  eax,ah
c000c1ec:	c1 ef 10             	shr    edi,0x10
c000c1ef:	89 da                	mov    edx,ebx
c000c1f1:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c1f4:	89 f9                	mov    ecx,edi
c000c1f6:	0f b6 f9             	movzx  edi,cl
c000c1f9:	89 f1                	mov    ecx,esi
c000c1fb:	6b c0 3c             	imul   eax,eax,0x3c
c000c1fe:	0f b6 f1             	movzx  esi,cl
c000c201:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c207:	0f b6 db             	movzx  ebx,bl
c000c20a:	c1 ea 10             	shr    edx,0x10
c000c20d:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c213:	01 f8                	add    eax,edi
c000c215:	01 f0                	add    eax,esi
c000c217:	89 04 24             	mov    DWORD PTR [esp],eax
c000c21a:	c1 f8 1f             	sar    eax,0x1f
c000c21d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c221:	89 e8                	mov    eax,ebp
c000c223:	0f b6 c0             	movzx  eax,al
c000c226:	8b 0c 85 40 13 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdecc0]
c000c22d:	83 f8 01             	cmp    eax,0x1
c000c230:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c234:	0f b7 da             	movzx  ebx,dx
c000c237:	76 27                	jbe    c000c260 <datetimeToSeconds(datetime_t)+0x8d>
c000c239:	80 e2 03             	and    dl,0x3
c000c23c:	75 22                	jne    c000c260 <datetimeToSeconds(datetime_t)+0x8d>
c000c23e:	31 d2                	xor    edx,edx
c000c240:	be 64 00 00 00       	mov    esi,0x64
c000c245:	89 d8                	mov    eax,ebx
c000c247:	f7 f6                	div    esi
c000c249:	85 d2                	test   edx,edx
c000c24b:	75 12                	jne    c000c25f <datetimeToSeconds(datetime_t)+0x8c>
c000c24d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c253:	be 90 01 00 00       	mov    esi,0x190
c000c258:	99                   	cdq    
c000c259:	f7 fe                	idiv   esi
c000c25b:	85 d2                	test   edx,edx
c000c25d:	75 01                	jne    c000c260 <datetimeToSeconds(datetime_t)+0x8d>
c000c25f:	41                   	inc    ecx
c000c260:	83 fb 46             	cmp    ebx,0x46
c000c263:	76 48                	jbe    c000c2ad <datetimeToSeconds(datetime_t)+0xda>
c000c265:	be 46 00 00 00       	mov    esi,0x46
c000c26a:	bf 64 00 00 00       	mov    edi,0x64
c000c26f:	bd 90 01 00 00       	mov    ebp,0x190
c000c274:	f7 c6 03 00 00 00    	test   esi,0x3
c000c27a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c27f:	75 23                	jne    c000c2a4 <datetimeToSeconds(datetime_t)+0xd1>
c000c281:	89 f0                	mov    eax,esi
c000c283:	99                   	cdq    
c000c284:	f7 ff                	idiv   edi
c000c286:	b8 6e 01 00 00       	mov    eax,0x16e
c000c28b:	85 d2                	test   edx,edx
c000c28d:	75 15                	jne    c000c2a4 <datetimeToSeconds(datetime_t)+0xd1>
c000c28f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c295:	99                   	cdq    
c000c296:	f7 fd                	idiv   ebp
c000c298:	83 fa 01             	cmp    edx,0x1
c000c29b:	19 c0                	sbb    eax,eax
c000c29d:	f7 d0                	not    eax
c000c29f:	05 6e 01 00 00       	add    eax,0x16e
c000c2a4:	46                   	inc    esi
c000c2a5:	01 c1                	add    ecx,eax
c000c2a7:	39 de                	cmp    esi,ebx
c000c2a9:	7c c9                	jl     c000c274 <datetimeToSeconds(datetime_t)+0xa1>
c000c2ab:	eb 34                	jmp    c000c2e1 <datetimeToSeconds(datetime_t)+0x10e>
c000c2ad:	74 32                	je     c000c2e1 <datetimeToSeconds(datetime_t)+0x10e>
c000c2af:	b8 45 00 00 00       	mov    eax,0x45
c000c2b4:	89 c2                	mov    edx,eax
c000c2b6:	83 e2 03             	and    edx,0x3
c000c2b9:	39 d8                	cmp    eax,ebx
c000c2bb:	7e 0f                	jle    c000c2cc <datetimeToSeconds(datetime_t)+0xf9>
c000c2bd:	83 fa 01             	cmp    edx,0x1
c000c2c0:	19 d2                	sbb    edx,edx
c000c2c2:	48                   	dec    eax
c000c2c3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c2ca:	eb e8                	jmp    c000c2b4 <datetimeToSeconds(datetime_t)+0xe1>
c000c2cc:	85 d2                	test   edx,edx
c000c2ce:	b8 6d 01 00 00       	mov    eax,0x16d
c000c2d3:	75 0a                	jne    c000c2df <datetimeToSeconds(datetime_t)+0x10c>
c000c2d5:	83 fb 01             	cmp    ebx,0x1
c000c2d8:	19 c0                	sbb    eax,eax
c000c2da:	05 6e 01 00 00       	add    eax,0x16e
c000c2df:	29 c1                	sub    ecx,eax
c000c2e1:	b8 80 51 01 00       	mov    eax,0x15180
c000c2e6:	f7 e9                	imul   ecx
c000c2e8:	03 04 24             	add    eax,DWORD PTR [esp]
c000c2eb:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c2ef:	83 c4 0c             	add    esp,0xc
c000c2f2:	5b                   	pop    ebx
c000c2f3:	5e                   	pop    esi
c000c2f4:	5f                   	pop    edi
c000c2f5:	5d                   	pop    ebp
c000c2f6:	c3                   	ret    
c000c2f7:	90                   	nop

c000c2f8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c2f8:	57                   	push   edi
c000c2f9:	56                   	push   esi
c000c2fa:	53                   	push   ebx
c000c2fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c2ff:	8b 06                	mov    eax,DWORD PTR [esi]
c000c301:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c304:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c308:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c30c:	e8 c2 fe ff ff       	call   c000c1d3 <datetimeToSeconds(datetime_t)>
c000c311:	59                   	pop    ecx
c000c312:	0f b6 0d 68 70 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027068
c000c319:	5b                   	pop    ebx
c000c31a:	03 0d 6c 70 02 c0    	add    ecx,DWORD PTR ds:0xc002706c
c000c320:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c326:	89 cb                	mov    ebx,ecx
c000c328:	c1 fb 1f             	sar    ebx,0x1f
c000c32b:	29 c8                	sub    eax,ecx
c000c32d:	19 da                	sbb    edx,ebx
c000c32f:	31 c9                	xor    ecx,ecx
c000c331:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c338:	74 05                	je     c000c33f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c33a:	b9 08 07 00 00       	mov    ecx,0x708
c000c33f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c343:	31 db                	xor    ebx,ebx
c000c345:	29 c8                	sub    eax,ecx
c000c347:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c34b:	19 da                	sbb    edx,ebx
c000c34d:	89 f8                	mov    eax,edi
c000c34f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c353:	5b                   	pop    ebx
c000c354:	5e                   	pop    esi
c000c355:	5f                   	pop    edi
c000c356:	ff e0                	jmp    eax

c000c358 <secondsToDatetime(unsigned long long)>:
c000c358:	55                   	push   ebp
c000c359:	57                   	push   edi
c000c35a:	56                   	push   esi
c000c35b:	53                   	push   ebx
c000c35c:	83 ec 1c             	sub    esp,0x1c
c000c35f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c363:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c367:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c36b:	6a 00                	push   0x0
c000c36d:	68 80 51 01 00       	push   0x15180
c000c372:	55                   	push   ebp
c000c373:	57                   	push   edi
c000c374:	e8 a7 2d 01 00       	call   c001f120 <__udivdi3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c380:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c386:	6a 00                	push   0x0
c000c388:	68 80 51 01 00       	push   0x15180
c000c38d:	55                   	push   ebp
c000c38e:	57                   	push   edi
c000c38f:	bf 10 0e 00 00       	mov    edi,0xe10
c000c394:	e8 87 2e 01 00       	call   c001f220 <__umoddi3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	99                   	cdq    
c000c39d:	f7 ff                	idiv   edi
c000c39f:	bf 3c 00 00 00       	mov    edi,0x3c
c000c3a4:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c3a7:	89 d0                	mov    eax,edx
c000c3a9:	99                   	cdq    
c000c3aa:	f7 ff                	idiv   edi
c000c3ac:	85 db                	test   ebx,ebx
c000c3ae:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c3b1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c3b4:	79 11                	jns    c000c3c7 <secondsToDatetime(unsigned long long)+0x6f>
c000c3b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c3ba:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c3c0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c3c5:	eb 07                	jmp    c000c3ce <secondsToDatetime(unsigned long long)+0x76>
c000c3c7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c3cc:	89 d8                	mov    eax,ebx
c000c3ce:	99                   	cdq    
c000c3cf:	bf b4 05 00 00       	mov    edi,0x5b4
c000c3d4:	f7 f9                	idiv   ecx
c000c3d6:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c3db:	31 d2                	xor    edx,edx
c000c3dd:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c3e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3e6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c3ee:	01 c3                	add    ebx,eax
c000c3f0:	89 d8                	mov    eax,ebx
c000c3f2:	f7 f1                	div    ecx
c000c3f4:	31 d2                	xor    edx,edx
c000c3f6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c3f9:	89 d8                	mov    eax,ebx
c000c3fb:	f7 f7                	div    edi
c000c3fd:	31 d2                	xor    edx,edx
c000c3ff:	29 c1                	sub    ecx,eax
c000c401:	89 d8                	mov    eax,ebx
c000c403:	f7 f5                	div    ebp
c000c405:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c40a:	31 d2                	xor    edx,edx
c000c40c:	29 c1                	sub    ecx,eax
c000c40e:	89 c8                	mov    eax,ecx
c000c410:	f7 f5                	div    ebp
c000c412:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c417:	31 d2                	xor    edx,edx
c000c419:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c41d:	89 c8                	mov    eax,ecx
c000c41f:	f7 f5                	div    ebp
c000c421:	31 d2                	xor    edx,edx
c000c423:	01 c3                	add    ebx,eax
c000c425:	89 c8                	mov    eax,ecx
c000c427:	f7 f7                	div    edi
c000c429:	bf 99 00 00 00       	mov    edi,0x99
c000c42e:	31 d2                	xor    edx,edx
c000c430:	29 c3                	sub    ebx,eax
c000c432:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c43a:	29 c3                	sub    ebx,eax
c000c43c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c43f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c442:	83 c1 02             	add    ecx,0x2
c000c445:	89 c8                	mov    eax,ecx
c000c447:	bb 05 00 00 00       	mov    ebx,0x5
c000c44c:	f7 f7                	div    edi
c000c44e:	31 d2                	xor    edx,edx
c000c450:	89 c7                	mov    edi,eax
c000c452:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c458:	83 c0 02             	add    eax,0x2
c000c45b:	f7 f3                	div    ebx
c000c45d:	89 eb                	mov    ebx,ebp
c000c45f:	29 c3                	sub    ebx,eax
c000c461:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c467:	88 1e                	mov    BYTE PTR [esi],bl
c000c469:	19 c0                	sbb    eax,eax
c000c46b:	31 d2                	xor    edx,edx
c000c46d:	83 e0 0c             	and    eax,0xc
c000c470:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c474:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c47c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c480:	83 f9 01             	cmp    ecx,0x1
c000c483:	0f 96 c2             	setbe  dl
c000c486:	41                   	inc    ecx
c000c487:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c48a:	01 d0                	add    eax,edx
c000c48c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c490:	83 c4 1c             	add    esp,0x1c
c000c493:	89 f0                	mov    eax,esi
c000c495:	5b                   	pop    ebx
c000c496:	5e                   	pop    esi
c000c497:	5f                   	pop    edi
c000c498:	5d                   	pop    ebp
c000c499:	c2 04 00             	ret    0x4

c000c49c <Clock::timeInDatetimeLocal()>:
c000c49c:	53                   	push   ebx
c000c49d:	83 ec 14             	sub    esp,0x14
c000c4a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c4a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c4a8:	e8 85 fc ff ff       	call   c000c132 <Clock::timeInSecondsLocal()>
c000c4ad:	83 c4 0c             	add    esp,0xc
c000c4b0:	52                   	push   edx
c000c4b1:	50                   	push   eax
c000c4b2:	53                   	push   ebx
c000c4b3:	e8 a0 fe ff ff       	call   c000c358 <secondsToDatetime(unsigned long long)>
c000c4b8:	89 d8                	mov    eax,ebx
c000c4ba:	83 c4 14             	add    esp,0x14
c000c4bd:	5b                   	pop    ebx
c000c4be:	c2 04 00             	ret    0x4
c000c4c1:	90                   	nop

c000c4c2 <Device::hibernate()>:
c000c4c2:	c3                   	ret    
c000c4c3:	90                   	nop

c000c4c4 <Device::wake()>:
c000c4c4:	c3                   	ret    
c000c4c5:	90                   	nop

c000c4c6 <Device::detect()>:
c000c4c6:	c3                   	ret    
c000c4c7:	90                   	nop

c000c4c8 <Device::disableLegacy()>:
c000c4c8:	c3                   	ret    
c000c4c9:	90                   	nop

c000c4ca <Device::powerSaving(PowerSavingLevel)>:
c000c4ca:	c3                   	ret    
c000c4cb:	90                   	nop

c000c4cc <DriverlessDevice::close(int, int, void*)>:
c000c4cc:	31 c0                	xor    eax,eax
c000c4ce:	c3                   	ret    
c000c4cf:	90                   	nop

c000c4d0 <DriverlessDevice::detect()>:
c000c4d0:	c3                   	ret    
c000c4d1:	90                   	nop

c000c4d2 <DriverlessDevice::open(int, int, void*)>:
c000c4d2:	83 ec 18             	sub    esp,0x18
c000c4d5:	68 70 13 02 c0       	push   0xc0021370
c000c4da:	e8 7e 4c 00 00       	call   c001115d <KePanic(char const*)>
c000c4df:	83 c8 ff             	or     eax,0xffffffff
c000c4e2:	83 c4 1c             	add    esp,0x1c
c000c4e5:	c3                   	ret    

c000c4e6 <Device::~Device()>:
c000c4e6:	ba d0 13 02 c0       	mov    edx,0xc00213d0
c000c4eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4ef:	89 10                	mov    DWORD PTR [eax],edx
c000c4f1:	90                   	nop
c000c4f2:	c3                   	ret    
c000c4f3:	90                   	nop

c000c4f4 <Device::~Device()>:
c000c4f4:	83 ec 0c             	sub    esp,0xc
c000c4f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c4fb:	e8 e6 ff ff ff       	call   c000c4e6 <Device::~Device()>
c000c500:	83 c4 04             	add    esp,0x4
c000c503:	83 ec 08             	sub    esp,0x8
c000c506:	68 58 01 00 00       	push   0x158
c000c50b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c50f:	e8 f8 e2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c514:	83 c4 10             	add    esp,0x10
c000c517:	83 c4 0c             	add    esp,0xc
c000c51a:	c3                   	ret    
c000c51b:	90                   	nop

c000c51c <Device::findAndLoadDriver()>:
c000c51c:	c7 44 24 04 8e 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc002138e
c000c524:	e9 e1 e3 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c529:	90                   	nop

c000c52a <Device::preOpenPCI(PCIDeviceInfo)>:
c000c52a:	57                   	push   edi
c000c52b:	b9 09 00 00 00       	mov    ecx,0x9
c000c530:	56                   	push   esi
c000c531:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c535:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c539:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c543:	81 c7 18 01 00 00    	add    edi,0x118
c000c549:	fc                   	cld    
c000c54a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c54c:	5e                   	pop    esi
c000c54d:	5f                   	pop    edi
c000c54e:	c3                   	ret    
c000c54f:	90                   	nop

c000c550 <Device::preOpenACPI(void*, char*, char*)>:
c000c550:	57                   	push   edi
c000c551:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c556:	56                   	push   esi
c000c557:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c55b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c55f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c563:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c56d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c573:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c579:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c57b:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c581:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c585:	b9 0e 00 00 00       	mov    ecx,0xe
c000c58a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c58c:	5e                   	pop    esi
c000c58d:	5f                   	pop    edi
c000c58e:	c3                   	ret    
c000c58f:	90                   	nop

c000c590 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c590:	53                   	push   ebx
c000c591:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c595:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c599:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c59d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c5a1:	0f b6 c0             	movzx  eax,al
c000c5a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c5ac:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c5b0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5b4:	5b                   	pop    ebx
c000c5b5:	e9 aa 05 00 00       	jmp    c000cb64 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c5ba <Device::getParent()>:
c000c5ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5be:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c5c4:	c3                   	ret    
c000c5c5:	90                   	nop

c000c5c6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c5c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c5ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5ce:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c5d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c5d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c5df:	e9 f7 06 00 00       	jmp    c000ccdb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c5e4 <Device::addChild(Device*)>:
c000c5e4:	53                   	push   ebx
c000c5e5:	83 ec 08             	sub    esp,0x8
c000c5e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c5f0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c5f6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c5fc:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c5fe:	85 d2                	test   edx,edx
c000c600:	74 04                	je     c000c606 <Device::addChild(Device*)+0x22>
c000c602:	89 d3                	mov    ebx,edx
c000c604:	eb f6                	jmp    c000c5fc <Device::addChild(Device*)+0x18>
c000c606:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c609:	83 ec 0c             	sub    esp,0xc
c000c60c:	6a 08                	push   0x8
c000c60e:	e8 c0 b4 ff ff       	call   c0007ad3 <malloc>
c000c613:	89 03                	mov    DWORD PTR [ebx],eax
c000c615:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c61b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c622:	83 c4 18             	add    esp,0x18
c000c625:	5b                   	pop    ebx
c000c626:	c3                   	ret    
c000c627:	90                   	nop

c000c628 <Device::removeAllChildren()>:
c000c628:	56                   	push   esi
c000c629:	53                   	push   ebx
c000c62a:	52                   	push   edx
c000c62b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c62f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c635:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c638:	74 17                	je     c000c651 <Device::removeAllChildren()+0x29>
c000c63a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c63d:	85 c0                	test   eax,eax
c000c63f:	74 0c                	je     c000c64d <Device::removeAllChildren()+0x25>
c000c641:	8b 10                	mov    edx,DWORD PTR [eax]
c000c643:	83 ec 0c             	sub    esp,0xc
c000c646:	50                   	push   eax
c000c647:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c64a:	83 c4 10             	add    esp,0x10
c000c64d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c64f:	eb e4                	jmp    c000c635 <Device::removeAllChildren()+0xd>
c000c651:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c657:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c65d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c663:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c66a:	58                   	pop    eax
c000c66b:	5b                   	pop    ebx
c000c66c:	5e                   	pop    esi
c000c66d:	c3                   	ret    

c000c66e <Device::hibernateAll()>:
c000c66e:	53                   	push   ebx
c000c66f:	83 ec 14             	sub    esp,0x14
c000c672:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c676:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c678:	53                   	push   ebx
c000c679:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c67c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c682:	83 c4 10             	add    esp,0x10
c000c685:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c688:	74 0f                	je     c000c699 <Device::hibernateAll()+0x2b>
c000c68a:	83 ec 0c             	sub    esp,0xc
c000c68d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c690:	e8 d9 ff ff ff       	call   c000c66e <Device::hibernateAll()>
c000c695:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c697:	eb e9                	jmp    c000c682 <Device::hibernateAll()+0x14>
c000c699:	83 c4 08             	add    esp,0x8
c000c69c:	5b                   	pop    ebx
c000c69d:	c3                   	ret    

c000c69e <Device::wakeAll()>:
c000c69e:	53                   	push   ebx
c000c69f:	83 ec 14             	sub    esp,0x14
c000c6a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6a8:	53                   	push   ebx
c000c6a9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c6ac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6b2:	83 c4 10             	add    esp,0x10
c000c6b5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6b8:	74 0f                	je     c000c6c9 <Device::wakeAll()+0x2b>
c000c6ba:	83 ec 0c             	sub    esp,0xc
c000c6bd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6c0:	e8 d9 ff ff ff       	call   c000c69e <Device::wakeAll()>
c000c6c5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6c7:	eb e9                	jmp    c000c6b2 <Device::wakeAll()+0x14>
c000c6c9:	83 c4 08             	add    esp,0x8
c000c6cc:	5b                   	pop    ebx
c000c6cd:	c3                   	ret    

c000c6ce <Device::detectAll()>:
c000c6ce:	53                   	push   ebx
c000c6cf:	83 ec 14             	sub    esp,0x14
c000c6d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6d8:	53                   	push   ebx
c000c6d9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c6dc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6e2:	83 c4 10             	add    esp,0x10
c000c6e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6e8:	74 0f                	je     c000c6f9 <Device::detectAll()+0x2b>
c000c6ea:	83 ec 0c             	sub    esp,0xc
c000c6ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6f0:	e8 d9 ff ff ff       	call   c000c6ce <Device::detectAll()>
c000c6f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6f7:	eb e9                	jmp    c000c6e2 <Device::detectAll()+0x14>
c000c6f9:	83 c4 08             	add    esp,0x8
c000c6fc:	5b                   	pop    ebx
c000c6fd:	c3                   	ret    

c000c6fe <Device::disableLegacyAll()>:
c000c6fe:	c3                   	ret    
c000c6ff:	90                   	nop

c000c700 <Device::loadDriversForAll()>:
c000c700:	c3                   	ret    
c000c701:	90                   	nop

c000c702 <Device::closeAll()>:
c000c702:	53                   	push   ebx
c000c703:	83 ec 08             	sub    esp,0x8
c000c706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c70a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c70c:	6a 00                	push   0x0
c000c70e:	6a 00                	push   0x0
c000c710:	6a 00                	push   0x0
c000c712:	53                   	push   ebx
c000c713:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c716:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c71c:	83 c4 10             	add    esp,0x10
c000c71f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c722:	74 0f                	je     c000c733 <Device::closeAll()+0x31>
c000c724:	83 ec 0c             	sub    esp,0xc
c000c727:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c72a:	e8 d3 ff ff ff       	call   c000c702 <Device::closeAll()>
c000c72f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c731:	eb e9                	jmp    c000c71c <Device::closeAll()+0x1a>
c000c733:	83 c4 08             	add    esp,0x8
c000c736:	5b                   	pop    ebx
c000c737:	c3                   	ret    

c000c738 <Device::powerSavingAll(PowerSavingLevel)>:
c000c738:	56                   	push   esi
c000c739:	53                   	push   ebx
c000c73a:	83 ec 0c             	sub    esp,0xc
c000c73d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c741:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c745:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c747:	56                   	push   esi
c000c748:	53                   	push   ebx
c000c749:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c74c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c752:	83 c4 10             	add    esp,0x10
c000c755:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c758:	74 0f                	je     c000c769 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c75a:	52                   	push   edx
c000c75b:	52                   	push   edx
c000c75c:	56                   	push   esi
c000c75d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c760:	e8 d3 ff ff ff       	call   c000c738 <Device::powerSavingAll(PowerSavingLevel)>
c000c765:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c767:	eb e9                	jmp    c000c752 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c769:	58                   	pop    eax
c000c76a:	5b                   	pop    ebx
c000c76b:	5e                   	pop    esi
c000c76c:	c3                   	ret    
c000c76d:	90                   	nop

c000c76e <Device::setName(char const*)>:
c000c76e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c776:	e9 d5 3e ff ff       	jmp    c0000650 <strcpy>
c000c77b:	90                   	nop

c000c77c <Device::Device(char const*)>:
c000c77c:	83 ec 1c             	sub    esp,0x1c
c000c77f:	ba d0 13 02 c0       	mov    edx,0xc00213d0
c000c784:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c788:	89 10                	mov    DWORD PTR [eax],edx
c000c78a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c78e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c798:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c79c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c7a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7aa:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c7b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7b8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c7c2:	83 ec 08             	sub    esp,0x8
c000c7c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7cd:	e8 9c ff ff ff       	call   c000c76e <Device::setName(char const*)>
c000c7d2:	83 c4 10             	add    esp,0x10
c000c7d5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c7dd:	83 ec 0c             	sub    esp,0xc
c000c7e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c7e4:	e8 ea b2 ff ff       	call   c0007ad3 <malloc>
c000c7e9:	83 c4 10             	add    esp,0x10
c000c7ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c7fd:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c807:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c80d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c813:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c817:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c81d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c828:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c82f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c833:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c83a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c83e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c84c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c856:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c85a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c868:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c872:	90                   	nop
c000c873:	83 c4 1c             	add    esp,0x1c
c000c876:	c3                   	ret    
c000c877:	90                   	nop

c000c878 <Device::getName()>:
c000c878:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c87c:	05 d0 00 00 00       	add    eax,0xd0
c000c881:	c3                   	ret    

c000c882 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c882:	83 ec 0c             	sub    esp,0xc
c000c885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c889:	83 ec 08             	sub    esp,0x8
c000c88c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c890:	50                   	push   eax
c000c891:	e8 e6 fe ff ff       	call   c000c77c <Device::Device(char const*)>
c000c896:	83 c4 10             	add    esp,0x10
c000c899:	ba fc 13 02 c0       	mov    edx,0xc00213fc
c000c89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8a2:	89 10                	mov    DWORD PTR [eax],edx
c000c8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8a8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c8b2:	90                   	nop
c000c8b3:	83 c4 0c             	add    esp,0xc
c000c8b6:	c3                   	ret    
c000c8b7:	90                   	nop

c000c8b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c8b8:	57                   	push   edi
c000c8b9:	56                   	push   esi
c000c8ba:	53                   	push   ebx
c000c8bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8bf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c8c3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c8c7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c8cd:	75 0c                	jne    c000c8db <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c8cf:	52                   	push   edx
c000c8d0:	52                   	push   edx
c000c8d1:	53                   	push   ebx
c000c8d2:	56                   	push   esi
c000c8d3:	e8 fa 2c 01 00       	call   c001f5d2 <LinkedList<Device>::addElement(Device*)>
c000c8d8:	83 c4 10             	add    esp,0x10
c000c8db:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8e4:	74 12                	je     c000c8f8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c8e6:	50                   	push   eax
c000c8e7:	57                   	push   edi
c000c8e8:	56                   	push   esi
c000c8e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8ec:	e8 c7 ff ff ff       	call   c000c8b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c8f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8f3:	83 c4 10             	add    esp,0x10
c000c8f6:	eb e9                	jmp    c000c8e1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c8f8:	5b                   	pop    ebx
c000c8f9:	5e                   	pop    esi
c000c8fa:	5f                   	pop    edi
c000c8fb:	c3                   	ret    

c000c8fc <getDevicesOfType(DeviceType)>:
c000c8fc:	53                   	push   ebx
c000c8fd:	83 ec 14             	sub    esp,0x14
c000c900:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c904:	53                   	push   ebx
c000c905:	e8 a4 2d 01 00       	call   c001f6ae <LinkedList<Device>::LinkedList()>
c000c90a:	83 c4 0c             	add    esp,0xc
c000c90d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c911:	53                   	push   ebx
c000c912:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c918:	e8 9b ff ff ff       	call   c000c8b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c91d:	83 c4 18             	add    esp,0x18
c000c920:	89 d8                	mov    eax,ebx
c000c922:	5b                   	pop    ebx
c000c923:	c2 04 00             	ret    0x4
c000c926:	66 90                	xchg   ax,ax

c000c928 <HardDiskController::HardDiskController(char const*)>:
c000c928:	83 ec 0c             	sub    esp,0xc
c000c92b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c92f:	83 ec 08             	sub    esp,0x8
c000c932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c936:	50                   	push   eax
c000c937:	e8 40 fe ff ff       	call   c000c77c <Device::Device(char const*)>
c000c93c:	83 c4 10             	add    esp,0x10
c000c93f:	ba 28 14 02 c0       	mov    edx,0xc0021428
c000c944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c948:	89 10                	mov    DWORD PTR [eax],edx
c000c94a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c94e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c958:	90                   	nop
c000c959:	83 c4 0c             	add    esp,0xc
c000c95c:	c3                   	ret    
c000c95d:	90                   	nop
c000c95e:	66 90                	xchg   ax,ax

c000c960 <HardDiskController::~HardDiskController()>:
c000c960:	83 ec 0c             	sub    esp,0xc
c000c963:	ba 28 14 02 c0       	mov    edx,0xc0021428
c000c968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c96c:	89 10                	mov    DWORD PTR [eax],edx
c000c96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c972:	83 ec 0c             	sub    esp,0xc
c000c975:	50                   	push   eax
c000c976:	e8 6b fb ff ff       	call   c000c4e6 <Device::~Device()>
c000c97b:	83 c4 10             	add    esp,0x10
c000c97e:	90                   	nop
c000c97f:	83 c4 0c             	add    esp,0xc
c000c982:	c3                   	ret    
c000c983:	90                   	nop

c000c984 <HardDiskController::~HardDiskController()>:
c000c984:	83 ec 0c             	sub    esp,0xc
c000c987:	83 ec 0c             	sub    esp,0xc
c000c98a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c98e:	e8 cd ff ff ff       	call   c000c960 <HardDiskController::~HardDiskController()>
c000c993:	83 c4 10             	add    esp,0x10
c000c996:	83 ec 08             	sub    esp,0x8
c000c999:	68 58 01 00 00       	push   0x158
c000c99e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9a2:	e8 65 de ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c9a7:	83 c4 10             	add    esp,0x10
c000c9aa:	83 c4 0c             	add    esp,0xc
c000c9ad:	c3                   	ret    

c000c9ae <PhysicalDisk::eject()>:
c000c9ae:	83 c8 ff             	or     eax,0xffffffff
c000c9b1:	c3                   	ret    

c000c9b2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c9b2:	83 ec 0c             	sub    esp,0xc
c000c9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9b9:	83 ec 08             	sub    esp,0x8
c000c9bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9c0:	50                   	push   eax
c000c9c1:	e8 b6 fd ff ff       	call   c000c77c <Device::Device(char const*)>
c000c9c6:	83 c4 10             	add    esp,0x10
c000c9c9:	ba 54 14 02 c0       	mov    edx,0xc0021454
c000c9ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d2:	89 10                	mov    DWORD PTR [eax],edx
c000c9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9e3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ee:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ca00:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ca06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca0a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ca14:	90                   	nop
c000ca15:	83 c4 0c             	add    esp,0xc
c000ca18:	c3                   	ret    
c000ca19:	90                   	nop

c000ca1a <PhysicalDisk::startCache()>:
c000ca1a:	56                   	push   esi
c000ca1b:	53                   	push   ebx
c000ca1c:	83 ec 10             	sub    esp,0x10
c000ca1f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca23:	6a 44                	push   0x44
c000ca25:	e8 a9 b0 ff ff       	call   c0007ad3 <malloc>
c000ca2a:	89 c6                	mov    esi,eax
c000ca2c:	58                   	pop    eax
c000ca2d:	5a                   	pop    edx
c000ca2e:	53                   	push   ebx
c000ca2f:	56                   	push   esi
c000ca30:	e8 83 17 00 00       	call   c000e1b8 <VCache::VCache(PhysicalDisk*)>
c000ca35:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ca3b:	83 c4 14             	add    esp,0x14
c000ca3e:	5b                   	pop    ebx
c000ca3f:	5e                   	pop    esi
c000ca40:	c3                   	ret    
c000ca41:	90                   	nop

c000ca42 <PhysicalDisk::~PhysicalDisk()>:
c000ca42:	83 ec 0c             	sub    esp,0xc
c000ca45:	ba 54 14 02 c0       	mov    edx,0xc0021454
c000ca4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca4e:	89 10                	mov    DWORD PTR [eax],edx
c000ca50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca54:	83 ec 0c             	sub    esp,0xc
c000ca57:	50                   	push   eax
c000ca58:	e8 89 fa ff ff       	call   c000c4e6 <Device::~Device()>
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	90                   	nop
c000ca61:	83 c4 0c             	add    esp,0xc
c000ca64:	c3                   	ret    
c000ca65:	90                   	nop

c000ca66 <PhysicalDisk::~PhysicalDisk()>:
c000ca66:	83 ec 0c             	sub    esp,0xc
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca70:	e8 cd ff ff ff       	call   c000ca42 <PhysicalDisk::~PhysicalDisk()>
c000ca75:	83 c4 10             	add    esp,0x10
c000ca78:	83 ec 08             	sub    esp,0x8
c000ca7b:	68 6c 01 00 00       	push   0x16c
c000ca80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca84:	e8 83 dd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ca89:	83 c4 10             	add    esp,0x10
c000ca8c:	83 c4 0c             	add    esp,0xc
c000ca8f:	c3                   	ret    

c000ca90 <int_handler>:
c000ca90:	55                   	push   ebp
c000ca91:	57                   	push   edi
c000ca92:	56                   	push   esi
c000ca93:	53                   	push   ebx
c000ca94:	83 ec 0c             	sub    esp,0xc
c000ca97:	80 3d 28 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c28,0x0
c000ca9e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000caa2:	74 0b                	je     c000caaf <int_handler+0x1f>
c000caa4:	fa                   	cli    
c000caa5:	f4                   	hlt    
c000caa6:	80 3d 28 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c28,0x0
c000caad:	75 f5                	jne    c000caa4 <int_handler+0x14>
c000caaf:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cab2:	8d 46 e0             	lea    eax,[esi-0x20]
c000cab5:	83 f8 17             	cmp    eax,0x17
c000cab8:	76 40                	jbe    c000cafa <int_handler+0x6a>
c000caba:	c1 e6 04             	shl    esi,0x4
c000cabd:	31 db                	xor    ebx,ebx
c000cabf:	8d ae 80 80 02 c0    	lea    ebp,[esi-0x3ffd7f80]
c000cac5:	81 c6 80 70 02 c0    	add    esi,0xc0027080
c000cacb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cacf:	85 c0                	test   eax,eax
c000cad1:	74 13                	je     c000cae6 <int_handler+0x56>
c000cad3:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cad7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cada:	74 2c                	je     c000cb08 <int_handler+0x78>
c000cadc:	83 ec 08             	sub    esp,0x8
c000cadf:	52                   	push   edx
c000cae0:	57                   	push   edi
c000cae1:	ff d0                	call   eax
c000cae3:	83 c4 10             	add    esp,0x10
c000cae6:	83 c3 01             	add    ebx,0x1
c000cae9:	83 fb 04             	cmp    ebx,0x4
c000caec:	75 dd                	jne    c000cacb <int_handler+0x3b>
c000caee:	83 c4 0c             	add    esp,0xc
c000caf1:	31 c0                	xor    eax,eax
c000caf3:	5b                   	pop    ebx
c000caf4:	31 d2                	xor    edx,edx
c000caf6:	5e                   	pop    esi
c000caf7:	5f                   	pop    edi
c000caf8:	5d                   	pop    ebp
c000caf9:	c3                   	ret    
c000cafa:	83 ec 0c             	sub    esp,0xc
c000cafd:	50                   	push   eax
c000cafe:	e8 0f b2 00 00       	call   c0017d12 <HalEndOfInterrupt(int)>
c000cb03:	83 c4 10             	add    esp,0x10
c000cb06:	eb b2                	jmp    c000caba <int_handler+0x2a>
c000cb08:	83 ec 08             	sub    esp,0x8
c000cb0b:	52                   	push   edx
c000cb0c:	57                   	push   edi
c000cb0d:	ff d0                	call   eax
c000cb0f:	83 c4 10             	add    esp,0x10
c000cb12:	83 c4 0c             	add    esp,0xc
c000cb15:	5b                   	pop    ebx
c000cb16:	5e                   	pop    esi
c000cb17:	5f                   	pop    edi
c000cb18:	5d                   	pop    ebp
c000cb19:	c3                   	ret    

c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cb1a:	56                   	push   esi
c000cb1b:	31 c0                	xor    eax,eax
c000cb1d:	53                   	push   ebx
c000cb1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb26:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cb2a:	89 ca                	mov    edx,ecx
c000cb2c:	c1 e2 04             	shl    edx,0x4
c000cb2f:	83 bc 82 80 80 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd7f80],0x0
c000cb37:	74 17                	je     c000cb50 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cb39:	83 c0 01             	add    eax,0x1
c000cb3c:	83 f8 04             	cmp    eax,0x4
c000cb3f:	75 ee                	jne    c000cb2f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cb41:	c7 44 24 0c 84 14 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021484
c000cb49:	5b                   	pop    ebx
c000cb4a:	5e                   	pop    esi
c000cb4b:	e9 0d 46 00 00       	jmp    c001115d <KePanic(char const*)>
c000cb50:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cb53:	89 1c 85 80 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f80],ebx
c000cb5a:	5b                   	pop    ebx
c000cb5b:	89 34 85 80 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f80],esi
c000cb62:	5e                   	pop    esi
c000cb63:	c3                   	ret    

c000cb64 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cb64:	55                   	push   ebp
c000cb65:	57                   	push   edi
c000cb66:	56                   	push   esi
c000cb67:	53                   	push   ebx
c000cb68:	83 ec 0c             	sub    esp,0xc
c000cb6b:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cb71:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cb75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cb79:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cb80:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cb83:	74 57                	je     c000cbdc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cb85:	84 c0                	test   al,al
c000cb87:	89 c7                	mov    edi,eax
c000cb89:	74 1d                	je     c000cba8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cb8b:	83 fe 0f             	cmp    esi,0xf
c000cb8e:	0f 8f d9 00 00 00    	jg     c000cc6d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cb94:	0f b6 b6 88 2f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd078]
c000cb9b:	0f b7 bc 36 20 98 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd67e0]
c000cba3:	d1 ef                	shr    edi,1
c000cba5:	83 e7 01             	and    edi,0x1
c000cba8:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c000cbad:	83 ec 08             	sub    esp,0x8
c000cbb0:	31 db                	xor    ebx,ebx
c000cbb2:	50                   	push   eax
c000cbb3:	68 91 14 02 c0       	push   0xc0021491
c000cbb8:	e8 4d dd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cbbd:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c000cbc2:	83 c4 10             	add    esp,0x10
c000cbc5:	85 c0                	test   eax,eax
c000cbc7:	7f 59                	jg     c000cc22 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cbc9:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cbcc:	83 ec 0c             	sub    esp,0xc
c000cbcf:	68 a8 14 02 c0       	push   0xc00214a8
c000cbd4:	e8 84 45 00 00       	call   c001115d <KePanic(char const*)>
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	89 e8                	mov    eax,ebp
c000cbde:	31 d2                	xor    edx,edx
c000cbe0:	c1 e0 04             	shl    eax,0x4
c000cbe3:	8b 8c 90 80 80 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd7f80]
c000cbea:	85 c9                	test   ecx,ecx
c000cbec:	0f 84 92 00 00 00    	je     c000cc84 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cbf2:	83 c2 01             	add    edx,0x1
c000cbf5:	83 fa 04             	cmp    edx,0x4
c000cbf8:	75 e9                	jne    c000cbe3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cbfa:	83 ec 0c             	sub    esp,0xc
c000cbfd:	68 fc 14 02 c0       	push   0xc00214fc
c000cc02:	e8 56 45 00 00       	call   c001115d <KePanic(char const*)>
c000cc07:	83 c4 10             	add    esp,0x10
c000cc0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cc0f:	83 c4 0c             	add    esp,0xc
c000cc12:	5b                   	pop    ebx
c000cc13:	5e                   	pop    esi
c000cc14:	5f                   	pop    edi
c000cc15:	5d                   	pop    ebp
c000cc16:	c3                   	ret    
c000cc17:	83 c3 01             	add    ebx,0x1
c000cc1a:	39 1d 60 ae 02 c0    	cmp    DWORD PTR ds:0xc002ae60,ebx
c000cc20:	7e a7                	jle    c000cbc9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cc22:	8b 2c 9d 80 ae 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd5180]
c000cc29:	83 ec 08             	sub    esp,0x8
c000cc2c:	56                   	push   esi
c000cc2d:	55                   	push   ebp
c000cc2e:	e8 c9 18 01 00       	call   c001e4fc <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cc33:	83 c4 10             	add    esp,0x10
c000cc36:	84 c0                	test   al,al
c000cc38:	74 dd                	je     c000cc17 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cc3a:	89 f8                	mov    eax,edi
c000cc3c:	83 ec 04             	sub    esp,0x4
c000cc3f:	8b 1c 9d 80 ae 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5180]
c000cc46:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cc49:	0f b6 f8             	movzx  edi,al
c000cc4c:	57                   	push   edi
c000cc4d:	89 e8                	mov    eax,ebp
c000cc4f:	6a 00                	push   0x0
c000cc51:	0f b6 c0             	movzx  eax,al
c000cc54:	50                   	push   eax
c000cc55:	89 f0                	mov    eax,esi
c000cc57:	6a 00                	push   0x0
c000cc59:	0f b6 c0             	movzx  eax,al
c000cc5c:	6a 00                	push   0x0
c000cc5e:	50                   	push   eax
c000cc5f:	53                   	push   ebx
c000cc60:	e8 03 1a 01 00       	call   c001e668 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cc65:	83 c4 20             	add    esp,0x20
c000cc68:	e9 6f ff ff ff       	jmp    c000cbdc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cc6d:	83 ec 0c             	sub    esp,0xc
c000cc70:	31 ff                	xor    edi,edi
c000cc72:	68 c4 14 02 c0       	push   0xc00214c4
c000cc77:	e8 e1 44 00 00       	call   c001115d <KePanic(char const*)>
c000cc7c:	83 c4 10             	add    esp,0x10
c000cc7f:	e9 24 ff ff ff       	jmp    c000cba8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cc84:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000cc87:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cc8b:	89 14 85 80 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f80],edx
c000cc92:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cc96:	89 14 85 80 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f80],edx
c000cc9d:	83 c4 0c             	add    esp,0xc
c000cca0:	89 f0                	mov    eax,esi
c000cca2:	5b                   	pop    ebx
c000cca3:	5e                   	pop    esi
c000cca4:	5f                   	pop    edi
c000cca5:	5d                   	pop    ebp
c000cca6:	c3                   	ret    

c000cca7 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cca7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ccaf:	c1 e0 04             	shl    eax,0x4
c000ccb2:	8d 50 10             	lea    edx,[eax+0x10]
c000ccb5:	39 88 80 80 02 c0    	cmp    DWORD PTR [eax-0x3ffd7f80],ecx
c000ccbb:	74 08                	je     c000ccc5 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ccbd:	83 c0 04             	add    eax,0x4
c000ccc0:	39 d0                	cmp    eax,edx
c000ccc2:	75 f1                	jne    c000ccb5 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ccc4:	c3                   	ret    
c000ccc5:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000cccf:	c7 80 80 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f80],0x0
c000ccd9:	eb e2                	jmp    c000ccbd <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000ccdb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ccdb:	56                   	push   esi
c000ccdc:	53                   	push   ebx
c000ccdd:	83 ec 04             	sub    esp,0x4
c000cce0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cce5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cce9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cced:	74 0e                	je     c000ccfd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000ccef:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ccf4:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ccfb:	75 34                	jne    c000cd31 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000ccfd:	8d 43 20             	lea    eax,[ebx+0x20]
c000cd00:	c1 e0 04             	shl    eax,0x4
c000cd03:	8d 50 10             	lea    edx,[eax+0x10]
c000cd06:	39 b0 80 80 02 c0    	cmp    DWORD PTR [eax-0x3ffd7f80],esi
c000cd0c:	74 0d                	je     c000cd1b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000cd0e:	83 c0 04             	add    eax,0x4
c000cd11:	39 d0                	cmp    eax,edx
c000cd13:	75 f1                	jne    c000cd06 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000cd15:	83 c4 04             	add    esp,0x4
c000cd18:	5b                   	pop    ebx
c000cd19:	5e                   	pop    esi
c000cd1a:	c3                   	ret    
c000cd1b:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000cd25:	c7 80 80 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f80],0x0
c000cd2f:	eb dd                	jmp    c000cd0e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000cd31:	83 fb 0f             	cmp    ebx,0xf
c000cd34:	7f 09                	jg     c000cd3f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000cd36:	0f b6 9b 88 2f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd078]
c000cd3d:	eb be                	jmp    c000ccfd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cd3f:	83 ec 0c             	sub    esp,0xc
c000cd42:	68 b5 14 02 c0       	push   0xc00214b5
c000cd47:	e8 11 44 00 00       	call   c001115d <KePanic(char const*)>
c000cd4c:	83 c4 10             	add    esp,0x10
c000cd4f:	eb ac                	jmp    c000ccfd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000cd51 <setupINTS()>:
c000cd51:	31 c0                	xor    eax,eax
c000cd53:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000cd5d:	83 c0 10             	add    eax,0x10
c000cd60:	c7 80 70 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f90],0x0
c000cd6a:	c7 80 74 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f8c],0x0
c000cd74:	c7 80 74 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f8c],0x0
c000cd7e:	c7 80 78 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f88],0x0
c000cd88:	c7 80 78 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f88],0x0
c000cd92:	c7 80 7c 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f84],0x0
c000cd9c:	c7 80 7c 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f84],0x0
c000cda6:	3d 00 10 00 00       	cmp    eax,0x1000
c000cdab:	75 a6                	jne    c000cd53 <setupINTS()+0x2>
c000cdad:	c3                   	ret    

c000cdae <convertLegacyIRQNumber(int)>:
c000cdae:	83 ec 0c             	sub    esp,0xc
c000cdb1:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cdb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdbb:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cdc2:	74 0c                	je     c000cdd0 <convertLegacyIRQNumber(int)+0x22>
c000cdc4:	83 f8 0f             	cmp    eax,0xf
c000cdc7:	7f 0b                	jg     c000cdd4 <convertLegacyIRQNumber(int)+0x26>
c000cdc9:	0f b6 80 88 2f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd078]
c000cdd0:	83 c4 0c             	add    esp,0xc
c000cdd3:	c3                   	ret    
c000cdd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdd8:	83 ec 0c             	sub    esp,0xc
c000cddb:	68 c4 14 02 c0       	push   0xc00214c4
c000cde0:	e8 78 43 00 00       	call   c001115d <KePanic(char const*)>
c000cde5:	83 c4 10             	add    esp,0x10
c000cde8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdec:	83 c4 0c             	add    esp,0xc
c000cdef:	c3                   	ret    

c000cdf0 <startGUI(void*)>:
c000cdf0:	55                   	push   ebp
c000cdf1:	89 e5                	mov    ebp,esp
c000cdf3:	53                   	push   ebx
c000cdf4:	83 ec 04             	sub    esp,0x4
c000cdf7:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cdfc:	83 e8 01             	sub    eax,0x1
c000cdff:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000ce04:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce09:	85 c0                	test   eax,eax
c000ce0b:	75 01                	jne    c000ce0e <startGUI(void*)+0x1e>
c000ce0d:	fb                   	sti    
c000ce0e:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce14:	83 ec 08             	sub    esp,0x8
c000ce17:	6a 01                	push   0x1
c000ce19:	68 21 15 02 c0       	push   0xc0021521
c000ce1e:	e8 d1 81 00 00       	call   c0014ff4 <Thr::loadDLL(char const*, bool)>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	83 ec 08             	sub    esp,0x8
c000ce29:	53                   	push   ebx
c000ce2a:	50                   	push   eax
c000ce2b:	e8 04 84 00 00       	call   c0015234 <Thr::executeDLL(unsigned long, void*)>
c000ce30:	83 c4 10             	add    esp,0x10
c000ce33:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce39:	83 ec 08             	sub    esp,0x8
c000ce3c:	6a 01                	push   0x1
c000ce3e:	68 3b 15 02 c0       	push   0xc002153b
c000ce43:	e8 ac 81 00 00       	call   c0014ff4 <Thr::loadDLL(char const*, bool)>
c000ce48:	83 c4 10             	add    esp,0x10
c000ce4b:	83 ec 08             	sub    esp,0x8
c000ce4e:	53                   	push   ebx
c000ce4f:	50                   	push   eax
c000ce50:	e8 df 83 00 00       	call   c0015234 <Thr::executeDLL(unsigned long, void*)>
c000ce55:	83 c4 10             	add    esp,0x10
c000ce58:	90                   	nop
c000ce59:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ce5c:	c9                   	leave  
c000ce5d:	c3                   	ret    

c000ce5e <startGUIVESA(void*)>:
c000ce5e:	55                   	push   ebp
c000ce5f:	89 e5                	mov    ebp,esp
c000ce61:	53                   	push   ebx
c000ce62:	83 ec 04             	sub    esp,0x4
c000ce65:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce6a:	83 e8 01             	sub    eax,0x1
c000ce6d:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000ce72:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce77:	85 c0                	test   eax,eax
c000ce79:	75 01                	jne    c000ce7c <startGUIVESA(void*)+0x1e>
c000ce7b:	fb                   	sti    
c000ce7c:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce82:	83 ec 08             	sub    esp,0x8
c000ce85:	6a 01                	push   0x1
c000ce87:	68 59 15 02 c0       	push   0xc0021559
c000ce8c:	e8 63 81 00 00       	call   c0014ff4 <Thr::loadDLL(char const*, bool)>
c000ce91:	83 c4 10             	add    esp,0x10
c000ce94:	83 ec 08             	sub    esp,0x8
c000ce97:	53                   	push   ebx
c000ce98:	50                   	push   eax
c000ce99:	e8 96 83 00 00       	call   c0015234 <Thr::executeDLL(unsigned long, void*)>
c000ce9e:	83 c4 10             	add    esp,0x10
c000cea1:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cea7:	83 ec 08             	sub    esp,0x8
c000ceaa:	6a 01                	push   0x1
c000ceac:	68 3b 15 02 c0       	push   0xc002153b
c000ceb1:	e8 3e 81 00 00       	call   c0014ff4 <Thr::loadDLL(char const*, bool)>
c000ceb6:	83 c4 10             	add    esp,0x10
c000ceb9:	83 ec 08             	sub    esp,0x8
c000cebc:	53                   	push   ebx
c000cebd:	50                   	push   eax
c000cebe:	e8 71 83 00 00       	call   c0015234 <Thr::executeDLL(unsigned long, void*)>
c000cec3:	83 c4 10             	add    esp,0x10
c000cec6:	90                   	nop
c000cec7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ceca:	c9                   	leave  
c000cecb:	c3                   	ret    

c000cecc <sendKeyToTerminal(unsigned char)>:
c000cecc:	55                   	push   ebp
c000cecd:	89 e5                	mov    ebp,esp
c000cecf:	83 ec 28             	sub    esp,0x28
c000ced2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ced5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000ced8:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000cedd:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000cee1:	83 ec 08             	sub    esp,0x8
c000cee4:	52                   	push   edx
c000cee5:	50                   	push   eax
c000cee6:	e8 d1 be ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000ceeb:	83 c4 10             	add    esp,0x10
c000ceee:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cef2:	83 f8 0a             	cmp    eax,0xa
c000cef5:	74 16                	je     c000cf0d <sendKeyToTerminal(unsigned char)+0x41>
c000cef7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cefb:	83 f8 03             	cmp    eax,0x3
c000cefe:	74 0d                	je     c000cf0d <sendKeyToTerminal(unsigned char)+0x41>
c000cf00:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf04:	83 f8 1c             	cmp    eax,0x1c
c000cf07:	0f 85 97 00 00 00    	jne    c000cfa4 <sendKeyToTerminal(unsigned char)+0xd8>
c000cf0d:	fa                   	cli    
c000cf0e:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cf13:	83 c0 01             	add    eax,0x1
c000cf16:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000cf1b:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf20:	83 c0 01             	add    eax,0x1
c000cf23:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000cf28:	a1 80 90 02 c0       	mov    eax,ds:0xc0029080
c000cf2d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf30:	c7 05 80 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029080,0x0
c000cf3a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000cf3e:	74 1f                	je     c000cf5f <sendKeyToTerminal(unsigned char)+0x93>
c000cf40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf43:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000cf46:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cf49:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000cf4c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf4f:	83 ec 0c             	sub    esp,0xc
c000cf52:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cf55:	e8 fe 8f 00 00       	call   c0015f58 <unblockTask(ThreadControlBlock*)>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	eb db                	jmp    c000cf3a <sendKeyToTerminal(unsigned char)+0x6e>
c000cf5f:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf64:	83 e8 01             	sub    eax,0x1
c000cf67:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000cf6c:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf71:	85 c0                	test   eax,eax
c000cf73:	75 18                	jne    c000cf8d <sendKeyToTerminal(unsigned char)+0xc1>
c000cf75:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c000cf7a:	85 c0                	test   eax,eax
c000cf7c:	74 0f                	je     c000cf8d <sendKeyToTerminal(unsigned char)+0xc1>
c000cf7e:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c000cf88:	e8 d3 8a 00 00       	call   c0015a60 <schedule()>
c000cf8d:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cf92:	83 e8 01             	sub    eax,0x1
c000cf95:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000cf9a:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cf9f:	85 c0                	test   eax,eax
c000cfa1:	75 01                	jne    c000cfa4 <sendKeyToTerminal(unsigned char)+0xd8>
c000cfa3:	fb                   	sti    
c000cfa4:	90                   	nop
c000cfa5:	c9                   	leave  
c000cfa6:	c3                   	ret    

c000cfa7 <sendKeyboardToken(KeyboardToken)>:
c000cfa7:	55                   	push   ebp
c000cfa8:	89 e5                	mov    ebp,esp
c000cfaa:	83 ec 18             	sub    esp,0x18
c000cfad:	e8 fb 41 00 00       	call   c00111ad <KeUserIOReceived()>
c000cfb2:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000cfb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfb8:	0f b7 c0             	movzx  eax,ax
c000cfbb:	83 f2 01             	xor    edx,0x1
c000cfbe:	88 90 a0 90 02 c0    	mov    BYTE PTR [eax-0x3ffd6f60],dl
c000cfc4:	a1 88 90 02 c0       	mov    eax,ds:0xc0029088
c000cfc9:	85 c0                	test   eax,eax
c000cfcb:	74 24                	je     c000cff1 <sendKeyboardToken(KeyboardToken)+0x4a>
c000cfcd:	8b 15 88 90 02 c0    	mov    edx,DWORD PTR ds:0xc0029088
c000cfd3:	83 ec 04             	sub    esp,0x4
c000cfd6:	68 a0 90 02 c0       	push   0xc00290a0
c000cfdb:	83 ec 08             	sub    esp,0x8
c000cfde:	89 e0                	mov    eax,esp
c000cfe0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000cfe3:	89 08                	mov    DWORD PTR [eax],ecx
c000cfe5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000cfe8:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000cfec:	ff d2                	call   edx
c000cfee:	83 c4 10             	add    esp,0x10
c000cff1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000cff5:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000cff8:	a0 a8 94 02 c0       	mov    al,ds:0xc00294a8
c000cffd:	0f b6 d2             	movzx  edx,dl
c000d000:	0f b6 c0             	movzx  eax,al
c000d003:	39 c2                	cmp    edx,eax
c000d005:	74 1c                	je     c000d023 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d007:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d00a:	a2 a8 94 02 c0       	mov    ds:0xc00294a8,al
c000d00f:	a0 a8 94 02 c0       	mov    al,ds:0xc00294a8
c000d014:	0f b6 c0             	movzx  eax,al
c000d017:	83 ec 0c             	sub    esp,0xc
c000d01a:	50                   	push   eax
c000d01b:	e8 f8 b4 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d020:	83 c4 10             	add    esp,0x10
c000d023:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d026:	0f b6 c0             	movzx  eax,al
c000d029:	85 c0                	test   eax,eax
c000d02b:	0f 84 da 00 00 00    	je     c000d10b <sendKeyboardToken(KeyboardToken)+0x164>
c000d031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d034:	0f b7 c0             	movzx  eax,ax
c000d037:	3d 18 03 00 00       	cmp    eax,0x318
c000d03c:	75 06                	jne    c000d044 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d03e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d047:	0f b7 c0             	movzx  eax,ax
c000d04a:	3d 19 03 00 00       	cmp    eax,0x319
c000d04f:	75 06                	jne    c000d057 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d051:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d05a:	0f b7 c0             	movzx  eax,ax
c000d05d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d062:	75 06                	jne    c000d06a <sendKeyboardToken(KeyboardToken)+0xc3>
c000d064:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d06a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d06d:	0f b7 c0             	movzx  eax,ax
c000d070:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d075:	75 06                	jne    c000d07d <sendKeyboardToken(KeyboardToken)+0xd6>
c000d077:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d07d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d080:	0f b7 c0             	movzx  eax,ax
c000d083:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d088:	75 06                	jne    c000d090 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d08a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d093:	0f b7 c0             	movzx  eax,ax
c000d096:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d09b:	75 06                	jne    c000d0a3 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d09d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d0a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0a6:	0f b7 c0             	movzx  eax,ax
c000d0a9:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d0ae:	75 06                	jne    c000d0b6 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d0b0:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d0b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0b9:	0f b7 c0             	movzx  eax,ax
c000d0bc:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d0c1:	75 06                	jne    c000d0c9 <sendKeyboardToken(KeyboardToken)+0x122>
c000d0c3:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d0c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0cc:	0f b7 c0             	movzx  eax,ax
c000d0cf:	3d 20 03 00 00       	cmp    eax,0x320
c000d0d4:	75 06                	jne    c000d0dc <sendKeyboardToken(KeyboardToken)+0x135>
c000d0d6:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d0dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0df:	0f b7 c0             	movzx  eax,ax
c000d0e2:	3d 21 03 00 00       	cmp    eax,0x321
c000d0e7:	75 06                	jne    c000d0ef <sendKeyboardToken(KeyboardToken)+0x148>
c000d0e9:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d0ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0f2:	0f b7 c0             	movzx  eax,ax
c000d0f5:	3d 22 03 00 00       	cmp    eax,0x322
c000d0fa:	0f 85 f1 00 00 00    	jne    c000d1f1 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d100:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d106:	e9 e6 00 00 00       	jmp    c000d1f1 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d10b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d10e:	0f b7 c0             	movzx  eax,ax
c000d111:	3d 18 03 00 00       	cmp    eax,0x318
c000d116:	75 0a                	jne    c000d122 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d118:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d11e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d125:	0f b7 c0             	movzx  eax,ax
c000d128:	3d 19 03 00 00       	cmp    eax,0x319
c000d12d:	75 0a                	jne    c000d139 <sendKeyboardToken(KeyboardToken)+0x192>
c000d12f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d135:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d13c:	0f b7 c0             	movzx  eax,ax
c000d13f:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d144:	75 0a                	jne    c000d150 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d146:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d14c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d153:	0f b7 c0             	movzx  eax,ax
c000d156:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d15b:	75 0a                	jne    c000d167 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d15d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d163:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d16a:	0f b7 c0             	movzx  eax,ax
c000d16d:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d172:	75 0a                	jne    c000d17e <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d174:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d17a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d17e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d181:	0f b7 c0             	movzx  eax,ax
c000d184:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d189:	75 0a                	jne    c000d195 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d18b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d191:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d198:	0f b7 c0             	movzx  eax,ax
c000d19b:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1a0:	75 0a                	jne    c000d1ac <sendKeyboardToken(KeyboardToken)+0x205>
c000d1a2:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d1a8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1af:	0f b7 c0             	movzx  eax,ax
c000d1b2:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d1b7:	75 0a                	jne    c000d1c3 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d1b9:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d1bf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1c6:	0f b7 c0             	movzx  eax,ax
c000d1c9:	3d 20 03 00 00       	cmp    eax,0x320
c000d1ce:	75 0a                	jne    c000d1da <sendKeyboardToken(KeyboardToken)+0x233>
c000d1d0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d1d6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1dd:	0f b7 c0             	movzx  eax,ax
c000d1e0:	3d 21 03 00 00       	cmp    eax,0x321
c000d1e5:	75 0a                	jne    c000d1f1 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d1e7:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d1ed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f4:	0f b7 c0             	movzx  eax,ax
c000d1f7:	3d 00 02 00 00       	cmp    eax,0x200
c000d1fc:	75 2f                	jne    c000d22d <sendKeyboardToken(KeyboardToken)+0x286>
c000d1fe:	a0 a0 94 02 c0       	mov    al,ds:0xc00294a0
c000d203:	83 f0 01             	xor    eax,0x1
c000d206:	0f b6 c0             	movzx  eax,al
c000d209:	85 c0                	test   eax,eax
c000d20b:	74 20                	je     c000d22d <sendKeyboardToken(KeyboardToken)+0x286>
c000d20d:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000d212:	6a 01                	push   0x1
c000d214:	6a 00                	push   0x0
c000d216:	68 f0 cd 00 c0       	push   0xc000cdf0
c000d21b:	50                   	push   eax
c000d21c:	e8 f3 85 00 00       	call   c0015814 <Process::createThread(void (*)(void*), void*, int)>
c000d221:	83 c4 10             	add    esp,0x10
c000d224:	c6 05 a0 94 02 c0 01 	mov    BYTE PTR ds:0xc00294a0,0x1
c000d22b:	eb 3a                	jmp    c000d267 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d22d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d230:	0f b7 c0             	movzx  eax,ax
c000d233:	3d 01 02 00 00       	cmp    eax,0x201
c000d238:	75 2d                	jne    c000d267 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d23a:	a0 a0 94 02 c0       	mov    al,ds:0xc00294a0
c000d23f:	83 f0 01             	xor    eax,0x1
c000d242:	0f b6 c0             	movzx  eax,al
c000d245:	85 c0                	test   eax,eax
c000d247:	74 1e                	je     c000d267 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d249:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000d24e:	6a 01                	push   0x1
c000d250:	6a 00                	push   0x0
c000d252:	68 5e ce 00 c0       	push   0xc000ce5e
c000d257:	50                   	push   eax
c000d258:	e8 b7 85 00 00       	call   c0015814 <Process::createThread(void (*)(void*), void*, int)>
c000d25d:	83 c4 10             	add    esp,0x10
c000d260:	c6 05 a0 94 02 c0 01 	mov    BYTE PTR ds:0xc00294a0,0x1
c000d267:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d26a:	0f b7 c0             	movzx  eax,ax
c000d26d:	3d 25 03 00 00       	cmp    eax,0x325
c000d272:	75 06                	jne    c000d27a <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d274:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d27a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d27d:	0f b7 c0             	movzx  eax,ax
c000d280:	3d 24 03 00 00       	cmp    eax,0x324
c000d285:	75 06                	jne    c000d28d <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d287:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d28d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d290:	0f b7 c0             	movzx  eax,ax
c000d293:	3d 23 03 00 00       	cmp    eax,0x323
c000d298:	75 06                	jne    c000d2a0 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d29a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d2a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2a3:	0f b7 c0             	movzx  eax,ax
c000d2a6:	3d 26 03 00 00       	cmp    eax,0x326
c000d2ab:	75 06                	jne    c000d2b3 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d2ad:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d2b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2b6:	0f b7 c0             	movzx  eax,ax
c000d2b9:	3d 27 03 00 00       	cmp    eax,0x327
c000d2be:	75 06                	jne    c000d2c6 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d2c0:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d2c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2c9:	0f b7 c0             	movzx  eax,ax
c000d2cc:	3d 22 03 00 00       	cmp    eax,0x322
c000d2d1:	75 06                	jne    c000d2d9 <sendKeyboardToken(KeyboardToken)+0x332>
c000d2d3:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d2d9:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d2dd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d2e0:	83 f0 01             	xor    eax,0x1
c000d2e3:	0f b6 c0             	movzx  eax,al
c000d2e6:	85 c0                	test   eax,eax
c000d2e8:	74 7c                	je     c000d366 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d2ea:	a0 a1 91 02 c0       	mov    al,ds:0xc00291a1
c000d2ef:	0f b6 c0             	movzx  eax,al
c000d2f2:	85 c0                	test   eax,eax
c000d2f4:	74 43                	je     c000d339 <sendKeyboardToken(KeyboardToken)+0x392>
c000d2f6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d2fa:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d2fe:	85 c0                	test   eax,eax
c000d300:	74 2b                	je     c000d32d <sendKeyboardToken(KeyboardToken)+0x386>
c000d302:	8b 15 a4 94 02 c0    	mov    edx,DWORD PTR ds:0xc00294a4
c000d308:	89 d0                	mov    eax,edx
c000d30a:	c1 e0 02             	shl    eax,0x2
c000d30d:	01 d0                	add    eax,edx
c000d30f:	d1 e0                	shl    eax,1
c000d311:	a3 a4 94 02 c0       	mov    ds:0xc00294a4,eax
c000d316:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d319:	0f b7 c0             	movzx  eax,ax
c000d31c:	8d 50 d0             	lea    edx,[eax-0x30]
c000d31f:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d324:	01 d0                	add    eax,edx
c000d326:	a3 a4 94 02 c0       	mov    ds:0xc00294a4,eax
c000d32b:	eb 71                	jmp    c000d39e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d32d:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d337:	eb 65                	jmp    c000d39e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d339:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d33e:	85 c0                	test   eax,eax
c000d340:	74 18                	je     c000d35a <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d342:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d347:	0f b6 c0             	movzx  eax,al
c000d34a:	83 ec 0c             	sub    esp,0xc
c000d34d:	50                   	push   eax
c000d34e:	e8 79 fb ff ff       	call   c000cecc <sendKeyToTerminal(unsigned char)>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d35a:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d364:	eb 38                	jmp    c000d39e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d369:	0f b7 c0             	movzx  eax,ax
c000d36c:	3d 01 01 00 00       	cmp    eax,0x101
c000d371:	75 2b                	jne    c000d39e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d373:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d378:	85 c0                	test   eax,eax
c000d37a:	74 18                	je     c000d394 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d37c:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d381:	0f b6 c0             	movzx  eax,al
c000d384:	83 ec 0c             	sub    esp,0xc
c000d387:	50                   	push   eax
c000d388:	e8 3f fb ff ff       	call   c000cecc <sendKeyToTerminal(unsigned char)>
c000d38d:	83 c4 10             	add    esp,0x10
c000d390:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d394:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d39e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d3a1:	83 f0 01             	xor    eax,0x1
c000d3a4:	0f b6 c0             	movzx  eax,al
c000d3a7:	85 c0                	test   eax,eax
c000d3a9:	74 5a                	je     c000d405 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3ab:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d3ae:	83 f0 01             	xor    eax,0x1
c000d3b1:	0f b6 c0             	movzx  eax,al
c000d3b4:	85 c0                	test   eax,eax
c000d3b6:	74 4d                	je     c000d405 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3b8:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c000d3bd:	83 f0 01             	xor    eax,0x1
c000d3c0:	0f b6 c0             	movzx  eax,al
c000d3c3:	85 c0                	test   eax,eax
c000d3c5:	74 3e                	je     c000d405 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ca:	0f b7 c0             	movzx  eax,ax
c000d3cd:	83 f8 1f             	cmp    eax,0x1f
c000d3d0:	76 0b                	jbe    c000d3dd <sendKeyboardToken(KeyboardToken)+0x436>
c000d3d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d5:	0f b7 c0             	movzx  eax,ax
c000d3d8:	83 f8 7e             	cmp    eax,0x7e
c000d3db:	76 16                	jbe    c000d3f3 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d3dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e0:	0f b7 c0             	movzx  eax,ax
c000d3e3:	83 f8 0a             	cmp    eax,0xa
c000d3e6:	74 0b                	je     c000d3f3 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d3e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3eb:	0f b7 c0             	movzx  eax,ax
c000d3ee:	83 f8 08             	cmp    eax,0x8
c000d3f1:	75 12                	jne    c000d405 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f6:	0f b6 c0             	movzx  eax,al
c000d3f9:	83 ec 0c             	sub    esp,0xc
c000d3fc:	50                   	push   eax
c000d3fd:	e8 ca fa ff ff       	call   c000cecc <sendKeyToTerminal(unsigned char)>
c000d402:	83 c4 10             	add    esp,0x10
c000d405:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d408:	83 f0 01             	xor    eax,0x1
c000d40b:	0f b6 c0             	movzx  eax,al
c000d40e:	85 c0                	test   eax,eax
c000d410:	74 5d                	je     c000d46f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d412:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d415:	83 f0 01             	xor    eax,0x1
c000d418:	0f b6 c0             	movzx  eax,al
c000d41b:	85 c0                	test   eax,eax
c000d41d:	74 50                	je     c000d46f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d41f:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c000d424:	0f b6 c0             	movzx  eax,al
c000d427:	85 c0                	test   eax,eax
c000d429:	74 44                	je     c000d46f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d42b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d42e:	0f b7 c0             	movzx  eax,ax
c000d431:	83 f8 3f             	cmp    eax,0x3f
c000d434:	76 39                	jbe    c000d46f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d439:	0f b7 c0             	movzx  eax,ax
c000d43c:	83 f8 7f             	cmp    eax,0x7f
c000d43f:	77 2e                	ja     c000d46f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d441:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d444:	88 c2                	mov    dl,al
c000d446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d449:	0f b7 c0             	movzx  eax,ax
c000d44c:	83 f8 5f             	cmp    eax,0x5f
c000d44f:	76 04                	jbe    c000d455 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d451:	b0 20                	mov    al,0x20
c000d453:	eb 02                	jmp    c000d457 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d455:	b0 00                	mov    al,0x0
c000d457:	89 d1                	mov    ecx,edx
c000d459:	29 c1                	sub    ecx,eax
c000d45b:	89 c8                	mov    eax,ecx
c000d45d:	83 e8 40             	sub    eax,0x40
c000d460:	0f b6 c0             	movzx  eax,al
c000d463:	83 ec 0c             	sub    esp,0xc
c000d466:	50                   	push   eax
c000d467:	e8 60 fa ff ff       	call   c000cecc <sendKeyToTerminal(unsigned char)>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d472:	0f b7 c0             	movzx  eax,ax
c000d475:	3d 00 03 00 00       	cmp    eax,0x300
c000d47a:	75 12                	jne    c000d48e <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d47c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d47f:	83 f0 01             	xor    eax,0x1
c000d482:	0f b6 c0             	movzx  eax,al
c000d485:	85 c0                	test   eax,eax
c000d487:	74 05                	je     c000d48e <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d489:	e8 8b b0 ff ff       	call   c0008519 <doTerminalCycle()>
c000d48e:	90                   	nop
c000d48f:	c9                   	leave  
c000d490:	c3                   	ret    

c000d491 <clearInternalKeybuffer(VgaText*)>:
c000d491:	55                   	push   ebp
c000d492:	89 e5                	mov    ebp,esp
c000d494:	83 ec 08             	sub    esp,0x8
c000d497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d49a:	05 02 01 00 00       	add    eax,0x102
c000d49f:	83 ec 0c             	sub    esp,0xc
c000d4a2:	50                   	push   eax
c000d4a3:	e8 d8 30 ff ff       	call   c0000580 <strlen>
c000d4a8:	83 c4 10             	add    esp,0x10
c000d4ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d4ae:	81 c2 02 01 00 00    	add    edx,0x102
c000d4b4:	83 ec 04             	sub    esp,0x4
c000d4b7:	50                   	push   eax
c000d4b8:	6a 00                	push   0x0
c000d4ba:	52                   	push   edx
c000d4bb:	e8 30 30 ff ff       	call   c00004f0 <memset>
c000d4c0:	83 c4 10             	add    esp,0x10
c000d4c3:	90                   	nop
c000d4c4:	c9                   	leave  
c000d4c5:	c3                   	ret    

c000d4c6 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d4c6:	55                   	push   ebp
c000d4c7:	89 e5                	mov    ebp,esp
c000d4c9:	83 ec 18             	sub    esp,0x18
c000d4cc:	a1 88 90 02 c0       	mov    eax,ds:0xc0029088
c000d4d1:	85 c0                	test   eax,eax
c000d4d3:	74 2a                	je     c000d4ff <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d4d5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d4db:	8b 15 88 90 02 c0    	mov    edx,DWORD PTR ds:0xc0029088
c000d4e1:	83 ec 04             	sub    esp,0x4
c000d4e4:	68 a0 90 02 c0       	push   0xc00290a0
c000d4e9:	83 ec 08             	sub    esp,0x8
c000d4ec:	89 e0                	mov    eax,esp
c000d4ee:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d4f1:	89 08                	mov    DWORD PTR [eax],ecx
c000d4f3:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d4f6:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d4fa:	ff d2                	call   edx
c000d4fc:	83 c4 10             	add    esp,0x10
c000d4ff:	fb                   	sti    
c000d500:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d507:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d50b:	0f 84 0d 01 00 00    	je     c000d61e <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d514:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d51a:	0f be c0             	movsx  eax,al
c000d51d:	85 c0                	test   eax,eax
c000d51f:	75 2c                	jne    c000d54d <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d521:	fa                   	cli    
c000d522:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d527:	83 c0 01             	add    eax,0x1
c000d52a:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000d52f:	e8 2c 85 00 00       	call   c0015a60 <schedule()>
c000d534:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d539:	83 e8 01             	sub    eax,0x1
c000d53c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000d541:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d546:	85 c0                	test   eax,eax
c000d548:	75 c7                	jne    c000d511 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d54a:	fb                   	sti    
c000d54b:	eb c4                	jmp    c000d511 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d54d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d550:	8d 50 01             	lea    edx,[eax+0x1]
c000d553:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d556:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d559:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d55f:	88 10                	mov    BYTE PTR [eax],dl
c000d561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d564:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d56a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d56d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d571:	83 f8 03             	cmp    eax,0x3
c000d574:	75 1e                	jne    c000d594 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d576:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d57b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d57d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d580:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d586:	83 ec 08             	sub    esp,0x8
c000d589:	6a 02                	push   0x2
c000d58b:	50                   	push   eax
c000d58c:	e8 6a 40 00 00       	call   c00115fb <KeRaiseSignal(SigHandlerBlock*, int)>
c000d591:	83 c4 10             	add    esp,0x10
c000d594:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d598:	83 f8 1c             	cmp    eax,0x1c
c000d59b:	75 1e                	jne    c000d5bb <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d59d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d5a2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d5a7:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d5ad:	83 ec 08             	sub    esp,0x8
c000d5b0:	6a 09                	push   0x9
c000d5b2:	50                   	push   eax
c000d5b3:	e8 43 40 00 00       	call   c00115fb <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5b8:	83 c4 10             	add    esp,0x10
c000d5bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5be:	05 02 01 00 00       	add    eax,0x102
c000d5c3:	83 ec 0c             	sub    esp,0xc
c000d5c6:	50                   	push   eax
c000d5c7:	e8 b4 2f ff ff       	call   c0000580 <strlen>
c000d5cc:	83 c4 10             	add    esp,0x10
c000d5cf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5d2:	81 c2 02 01 00 00    	add    edx,0x102
c000d5d8:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d5db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5de:	81 c2 02 01 00 00    	add    edx,0x102
c000d5e4:	83 ec 04             	sub    esp,0x4
c000d5e7:	50                   	push   eax
c000d5e8:	51                   	push   ecx
c000d5e9:	52                   	push   edx
c000d5ea:	e8 e1 2d ff ff       	call   c00003d0 <memmove>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d5f6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d5fa:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5fe:	83 f8 0a             	cmp    eax,0xa
c000d601:	74 16                	je     c000d619 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d603:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d607:	83 f8 03             	cmp    eax,0x3
c000d60a:	74 0d                	je     c000d619 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d60c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d610:	83 f8 1c             	cmp    eax,0x1c
c000d613:	0f 85 ee fe ff ff    	jne    c000d507 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d619:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d61c:	eb 03                	jmp    c000d621 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d61e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d621:	c9                   	leave  
c000d622:	c3                   	ret    
c000d623:	90                   	nop

c000d624 <Keyboard::Keyboard(char const*)>:
c000d624:	83 ec 0c             	sub    esp,0xc
c000d627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d62b:	83 ec 08             	sub    esp,0x8
c000d62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d632:	50                   	push   eax
c000d633:	e8 44 f1 ff ff       	call   c000c77c <Device::Device(char const*)>
c000d638:	83 c4 10             	add    esp,0x10
c000d63b:	ba 7c 15 02 c0       	mov    edx,0xc002157c
c000d640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d644:	89 10                	mov    DWORD PTR [eax],edx
c000d646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d64a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d654:	c6 05 84 90 02 c0 01 	mov    BYTE PTR ds:0xc0029084,0x1
c000d65b:	90                   	nop
c000d65c:	83 c4 0c             	add    esp,0xc
c000d65f:	c3                   	ret    

c000d660 <Keyboard::~Keyboard()>:
c000d660:	83 ec 0c             	sub    esp,0xc
c000d663:	ba 7c 15 02 c0       	mov    edx,0xc002157c
c000d668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d66c:	89 10                	mov    DWORD PTR [eax],edx
c000d66e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d672:	83 ec 0c             	sub    esp,0xc
c000d675:	50                   	push   eax
c000d676:	e8 6b ee ff ff       	call   c000c4e6 <Device::~Device()>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	90                   	nop
c000d67f:	83 c4 0c             	add    esp,0xc
c000d682:	c3                   	ret    
c000d683:	90                   	nop

c000d684 <Keyboard::~Keyboard()>:
c000d684:	83 ec 0c             	sub    esp,0xc
c000d687:	83 ec 0c             	sub    esp,0xc
c000d68a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d68e:	e8 cd ff ff ff       	call   c000d660 <Keyboard::~Keyboard()>
c000d693:	83 c4 10             	add    esp,0x10
c000d696:	83 ec 08             	sub    esp,0x8
c000d699:	68 5c 01 00 00       	push   0x15c
c000d69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6a2:	e8 65 d1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d6a7:	83 c4 10             	add    esp,0x10
c000d6aa:	83 c4 0c             	add    esp,0xc
c000d6ad:	c3                   	ret    

c000d6ae <LogicalDisk::close(int, int, void*)>:
c000d6ae:	83 c8 ff             	or     eax,0xffffffff
c000d6b1:	c3                   	ret    

c000d6b2 <LogicalDisk::~LogicalDisk()>:
c000d6b2:	83 ec 0c             	sub    esp,0xc
c000d6b5:	ba f4 15 02 c0       	mov    edx,0xc00215f4
c000d6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6be:	89 10                	mov    DWORD PTR [eax],edx
c000d6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c4:	83 ec 0c             	sub    esp,0xc
c000d6c7:	50                   	push   eax
c000d6c8:	e8 19 ee ff ff       	call   c000c4e6 <Device::~Device()>
c000d6cd:	83 c4 10             	add    esp,0x10
c000d6d0:	90                   	nop
c000d6d1:	83 c4 0c             	add    esp,0xc
c000d6d4:	c3                   	ret    
c000d6d5:	90                   	nop

c000d6d6 <LogicalDisk::~LogicalDisk()>:
c000d6d6:	83 ec 0c             	sub    esp,0xc
c000d6d9:	83 ec 0c             	sub    esp,0xc
c000d6dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6e0:	e8 cd ff ff ff       	call   c000d6b2 <LogicalDisk::~LogicalDisk()>
c000d6e5:	83 c4 10             	add    esp,0x10
c000d6e8:	83 ec 08             	sub    esp,0x8
c000d6eb:	68 78 01 00 00       	push   0x178
c000d6f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6f4:	e8 13 d1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d6f9:	83 c4 10             	add    esp,0x10
c000d6fc:	83 c4 0c             	add    esp,0xc
c000d6ff:	c3                   	ret    

c000d700 <LogicalDisk::open(int, int, void*)>:
c000d700:	83 ec 18             	sub    esp,0x18
c000d703:	68 a8 15 02 c0       	push   0xc00215a8
c000d708:	e8 50 3a 00 00       	call   c001115d <KePanic(char const*)>
c000d70d:	83 c8 ff             	or     eax,0xffffffff
c000d710:	83 c4 1c             	add    esp,0x1c
c000d713:	c3                   	ret    

c000d714 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d714:	53                   	push   ebx
c000d715:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d719:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d71d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d721:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d727:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d72d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d733:	77 10                	ja     c000d745 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d735:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d73b:	89 d3                	mov    ebx,edx
c000d73d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d743:	72 05                	jb     c000d74a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d745:	83 c8 ff             	or     eax,0xffffffff
c000d748:	89 c2                	mov    edx,eax
c000d74a:	5b                   	pop    ebx
c000d74b:	c3                   	ret    

c000d74c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d74c:	56                   	push   esi
c000d74d:	83 c8 ff             	or     eax,0xffffffff
c000d750:	53                   	push   ebx
c000d751:	89 c2                	mov    edx,eax
c000d753:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d757:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d75b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d75f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d765:	77 27                	ja     c000d78e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d767:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d76d:	89 d8                	mov    eax,ebx
c000d76f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d775:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d77a:	89 c2                	mov    edx,eax
c000d77c:	73 10                	jae    c000d78e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d77e:	89 c8                	mov    eax,ecx
c000d780:	89 da                	mov    edx,ebx
c000d782:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d788:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d78e:	5b                   	pop    ebx
c000d78f:	5e                   	pop    esi
c000d790:	c3                   	ret    
c000d791:	90                   	nop

c000d792 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d792:	83 ec 1c             	sub    esp,0x1c
c000d795:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d799:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d79d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7a9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d7b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d7b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7b8:	83 ec 08             	sub    esp,0x8
c000d7bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d7bf:	50                   	push   eax
c000d7c0:	e8 b7 ef ff ff       	call   c000c77c <Device::Device(char const*)>
c000d7c5:	83 c4 10             	add    esp,0x10
c000d7c8:	ba f4 15 02 c0       	mov    edx,0xc00215f4
c000d7cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d1:	89 10                	mov    DWORD PTR [eax],edx
c000d7d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d7de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d7e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ed:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d7f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f8:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d802:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d806:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d80a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d80e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d814:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d81a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d81e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d821:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d825:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d82b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d831:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d835:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d839:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d83f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d843:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d84d:	90                   	nop
c000d84e:	83 c4 1c             	add    esp,0x1c
c000d851:	c3                   	ret    

c000d852 <LogicalDisk::assignDriveLetter()>:
c000d852:	55                   	push   ebp
c000d853:	57                   	push   edi
c000d854:	56                   	push   esi
c000d855:	53                   	push   ebx
c000d856:	83 ec 14             	sub    esp,0x14
c000d859:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d85d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d863:	b0 41                	mov    al,0x41
c000d865:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d86b:	84 d2                	test   dl,dl
c000d86d:	75 02                	jne    c000d871 <LogicalDisk::assignDriveLetter()+0x1f>
c000d86f:	b0 43                	mov    al,0x43
c000d871:	8b 3d c0 94 02 c0    	mov    edi,DWORD PTR ds:0xc00294c0
c000d877:	0f b6 ca             	movzx  ecx,dl
c000d87a:	0f be e8             	movsx  ebp,al
c000d87d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d881:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d885:	8b 3d c4 94 02 c0    	mov    edi,DWORD PTR ds:0xc00294c4
c000d88b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d88f:	3c 43                	cmp    al,0x43
c000d891:	75 10                	jne    c000d8a3 <LogicalDisk::assignDriveLetter()+0x51>
c000d893:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d89a:	75 5a                	jne    c000d8f6 <LogicalDisk::assignDriveLetter()+0xa4>
c000d89c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d8a1:	75 53                	jne    c000d8f6 <LogicalDisk::assignDriveLetter()+0xa4>
c000d8a3:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d8a6:	ba 01 00 00 00       	mov    edx,0x1
c000d8ab:	89 34 24             	mov    DWORD PTR [esp],esi
c000d8ae:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d8b1:	d3 e2                	shl    edx,cl
c000d8b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d8b7:	89 d7                	mov    edi,edx
c000d8b9:	89 d6                	mov    esi,edx
c000d8bb:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d8bf:	c1 ff 1f             	sar    edi,0x1f
c000d8c2:	21 f9                	and    ecx,edi
c000d8c4:	09 d1                	or     ecx,edx
c000d8c6:	75 2e                	jne    c000d8f6 <LogicalDisk::assignDriveLetter()+0xa4>
c000d8c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d8cc:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d8d0:	09 f2                	or     edx,esi
c000d8d2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d8d5:	89 15 c0 94 02 c0    	mov    DWORD PTR ds:0xc00294c0,edx
c000d8db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d8df:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d8e5:	89 1c b5 e0 94 02 c0 	mov    DWORD PTR [esi*4-0x3ffd6b20],ebx
c000d8ec:	09 fa                	or     edx,edi
c000d8ee:	89 15 c4 94 02 c0    	mov    DWORD PTR ds:0xc00294c4,edx
c000d8f4:	eb 0d                	jmp    c000d903 <LogicalDisk::assignDriveLetter()+0xb1>
c000d8f6:	8d 50 01             	lea    edx,[eax+0x1]
c000d8f9:	45                   	inc    ebp
c000d8fa:	80 fa 5b             	cmp    dl,0x5b
c000d8fd:	88 d0                	mov    al,dl
c000d8ff:	75 8e                	jne    c000d88f <LogicalDisk::assignDriveLetter()+0x3d>
c000d901:	31 c0                	xor    eax,eax
c000d903:	83 c4 14             	add    esp,0x14
c000d906:	5b                   	pop    ebx
c000d907:	5e                   	pop    esi
c000d908:	5f                   	pop    edi
c000d909:	5d                   	pop    ebp
c000d90a:	c3                   	ret    
c000d90b:	90                   	nop

c000d90c <LogicalDisk::mount()>:
c000d90c:	56                   	push   esi
c000d90d:	53                   	push   ebx
c000d90e:	53                   	push   ebx
c000d90f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d913:	8b 1d 64 70 02 c0    	mov    ebx,DWORD PTR ds:0xc0027064
c000d919:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d923:	85 db                	test   ebx,ebx
c000d925:	74 27                	je     c000d94e <LogicalDisk::mount()+0x42>
c000d927:	51                   	push   ecx
c000d928:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d92f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d931:	83 e8 41             	sub    eax,0x41
c000d934:	50                   	push   eax
c000d935:	56                   	push   esi
c000d936:	53                   	push   ebx
c000d937:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d93a:	83 c4 10             	add    esp,0x10
c000d93d:	84 c0                	test   al,al
c000d93f:	74 08                	je     c000d949 <LogicalDisk::mount()+0x3d>
c000d941:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d947:	eb 07                	jmp    c000d950 <LogicalDisk::mount()+0x44>
c000d949:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d94c:	eb d5                	jmp    c000d923 <LogicalDisk::mount()+0x17>
c000d94e:	31 c0                	xor    eax,eax
c000d950:	5a                   	pop    edx
c000d951:	5b                   	pop    ebx
c000d952:	5e                   	pop    esi
c000d953:	c3                   	ret    

c000d954 <LogicalDisk::unmount()>:
c000d954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d958:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d962:	c3                   	ret    
c000d963:	90                   	nop

c000d964 <LogicalDisk::eject()>:
c000d964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d968:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d96e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d970:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d974:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d977:	90                   	nop

c000d978 <LogicalDisk::unassignDriveLetter()>:
c000d978:	57                   	push   edi
c000d979:	56                   	push   esi
c000d97a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d97e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d985:	85 c9                	test   ecx,ecx
c000d987:	75 0f                	jne    c000d998 <LogicalDisk::unassignDriveLetter()+0x20>
c000d989:	c7 44 24 0c cc 15 02 c0 	mov    DWORD PTR [esp+0xc],0xc00215cc
c000d991:	5e                   	pop    esi
c000d992:	5f                   	pop    edi
c000d993:	e9 c5 37 00 00       	jmp    c001115d <KePanic(char const*)>
c000d998:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d99f:	83 e9 41             	sub    ecx,0x41
c000d9a2:	b8 01 00 00 00       	mov    eax,0x1
c000d9a7:	c7 04 8d e0 94 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6b20],0x0
c000d9b2:	d3 e0                	shl    eax,cl
c000d9b4:	89 c7                	mov    edi,eax
c000d9b6:	f7 d0                	not    eax
c000d9b8:	c1 ff 1f             	sar    edi,0x1f
c000d9bb:	21 05 c0 94 02 c0    	and    DWORD PTR ds:0xc00294c0,eax
c000d9c1:	89 fe                	mov    esi,edi
c000d9c3:	f7 d6                	not    esi
c000d9c5:	21 35 c4 94 02 c0    	and    DWORD PTR ds:0xc00294c4,esi
c000d9cb:	5e                   	pop    esi
c000d9cc:	5f                   	pop    edi
c000d9cd:	c3                   	ret    

c000d9ce <LogicalDisk::read(unsigned long long, int, void*)>:
c000d9ce:	57                   	push   edi
c000d9cf:	56                   	push   esi
c000d9d0:	53                   	push   ebx
c000d9d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d9d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d9d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d9dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d9e1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d9e7:	77 41                	ja     c000da2a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d9e9:	99                   	cdq    
c000d9ea:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d9f0:	01 c8                	add    eax,ecx
c000d9f2:	11 da                	adc    edx,ebx
c000d9f4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d9fa:	19 d7                	sbb    edi,edx
c000d9fc:	72 33                	jb     c000da31 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d9fe:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da04:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da0a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da0e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da12:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da18:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da22:	5b                   	pop    ebx
c000da23:	5e                   	pop    esi
c000da24:	5f                   	pop    edi
c000da25:	e9 d4 0a 00 00       	jmp    c000e4fe <VCache::read(unsigned long long, int, void*)>
c000da2a:	b8 05 00 00 00       	mov    eax,0x5
c000da2f:	eb 05                	jmp    c000da36 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000da31:	b8 07 00 00 00       	mov    eax,0x7
c000da36:	5b                   	pop    ebx
c000da37:	5e                   	pop    esi
c000da38:	5f                   	pop    edi
c000da39:	c3                   	ret    

c000da3a <LogicalDisk::write(unsigned long long, int, void*)>:
c000da3a:	57                   	push   edi
c000da3b:	56                   	push   esi
c000da3c:	53                   	push   ebx
c000da3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da45:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da4d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000da53:	77 41                	ja     c000da96 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000da55:	99                   	cdq    
c000da56:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da5c:	01 c8                	add    eax,ecx
c000da5e:	11 da                	adc    edx,ebx
c000da60:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da66:	19 d7                	sbb    edi,edx
c000da68:	72 33                	jb     c000da9d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000da6a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da70:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da76:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da7a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da7e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da84:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da8e:	5b                   	pop    ebx
c000da8f:	5e                   	pop    esi
c000da90:	5f                   	pop    edi
c000da91:	e9 6e 09 00 00       	jmp    c000e404 <VCache::write(unsigned long long, int, void*)>
c000da96:	b8 05 00 00 00       	mov    eax,0x5
c000da9b:	eb 05                	jmp    c000daa2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000da9d:	b8 07 00 00 00       	mov    eax,0x7
c000daa2:	5b                   	pop    ebx
c000daa3:	5e                   	pop    esi
c000daa4:	5f                   	pop    edi
c000daa5:	c3                   	ret    
c000daa6:	66 90                	xchg   ax,ax

c000daa8 <Mouse::Mouse(char const*)>:
c000daa8:	83 ec 0c             	sub    esp,0xc
c000daab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daaf:	83 ec 08             	sub    esp,0x8
c000dab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dab6:	50                   	push   eax
c000dab7:	e8 c0 ec ff ff       	call   c000c77c <Device::Device(char const*)>
c000dabc:	83 c4 10             	add    esp,0x10
c000dabf:	ba 20 16 02 c0       	mov    edx,0xc0021620
c000dac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac8:	89 10                	mov    DWORD PTR [eax],edx
c000daca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dace:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dad8:	90                   	nop
c000dad9:	83 c4 0c             	add    esp,0xc
c000dadc:	c3                   	ret    
c000dadd:	90                   	nop
c000dade:	66 90                	xchg   ax,ax

c000dae0 <Mouse::~Mouse()>:
c000dae0:	83 ec 0c             	sub    esp,0xc
c000dae3:	ba 20 16 02 c0       	mov    edx,0xc0021620
c000dae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daec:	89 10                	mov    DWORD PTR [eax],edx
c000daee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf2:	83 ec 0c             	sub    esp,0xc
c000daf5:	50                   	push   eax
c000daf6:	e8 eb e9 ff ff       	call   c000c4e6 <Device::~Device()>
c000dafb:	83 c4 10             	add    esp,0x10
c000dafe:	90                   	nop
c000daff:	83 c4 0c             	add    esp,0xc
c000db02:	c3                   	ret    
c000db03:	90                   	nop

c000db04 <Mouse::~Mouse()>:
c000db04:	83 ec 0c             	sub    esp,0xc
c000db07:	83 ec 0c             	sub    esp,0xc
c000db0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db0e:	e8 cd ff ff ff       	call   c000dae0 <Mouse::~Mouse()>
c000db13:	83 c4 10             	add    esp,0x10
c000db16:	83 ec 08             	sub    esp,0x8
c000db19:	68 58 01 00 00       	push   0x158
c000db1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db22:	e8 e5 cc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000db27:	83 c4 10             	add    esp,0x10
c000db2a:	83 c4 0c             	add    esp,0xc
c000db2d:	c3                   	ret    

c000db2e <NIC::getMAC()>:
c000db2e:	31 c0                	xor    eax,eax
c000db30:	31 d2                	xor    edx,edx
c000db32:	c3                   	ret    
c000db33:	90                   	nop

c000db34 <NIC::write(int, unsigned char*, int*)>:
c000db34:	b8 01 00 00 00       	mov    eax,0x1
c000db39:	c3                   	ret    

c000db3a <NIC::NIC(char const*)>:
c000db3a:	83 ec 0c             	sub    esp,0xc
c000db3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db41:	83 ec 08             	sub    esp,0x8
c000db44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db48:	50                   	push   eax
c000db49:	e8 2e ec ff ff       	call   c000c77c <Device::Device(char const*)>
c000db4e:	83 c4 10             	add    esp,0x10
c000db51:	ba 4c 16 02 c0       	mov    edx,0xc002164c
c000db56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db5a:	89 10                	mov    DWORD PTR [eax],edx
c000db5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db60:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000db6a:	90                   	nop
c000db6b:	83 c4 0c             	add    esp,0xc
c000db6e:	c3                   	ret    
c000db6f:	90                   	nop

c000db70 <NIC::~NIC()>:
c000db70:	83 ec 0c             	sub    esp,0xc
c000db73:	ba 4c 16 02 c0       	mov    edx,0xc002164c
c000db78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db7c:	89 10                	mov    DWORD PTR [eax],edx
c000db7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db82:	83 ec 0c             	sub    esp,0xc
c000db85:	50                   	push   eax
c000db86:	e8 5b e9 ff ff       	call   c000c4e6 <Device::~Device()>
c000db8b:	83 c4 10             	add    esp,0x10
c000db8e:	90                   	nop
c000db8f:	83 c4 0c             	add    esp,0xc
c000db92:	c3                   	ret    
c000db93:	90                   	nop

c000db94 <NIC::~NIC()>:
c000db94:	83 ec 0c             	sub    esp,0xc
c000db97:	83 ec 0c             	sub    esp,0xc
c000db9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9e:	e8 cd ff ff ff       	call   c000db70 <NIC::~NIC()>
c000dba3:	83 c4 10             	add    esp,0x10
c000dba6:	83 ec 08             	sub    esp,0x8
c000dba9:	68 58 01 00 00       	push   0x158
c000dbae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb2:	e8 55 cc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dbb7:	83 c4 10             	add    esp,0x10
c000dbba:	83 c4 0c             	add    esp,0xc
c000dbbd:	c3                   	ret    

c000dbbe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbbe:	55                   	push   ebp
c000dbbf:	57                   	push   edi
c000dbc0:	56                   	push   esi
c000dbc1:	53                   	push   ebx
c000dbc2:	81 ec 28 01 00 00    	sub    esp,0x128
c000dbc8:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dbcf:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dbd6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dbdd:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dbe4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dbe8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dbec:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dbf3:	e8 80 ec ff ff       	call   c000c878 <Device::getName()>
c000dbf8:	5a                   	pop    edx
c000dbf9:	59                   	pop    ecx
c000dbfa:	50                   	push   eax
c000dbfb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dbff:	55                   	push   ebp
c000dc00:	e8 4b 2a ff ff       	call   c0000650 <strcpy>
c000dc05:	5b                   	pop    ebx
c000dc06:	58                   	pop    eax
c000dc07:	68 78 16 02 c0       	push   0xc0021678
c000dc0c:	55                   	push   ebp
c000dc0d:	e8 5e 2c ff ff       	call   c0000870 <strcat>
c000dc12:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dc19:	e8 b5 9e ff ff       	call   c0007ad3 <malloc>
c000dc1e:	83 c4 0c             	add    esp,0xc
c000dc21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc29:	89 c3                	mov    ebx,eax
c000dc2b:	57                   	push   edi
c000dc2c:	56                   	push   esi
c000dc2d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dc34:	55                   	push   ebp
c000dc35:	50                   	push   eax
c000dc36:	e8 57 fb ff ff       	call   c000d792 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dc3b:	83 c4 14             	add    esp,0x14
c000dc3e:	53                   	push   ebx
c000dc3f:	e8 0e fc ff ff       	call   c000d852 <LogicalDisk::assignDriveLetter()>
c000dc44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc47:	e8 c0 fc ff ff       	call   c000d90c <LogicalDisk::mount()>
c000dc4c:	58                   	pop    eax
c000dc4d:	5a                   	pop    edx
c000dc4e:	53                   	push   ebx
c000dc4f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc56:	e8 89 e9 ff ff       	call   c000c5e4 <Device::addChild(Device*)>
c000dc5b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dc61:	5b                   	pop    ebx
c000dc62:	5e                   	pop    esi
c000dc63:	5f                   	pop    edi
c000dc64:	5d                   	pop    ebp
c000dc65:	c3                   	ret    

c000dc66 <createPartitionsForDisk(PhysicalDisk*)>:
c000dc66:	55                   	push   ebp
c000dc67:	57                   	push   edi
c000dc68:	56                   	push   esi
c000dc69:	53                   	push   ebx
c000dc6a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dc70:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dc77:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dc7d:	3d 00 02 00 00       	cmp    eax,0x200
c000dc82:	74 27                	je     c000dcab <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dc84:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dc8a:	83 ec 10             	sub    esp,0x10
c000dc8d:	99                   	cdq    
c000dc8e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dc94:	52                   	push   edx
c000dc95:	50                   	push   eax
c000dc96:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dc9a:	c1 e6 0a             	shl    esi,0xa
c000dc9d:	89 fd                	mov    ebp,edi
c000dc9f:	55                   	push   ebp
c000dca0:	56                   	push   esi
c000dca1:	e8 7a 14 01 00       	call   c001f120 <__udivdi3>
c000dca6:	e9 b9 00 00 00       	jmp    c000dd64 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dcab:	83 ec 0c             	sub    esp,0xc
c000dcae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcb0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000dcb4:	56                   	push   esi
c000dcb5:	6a 01                	push   0x1
c000dcb7:	6a 00                	push   0x0
c000dcb9:	6a 00                	push   0x0
c000dcbb:	53                   	push   ebx
c000dcbc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dcbf:	83 c4 20             	add    esp,0x20
c000dcc2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000dcca:	75 0a                	jne    c000dcd6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000dccc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000dcd4:	74 2c                	je     c000dd02 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000dcd6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dcdc:	83 ec 10             	sub    esp,0x10
c000dcdf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dce5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dceb:	89 f7                	mov    edi,esi
c000dced:	c1 ff 1f             	sar    edi,0x1f
c000dcf0:	57                   	push   edi
c000dcf1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dcf5:	56                   	push   esi
c000dcf6:	c1 e0 0a             	shl    eax,0xa
c000dcf9:	52                   	push   edx
c000dcfa:	50                   	push   eax
c000dcfb:	e8 20 14 01 00       	call   c001f120 <__udivdi3>
c000dd00:	eb 62                	jmp    c000dd64 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dd02:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000dd09:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000dd10:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000dd17:	89 cf                	mov    edi,ecx
c000dd19:	83 e2 7f             	and    edx,0x7f
c000dd1c:	83 e7 7f             	and    edi,0x7f
c000dd1f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000dd22:	83 e0 7f             	and    eax,0x7f
c000dd25:	8d 14 01             	lea    edx,[ecx+eax*1]
c000dd28:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000dd2f:	83 e0 7f             	and    eax,0x7f
c000dd32:	01 d0                	add    eax,edx
c000dd34:	84 c0                	test   al,al
c000dd36:	89 c5                	mov    ebp,eax
c000dd38:	74 41                	je     c000dd7b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000dd3a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd40:	83 ec 10             	sub    esp,0x10
c000dd43:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd49:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd4f:	89 f7                	mov    edi,esi
c000dd51:	c1 ff 1f             	sar    edi,0x1f
c000dd54:	57                   	push   edi
c000dd55:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd59:	56                   	push   esi
c000dd5a:	c1 e0 0a             	shl    eax,0xa
c000dd5d:	52                   	push   edx
c000dd5e:	50                   	push   eax
c000dd5f:	e8 bc 13 01 00       	call   c001f120 <__udivdi3>
c000dd64:	83 c4 14             	add    esp,0x14
c000dd67:	52                   	push   edx
c000dd68:	50                   	push   eax
c000dd69:	6a 00                	push   0x0
c000dd6b:	6a 00                	push   0x0
c000dd6d:	53                   	push   ebx
c000dd6e:	e8 4b fe ff ff       	call   c000dbbe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd73:	83 c4 20             	add    esp,0x20
c000dd76:	e9 73 01 00 00       	jmp    c000deee <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000dd7b:	89 f0                	mov    eax,esi
c000dd7d:	31 c9                	xor    ecx,ecx
c000dd7f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000dd86:	75 02                	jne    c000dd8a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000dd88:	89 cd                	mov    ebp,ecx
c000dd8a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000dd92:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000dd99:	83 c0 10             	add    eax,0x10
c000dd9c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000dda4:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000ddab:	c1 e2 08             	shl    edx,0x8
c000ddae:	c1 e6 10             	shl    esi,0x10
c000ddb1:	09 f2                	or     edx,esi
c000ddb3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000ddba:	09 f2                	or     edx,esi
c000ddbc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ddc3:	c1 e6 18             	shl    esi,0x18
c000ddc6:	09 f2                	or     edx,esi
c000ddc8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ddcf:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ddd3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ddda:	c1 e6 10             	shl    esi,0x10
c000dddd:	c1 e2 08             	shl    edx,0x8
c000dde0:	09 f2                	or     edx,esi
c000dde2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000dde9:	09 f2                	or     edx,esi
c000ddeb:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ddf2:	c1 e6 18             	shl    esi,0x18
c000ddf5:	09 f2                	or     edx,esi
c000ddf7:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ddfb:	41                   	inc    ecx
c000ddfc:	83 f9 04             	cmp    ecx,0x4
c000ddff:	0f 85 7a ff ff ff    	jne    c000dd7f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000de05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de09:	83 f0 01             	xor    eax,0x1
c000de0c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000de10:	75 4f                	jne    c000de61 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de16:	83 f0 01             	xor    eax,0x1
c000de19:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000de1d:	75 42                	jne    c000de61 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de1f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000de2d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de33:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000de3b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de41:	89 f7                	mov    edi,esi
c000de43:	c1 ff 1f             	sar    edi,0x1f
c000de46:	57                   	push   edi
c000de47:	56                   	push   esi
c000de48:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de4c:	52                   	push   edx
c000de4d:	c1 e0 0a             	shl    eax,0xa
c000de50:	50                   	push   eax
c000de51:	e8 ca 12 01 00       	call   c001f120 <__udivdi3>
c000de56:	83 c4 10             	add    esp,0x10
c000de59:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de5d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de61:	89 e8                	mov    eax,ebp
c000de63:	0f b6 e8             	movzx  ebp,al
c000de66:	85 ed                	test   ebp,ebp
c000de68:	74 50                	je     c000deba <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000de6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de6e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de72:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de76:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000de7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de7e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000de82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de86:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000de8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de92:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de9a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000de9e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dea2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000dea6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000deaa:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000deae:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000deb2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000deb6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000deba:	31 ed                	xor    ebp,ebp
c000debc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000dec0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dec4:	89 f8                	mov    eax,edi
c000dec6:	09 f0                	or     eax,esi
c000dec8:	74 1e                	je     c000dee8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000deca:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dece:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000ded2:	89 d1                	mov    ecx,edx
c000ded4:	09 c1                	or     ecx,eax
c000ded6:	74 10                	je     c000dee8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000ded8:	83 ec 0c             	sub    esp,0xc
c000dedb:	57                   	push   edi
c000dedc:	56                   	push   esi
c000dedd:	52                   	push   edx
c000dede:	50                   	push   eax
c000dedf:	53                   	push   ebx
c000dee0:	e8 d9 fc ff ff       	call   c000dbbe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dee5:	83 c4 20             	add    esp,0x20
c000dee8:	45                   	inc    ebp
c000dee9:	83 fd 04             	cmp    ebp,0x4
c000deec:	75 ce                	jne    c000debc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000deee:	81 c4 5c 02 00 00    	add    esp,0x25c
c000def4:	5b                   	pop    ebx
c000def5:	5e                   	pop    esi
c000def6:	5f                   	pop    edi
c000def7:	5d                   	pop    ebp
c000def8:	c3                   	ret    
c000def9:	66 90                	xchg   ax,ax
c000defb:	90                   	nop

c000defc <Serial::Serial(char const*)>:
c000defc:	83 ec 0c             	sub    esp,0xc
c000deff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df03:	83 ec 08             	sub    esp,0x8
c000df06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df0a:	50                   	push   eax
c000df0b:	e8 6c e8 ff ff       	call   c000c77c <Device::Device(char const*)>
c000df10:	83 c4 10             	add    esp,0x10
c000df13:	ba 8c 16 02 c0       	mov    edx,0xc002168c
c000df18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df1c:	89 10                	mov    DWORD PTR [eax],edx
c000df1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df22:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000df2c:	90                   	nop
c000df2d:	83 c4 0c             	add    esp,0xc
c000df30:	c3                   	ret    
c000df31:	90                   	nop
c000df32:	66 90                	xchg   ax,ax

c000df34 <Serial::~Serial()>:
c000df34:	83 ec 0c             	sub    esp,0xc
c000df37:	ba 8c 16 02 c0       	mov    edx,0xc002168c
c000df3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df40:	89 10                	mov    DWORD PTR [eax],edx
c000df42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df46:	83 ec 0c             	sub    esp,0xc
c000df49:	50                   	push   eax
c000df4a:	e8 97 e5 ff ff       	call   c000c4e6 <Device::~Device()>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	90                   	nop
c000df53:	83 c4 0c             	add    esp,0xc
c000df56:	c3                   	ret    
c000df57:	90                   	nop

c000df58 <Serial::~Serial()>:
c000df58:	83 ec 0c             	sub    esp,0xc
c000df5b:	83 ec 0c             	sub    esp,0xc
c000df5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df62:	e8 cd ff ff ff       	call   c000df34 <Serial::~Serial()>
c000df67:	83 c4 10             	add    esp,0x10
c000df6a:	83 ec 08             	sub    esp,0x8
c000df6d:	68 58 01 00 00       	push   0x158
c000df72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df76:	e8 91 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000df7b:	83 c4 10             	add    esp,0x10
c000df7e:	83 c4 0c             	add    esp,0xc
c000df81:	c3                   	ret    
c000df82:	66 90                	xchg   ax,ax

c000df84 <Timer::Timer(char const*)>:
c000df84:	83 ec 0c             	sub    esp,0xc
c000df87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8b:	83 ec 08             	sub    esp,0x8
c000df8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df92:	50                   	push   eax
c000df93:	e8 e4 e7 ff ff       	call   c000c77c <Device::Device(char const*)>
c000df98:	83 c4 10             	add    esp,0x10
c000df9b:	ba d0 16 02 c0       	mov    edx,0xc00216d0
c000dfa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa4:	89 10                	mov    DWORD PTR [eax],edx
c000dfa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfaa:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000dfb4:	90                   	nop
c000dfb5:	83 c4 0c             	add    esp,0xc
c000dfb8:	c3                   	ret    
c000dfb9:	90                   	nop
c000dfba:	66 90                	xchg   ax,ax

c000dfbc <Timer::~Timer()>:
c000dfbc:	83 ec 0c             	sub    esp,0xc
c000dfbf:	ba d0 16 02 c0       	mov    edx,0xc00216d0
c000dfc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc8:	89 10                	mov    DWORD PTR [eax],edx
c000dfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfce:	83 ec 0c             	sub    esp,0xc
c000dfd1:	50                   	push   eax
c000dfd2:	e8 0f e5 ff ff       	call   c000c4e6 <Device::~Device()>
c000dfd7:	83 c4 10             	add    esp,0x10
c000dfda:	90                   	nop
c000dfdb:	83 c4 0c             	add    esp,0xc
c000dfde:	c3                   	ret    
c000dfdf:	90                   	nop

c000dfe0 <Timer::~Timer()>:
c000dfe0:	83 ec 0c             	sub    esp,0xc
c000dfe3:	83 ec 0c             	sub    esp,0xc
c000dfe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfea:	e8 cd ff ff ff       	call   c000dfbc <Timer::~Timer()>
c000dfef:	83 c4 10             	add    esp,0x10
c000dff2:	83 ec 08             	sub    esp,0x8
c000dff5:	68 5c 01 00 00       	push   0x15c
c000dffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dffe:	e8 09 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e003:	83 c4 10             	add    esp,0x10
c000e006:	83 c4 0c             	add    esp,0xc
c000e009:	c3                   	ret    

c000e00a <Timer::read()>:
c000e00a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e00e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e014:	c3                   	ret    

c000e015 <setupTimer(int)>:
c000e015:	53                   	push   ebx
c000e016:	83 ec 14             	sub    esp,0x14
c000e019:	68 5c 01 00 00       	push   0x15c
c000e01e:	e8 b0 9a ff ff       	call   c0007ad3 <malloc>
c000e023:	89 04 24             	mov    DWORD PTR [esp],eax
c000e026:	89 c3                	mov    ebx,eax
c000e028:	e8 57 09 01 00       	call   c001e984 <PIT::PIT()>
c000e02d:	58                   	pop    eax
c000e02e:	5a                   	pop    edx
c000e02f:	53                   	push   ebx
c000e030:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e036:	e8 a9 e5 ff ff       	call   c000c5e4 <Device::addChild(Device*)>
c000e03b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e03d:	6a 00                	push   0x0
c000e03f:	6a 00                	push   0x0
c000e041:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e045:	53                   	push   ebx
c000e046:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e049:	83 c4 28             	add    esp,0x28
c000e04c:	89 d8                	mov    eax,ebx
c000e04e:	5b                   	pop    ebx
c000e04f:	c3                   	ret    

c000e050 <timerHandler(unsigned int)>:
c000e050:	56                   	push   esi
c000e051:	53                   	push   ebx
c000e052:	51                   	push   ecx
c000e053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e057:	01 05 4c 95 02 c0    	add    DWORD PTR ds:0xc002954c,eax
c000e05d:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e064:	0f 84 4a 01 00 00    	je     c000e1b4 <timerHandler(unsigned int)+0x164>
c000e06a:	fa                   	cli    
c000e06b:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000e071:	83 ec 0c             	sub    esp,0xc
c000e074:	68 78 a4 02 c0       	push   0xc002a478
c000e079:	ff 05 64 a4 02 c0    	inc    DWORD PTR ds:0xc002a464
c000e07f:	e8 6c 16 01 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e084:	83 c4 10             	add    esp,0x10
c000e087:	84 c0                	test   al,al
c000e089:	0f 85 a1 00 00 00    	jne    c000e130 <timerHandler(unsigned int)+0xe0>
c000e08f:	83 ec 0c             	sub    esp,0xc
c000e092:	68 78 a4 02 c0       	push   0xc002a478
c000e097:	e8 70 16 01 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e09c:	83 c4 10             	add    esp,0x10
c000e09f:	89 c6                	mov    esi,eax
c000e0a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e0a4:	83 ec 0c             	sub    esp,0xc
c000e0a7:	68 78 a4 02 c0       	push   0xc002a478
c000e0ac:	e8 5b 16 01 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0b1:	c7 04 24 78 a4 02 c0 	mov    DWORD PTR [esp],0xc002a478
c000e0b8:	89 c3                	mov    ebx,eax
c000e0ba:	e8 55 16 01 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e0bf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e0c2:	83 c4 10             	add    esp,0x10
c000e0c5:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c000e0cb:	77 23                	ja     c000e0f0 <timerHandler(unsigned int)+0xa0>
c000e0cd:	83 ec 0c             	sub    esp,0xc
c000e0d0:	53                   	push   ebx
c000e0d1:	e8 82 7e 00 00       	call   c0015f58 <unblockTask(ThreadControlBlock*)>
c000e0d6:	83 c4 10             	add    esp,0x10
c000e0d9:	39 de                	cmp    esi,ebx
c000e0db:	75 27                	jne    c000e104 <timerHandler(unsigned int)+0xb4>
c000e0dd:	83 ec 0c             	sub    esp,0xc
c000e0e0:	68 78 a4 02 c0       	push   0xc002a478
c000e0e5:	e8 22 16 01 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0ea:	89 c6                	mov    esi,eax
c000e0ec:	eb 12                	jmp    c000e100 <timerHandler(unsigned int)+0xb0>
c000e0ee:	66 90                	xchg   ax,ax
c000e0f0:	52                   	push   edx
c000e0f1:	52                   	push   edx
c000e0f2:	53                   	push   ebx
c000e0f3:	68 78 a4 02 c0       	push   0xc002a478
c000e0f8:	e8 d3 16 01 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e0fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e100:	83 c4 10             	add    esp,0x10
c000e103:	90                   	nop
c000e104:	83 ec 0c             	sub    esp,0xc
c000e107:	68 78 a4 02 c0       	push   0xc002a478
c000e10c:	e8 df 15 01 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e111:	83 c4 10             	add    esp,0x10
c000e114:	84 c0                	test   al,al
c000e116:	75 18                	jne    c000e130 <timerHandler(unsigned int)+0xe0>
c000e118:	83 ec 0c             	sub    esp,0xc
c000e11b:	68 78 a4 02 c0       	push   0xc002a478
c000e120:	e8 e7 15 01 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	39 f0                	cmp    eax,esi
c000e12a:	0f 85 74 ff ff ff    	jne    c000e0a4 <timerHandler(unsigned int)+0x54>
c000e130:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e135:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e139:	74 41                	je     c000e17c <timerHandler(unsigned int)+0x12c>
c000e13b:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e142:	74 38                	je     c000e17c <timerHandler(unsigned int)+0x12c>
c000e144:	fa                   	cli    
c000e145:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000e14b:	a1 4c 95 02 c0       	mov    eax,ds:0xc002954c
c000e150:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e156:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e159:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e15f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e162:	72 08                	jb     c000e16c <timerHandler(unsigned int)+0x11c>
c000e164:	e8 f7 78 00 00       	call   c0015a60 <schedule()>
c000e169:	8d 76 00             	lea    esi,[esi+0x0]
c000e16c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000e171:	48                   	dec    eax
c000e172:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000e177:	75 03                	jne    c000e17c <timerHandler(unsigned int)+0x12c>
c000e179:	fb                   	sti    
c000e17a:	66 90                	xchg   ax,ax
c000e17c:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000e181:	48                   	dec    eax
c000e182:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000e187:	75 1b                	jne    c000e1a4 <timerHandler(unsigned int)+0x154>
c000e189:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c000e190:	74 12                	je     c000e1a4 <timerHandler(unsigned int)+0x154>
c000e192:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c000e19c:	e8 bf 78 00 00       	call   c0015a60 <schedule()>
c000e1a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e1a4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000e1a9:	48                   	dec    eax
c000e1aa:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000e1af:	75 03                	jne    c000e1b4 <timerHandler(unsigned int)+0x164>
c000e1b1:	fb                   	sti    
c000e1b2:	66 90                	xchg   ax,ax
c000e1b4:	58                   	pop    eax
c000e1b5:	5b                   	pop    ebx
c000e1b6:	5e                   	pop    esi
c000e1b7:	c3                   	ret    

c000e1b8 <VCache::VCache(PhysicalDisk*)>:
c000e1b8:	53                   	push   ebx
c000e1b9:	83 ec 18             	sub    esp,0x18
c000e1bc:	ba 00 17 02 c0       	mov    edx,0xc0021700
c000e1c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1c5:	89 10                	mov    DWORD PTR [eax],edx
c000e1c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1cb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e1d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1d6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e1dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e1e8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e1ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e1fa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e205:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e20c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e210:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e214:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e218:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e21f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e22a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e22e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e232:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e23a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e23e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e242:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e249:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e258:	e8 76 98 ff ff       	call   c0007ad3 <malloc>
c000e25d:	83 c4 10             	add    esp,0x10
c000e260:	89 c3                	mov    ebx,eax
c000e262:	83 ec 0c             	sub    esp,0xc
c000e265:	53                   	push   ebx
c000e266:	e8 95 75 00 00       	call   c0015800 <Mutex::Mutex()>
c000e26b:	83 c4 10             	add    esp,0x10
c000e26e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e272:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e275:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e279:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e27d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e280:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e284:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e28b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e28f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e299:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e29c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2a0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e2a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e2b0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e2b3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e2b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ba:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e2be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2c2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e2c8:	05 00 02 00 00       	add    eax,0x200
c000e2cd:	c1 e0 03             	shl    eax,0x3
c000e2d0:	83 ec 0c             	sub    esp,0xc
c000e2d3:	50                   	push   eax
c000e2d4:	e8 fa 97 ff ff       	call   c0007ad3 <malloc>
c000e2d9:	83 c4 10             	add    esp,0x10
c000e2dc:	89 c2                	mov    edx,eax
c000e2de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e2e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2e9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e2f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2f4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e2f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2fc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e302:	89 d0                	mov    eax,edx
c000e304:	c1 e0 02             	shl    eax,0x2
c000e307:	01 d0                	add    eax,edx
c000e309:	c1 e0 04             	shl    eax,0x4
c000e30c:	83 ec 0c             	sub    esp,0xc
c000e30f:	50                   	push   eax
c000e310:	e8 be 97 ff ff       	call   c0007ad3 <malloc>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	89 c2                	mov    edx,eax
c000e31a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e31e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e321:	90                   	nop
c000e322:	83 c4 18             	add    esp,0x18
c000e325:	5b                   	pop    ebx
c000e326:	c3                   	ret    
c000e327:	90                   	nop

c000e328 <VCache::invalidateReadBuffer()>:
c000e328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e32c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e332:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e336:	c3                   	ret    
c000e337:	90                   	nop

c000e338 <VCache::writeWriteBuffer()>:
c000e338:	53                   	push   ebx
c000e339:	83 ec 08             	sub    esp,0x8
c000e33c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e340:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e344:	74 1e                	je     c000e364 <VCache::writeWriteBuffer()+0x2c>
c000e346:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e349:	83 ec 0c             	sub    esp,0xc
c000e34c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e34e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e351:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e354:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e357:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e35a:	50                   	push   eax
c000e35b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e35e:	83 c4 20             	add    esp,0x20
c000e361:	8d 76 00             	lea    esi,[esi+0x0]
c000e364:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e36b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e372:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e376:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e37d:	83 c4 08             	add    esp,0x8
c000e380:	5b                   	pop    ebx
c000e381:	c3                   	ret    
c000e382:	66 90                	xchg   ax,ax

c000e384 <VCache::~VCache()>:
c000e384:	83 ec 0c             	sub    esp,0xc
c000e387:	ba 00 17 02 c0       	mov    edx,0xc0021700
c000e38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e390:	89 10                	mov    DWORD PTR [eax],edx
c000e392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e396:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e399:	0f b6 c0             	movzx  eax,al
c000e39c:	85 c0                	test   eax,eax
c000e39e:	74 10                	je     c000e3b0 <VCache::~VCache()+0x2c>
c000e3a0:	83 ec 0c             	sub    esp,0xc
c000e3a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3a7:	e8 8c ff ff ff       	call   c000e338 <VCache::writeWriteBuffer()>
c000e3ac:	83 c4 10             	add    esp,0x10
c000e3af:	90                   	nop
c000e3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e3b7:	83 ec 0c             	sub    esp,0xc
c000e3ba:	50                   	push   eax
c000e3bb:	e8 23 97 ff ff       	call   c0007ae3 <free>
c000e3c0:	83 c4 10             	add    esp,0x10
c000e3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e3ca:	83 ec 0c             	sub    esp,0xc
c000e3cd:	50                   	push   eax
c000e3ce:	e8 10 97 ff ff       	call   c0007ae3 <free>
c000e3d3:	83 c4 10             	add    esp,0x10
c000e3d6:	90                   	nop
c000e3d7:	83 c4 0c             	add    esp,0xc
c000e3da:	c3                   	ret    
c000e3db:	90                   	nop

c000e3dc <VCache::~VCache()>:
c000e3dc:	83 ec 0c             	sub    esp,0xc
c000e3df:	83 ec 0c             	sub    esp,0xc
c000e3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3e6:	e8 99 ff ff ff       	call   c000e384 <VCache::~VCache()>
c000e3eb:	83 c4 10             	add    esp,0x10
c000e3ee:	83 ec 08             	sub    esp,0x8
c000e3f1:	6a 44                	push   0x44
c000e3f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3f7:	e8 10 c4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e3fc:	83 c4 10             	add    esp,0x10
c000e3ff:	83 c4 0c             	add    esp,0xc
c000e402:	c3                   	ret    
c000e403:	90                   	nop

c000e404 <VCache::write(unsigned long long, int, void*)>:
c000e404:	55                   	push   ebp
c000e405:	57                   	push   edi
c000e406:	56                   	push   esi
c000e407:	53                   	push   ebx
c000e408:	83 ec 1c             	sub    esp,0x1c
c000e40b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e40f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e413:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e417:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e41b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e41f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e423:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e427:	74 0f                	je     c000e438 <VCache::write(unsigned long long, int, void*)+0x34>
c000e429:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e42d:	53                   	push   ebx
c000e42e:	e8 f5 fe ff ff       	call   c000e328 <VCache::invalidateReadBuffer()>
c000e433:	58                   	pop    eax
c000e434:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e438:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e43c:	74 66                	je     c000e4a4 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e43e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e441:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e445:	99                   	cdq    
c000e446:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e449:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e44c:	89 c6                	mov    esi,eax
c000e44e:	31 ce                	xor    esi,ecx
c000e450:	89 d0                	mov    eax,edx
c000e452:	31 e8                	xor    eax,ebp
c000e454:	09 c6                	or     esi,eax
c000e456:	75 38                	jne    c000e490 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e458:	83 ff 01             	cmp    edi,0x1
c000e45b:	75 33                	jne    c000e490 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e45d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e460:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e464:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e468:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e46e:	0f af f9             	imul   edi,ecx
c000e471:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e474:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e476:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e479:	40                   	inc    eax
c000e47a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e47d:	83 f8 50             	cmp    eax,0x50
c000e480:	75 72                	jne    c000e4f4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e482:	83 ec 0c             	sub    esp,0xc
c000e485:	53                   	push   ebx
c000e486:	e8 ad fe ff ff       	call   c000e338 <VCache::writeWriteBuffer()>
c000e48b:	83 c4 10             	add    esp,0x10
c000e48e:	eb 64                	jmp    c000e4f4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e490:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e494:	83 ec 0c             	sub    esp,0xc
c000e497:	53                   	push   ebx
c000e498:	e8 9b fe ff ff       	call   c000e338 <VCache::writeWriteBuffer()>
c000e49d:	83 c4 10             	add    esp,0x10
c000e4a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e4a4:	83 ff 4f             	cmp    edi,0x4f
c000e4a7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4aa:	7f 20                	jg     c000e4cc <VCache::write(unsigned long long, int, void*)+0xc8>
c000e4ac:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e4af:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e4b3:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e4b6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e4b9:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e4bc:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e4c0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e4c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4c8:	eb 2a                	jmp    c000e4f4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e4ca:	66 90                	xchg   ax,ax
c000e4cc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e4d0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4d2:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e4d6:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e4da:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e4de:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e4e2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e4e6:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e4e9:	83 c4 1c             	add    esp,0x1c
c000e4ec:	5b                   	pop    ebx
c000e4ed:	5e                   	pop    esi
c000e4ee:	5f                   	pop    edi
c000e4ef:	5d                   	pop    ebp
c000e4f0:	ff e0                	jmp    eax
c000e4f2:	66 90                	xchg   ax,ax
c000e4f4:	83 c4 1c             	add    esp,0x1c
c000e4f7:	31 c0                	xor    eax,eax
c000e4f9:	5b                   	pop    ebx
c000e4fa:	5e                   	pop    esi
c000e4fb:	5f                   	pop    edi
c000e4fc:	5d                   	pop    ebp
c000e4fd:	c3                   	ret    

c000e4fe <VCache::read(unsigned long long, int, void*)>:
c000e4fe:	55                   	push   ebp
c000e4ff:	57                   	push   edi
c000e500:	56                   	push   esi
c000e501:	53                   	push   ebx
c000e502:	83 ec 1c             	sub    esp,0x1c
c000e505:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e509:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e50d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e511:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e515:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e519:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e51d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e521:	74 0d                	je     c000e530 <VCache::read(unsigned long long, int, void*)+0x32>
c000e523:	83 ec 0c             	sub    esp,0xc
c000e526:	57                   	push   edi
c000e527:	e8 0c fe ff ff       	call   c000e338 <VCache::writeWriteBuffer()>
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	90                   	nop
c000e530:	83 fd 01             	cmp    ebp,0x1
c000e533:	0f 85 93 00 00 00    	jne    c000e5cc <VCache::read(unsigned long long, int, void*)+0xce>
c000e539:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e53c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e543:	89 04 24             	mov    DWORD PTR [esp],eax
c000e546:	0f 85 80 00 00 00    	jne    c000e5cc <VCache::read(unsigned long long, int, void*)+0xce>
c000e54c:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e54f:	89 cd                	mov    ebp,ecx
c000e551:	f7 dd                	neg    ebp
c000e553:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e557:	89 e8                	mov    eax,ebp
c000e559:	21 dd                	and    ebp,ebx
c000e55b:	c1 f8 1f             	sar    eax,0x1f
c000e55e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e562:	89 e8                	mov    eax,ebp
c000e564:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e568:	21 f5                	and    ebp,esi
c000e56a:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e56e:	89 ea                	mov    edx,ebp
c000e570:	74 2e                	je     c000e5a0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e572:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e575:	75 29                	jne    c000e5a0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e577:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e57a:	75 24                	jne    c000e5a0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e57c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e57f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e585:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e588:	8d 70 ff             	lea    esi,[eax-0x1]
c000e58b:	21 f3                	and    ebx,esi
c000e58d:	0f af d9             	imul   ebx,ecx
c000e590:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e593:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e597:	89 de                	mov    esi,ebx
c000e599:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e59b:	31 c0                	xor    eax,eax
c000e59d:	eb 61                	jmp    c000e600 <VCache::read(unsigned long long, int, void*)+0x102>
c000e59f:	90                   	nop
c000e5a0:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e5a4:	83 ec 0c             	sub    esp,0xc
c000e5a7:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e5aa:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e5ae:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e5b1:	8b 36                	mov    esi,DWORD PTR [esi]
c000e5b3:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e5b6:	51                   	push   ecx
c000e5b7:	52                   	push   edx
c000e5b8:	50                   	push   eax
c000e5b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5bd:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e5c0:	83 c4 20             	add    esp,0x20
c000e5c3:	85 c0                	test   eax,eax
c000e5c5:	75 39                	jne    c000e600 <VCache::read(unsigned long long, int, void*)+0x102>
c000e5c7:	eb b3                	jmp    c000e57c <VCache::read(unsigned long long, int, void*)+0x7e>
c000e5c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e5cc:	83 ec 0c             	sub    esp,0xc
c000e5cf:	57                   	push   edi
c000e5d0:	e8 53 fd ff ff       	call   c000e328 <VCache::invalidateReadBuffer()>
c000e5d5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e5d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e5de:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e5e2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e5e6:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e5ea:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e5ee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e5f2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e5f5:	83 c4 2c             	add    esp,0x2c
c000e5f8:	5b                   	pop    ebx
c000e5f9:	5e                   	pop    esi
c000e5fa:	5f                   	pop    edi
c000e5fb:	5d                   	pop    ebp
c000e5fc:	ff e0                	jmp    eax
c000e5fe:	66 90                	xchg   ax,ax
c000e600:	83 c4 1c             	add    esp,0x1c
c000e603:	5b                   	pop    ebx
c000e604:	5e                   	pop    esi
c000e605:	5f                   	pop    edi
c000e606:	5d                   	pop    ebp
c000e607:	c3                   	ret    

c000e608 <Video::putrect(int, int, int, int, unsigned int)>:
c000e608:	55                   	push   ebp
c000e609:	57                   	push   edi
c000e60a:	56                   	push   esi
c000e60b:	53                   	push   ebx
c000e60c:	83 ec 1c             	sub    esp,0x1c
c000e60f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e613:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e617:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e61b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e61f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e623:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e627:	01 df                	add    edi,ebx
c000e629:	39 fb                	cmp    ebx,edi
c000e62b:	7d 1f                	jge    c000e64c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e62d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e631:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e635:	7d 12                	jge    c000e649 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e637:	8b 16                	mov    edx,DWORD PTR [esi]
c000e639:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e63d:	53                   	push   ebx
c000e63e:	55                   	push   ebp
c000e63f:	45                   	inc    ebp
c000e640:	56                   	push   esi
c000e641:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e644:	83 c4 10             	add    esp,0x10
c000e647:	eb e8                	jmp    c000e631 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e649:	43                   	inc    ebx
c000e64a:	eb dd                	jmp    c000e629 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e64c:	83 c4 1c             	add    esp,0x1c
c000e64f:	5b                   	pop    ebx
c000e650:	5e                   	pop    esi
c000e651:	5f                   	pop    edi
c000e652:	5d                   	pop    ebp
c000e653:	c3                   	ret    

c000e654 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e654:	55                   	push   ebp
c000e655:	57                   	push   edi
c000e656:	31 ff                	xor    edi,edi
c000e658:	56                   	push   esi
c000e659:	53                   	push   ebx
c000e65a:	83 ec 1c             	sub    esp,0x1c
c000e65d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e661:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e665:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e66c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e671:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e675:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e679:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e67d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e680:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e684:	01 f9                	add    ecx,edi
c000e686:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e68a:	7d 2f                	jge    c000e6bb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e68c:	31 f6                	xor    esi,esi
c000e68e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e692:	01 f2                	add    edx,esi
c000e694:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e698:	7d 1a                	jge    c000e6b4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e69a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e69d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e6a0:	46                   	inc    esi
c000e6a1:	51                   	push   ecx
c000e6a2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e6a6:	52                   	push   edx
c000e6a7:	55                   	push   ebp
c000e6a8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e6ab:	83 c4 10             	add    esp,0x10
c000e6ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e6b2:	eb da                	jmp    c000e68e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e6b4:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e6b8:	47                   	inc    edi
c000e6b9:	eb c5                	jmp    c000e680 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e6bb:	83 c4 1c             	add    esp,0x1c
c000e6be:	5b                   	pop    ebx
c000e6bf:	5e                   	pop    esi
c000e6c0:	5f                   	pop    edi
c000e6c1:	5d                   	pop    ebp
c000e6c2:	c3                   	ret    
c000e6c3:	90                   	nop

c000e6c4 <Video::blit(unsigned int*, int, int, int, int)>:
c000e6c4:	55                   	push   ebp
c000e6c5:	ba 00 00 00 00       	mov    edx,0x0
c000e6ca:	57                   	push   edi
c000e6cb:	56                   	push   esi
c000e6cc:	53                   	push   ebx
c000e6cd:	83 ec 1c             	sub    esp,0x1c
c000e6d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e6d4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e6d8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e6dc:	85 c0                	test   eax,eax
c000e6de:	0f 49 d0             	cmovns edx,eax
c000e6e1:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e6e8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e6ec:	89 eb                	mov    ebx,ebp
c000e6ee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e6f2:	01 ea                	add    edx,ebp
c000e6f4:	39 da                	cmp    edx,ebx
c000e6f6:	7e 54                	jle    c000e74c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e6f8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e6fe:	7c 4c                	jl     c000e74c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e700:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e704:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e708:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e70c:	01 c1                	add    ecx,eax
c000e70e:	39 f9                	cmp    ecx,edi
c000e710:	7e 2f                	jle    c000e741 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e712:	83 c2 04             	add    edx,0x4
c000e715:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e71b:	7c 21                	jl     c000e73e <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e71d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e721:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e723:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e726:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e72a:	55                   	push   ebp
c000e72b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e72f:	56                   	push   esi
c000e730:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e733:	83 c4 10             	add    esp,0x10
c000e736:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e73a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e73e:	47                   	inc    edi
c000e73f:	eb c7                	jmp    c000e708 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e741:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e745:	43                   	inc    ebx
c000e746:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e74a:	eb a2                	jmp    c000e6ee <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e74c:	83 c4 1c             	add    esp,0x1c
c000e74f:	5b                   	pop    ebx
c000e750:	5e                   	pop    esi
c000e751:	5f                   	pop    edi
c000e752:	5d                   	pop    ebp
c000e753:	c3                   	ret    

c000e754 <Video::clearScreen(unsigned int)>:
c000e754:	57                   	push   edi
c000e755:	56                   	push   esi
c000e756:	53                   	push   ebx
c000e757:	31 db                	xor    ebx,ebx
c000e759:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e75d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e763:	7e 1f                	jle    c000e784 <Video::clearScreen(unsigned int)+0x30>
c000e765:	31 ff                	xor    edi,edi
c000e767:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e76d:	7e 12                	jle    c000e781 <Video::clearScreen(unsigned int)+0x2d>
c000e76f:	8b 06                	mov    eax,DWORD PTR [esi]
c000e771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e775:	53                   	push   ebx
c000e776:	57                   	push   edi
c000e777:	47                   	inc    edi
c000e778:	56                   	push   esi
c000e779:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e77c:	83 c4 10             	add    esp,0x10
c000e77f:	eb e6                	jmp    c000e767 <Video::clearScreen(unsigned int)+0x13>
c000e781:	43                   	inc    ebx
c000e782:	eb d9                	jmp    c000e75d <Video::clearScreen(unsigned int)+0x9>
c000e784:	5b                   	pop    ebx
c000e785:	5e                   	pop    esi
c000e786:	5f                   	pop    edi
c000e787:	c3                   	ret    

c000e788 <Video::putpixel(int, int, unsigned int)>:
c000e788:	c7 44 24 04 08 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021708
c000e790:	e9 c8 29 00 00       	jmp    c001115d <KePanic(char const*)>
c000e795:	90                   	nop

c000e796 <Video::readPixelApprox(int, int)>:
c000e796:	83 ec 18             	sub    esp,0x18
c000e799:	68 29 17 02 c0       	push   0xc0021729
c000e79e:	e8 ba 29 00 00       	call   c001115d <KePanic(char const*)>
c000e7a3:	31 c0                	xor    eax,eax
c000e7a5:	83 c4 1c             	add    esp,0x1c
c000e7a8:	c3                   	ret    
c000e7a9:	90                   	nop

c000e7aa <Video::Video(char const*)>:
c000e7aa:	83 ec 0c             	sub    esp,0xc
c000e7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b1:	83 ec 08             	sub    esp,0x8
c000e7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7b8:	50                   	push   eax
c000e7b9:	e8 be df ff ff       	call   c000c77c <Device::Device(char const*)>
c000e7be:	83 c4 10             	add    esp,0x10
c000e7c1:	ba a4 17 02 c0       	mov    edx,0xc00217a4
c000e7c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ca:	89 10                	mov    DWORD PTR [eax],edx
c000e7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e7da:	90                   	nop
c000e7db:	83 c4 0c             	add    esp,0xc
c000e7de:	c3                   	ret    
c000e7df:	90                   	nop

c000e7e0 <Video::~Video()>:
c000e7e0:	83 ec 0c             	sub    esp,0xc
c000e7e3:	ba a4 17 02 c0       	mov    edx,0xc00217a4
c000e7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ec:	89 10                	mov    DWORD PTR [eax],edx
c000e7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f2:	83 ec 0c             	sub    esp,0xc
c000e7f5:	50                   	push   eax
c000e7f6:	e8 eb dc ff ff       	call   c000c4e6 <Device::~Device()>
c000e7fb:	83 c4 10             	add    esp,0x10
c000e7fe:	90                   	nop
c000e7ff:	83 c4 0c             	add    esp,0xc
c000e802:	c3                   	ret    
c000e803:	90                   	nop

c000e804 <Video::~Video()>:
c000e804:	83 ec 0c             	sub    esp,0xc
c000e807:	83 ec 0c             	sub    esp,0xc
c000e80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e80e:	e8 cd ff ff ff       	call   c000e7e0 <Video::~Video()>
c000e813:	83 c4 10             	add    esp,0x10
c000e816:	83 ec 08             	sub    esp,0x8
c000e819:	68 64 01 00 00       	push   0x164
c000e81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e822:	e8 e5 bf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e827:	83 c4 10             	add    esp,0x10
c000e82a:	83 c4 0c             	add    esp,0xc
c000e82d:	c3                   	ret    

c000e82e <Video::isMonochrome()>:
c000e82e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e832:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e838:	c3                   	ret    
c000e839:	90                   	nop

c000e83a <Video::getWidth()>:
c000e83a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e83e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e844:	c3                   	ret    
c000e845:	90                   	nop

c000e846 <Video::getHeight()>:
c000e846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e84a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e850:	c3                   	ret    
c000e851:	90                   	nop

c000e852 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e852:	55                   	push   ebp
c000e853:	57                   	push   edi
c000e854:	56                   	push   esi
c000e855:	53                   	push   ebx
c000e856:	83 ec 2c             	sub    esp,0x2c
c000e859:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e85d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e861:	83 f8 01             	cmp    eax,0x1
c000e864:	19 c9                	sbb    ecx,ecx
c000e866:	31 db                	xor    ebx,ebx
c000e868:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e86c:	89 ce                	mov    esi,ecx
c000e86e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e876:	f7 d6                	not    esi
c000e878:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e87e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e882:	01 d8                	add    eax,ebx
c000e884:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e888:	57                   	push   edi
c000e889:	e8 b8 ff ff ff       	call   c000e846 <Video::getHeight()>
c000e88e:	59                   	pop    ecx
c000e88f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e893:	7e 70                	jle    c000e905 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e895:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e899:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e89d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e8a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8a4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e8a8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e8af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8b3:	89 e8                	mov    eax,ebp
c000e8b5:	83 c0 20             	add    eax,0x20
c000e8b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e8bc:	57                   	push   edi
c000e8bd:	e8 78 ff ff ff       	call   c000e83a <Video::getWidth()>
c000e8c2:	5a                   	pop    edx
c000e8c3:	39 c5                	cmp    ebp,eax
c000e8c5:	7d 34                	jge    c000e8fb <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e8c7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e8cc:	74 05                	je     c000e8d3 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e8ce:	8b 07                	mov    eax,DWORD PTR [edi]
c000e8d0:	56                   	push   esi
c000e8d1:	eb 0d                	jmp    c000e8e0 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e8d3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e8d8:	74 12                	je     c000e8ec <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e8da:	8b 07                	mov    eax,DWORD PTR [edi]
c000e8dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e8e4:	55                   	push   ebp
c000e8e5:	57                   	push   edi
c000e8e6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8e9:	83 c4 10             	add    esp,0x10
c000e8ec:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e8f0:	45                   	inc    ebp
c000e8f1:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e8f5:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e8f9:	75 c1                	jne    c000e8bc <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e8fb:	43                   	inc    ebx
c000e8fc:	83 fb 20             	cmp    ebx,0x20
c000e8ff:	0f 85 79 ff ff ff    	jne    c000e87e <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e905:	83 c4 2c             	add    esp,0x2c
c000e908:	5b                   	pop    ebx
c000e909:	5e                   	pop    esi
c000e90a:	5f                   	pop    edi
c000e90b:	5d                   	pop    ebp
c000e90c:	c3                   	ret    
c000e90d:	90                   	nop

c000e90e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e90e:	55                   	push   ebp
c000e90f:	57                   	push   edi
c000e910:	56                   	push   esi
c000e911:	53                   	push   ebx
c000e912:	83 ec 28             	sub    esp,0x28
c000e915:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e919:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e91d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e921:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e925:	c1 e7 08             	shl    edi,0x8
c000e928:	01 c7                	add    edi,eax
c000e92a:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e92e:	c1 e6 08             	shl    esi,0x8
c000e931:	01 f0                	add    eax,esi
c000e933:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e937:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e93b:	0f af c7             	imul   eax,edi
c000e93e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e945:	50                   	push   eax
c000e946:	e8 88 91 ff ff       	call   c0007ad3 <malloc>
c000e94b:	83 c4 10             	add    esp,0x10
c000e94e:	85 c0                	test   eax,eax
c000e950:	89 c5                	mov    ebp,eax
c000e952:	75 10                	jne    c000e964 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e954:	83 ec 0c             	sub    esp,0xc
c000e957:	68 54 17 02 c0       	push   0xc0021754
c000e95c:	e8 fc 27 00 00       	call   c001115d <KePanic(char const*)>
c000e961:	83 c4 10             	add    esp,0x10
c000e964:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e968:	ba 12 00 00 00       	mov    edx,0x12
c000e96d:	85 c0                	test   eax,eax
c000e96f:	74 11                	je     c000e982 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e971:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e975:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e979:	c1 fa 03             	sar    edx,0x3
c000e97c:	0f af d1             	imul   edx,ecx
c000e97f:	83 c2 12             	add    edx,0x12
c000e982:	85 ff                	test   edi,edi
c000e984:	74 06                	je     c000e98c <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e986:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e98a:	75 12                	jne    c000e99e <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e98c:	83 ec 0c             	sub    esp,0xc
c000e98f:	68 64 17 02 c0       	push   0xc0021764
c000e994:	e8 71 bf ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000e999:	e9 b8 00 00 00       	jmp    c000ea56 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e99e:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e9a2:	83 f9 02             	cmp    ecx,0x2
c000e9a5:	0f 85 96 00 00 00    	jne    c000ea41 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e9ab:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e9b0:	75 0e                	jne    c000e9c0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9b2:	85 c0                	test   eax,eax
c000e9b4:	75 0a                	jne    c000e9c0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e9b9:	83 e8 18             	sub    eax,0x18
c000e9bc:	a8 f7                	test   al,0xf7
c000e9be:	74 0a                	je     c000e9ca <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e9c0:	83 ec 0c             	sub    esp,0xc
c000e9c3:	68 79 17 02 c0       	push   0xc0021779
c000e9c8:	eb 7f                	jmp    c000ea49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e9ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e9d2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e9da:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000e9de:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e9e2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e9ea:	75 0c                	jne    c000e9f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e9ec:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000e9f1:	c1 e1 18             	shl    ecx,0x18
c000e9f4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e9f8:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e9fd:	46                   	inc    esi
c000e9fe:	89 c8                	mov    eax,ecx
c000ea00:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ea05:	c1 e0 10             	shl    eax,0x10
c000ea08:	c1 e1 08             	shl    ecx,0x8
c000ea0b:	09 c1                	or     ecx,eax
c000ea0d:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ea11:	09 c1                	or     ecx,eax
c000ea13:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ea17:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ea1b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ea1f:	c1 f8 03             	sar    eax,0x3
c000ea22:	01 c2                	add    edx,eax
c000ea24:	89 f0                	mov    eax,esi
c000ea26:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ea2a:	39 c7                	cmp    edi,eax
c000ea2c:	7f b0                	jg     c000e9de <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ea2e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ea32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea36:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ea39:	7e 22                	jle    c000ea5d <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ea3b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ea3f:	eb 99                	jmp    c000e9da <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ea41:	50                   	push   eax
c000ea42:	50                   	push   eax
c000ea43:	51                   	push   ecx
c000ea44:	68 87 17 02 c0       	push   0xc0021787
c000ea49:	e8 bc be ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ea4e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ea51:	e8 8d 90 ff ff       	call   c0007ae3 <free>
c000ea56:	83 c4 10             	add    esp,0x10
c000ea59:	31 ed                	xor    ebp,ebp
c000ea5b:	eb 0f                	jmp    c000ea6c <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ea5d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea61:	89 38                	mov    DWORD PTR [eax],edi
c000ea63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea67:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ea6a:	89 38                	mov    DWORD PTR [eax],edi
c000ea6c:	83 c4 1c             	add    esp,0x1c
c000ea6f:	89 e8                	mov    eax,ebp
c000ea71:	5b                   	pop    ebx
c000ea72:	5e                   	pop    esi
c000ea73:	5f                   	pop    edi
c000ea74:	5d                   	pop    ebp
c000ea75:	c3                   	ret    

c000ea76 <Video::putTGA(int, int, unsigned char*, int)>:
c000ea76:	55                   	push   ebp
c000ea77:	57                   	push   edi
c000ea78:	56                   	push   esi
c000ea79:	53                   	push   ebx
c000ea7a:	83 ec 28             	sub    esp,0x28
c000ea7d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea81:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ea85:	50                   	push   eax
c000ea86:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea8a:	50                   	push   eax
c000ea8b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ea8f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ea93:	57                   	push   edi
c000ea94:	e8 75 fe ff ff       	call   c000e90e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ea99:	83 c4 20             	add    esp,0x20
c000ea9c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eaa0:	85 c0                	test   eax,eax
c000eaa2:	74 35                	je     c000ead9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eaa4:	89 c6                	mov    esi,eax
c000eaa6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eaaa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eaae:	39 d8                	cmp    eax,ebx
c000eab0:	7e 27                	jle    c000ead9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eab2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eab6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eaba:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000eabe:	39 e9                	cmp    ecx,ebp
c000eac0:	7e 14                	jle    c000ead6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eac2:	83 c6 04             	add    esi,0x4
c000eac5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000eac7:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000eaca:	53                   	push   ebx
c000eacb:	55                   	push   ebp
c000eacc:	45                   	inc    ebp
c000eacd:	57                   	push   edi
c000eace:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ead1:	83 c4 10             	add    esp,0x10
c000ead4:	eb e0                	jmp    c000eab6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ead6:	43                   	inc    ebx
c000ead7:	eb cd                	jmp    c000eaa6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ead9:	83 c4 1c             	add    esp,0x1c
c000eadc:	5b                   	pop    ebx
c000eadd:	5e                   	pop    esi
c000eade:	5f                   	pop    edi
c000eadf:	5d                   	pop    ebp
c000eae0:	c3                   	ret    
c000eae1:	66 90                	xchg   ax,ax
c000eae3:	90                   	nop

c000eae4 <ACPI::close(int, int, void*)>:
c000eae4:	83 ec 1c             	sub    esp,0x1c
c000eae7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eaef:	74 0b                	je     c000eafc <ACPI::close(int, int, void*)+0x18>
c000eaf1:	b8 00 00 00 00       	mov    eax,0x0
c000eaf6:	e9 99 00 00 00       	jmp    c000eb94 <ACPI::close(int, int, void*)+0xb0>
c000eafb:	90                   	nop
c000eafc:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eb01:	75 29                	jne    c000eb2c <ACPI::close(int, int, void*)+0x48>
c000eb03:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000eb08:	85 c0                	test   eax,eax
c000eb0a:	74 08                	je     c000eb14 <ACPI::close(int, int, void*)+0x30>
c000eb0c:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000eb11:	ff d0                	call   eax
c000eb13:	90                   	nop
c000eb14:	83 ec 0c             	sub    esp,0xc
c000eb17:	68 e8 17 02 c0       	push   0xc00217e8
c000eb1c:	e8 3c 26 00 00       	call   c001115d <KePanic(char const*)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb29:	eb 69                	jmp    c000eb94 <ACPI::close(int, int, void*)+0xb0>
c000eb2b:	90                   	nop
c000eb2c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eb31:	75 59                	jne    c000eb8c <ACPI::close(int, int, void*)+0xa8>
c000eb33:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c000eb38:	85 c0                	test   eax,eax
c000eb3a:	74 08                	je     c000eb44 <ACPI::close(int, int, void*)+0x60>
c000eb3c:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c000eb41:	ff d0                	call   eax
c000eb43:	90                   	nop
c000eb44:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eb49:	8d 76 00             	lea    esi,[esi+0x0]
c000eb4c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb51:	83 e0 02             	and    eax,0x2
c000eb54:	74 1e                	je     c000eb74 <ACPI::close(int, int, void*)+0x90>
c000eb56:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eb5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb61:	89 c2                	mov    edx,eax
c000eb63:	ec                   	in     al,dx
c000eb64:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb68:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eb6c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb70:	eb da                	jmp    c000eb4c <ACPI::close(int, int, void*)+0x68>
c000eb72:	66 90                	xchg   ax,ax
c000eb74:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000eb7b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000eb80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000eb84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb88:	ee                   	out    dx,al
c000eb89:	8d 76 00             	lea    esi,[esi+0x0]
c000eb8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb91:	8d 76 00             	lea    esi,[esi+0x0]
c000eb94:	83 c4 1c             	add    esp,0x1c
c000eb97:	c3                   	ret    

c000eb98 <findRSDP()>:
c000eb98:	83 ec 1c             	sub    esp,0x1c
c000eb9b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eba0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eba6:	83 e0 04             	and    eax,0x4
c000eba9:	0f b6 c0             	movzx  eax,al
c000ebac:	85 c0                	test   eax,eax
c000ebae:	75 08                	jne    c000ebb8 <findRSDP()+0x20>
c000ebb0:	b8 00 00 00 00       	mov    eax,0x0
c000ebb5:	eb 75                	jmp    c000ec2c <findRSDP()+0x94>
c000ebb7:	90                   	nop
c000ebb8:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ebbd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ebc2:	7f 1c                	jg     c000ebe0 <findRSDP()+0x48>
c000ebc4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebc9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ebcf:	83 e2 fb             	and    edx,0xfffffffb
c000ebd2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ebd8:	b8 00 00 00 00       	mov    eax,0x0
c000ebdd:	eb 4d                	jmp    c000ec2c <findRSDP()+0x94>
c000ebdf:	90                   	nop
c000ebe0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ebe8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ebf0:	77 32                	ja     c000ec24 <findRSDP()+0x8c>
c000ebf2:	83 ec 04             	sub    esp,0x4
c000ebf5:	6a 08                	push   0x8
c000ebf7:	68 83 18 02 c0       	push   0xc0021883
c000ebfc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec00:	e8 7b 17 ff ff       	call   c0000380 <memcmp>
c000ec05:	83 c4 10             	add    esp,0x10
c000ec08:	85 c0                	test   eax,eax
c000ec0a:	0f 94 c0             	sete   al
c000ec0d:	0f b6 c0             	movzx  eax,al
c000ec10:	85 c0                	test   eax,eax
c000ec12:	74 08                	je     c000ec1c <findRSDP()+0x84>
c000ec14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec18:	eb 12                	jmp    c000ec2c <findRSDP()+0x94>
c000ec1a:	66 90                	xchg   ax,ax
c000ec1c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ec21:	eb c5                	jmp    c000ebe8 <findRSDP()+0x50>
c000ec23:	90                   	nop
c000ec24:	b8 00 00 00 00       	mov    eax,0x0
c000ec29:	8d 76 00             	lea    esi,[esi+0x0]
c000ec2c:	83 c4 1c             	add    esp,0x1c
c000ec2f:	c3                   	ret    

c000ec30 <loadACPITables(unsigned char*)>:
c000ec30:	57                   	push   edi
c000ec31:	56                   	push   esi
c000ec32:	53                   	push   ebx
c000ec33:	83 ec 60             	sub    esp,0x60
c000ec36:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec3b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ec41:	83 e0 04             	and    eax,0x4
c000ec44:	0f b6 c0             	movzx  eax,al
c000ec47:	85 c0                	test   eax,eax
c000ec49:	0f 84 41 02 00 00    	je     c000ee90 <loadACPITables(unsigned char*)+0x260>
c000ec4f:	a0 80 97 02 c0       	mov    al,ds:0xc0029780
c000ec54:	0f b6 c0             	movzx  eax,al
c000ec57:	85 c0                	test   eax,eax
c000ec59:	74 79                	je     c000ecd4 <loadACPITables(unsigned char*)+0xa4>
c000ec5b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ec5f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ec63:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec6a:	83 e8 24             	sub    eax,0x24
c000ec6d:	c1 e8 03             	shr    eax,0x3
c000ec70:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ec74:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ec7c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ec80:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ec84:	0f 8d ba 00 00 00    	jge    c000ed44 <loadACPITables(unsigned char*)+0x114>
c000ec8a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ec8e:	83 c0 24             	add    eax,0x24
c000ec91:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ec95:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec99:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ec9d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000eca1:	c1 e0 03             	shl    eax,0x3
c000eca4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000eca8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ecac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ecaf:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecb1:	89 c1                	mov    ecx,eax
c000ecb3:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ecb8:	8d 50 01             	lea    edx,[eax+0x1]
c000ecbb:	89 15 6c 95 02 c0    	mov    DWORD PTR ds:0xc002956c,edx
c000ecc1:	89 ca                	mov    edx,ecx
c000ecc3:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ecca:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000eccf:	eb ab                	jmp    c000ec7c <loadACPITables(unsigned char*)+0x4c>
c000ecd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecd4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ecd8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ecdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ece0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ece3:	83 e8 24             	sub    eax,0x24
c000ece6:	c1 e8 02             	shr    eax,0x2
c000ece9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eced:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ecf5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecf8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ecfc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ed00:	7d 42                	jge    c000ed44 <loadACPITables(unsigned char*)+0x114>
c000ed02:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed06:	83 c0 24             	add    eax,0x24
c000ed09:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ed0d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed11:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ed15:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed19:	c1 e0 02             	shl    eax,0x2
c000ed1c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ed20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed24:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ed26:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ed2b:	8d 50 01             	lea    edx,[eax+0x1]
c000ed2e:	89 15 6c 95 02 c0    	mov    DWORD PTR ds:0xc002956c,edx
c000ed34:	89 ca                	mov    edx,ecx
c000ed36:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ed3d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ed42:	eb b4                	jmp    c000ecf8 <loadACPITables(unsigned char*)+0xc8>
c000ed44:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ed4c:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ed51:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ed55:	0f 8d 39 01 00 00    	jge    c000ee94 <loadACPITables(unsigned char*)+0x264>
c000ed5b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ed5f:	8b 04 c5 84 95 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6a7c]
c000ed66:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ed6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed76:	25 ff 0f 00 00       	and    eax,0xfff
c000ed7b:	89 c6                	mov    esi,eax
c000ed7d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ed83:	83 ec 0c             	sub    esp,0xc
c000ed86:	6a 01                	push   0x1
c000ed88:	e8 68 a8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ed8d:	83 c4 10             	add    esp,0x10
c000ed90:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ed94:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ed9a:	83 ec 0c             	sub    esp,0xc
c000ed9d:	6a 01                	push   0x1
c000ed9f:	6a 01                	push   0x1
c000eda1:	50                   	push   eax
c000eda2:	52                   	push   edx
c000eda3:	53                   	push   ebx
c000eda4:	e8 5f b1 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eda9:	83 c4 20             	add    esp,0x20
c000edac:	09 f0                	or     eax,esi
c000edae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000edb2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000edb6:	c1 e0 03             	shl    eax,0x3
c000edb9:	05 80 95 02 c0       	add    eax,0xc0029580
c000edbe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000edc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edc6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000edca:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000edd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000edd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000edda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edde:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ede2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ede6:	89 c6                	mov    esi,eax
c000ede8:	89 d7                	mov    edi,edx
c000edea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000edec:	89 c8                	mov    eax,ecx
c000edee:	89 fa                	mov    edx,edi
c000edf0:	89 f3                	mov    ebx,esi
c000edf2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000edf6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000edfa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000edfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ee09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee0d:	05 00 10 00 00       	add    eax,0x1000
c000ee12:	c1 e8 0c             	shr    eax,0xc
c000ee15:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ee19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ee21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee25:	25 ff 0f 00 00       	and    eax,0xfff
c000ee2a:	89 c6                	mov    esi,eax
c000ee2c:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee39:	e8 b7 a7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ee3e:	83 c4 10             	add    esp,0x10
c000ee41:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee45:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ee4b:	83 ec 0c             	sub    esp,0xc
c000ee4e:	6a 01                	push   0x1
c000ee50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ee54:	50                   	push   eax
c000ee55:	52                   	push   edx
c000ee56:	53                   	push   ebx
c000ee57:	e8 ac b0 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee5c:	83 c4 20             	add    esp,0x20
c000ee5f:	09 f0                	or     eax,esi
c000ee61:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee69:	83 ec 0c             	sub    esp,0xc
c000ee6c:	50                   	push   eax
c000ee6d:	e8 97 aa ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000ee72:	83 c4 10             	add    esp,0x10
c000ee75:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee79:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee7d:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ee84:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000ee89:	e9 be fe ff ff       	jmp    c000ed4c <loadACPITables(unsigned char*)+0x11c>
c000ee8e:	66 90                	xchg   ax,ax
c000ee90:	90                   	nop
c000ee91:	8d 76 00             	lea    esi,[esi+0x0]
c000ee94:	83 c4 60             	add    esp,0x60
c000ee97:	5b                   	pop    ebx
c000ee98:	5e                   	pop    esi
c000ee99:	5f                   	pop    edi
c000ee9a:	c3                   	ret    
c000ee9b:	90                   	nop

c000ee9c <findRSDT(unsigned char*)>:
c000ee9c:	57                   	push   edi
c000ee9d:	56                   	push   esi
c000ee9e:	53                   	push   ebx
c000ee9f:	83 ec 50             	sub    esp,0x50
c000eea2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eea7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eead:	83 e0 04             	and    eax,0x4
c000eeb0:	0f b6 c0             	movzx  eax,al
c000eeb3:	85 c0                	test   eax,eax
c000eeb5:	75 0d                	jne    c000eec4 <findRSDT(unsigned char*)+0x28>
c000eeb7:	b8 00 00 00 00       	mov    eax,0x0
c000eebc:	e9 2b 01 00 00       	jmp    c000efec <findRSDT(unsigned char*)+0x150>
c000eec1:	8d 76 00             	lea    esi,[esi+0x0]
c000eec4:	89 e0                	mov    eax,esp
c000eec6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeca:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000eece:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000eed2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000eeda:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eede:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eee2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eee6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000eeea:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eeee:	89 c6                	mov    esi,eax
c000eef0:	89 d7                	mov    edi,edx
c000eef2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eef4:	89 c8                	mov    eax,ecx
c000eef6:	89 fa                	mov    edx,edi
c000eef8:	89 f3                	mov    ebx,esi
c000eefa:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000eefe:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ef02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef06:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ef0a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000ef0e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ef16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef1e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef26:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef2a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ef2e:	25 ff 0f 00 00       	and    eax,0xfff
c000ef33:	89 c6                	mov    esi,eax
c000ef35:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef3b:	83 ec 0c             	sub    esp,0xc
c000ef3e:	6a 02                	push   0x2
c000ef40:	e8 b0 a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef45:	83 c4 10             	add    esp,0x10
c000ef48:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ef4c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef52:	83 ec 0c             	sub    esp,0xc
c000ef55:	6a 01                	push   0x1
c000ef57:	6a 02                	push   0x2
c000ef59:	50                   	push   eax
c000ef5a:	52                   	push   edx
c000ef5b:	53                   	push   ebx
c000ef5c:	e8 a7 af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef61:	83 c4 20             	add    esp,0x20
c000ef64:	09 f0                	or     eax,esi
c000ef66:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef6e:	25 ff 0f 00 00       	and    eax,0xfff
c000ef73:	89 c6                	mov    esi,eax
c000ef75:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef7b:	83 ec 0c             	sub    esp,0xc
c000ef7e:	6a 02                	push   0x2
c000ef80:	e8 70 a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef85:	83 c4 10             	add    esp,0x10
c000ef88:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ef8c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	6a 01                	push   0x1
c000ef97:	6a 02                	push   0x2
c000ef99:	50                   	push   eax
c000ef9a:	52                   	push   edx
c000ef9b:	53                   	push   ebx
c000ef9c:	e8 67 af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efa1:	83 c4 20             	add    esp,0x20
c000efa4:	09 f0                	or     eax,esi
c000efa6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000efaa:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000efaf:	85 c0                	test   eax,eax
c000efb1:	75 11                	jne    c000efc4 <findRSDT(unsigned char*)+0x128>
c000efb3:	c6 05 80 97 02 c0 00 	mov    BYTE PTR ds:0xc0029780,0x0
c000efba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000efbe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efc2:	eb 24                	jmp    c000efe8 <findRSDT(unsigned char*)+0x14c>
c000efc4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000efc9:	83 f8 02             	cmp    eax,0x2
c000efcc:	75 12                	jne    c000efe0 <findRSDT(unsigned char*)+0x144>
c000efce:	c6 05 80 97 02 c0 01 	mov    BYTE PTR ds:0xc0029780,0x1
c000efd5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000efd9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efdd:	eb 09                	jmp    c000efe8 <findRSDT(unsigned char*)+0x14c>
c000efdf:	90                   	nop
c000efe0:	b8 00 00 00 00       	mov    eax,0x0
c000efe5:	eb 05                	jmp    c000efec <findRSDT(unsigned char*)+0x150>
c000efe7:	90                   	nop
c000efe8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000efec:	83 c4 50             	add    esp,0x50
c000efef:	5b                   	pop    ebx
c000eff0:	5e                   	pop    esi
c000eff1:	5f                   	pop    edi
c000eff2:	c3                   	ret    
c000eff3:	90                   	nop

c000eff4 <findDataTable(unsigned char*, char*)>:
c000eff4:	83 ec 1c             	sub    esp,0x1c
c000eff7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000effc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f002:	83 e0 04             	and    eax,0x4
c000f005:	0f b6 c0             	movzx  eax,al
c000f008:	85 c0                	test   eax,eax
c000f00a:	75 08                	jne    c000f014 <findDataTable(unsigned char*, char*)+0x20>
c000f00c:	b8 00 00 00 00       	mov    eax,0x0
c000f011:	eb 5d                	jmp    c000f070 <findDataTable(unsigned char*, char*)+0x7c>
c000f013:	90                   	nop
c000f014:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f01c:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000f021:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f025:	7d 41                	jge    c000f068 <findDataTable(unsigned char*, char*)+0x74>
c000f027:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f02b:	c1 e0 03             	shl    eax,0x3
c000f02e:	05 80 95 02 c0       	add    eax,0xc0029580
c000f033:	83 ec 04             	sub    esp,0x4
c000f036:	6a 04                	push   0x4
c000f038:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f03c:	50                   	push   eax
c000f03d:	e8 3e 13 ff ff       	call   c0000380 <memcmp>
c000f042:	83 c4 10             	add    esp,0x10
c000f045:	85 c0                	test   eax,eax
c000f047:	0f 94 c0             	sete   al
c000f04a:	0f b6 c0             	movzx  eax,al
c000f04d:	85 c0                	test   eax,eax
c000f04f:	74 0f                	je     c000f060 <findDataTable(unsigned char*, char*)+0x6c>
c000f051:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f055:	8b 04 c5 84 95 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6a7c]
c000f05c:	eb 12                	jmp    c000f070 <findDataTable(unsigned char*, char*)+0x7c>
c000f05e:	66 90                	xchg   ax,ax
c000f060:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f065:	eb b5                	jmp    c000f01c <findDataTable(unsigned char*, char*)+0x28>
c000f067:	90                   	nop
c000f068:	b8 00 00 00 00       	mov    eax,0x0
c000f06d:	8d 76 00             	lea    esi,[esi+0x0]
c000f070:	83 c4 1c             	add    esp,0x1c
c000f073:	c3                   	ret    

c000f074 <scanMADT()>:
c000f074:	53                   	push   ebx
c000f075:	83 ec 38             	sub    esp,0x38
c000f078:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f07d:	25 00 04 00 00       	and    eax,0x400
c000f082:	74 14                	je     c000f098 <scanMADT()+0x24>
c000f084:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f089:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f08f:	83 e2 fb             	and    edx,0xfffffffb
c000f092:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f098:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f09d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0a3:	83 e0 04             	and    eax,0x4
c000f0a6:	0f b6 c0             	movzx  eax,al
c000f0a9:	85 c0                	test   eax,eax
c000f0ab:	0f 84 6b 04 00 00    	je     c000f51c <scanMADT()+0x4a8>
c000f0b1:	e8 e2 fa ff ff       	call   c000eb98 <findRSDP()>
c000f0b6:	a3 8c 97 02 c0       	mov    ds:0xc002978c,eax
c000f0bb:	a1 8c 97 02 c0       	mov    eax,ds:0xc002978c
c000f0c0:	85 c0                	test   eax,eax
c000f0c2:	75 1c                	jne    c000f0e0 <scanMADT()+0x6c>
c000f0c4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0c9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0cf:	83 e2 fb             	and    edx,0xfffffffb
c000f0d2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0d8:	e9 47 04 00 00       	jmp    c000f524 <scanMADT()+0x4b0>
c000f0dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0e0:	a1 8c 97 02 c0       	mov    eax,ds:0xc002978c
c000f0e5:	83 ec 0c             	sub    esp,0xc
c000f0e8:	50                   	push   eax
c000f0e9:	e8 ae fd ff ff       	call   c000ee9c <findRSDT(unsigned char*)>
c000f0ee:	83 c4 10             	add    esp,0x10
c000f0f1:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000f0f6:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f0fb:	85 c0                	test   eax,eax
c000f0fd:	75 19                	jne    c000f118 <scanMADT()+0xa4>
c000f0ff:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f104:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f10a:	83 e2 fb             	and    edx,0xfffffffb
c000f10d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f113:	e9 0c 04 00 00       	jmp    c000f524 <scanMADT()+0x4b0>
c000f118:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f11d:	83 ec 0c             	sub    esp,0xc
c000f120:	50                   	push   eax
c000f121:	e8 0a fb ff ff       	call   c000ec30 <loadACPITables(unsigned char*)>
c000f126:	83 c4 10             	add    esp,0x10
c000f129:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f12e:	83 ec 08             	sub    esp,0x8
c000f131:	68 8c 18 02 c0       	push   0xc002188c
c000f136:	50                   	push   eax
c000f137:	e8 b8 fe ff ff       	call   c000eff4 <findDataTable(unsigned char*, char*)>
c000f13c:	83 c4 10             	add    esp,0x10
c000f13f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f143:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f148:	75 1a                	jne    c000f164 <scanMADT()+0xf0>
c000f14a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f14f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f155:	83 e2 fe             	and    edx,0xfffffffe
c000f158:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f15e:	e9 c1 03 00 00       	jmp    c000f524 <scanMADT()+0x4b0>
c000f163:	90                   	nop
c000f164:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f16c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f173:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f177:	0f 87 a7 03 00 00    	ja     c000f524 <scanMADT()+0x4b0>
c000f17d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f185:	0f 87 99 03 00 00    	ja     c000f524 <scanMADT()+0x4b0>
c000f18b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f18f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f193:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f197:	8d 50 01             	lea    edx,[eax+0x1]
c000f19a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f19e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1a2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1a6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f1aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1ae:	8d 50 01             	lea    edx,[eax+0x1]
c000f1b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1b9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1bd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f1c1:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f1c6:	83 f8 02             	cmp    eax,0x2
c000f1c9:	0f 86 51 03 00 00    	jbe    c000f520 <scanMADT()+0x4ac>
c000f1cf:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f1d4:	85 c0                	test   eax,eax
c000f1d6:	75 58                	jne    c000f230 <scanMADT()+0x1bc>
c000f1d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1dc:	8d 50 01             	lea    edx,[eax+0x1]
c000f1df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1e3:	8a 15 80 99 02 c0    	mov    dl,BYTE PTR ds:0xc0029980
c000f1e9:	0f b6 d2             	movzx  edx,dl
c000f1ec:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f1f0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f1f4:	88 82 c0 99 02 c0    	mov    BYTE PTR [edx-0x3ffd6640],al
c000f1fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1fe:	8d 50 01             	lea    edx,[eax+0x1]
c000f201:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f205:	8a 15 80 99 02 c0    	mov    dl,BYTE PTR ds:0xc0029980
c000f20b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f20e:	88 0d 80 99 02 c0    	mov    BYTE PTR ds:0xc0029980,cl
c000f214:	0f b6 d2             	movzx  edx,dl
c000f217:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f21b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f21f:	88 82 a0 99 02 c0    	mov    BYTE PTR [edx-0x3ffd6660],al
c000f225:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f22a:	e9 d9 02 00 00       	jmp    c000f508 <scanMADT()+0x494>
c000f22f:	90                   	nop
c000f230:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f235:	83 f8 01             	cmp    eax,0x1
c000f238:	0f 85 1a 01 00 00    	jne    c000f358 <scanMADT()+0x2e4>
c000f23e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f242:	8d 50 01             	lea    edx,[eax+0x1]
c000f245:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f249:	8a 15 40 98 02 c0    	mov    dl,BYTE PTR ds:0xc0029840
c000f24f:	0f b6 d2             	movzx  edx,dl
c000f252:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f256:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f25a:	88 82 60 98 02 c0    	mov    BYTE PTR [edx-0x3ffd67a0],al
c000f260:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f265:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f269:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f26d:	01 d0                	add    eax,edx
c000f26f:	83 c0 2c             	add    eax,0x2c
c000f272:	8a 00                	mov    al,BYTE PTR [eax]
c000f274:	0f b6 d0             	movzx  edx,al
c000f277:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f27b:	8d 48 01             	lea    ecx,[eax+0x1]
c000f27e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f282:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f286:	0f b6 c0             	movzx  eax,al
c000f289:	c1 e0 08             	shl    eax,0x8
c000f28c:	89 d1                	mov    ecx,edx
c000f28e:	09 c1                	or     ecx,eax
c000f290:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f294:	8d 50 02             	lea    edx,[eax+0x2]
c000f297:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f29b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f29f:	0f b6 c0             	movzx  eax,al
c000f2a2:	c1 e0 10             	shl    eax,0x10
c000f2a5:	09 c1                	or     ecx,eax
c000f2a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2ab:	8d 50 03             	lea    edx,[eax+0x3]
c000f2ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2b2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2b6:	0f b6 c0             	movzx  eax,al
c000f2b9:	c1 e0 18             	shl    eax,0x18
c000f2bc:	09 c1                	or     ecx,eax
c000f2be:	89 ca                	mov    edx,ecx
c000f2c0:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f2c5:	0f b6 c0             	movzx  eax,al
c000f2c8:	89 14 85 80 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6780],edx
c000f2cf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f2d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2dc:	01 d0                	add    eax,edx
c000f2de:	83 c0 2c             	add    eax,0x2c
c000f2e1:	8a 00                	mov    al,BYTE PTR [eax]
c000f2e3:	0f b6 d0             	movzx  edx,al
c000f2e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2ea:	8d 48 01             	lea    ecx,[eax+0x1]
c000f2ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2f1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f2f5:	0f b6 c0             	movzx  eax,al
c000f2f8:	c1 e0 08             	shl    eax,0x8
c000f2fb:	89 d1                	mov    ecx,edx
c000f2fd:	09 c1                	or     ecx,eax
c000f2ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f303:	8d 50 02             	lea    edx,[eax+0x2]
c000f306:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f30a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f30e:	0f b6 c0             	movzx  eax,al
c000f311:	c1 e0 10             	shl    eax,0x10
c000f314:	09 c1                	or     ecx,eax
c000f316:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f31a:	8d 50 03             	lea    edx,[eax+0x3]
c000f31d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f321:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f325:	0f b6 c0             	movzx  eax,al
c000f328:	c1 e0 18             	shl    eax,0x18
c000f32b:	09 c1                	or     ecx,eax
c000f32d:	89 ca                	mov    edx,ecx
c000f32f:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f334:	0f b6 c0             	movzx  eax,al
c000f337:	89 14 85 00 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6700],edx
c000f33e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f343:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f348:	83 c0 01             	add    eax,0x1
c000f34b:	a2 40 98 02 c0       	mov    ds:0xc0029840,al
c000f350:	e9 b3 01 00 00       	jmp    c000f508 <scanMADT()+0x494>
c000f355:	8d 76 00             	lea    esi,[esi+0x0]
c000f358:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f35d:	83 f8 02             	cmp    eax,0x2
c000f360:	0f 85 ea 00 00 00    	jne    c000f450 <scanMADT()+0x3dc>
c000f366:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f36a:	8d 50 01             	lea    edx,[eax+0x1]
c000f36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f371:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f375:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f379:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f37d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f381:	8d 50 01             	lea    edx,[eax+0x1]
c000f384:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f388:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f38c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f390:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f394:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f398:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f39c:	01 d0                	add    eax,edx
c000f39e:	83 c0 2c             	add    eax,0x2c
c000f3a1:	8a 00                	mov    al,BYTE PTR [eax]
c000f3a3:	0f b6 d0             	movzx  edx,al
c000f3a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3aa:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3b1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3b5:	0f b6 c0             	movzx  eax,al
c000f3b8:	c1 e0 08             	shl    eax,0x8
c000f3bb:	89 d1                	mov    ecx,edx
c000f3bd:	09 c1                	or     ecx,eax
c000f3bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3c3:	8d 50 02             	lea    edx,[eax+0x2]
c000f3c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3ca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3ce:	0f b6 c0             	movzx  eax,al
c000f3d1:	c1 e0 10             	shl    eax,0x10
c000f3d4:	09 c1                	or     ecx,eax
c000f3d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3da:	8d 50 03             	lea    edx,[eax+0x3]
c000f3dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3e1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3e5:	0f b6 c0             	movzx  eax,al
c000f3e8:	c1 e0 18             	shl    eax,0x18
c000f3eb:	09 c8                	or     eax,ecx
c000f3ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f3f1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f3f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3fe:	01 d0                	add    eax,edx
c000f400:	83 c0 2c             	add    eax,0x2c
c000f403:	8a 00                	mov    al,BYTE PTR [eax]
c000f405:	0f b6 d0             	movzx  edx,al
c000f408:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f40c:	8d 48 01             	lea    ecx,[eax+0x1]
c000f40f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f413:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f417:	0f b6 c0             	movzx  eax,al
c000f41a:	c1 e0 08             	shl    eax,0x8
c000f41d:	09 d0                	or     eax,edx
c000f41f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f424:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f429:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f42e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f432:	88 90 88 2f 02 c0    	mov    BYTE PTR [eax-0x3ffdd078],dl
c000f438:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f43d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f442:	66 89 94 00 20 98 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd67e0],dx
c000f44a:	e9 b9 00 00 00       	jmp    c000f508 <scanMADT()+0x494>
c000f44f:	90                   	nop
c000f450:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f455:	83 f8 04             	cmp    eax,0x4
c000f458:	0f 85 9a 00 00 00    	jne    c000f4f8 <scanMADT()+0x484>
c000f45e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f462:	8d 50 01             	lea    edx,[eax+0x1]
c000f465:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f469:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f46d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f471:	0f b6 c0             	movzx  eax,al
c000f474:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f478:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f47c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f480:	01 d0                	add    eax,edx
c000f482:	83 c0 2c             	add    eax,0x2c
c000f485:	8a 00                	mov    al,BYTE PTR [eax]
c000f487:	0f b6 d0             	movzx  edx,al
c000f48a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f48e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f491:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f495:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f499:	0f b6 c0             	movzx  eax,al
c000f49c:	c1 e0 08             	shl    eax,0x8
c000f49f:	09 d0                	or     eax,edx
c000f4a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f4a5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f4aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ae:	8d 50 01             	lea    edx,[eax+0x1]
c000f4b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4b9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4bd:	0f b6 c0             	movzx  eax,al
c000f4c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4c8:	c1 e0 08             	shl    eax,0x8
c000f4cb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f4cf:	89 c1                	mov    ecx,eax
c000f4d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4d5:	c1 e0 18             	shl    eax,0x18
c000f4d8:	89 c3                	mov    ebx,eax
c000f4da:	a1 90 97 02 c0       	mov    eax,ds:0xc0029790
c000f4df:	8d 50 01             	lea    edx,[eax+0x1]
c000f4e2:	89 15 90 97 02 c0    	mov    DWORD PTR ds:0xc0029790,edx
c000f4e8:	09 d9                	or     ecx,ebx
c000f4ea:	89 ca                	mov    edx,ecx
c000f4ec:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c000f4f3:	eb 13                	jmp    c000f508 <scanMADT()+0x494>
c000f4f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f4f8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f4fd:	83 f8 05             	cmp    eax,0x5
c000f500:	75 06                	jne    c000f508 <scanMADT()+0x494>
c000f502:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f507:	90                   	nop
c000f508:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f50d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f511:	01 d0                	add    eax,edx
c000f513:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f517:	e9 50 fc ff ff       	jmp    c000f16c <scanMADT()+0xf8>
c000f51c:	90                   	nop
c000f51d:	eb 05                	jmp    c000f524 <scanMADT()+0x4b0>
c000f51f:	90                   	nop
c000f520:	90                   	nop
c000f521:	8d 76 00             	lea    esi,[esi+0x0]
c000f524:	83 c4 38             	add    esp,0x38
c000f527:	5b                   	pop    ebx
c000f528:	c3                   	ret    
c000f529:	90                   	nop
c000f52a:	66 90                	xchg   ax,ax

c000f52c <ACPI::ACPI()>:
c000f52c:	83 ec 0c             	sub    esp,0xc
c000f52f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f533:	83 ec 08             	sub    esp,0x8
c000f536:	68 91 18 02 c0       	push   0xc0021891
c000f53b:	50                   	push   eax
c000f53c:	e8 3b d2 ff ff       	call   c000c77c <Device::Device(char const*)>
c000f541:	83 c4 10             	add    esp,0x10
c000f544:	ba 00 1a 02 c0       	mov    edx,0xc0021a00
c000f549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f54d:	89 10                	mov    DWORD PTR [eax],edx
c000f54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f553:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f55e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f56c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f576:	e8 f9 fa ff ff       	call   c000f074 <scanMADT()>
c000f57b:	90                   	nop
c000f57c:	83 c4 0c             	add    esp,0xc
c000f57f:	c3                   	ret    

c000f580 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f580:	83 ec 2c             	sub    esp,0x2c
c000f583:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f587:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f58b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f58f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f593:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f598:	88 c8                	mov    al,cl
c000f59a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f59e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f5a3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f5ab:	90                   	nop
c000f5ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5b0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f5b6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f5ba:	0f 8d b0 00 00 00    	jge    c000f670 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f5c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5c8:	83 c2 2a             	add    edx,0x2a
c000f5cb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f5cf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f5d4:	0f b7 c0             	movzx  eax,ax
c000f5d7:	39 c2                	cmp    edx,eax
c000f5d9:	0f 85 85 00 00 00    	jne    c000f664 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f5df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5e7:	83 c2 2a             	add    edx,0x2a
c000f5ea:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f5ee:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f5f3:	0f b6 c0             	movzx  eax,al
c000f5f6:	39 c2                	cmp    edx,eax
c000f5f8:	75 6a                	jne    c000f664 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f5fa:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f5ff:	85 c0                	test   eax,eax
c000f601:	74 3d                	je     c000f640 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f603:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f607:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f60b:	83 c2 2a             	add    edx,0x2a
c000f60e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f612:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f616:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f619:	39 c2                	cmp    edx,eax
c000f61b:	74 13                	je     c000f630 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f61d:	83 ec 0c             	sub    esp,0xc
c000f620:	68 0c 18 02 c0       	push   0xc002180c
c000f625:	e8 33 1b 00 00       	call   c001115d <KePanic(char const*)>
c000f62a:	83 c4 10             	add    esp,0x10
c000f62d:	8d 76 00             	lea    esi,[esi+0x0]
c000f630:	83 ec 0c             	sub    esp,0xc
c000f633:	68 96 18 02 c0       	push   0xc0021896
c000f638:	e8 20 1b 00 00       	call   c001115d <KePanic(char const*)>
c000f63d:	83 c4 10             	add    esp,0x10
c000f640:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f644:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f648:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f64c:	83 c2 2a             	add    edx,0x2a
c000f64f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f653:	8b 02                	mov    eax,DWORD PTR [edx]
c000f655:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f658:	89 01                	mov    DWORD PTR [ecx],eax
c000f65a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f65d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f662:	66 90                	xchg   ax,ax
c000f664:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f669:	e9 3e ff ff ff       	jmp    c000f5ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f66e:	66 90                	xchg   ax,ax
c000f670:	90                   	nop
c000f671:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f675:	83 c4 2c             	add    esp,0x2c
c000f678:	c2 04 00             	ret    0x4
c000f67b:	90                   	nop

c000f67c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f67c:	83 ec 1c             	sub    esp,0x1c
c000f67f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f683:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f687:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f68b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f690:	88 c8                	mov    al,cl
c000f692:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f696:	88 d0                	mov    al,dl
c000f698:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f69c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6a0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6aa:	83 c2 2a             	add    edx,0x2a
c000f6ad:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f6b1:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f6b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6b9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6c3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f6c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f6ca:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f6cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6d3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6d9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f6dd:	83 c0 01             	add    eax,0x1
c000f6e0:	88 c1                	mov    cl,al
c000f6e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6e6:	83 c2 2a             	add    edx,0x2a
c000f6e9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f6ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6f1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6fb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f6fe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f702:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f706:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f70a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f710:	8d 50 01             	lea    edx,[eax+0x1]
c000f713:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f717:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f71d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f721:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f727:	3d 00 02 00 00       	cmp    eax,0x200
c000f72c:	75 12                	jne    c000f740 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f72e:	83 ec 0c             	sub    esp,0xc
c000f731:	68 a5 18 02 c0       	push   0xc00218a5
c000f736:	e8 22 1a 00 00       	call   c001115d <KePanic(char const*)>
c000f73b:	83 c4 10             	add    esp,0x10
c000f73e:	66 90                	xchg   ax,ax
c000f740:	90                   	nop
c000f741:	83 c4 1c             	add    esp,0x1c
c000f744:	c3                   	ret    
c000f745:	90                   	nop
c000f746:	66 90                	xchg   ax,ax

c000f748 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f748:	b8 00 00 00 00       	mov    eax,0x0
c000f74d:	c3                   	ret    
c000f74e:	66 90                	xchg   ax,ax

c000f750 <ACPI::detectPCI()>:
c000f750:	53                   	push   ebx
c000f751:	83 ec 28             	sub    esp,0x28
c000f754:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f759:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f75e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f763:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f769:	83 e0 04             	and    eax,0x4
c000f76c:	0f b6 c0             	movzx  eax,al
c000f76f:	85 c0                	test   eax,eax
c000f771:	74 2d                	je     c000f7a0 <ACPI::detectPCI()+0x50>
c000f773:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f778:	83 ec 08             	sub    esp,0x8
c000f77b:	68 c2 18 02 c0       	push   0xc00218c2
c000f780:	50                   	push   eax
c000f781:	e8 6e f8 ff ff       	call   c000eff4 <findDataTable(unsigned char*, char*)>
c000f786:	83 c4 10             	add    esp,0x10
c000f789:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f78d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f792:	74 0c                	je     c000f7a0 <ACPI::detectPCI()+0x50>
c000f794:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f799:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f79e:	66 90                	xchg   ax,ax
c000f7a0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f7a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7ac:	8a 00                	mov    al,BYTE PTR [eax]
c000f7ae:	0f b6 c0             	movzx  eax,al
c000f7b1:	83 f8 01             	cmp    eax,0x1
c000f7b4:	75 0e                	jne    c000f7c4 <ACPI::detectPCI()+0x74>
c000f7b6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7bb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7c0:	eb 2e                	jmp    c000f7f0 <ACPI::detectPCI()+0xa0>
c000f7c2:	66 90                	xchg   ax,ax
c000f7c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7c8:	8a 00                	mov    al,BYTE PTR [eax]
c000f7ca:	0f b6 c0             	movzx  eax,al
c000f7cd:	83 f8 02             	cmp    eax,0x2
c000f7d0:	75 1e                	jne    c000f7f0 <ACPI::detectPCI()+0xa0>
c000f7d2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7d7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f7dc:	85 c0                	test   eax,eax
c000f7de:	74 10                	je     c000f7f0 <ACPI::detectPCI()+0xa0>
c000f7e0:	83 ec 0c             	sub    esp,0xc
c000f7e3:	68 3c 18 02 c0       	push   0xc002183c
c000f7e8:	e8 70 19 00 00       	call   c001115d <KePanic(char const*)>
c000f7ed:	83 c4 10             	add    esp,0x10
c000f7f0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f7f4:	83 f0 01             	xor    eax,0x1
c000f7f7:	0f b6 c0             	movzx  eax,al
c000f7fa:	85 c0                	test   eax,eax
c000f7fc:	74 46                	je     c000f844 <ACPI::detectPCI()+0xf4>
c000f7fe:	e8 2d 09 ff ff       	call   c0000130 <manualPCIProbe>
c000f803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f807:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f80c:	75 0e                	jne    c000f81c <ACPI::detectPCI()+0xcc>
c000f80e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f813:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f818:	eb 2a                	jmp    c000f844 <ACPI::detectPCI()+0xf4>
c000f81a:	66 90                	xchg   ax,ax
c000f81c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f821:	75 21                	jne    c000f844 <ACPI::detectPCI()+0xf4>
c000f823:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f828:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f82d:	85 c0                	test   eax,eax
c000f82f:	74 13                	je     c000f844 <ACPI::detectPCI()+0xf4>
c000f831:	83 ec 0c             	sub    esp,0xc
c000f834:	68 3c 18 02 c0       	push   0xc002183c
c000f839:	e8 1f 19 00 00       	call   c001115d <KePanic(char const*)>
c000f83e:	83 c4 10             	add    esp,0x10
c000f841:	8d 76 00             	lea    esi,[esi+0x0]
c000f844:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f849:	85 c0                	test   eax,eax
c000f84b:	0f 84 87 00 00 00    	je     c000f8d8 <ACPI::detectPCI()+0x188>
c000f851:	83 ec 0c             	sub    esp,0xc
c000f854:	68 c7 18 02 c0       	push   0xc00218c7
c000f859:	e8 2a 12 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c000f85e:	83 c4 10             	add    esp,0x10
c000f861:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f869:	83 ec 0c             	sub    esp,0xc
c000f86c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f870:	e8 5e 82 ff ff       	call   c0007ad3 <malloc>
c000f875:	83 c4 10             	add    esp,0x10
c000f878:	89 c3                	mov    ebx,eax
c000f87a:	83 ec 0c             	sub    esp,0xc
c000f87d:	53                   	push   ebx
c000f87e:	e8 cb b2 00 00       	call   c001ab4e <PCI::PCI()>
c000f883:	83 c4 10             	add    esp,0x10
c000f886:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f88a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f88e:	83 ec 08             	sub    esp,0x8
c000f891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f895:	50                   	push   eax
c000f896:	e8 49 cd ff ff       	call   c000c5e4 <Device::addChild(Device*)>
c000f89b:	83 c4 10             	add    esp,0x10
c000f89e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8a2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8a4:	83 c0 08             	add    eax,0x8
c000f8a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8a9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f8ae:	85 d2                	test   edx,edx
c000f8b0:	74 0a                	je     c000f8bc <ACPI::detectPCI()+0x16c>
c000f8b2:	ba 01 00 00 00       	mov    edx,0x1
c000f8b7:	eb 0b                	jmp    c000f8c4 <ACPI::detectPCI()+0x174>
c000f8b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f8bc:	ba 02 00 00 00       	mov    edx,0x2
c000f8c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8c4:	6a 00                	push   0x0
c000f8c6:	6a 00                	push   0x0
c000f8c8:	52                   	push   edx
c000f8c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8cd:	ff d0                	call   eax
c000f8cf:	83 c4 10             	add    esp,0x10
c000f8d2:	e9 91 00 00 00       	jmp    c000f968 <ACPI::detectPCI()+0x218>
c000f8d7:	90                   	nop
c000f8d8:	83 ec 0c             	sub    esp,0xc
c000f8db:	68 df 18 02 c0       	push   0xc00218df
c000f8e0:	e8 a3 11 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c000f8e5:	83 c4 10             	add    esp,0x10
c000f8e8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f8ef:	83 ec 0c             	sub    esp,0xc
c000f8f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f8f6:	e8 d8 81 ff ff       	call   c0007ad3 <malloc>
c000f8fb:	83 c4 10             	add    esp,0x10
c000f8fe:	89 c3                	mov    ebx,eax
c000f900:	83 ec 0c             	sub    esp,0xc
c000f903:	53                   	push   ebx
c000f904:	e8 ed bd 00 00       	call   c001b6f6 <IDE::IDE()>
c000f909:	83 c4 10             	add    esp,0x10
c000f90c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f910:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f914:	83 ec 08             	sub    esp,0x8
c000f917:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f91b:	50                   	push   eax
c000f91c:	e8 c3 cc ff ff       	call   c000c5e4 <Device::addChild(Device*)>
c000f921:	83 c4 10             	add    esp,0x10
c000f924:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f928:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f936:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f93f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f943:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f94c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f950:	8b 00                	mov    eax,DWORD PTR [eax]
c000f952:	83 c0 08             	add    eax,0x8
c000f955:	8b 00                	mov    eax,DWORD PTR [eax]
c000f957:	6a 00                	push   0x0
c000f959:	6a 00                	push   0x0
c000f95b:	6a 00                	push   0x0
c000f95d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f961:	ff d0                	call   eax
c000f963:	83 c4 10             	add    esp,0x10
c000f966:	66 90                	xchg   ax,ax
c000f968:	90                   	nop
c000f969:	83 c4 28             	add    esp,0x28
c000f96c:	5b                   	pop    ebx
c000f96d:	c3                   	ret    
c000f96e:	66 90                	xchg   ax,ax

c000f970 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f970:	83 ec 1c             	sub    esp,0x1c
c000f973:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f977:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f97a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f97e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f983:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f988:	83 ec 08             	sub    esp,0x8
c000f98b:	52                   	push   edx
c000f98c:	50                   	push   eax
c000f98d:	e8 08 78 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000f992:	83 c4 10             	add    esp,0x10
c000f995:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f999:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f99e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f9a3:	83 ec 04             	sub    esp,0x4
c000f9a6:	6a 01                	push   0x1
c000f9a8:	52                   	push   edx
c000f9a9:	50                   	push   eax
c000f9aa:	e8 03 79 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f9af:	83 c4 10             	add    esp,0x10
c000f9b2:	90                   	nop
c000f9b3:	83 c4 1c             	add    esp,0x1c
c000f9b6:	c3                   	ret    
c000f9b7:	90                   	nop

c000f9b8 <ACPI::sleep()>:
c000f9b8:	83 ec 0c             	sub    esp,0xc
c000f9bb:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c000f9c0:	85 c0                	test   eax,eax
c000f9c2:	74 08                	je     c000f9cc <ACPI::sleep()+0x14>
c000f9c4:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c000f9c9:	ff d0                	call   eax
c000f9cb:	90                   	nop
c000f9cc:	90                   	nop
c000f9cd:	83 c4 0c             	add    esp,0xc
c000f9d0:	c3                   	ret    
c000f9d1:	90                   	nop
c000f9d2:	66 90                	xchg   ax,ax

c000f9d4 <ACPI::open(int, int, void*)>:
c000f9d4:	55                   	push   ebp
c000f9d5:	89 e5                	mov    ebp,esp
c000f9d7:	53                   	push   ebx
c000f9d8:	81 ec 74 01 00 00    	sub    esp,0x174
c000f9de:	83 ec 0c             	sub    esp,0xc
c000f9e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f9e4:	e8 67 fd ff ff       	call   c000f750 <ACPI::detectPCI()>
c000f9e9:	83 c4 10             	add    esp,0x10
c000f9ec:	83 ec 0c             	sub    esp,0xc
c000f9ef:	68 64 18 02 c0       	push   0xc0021864
c000f9f4:	e8 8f 10 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c000f9f9:	83 c4 10             	add    esp,0x10
c000f9fc:	b8 4c 05 00 00       	mov    eax,0x54c
c000fa01:	8a 00                	mov    al,BYTE PTR [eax]
c000fa03:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fa06:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fa0a:	83 f8 01             	cmp    eax,0x1
c000fa0d:	75 15                	jne    c000fa24 <ACPI::open(int, int, void*)+0x50>
c000fa0f:	83 ec 0c             	sub    esp,0xc
c000fa12:	68 f4 18 02 c0       	push   0xc00218f4
c000fa17:	e8 56 4b 00 00       	call   c0014572 <Thr::loadKernelSymbolTable(char const*)>
c000fa1c:	83 c4 10             	add    esp,0x10
c000fa1f:	eb 33                	jmp    c000fa54 <ACPI::open(int, int, void*)+0x80>
c000fa21:	8d 76 00             	lea    esi,[esi+0x0]
c000fa24:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fa28:	3d bb 00 00 00       	cmp    eax,0xbb
c000fa2d:	75 15                	jne    c000fa44 <ACPI::open(int, int, void*)+0x70>
c000fa2f:	83 ec 0c             	sub    esp,0xc
c000fa32:	68 12 19 02 c0       	push   0xc0021912
c000fa37:	e8 36 4b 00 00       	call   c0014572 <Thr::loadKernelSymbolTable(char const*)>
c000fa3c:	83 c4 10             	add    esp,0x10
c000fa3f:	eb 13                	jmp    c000fa54 <ACPI::open(int, int, void*)+0x80>
c000fa41:	8d 76 00             	lea    esi,[esi+0x0]
c000fa44:	83 ec 0c             	sub    esp,0xc
c000fa47:	68 30 19 02 c0       	push   0xc0021930
c000fa4c:	e8 0c 17 00 00       	call   c001115d <KePanic(char const*)>
c000fa51:	83 c4 10             	add    esp,0x10
c000fa54:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fa58:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fa5f:	83 ec 0c             	sub    esp,0xc
c000fa62:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fa65:	e8 69 80 ff ff       	call   c0007ad3 <malloc>
c000fa6a:	83 c4 10             	add    esp,0x10
c000fa6d:	89 c3                	mov    ebx,eax
c000fa6f:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fa74:	83 ec 04             	sub    esp,0x4
c000fa77:	50                   	push   eax
c000fa78:	68 4a 19 02 c0       	push   0xc002194a
c000fa7d:	53                   	push   ebx
c000fa7e:	e8 53 bc ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c000fa83:	83 c4 10             	add    esp,0x10
c000fa86:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fa89:	83 ec 08             	sub    esp,0x8
c000fa8c:	6a 01                	push   0x1
c000fa8e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fa91:	e8 fc bc ff ff       	call   c000b792 <File::open(FileOpenMode)>
c000fa96:	83 c4 10             	add    esp,0x10
c000fa99:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fa9c:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000faa0:	75 12                	jne    c000fab4 <ACPI::open(int, int, void*)+0xe0>
c000faa2:	83 ec 0c             	sub    esp,0xc
c000faa5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000faa8:	e8 43 bd ff ff       	call   c000b7f0 <File::close()>
c000faad:	83 c4 10             	add    esp,0x10
c000fab0:	eb 06                	jmp    c000fab8 <ACPI::open(int, int, void*)+0xe4>
c000fab2:	66 90                	xchg   ax,ax
c000fab4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fab8:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fabc:	74 16                	je     c000fad4 <ACPI::open(int, int, void*)+0x100>
c000fabe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fac1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fac3:	83 c0 08             	add    eax,0x8
c000fac6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fac8:	83 ec 0c             	sub    esp,0xc
c000facb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000face:	ff d0                	call   eax
c000fad0:	83 c4 10             	add    esp,0x10
c000fad3:	90                   	nop
c000fad4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fad7:	83 f0 01             	xor    eax,0x1
c000fada:	0f b6 c0             	movzx  eax,al
c000fadd:	85 c0                	test   eax,eax
c000fadf:	74 3b                	je     c000fb1c <ACPI::open(int, int, void*)+0x148>
c000fae1:	83 ec 0c             	sub    esp,0xc
c000fae4:	68 68 19 02 c0       	push   0xc0021968
c000fae9:	e8 9a 0f 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c000faee:	83 c4 10             	add    esp,0x10
c000faf1:	83 ec 04             	sub    esp,0x4
c000faf4:	6a 0c                	push   0xc
c000faf6:	68 83 19 02 c0       	push   0xc0021983
c000fafb:	68 94 19 02 c0       	push   0xc0021994
c000fb00:	e8 19 3d 00 00       	call   c001381e <Reg::readIntWithDefault(char*, char*, int)>
c000fb05:	83 c4 10             	add    esp,0x10
c000fb08:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fb0b:	83 ec 0c             	sub    esp,0xc
c000fb0e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fb11:	e8 04 9d ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fb16:	83 c4 10             	add    esp,0x10
c000fb19:	8d 76 00             	lea    esi,[esi+0x0]
c000fb1c:	83 ec 0c             	sub    esp,0xc
c000fb1f:	68 15 05 02 c0       	push   0xc0020515
c000fb24:	e8 5f 0f 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c000fb29:	83 c4 10             	add    esp,0x10
c000fb2c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb2f:	83 ec 08             	sub    esp,0x8
c000fb32:	6a 13                	push   0x13
c000fb34:	50                   	push   eax
c000fb35:	e8 c2 cd ff ff       	call   c000c8fc <getDevicesOfType(DeviceType)>
c000fb3a:	83 c4 0c             	add    esp,0xc
c000fb3d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb40:	83 ec 0c             	sub    esp,0xc
c000fb43:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb46:	50                   	push   eax
c000fb47:	e8 b4 fd 00 00       	call   c001f900 <LinkedList<Device>::isEmpty()>
c000fb4c:	83 c4 10             	add    esp,0x10
c000fb4f:	83 f0 01             	xor    eax,0x1
c000fb52:	0f b6 c0             	movzx  eax,al
c000fb55:	85 c0                	test   eax,eax
c000fb57:	0f 84 1f 01 00 00    	je     c000fc7c <ACPI::open(int, int, void*)+0x2a8>
c000fb5d:	83 ec 0c             	sub    esp,0xc
c000fb60:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb63:	50                   	push   eax
c000fb64:	e8 b3 fd 00 00       	call   c001f91c <LinkedList<Device>::getFirstElement()>
c000fb69:	83 c4 10             	add    esp,0x10
c000fb6c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fb6f:	83 ec 0c             	sub    esp,0xc
c000fb72:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb75:	50                   	push   eax
c000fb76:	e8 a9 fd 00 00       	call   c001f924 <LinkedList<Device>::removeFirst()>
c000fb7b:	83 c4 10             	add    esp,0x10
c000fb7e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fb81:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fb84:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fb87:	b8 24 00 00 00       	mov    eax,0x24
c000fb8c:	83 e0 fc             	and    eax,0xfffffffc
c000fb8f:	89 c3                	mov    ebx,eax
c000fb91:	b8 00 00 00 00       	mov    eax,0x0
c000fb96:	66 90                	xchg   ax,ax
c000fb98:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fb9f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000fba6:	83 c0 04             	add    eax,0x4
c000fba9:	39 d8                	cmp    eax,ebx
c000fbab:	72 eb                	jb     c000fb98 <ACPI::open(int, int, void*)+0x1c4>
c000fbad:	83 ec 08             	sub    esp,0x8
c000fbb0:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000fbb6:	50                   	push   eax
c000fbb7:	83 ec 24             	sub    esp,0x24
c000fbba:	89 e1                	mov    ecx,esp
c000fbbc:	b8 24 00 00 00       	mov    eax,0x24
c000fbc1:	83 e0 fc             	and    eax,0xfffffffc
c000fbc4:	89 c3                	mov    ebx,eax
c000fbc6:	b8 00 00 00 00       	mov    eax,0x0
c000fbcb:	90                   	nop
c000fbcc:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000fbd3:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000fbd6:	83 c0 04             	add    eax,0x4
c000fbd9:	39 d8                	cmp    eax,ebx
c000fbdb:	72 ef                	jb     c000fbcc <ACPI::open(int, int, void*)+0x1f8>
c000fbdd:	e8 54 b4 00 00       	call   c001b036 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fbe2:	83 c4 30             	add    esp,0x30
c000fbe5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000fbe8:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000fbec:	0f 84 4e ff ff ff    	je     c000fb40 <ACPI::open(int, int, void*)+0x16c>
c000fbf2:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000fbf9:	83 ec 0c             	sub    esp,0xc
c000fbfc:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000fbff:	e8 cf 7e ff ff       	call   c0007ad3 <malloc>
c000fc04:	83 c4 10             	add    esp,0x10
c000fc07:	89 c3                	mov    ebx,eax
c000fc09:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fc0e:	83 ec 04             	sub    esp,0x4
c000fc11:	50                   	push   eax
c000fc12:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fc15:	53                   	push   ebx
c000fc16:	e8 bb ba ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c000fc1b:	83 c4 10             	add    esp,0x10
c000fc1e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000fc21:	83 ec 0c             	sub    esp,0xc
c000fc24:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fc27:	e8 2a be ff ff       	call   c000ba56 <File::exists()>
c000fc2c:	83 c4 10             	add    esp,0x10
c000fc2f:	0f b6 c0             	movzx  eax,al
c000fc32:	85 c0                	test   eax,eax
c000fc34:	74 22                	je     c000fc58 <ACPI::open(int, int, void*)+0x284>
c000fc36:	83 ec 08             	sub    esp,0x8
c000fc39:	6a 01                	push   0x1
c000fc3b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fc3e:	e8 b1 53 00 00       	call   c0014ff4 <Thr::loadDLL(char const*, bool)>
c000fc43:	83 c4 10             	add    esp,0x10
c000fc46:	83 ec 08             	sub    esp,0x8
c000fc49:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fc4c:	50                   	push   eax
c000fc4d:	e8 e2 55 00 00       	call   c0015234 <Thr::executeDLL(unsigned long, void*)>
c000fc52:	83 c4 10             	add    esp,0x10
c000fc55:	8d 76 00             	lea    esi,[esi+0x0]
c000fc58:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000fc5c:	0f 84 de fe ff ff    	je     c000fb40 <ACPI::open(int, int, void*)+0x16c>
c000fc62:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000fc65:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc67:	83 c0 08             	add    eax,0x8
c000fc6a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc6c:	83 ec 0c             	sub    esp,0xc
c000fc6f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fc72:	ff d0                	call   eax
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	e9 c4 fe ff ff       	jmp    c000fb40 <ACPI::open(int, int, void*)+0x16c>
c000fc7c:	83 ec 0c             	sub    esp,0xc
c000fc7f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc82:	50                   	push   eax
c000fc83:	e8 74 fc 00 00       	call   c001f8fc <LinkedList<Device>::~LinkedList()>
c000fc88:	83 c4 10             	add    esp,0x10
c000fc8b:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fc91:	83 ec 08             	sub    esp,0x8
c000fc94:	6a 01                	push   0x1
c000fc96:	68 9b 19 02 c0       	push   0xc002199b
c000fc9b:	e8 54 53 00 00       	call   c0014ff4 <Thr::loadDLL(char const*, bool)>
c000fca0:	83 c4 10             	add    esp,0x10
c000fca3:	83 ec 08             	sub    esp,0x8
c000fca6:	53                   	push   ebx
c000fca7:	50                   	push   eax
c000fca8:	e8 87 55 00 00       	call   c0015234 <Thr::executeDLL(unsigned long, void*)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fcb5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fcbb:	83 e0 04             	and    eax,0x4
c000fcbe:	0f b6 c0             	movzx  eax,al
c000fcc1:	85 c0                	test   eax,eax
c000fcc3:	0f 84 e3 00 00 00    	je     c000fdac <ACPI::open(int, int, void*)+0x3d8>
c000fcc9:	83 ec 0c             	sub    esp,0xc
c000fccc:	68 b8 19 02 c0       	push   0xc00219b8
c000fcd1:	e8 b2 0d 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c000fcd6:	83 c4 10             	add    esp,0x10
c000fcd9:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000fce0:	83 ec 0c             	sub    esp,0xc
c000fce3:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000fce6:	e8 e8 7d ff ff       	call   c0007ad3 <malloc>
c000fceb:	83 c4 10             	add    esp,0x10
c000fcee:	89 c3                	mov    ebx,eax
c000fcf0:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fcf5:	83 ec 04             	sub    esp,0x4
c000fcf8:	50                   	push   eax
c000fcf9:	68 d5 19 02 c0       	push   0xc00219d5
c000fcfe:	53                   	push   ebx
c000fcff:	e8 d2 b9 ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c000fd04:	83 c4 10             	add    esp,0x10
c000fd07:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000fd0a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fd0e:	74 1c                	je     c000fd2c <ACPI::open(int, int, void*)+0x358>
c000fd10:	83 ec 0c             	sub    esp,0xc
c000fd13:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fd16:	e8 3b bd ff ff       	call   c000ba56 <File::exists()>
c000fd1b:	83 c4 10             	add    esp,0x10
c000fd1e:	0f b6 c0             	movzx  eax,al
c000fd21:	85 c0                	test   eax,eax
c000fd23:	74 07                	je     c000fd2c <ACPI::open(int, int, void*)+0x358>
c000fd25:	b0 01                	mov    al,0x1
c000fd27:	eb 07                	jmp    c000fd30 <ACPI::open(int, int, void*)+0x35c>
c000fd29:	8d 76 00             	lea    esi,[esi+0x0]
c000fd2c:	b0 00                	mov    al,0x0
c000fd2e:	66 90                	xchg   ax,ax
c000fd30:	0f b6 c0             	movzx  eax,al
c000fd33:	85 c0                	test   eax,eax
c000fd35:	74 21                	je     c000fd58 <ACPI::open(int, int, void*)+0x384>
c000fd37:	83 ec 08             	sub    esp,0x8
c000fd3a:	6a 01                	push   0x1
c000fd3c:	68 d5 19 02 c0       	push   0xc00219d5
c000fd41:	e8 ae 52 00 00       	call   c0014ff4 <Thr::loadDLL(char const*, bool)>
c000fd46:	83 c4 10             	add    esp,0x10
c000fd49:	83 ec 08             	sub    esp,0x8
c000fd4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fd4f:	50                   	push   eax
c000fd50:	e8 df 54 00 00       	call   c0015234 <Thr::executeDLL(unsigned long, void*)>
c000fd55:	83 c4 10             	add    esp,0x10
c000fd58:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fd5c:	74 1e                	je     c000fd7c <ACPI::open(int, int, void*)+0x3a8>
c000fd5e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fd62:	74 18                	je     c000fd7c <ACPI::open(int, int, void*)+0x3a8>
c000fd64:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000fd67:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd69:	83 c0 08             	add    eax,0x8
c000fd6c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd6e:	83 ec 0c             	sub    esp,0xc
c000fd71:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fd74:	ff d0                	call   eax
c000fd76:	83 c4 10             	add    esp,0x10
c000fd79:	8d 76 00             	lea    esi,[esi+0x0]
c000fd7c:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000fd81:	83 ec 08             	sub    esp,0x8
c000fd84:	68 f2 19 02 c0       	push   0xc00219f2
c000fd89:	50                   	push   eax
c000fd8a:	e8 65 f2 ff ff       	call   c000eff4 <findDataTable(unsigned char*, char*)>
c000fd8f:	83 c4 10             	add    esp,0x10
c000fd92:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000fd95:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000fd99:	74 11                	je     c000fdac <ACPI::open(int, int, void*)+0x3d8>
c000fd9b:	83 ec 08             	sub    esp,0x8
c000fd9e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000fda1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fda4:	e8 c7 fb ff ff       	call   c000f970 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fda9:	83 c4 10             	add    esp,0x10
c000fdac:	b8 00 00 00 00       	mov    eax,0x0
c000fdb1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fdb4:	c9                   	leave  
c000fdb5:	c3                   	ret    

c000fdb6 <CPU::close(int, int, void*)>:
c000fdb6:	31 c0                	xor    eax,eax
c000fdb8:	c3                   	ret    
c000fdb9:	90                   	nop

c000fdba <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fdba:	60                   	pusha  
c000fdbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fdbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fdc7:	9c                   	pushf  
c000fdc8:	fa                   	cli    
c000fdc9:	0f 09                	wbinvd 
c000fdcb:	0f 30                	wrmsr  
c000fdcd:	9d                   	popf   
c000fdce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdd2:	89 02                	mov    DWORD PTR [edx],eax
c000fdd4:	61                   	popa   
c000fdd5:	c3                   	ret    

c000fdd6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000fdd6:	60                   	pusha  
c000fdd7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fddb:	9c                   	pushf  
c000fddc:	fa                   	cli    
c000fddd:	0f 09                	wbinvd 
c000fddf:	31 c0                	xor    eax,eax
c000fde1:	31 d2                	xor    edx,edx
c000fde3:	0f 32                	rdmsr  
c000fde5:	9d                   	popf   
c000fde6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdea:	89 02                	mov    DWORD PTR [edx],eax
c000fdec:	61                   	popa   
c000fded:	c3                   	ret    

c000fdee <CPU::AMD_K6_writeback(int, int, int)>:
c000fdee:	56                   	push   esi
c000fdef:	53                   	push   ebx
c000fdf0:	83 ec 10             	sub    esp,0x10
c000fdf3:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000fdf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdfc:	75 5d                	jne    c000fe5b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fdfe:	83 f8 08             	cmp    eax,0x8
c000fe01:	75 09                	jne    c000fe0c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000fe03:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000fe08:	7e 13                	jle    c000fe1d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fe0a:	eb 30                	jmp    c000fe3c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fe0c:	83 f8 06             	cmp    eax,0x6
c000fe0f:	7c 4a                	jl     c000fe5b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe11:	83 f8 07             	cmp    eax,0x7
c000fe14:	7e 07                	jle    c000fe1d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fe16:	83 f8 09             	cmp    eax,0x9
c000fe19:	74 21                	je     c000fe3c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fe1b:	eb 3e                	jmp    c000fe5b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe1d:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000fe23:	89 e6                	mov    esi,esp
c000fe25:	56                   	push   esi
c000fe26:	68 82 00 00 c0       	push   0xc0000082
c000fe2b:	e8 a6 ff ff ff       	call   c000fdd6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fe30:	c1 eb 15             	shr    ebx,0x15
c000fe33:	56                   	push   esi
c000fe34:	83 e3 7e             	and    ebx,0x7e
c000fe37:	6a 00                	push   0x0
c000fe39:	53                   	push   ebx
c000fe3a:	eb 12                	jmp    c000fe4e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000fe3c:	89 e3                	mov    ebx,esp
c000fe3e:	53                   	push   ebx
c000fe3f:	68 82 00 00 c0       	push   0xc0000082
c000fe44:	e8 8d ff ff ff       	call   c000fdd6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fe49:	53                   	push   ebx
c000fe4a:	6a 00                	push   0x0
c000fe4c:	6a 00                	push   0x0
c000fe4e:	68 82 00 00 c0       	push   0xc0000082
c000fe53:	e8 62 ff ff ff       	call   c000fdba <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000fe58:	83 c4 18             	add    esp,0x18
c000fe5b:	83 c4 10             	add    esp,0x10
c000fe5e:	5b                   	pop    ebx
c000fe5f:	5e                   	pop    esi
c000fe60:	c3                   	ret    
c000fe61:	90                   	nop

c000fe62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000fe62:	55                   	push   ebp
c000fe63:	57                   	push   edi
c000fe64:	56                   	push   esi
c000fe65:	53                   	push   ebx
c000fe66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe6a:	39 05 98 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f98,eax
c000fe70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000fe74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fe78:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000fe7c:	75 23                	jne    c000fea1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000fe7e:	a1 ec 99 02 c0       	mov    eax,ds:0xc00299ec
c000fe83:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fe87:	89 06                	mov    DWORD PTR [esi],eax
c000fe89:	a1 e8 99 02 c0       	mov    eax,ds:0xc00299e8
c000fe8e:	89 07                	mov    DWORD PTR [edi],eax
c000fe90:	a1 e4 99 02 c0       	mov    eax,ds:0xc00299e4
c000fe95:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fe98:	a1 e0 99 02 c0       	mov    eax,ds:0xc00299e0
c000fe9d:	89 02                	mov    DWORD PTR [edx],eax
c000fe9f:	eb 3f                	jmp    c000fee0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000fea1:	31 c9                	xor    ecx,ecx
c000fea3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fea7:	0f a2                	cpuid  
c000fea9:	89 06                	mov    DWORD PTR [esi],eax
c000feab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000feaf:	89 1f                	mov    DWORD PTR [edi],ebx
c000feb1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000feb4:	89 10                	mov    DWORD PTR [eax],edx
c000feb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000feba:	a3 98 2f 02 c0       	mov    ds:0xc0022f98,eax
c000febf:	8b 06                	mov    eax,DWORD PTR [esi]
c000fec1:	a3 ec 99 02 c0       	mov    ds:0xc00299ec,eax
c000fec6:	8b 07                	mov    eax,DWORD PTR [edi]
c000fec8:	a3 e8 99 02 c0       	mov    ds:0xc00299e8,eax
c000fecd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fed0:	a3 e4 99 02 c0       	mov    ds:0xc00299e4,eax
c000fed5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fed9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fedb:	a3 e0 99 02 c0       	mov    ds:0xc00299e0,eax
c000fee0:	5b                   	pop    ebx
c000fee1:	5e                   	pop    esi
c000fee2:	5f                   	pop    edi
c000fee3:	5d                   	pop    ebp
c000fee4:	c3                   	ret    
c000fee5:	90                   	nop

c000fee6 <CPU::cpuidCheckEDX(unsigned int)>:
c000fee6:	83 ec 10             	sub    esp,0x10
c000fee9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000feed:	50                   	push   eax
c000feee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fef2:	50                   	push   eax
c000fef3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fef7:	50                   	push   eax
c000fef8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fefc:	50                   	push   eax
c000fefd:	6a 01                	push   0x1
c000feff:	e8 5e ff ff ff       	call   c000fe62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff08:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000ff0c:	0f 95 c0             	setne  al
c000ff0f:	83 c4 24             	add    esp,0x24
c000ff12:	c3                   	ret    
c000ff13:	90                   	nop

c000ff14 <CPU::cpuidCheckECX(unsigned int)>:
c000ff14:	83 ec 10             	sub    esp,0x10
c000ff17:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff1b:	50                   	push   eax
c000ff1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff20:	50                   	push   eax
c000ff21:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff25:	50                   	push   eax
c000ff26:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff2a:	50                   	push   eax
c000ff2b:	6a 01                	push   0x1
c000ff2d:	e8 30 ff ff ff       	call   c000fe62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff36:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000ff3a:	0f 95 c0             	setne  al
c000ff3d:	83 c4 24             	add    esp,0x24
c000ff40:	c3                   	ret    
c000ff41:	90                   	nop

c000ff42 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000ff42:	83 ec 10             	sub    esp,0x10
c000ff45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff49:	50                   	push   eax
c000ff4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff4e:	50                   	push   eax
c000ff4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff53:	50                   	push   eax
c000ff54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff58:	50                   	push   eax
c000ff59:	6a 07                	push   0x7
c000ff5b:	e8 02 ff ff ff       	call   c000fe62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff64:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000ff68:	0f 95 c0             	setne  al
c000ff6b:	83 c4 24             	add    esp,0x24
c000ff6e:	c3                   	ret    
c000ff6f:	90                   	nop

c000ff70 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000ff70:	83 ec 10             	sub    esp,0x10
c000ff73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff77:	50                   	push   eax
c000ff78:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff7c:	50                   	push   eax
c000ff7d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff81:	50                   	push   eax
c000ff82:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff86:	50                   	push   eax
c000ff87:	6a 07                	push   0x7
c000ff89:	e8 d4 fe ff ff       	call   c000fe62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff92:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000ff96:	0f 95 c0             	setne  al
c000ff99:	83 c4 24             	add    esp,0x24
c000ff9c:	c3                   	ret    
c000ff9d:	90                   	nop

c000ff9e <CPU::CPU()>:
c000ff9e:	83 ec 0c             	sub    esp,0xc
c000ffa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa5:	83 ec 08             	sub    esp,0x8
c000ffa8:	68 15 1b 02 c0       	push   0xc0021b15
c000ffad:	50                   	push   eax
c000ffae:	e8 c9 c7 ff ff       	call   c000c77c <Device::Device(char const*)>
c000ffb3:	83 c4 10             	add    esp,0x10
c000ffb6:	ba a8 1b 02 c0       	mov    edx,0xc0021ba8
c000ffbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffbf:	89 10                	mov    DWORD PTR [eax],edx
c000ffc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000ffcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd3:	05 78 01 00 00       	add    eax,0x178
c000ffd8:	83 ec 0c             	sub    esp,0xc
c000ffdb:	50                   	push   eax
c000ffdc:	e8 9b 73 ff ff       	call   c000737c <GDT::GDT()>
c000ffe1:	83 c4 10             	add    esp,0x10
c000ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe8:	05 7c 09 00 00       	add    eax,0x97c
c000ffed:	83 ec 0c             	sub    esp,0xc
c000fff0:	50                   	push   eax
c000fff1:	e8 d6 75 ff ff       	call   c00075cc <IDT::IDT()>
c000fff6:	83 c4 10             	add    esp,0x10
c000fff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fffd:	05 7c 11 00 00       	add    eax,0x117c
c0010002:	83 ec 0c             	sub    esp,0xc
c0010005:	50                   	push   eax
c0010006:	e8 21 8f ff ff       	call   c0008f2c <TSS::TSS()>
c001000b:	83 c4 10             	add    esp,0x10
c001000e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010012:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001d:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010027:	90                   	nop
c0010028:	83 c4 0c             	add    esp,0xc
c001002b:	c3                   	ret    

c001002c <CPU::displayFeatures()>:
c001002c:	c3                   	ret    
c001002d:	90                   	nop

c001002e <CPU::detectFeatures()>:
c001002e:	55                   	push   ebp
c001002f:	57                   	push   edi
c0010030:	56                   	push   esi
c0010031:	53                   	push   ebx
c0010032:	83 ec 30             	sub    esp,0x30
c0010035:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010039:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010043:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010049:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010050:	6a 0d                	push   0xd
c0010052:	6a 00                	push   0x0
c0010054:	55                   	push   ebp
c0010055:	e8 96 04 ff ff       	call   c00004f0 <memset>
c001005a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001005f:	83 c4 10             	add    esp,0x10
c0010062:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010069:	0f 84 db 05 00 00    	je     c001064a <CPU::detectFeatures()+0x61c>
c001006f:	83 ec 0c             	sub    esp,0xc
c0010072:	89 ef                	mov    edi,ebp
c0010074:	6a 10                	push   0x10
c0010076:	e8 6b fe ff ff       	call   c000fee6 <CPU::cpuidCheckEDX(unsigned int)>
c001007b:	83 e0 01             	and    eax,0x1
c001007e:	8d 14 00             	lea    edx,[eax+eax*1]
c0010081:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010087:	83 e0 fd             	and    eax,0xfffffffd
c001008a:	09 d0                	or     eax,edx
c001008c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010092:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010099:	e8 48 fe ff ff       	call   c000fee6 <CPU::cpuidCheckEDX(unsigned int)>
c001009e:	83 e0 01             	and    eax,0x1
c00100a1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00100a8:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00100ae:	83 e0 fb             	and    eax,0xfffffffb
c00100b1:	09 d0                	or     eax,edx
c00100b3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00100b9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00100c0:	e8 21 fe ff ff       	call   c000fee6 <CPU::cpuidCheckEDX(unsigned int)>
c00100c5:	83 e0 01             	and    eax,0x1
c00100c8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00100cf:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00100d5:	83 e0 f7             	and    eax,0xfffffff7
c00100d8:	09 d0                	or     eax,edx
c00100da:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00100e0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00100e7:	e8 fa fd ff ff       	call   c000fee6 <CPU::cpuidCheckEDX(unsigned int)>
c00100ec:	83 e0 01             	and    eax,0x1
c00100ef:	c1 e0 04             	shl    eax,0x4
c00100f2:	89 c2                	mov    edx,eax
c00100f4:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00100fa:	83 e0 ef             	and    eax,0xffffffef
c00100fd:	09 d0                	or     eax,edx
c00100ff:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010105:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001010c:	e8 d5 fd ff ff       	call   c000fee6 <CPU::cpuidCheckEDX(unsigned int)>
c0010111:	83 e0 01             	and    eax,0x1
c0010114:	c1 e0 05             	shl    eax,0x5
c0010117:	89 c2                	mov    edx,eax
c0010119:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001011f:	83 e0 df             	and    eax,0xffffffdf
c0010122:	09 d0                	or     eax,edx
c0010124:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001012a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010131:	e8 b0 fd ff ff       	call   c000fee6 <CPU::cpuidCheckEDX(unsigned int)>
c0010136:	83 e0 01             	and    eax,0x1
c0010139:	8d 14 00             	lea    edx,[eax+eax*1]
c001013c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010142:	83 e0 fd             	and    eax,0xfffffffd
c0010145:	09 d0                	or     eax,edx
c0010147:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001014d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010154:	e8 8d fd ff ff       	call   c000fee6 <CPU::cpuidCheckEDX(unsigned int)>
c0010159:	83 e0 01             	and    eax,0x1
c001015c:	c1 e0 06             	shl    eax,0x6
c001015f:	89 c2                	mov    edx,eax
c0010161:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010167:	83 e0 bf             	and    eax,0xffffffbf
c001016a:	09 d0                	or     eax,edx
c001016c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010172:	58                   	pop    eax
c0010173:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010177:	50                   	push   eax
c0010178:	8d 44 24 28          	lea    eax,[esp+0x28]
c001017c:	50                   	push   eax
c001017d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010181:	56                   	push   esi
c0010182:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010186:	50                   	push   eax
c0010187:	6a 00                	push   0x0
c0010189:	e8 d4 fc ff ff       	call   c000fe62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001018e:	b8 04 00 00 00       	mov    eax,0x4
c0010193:	89 c1                	mov    ecx,eax
c0010195:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010197:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001019d:	89 c1                	mov    ecx,eax
c001019f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00101a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101a5:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00101ab:	89 c1                	mov    ecx,eax
c00101ad:	8d 74 24 38          	lea    esi,[esp+0x38]
c00101b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101b3:	83 c4 18             	add    esp,0x18
c00101b6:	68 24 1a 02 c0       	push   0xc0021a24
c00101bb:	55                   	push   ebp
c00101bc:	e8 bf 05 ff ff       	call   c0000780 <strcmp>
c00101c1:	83 c4 10             	add    esp,0x10
c00101c4:	85 c0                	test   eax,eax
c00101c6:	75 0f                	jne    c00101d7 <CPU::detectFeatures()+0x1a9>
c00101c8:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00101d2:	e9 22 02 00 00       	jmp    c00103f9 <CPU::detectFeatures()+0x3cb>
c00101d7:	50                   	push   eax
c00101d8:	50                   	push   eax
c00101d9:	68 31 1a 02 c0       	push   0xc0021a31
c00101de:	55                   	push   ebp
c00101df:	e8 9c 05 ff ff       	call   c0000780 <strcmp>
c00101e4:	83 c4 10             	add    esp,0x10
c00101e7:	85 c0                	test   eax,eax
c00101e9:	74 dd                	je     c00101c8 <CPU::detectFeatures()+0x19a>
c00101eb:	50                   	push   eax
c00101ec:	50                   	push   eax
c00101ed:	68 3e 1a 02 c0       	push   0xc0021a3e
c00101f2:	55                   	push   ebp
c00101f3:	e8 88 05 ff ff       	call   c0000780 <strcmp>
c00101f8:	83 c4 10             	add    esp,0x10
c00101fb:	85 c0                	test   eax,eax
c00101fd:	74 2a                	je     c0010229 <CPU::detectFeatures()+0x1fb>
c00101ff:	50                   	push   eax
c0010200:	50                   	push   eax
c0010201:	68 4b 1a 02 c0       	push   0xc0021a4b
c0010206:	55                   	push   ebp
c0010207:	e8 74 05 ff ff       	call   c0000780 <strcmp>
c001020c:	83 c4 10             	add    esp,0x10
c001020f:	85 c0                	test   eax,eax
c0010211:	74 16                	je     c0010229 <CPU::detectFeatures()+0x1fb>
c0010213:	50                   	push   eax
c0010214:	50                   	push   eax
c0010215:	68 58 1a 02 c0       	push   0xc0021a58
c001021a:	55                   	push   ebp
c001021b:	e8 60 05 ff ff       	call   c0000780 <strcmp>
c0010220:	83 c4 10             	add    esp,0x10
c0010223:	85 c0                	test   eax,eax
c0010225:	74 48                	je     c001026f <CPU::detectFeatures()+0x241>
c0010227:	eb 0f                	jmp    c0010238 <CPU::detectFeatures()+0x20a>
c0010229:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010233:	e9 c1 01 00 00       	jmp    c00103f9 <CPU::detectFeatures()+0x3cb>
c0010238:	50                   	push   eax
c0010239:	50                   	push   eax
c001023a:	68 65 1a 02 c0       	push   0xc0021a65
c001023f:	55                   	push   ebp
c0010240:	e8 3b 05 ff ff       	call   c0000780 <strcmp>
c0010245:	83 c4 10             	add    esp,0x10
c0010248:	85 c0                	test   eax,eax
c001024a:	74 23                	je     c001026f <CPU::detectFeatures()+0x241>
c001024c:	57                   	push   edi
c001024d:	57                   	push   edi
c001024e:	68 72 1a 02 c0       	push   0xc0021a72
c0010253:	55                   	push   ebp
c0010254:	e8 27 05 ff ff       	call   c0000780 <strcmp>
c0010259:	83 c4 10             	add    esp,0x10
c001025c:	85 c0                	test   eax,eax
c001025e:	75 1e                	jne    c001027e <CPU::detectFeatures()+0x250>
c0010260:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001026a:	e9 8a 01 00 00       	jmp    c00103f9 <CPU::detectFeatures()+0x3cb>
c001026f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010279:	e9 7b 01 00 00       	jmp    c00103f9 <CPU::detectFeatures()+0x3cb>
c001027e:	56                   	push   esi
c001027f:	56                   	push   esi
c0010280:	68 7f 1a 02 c0       	push   0xc0021a7f
c0010285:	55                   	push   ebp
c0010286:	e8 f5 04 ff ff       	call   c0000780 <strcmp>
c001028b:	83 c4 10             	add    esp,0x10
c001028e:	85 c0                	test   eax,eax
c0010290:	75 0f                	jne    c00102a1 <CPU::detectFeatures()+0x273>
c0010292:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001029c:	e9 58 01 00 00       	jmp    c00103f9 <CPU::detectFeatures()+0x3cb>
c00102a1:	51                   	push   ecx
c00102a2:	51                   	push   ecx
c00102a3:	68 3e 1a 02 c0       	push   0xc0021a3e
c00102a8:	55                   	push   ebp
c00102a9:	e8 d2 04 ff ff       	call   c0000780 <strcmp>
c00102ae:	83 c4 10             	add    esp,0x10
c00102b1:	85 c0                	test   eax,eax
c00102b3:	75 0f                	jne    c00102c4 <CPU::detectFeatures()+0x296>
c00102b5:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00102bf:	e9 35 01 00 00       	jmp    c00103f9 <CPU::detectFeatures()+0x3cb>
c00102c4:	52                   	push   edx
c00102c5:	52                   	push   edx
c00102c6:	68 8c 1a 02 c0       	push   0xc0021a8c
c00102cb:	55                   	push   ebp
c00102cc:	e8 af 04 ff ff       	call   c0000780 <strcmp>
c00102d1:	83 c4 10             	add    esp,0x10
c00102d4:	85 c0                	test   eax,eax
c00102d6:	75 0f                	jne    c00102e7 <CPU::detectFeatures()+0x2b9>
c00102d8:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00102e2:	e9 12 01 00 00       	jmp    c00103f9 <CPU::detectFeatures()+0x3cb>
c00102e7:	50                   	push   eax
c00102e8:	50                   	push   eax
c00102e9:	68 99 1a 02 c0       	push   0xc0021a99
c00102ee:	55                   	push   ebp
c00102ef:	e8 8c 04 ff ff       	call   c0000780 <strcmp>
c00102f4:	83 c4 10             	add    esp,0x10
c00102f7:	85 c0                	test   eax,eax
c00102f9:	75 0f                	jne    c001030a <CPU::detectFeatures()+0x2dc>
c00102fb:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010305:	e9 ef 00 00 00       	jmp    c00103f9 <CPU::detectFeatures()+0x3cb>
c001030a:	50                   	push   eax
c001030b:	50                   	push   eax
c001030c:	68 a6 1a 02 c0       	push   0xc0021aa6
c0010311:	55                   	push   ebp
c0010312:	e8 69 04 ff ff       	call   c0000780 <strcmp>
c0010317:	83 c4 10             	add    esp,0x10
c001031a:	85 c0                	test   eax,eax
c001031c:	75 0f                	jne    c001032d <CPU::detectFeatures()+0x2ff>
c001031e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010328:	e9 cc 00 00 00       	jmp    c00103f9 <CPU::detectFeatures()+0x3cb>
c001032d:	50                   	push   eax
c001032e:	50                   	push   eax
c001032f:	68 b3 1a 02 c0       	push   0xc0021ab3
c0010334:	55                   	push   ebp
c0010335:	e8 46 04 ff ff       	call   c0000780 <strcmp>
c001033a:	83 c4 10             	add    esp,0x10
c001033d:	85 c0                	test   eax,eax
c001033f:	75 0f                	jne    c0010350 <CPU::detectFeatures()+0x322>
c0010341:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001034b:	e9 a9 00 00 00       	jmp    c00103f9 <CPU::detectFeatures()+0x3cb>
c0010350:	50                   	push   eax
c0010351:	50                   	push   eax
c0010352:	68 c0 1a 02 c0       	push   0xc0021ac0
c0010357:	55                   	push   ebp
c0010358:	e8 23 04 ff ff       	call   c0000780 <strcmp>
c001035d:	83 c4 10             	add    esp,0x10
c0010360:	85 c0                	test   eax,eax
c0010362:	75 0f                	jne    c0010373 <CPU::detectFeatures()+0x345>
c0010364:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001036e:	e9 86 00 00 00       	jmp    c00103f9 <CPU::detectFeatures()+0x3cb>
c0010373:	50                   	push   eax
c0010374:	50                   	push   eax
c0010375:	68 cd 1a 02 c0       	push   0xc0021acd
c001037a:	55                   	push   ebp
c001037b:	e8 00 04 ff ff       	call   c0000780 <strcmp>
c0010380:	83 c4 10             	add    esp,0x10
c0010383:	85 c0                	test   eax,eax
c0010385:	75 0c                	jne    c0010393 <CPU::detectFeatures()+0x365>
c0010387:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0010391:	eb 66                	jmp    c00103f9 <CPU::detectFeatures()+0x3cb>
c0010393:	50                   	push   eax
c0010394:	50                   	push   eax
c0010395:	68 da 1a 02 c0       	push   0xc0021ada
c001039a:	55                   	push   ebp
c001039b:	e8 e0 03 ff ff       	call   c0000780 <strcmp>
c00103a0:	83 c4 10             	add    esp,0x10
c00103a3:	85 c0                	test   eax,eax
c00103a5:	75 0c                	jne    c00103b3 <CPU::detectFeatures()+0x385>
c00103a7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00103b1:	eb 46                	jmp    c00103f9 <CPU::detectFeatures()+0x3cb>
c00103b3:	57                   	push   edi
c00103b4:	57                   	push   edi
c00103b5:	68 e7 1a 02 c0       	push   0xc0021ae7
c00103ba:	55                   	push   ebp
c00103bb:	e8 c0 03 ff ff       	call   c0000780 <strcmp>
c00103c0:	83 c4 10             	add    esp,0x10
c00103c3:	85 c0                	test   eax,eax
c00103c5:	74 e0                	je     c00103a7 <CPU::detectFeatures()+0x379>
c00103c7:	56                   	push   esi
c00103c8:	56                   	push   esi
c00103c9:	68 f4 1a 02 c0       	push   0xc0021af4
c00103ce:	55                   	push   ebp
c00103cf:	e8 ac 03 ff ff       	call   c0000780 <strcmp>
c00103d4:	83 c4 10             	add    esp,0x10
c00103d7:	85 c0                	test   eax,eax
c00103d9:	74 cc                	je     c00103a7 <CPU::detectFeatures()+0x379>
c00103db:	51                   	push   ecx
c00103dc:	51                   	push   ecx
c00103dd:	68 01 1b 02 c0       	push   0xc0021b01
c00103e2:	55                   	push   ebp
c00103e3:	e8 98 03 ff ff       	call   c0000780 <strcmp>
c00103e8:	83 c4 10             	add    esp,0x10
c00103eb:	85 c0                	test   eax,eax
c00103ed:	74 b8                	je     c00103a7 <CPU::detectFeatures()+0x379>
c00103ef:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00103f9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00103fe:	0f 86 be 00 00 00    	jbe    c00104c2 <CPU::detectFeatures()+0x494>
c0010404:	83 ec 0c             	sub    esp,0xc
c0010407:	68 80 00 00 00       	push   0x80
c001040c:	e8 31 fb ff ff       	call   c000ff42 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010411:	83 e0 01             	and    eax,0x1
c0010414:	c1 e0 06             	shl    eax,0x6
c0010417:	89 c2                	mov    edx,eax
c0010419:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001041f:	83 e0 bf             	and    eax,0xffffffbf
c0010422:	09 d0                	or     eax,edx
c0010424:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001042a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010431:	e8 0c fb ff ff       	call   c000ff42 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010436:	83 e0 01             	and    eax,0x1
c0010439:	c1 e0 04             	shl    eax,0x4
c001043c:	89 c2                	mov    edx,eax
c001043e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010444:	83 e0 ef             	and    eax,0xffffffef
c0010447:	09 d0                	or     eax,edx
c0010449:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001044f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010456:	e8 e7 fa ff ff       	call   c000ff42 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001045b:	89 c2                	mov    edx,eax
c001045d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010463:	c1 e2 07             	shl    edx,0x7
c0010466:	83 e0 7f             	and    eax,0x7f
c0010469:	09 d0                	or     eax,edx
c001046b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010471:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010478:	e8 f3 fa ff ff       	call   c000ff70 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001047d:	83 e0 01             	and    eax,0x1
c0010480:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010487:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001048d:	83 e0 f7             	and    eax,0xfffffff7
c0010490:	09 d0                	or     eax,edx
c0010492:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010498:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001049f:	e8 cc fa ff ff       	call   c000ff70 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00104a4:	83 c4 10             	add    esp,0x10
c00104a7:	83 e0 01             	and    eax,0x1
c00104aa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104b1:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00104b7:	83 e0 fb             	and    eax,0xfffffffb
c00104ba:	09 d0                	or     eax,edx
c00104bc:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00104c2:	83 ec 0c             	sub    esp,0xc
c00104c5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104c9:	50                   	push   eax
c00104ca:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104ce:	50                   	push   eax
c00104cf:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00104d3:	57                   	push   edi
c00104d4:	8d 74 24 28          	lea    esi,[esp+0x28]
c00104d8:	56                   	push   esi
c00104d9:	6a 01                	push   0x1
c00104db:	e8 82 f9 ff ff       	call   c000fe62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00104e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104e4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00104ea:	89 c1                	mov    ecx,eax
c00104ec:	83 e1 0f             	and    ecx,0xf
c00104ef:	83 e2 f0             	and    edx,0xfffffff0
c00104f2:	09 ca                	or     edx,ecx
c00104f4:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00104fa:	89 c2                	mov    edx,eax
c00104fc:	c1 ea 04             	shr    edx,0x4
c00104ff:	83 e2 0f             	and    edx,0xf
c0010502:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010506:	89 d1                	mov    ecx,edx
c0010508:	83 c4 20             	add    esp,0x20
c001050b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010511:	c1 e1 06             	shl    ecx,0x6
c0010514:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001051a:	09 ca                	or     edx,ecx
c001051c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010523:	89 c2                	mov    edx,eax
c0010525:	c1 ea 08             	shr    edx,0x8
c0010528:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001052e:	83 e2 0f             	and    edx,0xf
c0010531:	89 d5                	mov    ebp,edx
c0010533:	83 e5 03             	and    ebp,0x3
c0010536:	c1 e5 06             	shl    ebp,0x6
c0010539:	83 e1 3f             	and    ecx,0x3f
c001053c:	09 e9                	or     ecx,ebp
c001053e:	89 d5                	mov    ebp,edx
c0010540:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010546:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001054c:	c1 ed 02             	shr    ebp,0x2
c001054f:	83 e1 c0             	and    ecx,0xffffffc0
c0010552:	09 e9                	or     ecx,ebp
c0010554:	89 c5                	mov    ebp,eax
c0010556:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001055c:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010562:	c1 ed 08             	shr    ebp,0x8
c0010565:	83 e5 30             	and    ebp,0x30
c0010568:	83 e1 cf             	and    ecx,0xffffffcf
c001056b:	09 e9                	or     ecx,ebp
c001056d:	83 fa 06             	cmp    edx,0x6
c0010570:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010576:	74 05                	je     c001057d <CPU::detectFeatures()+0x54f>
c0010578:	83 fa 0f             	cmp    edx,0xf
c001057b:	75 64                	jne    c00105e1 <CPU::detectFeatures()+0x5b3>
c001057d:	89 c1                	mov    ecx,eax
c001057f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010585:	c1 e9 10             	shr    ecx,0x10
c0010588:	c1 e1 04             	shl    ecx,0x4
c001058b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001058f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010595:	0f b6 c9             	movzx  ecx,cl
c0010598:	c1 e1 06             	shl    ecx,0x6
c001059b:	09 e9                	or     ecx,ebp
c001059d:	83 fa 0f             	cmp    edx,0xf
c00105a0:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00105a7:	75 38                	jne    c00105e1 <CPU::detectFeatures()+0x5b3>
c00105a9:	c1 e8 14             	shr    eax,0x14
c00105ac:	83 c0 0f             	add    eax,0xf
c00105af:	0f b6 c0             	movzx  eax,al
c00105b2:	89 c2                	mov    edx,eax
c00105b4:	c1 e8 02             	shr    eax,0x2
c00105b7:	83 e2 03             	and    edx,0x3
c00105ba:	89 d1                	mov    ecx,edx
c00105bc:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00105c2:	c1 e1 06             	shl    ecx,0x6
c00105c5:	83 e2 3f             	and    edx,0x3f
c00105c8:	09 ca                	or     edx,ecx
c00105ca:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00105d0:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00105d6:	83 e2 c0             	and    edx,0xffffffc0
c00105d9:	09 d0                	or     eax,edx
c00105db:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00105e1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105e7:	83 ec 0c             	sub    esp,0xc
c00105ea:	83 c8 07             	or     eax,0x7
c00105ed:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105f3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105f7:	50                   	push   eax
c00105f8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00105fc:	55                   	push   ebp
c00105fd:	57                   	push   edi
c00105fe:	56                   	push   esi
c00105ff:	68 00 00 00 80       	push   0x80000000
c0010604:	e8 59 f8 ff ff       	call   c000fe62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010609:	83 c4 20             	add    esp,0x20
c001060c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010614:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010618:	76 1e                	jbe    c0010638 <CPU::detectFeatures()+0x60a>
c001061a:	83 ec 0c             	sub    esp,0xc
c001061d:	50                   	push   eax
c001061e:	55                   	push   ebp
c001061f:	57                   	push   edi
c0010620:	56                   	push   esi
c0010621:	68 01 00 00 80       	push   0x80000001
c0010626:	e8 37 f8 ff ff       	call   c000fe62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001062b:	83 c4 20             	add    esp,0x20
c001062e:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010638:	52                   	push   edx
c0010639:	52                   	push   edx
c001063a:	68 0d 1b 02 c0       	push   0xc0021b0d
c001063f:	53                   	push   ebx
c0010640:	e8 29 c1 ff ff       	call   c000c76e <Device::setName(char const*)>
c0010645:	83 c4 10             	add    esp,0x10
c0010648:	eb 69                	jmp    c00106b3 <CPU::detectFeatures()+0x685>
c001064a:	50                   	push   eax
c001064b:	50                   	push   eax
c001064c:	68 72 1a 02 c0       	push   0xc0021a72
c0010651:	55                   	push   ebp
c0010652:	e8 f9 ff fe ff       	call   c0000650 <strcpy>
c0010657:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010661:	e8 5d fb fe ff       	call   c00001c3 <is486>
c0010666:	83 c4 10             	add    esp,0x10
c0010669:	85 c0                	test   eax,eax
c001066b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010671:	74 1f                	je     c0010692 <CPU::detectFeatures()+0x664>
c0010673:	83 c8 07             	or     eax,0x7
c0010676:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001067c:	0f 20 c0             	mov    eax,cr0
c001067f:	83 e0 14             	and    eax,0x14
c0010682:	83 f8 04             	cmp    eax,0x4
c0010685:	75 10                	jne    c0010697 <CPU::detectFeatures()+0x669>
c0010687:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001068d:	83 e0 fd             	and    eax,0xfffffffd
c0010690:	eb 1b                	jmp    c00106ad <CPU::detectFeatures()+0x67f>
c0010692:	83 e0 f8             	and    eax,0xfffffff8
c0010695:	eb df                	jmp    c0010676 <CPU::detectFeatures()+0x648>
c0010697:	e8 02 fb fe ff       	call   c000019e <hasLegacyFPU>
c001069c:	83 e0 01             	and    eax,0x1
c001069f:	8d 14 00             	lea    edx,[eax+eax*1]
c00106a2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106a8:	83 e0 fd             	and    eax,0xfffffffd
c00106ab:	09 d0                	or     eax,edx
c00106ad:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00106b3:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00106ba:	74 17                	je     c00106d3 <CPU::detectFeatures()+0x6a5>
c00106bc:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c00106c2:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c00106c8:	83 c8 10             	or     eax,0x10
c00106cb:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c00106d1:	eb 20                	jmp    c00106f3 <CPU::detectFeatures()+0x6c5>
c00106d3:	e8 c6 fa fe ff       	call   c000019e <hasLegacyFPU>
c00106d8:	83 e0 01             	and    eax,0x1
c00106db:	8d 14 00             	lea    edx,[eax+eax*1]
c00106de:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106e4:	83 e0 fd             	and    eax,0xfffffffd
c00106e7:	09 d0                	or     eax,edx
c00106e9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00106ef:	a8 02                	test   al,0x2
c00106f1:	75 c9                	jne    c00106bc <CPU::detectFeatures()+0x68e>
c00106f3:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00106fa:	83 c4 2c             	add    esp,0x2c
c00106fd:	5b                   	pop    ebx
c00106fe:	5e                   	pop    esi
c00106ff:	5f                   	pop    edi
c0010700:	5d                   	pop    ebp
c0010701:	c3                   	ret    

c0010702 <CPU::setupSMEP()>:
c0010702:	0f 20 e0             	mov    eax,cr4
c0010705:	0d 00 00 10 00       	or     eax,0x100000
c001070a:	0f 22 e0             	mov    cr4,eax
c001070d:	c3                   	ret    

c001070e <CPU::setupUMIP()>:
c001070e:	0f 20 e0             	mov    eax,cr4
c0010711:	80 cc 08             	or     ah,0x8
c0010714:	0f 22 e0             	mov    cr4,eax
c0010717:	c3                   	ret    

c0010718 <CPU::setupTSC()>:
c0010718:	0f 20 e0             	mov    eax,cr4
c001071b:	83 c8 04             	or     eax,0x4
c001071e:	0f 22 e0             	mov    cr4,eax
c0010721:	c3                   	ret    

c0010722 <CPU::setupLargePages()>:
c0010722:	0f 20 e0             	mov    eax,cr4
c0010725:	83 c8 10             	or     eax,0x10
c0010728:	0f 22 e0             	mov    cr4,eax
c001072b:	c3                   	ret    

c001072c <CPU::setupPAT()>:
c001072c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010731:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010738:	74 2c                	je     c0010766 <CPU::setupPAT()+0x3a>
c001073a:	53                   	push   ebx
c001073b:	83 ec 10             	sub    esp,0x10
c001073e:	68 77 02 00 00       	push   0x277
c0010743:	50                   	push   eax
c0010744:	e8 99 69 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010749:	83 e2 f8             	and    edx,0xfffffff8
c001074c:	83 ca 01             	or     edx,0x1
c001074f:	52                   	push   edx
c0010750:	50                   	push   eax
c0010751:	68 77 02 00 00       	push   0x277
c0010756:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001075c:	e8 ad 69 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010761:	83 c4 28             	add    esp,0x28
c0010764:	5b                   	pop    ebx
c0010765:	c3                   	ret    
c0010766:	c3                   	ret    
c0010767:	90                   	nop

c0010768 <CPU::setupMTRR()>:
c0010768:	c3                   	ret    
c0010769:	90                   	nop

c001076a <CPU::setupGlobalPages()>:
c001076a:	0f 20 e0             	mov    eax,cr4
c001076d:	0c 80                	or     al,0x80
c001076f:	0f 22 e0             	mov    cr4,eax
c0010772:	c3                   	ret    
c0010773:	90                   	nop

c0010774 <CPU::allowUsermodeDataAccess()>:
c0010774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010778:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001077f:	74 03                	je     c0010784 <CPU::allowUsermodeDataAccess()+0x10>
c0010781:	0f 01 cb             	stac   
c0010784:	c3                   	ret    
c0010785:	90                   	nop

c0010786 <CPU::prohibitUsermodeDataAccess()>:
c0010786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001078a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010791:	74 03                	je     c0010796 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010793:	0f 01 ca             	clac   
c0010796:	c3                   	ret    
c0010797:	90                   	nop

c0010798 <CPU::setupSMAP()>:
c0010798:	0f 20 e0             	mov    eax,cr4
c001079b:	0d 00 00 20 00       	or     eax,0x200000
c00107a0:	0f 22 e0             	mov    cr4,eax
c00107a3:	eb e1                	jmp    c0010786 <CPU::prohibitUsermodeDataAccess()>
c00107a5:	90                   	nop

c00107a6 <CPU::setupFeatures()>:
c00107a6:	53                   	push   ebx
c00107a7:	83 ec 08             	sub    esp,0x8
c00107aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107ae:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00107b5:	74 18                	je     c00107cf <CPU::setupFeatures()+0x29>
c00107b7:	83 ec 0c             	sub    esp,0xc
c00107ba:	68 19 1b 02 c0       	push   0xc0021b19
c00107bf:	e8 46 a1 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00107c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107c7:	e8 42 ff ff ff       	call   c001070e <CPU::setupUMIP()>
c00107cc:	83 c4 10             	add    esp,0x10
c00107cf:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00107d6:	74 18                	je     c00107f0 <CPU::setupFeatures()+0x4a>
c00107d8:	83 ec 0c             	sub    esp,0xc
c00107db:	68 23 1b 02 c0       	push   0xc0021b23
c00107e0:	e8 25 a1 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00107e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107e8:	e8 2b ff ff ff       	call   c0010718 <CPU::setupTSC()>
c00107ed:	83 c4 10             	add    esp,0x10
c00107f0:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00107f7:	74 18                	je     c0010811 <CPU::setupFeatures()+0x6b>
c00107f9:	83 ec 0c             	sub    esp,0xc
c00107fc:	68 2c 1b 02 c0       	push   0xc0021b2c
c0010801:	e8 04 a1 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010806:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010809:	e8 14 ff ff ff       	call   c0010722 <CPU::setupLargePages()>
c001080e:	83 c4 10             	add    esp,0x10
c0010811:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010818:	74 18                	je     c0010832 <CPU::setupFeatures()+0x8c>
c001081a:	83 ec 0c             	sub    esp,0xc
c001081d:	68 35 1b 02 c0       	push   0xc0021b35
c0010822:	e8 e3 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010827:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001082a:	e8 3b ff ff ff       	call   c001076a <CPU::setupGlobalPages()>
c001082f:	83 c4 10             	add    esp,0x10
c0010832:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010839:	74 18                	je     c0010853 <CPU::setupFeatures()+0xad>
c001083b:	83 ec 0c             	sub    esp,0xc
c001083e:	68 47 1b 02 c0       	push   0xc0021b47
c0010843:	e8 c2 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010848:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001084b:	e8 dc fe ff ff       	call   c001072c <CPU::setupPAT()>
c0010850:	83 c4 10             	add    esp,0x10
c0010853:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001085a:	74 11                	je     c001086d <CPU::setupFeatures()+0xc7>
c001085c:	c7 44 24 10 50 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021b50
c0010864:	83 c4 08             	add    esp,0x8
c0010867:	5b                   	pop    ebx
c0010868:	e9 9d a0 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c001086d:	83 c4 08             	add    esp,0x8
c0010870:	5b                   	pop    ebx
c0010871:	c3                   	ret    

c0010872 <CPU::open(int, int, void*)>:
c0010872:	55                   	push   ebp
c0010873:	57                   	push   edi
c0010874:	56                   	push   esi
c0010875:	53                   	push   ebx
c0010876:	83 ec 18             	sub    esp,0x18
c0010879:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001087d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010881:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010885:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001088b:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010891:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010897:	50                   	push   eax
c0010898:	e8 41 6b ff ff       	call   c00073de <GDT::setup()>
c001089d:	83 c4 0c             	add    esp,0xc
c00108a0:	6a 00                	push   0x0
c00108a2:	68 ef be ad de       	push   0xdeadbeef
c00108a7:	55                   	push   ebp
c00108a8:	e8 c3 86 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c00108ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00108b0:	e8 9b 86 ff ff       	call   c0008f50 <TSS::flush()>
c00108b5:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00108bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00108be:	e8 7f 6d ff ff       	call   c0007642 <IDT::setup()>
c00108c3:	b8 00 04 00 00       	mov    eax,0x400
c00108c8:	0f 23 f8             	mov    db7,eax
c00108cb:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00108d5:	e8 08 75 ff ff       	call   c0007de2 <Phys::allocatePage()>
c00108da:	83 c4 10             	add    esp,0x10
c00108dd:	85 f6                	test   esi,esi
c00108df:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00108e5:	89 38                	mov    DWORD PTR [eax],edi
c00108e7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00108ed:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00108f0:	74 10                	je     c0010902 <CPU::open(int, int, void*)+0x90>
c00108f2:	50                   	push   eax
c00108f3:	50                   	push   eax
c00108f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00108fa:	56                   	push   esi
c00108fb:	e8 8c 8f ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010900:	eb 0d                	jmp    c001090f <CPU::open(int, int, void*)+0x9d>
c0010902:	83 ec 0c             	sub    esp,0xc
c0010905:	68 5a 1b 02 c0       	push   0xc0021b5a
c001090a:	e8 4e 08 00 00       	call   c001115d <KePanic(char const*)>
c001090f:	83 c4 10             	add    esp,0x10
c0010912:	83 ec 0c             	sub    esp,0xc
c0010915:	68 68 1b 02 c0       	push   0xc0021b68
c001091a:	e8 69 01 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c001091f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010922:	e8 07 f7 ff ff       	call   c001002e <CPU::detectFeatures()>
c0010927:	c7 04 24 8b 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b8b
c001092e:	e8 55 01 00 00       	call   c0010a88 <KeSetBootMessage(char const*)>
c0010933:	e8 e7 71 00 00       	call   c0017b1f <HalInitialise()>
c0010938:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c001093d:	83 e0 10             	and    eax,0x10
c0010940:	83 f8 01             	cmp    eax,0x1
c0010943:	19 c0                	sbb    eax,eax
c0010945:	83 e0 46             	and    eax,0x46
c0010948:	83 c0 1e             	add    eax,0x1e
c001094b:	89 04 24             	mov    DWORD PTR [esp],eax
c001094e:	e8 c2 d6 ff ff       	call   c000e015 <setupTimer(int)>
c0010953:	83 c4 10             	add    esp,0x10
c0010956:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c001095d:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010963:	74 0c                	je     c0010971 <CPU::open(int, int, void*)+0xff>
c0010965:	83 ec 0c             	sub    esp,0xc
c0010968:	53                   	push   ebx
c0010969:	e8 38 fe ff ff       	call   c00107a6 <CPU::setupFeatures()>
c001096e:	83 c4 10             	add    esp,0x10
c0010971:	83 c4 0c             	add    esp,0xc
c0010974:	31 c0                	xor    eax,eax
c0010976:	5b                   	pop    ebx
c0010977:	5e                   	pop    esi
c0010978:	5f                   	pop    edi
c0010979:	5d                   	pop    ebp
c001097a:	c3                   	ret    

c001097b <KeInitialiseAtexit()>:
c001097b:	83 ec 10             	sub    esp,0x10
c001097e:	68 00 01 00 00       	push   0x100
c0010983:	6a 00                	push   0x0
c0010985:	68 20 9b 02 c0       	push   0xc0029b20
c001098a:	c7 05 00 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a00,0x0
c0010994:	e8 57 fb fe ff       	call   c00004f0 <memset>
c0010999:	83 c4 1c             	add    esp,0x1c
c001099c:	c3                   	ret    

c001099d <KeRegisterAtexit(void (*)(void*), void*)>:
c001099d:	a1 00 9a 02 c0       	mov    eax,ds:0xc0029a00
c00109a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00109a6:	89 14 85 20 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64e0],edx
c00109ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00109b1:	89 14 85 20 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65e0],edx
c00109b8:	40                   	inc    eax
c00109b9:	a3 00 9a 02 c0       	mov    ds:0xc0029a00,eax
c00109be:	83 f8 3f             	cmp    eax,0x3f
c00109c1:	7e 0d                	jle    c00109d0 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c00109c3:	c7 44 24 04 cc 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021bcc
c00109cb:	e9 8d 07 00 00       	jmp    c001115d <KePanic(char const*)>
c00109d0:	c3                   	ret    

c00109d1 <KeExecuteAtexit()>:
c00109d1:	53                   	push   ebx
c00109d2:	31 db                	xor    ebx,ebx
c00109d4:	83 ec 08             	sub    esp,0x8
c00109d7:	39 1d 00 9a 02 c0    	cmp    DWORD PTR ds:0xc0029a00,ebx
c00109dd:	7e 28                	jle    c0010a07 <KeExecuteAtexit()+0x36>
c00109df:	8b 04 9d 20 9b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd64e0]
c00109e6:	85 c0                	test   eax,eax
c00109e8:	74 1a                	je     c0010a04 <KeExecuteAtexit()+0x33>
c00109ea:	83 ec 0c             	sub    esp,0xc
c00109ed:	ff 34 9d 20 9a 02 c0 	push   DWORD PTR [ebx*4-0x3ffd65e0]
c00109f4:	ff d0                	call   eax
c00109f6:	c7 04 9d 20 9b 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd64e0],0x0
c0010a01:	83 c4 10             	add    esp,0x10
c0010a04:	43                   	inc    ebx
c0010a05:	eb d0                	jmp    c00109d7 <KeExecuteAtexit()+0x6>
c0010a07:	83 c4 08             	add    esp,0x8
c0010a0a:	5b                   	pop    ebx
c0010a0b:	c3                   	ret    

c0010a0c <KeDisplaySplashScreen()>:
c0010a0c:	55                   	push   ebp
c0010a0d:	bd 05 00 00 00       	mov    ebp,0x5
c0010a12:	57                   	push   edi
c0010a13:	bf 0a 00 00 00       	mov    edi,0xa
c0010a18:	56                   	push   esi
c0010a19:	31 f6                	xor    esi,esi
c0010a1b:	53                   	push   ebx
c0010a1c:	31 db                	xor    ebx,ebx
c0010a1e:	83 ec 0c             	sub    esp,0xc
c0010a21:	0f b6 96 a0 2f 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdd060]
c0010a28:	85 d2                	test   edx,edx
c0010a2a:	89 d0                	mov    eax,edx
c0010a2c:	74 52                	je     c0010a80 <KeDisplaySplashScreen()+0x74>
c0010a2e:	80 bb d6 2f 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdd02a],0xdb
c0010a35:	75 13                	jne    c0010a4a <KeDisplaySplashScreen()+0x3e>
c0010a37:	0f b6 8b d5 2f 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdd02b]
c0010a3e:	83 e1 fe             	and    ecx,0xfffffffe
c0010a41:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010a47:	75 01                	jne    c0010a4a <KeDisplaySplashScreen()+0x3e>
c0010a49:	47                   	inc    edi
c0010a4a:	83 fa 0d             	cmp    edx,0xd
c0010a4d:	74 28                	je     c0010a77 <KeDisplaySplashScreen()+0x6b>
c0010a4f:	83 fa 0a             	cmp    edx,0xa
c0010a52:	75 0a                	jne    c0010a5e <KeDisplaySplashScreen()+0x52>
c0010a54:	45                   	inc    ebp
c0010a55:	bf 0a 00 00 00       	mov    edi,0xa
c0010a5a:	31 db                	xor    ebx,ebx
c0010a5c:	eb 19                	jmp    c0010a77 <KeDisplaySplashScreen()+0x6b>
c0010a5e:	83 ec 0c             	sub    esp,0xc
c0010a61:	0f be c0             	movsx  eax,al
c0010a64:	55                   	push   ebp
c0010a65:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010a68:	43                   	inc    ebx
c0010a69:	52                   	push   edx
c0010a6a:	6a 00                	push   0x0
c0010a6c:	6a 0e                	push   0xe
c0010a6e:	50                   	push   eax
c0010a6f:	e8 28 7d 00 00       	call   c001879c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010a74:	83 c4 20             	add    esp,0x20
c0010a77:	46                   	inc    esi
c0010a78:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010a7e:	75 a1                	jne    c0010a21 <KeDisplaySplashScreen()+0x15>
c0010a80:	83 c4 0c             	add    esp,0xc
c0010a83:	5b                   	pop    ebx
c0010a84:	5e                   	pop    esi
c0010a85:	5f                   	pop    edi
c0010a86:	5d                   	pop    ebp
c0010a87:	c3                   	ret    

c0010a88 <KeSetBootMessage(char const*)>:
c0010a88:	57                   	push   edi
c0010a89:	56                   	push   esi
c0010a8a:	53                   	push   ebx
c0010a8b:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010a91:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010a98:	68 9e 00 00 00       	push   0x9e
c0010a9d:	6a 00                	push   0x0
c0010a9f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010aa3:	56                   	push   esi
c0010aa4:	e8 47 fa fe ff       	call   c00004f0 <memset>
c0010aa9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010aac:	e8 cf fa fe ff       	call   c0000580 <strlen>
c0010ab1:	ba 50 00 00 00       	mov    edx,0x50
c0010ab6:	83 c4 10             	add    esp,0x10
c0010ab9:	31 c9                	xor    ecx,ecx
c0010abb:	29 c2                	sub    edx,eax
c0010abd:	83 e2 fe             	and    edx,0xfffffffe
c0010ac0:	01 f2                	add    edx,esi
c0010ac2:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010ac7:	84 c0                	test   al,al
c0010ac9:	74 0a                	je     c0010ad5 <KeSetBootMessage(char const*)+0x4d>
c0010acb:	80 cc 0f             	or     ah,0xf
c0010ace:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010ad2:	41                   	inc    ecx
c0010ad3:	eb ed                	jmp    c0010ac2 <KeSetBootMessage(char const*)+0x3a>
c0010ad5:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010ada:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010adf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ae1:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010ae7:	5b                   	pop    ebx
c0010ae8:	5e                   	pop    esi
c0010ae9:	5f                   	pop    edi
c0010aea:	c3                   	ret    
c0010aeb:	90                   	nop

c0010aec <Krnl::handlePowerButton()>:
c0010aec:	83 ec 0c             	sub    esp,0xc
c0010aef:	e8 c4 06 00 00       	call   c00111b8 <KeHandlePowerButton()>
c0010af4:	90                   	nop
c0010af5:	83 c4 0c             	add    esp,0xc
c0010af8:	c3                   	ret    
c0010af9:	8d 76 00             	lea    esi,[esi+0x0]

c0010afc <Krnl::handleSleepButton()>:
c0010afc:	83 ec 0c             	sub    esp,0xc
c0010aff:	e8 e9 06 00 00       	call   c00111ed <KeHandleSleepButton()>
c0010b04:	90                   	nop
c0010b05:	83 c4 0c             	add    esp,0xc
c0010b08:	c3                   	ret    
c0010b09:	90                   	nop

c0010b0a <EnvVarContainer::getEnv(char const*)>:
c0010b0a:	57                   	push   edi
c0010b0b:	56                   	push   esi
c0010b0c:	53                   	push   ebx
c0010b0d:	31 db                	xor    ebx,ebx
c0010b0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b13:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010b15:	7e 2b                	jle    c0010b42 <EnvVarContainer::getEnv(char const*)+0x38>
c0010b17:	50                   	push   eax
c0010b18:	50                   	push   eax
c0010b19:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010b1c:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010b23:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010b26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010b2a:	e8 51 fc fe ff       	call   c0000780 <strcmp>
c0010b2f:	83 c4 10             	add    esp,0x10
c0010b32:	85 c0                	test   eax,eax
c0010b34:	75 09                	jne    c0010b3f <EnvVarContainer::getEnv(char const*)+0x35>
c0010b36:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010b39:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010b3d:	eb 05                	jmp    c0010b44 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010b3f:	43                   	inc    ebx
c0010b40:	eb d1                	jmp    c0010b13 <EnvVarContainer::getEnv(char const*)+0x9>
c0010b42:	31 c0                	xor    eax,eax
c0010b44:	5b                   	pop    ebx
c0010b45:	5e                   	pop    esi
c0010b46:	5f                   	pop    edi
c0010b47:	c3                   	ret    

c0010b48 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010b48:	55                   	push   ebp
c0010b49:	57                   	push   edi
c0010b4a:	56                   	push   esi
c0010b4b:	53                   	push   ebx
c0010b4c:	83 ec 28             	sub    esp,0x28
c0010b4f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010b53:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010b57:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010b5b:	56                   	push   esi
c0010b5c:	e8 1f fa fe ff       	call   c0000580 <strlen>
c0010b61:	40                   	inc    eax
c0010b62:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b65:	e8 69 6f ff ff       	call   c0007ad3 <malloc>
c0010b6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010b71:	e8 0a fa fe ff       	call   c0000580 <strlen>
c0010b76:	40                   	inc    eax
c0010b77:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b7a:	e8 54 6f ff ff       	call   c0007ad3 <malloc>
c0010b7f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010b82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b86:	e8 f5 f9 fe ff       	call   c0000580 <strlen>
c0010b8b:	83 c4 0c             	add    esp,0xc
c0010b8e:	40                   	inc    eax
c0010b8f:	50                   	push   eax
c0010b90:	6a 00                	push   0x0
c0010b92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010b96:	e8 55 f9 fe ff       	call   c00004f0 <memset>
c0010b9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0010b9e:	e8 dd f9 fe ff       	call   c0000580 <strlen>
c0010ba3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010ba7:	8d 48 01             	lea    ecx,[eax+0x1]
c0010baa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010baf:	89 de                	mov    esi,ebx
c0010bb1:	e8 ca f9 fe ff       	call   c0000580 <strlen>
c0010bb6:	83 c4 0c             	add    esp,0xc
c0010bb9:	40                   	inc    eax
c0010bba:	50                   	push   eax
c0010bbb:	6a 00                	push   0x0
c0010bbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010bc1:	e8 2a f9 fe ff       	call   c00004f0 <memset>
c0010bc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bc9:	e8 b2 f9 fe ff       	call   c0000580 <strlen>
c0010bce:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010bd2:	8d 48 01             	lea    ecx,[eax+0x1]
c0010bd5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bd7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010bda:	40                   	inc    eax
c0010bdb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010bde:	c1 e0 03             	shl    eax,0x3
c0010be1:	5a                   	pop    edx
c0010be2:	59                   	pop    ecx
c0010be3:	50                   	push   eax
c0010be4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010be7:	e8 d3 6e ff ff       	call   c0007abf <realloc>
c0010bec:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010bef:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010bf3:	b9 08 00 00 00       	mov    ecx,0x8
c0010bf8:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010bfb:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010bff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c01:	83 c4 2c             	add    esp,0x2c
c0010c04:	5b                   	pop    ebx
c0010c05:	5e                   	pop    esi
c0010c06:	5f                   	pop    edi
c0010c07:	5d                   	pop    ebp
c0010c08:	c3                   	ret    
c0010c09:	90                   	nop

c0010c0a <EnvVarContainer::deleteEnv(char const*)>:
c0010c0a:	c3                   	ret    
c0010c0b:	90                   	nop

c0010c0c <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010c0c:	55                   	push   ebp
c0010c0d:	57                   	push   edi
c0010c0e:	56                   	push   esi
c0010c0f:	53                   	push   ebx
c0010c10:	81 ec 38 01 00 00    	sub    esp,0x138
c0010c16:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010c1d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010c24:	68 14 01 00 00       	push   0x114
c0010c29:	e8 a5 6e ff ff       	call   c0007ad3 <malloc>
c0010c2e:	83 c4 0c             	add    esp,0xc
c0010c31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010c34:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010c3b:	89 c3                	mov    ebx,eax
c0010c3d:	50                   	push   eax
c0010c3e:	e8 93 aa ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c0010c43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c46:	e8 0b ae ff ff       	call   c000ba56 <File::exists()>
c0010c4b:	83 c4 10             	add    esp,0x10
c0010c4e:	84 c0                	test   al,al
c0010c50:	75 31                	jne    c0010c83 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010c52:	50                   	push   eax
c0010c53:	50                   	push   eax
c0010c54:	6a 12                	push   0x12
c0010c56:	53                   	push   ebx
c0010c57:	e8 36 ab ff ff       	call   c000b792 <File::open(FileOpenMode)>
c0010c5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c5e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c64:	e8 17 f9 fe ff       	call   c0000580 <strlen>
c0010c69:	5a                   	pop    edx
c0010c6a:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010c6e:	52                   	push   edx
c0010c6f:	31 d2                	xor    edx,edx
c0010c71:	56                   	push   esi
c0010c72:	52                   	push   edx
c0010c73:	50                   	push   eax
c0010c74:	53                   	push   ebx
c0010c75:	ff d7                	call   edi
c0010c77:	83 c4 14             	add    esp,0x14
c0010c7a:	53                   	push   ebx
c0010c7b:	e8 70 ab ff ff       	call   c000b7f0 <File::close()>
c0010c80:	83 c4 10             	add    esp,0x10
c0010c83:	56                   	push   esi
c0010c84:	31 f6                	xor    esi,esi
c0010c86:	68 00 01 00 00       	push   0x100
c0010c8b:	6a 00                	push   0x0
c0010c8d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010c91:	50                   	push   eax
c0010c92:	e8 59 f8 fe ff       	call   c00004f0 <memset>
c0010c97:	5f                   	pop    edi
c0010c98:	58                   	pop    eax
c0010c99:	6a 01                	push   0x1
c0010c9b:	53                   	push   ebx
c0010c9c:	e8 f1 aa ff ff       	call   c000b792 <File::open(FileOpenMode)>
c0010ca1:	83 c4 10             	add    esp,0x10
c0010ca4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010cac:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010cb4:	83 ec 0c             	sub    esp,0xc
c0010cb7:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010cbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cbd:	52                   	push   edx
c0010cbe:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0010cc2:	51                   	push   ecx
c0010cc3:	6a 00                	push   0x0
c0010cc5:	6a 01                	push   0x1
c0010cc7:	53                   	push   ebx
c0010cc8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010ccb:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010cd0:	83 c4 20             	add    esp,0x20
c0010cd3:	85 c0                	test   eax,eax
c0010cd5:	89 c1                	mov    ecx,eax
c0010cd7:	0f 84 36 01 00 00    	je     c0010e13 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010cdd:	83 f8 0d             	cmp    eax,0xd
c0010ce0:	0f 84 22 01 00 00    	je     c0010e08 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010ce6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010ceb:	0f 84 f0 00 00 00    	je     c0010de1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010cf1:	83 f8 0a             	cmp    eax,0xa
c0010cf4:	74 13                	je     c0010d09 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010cf6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010cfb:	74 0c                	je     c0010d09 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010cfd:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010d03:	0f 8e f6 00 00 00    	jle    c0010dff <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010d09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d0d:	83 ec 0c             	sub    esp,0xc
c0010d10:	8d 78 01             	lea    edi,[eax+0x1]
c0010d13:	57                   	push   edi
c0010d14:	e8 ba 6d ff ff       	call   c0007ad3 <malloc>
c0010d19:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010d1d:	8d 56 04             	lea    edx,[esi+0x4]
c0010d20:	89 14 24             	mov    DWORD PTR [esp],edx
c0010d23:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010d27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010d2b:	e8 a3 6d ff ff       	call   c0007ad3 <malloc>
c0010d30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010d34:	83 c4 0c             	add    esp,0xc
c0010d37:	57                   	push   edi
c0010d38:	6a 00                	push   0x0
c0010d3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010d3e:	e8 ad f7 fe ff       	call   c00004f0 <memset>
c0010d43:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010d47:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010d4b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010d4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d51:	83 c4 0c             	add    esp,0xc
c0010d54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010d58:	52                   	push   edx
c0010d59:	6a 00                	push   0x0
c0010d5b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010d5f:	e8 8c f7 fe ff       	call   c00004f0 <memset>
c0010d64:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010d68:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010d6c:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d6f:	e8 0c f8 fe ff       	call   c0000580 <strlen>
c0010d74:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010d78:	89 c1                	mov    ecx,eax
c0010d7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d7c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010d7f:	83 c4 10             	add    esp,0x10
c0010d82:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010d85:	40                   	inc    eax
c0010d86:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010d89:	85 d2                	test   edx,edx
c0010d8b:	75 0c                	jne    c0010d99 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010d8d:	83 ec 0c             	sub    esp,0xc
c0010d90:	6a 08                	push   0x8
c0010d92:	e8 3c 6d ff ff       	call   c0007ad3 <malloc>
c0010d97:	eb 0c                	jmp    c0010da5 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010d99:	51                   	push   ecx
c0010d9a:	51                   	push   ecx
c0010d9b:	c1 e0 03             	shl    eax,0x3
c0010d9e:	50                   	push   eax
c0010d9f:	52                   	push   edx
c0010da0:	e8 1a 6d ff ff       	call   c0007abf <realloc>
c0010da5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010da8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010dab:	83 c4 10             	add    esp,0x10
c0010dae:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010db1:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010db5:	b9 08 00 00 00       	mov    ecx,0x8
c0010dba:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010dbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010dc0:	50                   	push   eax
c0010dc1:	31 f6                	xor    esi,esi
c0010dc3:	68 00 01 00 00       	push   0x100
c0010dc8:	6a 00                	push   0x0
c0010dca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010dce:	50                   	push   eax
c0010dcf:	e8 1c f7 fe ff       	call   c00004f0 <memset>
c0010dd4:	83 c4 10             	add    esp,0x10
c0010dd7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ddf:	eb 27                	jmp    c0010e08 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010de1:	83 f8 3d             	cmp    eax,0x3d
c0010de4:	74 1e                	je     c0010e04 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010de6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010dec:	7f 07                	jg     c0010df5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010dee:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0010df2:	46                   	inc    esi
c0010df3:	eb 13                	jmp    c0010e08 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010df5:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010dfd:	eb 09                	jmp    c0010e08 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010dff:	83 f8 3d             	cmp    eax,0x3d
c0010e02:	75 ea                	jne    c0010dee <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010e04:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010e08:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e0d:	0f 85 99 fe ff ff    	jne    c0010cac <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010e13:	83 ec 0c             	sub    esp,0xc
c0010e16:	53                   	push   ebx
c0010e17:	e8 d4 a9 ff ff       	call   c000b7f0 <File::close()>
c0010e1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e21:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e24:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010e2a:	5b                   	pop    ebx
c0010e2b:	5e                   	pop    esi
c0010e2c:	5f                   	pop    edi
c0010e2d:	5d                   	pop    ebp
c0010e2e:	c3                   	ret    
c0010e2f:	90                   	nop

c0010e30 <EnvVarContainer::__loadSystem()>:
c0010e30:	83 ec 10             	sub    esp,0x10
c0010e33:	68 00 31 02 c0       	push   0xc0023100
c0010e38:	68 e5 1b 02 c0       	push   0xc0021be5
c0010e3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e41:	e8 c6 fd ff ff       	call   c0010c0c <EnvVarContainer::loadFrom(char const*, char const*)>
c0010e46:	83 c4 1c             	add    esp,0x1c
c0010e49:	c3                   	ret    

c0010e4a <EnvVarContainer::__loadUser()>:
c0010e4a:	c3                   	ret    
c0010e4b:	90                   	nop

c0010e4c <EnvVarContainer::EnvVarContainer(Process*)>:
c0010e4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010e56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010e61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e65:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e6c:	90                   	nop
c0010e6d:	c3                   	ret    

c0010e6e <EnvVarContainer::~EnvVarContainer()>:
c0010e6e:	83 ec 0c             	sub    esp,0xc
c0010e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e78:	85 c0                	test   eax,eax
c0010e7a:	74 1d                	je     c0010e99 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e80:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e82:	85 c0                	test   eax,eax
c0010e84:	74 13                	je     c0010e99 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8d:	83 ec 0c             	sub    esp,0xc
c0010e90:	50                   	push   eax
c0010e91:	e8 4d 6c ff ff       	call   c0007ae3 <free>
c0010e96:	83 c4 10             	add    esp,0x10
c0010e99:	90                   	nop
c0010e9a:	83 c4 0c             	add    esp,0xc
c0010e9d:	c3                   	ret    

c0010e9e <KeGetEnv(Process*, char const*)>:
c0010e9e:	53                   	push   ebx
c0010e9f:	83 ec 08             	sub    esp,0x8
c0010ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ea6:	39 05 90 a4 02 c0    	cmp    DWORD PTR ds:0xc002a490,eax
c0010eac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010eb0:	74 04                	je     c0010eb6 <KeGetEnv(Process*, char const*)+0x18>
c0010eb2:	85 c0                	test   eax,eax
c0010eb4:	75 0b                	jne    c0010ec1 <KeGetEnv(Process*, char const*)+0x23>
c0010eb6:	a1 20 9c 02 c0       	mov    eax,ds:0xc0029c20
c0010ebb:	85 c0                	test   eax,eax
c0010ebd:	75 19                	jne    c0010ed8 <KeGetEnv(Process*, char const*)+0x3a>
c0010ebf:	eb 27                	jmp    c0010ee8 <KeGetEnv(Process*, char const*)+0x4a>
c0010ec1:	52                   	push   edx
c0010ec2:	52                   	push   edx
c0010ec3:	53                   	push   ebx
c0010ec4:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010eca:	e8 3b fc ff ff       	call   c0010b0a <EnvVarContainer::getEnv(char const*)>
c0010ecf:	83 c4 10             	add    esp,0x10
c0010ed2:	85 c0                	test   eax,eax
c0010ed4:	75 28                	jne    c0010efe <KeGetEnv(Process*, char const*)+0x60>
c0010ed6:	eb de                	jmp    c0010eb6 <KeGetEnv(Process*, char const*)+0x18>
c0010ed8:	52                   	push   edx
c0010ed9:	52                   	push   edx
c0010eda:	53                   	push   ebx
c0010edb:	50                   	push   eax
c0010edc:	e8 29 fc ff ff       	call   c0010b0a <EnvVarContainer::getEnv(char const*)>
c0010ee1:	83 c4 10             	add    esp,0x10
c0010ee4:	85 c0                	test   eax,eax
c0010ee6:	75 16                	jne    c0010efe <KeGetEnv(Process*, char const*)+0x60>
c0010ee8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010eec:	a1 24 9c 02 c0       	mov    eax,ds:0xc0029c24
c0010ef1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010ef5:	83 c4 08             	add    esp,0x8
c0010ef8:	5b                   	pop    ebx
c0010ef9:	e9 0c fc ff ff       	jmp    c0010b0a <EnvVarContainer::getEnv(char const*)>
c0010efe:	83 c4 08             	add    esp,0x8
c0010f01:	5b                   	pop    ebx
c0010f02:	c3                   	ret    

c0010f03 <KeSetEnvSystem(char const*, char const*)>:
c0010f03:	83 ec 10             	sub    esp,0x10
c0010f06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f0e:	ff 35 24 9c 02 c0    	push   DWORD PTR ds:0xc0029c24
c0010f14:	e8 2f fc ff ff       	call   c0010b48 <EnvVarContainer::setEnv(char const*, char const*)>
c0010f19:	83 c4 1c             	add    esp,0x1c
c0010f1c:	c3                   	ret    

c0010f1d <KeSetEnvUser(char const*, char const*)>:
c0010f1d:	a1 20 9c 02 c0       	mov    eax,ds:0xc0029c20
c0010f22:	85 c0                	test   eax,eax
c0010f24:	74 15                	je     c0010f3b <KeSetEnvUser(char const*, char const*)+0x1e>
c0010f26:	83 ec 10             	sub    esp,0x10
c0010f29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f31:	50                   	push   eax
c0010f32:	e8 11 fc ff ff       	call   c0010b48 <EnvVarContainer::setEnv(char const*, char const*)>
c0010f37:	83 c4 1c             	add    esp,0x1c
c0010f3a:	c3                   	ret    
c0010f3b:	c3                   	ret    

c0010f3c <KeSetEnvProcess(Process*, char const*, char const*)>:
c0010f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f40:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010f46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010f4a:	e9 f9 fb ff ff       	jmp    c0010b48 <EnvVarContainer::setEnv(char const*, char const*)>

c0010f4f <KeDeleteEnvSystem(char const*)>:
c0010f4f:	c3                   	ret    

c0010f50 <KeDeleteEnvUser(char const*)>:
c0010f50:	c3                   	ret    

c0010f51 <KeDeleteEnvProcess(Process*, char const*)>:
c0010f51:	c3                   	ret    

c0010f52 <KeNewProcessEnv(Process*)>:
c0010f52:	83 ec 28             	sub    esp,0x28
c0010f55:	6a 0c                	push   0xc
c0010f57:	e8 77 6b ff ff       	call   c0007ad3 <malloc>
c0010f5c:	5a                   	pop    edx
c0010f5d:	59                   	pop    ecx
c0010f5e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f62:	50                   	push   eax
c0010f63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f67:	e8 e0 fe ff ff       	call   c0010e4c <EnvVarContainer::EnvVarContainer(Process*)>
c0010f6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f70:	83 c4 2c             	add    esp,0x2c
c0010f73:	c3                   	ret    

c0010f74 <KeCopyProcessEnv(Process*, Process*)>:
c0010f74:	57                   	push   edi
c0010f75:	56                   	push   esi
c0010f76:	53                   	push   ebx
c0010f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f7b:	83 ec 0c             	sub    esp,0xc
c0010f7e:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010f84:	6a 0c                	push   0xc
c0010f86:	e8 48 6b ff ff       	call   c0007ad3 <malloc>
c0010f8b:	89 c3                	mov    ebx,eax
c0010f8d:	58                   	pop    eax
c0010f8e:	5a                   	pop    edx
c0010f8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f93:	53                   	push   ebx
c0010f94:	e8 b3 fe ff ff       	call   c0010e4c <EnvVarContainer::EnvVarContainer(Process*)>
c0010f99:	8b 07                	mov    eax,DWORD PTR [edi]
c0010f9b:	89 03                	mov    DWORD PTR [ebx],eax
c0010f9d:	c1 e0 03             	shl    eax,0x3
c0010fa0:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fa3:	e8 2b 6b ff ff       	call   c0007ad3 <malloc>
c0010fa8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010fab:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010fad:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010fb0:	89 c7                	mov    edi,eax
c0010fb2:	c1 e1 03             	shl    ecx,0x3
c0010fb5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fb7:	83 c4 10             	add    esp,0x10
c0010fba:	89 d8                	mov    eax,ebx
c0010fbc:	5b                   	pop    ebx
c0010fbd:	5e                   	pop    esi
c0010fbe:	5f                   	pop    edi
c0010fbf:	c3                   	ret    

c0010fc0 <KeLoadSystemEnv()>:
c0010fc0:	53                   	push   ebx
c0010fc1:	83 ec 14             	sub    esp,0x14
c0010fc4:	6a 0c                	push   0xc
c0010fc6:	e8 08 6b ff ff       	call   c0007ad3 <malloc>
c0010fcb:	89 c3                	mov    ebx,eax
c0010fcd:	58                   	pop    eax
c0010fce:	5a                   	pop    edx
c0010fcf:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0010fd5:	53                   	push   ebx
c0010fd6:	e8 71 fe ff ff       	call   c0010e4c <EnvVarContainer::EnvVarContainer(Process*)>
c0010fdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fde:	89 1d 24 9c 02 c0    	mov    DWORD PTR ds:0xc0029c24,ebx
c0010fe4:	e8 47 fe ff ff       	call   c0010e30 <EnvVarContainer::__loadSystem()>
c0010fe9:	83 c4 18             	add    esp,0x18
c0010fec:	5b                   	pop    ebx
c0010fed:	c3                   	ret    

c0010fee <KeLoadUserEnv()>:
c0010fee:	53                   	push   ebx
c0010fef:	83 ec 14             	sub    esp,0x14
c0010ff2:	6a 0c                	push   0xc
c0010ff4:	e8 da 6a ff ff       	call   c0007ad3 <malloc>
c0010ff9:	89 c3                	mov    ebx,eax
c0010ffb:	58                   	pop    eax
c0010ffc:	5a                   	pop    edx
c0010ffd:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0011003:	53                   	push   ebx
c0011004:	e8 43 fe ff ff       	call   c0010e4c <EnvVarContainer::EnvVarContainer(Process*)>
c0011009:	89 1d 20 9c 02 c0    	mov    DWORD PTR ds:0xc0029c20,ebx
c001100f:	83 c4 18             	add    esp,0x18
c0011012:	5b                   	pop    ebx
c0011013:	c3                   	ret    

c0011014 <KeFlushEnv()>:
c0011014:	c3                   	ret    

c0011015 <KeGetProcessTotalEnvCount(Process*)>:
c0011015:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011019:	8b 15 20 9c 02 c0    	mov    edx,DWORD PTR ds:0xc0029c20
c001101f:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011025:	a1 24 9c 02 c0       	mov    eax,ds:0xc0029c24
c001102a:	8b 00                	mov    eax,DWORD PTR [eax]
c001102c:	03 01                	add    eax,DWORD PTR [ecx]
c001102e:	85 d2                	test   edx,edx
c0011030:	74 02                	je     c0011034 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011032:	03 02                	add    eax,DWORD PTR [edx]
c0011034:	c3                   	ret    

c0011035 <KeGetProcessEnvPair(Process*, int)>:
c0011035:	57                   	push   edi
c0011036:	56                   	push   esi
c0011037:	8b 35 20 9c 02 c0    	mov    esi,DWORD PTR ds:0xc0029c20
c001103d:	53                   	push   ebx
c001103e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011042:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011046:	85 f6                	test   esi,esi
c0011048:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001104c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011052:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011054:	75 16                	jne    c001106c <KeGetProcessEnvPair(Process*, int)+0x37>
c0011056:	39 c2                	cmp    edx,eax
c0011058:	7c 16                	jl     c0011070 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001105a:	8b 0d 24 9c 02 c0    	mov    ecx,DWORD PTR ds:0xc0029c24
c0011060:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011062:	01 c6                	add    esi,eax
c0011064:	39 d6                	cmp    esi,edx
c0011066:	7e 3c                	jle    c00110a4 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011068:	29 c2                	sub    edx,eax
c001106a:	eb 04                	jmp    c0011070 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001106c:	39 c2                	cmp    edx,eax
c001106e:	7d 05                	jge    c0011075 <KeGetProcessEnvPair(Process*, int)+0x40>
c0011070:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011073:	eb 20                	jmp    c0011095 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011075:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011077:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001107a:	39 d1                	cmp    ecx,edx
c001107c:	7e 04                	jle    c0011082 <KeGetProcessEnvPair(Process*, int)+0x4d>
c001107e:	29 c2                	sub    edx,eax
c0011080:	eb 10                	jmp    c0011092 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011082:	8b 35 24 9c 02 c0    	mov    esi,DWORD PTR ds:0xc0029c24
c0011088:	03 0e                	add    ecx,DWORD PTR [esi]
c001108a:	39 d1                	cmp    ecx,edx
c001108c:	7e 16                	jle    c00110a4 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001108e:	29 c2                	sub    edx,eax
c0011090:	29 fa                	sub    edx,edi
c0011092:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011095:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011098:	8b 02                	mov    eax,DWORD PTR [edx]
c001109a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001109d:	89 03                	mov    DWORD PTR [ebx],eax
c001109f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00110a2:	eb 1d                	jmp    c00110c1 <KeGetProcessEnvPair(Process*, int)+0x8c>
c00110a4:	83 ec 0c             	sub    esp,0xc
c00110a7:	68 07 1c 02 c0       	push   0xc0021c07
c00110ac:	e8 ac 00 00 00       	call   c001115d <KePanic(char const*)>
c00110b1:	83 c4 10             	add    esp,0x10
c00110b4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00110ba:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00110c1:	89 d8                	mov    eax,ebx
c00110c3:	5b                   	pop    ebx
c00110c4:	5e                   	pop    esi
c00110c5:	5f                   	pop    edi
c00110c6:	c2 04 00             	ret    0x4

c00110c9 <CPU::current()>:
c00110c9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00110ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110d4:	c3                   	ret    

c00110d5 <operator new(unsigned long)>:
c00110d5:	e9 f9 69 ff ff       	jmp    c0007ad3 <malloc>

c00110da <operator delete(void*)>:
c00110da:	e9 14 6a ff ff       	jmp    c0007af3 <rfree>

c00110df <disableIRQs()>:
c00110df:	fa                   	cli    
c00110e0:	c3                   	ret    

c00110e1 <enableIRQs()>:
c00110e1:	fb                   	sti    
c00110e2:	c3                   	ret    

c00110e3 <lockScheduler()>:
c00110e3:	fa                   	cli    
c00110e4:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00110ea:	c3                   	ret    

c00110eb <unlockScheduler()>:
c00110eb:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00110f0:	48                   	dec    eax
c00110f1:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00110f6:	75 01                	jne    c00110f9 <unlockScheduler()+0xe>
c00110f8:	fb                   	sti    
c00110f9:	c3                   	ret    

c00110fa <lockStuff()>:
c00110fa:	fa                   	cli    
c00110fb:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0011101:	ff 05 64 a4 02 c0    	inc    DWORD PTR ds:0xc002a464
c0011107:	c3                   	ret    

c0011108 <unlockStuff()>:
c0011108:	83 ec 0c             	sub    esp,0xc
c001110b:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0011110:	48                   	dec    eax
c0011111:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0011116:	75 18                	jne    c0011130 <unlockStuff()+0x28>
c0011118:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c001111f:	74 0f                	je     c0011130 <unlockStuff()+0x28>
c0011121:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c001112b:	e8 30 49 00 00       	call   c0015a60 <schedule()>
c0011130:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011135:	48                   	dec    eax
c0011136:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001113b:	75 01                	jne    c001113e <unlockStuff()+0x36>
c001113d:	fb                   	sti    
c001113e:	83 c4 0c             	add    esp,0xc
c0011141:	c3                   	ret    

c0011142 <Virt::getAKernelVAS()>:
c0011142:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0011147:	c3                   	ret    

c0011148 <__not_memcpy>:
c0011148:	57                   	push   edi
c0011149:	56                   	push   esi
c001114a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001114e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011152:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011156:	89 c7                	mov    edi,eax
c0011158:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001115a:	5e                   	pop    esi
c001115b:	5f                   	pop    edi
c001115c:	c3                   	ret    

c001115d <KePanic(char const*)>:
c001115d:	c6 05 28 9c 02 c0 01 	mov    BYTE PTR ds:0xc0029c28,0x1
c0011164:	e9 87 68 00 00       	jmp    c00179f0 <HalPanic(char const*)>

c0011169 <KePowerThread(void*)>:
c0011169:	83 ec 0c             	sub    esp,0xc
c001116c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011171:	48                   	dec    eax
c0011172:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0011177:	75 01                	jne    c001117a <KePowerThread(void*)+0x11>
c0011179:	fb                   	sti    
c001117a:	c6 05 40 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c40,0x0
c0011181:	83 ec 0c             	sub    esp,0xc
c0011184:	6a 0a                	push   0xa
c0011186:	e8 05 4c 00 00       	call   c0015d90 <sleep(unsigned int)>
c001118b:	83 c4 10             	add    esp,0x10
c001118e:	83 05 84 9c 02 c0 0a 	add    DWORD PTR ds:0xc0029c84,0xa
c0011195:	eb e3                	jmp    c001117a <KePowerThread(void*)+0x11>

c0011197 <KeChangePowerSettings(PowerSettings)>:
c0011197:	57                   	push   edi
c0011198:	b9 09 00 00 00       	mov    ecx,0x9
c001119d:	56                   	push   esi
c001119e:	bf 60 9c 02 c0       	mov    edi,0xc0029c60
c00111a3:	fc                   	cld    
c00111a4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00111a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00111aa:	5e                   	pop    esi
c00111ab:	5f                   	pop    edi
c00111ac:	c3                   	ret    

c00111ad <KeUserIOReceived()>:
c00111ad:	c7 05 84 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c84,0x0
c00111b7:	c3                   	ret    

c00111b8 <KeHandlePowerButton()>:
c00111b8:	83 ec 0c             	sub    esp,0xc
c00111bb:	a1 60 9c 02 c0       	mov    eax,ds:0xc0029c60
c00111c0:	83 f8 02             	cmp    eax,0x2
c00111c3:	75 10                	jne    c00111d5 <KeHandlePowerButton()+0x1d>
c00111c5:	83 ec 0c             	sub    esp,0xc
c00111c8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00111ce:	e8 77 5f ff ff       	call   c000714a <Computer::shutdown()>
c00111d3:	eb 11                	jmp    c00111e6 <KeHandlePowerButton()+0x2e>
c00111d5:	48                   	dec    eax
c00111d6:	75 11                	jne    c00111e9 <KeHandlePowerButton()+0x31>
c00111d8:	83 ec 0c             	sub    esp,0xc
c00111db:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00111e1:	e8 94 5f ff ff       	call   c000717a <Computer::sleep()>
c00111e6:	83 c4 10             	add    esp,0x10
c00111e9:	83 c4 0c             	add    esp,0xc
c00111ec:	c3                   	ret    

c00111ed <KeHandleSleepButton()>:
c00111ed:	83 ec 0c             	sub    esp,0xc
c00111f0:	a1 64 9c 02 c0       	mov    eax,ds:0xc0029c64
c00111f5:	83 f8 02             	cmp    eax,0x2
c00111f8:	75 10                	jne    c001120a <KeHandleSleepButton()+0x1d>
c00111fa:	83 ec 0c             	sub    esp,0xc
c00111fd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011203:	e8 42 5f ff ff       	call   c000714a <Computer::shutdown()>
c0011208:	eb 11                	jmp    c001121b <KeHandleSleepButton()+0x2e>
c001120a:	48                   	dec    eax
c001120b:	75 11                	jne    c001121e <KeHandleSleepButton()+0x31>
c001120d:	83 ec 0c             	sub    esp,0xc
c0011210:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011216:	e8 5f 5f ff ff       	call   c000717a <Computer::sleep()>
c001121b:	83 c4 10             	add    esp,0x10
c001121e:	83 c4 0c             	add    esp,0xc
c0011221:	c3                   	ret    

c0011222 <KeSetupPowerManager()>:
c0011222:	83 ec 0c             	sub    esp,0xc
c0011225:	68 f0 00 00 00       	push   0xf0
c001122a:	6a 00                	push   0x0
c001122c:	68 69 11 01 c0       	push   0xc0011169
c0011231:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0011237:	c7 05 84 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c84,0x0
c0011241:	c6 05 40 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c40,0x0
c0011248:	e8 c7 45 00 00       	call   c0015814 <Process::createThread(void (*)(void*), void*, int)>
c001124d:	c7 05 60 9c 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0029c60,0x2
c0011257:	c7 05 64 9c 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029c64,0x1
c0011261:	c7 05 68 9c 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0029c68,0x3
c001126b:	c7 05 6c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c6c,0x0
c0011275:	c7 05 78 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c78,0x0
c001127f:	c7 05 70 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c70,0x0
c0011289:	c7 05 7c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c7c,0x0
c0011293:	c7 05 74 9c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029c74,0x3c
c001129d:	c7 05 80 9c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029c80,0x3c
c00112a7:	83 c4 1c             	add    esp,0x1c
c00112aa:	c3                   	ret    

c00112ab <KeRand()>:
c00112ab:	69 05 88 9c 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0029c88,0x2875
c00112b5:	69 0d 8c 9c 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0029c8c,0xa2e7b175
c00112bf:	53                   	push   ebx
c00112c0:	01 c1                	add    ecx,eax
c00112c2:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00112c7:	f7 25 88 9c 02 c0    	mul    DWORD PTR ds:0xc0029c88
c00112cd:	01 ca                	add    edx,ecx
c00112cf:	05 ef 04 b5 00       	add    eax,0xb504ef
c00112d4:	a3 88 9c 02 c0       	mov    ds:0xc0029c88,eax
c00112d9:	83 d2 00             	adc    edx,0x0
c00112dc:	0f b7 da             	movzx  ebx,dx
c00112df:	89 1d 8c 9c 02 c0    	mov    DWORD PTR ds:0xc0029c8c,ebx
c00112e5:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00112e9:	5b                   	pop    ebx
c00112ea:	c3                   	ret    

c00112eb <KeSeedRand(unsigned int)>:
c00112eb:	53                   	push   ebx
c00112ec:	83 ec 08             	sub    esp,0x8
c00112ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112f3:	e8 17 6a 00 00       	call   c0017d0f <HalGetRand()>
c00112f8:	c7 05 8c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c8c,0x0
c0011302:	31 d8                	xor    eax,ebx
c0011304:	a3 88 9c 02 c0       	mov    ds:0xc0029c88,eax
c0011309:	e8 9d ff ff ff       	call   c00112ab <KeRand()>
c001130e:	83 c4 08             	add    esp,0x8
c0011311:	5b                   	pop    ebx
c0011312:	eb 97                	jmp    c00112ab <KeRand()>

c0011314 <KeInitRand()>:
c0011314:	83 ec 0c             	sub    esp,0xc
c0011317:	e8 e8 67 00 00       	call   c0017b04 <HalQueryPerformanceCounter()>
c001131c:	0f 20 da             	mov    edx,cr3
c001131f:	0f 22 da             	mov    cr3,edx
c0011322:	0f 20 da             	mov    edx,cr3
c0011325:	0f 22 da             	mov    cr3,edx
c0011328:	0f 20 da             	mov    edx,cr3
c001132b:	0f 22 da             	mov    cr3,edx
c001132e:	0f 20 da             	mov    edx,cr3
c0011331:	0f 22 da             	mov    cr3,edx
c0011334:	83 ec 0c             	sub    esp,0xc
c0011337:	35 03 8a 95 38       	xor    eax,0x38958a03
c001133c:	50                   	push   eax
c001133d:	e8 a9 ff ff ff       	call   c00112eb <KeSeedRand(unsigned int)>
c0011342:	83 c4 1c             	add    esp,0x1c
c0011345:	c3                   	ret    
c0011346:	66 90                	xchg   ax,ax

c0011348 <KeResolveCompatibilitySymbol(char*)>:
c0011348:	83 ec 0c             	sub    esp,0xc
c001134b:	83 ec 08             	sub    esp,0x8
c001134e:	68 21 1c 02 c0       	push   0xc0021c21
c0011353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011357:	e8 24 f4 fe ff       	call   c0000780 <strcmp>
c001135c:	83 c4 10             	add    esp,0x10
c001135f:	85 c0                	test   eax,eax
c0011361:	0f 94 c0             	sete   al
c0011364:	0f b6 c0             	movzx  eax,al
c0011367:	85 c0                	test   eax,eax
c0011369:	74 0d                	je     c0011378 <KeResolveCompatibilitySymbol(char*)+0x30>
c001136b:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0011370:	e9 8b 01 00 00       	jmp    c0011500 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011375:	8d 76 00             	lea    esi,[esi+0x0]
c0011378:	83 ec 08             	sub    esp,0x8
c001137b:	68 2a 1c 02 c0       	push   0xc0021c2a
c0011380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011384:	e8 f7 f3 fe ff       	call   c0000780 <strcmp>
c0011389:	83 c4 10             	add    esp,0x10
c001138c:	85 c0                	test   eax,eax
c001138e:	0f 94 c0             	sete   al
c0011391:	0f b6 c0             	movzx  eax,al
c0011394:	85 c0                	test   eax,eax
c0011396:	74 0c                	je     c00113a4 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011398:	b8 20 f1 01 c0       	mov    eax,0xc001f120
c001139d:	e9 5e 01 00 00       	jmp    c0011500 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00113a2:	66 90                	xchg   ax,ax
c00113a4:	83 ec 08             	sub    esp,0x8
c00113a7:	68 34 1c 02 c0       	push   0xc0021c34
c00113ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113b0:	e8 cb f3 fe ff       	call   c0000780 <strcmp>
c00113b5:	83 c4 10             	add    esp,0x10
c00113b8:	85 c0                	test   eax,eax
c00113ba:	0f 94 c0             	sete   al
c00113bd:	0f b6 c0             	movzx  eax,al
c00113c0:	85 c0                	test   eax,eax
c00113c2:	74 0c                	je     c00113d0 <KeResolveCompatibilitySymbol(char*)+0x88>
c00113c4:	b8 54 ee 01 c0       	mov    eax,0xc001ee54
c00113c9:	e9 32 01 00 00       	jmp    c0011500 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00113ce:	66 90                	xchg   ax,ax
c00113d0:	83 ec 08             	sub    esp,0x8
c00113d3:	68 3d 1c 02 c0       	push   0xc0021c3d
c00113d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113dc:	e8 9f f3 fe ff       	call   c0000780 <strcmp>
c00113e1:	83 c4 10             	add    esp,0x10
c00113e4:	85 c0                	test   eax,eax
c00113e6:	0f 94 c0             	sete   al
c00113e9:	0f b6 c0             	movzx  eax,al
c00113ec:	85 c0                	test   eax,eax
c00113ee:	74 0c                	je     c00113fc <KeResolveCompatibilitySymbol(char*)+0xb4>
c00113f0:	b8 5d 11 01 c0       	mov    eax,0xc001115d
c00113f5:	e9 06 01 00 00       	jmp    c0011500 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00113fa:	66 90                	xchg   ax,ax
c00113fc:	83 ec 08             	sub    esp,0x8
c00113ff:	68 50 1c 02 c0       	push   0xc0021c50
c0011404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011408:	e8 73 f3 fe ff       	call   c0000780 <strcmp>
c001140d:	83 c4 10             	add    esp,0x10
c0011410:	85 c0                	test   eax,eax
c0011412:	0f 94 c0             	sete   al
c0011415:	0f b6 c0             	movzx  eax,al
c0011418:	85 c0                	test   eax,eax
c001141a:	74 0c                	je     c0011428 <KeResolveCompatibilitySymbol(char*)+0xe0>
c001141c:	b8 88 0a 01 c0       	mov    eax,0xc0010a88
c0011421:	e9 da 00 00 00       	jmp    c0011500 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011426:	66 90                	xchg   ax,ax
c0011428:	83 ec 08             	sub    esp,0x8
c001142b:	68 6d 1c 02 c0       	push   0xc0021c6d
c0011430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011434:	e8 47 f3 fe ff       	call   c0000780 <strcmp>
c0011439:	83 c4 10             	add    esp,0x10
c001143c:	85 c0                	test   eax,eax
c001143e:	0f 94 c0             	sete   al
c0011441:	0f b6 c0             	movzx  eax,al
c0011444:	85 c0                	test   eax,eax
c0011446:	74 0c                	je     c0011454 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011448:	b8 20 f2 01 c0       	mov    eax,0xc001f220
c001144d:	e9 ae 00 00 00       	jmp    c0011500 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011452:	66 90                	xchg   ax,ax
c0011454:	83 ec 08             	sub    esp,0x8
c0011457:	68 77 1c 02 c0       	push   0xc0021c77
c001145c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011460:	e8 1b f3 fe ff       	call   c0000780 <strcmp>
c0011465:	83 c4 10             	add    esp,0x10
c0011468:	85 c0                	test   eax,eax
c001146a:	0f 94 c0             	sete   al
c001146d:	0f b6 c0             	movzx  eax,al
c0011470:	85 c0                	test   eax,eax
c0011472:	74 0c                	je     c0011480 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011474:	b8 a0 ef 01 c0       	mov    eax,0xc001efa0
c0011479:	e9 82 00 00 00       	jmp    c0011500 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001147e:	66 90                	xchg   ax,ax
c0011480:	83 ec 08             	sub    esp,0x8
c0011483:	68 80 1c 02 c0       	push   0xc0021c80
c0011488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001148c:	e8 ef f2 fe ff       	call   c0000780 <strcmp>
c0011491:	83 c4 10             	add    esp,0x10
c0011494:	85 c0                	test   eax,eax
c0011496:	0f 94 c0             	sete   al
c0011499:	0f b6 c0             	movzx  eax,al
c001149c:	85 c0                	test   eax,eax
c001149e:	74 08                	je     c00114a8 <KeResolveCompatibilitySymbol(char*)+0x160>
c00114a0:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00114a5:	eb 59                	jmp    c0011500 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114a7:	90                   	nop
c00114a8:	83 ec 08             	sub    esp,0x8
c00114ab:	68 98 1c 02 c0       	push   0xc0021c98
c00114b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114b4:	e8 c7 f2 fe ff       	call   c0000780 <strcmp>
c00114b9:	83 c4 10             	add    esp,0x10
c00114bc:	85 c0                	test   eax,eax
c00114be:	0f 94 c0             	sete   al
c00114c1:	0f b6 c0             	movzx  eax,al
c00114c4:	85 c0                	test   eax,eax
c00114c6:	74 08                	je     c00114d0 <KeResolveCompatibilitySymbol(char*)+0x188>
c00114c8:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00114cd:	eb 31                	jmp    c0011500 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114cf:	90                   	nop
c00114d0:	83 ec 08             	sub    esp,0x8
c00114d3:	68 a5 1c 02 c0       	push   0xc0021ca5
c00114d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114dc:	e8 9f f2 fe ff       	call   c0000780 <strcmp>
c00114e1:	83 c4 10             	add    esp,0x10
c00114e4:	85 c0                	test   eax,eax
c00114e6:	0f 94 c0             	sete   al
c00114e9:	0f b6 c0             	movzx  eax,al
c00114ec:	85 c0                	test   eax,eax
c00114ee:	74 08                	je     c00114f8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00114f0:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c00114f5:	eb 09                	jmp    c0011500 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114f7:	90                   	nop
c00114f8:	b8 00 00 00 00       	mov    eax,0x0
c00114fd:	8d 76 00             	lea    esi,[esi+0x0]
c0011500:	83 c4 0c             	add    esp,0xc
c0011503:	c3                   	ret    

c0011504 <KiSigKill(int)>:
c0011504:	83 ec 0c             	sub    esp,0xc
c0011507:	6a 00                	push   0x0
c0011509:	6a 00                	push   0x0
c001150b:	6a ff                	push   0xffffffff
c001150d:	6a 01                	push   0x1
c001150f:	e8 3e 2b 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011514:	83 c4 1c             	add    esp,0x1c
c0011517:	c3                   	ret    

c0011518 <KiDefaultSignalHandlerIgnore(int)>:
c0011518:	c3                   	ret    

c0011519 <KiDefaultSignalHandlerPause(int)>:
c0011519:	57                   	push   edi
c001151a:	b9 07 00 00 00       	mov    ecx,0x7
c001151f:	56                   	push   esi
c0011520:	be ee 1c 02 c0       	mov    esi,0xc0021cee
c0011525:	83 ec 24             	sub    esp,0x24
c0011528:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001152c:	fc                   	cld    
c001152d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001152f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011533:	50                   	push   eax
c0011534:	6a 00                	push   0x0
c0011536:	6a 00                	push   0x0
c0011538:	6a 27                	push   0x27
c001153a:	e8 13 2b 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001153f:	83 c4 34             	add    esp,0x34
c0011542:	5e                   	pop    esi
c0011543:	5f                   	pop    edi
c0011544:	c3                   	ret    

c0011545 <KiDefaultSignalHandlerResume(int)>:
c0011545:	57                   	push   edi
c0011546:	b9 1d 00 00 00       	mov    ecx,0x1d
c001154b:	56                   	push   esi
c001154c:	be 0a 1d 02 c0       	mov    esi,0xc0021d0a
c0011551:	83 ec 24             	sub    esp,0x24
c0011554:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011558:	fc                   	cld    
c0011559:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001155b:	8d 44 24 03          	lea    eax,[esp+0x3]
c001155f:	50                   	push   eax
c0011560:	6a 00                	push   0x0
c0011562:	6a 00                	push   0x0
c0011564:	6a 27                	push   0x27
c0011566:	e8 e7 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001156b:	83 c4 34             	add    esp,0x34
c001156e:	5e                   	pop    esi
c001156f:	5f                   	pop    edi
c0011570:	c3                   	ret    

c0011571 <KeDeinitSignals(SigHandlerBlock*)>:
c0011571:	e9 6d 65 ff ff       	jmp    c0007ae3 <free>

c0011576 <KeInitSignals()>:
c0011576:	53                   	push   ebx
c0011577:	83 ec 14             	sub    esp,0x14
c001157a:	68 c8 00 00 00       	push   0xc8
c001157f:	e8 4f 65 ff ff       	call   c0007ad3 <malloc>
c0011584:	83 c4 0c             	add    esp,0xc
c0011587:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011591:	89 c3                	mov    ebx,eax
c0011593:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001159d:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00115a3:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c00115a7:	6a 20                	push   0x20
c00115a9:	6a 00                	push   0x0
c00115ab:	50                   	push   eax
c00115ac:	e8 3f ef fe ff       	call   c00004f0 <memset>
c00115b1:	83 c4 0c             	add    esp,0xc
c00115b4:	6a 44                	push   0x44
c00115b6:	6a 00                	push   0x0
c00115b8:	53                   	push   ebx
c00115b9:	e8 32 ef fe ff       	call   c00004f0 <memset>
c00115be:	83 c4 18             	add    esp,0x18
c00115c1:	89 d8                	mov    eax,ebx
c00115c3:	5b                   	pop    ebx
c00115c4:	c3                   	ret    

c00115c5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00115c5:	53                   	push   ebx
c00115c6:	b8 01 00 00 00       	mov    eax,0x1
c00115cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00115cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00115d3:	83 f9 10             	cmp    ecx,0x10
c00115d6:	7f 21                	jg     c00115f9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00115d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115dc:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00115df:	89 03                	mov    DWORD PTR [ebx],eax
c00115e1:	b8 01 00 00 00       	mov    eax,0x1
c00115e6:	d3 e0                	shl    eax,cl
c00115e8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00115ec:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00115ef:	31 c0                	xor    eax,eax
c00115f1:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00115f9:	5b                   	pop    ebx
c00115fa:	c3                   	ret    

c00115fb <KeRaiseSignal(SigHandlerBlock*, int)>:
c00115fb:	55                   	push   ebp
c00115fc:	57                   	push   edi
c00115fd:	bf 08 00 00 00       	mov    edi,0x8
c0011602:	56                   	push   esi
c0011603:	53                   	push   ebx
c0011604:	83 ec 18             	sub    esp,0x18
c0011607:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001160b:	68 27 1d 02 c0       	push   0xc0021d27
c0011610:	e8 f5 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011615:	83 c4 10             	add    esp,0x10
c0011618:	31 c9                	xor    ecx,ecx
c001161a:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011621:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011627:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001162b:	99                   	cdq    
c001162c:	f7 ff                	idiv   edi
c001162e:	8d 42 24             	lea    eax,[edx+0x24]
c0011631:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011635:	85 f6                	test   esi,esi
c0011637:	75 1a                	jne    c0011653 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011639:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001163d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011641:	50                   	push   eax
c0011642:	50                   	push   eax
c0011643:	52                   	push   edx
c0011644:	68 38 1d 02 c0       	push   0xc0021d38
c0011649:	e8 bc 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001164e:	83 c4 10             	add    esp,0x10
c0011651:	eb 1b                	jmp    c001166e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011653:	41                   	inc    ecx
c0011654:	83 f9 08             	cmp    ecx,0x8
c0011657:	75 ce                	jne    c0011627 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011659:	83 ec 0c             	sub    esp,0xc
c001165c:	be 01 00 00 00       	mov    esi,0x1
c0011661:	68 59 1d 02 c0       	push   0xc0021d59
c0011666:	e8 9f 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001166b:	83 c4 10             	add    esp,0x10
c001166e:	83 c4 0c             	add    esp,0xc
c0011671:	89 f0                	mov    eax,esi
c0011673:	5b                   	pop    ebx
c0011674:	5e                   	pop    esi
c0011675:	5f                   	pop    edi
c0011676:	5d                   	pop    ebp
c0011677:	c3                   	ret    

c0011678 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011678:	55                   	push   ebp
c0011679:	57                   	push   edi
c001167a:	56                   	push   esi
c001167b:	53                   	push   ebx
c001167c:	51                   	push   ecx
c001167d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011681:	85 db                	test   ebx,ebx
c0011683:	0f 84 bc 00 00 00    	je     c0011745 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011689:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011690:	0f 84 af 00 00 00    	je     c0011745 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011696:	31 c9                	xor    ecx,ecx
c0011698:	bf 08 00 00 00       	mov    edi,0x8
c001169d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00116a3:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00116a6:	99                   	cdq    
c00116a7:	f7 ff                	idiv   edi
c00116a9:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00116b0:	85 ed                	test   ebp,ebp
c00116b2:	0f 84 9e 00 00 00    	je     c0011756 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00116b8:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00116be:	89 e9                	mov    ecx,ebp
c00116c0:	bf 01 00 00 00       	mov    edi,0x1
c00116c5:	d3 e7                	shl    edi,cl
c00116c7:	31 c9                	xor    ecx,ecx
c00116c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00116cc:	b8 01 00 00 00       	mov    eax,0x1
c00116d1:	d3 e0                	shl    eax,cl
c00116d3:	85 04 24             	test   DWORD PTR [esp],eax
c00116d6:	74 06                	je     c00116de <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00116d8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00116dc:	75 67                	jne    c0011745 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00116de:	41                   	inc    ecx
c00116df:	83 f9 11             	cmp    ecx,0x11
c00116e2:	75 e8                	jne    c00116cc <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00116e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00116e7:	46                   	inc    esi
c00116e8:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00116ee:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00116f9:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011700:	09 f8                	or     eax,edi
c0011702:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011708:	31 c0                	xor    eax,eax
c001170a:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011712:	74 09                	je     c001171d <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011714:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001171b:	eb 06                	jmp    c0011723 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c001171d:	40                   	inc    eax
c001171e:	83 f8 08             	cmp    eax,0x8
c0011721:	75 e7                	jne    c001170a <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011723:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011727:	83 fd 09             	cmp    ebp,0x9
c001172a:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c001172d:	89 2a                	mov    DWORD PTR [edx],ebp
c001172f:	75 07                	jne    c0011738 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011731:	b8 04 15 01 c0       	mov    eax,0xc0011504
c0011736:	eb 31                	jmp    c0011769 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011738:	83 f8 01             	cmp    eax,0x1
c001173b:	75 0c                	jne    c0011749 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c001173d:	f7 d7                	not    edi
c001173f:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011745:	31 c0                	xor    eax,eax
c0011747:	eb 20                	jmp    c0011769 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011749:	85 c0                	test   eax,eax
c001174b:	75 1c                	jne    c0011769 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001174d:	8b 04 ad 60 31 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcea0]
c0011754:	eb 13                	jmp    c0011769 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011756:	41                   	inc    ecx
c0011757:	46                   	inc    esi
c0011758:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001175e:	83 f9 08             	cmp    ecx,0x8
c0011761:	0f 85 36 ff ff ff    	jne    c001169d <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011767:	eb dc                	jmp    c0011745 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011769:	5a                   	pop    edx
c001176a:	5b                   	pop    ebx
c001176b:	5e                   	pop    esi
c001176c:	5f                   	pop    edi
c001176d:	5d                   	pop    ebp
c001176e:	c3                   	ret    

c001176f <KiCheckSignalZ>:
c001176f:	83 ec 10             	sub    esp,0x10
c0011772:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011776:	50                   	push   eax
c0011777:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001177c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001177f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011785:	e8 ee fe ff ff       	call   c0011678 <KeCheckSignal(SigHandlerBlock*, int*)>
c001178a:	5a                   	pop    edx
c001178b:	31 d2                	xor    edx,edx
c001178d:	59                   	pop    ecx
c001178e:	85 c0                	test   eax,eax
c0011790:	74 19                	je     c00117ab <KiCheckSignalZ+0x3c>
c0011792:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011798:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001179b:	89 02                	mov    DWORD PTR [edx],eax
c001179d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00117a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117a8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00117ab:	89 d0                	mov    eax,edx
c00117ad:	83 c4 10             	add    esp,0x10
c00117b0:	c3                   	ret    

c00117b1 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00117b1:	56                   	push   esi
c00117b2:	53                   	push   ebx
c00117b3:	bb 01 00 00 00       	mov    ebx,0x1
c00117b8:	52                   	push   edx
c00117b9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00117bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00117c1:	d3 e3                	shl    ebx,cl
c00117c3:	83 f9 10             	cmp    ecx,0x10
c00117c6:	7f 08                	jg     c00117d0 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00117c8:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00117ce:	75 10                	jne    c00117e0 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00117d0:	83 ec 0c             	sub    esp,0xc
c00117d3:	68 6a 1d 02 c0       	push   0xc0021d6a
c00117d8:	e8 80 f9 ff ff       	call   c001115d <KePanic(char const*)>
c00117dd:	83 c4 10             	add    esp,0x10
c00117e0:	f7 d3                	not    ebx
c00117e2:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00117e8:	58                   	pop    eax
c00117e9:	5b                   	pop    ebx
c00117ea:	5e                   	pop    esi
c00117eb:	c3                   	ret    

c00117ec <KiFinishSignalZ>:
c00117ec:	53                   	push   ebx
c00117ed:	83 ec 10             	sub    esp,0x10
c00117f0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00117f4:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00117f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117ff:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011805:	e8 a7 ff ff ff       	call   c00117b1 <KeCompleteSignal(SigHandlerBlock*, int)>
c001180a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011810:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011817:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001181e:	83 c4 18             	add    esp,0x18
c0011821:	5b                   	pop    ebx
c0011822:	c3                   	ret    

c0011823 <SysSeekDir(regs*)>:
c0011823:	31 c0                	xor    eax,eax
c0011825:	31 d2                	xor    edx,edx
c0011827:	c3                   	ret    

c0011828 <SysTellDir(regs*)>:
c0011828:	31 c0                	xor    eax,eax
c001182a:	31 d2                	xor    edx,edx
c001182c:	c3                   	ret    

c001182d <SysVerify(regs*)>:
c001182d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011831:	31 d2                	xor    edx,edx
c0011833:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011836:	c3                   	ret    

c0011837 <SysGetArgc(regs*)>:
c0011837:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001183c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001183f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011845:	89 c2                	mov    edx,eax
c0011847:	c1 fa 1f             	sar    edx,0x1f
c001184a:	c3                   	ret    

c001184b <SysTTYName(regs*)>:
c001184b:	b8 01 00 00 00       	mov    eax,0x1
c0011850:	31 d2                	xor    edx,edx
c0011852:	c3                   	ret    

c0011853 <SysFormatDisk(regs*)>:
c0011853:	56                   	push   esi
c0011854:	53                   	push   ebx
c0011855:	83 ec 04             	sub    esp,0x4
c0011858:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001185c:	8b 1d 64 70 02 c0    	mov    ebx,DWORD PTR ds:0xc0027064
c0011862:	eb 2a                	jmp    c001188e <SysFormatDisk(regs*)+0x3b>
c0011864:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011867:	83 ec 0c             	sub    esp,0xc
c001186a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001186d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001186f:	51                   	push   ecx
c0011870:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011873:	51                   	push   ecx
c0011874:	50                   	push   eax
c0011875:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c001187c:	50                   	push   eax
c001187d:	53                   	push   ebx
c001187e:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011881:	83 c4 20             	add    esp,0x20
c0011884:	83 f8 08             	cmp    eax,0x8
c0011887:	89 c1                	mov    ecx,eax
c0011889:	75 14                	jne    c001189f <SysFormatDisk(regs*)+0x4c>
c001188b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001188e:	85 db                	test   ebx,ebx
c0011890:	75 d2                	jne    c0011864 <SysFormatDisk(regs*)+0x11>
c0011892:	b8 03 00 00 00       	mov    eax,0x3
c0011897:	31 d2                	xor    edx,edx
c0011899:	83 c4 04             	add    esp,0x4
c001189c:	5b                   	pop    ebx
c001189d:	5e                   	pop    esi
c001189e:	c3                   	ret    
c001189f:	85 c0                	test   eax,eax
c00118a1:	74 13                	je     c00118b6 <SysFormatDisk(regs*)+0x63>
c00118a3:	31 d2                	xor    edx,edx
c00118a5:	83 f9 09             	cmp    ecx,0x9
c00118a8:	b8 01 00 00 00       	mov    eax,0x1
c00118ad:	74 ea                	je     c0011899 <SysFormatDisk(regs*)+0x46>
c00118af:	b8 02 00 00 00       	mov    eax,0x2
c00118b4:	eb e1                	jmp    c0011897 <SysFormatDisk(regs*)+0x44>
c00118b6:	31 c0                	xor    eax,eax
c00118b8:	eb dd                	jmp    c0011897 <SysFormatDisk(regs*)+0x44>

c00118ba <SysSetDiskVolumeLabel(regs*)>:
c00118ba:	56                   	push   esi
c00118bb:	53                   	push   ebx
c00118bc:	83 ec 04             	sub    esp,0x4
c00118bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00118c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00118c6:	83 f8 19             	cmp    eax,0x19
c00118c9:	77 33                	ja     c00118fe <SysSetDiskVolumeLabel(regs*)+0x44>
c00118cb:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c00118d2:	85 c9                	test   ecx,ecx
c00118d4:	74 28                	je     c00118fe <SysSetDiskVolumeLabel(regs*)+0x44>
c00118d6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00118d9:	85 db                	test   ebx,ebx
c00118db:	74 21                	je     c00118fe <SysSetDiskVolumeLabel(regs*)+0x44>
c00118dd:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00118e3:	85 d2                	test   edx,edx
c00118e5:	74 17                	je     c00118fe <SysSetDiskVolumeLabel(regs*)+0x44>
c00118e7:	8b 32                	mov    esi,DWORD PTR [edx]
c00118e9:	53                   	push   ebx
c00118ea:	50                   	push   eax
c00118eb:	51                   	push   ecx
c00118ec:	52                   	push   edx
c00118ed:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00118f0:	83 c4 10             	add    esp,0x10
c00118f3:	83 c4 04             	add    esp,0x4
c00118f6:	5b                   	pop    ebx
c00118f7:	5e                   	pop    esi
c00118f8:	89 c2                	mov    edx,eax
c00118fa:	c1 fa 1f             	sar    edx,0x1f
c00118fd:	c3                   	ret    
c00118fe:	83 c4 04             	add    esp,0x4
c0011901:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011906:	5b                   	pop    ebx
c0011907:	ba ff ff ff ff       	mov    edx,0xffffffff
c001190c:	5e                   	pop    esi
c001190d:	c3                   	ret    

c001190e <SysGetDiskVolumeLabel(regs*)>:
c001190e:	57                   	push   edi
c001190f:	56                   	push   esi
c0011910:	53                   	push   ebx
c0011911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011915:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011918:	83 fa 19             	cmp    edx,0x19
c001191b:	77 3c                	ja     c0011959 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001191d:	8b 0c 95 e0 94 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6b20]
c0011924:	85 c9                	test   ecx,ecx
c0011926:	74 31                	je     c0011959 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011928:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001192b:	85 db                	test   ebx,ebx
c001192d:	74 2a                	je     c0011959 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001192f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011932:	85 f6                	test   esi,esi
c0011934:	74 23                	je     c0011959 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011936:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001193c:	85 c0                	test   eax,eax
c001193e:	74 19                	je     c0011959 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011940:	83 ec 0c             	sub    esp,0xc
c0011943:	8b 38                	mov    edi,DWORD PTR [eax]
c0011945:	56                   	push   esi
c0011946:	53                   	push   ebx
c0011947:	52                   	push   edx
c0011948:	51                   	push   ecx
c0011949:	50                   	push   eax
c001194a:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001194d:	83 c4 20             	add    esp,0x20
c0011950:	5b                   	pop    ebx
c0011951:	5e                   	pop    esi
c0011952:	89 c2                	mov    edx,eax
c0011954:	c1 fa 1f             	sar    edx,0x1f
c0011957:	5f                   	pop    edi
c0011958:	c3                   	ret    
c0011959:	5b                   	pop    ebx
c001195a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001195f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011964:	5e                   	pop    esi
c0011965:	5f                   	pop    edi
c0011966:	c3                   	ret    

c0011967 <SysShutdown(regs*)>:
c0011967:	57                   	push   edi
c0011968:	56                   	push   esi
c0011969:	83 ec 04             	sub    esp,0x4
c001196c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011970:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011973:	85 c0                	test   eax,eax
c0011975:	74 1e                	je     c0011995 <SysShutdown(regs*)+0x2e>
c0011977:	83 f8 01             	cmp    eax,0x1
c001197a:	74 5f                	je     c00119db <SysShutdown(regs*)+0x74>
c001197c:	83 f8 02             	cmp    eax,0x2
c001197f:	be ff ff ff ff       	mov    esi,0xffffffff
c0011984:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011989:	74 32                	je     c00119bd <SysShutdown(regs*)+0x56>
c001198b:	83 c4 04             	add    esp,0x4
c001198e:	89 f0                	mov    eax,esi
c0011990:	5e                   	pop    esi
c0011991:	89 fa                	mov    edx,edi
c0011993:	5f                   	pop    edi
c0011994:	c3                   	ret    
c0011995:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001199a:	be ff ff ff ff       	mov    esi,0xffffffff
c001199f:	bf ff ff ff ff       	mov    edi,0xffffffff
c00119a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00119a6:	6a 00                	push   0x0
c00119a8:	6a 00                	push   0x0
c00119aa:	6a 00                	push   0x0
c00119ac:	50                   	push   eax
c00119ad:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00119b0:	83 c4 10             	add    esp,0x10
c00119b3:	89 f0                	mov    eax,esi
c00119b5:	83 c4 04             	add    esp,0x4
c00119b8:	89 fa                	mov    edx,edi
c00119ba:	5e                   	pop    esi
c00119bb:	5f                   	pop    edi
c00119bc:	c3                   	ret    
c00119bd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00119c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00119c4:	6a 00                	push   0x0
c00119c6:	6a 00                	push   0x0
c00119c8:	6a 01                	push   0x1
c00119ca:	50                   	push   eax
c00119cb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00119ce:	83 c4 10             	add    esp,0x10
c00119d1:	89 f0                	mov    eax,esi
c00119d3:	83 c4 04             	add    esp,0x4
c00119d6:	89 fa                	mov    edx,edi
c00119d8:	5e                   	pop    esi
c00119d9:	5f                   	pop    edi
c00119da:	c3                   	ret    
c00119db:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c00119e0:	85 c0                	test   eax,eax
c00119e2:	74 02                	je     c00119e6 <SysShutdown(regs*)+0x7f>
c00119e4:	ff d0                	call   eax
c00119e6:	31 f6                	xor    esi,esi
c00119e8:	83 c4 04             	add    esp,0x4
c00119eb:	89 f0                	mov    eax,esi
c00119ed:	31 ff                	xor    edi,edi
c00119ef:	5e                   	pop    esi
c00119f0:	89 fa                	mov    edx,edi
c00119f2:	5f                   	pop    edi
c00119f3:	c3                   	ret    

c00119f4 <SysRealpath(regs*)>:
c00119f4:	53                   	push   ebx
c00119f5:	83 ec 08             	sub    esp,0x8
c00119f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119fc:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00119ff:	85 c9                	test   ecx,ecx
c0011a01:	74 37                	je     c0011a3a <SysRealpath(regs*)+0x46>
c0011a03:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011a06:	31 d2                	xor    edx,edx
c0011a08:	b8 01 00 00 00       	mov    eax,0x1
c0011a0d:	85 db                	test   ebx,ebx
c0011a0f:	75 05                	jne    c0011a16 <SysRealpath(regs*)+0x22>
c0011a11:	83 c4 08             	add    esp,0x8
c0011a14:	5b                   	pop    ebx
c0011a15:	c3                   	ret    
c0011a16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a1b:	83 ec 04             	sub    esp,0x4
c0011a1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a21:	05 0c 01 00 00       	add    eax,0x10c
c0011a26:	50                   	push   eax
c0011a27:	51                   	push   ecx
c0011a28:	53                   	push   ebx
c0011a29:	e8 cc 9a ff ff       	call   c000b4fa <Fs::standardiseFiles(char*, char const*, char const*)>
c0011a2e:	83 c4 10             	add    esp,0x10
c0011a31:	31 c0                	xor    eax,eax
c0011a33:	31 d2                	xor    edx,edx
c0011a35:	83 c4 08             	add    esp,0x8
c0011a38:	5b                   	pop    ebx
c0011a39:	c3                   	ret    
c0011a3a:	b8 01 00 00 00       	mov    eax,0x1
c0011a3f:	31 d2                	xor    edx,edx
c0011a41:	eb f2                	jmp    c0011a35 <SysRealpath(regs*)+0x41>

c0011a43 <SysReadDir(regs*)>:
c0011a43:	53                   	push   ebx
c0011a44:	83 ec 18             	sub    esp,0x18
c0011a47:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a4b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011a4e:	83 f8 02             	cmp    eax,0x2
c0011a51:	76 4f                	jbe    c0011aa2 <SysReadDir(regs*)+0x5f>
c0011a53:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011a5a:	77 52                	ja     c0011aae <SysReadDir(regs*)+0x6b>
c0011a5c:	83 ec 0c             	sub    esp,0xc
c0011a5f:	50                   	push   eax
c0011a60:	e8 36 7a ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011a65:	83 c4 10             	add    esp,0x10
c0011a68:	85 c0                	test   eax,eax
c0011a6a:	74 42                	je     c0011aae <SysReadDir(regs*)+0x6b>
c0011a6c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011a74:	83 ec 0c             	sub    esp,0xc
c0011a77:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011a7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a7d:	51                   	push   ecx
c0011a7e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011a81:	51                   	push   ecx
c0011a82:	6a 00                	push   0x0
c0011a84:	68 10 01 00 00       	push   0x110
c0011a89:	50                   	push   eax
c0011a8a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011a8d:	83 c4 20             	add    esp,0x20
c0011a90:	85 c0                	test   eax,eax
c0011a92:	89 c1                	mov    ecx,eax
c0011a94:	74 27                	je     c0011abd <SysReadDir(regs*)+0x7a>
c0011a96:	31 d2                	xor    edx,edx
c0011a98:	83 f9 07             	cmp    ecx,0x7
c0011a9b:	b8 02 00 00 00       	mov    eax,0x2
c0011aa0:	75 16                	jne    c0011ab8 <SysReadDir(regs*)+0x75>
c0011aa2:	b8 01 00 00 00       	mov    eax,0x1
c0011aa7:	31 d2                	xor    edx,edx
c0011aa9:	83 c4 18             	add    esp,0x18
c0011aac:	5b                   	pop    ebx
c0011aad:	c3                   	ret    
c0011aae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ab3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ab8:	83 c4 18             	add    esp,0x18
c0011abb:	5b                   	pop    ebx
c0011abc:	c3                   	ret    
c0011abd:	31 c0                	xor    eax,eax
c0011abf:	31 d2                	xor    edx,edx
c0011ac1:	eb e6                	jmp    c0011aa9 <SysReadDir(regs*)+0x66>

c0011ac3 <SysIsATTY(regs*)>:
c0011ac3:	83 ec 0c             	sub    esp,0xc
c0011ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011aca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011acd:	83 f8 02             	cmp    eax,0x2
c0011ad0:	76 07                	jbe    c0011ad9 <SysIsATTY(regs*)+0x16>
c0011ad2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011ad7:	75 26                	jne    c0011aff <SysIsATTY(regs*)+0x3c>
c0011ad9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ade:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ae1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011ae7:	85 c0                	test   eax,eax
c0011ae9:	74 24                	je     c0011b0f <SysIsATTY(regs*)+0x4c>
c0011aeb:	8b 10                	mov    edx,DWORD PTR [eax]
c0011aed:	83 ec 0c             	sub    esp,0xc
c0011af0:	50                   	push   eax
c0011af1:	ff 12                	call   DWORD PTR [edx]
c0011af3:	83 c4 10             	add    esp,0x10
c0011af6:	31 d2                	xor    edx,edx
c0011af8:	83 c4 0c             	add    esp,0xc
c0011afb:	0f b6 c0             	movzx  eax,al
c0011afe:	c3                   	ret    
c0011aff:	83 ec 0c             	sub    esp,0xc
c0011b02:	50                   	push   eax
c0011b03:	e8 93 79 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011b08:	83 c4 10             	add    esp,0x10
c0011b0b:	85 c0                	test   eax,eax
c0011b0d:	75 dc                	jne    c0011aeb <SysIsATTY(regs*)+0x28>
c0011b0f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b14:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b19:	83 c4 0c             	add    esp,0xc
c0011b1c:	c3                   	ret    

c0011b1d <SysSeek(regs*)>:
c0011b1d:	56                   	push   esi
c0011b1e:	53                   	push   ebx
c0011b1f:	83 ec 04             	sub    esp,0x4
c0011b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b26:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011b29:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011b2c:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011b32:	77 33                	ja     c0011b67 <SysSeek(regs*)+0x4a>
c0011b34:	83 ec 0c             	sub    esp,0xc
c0011b37:	51                   	push   ecx
c0011b38:	e8 5e 79 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011b3d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011b40:	83 c4 0c             	add    esp,0xc
c0011b43:	31 db                	xor    ebx,ebx
c0011b45:	53                   	push   ebx
c0011b46:	51                   	push   ecx
c0011b47:	50                   	push   eax
c0011b48:	e8 03 9d ff ff       	call   c000b850 <File::seek(unsigned long long)>
c0011b4d:	83 c4 10             	add    esp,0x10
c0011b50:	85 c0                	test   eax,eax
c0011b52:	0f 95 c0             	setne  al
c0011b55:	31 d2                	xor    edx,edx
c0011b57:	0f b6 c0             	movzx  eax,al
c0011b5a:	f7 d8                	neg    eax
c0011b5c:	83 d2 00             	adc    edx,0x0
c0011b5f:	83 c4 04             	add    esp,0x4
c0011b62:	5b                   	pop    ebx
c0011b63:	f7 da                	neg    edx
c0011b65:	5e                   	pop    esi
c0011b66:	c3                   	ret    
c0011b67:	83 c4 04             	add    esp,0x4
c0011b6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b6f:	5b                   	pop    ebx
c0011b70:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b75:	5e                   	pop    esi
c0011b76:	c3                   	ret    

c0011b77 <SysTell(regs*)>:
c0011b77:	53                   	push   ebx
c0011b78:	83 ec 08             	sub    esp,0x8
c0011b7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b7f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b82:	83 f8 02             	cmp    eax,0x2
c0011b85:	76 4e                	jbe    c0011bd5 <SysTell(regs*)+0x5e>
c0011b87:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011b8c:	76 19                	jbe    c0011ba7 <SysTell(regs*)+0x30>
c0011b8e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011b91:	31 d2                	xor    edx,edx
c0011b93:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011b99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ba0:	83 c4 08             	add    esp,0x8
c0011ba3:	31 c0                	xor    eax,eax
c0011ba5:	5b                   	pop    ebx
c0011ba6:	c3                   	ret    
c0011ba7:	83 ec 0c             	sub    esp,0xc
c0011baa:	50                   	push   eax
c0011bab:	e8 eb 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011bb0:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011bb3:	5a                   	pop    edx
c0011bb4:	59                   	pop    ecx
c0011bb5:	53                   	push   ebx
c0011bb6:	50                   	push   eax
c0011bb7:	e8 40 9d ff ff       	call   c000b8fc <File::tell(unsigned long long*)>
c0011bbc:	83 c4 10             	add    esp,0x10
c0011bbf:	85 c0                	test   eax,eax
c0011bc1:	0f 95 c0             	setne  al
c0011bc4:	31 d2                	xor    edx,edx
c0011bc6:	0f b6 c0             	movzx  eax,al
c0011bc9:	f7 d8                	neg    eax
c0011bcb:	83 d2 00             	adc    edx,0x0
c0011bce:	83 c4 08             	add    esp,0x8
c0011bd1:	5b                   	pop    ebx
c0011bd2:	f7 da                	neg    edx
c0011bd4:	c3                   	ret    
c0011bd5:	83 c4 08             	add    esp,0x8
c0011bd8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bdd:	5b                   	pop    ebx
c0011bde:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011be3:	c3                   	ret    

c0011be4 <SysSize(regs*)>:
c0011be4:	53                   	push   ebx
c0011be5:	83 ec 18             	sub    esp,0x18
c0011be8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bef:	83 f8 02             	cmp    eax,0x2
c0011bf2:	76 54                	jbe    c0011c48 <SysSize(regs*)+0x64>
c0011bf4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011bf9:	76 19                	jbe    c0011c14 <SysSize(regs*)+0x30>
c0011bfb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011bfe:	31 d2                	xor    edx,edx
c0011c00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c06:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c0d:	83 c4 18             	add    esp,0x18
c0011c10:	31 c0                	xor    eax,eax
c0011c12:	5b                   	pop    ebx
c0011c13:	c3                   	ret    
c0011c14:	83 ec 0c             	sub    esp,0xc
c0011c17:	50                   	push   eax
c0011c18:	e8 7e 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c1d:	83 c4 0c             	add    esp,0xc
c0011c20:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011c24:	52                   	push   edx
c0011c25:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c28:	52                   	push   edx
c0011c29:	50                   	push   eax
c0011c2a:	e8 65 9e ff ff       	call   c000ba94 <File::stat(unsigned long long*, bool*)>
c0011c2f:	83 c4 10             	add    esp,0x10
c0011c32:	85 c0                	test   eax,eax
c0011c34:	0f 95 c0             	setne  al
c0011c37:	31 d2                	xor    edx,edx
c0011c39:	0f b6 c0             	movzx  eax,al
c0011c3c:	f7 d8                	neg    eax
c0011c3e:	83 d2 00             	adc    edx,0x0
c0011c41:	83 c4 18             	add    esp,0x18
c0011c44:	5b                   	pop    ebx
c0011c45:	f7 da                	neg    edx
c0011c47:	c3                   	ret    
c0011c48:	83 c4 18             	add    esp,0x18
c0011c4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c50:	5b                   	pop    ebx
c0011c51:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c56:	c3                   	ret    

c0011c57 <SysSizeFromFilename(regs*)>:
c0011c57:	57                   	push   edi
c0011c58:	56                   	push   esi
c0011c59:	53                   	push   ebx
c0011c5a:	83 ec 10             	sub    esp,0x10
c0011c5d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011c61:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011c64:	83 fb 02             	cmp    ebx,0x2
c0011c67:	0f 86 83 00 00 00    	jbe    c0011cf0 <SysSizeFromFilename(regs*)+0x99>
c0011c6d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011c73:	76 1b                	jbe    c0011c90 <SysSizeFromFilename(regs*)+0x39>
c0011c75:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011c78:	31 d2                	xor    edx,edx
c0011c7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c80:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c87:	83 c4 10             	add    esp,0x10
c0011c8a:	31 c0                	xor    eax,eax
c0011c8c:	5b                   	pop    ebx
c0011c8d:	5e                   	pop    esi
c0011c8e:	5f                   	pop    edi
c0011c8f:	c3                   	ret    
c0011c90:	83 ec 0c             	sub    esp,0xc
c0011c93:	68 14 01 00 00       	push   0x114
c0011c98:	e8 36 5e ff ff       	call   c0007ad3 <malloc>
c0011c9d:	83 c4 0c             	add    esp,0xc
c0011ca0:	89 c7                	mov    edi,eax
c0011ca2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ca7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011caa:	50                   	push   eax
c0011cab:	53                   	push   ebx
c0011cac:	57                   	push   edi
c0011cad:	e8 24 9a ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c0011cb2:	83 c4 0c             	add    esp,0xc
c0011cb5:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011cb9:	50                   	push   eax
c0011cba:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011cbd:	52                   	push   edx
c0011cbe:	57                   	push   edi
c0011cbf:	e8 d0 9d ff ff       	call   c000ba94 <File::stat(unsigned long long*, bool*)>
c0011cc4:	83 c4 10             	add    esp,0x10
c0011cc7:	85 ff                	test   edi,edi
c0011cc9:	89 c3                	mov    ebx,eax
c0011ccb:	74 0c                	je     c0011cd9 <SysSizeFromFilename(regs*)+0x82>
c0011ccd:	8b 07                	mov    eax,DWORD PTR [edi]
c0011ccf:	83 ec 0c             	sub    esp,0xc
c0011cd2:	57                   	push   edi
c0011cd3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011cd6:	83 c4 10             	add    esp,0x10
c0011cd9:	31 c0                	xor    eax,eax
c0011cdb:	85 db                	test   ebx,ebx
c0011cdd:	0f 95 c0             	setne  al
c0011ce0:	31 d2                	xor    edx,edx
c0011ce2:	f7 d8                	neg    eax
c0011ce4:	83 d2 00             	adc    edx,0x0
c0011ce7:	83 c4 10             	add    esp,0x10
c0011cea:	5b                   	pop    ebx
c0011ceb:	f7 da                	neg    edx
c0011ced:	5e                   	pop    esi
c0011cee:	5f                   	pop    edi
c0011cef:	c3                   	ret    
c0011cf0:	83 c4 10             	add    esp,0x10
c0011cf3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cf8:	5b                   	pop    ebx
c0011cf9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cfe:	5e                   	pop    esi
c0011cff:	5f                   	pop    edi
c0011d00:	c3                   	ret    

c0011d01 <SysClose(regs*)>:
c0011d01:	53                   	push   ebx
c0011d02:	83 ec 08             	sub    esp,0x8
c0011d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d09:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d0c:	83 f8 02             	cmp    eax,0x2
c0011d0f:	76 41                	jbe    c0011d52 <SysClose(regs*)+0x51>
c0011d11:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011d17:	83 fa 01             	cmp    edx,0x1
c0011d1a:	76 2d                	jbe    c0011d49 <SysClose(regs*)+0x48>
c0011d1c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d21:	77 2f                	ja     c0011d52 <SysClose(regs*)+0x51>
c0011d23:	83 ec 0c             	sub    esp,0xc
c0011d26:	50                   	push   eax
c0011d27:	e8 6f 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011d2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0011d2f:	89 c3                	mov    ebx,eax
c0011d31:	e8 ba 9a ff ff       	call   c000b7f0 <File::close()>
c0011d36:	83 c4 10             	add    esp,0x10
c0011d39:	85 db                	test   ebx,ebx
c0011d3b:	74 0c                	je     c0011d49 <SysClose(regs*)+0x48>
c0011d3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d3f:	83 ec 0c             	sub    esp,0xc
c0011d42:	53                   	push   ebx
c0011d43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d46:	83 c4 10             	add    esp,0x10
c0011d49:	83 c4 08             	add    esp,0x8
c0011d4c:	31 c0                	xor    eax,eax
c0011d4e:	5b                   	pop    ebx
c0011d4f:	31 d2                	xor    edx,edx
c0011d51:	c3                   	ret    
c0011d52:	83 c4 08             	add    esp,0x8
c0011d55:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d5a:	5b                   	pop    ebx
c0011d5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d60:	c3                   	ret    

c0011d61 <SysOpenDir(regs*)>:
c0011d61:	56                   	push   esi
c0011d62:	53                   	push   ebx
c0011d63:	83 ec 04             	sub    esp,0x4
c0011d66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d6a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011d6d:	85 c9                	test   ecx,ecx
c0011d6f:	74 5d                	je     c0011dce <SysOpenDir(regs*)+0x6d>
c0011d71:	83 ec 0c             	sub    esp,0xc
c0011d74:	68 14 01 00 00       	push   0x114
c0011d79:	e8 55 5d ff ff       	call   c0007ad3 <malloc>
c0011d7e:	83 c4 0c             	add    esp,0xc
c0011d81:	89 c6                	mov    esi,eax
c0011d83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d88:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d8b:	50                   	push   eax
c0011d8c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011d8f:	52                   	push   edx
c0011d90:	56                   	push   esi
c0011d91:	e8 bc 9e ff ff       	call   c000bc52 <Directory::Directory(char const*, Process*)>
c0011d96:	83 c4 10             	add    esp,0x10
c0011d99:	85 f6                	test   esi,esi
c0011d9b:	74 31                	je     c0011dce <SysOpenDir(regs*)+0x6d>
c0011d9d:	83 ec 0c             	sub    esp,0xc
c0011da0:	56                   	push   esi
c0011da1:	e8 68 9f ff ff       	call   c000bd0e <Directory::open()>
c0011da6:	83 c4 10             	add    esp,0x10
c0011da9:	85 c0                	test   eax,eax
c0011dab:	75 21                	jne    c0011dce <SysOpenDir(regs*)+0x6d>
c0011dad:	83 ec 0c             	sub    esp,0xc
c0011db0:	56                   	push   esi
c0011db1:	e8 e8 73 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0011db6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011db9:	83 c4 10             	add    esp,0x10
c0011dbc:	89 02                	mov    DWORD PTR [edx],eax
c0011dbe:	c1 f8 1f             	sar    eax,0x1f
c0011dc1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011dc4:	83 c4 04             	add    esp,0x4
c0011dc7:	31 c0                	xor    eax,eax
c0011dc9:	5b                   	pop    ebx
c0011dca:	31 d2                	xor    edx,edx
c0011dcc:	5e                   	pop    esi
c0011dcd:	c3                   	ret    
c0011dce:	83 c4 04             	add    esp,0x4
c0011dd1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dd6:	5b                   	pop    ebx
c0011dd7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ddc:	5e                   	pop    esi
c0011ddd:	c3                   	ret    

c0011dde <SysMakeDir(regs*)>:
c0011dde:	56                   	push   esi
c0011ddf:	53                   	push   ebx
c0011de0:	83 ec 10             	sub    esp,0x10
c0011de3:	68 14 01 00 00       	push   0x114
c0011de8:	e8 e6 5c ff ff       	call   c0007ad3 <malloc>
c0011ded:	83 c4 0c             	add    esp,0xc
c0011df0:	89 c3                	mov    ebx,eax
c0011df2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011df7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dfa:	50                   	push   eax
c0011dfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011dff:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011e02:	52                   	push   edx
c0011e03:	53                   	push   ebx
c0011e04:	e8 49 9e ff ff       	call   c000bc52 <Directory::Directory(char const*, Process*)>
c0011e09:	83 c4 10             	add    esp,0x10
c0011e0c:	85 db                	test   ebx,ebx
c0011e0e:	74 2c                	je     c0011e3c <SysMakeDir(regs*)+0x5e>
c0011e10:	83 ec 0c             	sub    esp,0xc
c0011e13:	53                   	push   ebx
c0011e14:	e8 d5 a0 ff ff       	call   c000beee <Directory::create()>
c0011e19:	89 c6                	mov    esi,eax
c0011e1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e20:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e23:	83 c4 10             	add    esp,0x10
c0011e26:	31 c0                	xor    eax,eax
c0011e28:	85 f6                	test   esi,esi
c0011e2a:	0f 95 c0             	setne  al
c0011e2d:	31 d2                	xor    edx,edx
c0011e2f:	f7 d8                	neg    eax
c0011e31:	83 d2 00             	adc    edx,0x0
c0011e34:	83 c4 04             	add    esp,0x4
c0011e37:	5b                   	pop    ebx
c0011e38:	f7 da                	neg    edx
c0011e3a:	5e                   	pop    esi
c0011e3b:	c3                   	ret    
c0011e3c:	83 c4 04             	add    esp,0x4
c0011e3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e44:	5b                   	pop    ebx
c0011e45:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e4a:	5e                   	pop    esi
c0011e4b:	c3                   	ret    

c0011e4c <SysCloseDir(regs*)>:
c0011e4c:	53                   	push   ebx
c0011e4d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e52:	83 ec 08             	sub    esp,0x8
c0011e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e59:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011e5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e61:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011e64:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0011e6a:	77 2a                	ja     c0011e96 <SysCloseDir(regs*)+0x4a>
c0011e6c:	83 ec 0c             	sub    esp,0xc
c0011e6f:	51                   	push   ecx
c0011e70:	e8 26 76 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e78:	89 c3                	mov    ebx,eax
c0011e7a:	e8 eb 9e ff ff       	call   c000bd6a <Directory::close()>
c0011e7f:	83 c4 10             	add    esp,0x10
c0011e82:	85 db                	test   ebx,ebx
c0011e84:	74 0c                	je     c0011e92 <SysCloseDir(regs*)+0x46>
c0011e86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e88:	83 ec 0c             	sub    esp,0xc
c0011e8b:	53                   	push   ebx
c0011e8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e8f:	83 c4 10             	add    esp,0x10
c0011e92:	31 c0                	xor    eax,eax
c0011e94:	31 d2                	xor    edx,edx
c0011e96:	83 c4 08             	add    esp,0x8
c0011e99:	5b                   	pop    ebx
c0011e9a:	c3                   	ret    

c0011e9b <SysWait(regs*)>:
c0011e9b:	83 ec 10             	sub    esp,0x10
c0011e9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ea2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011ea5:	52                   	push   edx
c0011ea6:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011ea9:	51                   	push   ecx
c0011eaa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ead:	50                   	push   eax
c0011eae:	e8 e5 3d 00 00       	call   c0015c98 <waitTask(int, int*, int)>
c0011eb3:	83 c4 1c             	add    esp,0x1c
c0011eb6:	89 c2                	mov    edx,eax
c0011eb8:	c1 fa 1f             	sar    edx,0x1f
c0011ebb:	c3                   	ret    

c0011ebc <SysNotImpl(regs*)>:
c0011ebc:	83 ec 18             	sub    esp,0x18
c0011ebf:	68 7b 1d 02 c0       	push   0xc0021d7b
c0011ec4:	e8 94 f2 ff ff       	call   c001115d <KePanic(char const*)>
c0011ec9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ece:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ed3:	83 c4 1c             	add    esp,0x1c
c0011ed6:	c3                   	ret    

c0011ed7 <SysPanic(regs*)>:
c0011ed7:	83 ec 18             	sub    esp,0x18
c0011eda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ede:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011ee1:	50                   	push   eax
c0011ee2:	e8 76 f2 ff ff       	call   c001115d <KePanic(char const*)>
c0011ee7:	b8 01 00 00 00       	mov    eax,0x1
c0011eec:	31 d2                	xor    edx,edx
c0011eee:	83 c4 1c             	add    esp,0x1c
c0011ef1:	c3                   	ret    

c0011ef2 <SysRmdir(regs*)>:
c0011ef2:	56                   	push   esi
c0011ef3:	53                   	push   ebx
c0011ef4:	83 ec 10             	sub    esp,0x10
c0011ef7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011efb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011efe:	68 14 01 00 00       	push   0x114
c0011f03:	e8 cb 5b ff ff       	call   c0007ad3 <malloc>
c0011f08:	83 c4 0c             	add    esp,0xc
c0011f0b:	89 c3                	mov    ebx,eax
c0011f0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f12:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f15:	50                   	push   eax
c0011f16:	56                   	push   esi
c0011f17:	53                   	push   ebx
c0011f18:	e8 b9 97 ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c0011f1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f20:	e8 3b 9a ff ff       	call   c000b960 <File::unlink()>
c0011f25:	83 c4 10             	add    esp,0x10
c0011f28:	85 db                	test   ebx,ebx
c0011f2a:	89 c6                	mov    esi,eax
c0011f2c:	74 0c                	je     c0011f3a <SysRmdir(regs*)+0x48>
c0011f2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f30:	83 ec 0c             	sub    esp,0xc
c0011f33:	53                   	push   ebx
c0011f34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f37:	83 c4 10             	add    esp,0x10
c0011f3a:	31 c0                	xor    eax,eax
c0011f3c:	85 f6                	test   esi,esi
c0011f3e:	0f 95 c0             	setne  al
c0011f41:	31 d2                	xor    edx,edx
c0011f43:	f7 d8                	neg    eax
c0011f45:	83 d2 00             	adc    edx,0x0
c0011f48:	83 c4 04             	add    esp,0x4
c0011f4b:	5b                   	pop    ebx
c0011f4c:	f7 da                	neg    edx
c0011f4e:	5e                   	pop    esi
c0011f4f:	c3                   	ret    

c0011f50 <SysUnlink(regs*)>:
c0011f50:	56                   	push   esi
c0011f51:	53                   	push   ebx
c0011f52:	83 ec 10             	sub    esp,0x10
c0011f55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f59:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011f5c:	68 14 01 00 00       	push   0x114
c0011f61:	e8 6d 5b ff ff       	call   c0007ad3 <malloc>
c0011f66:	83 c4 0c             	add    esp,0xc
c0011f69:	89 c3                	mov    ebx,eax
c0011f6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f73:	50                   	push   eax
c0011f74:	56                   	push   esi
c0011f75:	53                   	push   ebx
c0011f76:	e8 5b 97 ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c0011f7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f7e:	e8 dd 99 ff ff       	call   c000b960 <File::unlink()>
c0011f83:	83 c4 10             	add    esp,0x10
c0011f86:	85 db                	test   ebx,ebx
c0011f88:	89 c6                	mov    esi,eax
c0011f8a:	74 0c                	je     c0011f98 <SysUnlink(regs*)+0x48>
c0011f8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f8e:	83 ec 0c             	sub    esp,0xc
c0011f91:	53                   	push   ebx
c0011f92:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f95:	83 c4 10             	add    esp,0x10
c0011f98:	31 c0                	xor    eax,eax
c0011f9a:	85 f6                	test   esi,esi
c0011f9c:	0f 95 c0             	setne  al
c0011f9f:	31 d2                	xor    edx,edx
c0011fa1:	f7 d8                	neg    eax
c0011fa3:	83 d2 00             	adc    edx,0x0
c0011fa6:	83 c4 04             	add    esp,0x4
c0011fa9:	5b                   	pop    ebx
c0011faa:	f7 da                	neg    edx
c0011fac:	5e                   	pop    esi
c0011fad:	c3                   	ret    

c0011fae <SysGetArgv(regs*)>:
c0011fae:	83 ec 0c             	sub    esp,0xc
c0011fb1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011fb5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011fb8:	85 c0                	test   eax,eax
c0011fba:	78 2c                	js     c0011fe8 <SysGetArgv(regs*)+0x3a>
c0011fbc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011fc2:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011fc5:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011fcb:	7d 1b                	jge    c0011fe8 <SysGetArgv(regs*)+0x3a>
c0011fcd:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011fd4:	85 c0                	test   eax,eax
c0011fd6:	74 18                	je     c0011ff0 <SysGetArgv(regs*)+0x42>
c0011fd8:	83 ec 08             	sub    esp,0x8
c0011fdb:	50                   	push   eax
c0011fdc:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011fdf:	50                   	push   eax
c0011fe0:	e8 6b e6 fe ff       	call   c0000650 <strcpy>
c0011fe5:	83 c4 10             	add    esp,0x10
c0011fe8:	31 c0                	xor    eax,eax
c0011fea:	31 d2                	xor    edx,edx
c0011fec:	83 c4 0c             	add    esp,0xc
c0011fef:	c3                   	ret    
c0011ff0:	b8 01 00 00 00       	mov    eax,0x1
c0011ff5:	31 d2                	xor    edx,edx
c0011ff7:	83 c4 0c             	add    esp,0xc
c0011ffa:	c3                   	ret    

c0011ffb <SysUSleep(regs*)>:
c0011ffb:	83 ec 1c             	sub    esp,0x1c
c0011ffe:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012002:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012005:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012008:	6a 00                	push   0x0
c001200a:	6a 64                	push   0x64
c001200c:	52                   	push   edx
c001200d:	50                   	push   eax
c001200e:	e8 0d d1 00 00       	call   c001f120 <__udivdi3>
c0012013:	83 c4 14             	add    esp,0x14
c0012016:	50                   	push   eax
c0012017:	e8 60 3d 00 00       	call   c0015d7c <milliTenthSleep(unsigned int)>
c001201c:	31 c0                	xor    eax,eax
c001201e:	31 d2                	xor    edx,edx
c0012020:	83 c4 1c             	add    esp,0x1c
c0012023:	c3                   	ret    

c0012024 <SysSpawn(regs*)>:
c0012024:	56                   	push   esi
c0012025:	53                   	push   ebx
c0012026:	83 ec 04             	sub    esp,0x4
c0012029:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001202d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012030:	85 f6                	test   esi,esi
c0012032:	75 0a                	jne    c001203e <SysSpawn(regs*)+0x1a>
c0012034:	83 c4 04             	add    esp,0x4
c0012037:	31 c0                	xor    eax,eax
c0012039:	5b                   	pop    ebx
c001203a:	31 d2                	xor    edx,edx
c001203c:	5e                   	pop    esi
c001203d:	c3                   	ret    
c001203e:	83 ec 0c             	sub    esp,0xc
c0012041:	68 24 07 00 00       	push   0x724
c0012046:	e8 88 5a ff ff       	call   c0007ad3 <malloc>
c001204b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001204e:	83 c4 10             	add    esp,0x10
c0012051:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012054:	89 c6                	mov    esi,eax
c0012056:	31 c0                	xor    eax,eax
c0012058:	85 c9                	test   ecx,ecx
c001205a:	75 08                	jne    c0012064 <SysSpawn(regs*)+0x40>
c001205c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012061:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012064:	52                   	push   edx
c0012065:	50                   	push   eax
c0012066:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012069:	50                   	push   eax
c001206a:	56                   	push   esi
c001206b:	e8 74 33 00 00       	call   c00153e4 <Process::Process(char const*, Process*, char**)>
c0012070:	83 c4 10             	add    esp,0x10
c0012073:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001207a:	75 b8                	jne    c0012034 <SysSpawn(regs*)+0x10>
c001207c:	83 ec 0c             	sub    esp,0xc
c001207f:	56                   	push   esi
c0012080:	e8 97 38 00 00       	call   c001591c <Process::createUserThread()>
c0012085:	8b 06                	mov    eax,DWORD PTR [esi]
c0012087:	83 c4 10             	add    esp,0x10
c001208a:	83 c4 04             	add    esp,0x4
c001208d:	5b                   	pop    ebx
c001208e:	89 c2                	mov    edx,eax
c0012090:	c1 fa 1f             	sar    edx,0x1f
c0012093:	5e                   	pop    esi
c0012094:	c3                   	ret    

c0012095 <SysGetEnv(regs*)>:
c0012095:	57                   	push   edi
c0012096:	56                   	push   esi
c0012097:	53                   	push   ebx
c0012098:	83 ec 1c             	sub    esp,0x1c
c001209b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120a0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00120a4:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00120a7:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00120aa:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00120ad:	51                   	push   ecx
c00120ae:	e8 62 ef ff ff       	call   c0011015 <KeGetProcessTotalEnvCount(Process*)>
c00120b3:	83 c4 10             	add    esp,0x10
c00120b6:	39 c7                	cmp    edi,eax
c00120b8:	7c 12                	jl     c00120cc <SysGetEnv(regs*)+0x37>
c00120ba:	31 c0                	xor    eax,eax
c00120bc:	31 d2                	xor    edx,edx
c00120be:	85 f6                	test   esi,esi
c00120c0:	74 03                	je     c00120c5 <SysGetEnv(regs*)+0x30>
c00120c2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00120c5:	83 c4 10             	add    esp,0x10
c00120c8:	5b                   	pop    ebx
c00120c9:	5e                   	pop    esi
c00120ca:	5f                   	pop    edi
c00120cb:	c3                   	ret    
c00120cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00120d0:	83 ec 04             	sub    esp,0x4
c00120d3:	57                   	push   edi
c00120d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00120da:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00120dd:	57                   	push   edi
c00120de:	50                   	push   eax
c00120df:	e8 51 ef ff ff       	call   c0011035 <KeGetProcessEnvPair(Process*, int)>
c00120e4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00120ef:	83 c4 0c             	add    esp,0xc
c00120f2:	85 d2                	test   edx,edx
c00120f4:	75 23                	jne    c0012119 <SysGetEnv(regs*)+0x84>
c00120f6:	83 ec 0c             	sub    esp,0xc
c00120f9:	50                   	push   eax
c00120fa:	e8 81 e4 fe ff       	call   c0000580 <strlen>
c00120ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012102:	89 c3                	mov    ebx,eax
c0012104:	e8 77 e4 fe ff       	call   c0000580 <strlen>
c0012109:	83 c4 10             	add    esp,0x10
c001210c:	31 d2                	xor    edx,edx
c001210e:	83 c4 10             	add    esp,0x10
c0012111:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012115:	5b                   	pop    ebx
c0012116:	5e                   	pop    esi
c0012117:	5f                   	pop    edi
c0012118:	c3                   	ret    
c0012119:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001211c:	83 ec 08             	sub    esp,0x8
c001211f:	50                   	push   eax
c0012120:	56                   	push   esi
c0012121:	e8 2a e5 fe ff       	call   c0000650 <strcpy>
c0012126:	58                   	pop    eax
c0012127:	5a                   	pop    edx
c0012128:	68 95 1d 02 c0       	push   0xc0021d95
c001212d:	56                   	push   esi
c001212e:	e8 3d e7 fe ff       	call   c0000870 <strcat>
c0012133:	59                   	pop    ecx
c0012134:	5b                   	pop    ebx
c0012135:	57                   	push   edi
c0012136:	56                   	push   esi
c0012137:	e8 34 e7 fe ff       	call   c0000870 <strcat>
c001213c:	83 c4 10             	add    esp,0x10
c001213f:	31 c0                	xor    eax,eax
c0012141:	83 c4 10             	add    esp,0x10
c0012144:	31 d2                	xor    edx,edx
c0012146:	5b                   	pop    ebx
c0012147:	5e                   	pop    esi
c0012148:	5f                   	pop    edi
c0012149:	c3                   	ret    

c001214a <SysSetFatAttrib(regs*)>:
c001214a:	57                   	push   edi
c001214b:	56                   	push   esi
c001214c:	53                   	push   ebx
c001214d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012151:	83 ec 0c             	sub    esp,0xc
c0012154:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012157:	68 14 01 00 00       	push   0x114
c001215c:	e8 72 59 ff ff       	call   c0007ad3 <malloc>
c0012161:	83 c4 0c             	add    esp,0xc
c0012164:	89 c3                	mov    ebx,eax
c0012166:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001216b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001216e:	50                   	push   eax
c001216f:	57                   	push   edi
c0012170:	53                   	push   ebx
c0012171:	e8 60 95 ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c0012176:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012179:	83 c4 0c             	add    esp,0xc
c001217c:	0f b6 d4             	movzx  edx,ah
c001217f:	0f b6 c0             	movzx  eax,al
c0012182:	52                   	push   edx
c0012183:	50                   	push   eax
c0012184:	53                   	push   ebx
c0012185:	e8 70 98 ff ff       	call   c000b9fa <File::chfatattr(unsigned char, unsigned char)>
c001218a:	83 c4 10             	add    esp,0x10
c001218d:	85 db                	test   ebx,ebx
c001218f:	89 c6                	mov    esi,eax
c0012191:	74 0c                	je     c001219f <SysSetFatAttrib(regs*)+0x55>
c0012193:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012195:	83 ec 0c             	sub    esp,0xc
c0012198:	53                   	push   ebx
c0012199:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001219c:	83 c4 10             	add    esp,0x10
c001219f:	5b                   	pop    ebx
c00121a0:	31 c0                	xor    eax,eax
c00121a2:	85 f6                	test   esi,esi
c00121a4:	0f 95 c0             	setne  al
c00121a7:	31 d2                	xor    edx,edx
c00121a9:	5e                   	pop    esi
c00121aa:	f7 d8                	neg    eax
c00121ac:	83 d2 00             	adc    edx,0x0
c00121af:	f7 da                	neg    edx
c00121b1:	5f                   	pop    edi
c00121b2:	c3                   	ret    

c00121b3 <SysPipe(regs*)>:
c00121b3:	57                   	push   edi
c00121b4:	56                   	push   esi
c00121b5:	53                   	push   ebx
c00121b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121ba:	83 ec 0c             	sub    esp,0xc
c00121bd:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00121c0:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00121c3:	6a 20                	push   0x20
c00121c5:	e8 09 59 ff ff       	call   c0007ad3 <malloc>
c00121ca:	89 c3                	mov    ebx,eax
c00121cc:	58                   	pop    eax
c00121cd:	5a                   	pop    edx
c00121ce:	68 00 50 00 00       	push   0x5000
c00121d3:	53                   	push   ebx
c00121d4:	e8 65 62 ff ff       	call   c000843e <Pipe::Pipe(int)>
c00121d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121dc:	e8 bd 6f ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00121e1:	89 07                	mov    DWORD PTR [edi],eax
c00121e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121e6:	e8 b3 6f ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00121eb:	83 c4 10             	add    esp,0x10
c00121ee:	31 d2                	xor    edx,edx
c00121f0:	89 06                	mov    DWORD PTR [esi],eax
c00121f2:	31 c0                	xor    eax,eax
c00121f4:	5b                   	pop    ebx
c00121f5:	5e                   	pop    esi
c00121f6:	5f                   	pop    edi
c00121f7:	c3                   	ret    

c00121f8 <SysGetUnixTime(regs*)>:
c00121f8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00121fd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012203:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012207:	e9 26 9f ff ff       	jmp    c000c132 <Clock::timeInSecondsLocal()>

c001220c <string_ends_with(char const*, char const*)>:
c001220c:	57                   	push   edi
c001220d:	56                   	push   esi
c001220e:	53                   	push   ebx
c001220f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012213:	83 ec 0c             	sub    esp,0xc
c0012216:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001221a:	53                   	push   ebx
c001221b:	e8 60 e3 fe ff       	call   c0000580 <strlen>
c0012220:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012223:	89 c6                	mov    esi,eax
c0012225:	e8 56 e3 fe ff       	call   c0000580 <strlen>
c001222a:	83 c4 10             	add    esp,0x10
c001222d:	31 d2                	xor    edx,edx
c001222f:	39 c6                	cmp    esi,eax
c0012231:	7d 06                	jge    c0012239 <string_ends_with(char const*, char const*)+0x2d>
c0012233:	5b                   	pop    ebx
c0012234:	89 d0                	mov    eax,edx
c0012236:	5e                   	pop    esi
c0012237:	5f                   	pop    edi
c0012238:	c3                   	ret    
c0012239:	83 ec 08             	sub    esp,0x8
c001223c:	29 c6                	sub    esi,eax
c001223e:	57                   	push   edi
c001223f:	01 f3                	add    ebx,esi
c0012241:	53                   	push   ebx
c0012242:	e8 39 e5 fe ff       	call   c0000780 <strcmp>
c0012247:	83 c4 10             	add    esp,0x10
c001224a:	31 d2                	xor    edx,edx
c001224c:	5b                   	pop    ebx
c001224d:	5e                   	pop    esi
c001224e:	85 c0                	test   eax,eax
c0012250:	5f                   	pop    edi
c0012251:	0f 94 c2             	sete   dl
c0012254:	89 d0                	mov    eax,edx
c0012256:	c3                   	ret    

c0012257 <SysOpen(regs*)>:
c0012257:	56                   	push   esi
c0012258:	53                   	push   ebx
c0012259:	81 ec 04 01 00 00    	sub    esp,0x104
c001225f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012266:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012269:	85 c0                	test   eax,eax
c001226b:	0f 84 c5 01 00 00    	je     c0012436 <SysOpen(regs*)+0x1df>
c0012271:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012274:	85 c0                	test   eax,eax
c0012276:	0f 84 ba 01 00 00    	je     c0012436 <SysOpen(regs*)+0x1df>
c001227c:	83 ec 04             	sub    esp,0x4
c001227f:	68 97 1d 02 c0       	push   0xc0021d97
c0012284:	50                   	push   eax
c0012285:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012289:	56                   	push   esi
c001228a:	e8 6b 92 ff ff       	call   c000b4fa <Fs::standardiseFiles(char*, char const*, char const*)>
c001228f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012292:	e8 e9 e2 fe ff       	call   c0000580 <strlen>
c0012297:	83 c4 10             	add    esp,0x10
c001229a:	83 e8 01             	sub    eax,0x1
c001229d:	74 29                	je     c00122c8 <SysOpen(regs*)+0x71>
c001229f:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00122a3:	83 fa 2e             	cmp    edx,0x2e
c00122a6:	74 1c                	je     c00122c4 <SysOpen(regs*)+0x6d>
c00122a8:	83 fa 3a             	cmp    edx,0x3a
c00122ab:	74 17                	je     c00122c4 <SysOpen(regs*)+0x6d>
c00122ad:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00122b1:	83 e8 01             	sub    eax,0x1
c00122b4:	74 12                	je     c00122c8 <SysOpen(regs*)+0x71>
c00122b6:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00122ba:	83 fa 3a             	cmp    edx,0x3a
c00122bd:	74 05                	je     c00122c4 <SysOpen(regs*)+0x6d>
c00122bf:	83 fa 2e             	cmp    edx,0x2e
c00122c2:	75 e9                	jne    c00122ad <SysOpen(regs*)+0x56>
c00122c4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00122c8:	83 ec 08             	sub    esp,0x8
c00122cb:	68 9b 1d 02 c0       	push   0xc0021d9b
c00122d0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00122d3:	50                   	push   eax
c00122d4:	e8 33 ff ff ff       	call   c001220c <string_ends_with(char const*, char const*)>
c00122d9:	83 c4 10             	add    esp,0x10
c00122dc:	85 c0                	test   eax,eax
c00122de:	74 1d                	je     c00122fd <SysOpen(regs*)+0xa6>
c00122e0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122e3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00122e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00122f0:	81 c4 04 01 00 00    	add    esp,0x104
c00122f6:	31 c0                	xor    eax,eax
c00122f8:	5b                   	pop    ebx
c00122f9:	31 d2                	xor    edx,edx
c00122fb:	5e                   	pop    esi
c00122fc:	c3                   	ret    
c00122fd:	83 ec 08             	sub    esp,0x8
c0012300:	68 a0 1d 02 c0       	push   0xc0021da0
c0012305:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012308:	50                   	push   eax
c0012309:	e8 fe fe ff ff       	call   c001220c <string_ends_with(char const*, char const*)>
c001230e:	83 c4 10             	add    esp,0x10
c0012311:	85 c0                	test   eax,eax
c0012313:	75 cb                	jne    c00122e0 <SysOpen(regs*)+0x89>
c0012315:	83 ec 08             	sub    esp,0x8
c0012318:	68 9c 1d 02 c0       	push   0xc0021d9c
c001231d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012320:	50                   	push   eax
c0012321:	e8 5a e4 fe ff       	call   c0000780 <strcmp>
c0012326:	83 c4 10             	add    esp,0x10
c0012329:	85 c0                	test   eax,eax
c001232b:	74 b3                	je     c00122e0 <SysOpen(regs*)+0x89>
c001232d:	83 ec 08             	sub    esp,0x8
c0012330:	68 9b 1d 02 c0       	push   0xc0021d9b
c0012335:	56                   	push   esi
c0012336:	e8 d1 fe ff ff       	call   c001220c <string_ends_with(char const*, char const*)>
c001233b:	83 c4 10             	add    esp,0x10
c001233e:	85 c0                	test   eax,eax
c0012340:	75 9e                	jne    c00122e0 <SysOpen(regs*)+0x89>
c0012342:	83 ec 08             	sub    esp,0x8
c0012345:	68 a5 1d 02 c0       	push   0xc0021da5
c001234a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001234d:	50                   	push   eax
c001234e:	e8 b9 fe ff ff       	call   c001220c <string_ends_with(char const*, char const*)>
c0012353:	83 c4 10             	add    esp,0x10
c0012356:	85 c0                	test   eax,eax
c0012358:	0f 85 eb 00 00 00    	jne    c0012449 <SysOpen(regs*)+0x1f2>
c001235e:	83 ec 08             	sub    esp,0x8
c0012361:	68 aa 1d 02 c0       	push   0xc0021daa
c0012366:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012369:	50                   	push   eax
c001236a:	e8 9d fe ff ff       	call   c001220c <string_ends_with(char const*, char const*)>
c001236f:	83 c4 10             	add    esp,0x10
c0012372:	85 c0                	test   eax,eax
c0012374:	0f 85 cf 00 00 00    	jne    c0012449 <SysOpen(regs*)+0x1f2>
c001237a:	83 ec 08             	sub    esp,0x8
c001237d:	68 a6 1d 02 c0       	push   0xc0021da6
c0012382:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012385:	51                   	push   ecx
c0012386:	e8 f5 e3 fe ff       	call   c0000780 <strcmp>
c001238b:	83 c4 10             	add    esp,0x10
c001238e:	85 c0                	test   eax,eax
c0012390:	0f 84 b3 00 00 00    	je     c0012449 <SysOpen(regs*)+0x1f2>
c0012396:	83 ec 08             	sub    esp,0x8
c0012399:	68 a5 1d 02 c0       	push   0xc0021da5
c001239e:	56                   	push   esi
c001239f:	e8 68 fe ff ff       	call   c001220c <string_ends_with(char const*, char const*)>
c00123a4:	83 c4 10             	add    esp,0x10
c00123a7:	85 c0                	test   eax,eax
c00123a9:	0f 85 9a 00 00 00    	jne    c0012449 <SysOpen(regs*)+0x1f2>
c00123af:	83 ec 0c             	sub    esp,0xc
c00123b2:	68 14 01 00 00       	push   0x114
c00123b7:	e8 17 57 ff ff       	call   c0007ad3 <malloc>
c00123bc:	83 c4 0c             	add    esp,0xc
c00123bf:	89 c6                	mov    esi,eax
c00123c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123c9:	50                   	push   eax
c00123ca:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123cd:	52                   	push   edx
c00123ce:	56                   	push   esi
c00123cf:	e8 02 93 ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c00123d4:	83 c4 10             	add    esp,0x10
c00123d7:	85 f6                	test   esi,esi
c00123d9:	74 5b                	je     c0012436 <SysOpen(regs*)+0x1df>
c00123db:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00123de:	0f b6 c2             	movzx  eax,dl
c00123e1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00123e4:	89 d0                	mov    eax,edx
c00123e6:	83 e0 01             	and    eax,0x1
c00123e9:	f6 c2 02             	test   dl,0x2
c00123ec:	74 03                	je     c00123f1 <SysOpen(regs*)+0x19a>
c00123ee:	83 c8 02             	or     eax,0x2
c00123f1:	f6 c2 04             	test   dl,0x4
c00123f4:	74 03                	je     c00123f9 <SysOpen(regs*)+0x1a2>
c00123f6:	83 c8 04             	or     eax,0x4
c00123f9:	f6 c2 08             	test   dl,0x8
c00123fc:	74 03                	je     c0012401 <SysOpen(regs*)+0x1aa>
c00123fe:	83 c8 0a             	or     eax,0xa
c0012401:	80 e2 10             	and    dl,0x10
c0012404:	74 03                	je     c0012409 <SysOpen(regs*)+0x1b2>
c0012406:	83 c8 12             	or     eax,0x12
c0012409:	83 ec 08             	sub    esp,0x8
c001240c:	50                   	push   eax
c001240d:	56                   	push   esi
c001240e:	e8 7f 93 ff ff       	call   c000b792 <File::open(FileOpenMode)>
c0012413:	83 c4 10             	add    esp,0x10
c0012416:	85 c0                	test   eax,eax
c0012418:	75 1c                	jne    c0012436 <SysOpen(regs*)+0x1df>
c001241a:	83 ec 0c             	sub    esp,0xc
c001241d:	56                   	push   esi
c001241e:	e8 7b 6d ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012423:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012426:	83 c4 10             	add    esp,0x10
c0012429:	89 02                	mov    DWORD PTR [edx],eax
c001242b:	c1 f8 1f             	sar    eax,0x1f
c001242e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012431:	e9 ba fe ff ff       	jmp    c00122f0 <SysOpen(regs*)+0x99>
c0012436:	81 c4 04 01 00 00    	add    esp,0x104
c001243c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012441:	5b                   	pop    ebx
c0012442:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012447:	5e                   	pop    esi
c0012448:	c3                   	ret    
c0012449:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001244c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012452:	e9 92 fe ff ff       	jmp    c00122e9 <SysOpen(regs*)+0x92>

c0012457 <KeSystemCall(regs*, void*)>:
c0012457:	53                   	push   ebx
c0012458:	83 ec 08             	sub    esp,0x8
c001245b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001245f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012462:	83 f8 3b             	cmp    eax,0x3b
c0012465:	77 16                	ja     c001247d <KeSystemCall(regs*, void*)+0x26>
c0012467:	8b 14 85 c0 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce40]
c001246e:	85 d2                	test   edx,edx
c0012470:	74 0b                	je     c001247d <KeSystemCall(regs*, void*)+0x26>
c0012472:	83 ec 0c             	sub    esp,0xc
c0012475:	53                   	push   ebx
c0012476:	ff d2                	call   edx
c0012478:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001247b:	eb 0d                	jmp    c001248a <KeSystemCall(regs*, void*)+0x33>
c001247d:	52                   	push   edx
c001247e:	52                   	push   edx
c001247f:	50                   	push   eax
c0012480:	68 af 1d 02 c0       	push   0xc0021daf
c0012485:	e8 80 84 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001248a:	83 c4 10             	add    esp,0x10
c001248d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012492:	83 c4 08             	add    esp,0x8
c0012495:	31 d2                	xor    edx,edx
c0012497:	5b                   	pop    ebx
c0012498:	c3                   	ret    
c0012499:	66 90                	xchg   ax,ax
c001249b:	90                   	nop

c001249c <KeSwitchEndian16(unsigned short)>:
c001249c:	83 ec 04             	sub    esp,0x4
c001249f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00124a3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00124a7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00124ab:	c1 f8 08             	sar    eax,0x8
c00124ae:	89 c2                	mov    edx,eax
c00124b0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00124b4:	c1 e0 08             	shl    eax,0x8
c00124b7:	09 d0                	or     eax,edx
c00124b9:	83 c4 04             	add    esp,0x4
c00124bc:	c3                   	ret    
c00124bd:	8d 76 00             	lea    esi,[esi+0x0]

c00124c0 <KeSwitchEndian32(unsigned int)>:
c00124c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124c4:	c1 e8 18             	shr    eax,0x18
c00124c7:	89 c2                	mov    edx,eax
c00124c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124cd:	c1 e0 08             	shl    eax,0x8
c00124d0:	25 00 00 ff 00       	and    eax,0xff0000
c00124d5:	09 c2                	or     edx,eax
c00124d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124db:	c1 e8 08             	shr    eax,0x8
c00124de:	25 00 ff 00 00       	and    eax,0xff00
c00124e3:	09 c2                	or     edx,eax
c00124e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124e9:	c1 e0 18             	shl    eax,0x18
c00124ec:	09 d0                	or     eax,edx
c00124ee:	c3                   	ret    
c00124ef:	90                   	nop

c00124f0 <EthernetCRC32(unsigned char*, int)>:
c00124f0:	83 ec 10             	sub    esp,0x10
c00124f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00124f8:	75 0a                	jne    c0012504 <EthernetCRC32(unsigned char*, int)+0x14>
c00124fa:	b8 00 00 00 00       	mov    eax,0x0
c00124ff:	e9 8c 00 00 00       	jmp    c0012590 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012504:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012509:	7f 09                	jg     c0012514 <EthernetCRC32(unsigned char*, int)+0x24>
c001250b:	b8 00 00 00 00       	mov    eax,0x0
c0012510:	eb 7e                	jmp    c0012590 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012512:	66 90                	xchg   ax,ax
c0012514:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001251c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012528:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001252c:	7d 5a                	jge    c0012588 <EthernetCRC32(unsigned char*, int)+0x98>
c001252e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012532:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012536:	01 d0                	add    eax,edx
c0012538:	8a 00                	mov    al,BYTE PTR [eax]
c001253a:	0f b6 c0             	movzx  eax,al
c001253d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012541:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012549:	8d 76 00             	lea    esi,[esi+0x0]
c001254c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012551:	7f 2d                	jg     c0012580 <EthernetCRC32(unsigned char*, int)+0x90>
c0012553:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012557:	83 e0 01             	and    eax,0x1
c001255a:	74 10                	je     c001256c <EthernetCRC32(unsigned char*, int)+0x7c>
c001255c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012560:	d1 e8                	shr    eax,1
c0012562:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012567:	eb 0b                	jmp    c0012574 <EthernetCRC32(unsigned char*, int)+0x84>
c0012569:	8d 76 00             	lea    esi,[esi+0x0]
c001256c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012570:	d1 e8                	shr    eax,1
c0012572:	66 90                	xchg   ax,ax
c0012574:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012578:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001257d:	eb cd                	jmp    c001254c <EthernetCRC32(unsigned char*, int)+0x5c>
c001257f:	90                   	nop
c0012580:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012585:	eb 9d                	jmp    c0012524 <EthernetCRC32(unsigned char*, int)+0x34>
c0012587:	90                   	nop
c0012588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001258c:	f7 d0                	not    eax
c001258e:	66 90                	xchg   ax,ax
c0012590:	83 c4 10             	add    esp,0x10
c0012593:	c3                   	ret    

c0012594 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012594:	83 ec 2c             	sub    esp,0x2c
c0012597:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001259b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00125a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00125af:	0f b7 c0             	movzx  eax,ax
c00125b2:	3d 06 08 00 00       	cmp    eax,0x806
c00125b7:	75 13                	jne    c00125cc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c00125b9:	83 ec 0c             	sub    esp,0xc
c00125bc:	68 c3 1d 02 c0       	push   0xc0021dc3
c00125c1:	e8 44 83 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00125c6:	83 c4 10             	add    esp,0x10
c00125c9:	eb 25                	jmp    c00125f0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00125cb:	90                   	nop
c00125cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00125d3:	0f b7 c0             	movzx  eax,ax
c00125d6:	3d 00 08 00 00       	cmp    eax,0x800
c00125db:	75 13                	jne    c00125f0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00125dd:	83 ec 0c             	sub    esp,0xc
c00125e0:	68 d9 1d 02 c0       	push   0xc0021dd9
c00125e5:	e8 20 83 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00125ea:	83 c4 10             	add    esp,0x10
c00125ed:	8d 76 00             	lea    esi,[esi+0x0]
c00125f0:	90                   	nop
c00125f1:	83 c4 2c             	add    esp,0x2c
c00125f4:	c3                   	ret    

c00125f5 <CmOpen(char const*)>:
c00125f5:	57                   	push   edi
c00125f6:	56                   	push   esi
c00125f7:	53                   	push   ebx
c00125f8:	83 ec 1c             	sub    esp,0x1c
c00125fb:	6a 30                	push   0x30
c00125fd:	e8 d1 54 ff ff       	call   c0007ad3 <malloc>
c0012602:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012609:	89 c3                	mov    ebx,eax
c001260b:	e8 c3 54 ff ff       	call   c0007ad3 <malloc>
c0012610:	83 c4 0c             	add    esp,0xc
c0012613:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0012619:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001261d:	89 c6                	mov    esi,eax
c001261f:	50                   	push   eax
c0012620:	e8 b1 90 ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c0012625:	83 c4 0c             	add    esp,0xc
c0012628:	89 33                	mov    DWORD PTR [ebx],esi
c001262a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001262e:	50                   	push   eax
c001262f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012633:	50                   	push   eax
c0012634:	56                   	push   esi
c0012635:	e8 5a 94 ff ff       	call   c000ba94 <File::stat(unsigned long long*, bool*)>
c001263a:	5a                   	pop    edx
c001263b:	59                   	pop    ecx
c001263c:	6a 01                	push   0x1
c001263e:	ff 33                	push   DWORD PTR [ebx]
c0012640:	e8 4d 91 ff ff       	call   c000b792 <File::open(FileOpenMode)>
c0012645:	5e                   	pop    esi
c0012646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001264a:	e8 84 54 ff ff       	call   c0007ad3 <malloc>
c001264f:	5a                   	pop    edx
c0012650:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012654:	89 c7                	mov    edi,eax
c0012656:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012658:	8b 10                	mov    edx,DWORD PTR [eax]
c001265a:	56                   	push   esi
c001265b:	57                   	push   edi
c001265c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012660:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012664:	50                   	push   eax
c0012665:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012668:	83 c4 14             	add    esp,0x14
c001266b:	ff 33                	push   DWORD PTR [ebx]
c001266d:	e8 7e 91 ff ff       	call   c000b7f0 <File::close()>
c0012672:	59                   	pop    ecx
c0012673:	58                   	pop    eax
c0012674:	6a 13                	push   0x13
c0012676:	ff 33                	push   DWORD PTR [ebx]
c0012678:	e8 15 91 ff ff       	call   c000b792 <File::open(FileOpenMode)>
c001267d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001267f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012681:	89 34 24             	mov    DWORD PTR [esp],esi
c0012684:	57                   	push   edi
c0012685:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012689:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001268d:	50                   	push   eax
c001268e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012691:	83 c4 14             	add    esp,0x14
c0012694:	57                   	push   edi
c0012695:	e8 49 54 ff ff       	call   c0007ae3 <free>
c001269a:	83 c4 10             	add    esp,0x10
c001269d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00126a0:	75 10                	jne    c00126b2 <CmOpen(char const*)+0xbd>
c00126a2:	83 ec 0c             	sub    esp,0xc
c00126a5:	68 ee 1d 02 c0       	push   0xc0021dee
c00126aa:	e8 ae ea ff ff       	call   c001115d <KePanic(char const*)>
c00126af:	83 c4 10             	add    esp,0x10
c00126b2:	50                   	push   eax
c00126b3:	6a 00                	push   0x0
c00126b5:	6a 00                	push   0x0
c00126b7:	ff 33                	push   DWORD PTR [ebx]
c00126b9:	8d 7b 05             	lea    edi,[ebx+0x5]
c00126bc:	e8 8f 91 ff ff       	call   c000b850 <File::seek(unsigned long long)>
c00126c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00126c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00126c8:	57                   	push   edi
c00126c9:	6a 00                	push   0x0
c00126cb:	6a 2b                	push   0x2b
c00126cd:	50                   	push   eax
c00126ce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00126d1:	83 c4 1c             	add    esp,0x1c
c00126d4:	6a 00                	push   0x0
c00126d6:	6a 00                	push   0x0
c00126d8:	ff 33                	push   DWORD PTR [ebx]
c00126da:	e8 71 91 ff ff       	call   c000b850 <File::seek(unsigned long long)>
c00126df:	83 c4 0c             	add    esp,0xc
c00126e2:	6a 08                	push   0x8
c00126e4:	68 ff 1d 02 c0       	push   0xc0021dff
c00126e9:	57                   	push   edi
c00126ea:	e8 91 dc fe ff       	call   c0000380 <memcmp>
c00126ef:	83 c4 10             	add    esp,0x10
c00126f2:	85 c0                	test   eax,eax
c00126f4:	74 10                	je     c0012706 <CmOpen(char const*)+0x111>
c00126f6:	83 ec 0c             	sub    esp,0xc
c00126f9:	68 08 1e 02 c0       	push   0xc0021e08
c00126fe:	e8 5a ea ff ff       	call   c001115d <KePanic(char const*)>
c0012703:	83 c4 10             	add    esp,0x10
c0012706:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c001270a:	83 c4 10             	add    esp,0x10
c001270d:	89 d8                	mov    eax,ebx
c001270f:	5b                   	pop    ebx
c0012710:	5e                   	pop    esi
c0012711:	5f                   	pop    edi
c0012712:	c3                   	ret    

c0012713 <CmClose(Reghive_Tag*)>:
c0012713:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012717:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001271b:	74 0b                	je     c0012728 <CmClose(Reghive_Tag*)+0x15>
c001271d:	8b 00                	mov    eax,DWORD PTR [eax]
c001271f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012723:	e9 c8 90 ff ff       	jmp    c000b7f0 <File::close()>
c0012728:	c3                   	ret    

c0012729 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012729:	53                   	push   ebx
c001272a:	83 ec 18             	sub    esp,0x18
c001272d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012731:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012735:	74 29                	je     c0012760 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012737:	50                   	push   eax
c0012738:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c001273d:	99                   	cdq    
c001273e:	52                   	push   edx
c001273f:	50                   	push   eax
c0012740:	ff 33                	push   DWORD PTR [ebx]
c0012742:	e8 09 91 ff ff       	call   c000b850 <File::seek(unsigned long long)>
c0012747:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012749:	5a                   	pop    edx
c001274a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001274e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012750:	51                   	push   ecx
c0012751:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012755:	6a 00                	push   0x0
c0012757:	6a 2b                	push   0x2b
c0012759:	50                   	push   eax
c001275a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001275d:	83 c4 20             	add    esp,0x20
c0012760:	83 c4 18             	add    esp,0x18
c0012763:	5b                   	pop    ebx
c0012764:	c3                   	ret    

c0012765 <CmGetString(Reghive_Tag*, int, char*)>:
c0012765:	55                   	push   ebp
c0012766:	57                   	push   edi
c0012767:	56                   	push   esi
c0012768:	53                   	push   ebx
c0012769:	31 db                	xor    ebx,ebx
c001276b:	83 ec 70             	sub    esp,0x70
c001276e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012772:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012779:	50                   	push   eax
c001277a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012781:	55                   	push   ebp
c0012782:	e8 a2 ff ff ff       	call   c0012729 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012787:	83 c4 10             	add    esp,0x10
c001278a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001278f:	c1 e0 08             	shl    eax,0x8
c0012792:	89 c2                	mov    edx,eax
c0012794:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012799:	09 d0                	or     eax,edx
c001279b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00127a0:	c1 e0 08             	shl    eax,0x8
c00127a3:	09 d0                	or     eax,edx
c00127a5:	74 25                	je     c00127cc <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00127a7:	52                   	push   edx
c00127a8:	8d 54 24 39          	lea    edx,[esp+0x39]
c00127ac:	52                   	push   edx
c00127ad:	6b fb 0d             	imul   edi,ebx,0xd
c00127b0:	50                   	push   eax
c00127b1:	55                   	push   ebp
c00127b2:	e8 72 ff ff ff       	call   c0012729 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127b7:	8d 74 24 49          	lea    esi,[esp+0x49]
c00127bb:	b9 27 00 00 00       	mov    ecx,0x27
c00127c0:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00127c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00127c9:	83 c4 10             	add    esp,0x10
c00127cc:	83 c3 03             	add    ebx,0x3
c00127cf:	83 fb 15             	cmp    ebx,0x15
c00127d2:	75 b6                	jne    c001278a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00127d4:	83 c4 6c             	add    esp,0x6c
c00127d7:	5b                   	pop    ebx
c00127d8:	5e                   	pop    esi
c00127d9:	5f                   	pop    edi
c00127da:	5d                   	pop    ebp
c00127db:	c3                   	ret    

c00127dc <CmEnterDirectory(Reghive_Tag*, int)>:
c00127dc:	83 ec 40             	sub    esp,0x40
c00127df:	8d 44 24 09          	lea    eax,[esp+0x9]
c00127e3:	50                   	push   eax
c00127e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00127e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00127ec:	e8 38 ff ff ff       	call   c0012729 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127f1:	83 c4 10             	add    esp,0x10
c00127f4:	83 c8 ff             	or     eax,0xffffffff
c00127f7:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00127fc:	75 19                	jne    c0012817 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00127fe:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012803:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012808:	c1 e0 08             	shl    eax,0x8
c001280b:	09 c2                	or     edx,eax
c001280d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012812:	c1 e0 10             	shl    eax,0x10
c0012815:	09 d0                	or     eax,edx
c0012817:	83 c4 3c             	add    esp,0x3c
c001281a:	c3                   	ret    

c001281b <CmGetNext(Reghive_Tag*, int)>:
c001281b:	83 ec 40             	sub    esp,0x40
c001281e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012822:	50                   	push   eax
c0012823:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012827:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001282b:	e8 f9 fe ff ff       	call   c0012729 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012830:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012835:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c001283a:	c1 e0 08             	shl    eax,0x8
c001283d:	09 c2                	or     edx,eax
c001283f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012844:	83 c4 4c             	add    esp,0x4c
c0012847:	c1 e0 10             	shl    eax,0x10
c001284a:	09 d0                	or     eax,edx
c001284c:	c3                   	ret    

c001284d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c001284d:	53                   	push   ebx
c001284e:	83 ec 18             	sub    esp,0x18
c0012851:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012855:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012859:	74 29                	je     c0012884 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001285b:	50                   	push   eax
c001285c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012861:	99                   	cdq    
c0012862:	52                   	push   edx
c0012863:	50                   	push   eax
c0012864:	ff 33                	push   DWORD PTR [ebx]
c0012866:	e8 e5 8f ff ff       	call   c000b850 <File::seek(unsigned long long)>
c001286b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001286d:	5a                   	pop    edx
c001286e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012872:	8b 10                	mov    edx,DWORD PTR [eax]
c0012874:	51                   	push   ecx
c0012875:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012879:	6a 00                	push   0x0
c001287b:	6a 2b                	push   0x2b
c001287d:	50                   	push   eax
c001287e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012881:	83 c4 20             	add    esp,0x20
c0012884:	83 c4 18             	add    esp,0x18
c0012887:	5b                   	pop    ebx
c0012888:	c3                   	ret    

c0012889 <CmFreeExtent(Reghive_Tag*, int)>:
c0012889:	53                   	push   ebx
c001288a:	83 ec 3c             	sub    esp,0x3c
c001288d:	6a 2b                	push   0x2b
c001288f:	6a 00                	push   0x0
c0012891:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012895:	53                   	push   ebx
c0012896:	e8 55 dc fe ff       	call   c00004f0 <memset>
c001289b:	83 c4 0c             	add    esp,0xc
c001289e:	53                   	push   ebx
c001289f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128a7:	e8 a1 ff ff ff       	call   c001284d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00128ac:	83 c4 48             	add    esp,0x48
c00128af:	5b                   	pop    ebx
c00128b0:	c3                   	ret    

c00128b1 <CmUpdateHeader(Reghive_Tag*)>:
c00128b1:	83 ec 0c             	sub    esp,0xc
c00128b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128b8:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00128bc:	74 10                	je     c00128ce <CmUpdateHeader(Reghive_Tag*)+0x1d>
c00128be:	52                   	push   edx
c00128bf:	8d 50 05             	lea    edx,[eax+0x5]
c00128c2:	52                   	push   edx
c00128c3:	6a 00                	push   0x0
c00128c5:	50                   	push   eax
c00128c6:	e8 82 ff ff ff       	call   c001284d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00128cb:	83 c4 10             	add    esp,0x10
c00128ce:	83 c4 0c             	add    esp,0xc
c00128d1:	c3                   	ret    

c00128d2 <CmExpand(Reghive_Tag*, int)>:
c00128d2:	55                   	push   ebp
c00128d3:	57                   	push   edi
c00128d4:	83 cf ff             	or     edi,0xffffffff
c00128d7:	56                   	push   esi
c00128d8:	53                   	push   ebx
c00128d9:	83 ec 3c             	sub    esp,0x3c
c00128dc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00128e0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00128e4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00128e8:	74 59                	je     c0012943 <CmExpand(Reghive_Tag*, int)+0x71>
c00128ea:	50                   	push   eax
c00128eb:	31 d2                	xor    edx,edx
c00128ed:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00128f1:	31 ff                	xor    edi,edi
c00128f3:	52                   	push   edx
c00128f4:	50                   	push   eax
c00128f5:	ff 33                	push   DWORD PTR [ebx]
c00128f7:	e8 54 8f ff ff       	call   c000b850 <File::seek(unsigned long long)>
c00128fc:	83 c4 0c             	add    esp,0xc
c00128ff:	6a 2b                	push   0x2b
c0012901:	6a 00                	push   0x0
c0012903:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012907:	55                   	push   ebp
c0012908:	e8 e3 db fe ff       	call   c00004f0 <memset>
c001290d:	83 c4 10             	add    esp,0x10
c0012910:	39 f7                	cmp    edi,esi
c0012912:	7d 1b                	jge    c001292f <CmExpand(Reghive_Tag*, int)+0x5d>
c0012914:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012916:	83 ec 0c             	sub    esp,0xc
c0012919:	47                   	inc    edi
c001291a:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c001291e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012920:	51                   	push   ecx
c0012921:	55                   	push   ebp
c0012922:	6a 00                	push   0x0
c0012924:	6a 2b                	push   0x2b
c0012926:	50                   	push   eax
c0012927:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001292a:	83 c4 20             	add    esp,0x20
c001292d:	eb e1                	jmp    c0012910 <CmExpand(Reghive_Tag*, int)+0x3e>
c001292f:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012932:	83 ec 0c             	sub    esp,0xc
c0012935:	01 fe                	add    esi,edi
c0012937:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c001293a:	53                   	push   ebx
c001293b:	e8 71 ff ff ff       	call   c00128b1 <CmUpdateHeader(Reghive_Tag*)>
c0012940:	83 c4 10             	add    esp,0x10
c0012943:	83 c4 3c             	add    esp,0x3c
c0012946:	89 f8                	mov    eax,edi
c0012948:	5b                   	pop    ebx
c0012949:	5e                   	pop    esi
c001294a:	5f                   	pop    edi
c001294b:	5d                   	pop    ebp
c001294c:	c3                   	ret    

c001294d <CmFindUnusedExtent(Reghive_Tag*)>:
c001294d:	55                   	push   ebp
c001294e:	57                   	push   edi
c001294f:	56                   	push   esi
c0012950:	53                   	push   ebx
c0012951:	83 cb ff             	or     ebx,0xffffffff
c0012954:	83 ec 1c             	sub    esp,0x1c
c0012957:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001295b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001295f:	74 68                	je     c00129c9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012961:	51                   	push   ecx
c0012962:	be 2b 00 00 00       	mov    esi,0x2b
c0012967:	6a 00                	push   0x0
c0012969:	31 ff                	xor    edi,edi
c001296b:	6a 00                	push   0x0
c001296d:	31 db                	xor    ebx,ebx
c001296f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012972:	e8 d9 8e ff ff       	call   c000b850 <File::seek(unsigned long long)>
c0012977:	83 c4 10             	add    esp,0x10
c001297a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c001297d:	76 3b                	jbe    c00129ba <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001297f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012982:	83 ec 0c             	sub    esp,0xc
c0012985:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012989:	8b 10                	mov    edx,DWORD PTR [eax]
c001298b:	51                   	push   ecx
c001298c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012990:	51                   	push   ecx
c0012991:	6a 00                	push   0x0
c0012993:	6a 01                	push   0x1
c0012995:	50                   	push   eax
c0012996:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012999:	83 c4 20             	add    esp,0x20
c001299c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00129a1:	74 26                	je     c00129c9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00129a3:	52                   	push   edx
c00129a4:	43                   	inc    ebx
c00129a5:	57                   	push   edi
c00129a6:	56                   	push   esi
c00129a7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00129aa:	e8 a1 8e ff ff       	call   c000b850 <File::seek(unsigned long long)>
c00129af:	83 c6 2b             	add    esi,0x2b
c00129b2:	83 d7 00             	adc    edi,0x0
c00129b5:	83 c4 10             	add    esp,0x10
c00129b8:	eb c0                	jmp    c001297a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00129ba:	50                   	push   eax
c00129bb:	50                   	push   eax
c00129bc:	6a 40                	push   0x40
c00129be:	55                   	push   ebp
c00129bf:	e8 0e ff ff ff       	call   c00128d2 <CmExpand(Reghive_Tag*, int)>
c00129c4:	83 c4 10             	add    esp,0x10
c00129c7:	89 c3                	mov    ebx,eax
c00129c9:	83 c4 1c             	add    esp,0x1c
c00129cc:	89 d8                	mov    eax,ebx
c00129ce:	5b                   	pop    ebx
c00129cf:	5e                   	pop    esi
c00129d0:	5f                   	pop    edi
c00129d1:	5d                   	pop    ebp
c00129d2:	c3                   	ret    

c00129d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00129d3:	55                   	push   ebp
c00129d4:	57                   	push   edi
c00129d5:	56                   	push   esi
c00129d6:	53                   	push   ebx
c00129d7:	81 ec 88 00 00 00    	sub    esp,0x88
c00129dd:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00129e4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00129eb:	e8 5d ff ff ff       	call   c001294d <CmFindUnusedExtent(Reghive_Tag*)>
c00129f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129f4:	83 c4 0c             	add    esp,0xc
c00129f7:	6a 2b                	push   0x2b
c00129f9:	6a 00                	push   0x0
c00129fb:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00129ff:	55                   	push   ebp
c0012a00:	e8 eb da fe ff       	call   c00004f0 <memset>
c0012a05:	83 c4 10             	add    esp,0x10
c0012a08:	85 db                	test   ebx,ebx
c0012a0a:	74 12                	je     c0012a1e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012a0c:	51                   	push   ecx
c0012a0d:	55                   	push   ebp
c0012a0e:	53                   	push   ebx
c0012a0f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012a16:	e8 0e fd ff ff       	call   c0012729 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a1b:	83 c4 10             	add    esp,0x10
c0012a1e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012a22:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012a29:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012a2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a30:	85 db                	test   ebx,ebx
c0012a32:	74 49                	je     c0012a7d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012a34:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012a39:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012a3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a42:	c1 e0 08             	shl    eax,0x8
c0012a45:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012a4b:	09 c8                	or     eax,ecx
c0012a4d:	74 11                	je     c0012a60 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012a4f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012a53:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012a57:	c1 e8 10             	shr    eax,0x10
c0012a5a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012a5e:	eb 0f                	jmp    c0012a6f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012a60:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012a65:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012a6a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012a6f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012a73:	c1 ea 08             	shr    edx,0x8
c0012a76:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012a7b:	eb 0f                	jmp    c0012a8c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012a7d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012a82:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012a87:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012a8c:	52                   	push   edx
c0012a8d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012a91:	50                   	push   eax
c0012a92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012a96:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012a9d:	e8 ab fd ff ff       	call   c001284d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012aa2:	83 c4 10             	add    esp,0x10
c0012aa5:	85 db                	test   ebx,ebx
c0012aa7:	74 12                	je     c0012abb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012aa9:	50                   	push   eax
c0012aaa:	55                   	push   ebp
c0012aab:	53                   	push   ebx
c0012aac:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ab3:	e8 95 fd ff ff       	call   c001284d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ab8:	83 c4 10             	add    esp,0x10
c0012abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012abf:	83 c4 7c             	add    esp,0x7c
c0012ac2:	5b                   	pop    ebx
c0012ac3:	5e                   	pop    esi
c0012ac4:	5f                   	pop    edi
c0012ac5:	5d                   	pop    ebp
c0012ac6:	c3                   	ret    

c0012ac7 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012ac7:	55                   	push   ebp
c0012ac8:	57                   	push   edi
c0012ac9:	56                   	push   esi
c0012aca:	53                   	push   ebx
c0012acb:	bb 27 00 00 00       	mov    ebx,0x27
c0012ad0:	81 ec 88 00 00 00    	sub    esp,0x88
c0012ad6:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012add:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012ae4:	e8 97 da fe ff       	call   c0000580 <strlen>
c0012ae9:	8d 48 26             	lea    ecx,[eax+0x26]
c0012aec:	89 c8                	mov    eax,ecx
c0012aee:	99                   	cdq    
c0012aef:	f7 fb                	idiv   ebx
c0012af1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012af5:	83 c4 10             	add    esp,0x10
c0012af8:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012afe:	7e 10                	jle    c0012b10 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012b00:	83 ec 0c             	sub    esp,0xc
c0012b03:	68 19 1e 02 c0       	push   0xc0021e19
c0012b08:	e8 50 e6 ff ff       	call   c001115d <KePanic(char const*)>
c0012b0d:	83 c4 10             	add    esp,0x10
c0012b10:	53                   	push   ebx
c0012b11:	31 ed                	xor    ebp,ebp
c0012b13:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012b17:	53                   	push   ebx
c0012b18:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b1f:	57                   	push   edi
c0012b20:	e8 04 fc ff ff       	call   c0012729 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b25:	83 c4 10             	add    esp,0x10
c0012b28:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012b2c:	89 f0                	mov    eax,esi
c0012b2e:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012b32:	c1 e0 08             	shl    eax,0x8
c0012b35:	09 c6                	or     esi,eax
c0012b37:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012b3b:	c1 e6 08             	shl    esi,0x8
c0012b3e:	09 c6                	or     esi,eax
c0012b40:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012b44:	7e 72                	jle    c0012bb8 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012b46:	85 f6                	test   esi,esi
c0012b48:	75 25                	jne    c0012b6f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012b4a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012b4f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012b53:	50                   	push   eax
c0012b54:	6a 00                	push   0x0
c0012b56:	6a 00                	push   0x0
c0012b58:	57                   	push   edi
c0012b59:	e8 75 fe ff ff       	call   c00129d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012b5e:	83 c4 10             	add    esp,0x10
c0012b61:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012b64:	89 c6                	mov    esi,eax
c0012b66:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012b69:	c1 f8 10             	sar    eax,0x10
c0012b6c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012b6f:	51                   	push   ecx
c0012b70:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012b74:	52                   	push   edx
c0012b75:	56                   	push   esi
c0012b76:	57                   	push   edi
c0012b77:	e8 ad fb ff ff       	call   c0012729 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b7c:	83 c4 0c             	add    esp,0xc
c0012b7f:	6a 27                	push   0x27
c0012b81:	6a 00                	push   0x0
c0012b83:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012b87:	51                   	push   ecx
c0012b88:	e8 63 d9 fe ff       	call   c00004f0 <memset>
c0012b8d:	6b c5 27             	imul   eax,ebp,0x27
c0012b90:	83 c4 0c             	add    esp,0xc
c0012b93:	6a 27                	push   0x27
c0012b95:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012b9c:	50                   	push   eax
c0012b9d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012ba1:	51                   	push   ecx
c0012ba2:	e8 e9 da fe ff       	call   c0000690 <strncpy>
c0012ba7:	83 c4 0c             	add    esp,0xc
c0012baa:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012bae:	52                   	push   edx
c0012baf:	56                   	push   esi
c0012bb0:	57                   	push   edi
c0012bb1:	e8 97 fc ff ff       	call   c001284d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012bb6:	eb 19                	jmp    c0012bd1 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012bb8:	85 f6                	test   esi,esi
c0012bba:	74 18                	je     c0012bd4 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012bbc:	52                   	push   edx
c0012bbd:	52                   	push   edx
c0012bbe:	56                   	push   esi
c0012bbf:	57                   	push   edi
c0012bc0:	e8 c4 fc ff ff       	call   c0012889 <CmFreeExtent(Reghive_Tag*, int)>
c0012bc5:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012bc9:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012bcd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012bd1:	83 c4 10             	add    esp,0x10
c0012bd4:	45                   	inc    ebp
c0012bd5:	83 c3 03             	add    ebx,0x3
c0012bd8:	83 fd 07             	cmp    ebp,0x7
c0012bdb:	0f 85 47 ff ff ff    	jne    c0012b28 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012be1:	50                   	push   eax
c0012be2:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012be6:	50                   	push   eax
c0012be7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012bee:	57                   	push   edi
c0012bef:	e8 59 fc ff ff       	call   c001284d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012bf4:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012bfa:	5b                   	pop    ebx
c0012bfb:	5e                   	pop    esi
c0012bfc:	5f                   	pop    edi
c0012bfd:	5d                   	pop    ebp
c0012bfe:	c3                   	ret    

c0012bff <CmGetMatch(char*, char*, bool, bool*)>:
c0012bff:	56                   	push   esi
c0012c00:	53                   	push   ebx
c0012c01:	50                   	push   eax
c0012c02:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012c07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012c0b:	74 25                	je     c0012c32 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012c0d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012c10:	31 db                	xor    ebx,ebx
c0012c12:	50                   	push   eax
c0012c13:	50                   	push   eax
c0012c14:	8d 04 9d c0 32 02 c0 	lea    eax,[ebx*4-0x3ffdcd40]
c0012c1b:	50                   	push   eax
c0012c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c20:	e8 5b db fe ff       	call   c0000780 <strcmp>
c0012c25:	83 c4 10             	add    esp,0x10
c0012c28:	85 c0                	test   eax,eax
c0012c2a:	74 2e                	je     c0012c5a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012c2c:	43                   	inc    ebx
c0012c2d:	83 fb 3f             	cmp    ebx,0x3f
c0012c30:	75 e0                	jne    c0012c12 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012c32:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012c35:	31 db                	xor    ebx,ebx
c0012c37:	51                   	push   ecx
c0012c38:	51                   	push   ecx
c0012c39:	8d 04 9d c0 32 02 c0 	lea    eax,[ebx*4-0x3ffdcd40]
c0012c40:	50                   	push   eax
c0012c41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c45:	e8 36 db fe ff       	call   c0000780 <strcmp>
c0012c4a:	83 c4 10             	add    esp,0x10
c0012c4d:	85 c0                	test   eax,eax
c0012c4f:	74 09                	je     c0012c5a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012c51:	43                   	inc    ebx
c0012c52:	83 fb 3f             	cmp    ebx,0x3f
c0012c55:	75 e0                	jne    c0012c37 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012c57:	83 cb ff             	or     ebx,0xffffffff
c0012c5a:	5a                   	pop    edx
c0012c5b:	89 d8                	mov    eax,ebx
c0012c5d:	5b                   	pop    ebx
c0012c5e:	5e                   	pop    esi
c0012c5f:	c3                   	ret    

c0012c60 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012c60:	55                   	push   ebp
c0012c61:	31 c0                	xor    eax,eax
c0012c63:	57                   	push   edi
c0012c64:	56                   	push   esi
c0012c65:	53                   	push   ebx
c0012c66:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012c6a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012c6e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012c72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012c76:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012c78:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012c7b:	83 fd 1f             	cmp    ebp,0x1f
c0012c7e:	7f 0b                	jg     c0012c8b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012c80:	0f b6 c2             	movzx  eax,dl
c0012c83:	d3 e0                	shl    eax,cl
c0012c85:	09 07                	or     DWORD PTR [edi],eax
c0012c87:	b0 01                	mov    al,0x1
c0012c89:	01 33                	add    DWORD PTR [ebx],esi
c0012c8b:	5b                   	pop    ebx
c0012c8c:	5e                   	pop    esi
c0012c8d:	5f                   	pop    edi
c0012c8e:	5d                   	pop    ebp
c0012c8f:	c3                   	ret    

c0012c90 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012c90:	57                   	push   edi
c0012c91:	56                   	push   esi
c0012c92:	53                   	push   ebx
c0012c93:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012c97:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012c9b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012c9f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012ca3:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012ca5:	7c 17                	jl     c0012cbe <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012ca7:	8b 17                	mov    edx,DWORD PTR [edi]
c0012ca9:	b8 01 00 00 00       	mov    eax,0x1
c0012cae:	d3 e0                	shl    eax,cl
c0012cb0:	48                   	dec    eax
c0012cb1:	21 d0                	and    eax,edx
c0012cb3:	d3 ea                	shr    edx,cl
c0012cb5:	89 17                	mov    DWORD PTR [edi],edx
c0012cb7:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012cb9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012cbc:	eb 05                	jmp    c0012cc3 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012cbe:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012cc1:	31 c0                	xor    eax,eax
c0012cc3:	5b                   	pop    ebx
c0012cc4:	5e                   	pop    esi
c0012cc5:	5f                   	pop    edi
c0012cc6:	c3                   	ret    

c0012cc7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012cc7:	83 ec 40             	sub    esp,0x40
c0012cca:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012cce:	50                   	push   eax
c0012ccf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012cd3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012cd7:	e8 4d fa ff ff       	call   c0012729 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012cdc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012ce0:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012ce4:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012ce8:	89 10                	mov    DWORD PTR [eax],edx
c0012cea:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012ced:	83 c4 4c             	add    esp,0x4c
c0012cf0:	c3                   	ret    

c0012cf1 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012cf1:	55                   	push   ebp
c0012cf2:	57                   	push   edi
c0012cf3:	56                   	push   esi
c0012cf4:	53                   	push   ebx
c0012cf5:	83 ec 40             	sub    esp,0x40
c0012cf8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012cfc:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012d00:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012d04:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012d08:	53                   	push   ebx
c0012d09:	56                   	push   esi
c0012d0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012d0e:	e8 16 fa ff ff       	call   c0012729 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d13:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012d17:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012d1b:	83 c4 0c             	add    esp,0xc
c0012d1e:	53                   	push   ebx
c0012d1f:	56                   	push   esi
c0012d20:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012d24:	e8 24 fb ff ff       	call   c001284d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d29:	83 c4 4c             	add    esp,0x4c
c0012d2c:	5b                   	pop    ebx
c0012d2d:	5e                   	pop    esi
c0012d2e:	5f                   	pop    edi
c0012d2f:	5d                   	pop    ebp
c0012d30:	c3                   	ret    

c0012d31 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012d31:	55                   	push   ebp
c0012d32:	57                   	push   edi
c0012d33:	56                   	push   esi
c0012d34:	31 f6                	xor    esi,esi
c0012d36:	53                   	push   ebx
c0012d37:	31 db                	xor    ebx,ebx
c0012d39:	83 ec 40             	sub    esp,0x40
c0012d3c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012d44:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012d4c:	6a 12                	push   0x12
c0012d4e:	68 ee 00 00 00       	push   0xee
c0012d53:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012d57:	e8 94 d7 fe ff       	call   c00004f0 <memset>
c0012d5c:	83 c4 10             	add    esp,0x10
c0012d5f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012d63:	6a 08                	push   0x8
c0012d65:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d69:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012d6d:	50                   	push   eax
c0012d6e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012d72:	55                   	push   ebp
c0012d73:	57                   	push   edi
c0012d74:	e8 e7 fe ff ff       	call   c0012c60 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012d79:	83 c4 10             	add    esp,0x10
c0012d7c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012d80:	50                   	push   eax
c0012d81:	6a 06                	push   0x6
c0012d83:	55                   	push   ebp
c0012d84:	57                   	push   edi
c0012d85:	e8 06 ff ff ff       	call   c0012c90 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012d8a:	83 c4 10             	add    esp,0x10
c0012d8d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012d92:	74 07                	je     c0012d9b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012d94:	46                   	inc    esi
c0012d95:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012d99:	eb e1                	jmp    c0012d7c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012d9b:	43                   	inc    ebx
c0012d9c:	83 fb 12             	cmp    ebx,0x12
c0012d9f:	75 c2                	jne    c0012d63 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012da1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012da5:	31 f6                	xor    esi,esi
c0012da7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012daa:	50                   	push   eax
c0012dab:	50                   	push   eax
c0012dac:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012db1:	46                   	inc    esi
c0012db2:	8d 04 85 c0 32 02 c0 	lea    eax,[eax*4-0x3ffdcd40]
c0012db9:	50                   	push   eax
c0012dba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012dbe:	e8 ad da fe ff       	call   c0000870 <strcat>
c0012dc3:	83 c4 10             	add    esp,0x10
c0012dc6:	83 fe 18             	cmp    esi,0x18
c0012dc9:	75 df                	jne    c0012daa <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012dcb:	83 c4 3c             	add    esp,0x3c
c0012dce:	31 c0                	xor    eax,eax
c0012dd0:	5b                   	pop    ebx
c0012dd1:	5e                   	pop    esi
c0012dd2:	5f                   	pop    edi
c0012dd3:	5d                   	pop    ebp
c0012dd4:	c3                   	ret    

c0012dd5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012dd5:	83 ec 40             	sub    esp,0x40
c0012dd8:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ddc:	50                   	push   eax
c0012ddd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012de1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012de5:	e8 3f f9 ff ff       	call   c0012729 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012dea:	58                   	pop    eax
c0012deb:	5a                   	pop    edx
c0012dec:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012df0:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012df4:	50                   	push   eax
c0012df5:	e8 37 ff ff ff       	call   c0012d31 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012dfa:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012dff:	83 c4 4c             	add    esp,0x4c
c0012e02:	c3                   	ret    

c0012e03 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012e03:	55                   	push   ebp
c0012e04:	57                   	push   edi
c0012e05:	56                   	push   esi
c0012e06:	53                   	push   ebx
c0012e07:	31 db                	xor    ebx,ebx
c0012e09:	83 ec 70             	sub    esp,0x70
c0012e0c:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012e13:	6a 30                	push   0x30
c0012e15:	6a 00                	push   0x0
c0012e17:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012e1b:	56                   	push   esi
c0012e1c:	e8 cf d6 fe ff       	call   c00004f0 <memset>
c0012e21:	83 c4 10             	add    esp,0x10
c0012e24:	83 ec 0c             	sub    esp,0xc
c0012e27:	57                   	push   edi
c0012e28:	e8 53 d7 fe ff       	call   c0000580 <strlen>
c0012e2d:	83 c4 10             	add    esp,0x10
c0012e30:	39 d8                	cmp    eax,ebx
c0012e32:	76 16                	jbe    c0012e4a <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012e34:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012e38:	83 ec 0c             	sub    esp,0xc
c0012e3b:	50                   	push   eax
c0012e3c:	e8 1f db fe ff       	call   c0000960 <toupper>
c0012e41:	83 c4 10             	add    esp,0x10
c0012e44:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012e47:	43                   	inc    ebx
c0012e48:	eb da                	jmp    c0012e24 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012e4a:	52                   	push   edx
c0012e4b:	31 db                	xor    ebx,ebx
c0012e4d:	6a 18                	push   0x18
c0012e4f:	31 ff                	xor    edi,edi
c0012e51:	6a 3f                	push   0x3f
c0012e53:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e57:	50                   	push   eax
c0012e58:	e8 93 d6 fe ff       	call   c00004f0 <memset>
c0012e5d:	83 c4 10             	add    esp,0x10
c0012e60:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012e64:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012e68:	84 c0                	test   al,al
c0012e6a:	0f 84 af 00 00 00    	je     c0012f1f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012e70:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012e74:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e77:	83 ec 0c             	sub    esp,0xc
c0012e7a:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012e7f:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012e83:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012e87:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0012e8c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012e90:	56                   	push   esi
c0012e91:	e8 ea d6 fe ff       	call   c0000580 <strlen>
c0012e96:	83 c4 10             	add    esp,0x10
c0012e99:	85 c0                	test   eax,eax
c0012e9b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012e9f:	74 0b                	je     c0012eac <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012ea1:	50                   	push   eax
c0012ea2:	6a 01                	push   0x1
c0012ea4:	56                   	push   esi
c0012ea5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012ea9:	50                   	push   eax
c0012eaa:	eb 0a                	jmp    c0012eb6 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012eac:	50                   	push   eax
c0012ead:	6a 00                	push   0x0
c0012eaf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012eb3:	50                   	push   eax
c0012eb4:	6a 00                	push   0x0
c0012eb6:	e8 44 fd ff ff       	call   c0012bff <CmGetMatch(char*, char*, bool, bool*)>
c0012ebb:	83 c4 10             	add    esp,0x10
c0012ebe:	83 f8 ff             	cmp    eax,0xffffffff
c0012ec1:	75 1a                	jne    c0012edd <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012ec3:	83 ec 0c             	sub    esp,0xc
c0012ec6:	68 2e 1e 02 c0       	push   0xc0021e2e
c0012ecb:	e8 8d e2 ff ff       	call   c001115d <KePanic(char const*)>
c0012ed0:	83 c4 10             	add    esp,0x10
c0012ed3:	b8 02 00 00 00       	mov    eax,0x2
c0012ed8:	e9 bb 00 00 00       	jmp    c0012f98 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012edd:	83 ff 18             	cmp    edi,0x18
c0012ee0:	75 1a                	jne    c0012efc <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012ee2:	83 ec 0c             	sub    esp,0xc
c0012ee5:	68 43 1e 02 c0       	push   0xc0021e43
c0012eea:	e8 6e e2 ff ff       	call   c001115d <KePanic(char const*)>
c0012eef:	83 c4 10             	add    esp,0x10
c0012ef2:	b8 01 00 00 00       	mov    eax,0x1
c0012ef7:	e9 9c 00 00 00       	jmp    c0012f98 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012efc:	47                   	inc    edi
c0012efd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f02:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012f06:	0f 45 dd             	cmovne ebx,ebp
c0012f09:	83 ec 0c             	sub    esp,0xc
c0012f0c:	56                   	push   esi
c0012f0d:	e8 6e d6 fe ff       	call   c0000580 <strlen>
c0012f12:	83 c4 10             	add    esp,0x10
c0012f15:	85 c0                	test   eax,eax
c0012f17:	74 06                	je     c0012f1f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012f19:	43                   	inc    ebx
c0012f1a:	e9 41 ff ff ff       	jmp    c0012e60 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012f1f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012f27:	31 db                	xor    ebx,ebx
c0012f29:	31 ff                	xor    edi,edi
c0012f2b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012f33:	50                   	push   eax
c0012f34:	6a 12                	push   0x12
c0012f36:	68 ee 00 00 00       	push   0xee
c0012f3b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012f42:	e8 a9 d5 fe ff       	call   c00004f0 <memset>
c0012f47:	83 c4 10             	add    esp,0x10
c0012f4a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012f4e:	83 fb 17             	cmp    ebx,0x17
c0012f51:	7e 26                	jle    c0012f79 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012f53:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f57:	50                   	push   eax
c0012f58:	6a 08                	push   0x8
c0012f5a:	55                   	push   ebp
c0012f5b:	56                   	push   esi
c0012f5c:	e8 2f fd ff ff       	call   c0012c90 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012f61:	83 c4 10             	add    esp,0x10
c0012f64:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f69:	74 26                	je     c0012f91 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0012f6b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012f72:	4b                   	dec    ebx
c0012f73:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012f76:	47                   	inc    edi
c0012f77:	eb 1c                	jmp    c0012f95 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012f79:	6a 06                	push   0x6
c0012f7b:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012f80:	50                   	push   eax
c0012f81:	55                   	push   ebp
c0012f82:	56                   	push   esi
c0012f83:	e8 d8 fc ff ff       	call   c0012c60 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012f88:	83 c4 10             	add    esp,0x10
c0012f8b:	84 c0                	test   al,al
c0012f8d:	75 06                	jne    c0012f95 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012f8f:	eb c2                	jmp    c0012f53 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012f91:	31 c0                	xor    eax,eax
c0012f93:	eb 03                	jmp    c0012f98 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012f95:	43                   	inc    ebx
c0012f96:	eb b2                	jmp    c0012f4a <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0012f98:	83 c4 6c             	add    esp,0x6c
c0012f9b:	5b                   	pop    ebx
c0012f9c:	5e                   	pop    esi
c0012f9d:	5f                   	pop    edi
c0012f9e:	5d                   	pop    ebp
c0012f9f:	c3                   	ret    

c0012fa0 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012fa0:	53                   	push   ebx
c0012fa1:	83 ec 3c             	sub    esp,0x3c
c0012fa4:	6a 2b                	push   0x2b
c0012fa6:	6a 00                	push   0x0
c0012fa8:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012fac:	53                   	push   ebx
c0012fad:	e8 3e d5 fe ff       	call   c00004f0 <memset>
c0012fb2:	58                   	pop    eax
c0012fb3:	5a                   	pop    edx
c0012fb4:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012fb8:	50                   	push   eax
c0012fb9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012fbd:	e8 41 fe ff ff       	call   c0012e03 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012fc2:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012fc7:	83 c4 0c             	add    esp,0xc
c0012fca:	6a 15                	push   0x15
c0012fcc:	6a 00                	push   0x0
c0012fce:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012fd2:	50                   	push   eax
c0012fd3:	e8 18 d5 fe ff       	call   c00004f0 <memset>
c0012fd8:	53                   	push   ebx
c0012fd9:	6a 00                	push   0x0
c0012fdb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012fdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012fe3:	e8 eb f9 ff ff       	call   c00129d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012fe8:	83 c4 58             	add    esp,0x58
c0012feb:	5b                   	pop    ebx
c0012fec:	c3                   	ret    

c0012fed <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0012fed:	56                   	push   esi
c0012fee:	53                   	push   ebx
c0012fef:	83 ec 48             	sub    esp,0x48
c0012ff2:	6a 12                	push   0x12
c0012ff4:	68 ff 00 00 00       	push   0xff
c0012ff9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0012ffd:	56                   	push   esi
c0012ffe:	e8 ed d4 fe ff       	call   c00004f0 <memset>
c0013003:	5a                   	pop    edx
c0013004:	59                   	pop    ecx
c0013005:	56                   	push   esi
c0013006:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001300a:	e8 f4 fd ff ff       	call   c0012e03 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001300f:	83 c4 10             	add    esp,0x10
c0013012:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013016:	85 db                	test   ebx,ebx
c0013018:	74 42                	je     c001305c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001301a:	50                   	push   eax
c001301b:	8d 44 24 19          	lea    eax,[esp+0x19]
c001301f:	50                   	push   eax
c0013020:	53                   	push   ebx
c0013021:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013025:	e8 ff f6 ff ff       	call   c0012729 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001302a:	83 c4 0c             	add    esp,0xc
c001302d:	6a 12                	push   0x12
c001302f:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013033:	50                   	push   eax
c0013034:	56                   	push   esi
c0013035:	e8 46 d3 fe ff       	call   c0000380 <memcmp>
c001303a:	83 c4 10             	add    esp,0x10
c001303d:	85 c0                	test   eax,eax
c001303f:	74 1e                	je     c001305f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013041:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013046:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001304b:	c1 e3 08             	shl    ebx,0x8
c001304e:	09 d8                	or     eax,ebx
c0013050:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013055:	c1 e3 10             	shl    ebx,0x10
c0013058:	09 c3                	or     ebx,eax
c001305a:	eb ba                	jmp    c0013016 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c001305c:	83 cb ff             	or     ebx,0xffffffff
c001305f:	83 c4 44             	add    esp,0x44
c0013062:	89 d8                	mov    eax,ebx
c0013064:	5b                   	pop    ebx
c0013065:	5e                   	pop    esi
c0013066:	c3                   	ret    

c0013067 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013067:	57                   	push   edi
c0013068:	56                   	push   esi
c0013069:	53                   	push   ebx
c001306a:	83 ec 34             	sub    esp,0x34
c001306d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013071:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013075:	6a 2b                	push   0x2b
c0013077:	6a 00                	push   0x0
c0013079:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001307d:	53                   	push   ebx
c001307e:	e8 6d d4 fe ff       	call   c00004f0 <memset>
c0013083:	58                   	pop    eax
c0013084:	5a                   	pop    edx
c0013085:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013089:	50                   	push   eax
c001308a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001308e:	e8 70 fd ff ff       	call   c0012e03 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013093:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0013097:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001309b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001309f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00130a3:	53                   	push   ebx
c00130a4:	6a 00                	push   0x0
c00130a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130aa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130ae:	e8 20 f9 ff ff       	call   c00129d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00130b3:	83 c4 50             	add    esp,0x50
c00130b6:	5b                   	pop    ebx
c00130b7:	5e                   	pop    esi
c00130b8:	5f                   	pop    edi
c00130b9:	c3                   	ret    

c00130ba <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00130ba:	55                   	push   ebp
c00130bb:	57                   	push   edi
c00130bc:	56                   	push   esi
c00130bd:	53                   	push   ebx
c00130be:	83 ec 40             	sub    esp,0x40
c00130c1:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00130c5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00130c9:	6a 2b                	push   0x2b
c00130cb:	6a 00                	push   0x0
c00130cd:	8d 74 24 11          	lea    esi,[esp+0x11]
c00130d1:	56                   	push   esi
c00130d2:	e8 19 d4 fe ff       	call   c00004f0 <memset>
c00130d7:	5f                   	pop    edi
c00130d8:	89 ef                	mov    edi,ebp
c00130da:	58                   	pop    eax
c00130db:	8d 44 24 11          	lea    eax,[esp+0x11]
c00130df:	50                   	push   eax
c00130e0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00130e4:	e8 1a fd ff ff       	call   c0012e03 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00130e9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00130ee:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00130f3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00130f8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00130fd:	83 c4 10             	add    esp,0x10
c0013100:	85 ed                	test   ebp,ebp
c0013102:	74 14                	je     c0013118 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013104:	51                   	push   ecx
c0013105:	51                   	push   ecx
c0013106:	57                   	push   edi
c0013107:	53                   	push   ebx
c0013108:	e8 0e f7 ff ff       	call   c001281b <CmGetNext(Reghive_Tag*, int)>
c001310d:	83 c4 10             	add    esp,0x10
c0013110:	85 c0                	test   eax,eax
c0013112:	74 04                	je     c0013118 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013114:	89 c7                	mov    edi,eax
c0013116:	eb e8                	jmp    c0013100 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013118:	56                   	push   esi
c0013119:	6a 00                	push   0x0
c001311b:	57                   	push   edi
c001311c:	53                   	push   ebx
c001311d:	e8 b1 f8 ff ff       	call   c00129d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013122:	83 c4 0c             	add    esp,0xc
c0013125:	56                   	push   esi
c0013126:	50                   	push   eax
c0013127:	89 c7                	mov    edi,eax
c0013129:	53                   	push   ebx
c001312a:	e8 fa f5 ff ff       	call   c0012729 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001312f:	58                   	pop    eax
c0013130:	5a                   	pop    edx
c0013131:	6a 6c                	push   0x6c
c0013133:	6a 00                	push   0x0
c0013135:	6a 00                	push   0x0
c0013137:	68 54 1e 02 c0       	push   0xc0021e54
c001313c:	57                   	push   edi
c001313d:	53                   	push   ebx
c001313e:	e8 24 ff ff ff       	call   c0013067 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013143:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013147:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001314b:	c1 e8 10             	shr    eax,0x10
c001314e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013152:	83 c4 1c             	add    esp,0x1c
c0013155:	56                   	push   esi
c0013156:	57                   	push   edi
c0013157:	53                   	push   ebx
c0013158:	e8 f0 f6 ff ff       	call   c001284d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001315d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013162:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013167:	c1 e0 08             	shl    eax,0x8
c001316a:	09 c2                	or     edx,eax
c001316c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013171:	83 c4 4c             	add    esp,0x4c
c0013174:	5b                   	pop    ebx
c0013175:	5e                   	pop    esi
c0013176:	c1 e0 10             	shl    eax,0x10
c0013179:	09 d0                	or     eax,edx
c001317b:	5f                   	pop    edi
c001317c:	5d                   	pop    ebp
c001317d:	c3                   	ret    

c001317e <zStrtok(char*, char const*)>:
c001317e:	55                   	push   ebp
c001317f:	57                   	push   edi
c0013180:	56                   	push   esi
c0013181:	53                   	push   ebx
c0013182:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013186:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001318a:	85 db                	test   ebx,ebx
c001318c:	74 2f                	je     c00131bd <zStrtok(char*, char const*)+0x3f>
c001318e:	85 c0                	test   eax,eax
c0013190:	75 09                	jne    c001319b <zStrtok(char*, char const*)+0x1d>
c0013192:	a1 90 9c 02 c0       	mov    eax,ds:0xc0029c90
c0013197:	85 c0                	test   eax,eax
c0013199:	74 50                	je     c00131eb <zStrtok(char*, char const*)+0x6d>
c001319b:	31 c9                	xor    ecx,ecx
c001319d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00131a1:	74 03                	je     c00131a6 <zStrtok(char*, char const*)+0x28>
c00131a3:	41                   	inc    ecx
c00131a4:	eb f7                	jmp    c001319d <zStrtok(char*, char const*)+0x1f>
c00131a6:	31 d2                	xor    edx,edx
c00131a8:	39 ca                	cmp    edx,ecx
c00131aa:	74 15                	je     c00131c1 <zStrtok(char*, char const*)+0x43>
c00131ac:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00131b0:	8d 3c 10             	lea    edi,[eax+edx*1]
c00131b3:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00131b6:	39 ee                	cmp    esi,ebp
c00131b8:	74 13                	je     c00131cd <zStrtok(char*, char const*)+0x4f>
c00131ba:	42                   	inc    edx
c00131bb:	eb eb                	jmp    c00131a8 <zStrtok(char*, char const*)+0x2a>
c00131bd:	31 c0                	xor    eax,eax
c00131bf:	eb 2a                	jmp    c00131eb <zStrtok(char*, char const*)+0x6d>
c00131c1:	c7 05 90 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c90,0x0
c00131cb:	eb 1e                	jmp    c00131eb <zStrtok(char*, char const*)+0x6d>
c00131cd:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00131d0:	39 ce                	cmp    esi,ecx
c00131d2:	75 0a                	jne    c00131de <zStrtok(char*, char const*)+0x60>
c00131d4:	40                   	inc    eax
c00131d5:	a3 90 9c 02 c0       	mov    ds:0xc0029c90,eax
c00131da:	89 d8                	mov    eax,ebx
c00131dc:	eb 0d                	jmp    c00131eb <zStrtok(char*, char const*)+0x6d>
c00131de:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00131e1:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00131e5:	89 15 90 9c 02 c0    	mov    DWORD PTR ds:0xc0029c90,edx
c00131eb:	5b                   	pop    ebx
c00131ec:	5e                   	pop    esi
c00131ed:	5f                   	pop    edi
c00131ee:	5d                   	pop    ebp
c00131ef:	c3                   	ret    

c00131f0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00131f0:	57                   	push   edi
c00131f1:	56                   	push   esi
c00131f2:	53                   	push   ebx
c00131f3:	81 ec 08 01 00 00    	sub    esp,0x108
c00131f9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013200:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013207:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001320b:	53                   	push   ebx
c001320c:	e8 3f d4 fe ff       	call   c0000650 <strcpy>
c0013211:	59                   	pop    ecx
c0013212:	5e                   	pop    esi
c0013213:	68 b8 21 02 c0       	push   0xc00221b8
c0013218:	53                   	push   ebx
c0013219:	bb 01 00 00 00       	mov    ebx,0x1
c001321e:	e8 5b ff ff ff       	call   c001317e <zStrtok(char*, char const*)>
c0013223:	83 c4 10             	add    esp,0x10
c0013226:	85 c0                	test   eax,eax
c0013228:	74 3b                	je     c0013265 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001322a:	52                   	push   edx
c001322b:	50                   	push   eax
c001322c:	6a 01                	push   0x1
c001322e:	57                   	push   edi
c001322f:	e8 b9 fd ff ff       	call   c0012fed <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013234:	59                   	pop    ecx
c0013235:	5e                   	pop    esi
c0013236:	89 c3                	mov    ebx,eax
c0013238:	68 b8 21 02 c0       	push   0xc00221b8
c001323d:	6a 00                	push   0x0
c001323f:	e8 3a ff ff ff       	call   c001317e <zStrtok(char*, char const*)>
c0013244:	83 c4 10             	add    esp,0x10
c0013247:	85 c0                	test   eax,eax
c0013249:	89 c6                	mov    esi,eax
c001324b:	74 18                	je     c0013265 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001324d:	52                   	push   edx
c001324e:	52                   	push   edx
c001324f:	53                   	push   ebx
c0013250:	57                   	push   edi
c0013251:	e8 86 f5 ff ff       	call   c00127dc <CmEnterDirectory(Reghive_Tag*, int)>
c0013256:	83 c4 10             	add    esp,0x10
c0013259:	83 f8 ff             	cmp    eax,0xffffffff
c001325c:	89 c3                	mov    ebx,eax
c001325e:	74 05                	je     c0013265 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013260:	50                   	push   eax
c0013261:	56                   	push   esi
c0013262:	53                   	push   ebx
c0013263:	eb c9                	jmp    c001322e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013265:	81 c4 00 01 00 00    	add    esp,0x100
c001326b:	89 d8                	mov    eax,ebx
c001326d:	5b                   	pop    ebx
c001326e:	5e                   	pop    esi
c001326f:	5f                   	pop    edi
c0013270:	c3                   	ret    

c0013271 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013271:	55                   	push   ebp
c0013272:	57                   	push   edi
c0013273:	56                   	push   esi
c0013274:	53                   	push   ebx
c0013275:	83 ec 5c             	sub    esp,0x5c
c0013278:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c001327c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013280:	85 db                	test   ebx,ebx
c0013282:	0f 8e 84 00 00 00    	jle    c001330c <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013288:	57                   	push   edi
c0013289:	31 ed                	xor    ebp,ebp
c001328b:	6a 32                	push   0x32
c001328d:	6a 00                	push   0x0
c001328f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013293:	57                   	push   edi
c0013294:	e8 57 d2 fe ff       	call   c00004f0 <memset>
c0013299:	83 c4 0c             	add    esp,0xc
c001329c:	57                   	push   edi
c001329d:	53                   	push   ebx
c001329e:	56                   	push   esi
c001329f:	e8 31 fb ff ff       	call   c0012dd5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00132a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132a8:	83 c4 10             	add    esp,0x10
c00132ab:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00132af:	7d 13                	jge    c00132c4 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00132b1:	83 ec 0c             	sub    esp,0xc
c00132b4:	45                   	inc    ebp
c00132b5:	68 5f 25 02 c0       	push   0xc002255f
c00132ba:	e8 4b 76 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00132bf:	83 c4 10             	add    esp,0x10
c00132c2:	eb e7                	jmp    c00132ab <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00132c4:	51                   	push   ecx
c00132c5:	57                   	push   edi
c00132c6:	53                   	push   ebx
c00132c7:	68 5a 1e 02 c0       	push   0xc0021e5a
c00132cc:	e8 39 76 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00132d1:	83 c4 10             	add    esp,0x10
c00132d4:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00132d9:	75 1e                	jne    c00132f9 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00132db:	52                   	push   edx
c00132dc:	52                   	push   edx
c00132dd:	53                   	push   ebx
c00132de:	56                   	push   esi
c00132df:	e8 f8 f4 ff ff       	call   c00127dc <CmEnterDirectory(Reghive_Tag*, int)>
c00132e4:	83 c4 0c             	add    esp,0xc
c00132e7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00132eb:	8d 51 04             	lea    edx,[ecx+0x4]
c00132ee:	52                   	push   edx
c00132ef:	50                   	push   eax
c00132f0:	56                   	push   esi
c00132f1:	e8 7b ff ff ff       	call   c0013271 <CmDisplayTree(Reghive_Tag*, int, int)>
c00132f6:	83 c4 10             	add    esp,0x10
c00132f9:	50                   	push   eax
c00132fa:	50                   	push   eax
c00132fb:	53                   	push   ebx
c00132fc:	56                   	push   esi
c00132fd:	e8 19 f5 ff ff       	call   c001281b <CmGetNext(Reghive_Tag*, int)>
c0013302:	83 c4 10             	add    esp,0x10
c0013305:	89 c3                	mov    ebx,eax
c0013307:	e9 74 ff ff ff       	jmp    c0013280 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c001330c:	83 c4 5c             	add    esp,0x5c
c001330f:	5b                   	pop    ebx
c0013310:	5e                   	pop    esi
c0013311:	5f                   	pop    edi
c0013312:	5d                   	pop    ebp
c0013313:	c3                   	ret    

c0013314 <CmSplitFinalSlashInPlace(char*)>:
c0013314:	53                   	push   ebx
c0013315:	83 ec 14             	sub    esp,0x14
c0013318:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001331c:	53                   	push   ebx
c001331d:	e8 5e d2 fe ff       	call   c0000580 <strlen>
c0013322:	83 c4 10             	add    esp,0x10
c0013325:	48                   	dec    eax
c0013326:	85 c0                	test   eax,eax
c0013328:	74 15                	je     c001333f <CmSplitFinalSlashInPlace(char*)+0x2b>
c001332a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001332e:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013331:	75 09                	jne    c001333c <CmSplitFinalSlashInPlace(char*)+0x28>
c0013333:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013336:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001333a:	eb 05                	jmp    c0013341 <CmSplitFinalSlashInPlace(char*)+0x2d>
c001333c:	48                   	dec    eax
c001333d:	eb e7                	jmp    c0013326 <CmSplitFinalSlashInPlace(char*)+0x12>
c001333f:	31 c0                	xor    eax,eax
c0013341:	83 c4 08             	add    esp,0x8
c0013344:	5b                   	pop    ebx
c0013345:	c3                   	ret    

c0013346 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013346:	55                   	push   ebp
c0013347:	57                   	push   edi
c0013348:	56                   	push   esi
c0013349:	53                   	push   ebx
c001334a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013350:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013357:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c001335a:	8d 43 01             	lea    eax,[ebx+0x1]
c001335d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013361:	89 f0                	mov    eax,esi
c0013363:	3c 40                	cmp    al,0x40
c0013365:	75 1b                	jne    c0013382 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0013367:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001336a:	85 c0                	test   eax,eax
c001336c:	74 08                	je     c0013376 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c001336e:	83 f8 3a             	cmp    eax,0x3a
c0013371:	74 03                	je     c0013376 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013373:	43                   	inc    ebx
c0013374:	eb f1                	jmp    c0013367 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0013376:	85 c0                	test   eax,eax
c0013378:	0f 84 45 01 00 00    	je     c00134c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001337e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013381:	43                   	inc    ebx
c0013382:	50                   	push   eax
c0013383:	6a 40                	push   0x40
c0013385:	6a 00                	push   0x0
c0013387:	8d 44 24 24          	lea    eax,[esp+0x24]
c001338b:	50                   	push   eax
c001338c:	e8 5f d1 fe ff       	call   c00004f0 <memset>
c0013391:	89 f1                	mov    ecx,esi
c0013393:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001339a:	31 c0                	xor    eax,eax
c001339c:	83 c4 10             	add    esp,0x10
c001339f:	0f be f1             	movsx  esi,cl
c00133a2:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00133a5:	85 d2                	test   edx,edx
c00133a7:	89 d1                	mov    ecx,edx
c00133a9:	0f 84 14 01 00 00    	je     c00134c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00133af:	3d c7 00 00 00       	cmp    eax,0xc7
c00133b4:	0f 8f 09 01 00 00    	jg     c00134c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00133ba:	83 fa 0a             	cmp    edx,0xa
c00133bd:	0f 85 f1 00 00 00    	jne    c00134b4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c00133c3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00133c8:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00133cd:	89 c8                	mov    eax,ecx
c00133cf:	a8 df                	test   al,0xdf
c00133d1:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00133d6:	83 f9 23             	cmp    ecx,0x23
c00133d9:	0f 94 c2             	sete   dl
c00133dc:	89 d5                	mov    ebp,edx
c00133de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00133e2:	09 ea                	or     edx,ebp
c00133e4:	80 e2 01             	and    dl,0x1
c00133e7:	75 47                	jne    c0013430 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00133e9:	83 e8 09             	sub    eax,0x9
c00133ec:	3c 01                	cmp    al,0x1
c00133ee:	76 40                	jbe    c0013430 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00133f0:	83 f9 5b             	cmp    ecx,0x5b
c00133f3:	75 42                	jne    c0013437 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c00133f5:	83 fe 40             	cmp    esi,0x40
c00133f8:	75 36                	jne    c0013430 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00133fa:	83 ec 0c             	sub    esp,0xc
c00133fd:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013401:	55                   	push   ebp
c0013402:	e8 79 d1 fe ff       	call   c0000580 <strlen>
c0013407:	83 c4 10             	add    esp,0x10
c001340a:	83 f8 3f             	cmp    eax,0x3f
c001340d:	0f 87 b0 00 00 00    	ja     c00134c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013413:	50                   	push   eax
c0013414:	50                   	push   eax
c0013415:	55                   	push   ebp
c0013416:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c001341a:	55                   	push   ebp
c001341b:	e8 30 d2 fe ff       	call   c0000650 <strcpy>
c0013420:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013423:	e8 58 d1 fe ff       	call   c0000580 <strlen>
c0013428:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001342d:	83 c4 10             	add    esp,0x10
c0013430:	31 d2                	xor    edx,edx
c0013432:	e9 84 00 00 00       	jmp    c00134bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0013437:	83 fe 40             	cmp    esi,0x40
c001343a:	74 06                	je     c0013442 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c001343c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013440:	eb 19                	jmp    c001345b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013442:	51                   	push   ecx
c0013443:	51                   	push   ecx
c0013444:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013448:	8d 44 24 24          	lea    eax,[esp+0x24]
c001344c:	50                   	push   eax
c001344d:	e8 2e d3 fe ff       	call   c0000780 <strcmp>
c0013452:	83 c4 10             	add    esp,0x10
c0013455:	85 c0                	test   eax,eax
c0013457:	75 d7                	jne    c0013430 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013459:	eb e1                	jmp    c001343c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c001345b:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c001345e:	85 c9                	test   ecx,ecx
c0013460:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013465:	83 f9 3d             	cmp    ecx,0x3d
c0013468:	0f 94 c0             	sete   al
c001346b:	89 c5                	mov    ebp,eax
c001346d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013471:	09 e8                	or     eax,ebp
c0013473:	a8 01                	test   al,0x1
c0013475:	89 c5                	mov    ebp,eax
c0013477:	75 03                	jne    c001347c <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013479:	42                   	inc    edx
c001347a:	eb df                	jmp    c001345b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c001347c:	85 c9                	test   ecx,ecx
c001347e:	74 43                	je     c00134c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013480:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013484:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013487:	52                   	push   edx
c0013488:	52                   	push   edx
c0013489:	8d 44 24 60          	lea    eax,[esp+0x60]
c001348d:	50                   	push   eax
c001348e:	53                   	push   ebx
c001348f:	e8 ec d2 fe ff       	call   c0000780 <strcmp>
c0013494:	83 c4 10             	add    esp,0x10
c0013497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001349b:	85 c0                	test   eax,eax
c001349d:	75 91                	jne    c0013430 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001349f:	50                   	push   eax
c00134a0:	42                   	inc    edx
c00134a1:	50                   	push   eax
c00134a2:	52                   	push   edx
c00134a3:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00134aa:	e8 a1 d1 fe ff       	call   c0000650 <strcpy>
c00134af:	83 c4 10             	add    esp,0x10
c00134b2:	eb 11                	jmp    c00134c5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c00134b4:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00134b8:	8d 50 01             	lea    edx,[eax+0x1]
c00134bb:	47                   	inc    edi
c00134bc:	89 d0                	mov    eax,edx
c00134be:	e9 df fe ff ff       	jmp    c00133a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c00134c3:	31 ed                	xor    ebp,ebp
c00134c5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00134cb:	89 e8                	mov    eax,ebp
c00134cd:	5b                   	pop    ebx
c00134ce:	5e                   	pop    esi
c00134cf:	5f                   	pop    edi
c00134d0:	5d                   	pop    ebp
c00134d1:	c3                   	ret    

c00134d2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00134d2:	57                   	push   edi
c00134d3:	56                   	push   esi
c00134d4:	53                   	push   ebx
c00134d5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00134db:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00134e2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00134e9:	53                   	push   ebx
c00134ea:	e8 91 d0 fe ff       	call   c0000580 <strlen>
c00134ef:	89 34 24             	mov    DWORD PTR [esp],esi
c00134f2:	89 c7                	mov    edi,eax
c00134f4:	e8 87 d0 fe ff       	call   c0000580 <strlen>
c00134f9:	83 c4 10             	add    esp,0x10
c00134fc:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013500:	3d ff 00 00 00       	cmp    eax,0xff
c0013505:	0f 87 d3 00 00 00    	ja     c00135de <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001350b:	57                   	push   edi
c001350c:	57                   	push   edi
c001350d:	56                   	push   esi
c001350e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013512:	56                   	push   esi
c0013513:	e8 38 d1 fe ff       	call   c0000650 <strcpy>
c0013518:	58                   	pop    eax
c0013519:	5a                   	pop    edx
c001351a:	68 b8 21 02 c0       	push   0xc00221b8
c001351f:	56                   	push   esi
c0013520:	e8 4b d3 fe ff       	call   c0000870 <strcat>
c0013525:	59                   	pop    ecx
c0013526:	5f                   	pop    edi
c0013527:	53                   	push   ebx
c0013528:	56                   	push   esi
c0013529:	e8 42 d3 fe ff       	call   c0000870 <strcat>
c001352e:	58                   	pop    eax
c001352f:	5a                   	pop    edx
c0013530:	68 64 1e 02 c0       	push   0xc0021e64
c0013535:	56                   	push   esi
c0013536:	e8 35 d3 fe ff       	call   c0000870 <strcat>
c001353b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013542:	e8 8c 45 ff ff       	call   c0007ad3 <malloc>
c0013547:	83 c4 0c             	add    esp,0xc
c001354a:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0013550:	56                   	push   esi
c0013551:	50                   	push   eax
c0013552:	89 c3                	mov    ebx,eax
c0013554:	e8 7d 81 ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c0013559:	83 c4 10             	add    esp,0x10
c001355c:	85 db                	test   ebx,ebx
c001355e:	74 7e                	je     c00135de <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013560:	51                   	push   ecx
c0013561:	51                   	push   ecx
c0013562:	6a 01                	push   0x1
c0013564:	53                   	push   ebx
c0013565:	e8 28 82 ff ff       	call   c000b792 <File::open(FileOpenMode)>
c001356a:	83 c4 10             	add    esp,0x10
c001356d:	85 c0                	test   eax,eax
c001356f:	74 08                	je     c0013579 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013571:	83 ec 0c             	sub    esp,0xc
c0013574:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013576:	53                   	push   ebx
c0013577:	eb 5f                	jmp    c00135d8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013579:	52                   	push   edx
c001357a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001357e:	50                   	push   eax
c001357f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013583:	50                   	push   eax
c0013584:	53                   	push   ebx
c0013585:	e8 0a 85 ff ff       	call   c000ba94 <File::stat(unsigned long long*, bool*)>
c001358a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001358e:	83 c4 10             	add    esp,0x10
c0013591:	89 c1                	mov    ecx,eax
c0013593:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013597:	74 31                	je     c00135ca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013599:	83 ec 0c             	sub    esp,0xc
c001359c:	50                   	push   eax
c001359d:	e8 31 45 ff ff       	call   c0007ad3 <malloc>
c00135a2:	89 c6                	mov    esi,eax
c00135a4:	58                   	pop    eax
c00135a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135a7:	8d 54 24 20          	lea    edx,[esp+0x20]
c00135ab:	52                   	push   edx
c00135ac:	56                   	push   esi
c00135ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00135b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00135b5:	53                   	push   ebx
c00135b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00135b9:	83 c4 20             	add    esp,0x20
c00135bc:	85 c0                	test   eax,eax
c00135be:	75 0a                	jne    c00135ca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00135c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135c4:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00135c8:	74 18                	je     c00135e2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00135ca:	83 ec 0c             	sub    esp,0xc
c00135cd:	53                   	push   ebx
c00135ce:	e8 1d 82 ff ff       	call   c000b7f0 <File::close()>
c00135d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00135db:	83 c4 10             	add    esp,0x10
c00135de:	31 c0                	xor    eax,eax
c00135e0:	eb 3b                	jmp    c001361d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00135e2:	83 ec 0c             	sub    esp,0xc
c00135e5:	53                   	push   ebx
c00135e6:	e8 05 82 ff ff       	call   c000b7f0 <File::close()>
c00135eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00135f3:	83 c4 0c             	add    esp,0xc
c00135f6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00135fd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013604:	56                   	push   esi
c0013605:	e8 3c fd ff ff       	call   c0013346 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001360a:	89 34 24             	mov    DWORD PTR [esp],esi
c001360d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013611:	e8 cd 44 ff ff       	call   c0007ae3 <free>
c0013616:	83 c4 10             	add    esp,0x10
c0013619:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001361d:	81 c4 20 01 00 00    	add    esp,0x120
c0013623:	5b                   	pop    ebx
c0013624:	5e                   	pop    esi
c0013625:	5f                   	pop    edi
c0013626:	c3                   	ret    

c0013627 <Reg::getLine(char*, char*, char*)>:
c0013627:	57                   	push   edi
c0013628:	56                   	push   esi
c0013629:	53                   	push   ebx
c001362a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001362e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013632:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013636:	57                   	push   edi
c0013637:	56                   	push   esi
c0013638:	53                   	push   ebx
c0013639:	68 69 1e 02 c0       	push   0xc0021e69
c001363e:	e8 8f fe ff ff       	call   c00134d2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013643:	83 c4 10             	add    esp,0x10
c0013646:	84 c0                	test   al,al
c0013648:	75 10                	jne    c001365a <Reg::getLine(char*, char*, char*)+0x33>
c001364a:	57                   	push   edi
c001364b:	56                   	push   esi
c001364c:	53                   	push   ebx
c001364d:	68 8e 1e 02 c0       	push   0xc0021e8e
c0013652:	e8 7b fe ff ff       	call   c00134d2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013657:	83 c4 10             	add    esp,0x10
c001365a:	5b                   	pop    ebx
c001365b:	5e                   	pop    esi
c001365c:	5f                   	pop    edi
c001365d:	c3                   	ret    

c001365e <Reg::readInt(char*, char*, int*)>:
c001365e:	55                   	push   ebp
c001365f:	57                   	push   edi
c0013660:	56                   	push   esi
c0013661:	53                   	push   ebx
c0013662:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013668:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001366c:	55                   	push   ebp
c001366d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013674:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001367b:	e8 a7 ff ff ff       	call   c0013627 <Reg::getLine(char*, char*, char*)>
c0013680:	83 c4 10             	add    esp,0x10
c0013683:	84 c0                	test   al,al
c0013685:	0f 84 b6 00 00 00    	je     c0013741 <Reg::readInt(char*, char*, int*)+0xe3>
c001368b:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013690:	83 fa 2b             	cmp    edx,0x2b
c0013693:	74 0c                	je     c00136a1 <Reg::readInt(char*, char*, int*)+0x43>
c0013695:	83 fa 2d             	cmp    edx,0x2d
c0013698:	75 0e                	jne    c00136a8 <Reg::readInt(char*, char*, int*)+0x4a>
c001369a:	ba 01 00 00 00       	mov    edx,0x1
c001369f:	eb 0b                	jmp    c00136ac <Reg::readInt(char*, char*, int*)+0x4e>
c00136a1:	ba 01 00 00 00       	mov    edx,0x1
c00136a6:	eb 02                	jmp    c00136aa <Reg::readInt(char*, char*, int*)+0x4c>
c00136a8:	31 d2                	xor    edx,edx
c00136aa:	31 c0                	xor    eax,eax
c00136ac:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00136b1:	be 0a 00 00 00       	mov    esi,0xa
c00136b6:	75 21                	jne    c00136d9 <Reg::readInt(char*, char*, int*)+0x7b>
c00136b8:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00136bd:	83 f9 78             	cmp    ecx,0x78
c00136c0:	75 0a                	jne    c00136cc <Reg::readInt(char*, char*, int*)+0x6e>
c00136c2:	83 c2 02             	add    edx,0x2
c00136c5:	be 10 00 00 00       	mov    esi,0x10
c00136ca:	eb 0d                	jmp    c00136d9 <Reg::readInt(char*, char*, int*)+0x7b>
c00136cc:	83 f9 62             	cmp    ecx,0x62
c00136cf:	75 08                	jne    c00136d9 <Reg::readInt(char*, char*, int*)+0x7b>
c00136d1:	83 c2 02             	add    edx,0x2
c00136d4:	be 02 00 00 00       	mov    esi,0x2
c00136d9:	01 d5                	add    ebp,edx
c00136db:	31 d2                	xor    edx,edx
c00136dd:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00136e1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00136e5:	85 c9                	test   ecx,ecx
c00136e7:	0f 94 c3             	sete   bl
c00136ea:	83 f9 0d             	cmp    ecx,0xd
c00136ed:	89 df                	mov    edi,ebx
c00136ef:	0f 94 c3             	sete   bl
c00136f2:	09 df                	or     edi,ebx
c00136f4:	89 fb                	mov    ebx,edi
c00136f6:	83 e7 01             	and    edi,0x1
c00136f9:	75 35                	jne    c0013730 <Reg::readInt(char*, char*, int*)+0xd2>
c00136fb:	0f af d6             	imul   edx,esi
c00136fe:	83 fe 10             	cmp    esi,0x10
c0013701:	75 26                	jne    c0013729 <Reg::readInt(char*, char*, int*)+0xcb>
c0013703:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013707:	83 ef 41             	sub    edi,0x41
c001370a:	89 fb                	mov    ebx,edi
c001370c:	80 fb 05             	cmp    bl,0x5
c001370f:	77 06                	ja     c0013717 <Reg::readInt(char*, char*, int*)+0xb9>
c0013711:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013715:	eb 16                	jmp    c001372d <Reg::readInt(char*, char*, int*)+0xcf>
c0013717:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001371b:	83 eb 61             	sub    ebx,0x61
c001371e:	80 fb 05             	cmp    bl,0x5
c0013721:	77 06                	ja     c0013729 <Reg::readInt(char*, char*, int*)+0xcb>
c0013723:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013727:	eb 04                	jmp    c001372d <Reg::readInt(char*, char*, int*)+0xcf>
c0013729:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c001372d:	45                   	inc    ebp
c001372e:	eb ad                	jmp    c00136dd <Reg::readInt(char*, char*, int*)+0x7f>
c0013730:	84 c0                	test   al,al
c0013732:	74 02                	je     c0013736 <Reg::readInt(char*, char*, int*)+0xd8>
c0013734:	f7 da                	neg    edx
c0013736:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001373d:	89 10                	mov    DWORD PTR [eax],edx
c001373f:	88 d8                	mov    al,bl
c0013741:	81 c4 ec 00 00 00    	add    esp,0xec
c0013747:	5b                   	pop    ebx
c0013748:	5e                   	pop    esi
c0013749:	5f                   	pop    edi
c001374a:	5d                   	pop    ebp
c001374b:	c3                   	ret    

c001374c <Reg::readString(char*, char*, char*, int)>:
c001374c:	57                   	push   edi
c001374d:	56                   	push   esi
c001374e:	53                   	push   ebx
c001374f:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013755:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013759:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013760:	57                   	push   edi
c0013761:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013768:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001376f:	e8 b3 fe ff ff       	call   c0013627 <Reg::getLine(char*, char*, char*)>
c0013774:	83 c4 10             	add    esp,0x10
c0013777:	84 c0                	test   al,al
c0013779:	89 c6                	mov    esi,eax
c001377b:	74 44                	je     c00137c1 <Reg::readString(char*, char*, char*, int)+0x75>
c001377d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013784:	31 c0                	xor    eax,eax
c0013786:	4a                   	dec    edx
c0013787:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001378a:	84 c9                	test   cl,cl
c001378c:	74 0f                	je     c001379d <Reg::readString(char*, char*, char*, int)+0x51>
c001378e:	39 c2                	cmp    edx,eax
c0013790:	7e 0b                	jle    c001379d <Reg::readString(char*, char*, char*, int)+0x51>
c0013792:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013795:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001379a:	40                   	inc    eax
c001379b:	eb ea                	jmp    c0013787 <Reg::readString(char*, char*, char*, int)+0x3b>
c001379d:	83 ec 0c             	sub    esp,0xc
c00137a0:	53                   	push   ebx
c00137a1:	e8 da cd fe ff       	call   c0000580 <strlen>
c00137a6:	83 c4 10             	add    esp,0x10
c00137a9:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00137ae:	75 11                	jne    c00137c1 <Reg::readString(char*, char*, char*, int)+0x75>
c00137b0:	83 ec 0c             	sub    esp,0xc
c00137b3:	53                   	push   ebx
c00137b4:	e8 c7 cd fe ff       	call   c0000580 <strlen>
c00137b9:	83 c4 10             	add    esp,0x10
c00137bc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00137c1:	81 c4 d0 00 00 00    	add    esp,0xd0
c00137c7:	89 f0                	mov    eax,esi
c00137c9:	5b                   	pop    ebx
c00137ca:	5e                   	pop    esi
c00137cb:	5f                   	pop    edi
c00137cc:	c3                   	ret    

c00137cd <Reg::readBool(char*, char*, bool*)>:
c00137cd:	83 ec 20             	sub    esp,0x20
c00137d0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00137d4:	50                   	push   eax
c00137d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137dd:	e8 7c fe ff ff       	call   c001365e <Reg::readInt(char*, char*, int*)>
c00137e2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00137e6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00137eb:	0f 95 02             	setne  BYTE PTR [edx]
c00137ee:	83 c4 2c             	add    esp,0x2c
c00137f1:	c3                   	ret    

c00137f2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00137f2:	53                   	push   ebx
c00137f3:	83 ec 1c             	sub    esp,0x1c
c00137f6:	8d 44 24 13          	lea    eax,[esp+0x13]
c00137fa:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00137fe:	50                   	push   eax
c00137ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013803:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013807:	e8 c1 ff ff ff       	call   c00137cd <Reg::readBool(char*, char*, bool*)>
c001380c:	83 c4 10             	add    esp,0x10
c001380f:	84 c0                	test   al,al
c0013811:	74 04                	je     c0013817 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013813:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013817:	83 c4 18             	add    esp,0x18
c001381a:	88 d8                	mov    al,bl
c001381c:	5b                   	pop    ebx
c001381d:	c3                   	ret    

c001381e <Reg::readIntWithDefault(char*, char*, int)>:
c001381e:	53                   	push   ebx
c001381f:	83 ec 1c             	sub    esp,0x1c
c0013822:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013826:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001382a:	50                   	push   eax
c001382b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001382f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013833:	e8 26 fe ff ff       	call   c001365e <Reg::readInt(char*, char*, int*)>
c0013838:	83 c4 10             	add    esp,0x10
c001383b:	84 c0                	test   al,al
c001383d:	74 04                	je     c0013843 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001383f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013843:	83 c4 18             	add    esp,0x18
c0013846:	89 d8                	mov    eax,ebx
c0013848:	5b                   	pop    ebx
c0013849:	c3                   	ret    

c001384a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001384a:	57                   	push   edi
c001384b:	56                   	push   esi
c001384c:	53                   	push   ebx
c001384d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013851:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013855:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013859:	56                   	push   esi
c001385a:	57                   	push   edi
c001385b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001385f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013863:	e8 e4 fe ff ff       	call   c001374c <Reg::readString(char*, char*, char*, int)>
c0013868:	83 c4 10             	add    esp,0x10
c001386b:	84 c0                	test   al,al
c001386d:	75 16                	jne    c0013885 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001386f:	50                   	push   eax
c0013870:	56                   	push   esi
c0013871:	6a 00                	push   0x0
c0013873:	57                   	push   edi
c0013874:	e8 77 cc fe ff       	call   c00004f0 <memset>
c0013879:	8d 4e ff             	lea    ecx,[esi-0x1]
c001387c:	89 de                	mov    esi,ebx
c001387e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013880:	83 c4 10             	add    esp,0x10
c0013883:	89 df                	mov    edi,ebx
c0013885:	5b                   	pop    ebx
c0013886:	89 f8                	mov    eax,edi
c0013888:	5e                   	pop    esi
c0013889:	5f                   	pop    edi
c001388a:	c3                   	ret    

c001388b <SysEject(regs*)>:
c001388b:	83 ec 0c             	sub    esp,0xc
c001388e:	83 ca ff             	or     edx,0xffffffff
c0013891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013895:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013898:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001389d:	83 e9 41             	sub    ecx,0x41
c00138a0:	83 f9 19             	cmp    ecx,0x19
c00138a3:	77 18                	ja     c00138bd <SysEject(regs*)+0x32>
c00138a5:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c00138ac:	85 c9                	test   ecx,ecx
c00138ae:	74 0d                	je     c00138bd <SysEject(regs*)+0x32>
c00138b0:	83 ec 0c             	sub    esp,0xc
c00138b3:	51                   	push   ecx
c00138b4:	e8 ab a0 ff ff       	call   c000d964 <LogicalDisk::eject()>
c00138b9:	83 c4 10             	add    esp,0x10
c00138bc:	99                   	cdq    
c00138bd:	83 c4 0c             	add    esp,0xc
c00138c0:	c3                   	ret    

c00138c1 <SysExit(regs*)>:
c00138c1:	83 ec 18             	sub    esp,0x18
c00138c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00138c8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00138cb:	e8 10 2b 00 00       	call   c00163e0 <terminateTask(int)>
c00138d0:	83 c8 ff             	or     eax,0xffffffff
c00138d3:	83 c4 1c             	add    esp,0x1c
c00138d6:	89 c2                	mov    edx,eax
c00138d8:	c3                   	ret    

c00138d9 <SysGetCwd(regs*)>:
c00138d9:	83 ec 10             	sub    esp,0x10
c00138dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00138e0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00138e3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00138e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138eb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00138ee:	e8 b3 7b ff ff       	call   c000b4a6 <Fs::getcwd(Process*, char*, int)>
c00138f3:	83 c4 1c             	add    esp,0x1c
c00138f6:	99                   	cdq    
c00138f7:	c3                   	ret    

c00138f8 <SysGetPID(regs*)>:
c00138f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013900:	8b 00                	mov    eax,DWORD PTR [eax]
c0013902:	99                   	cdq    
c0013903:	c3                   	ret    

c0013904 <SysGetRAMData(regs*)>:
c0013904:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c001390e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013914:	99                   	cdq    
c0013915:	f7 f9                	idiv   ecx
c0013917:	c1 e0 18             	shl    eax,0x18
c001391a:	09 c8                	or     eax,ecx
c001391c:	99                   	cdq    
c001391d:	c3                   	ret    

c001391e <SysGetVGAPtr(regs*)>:
c001391e:	55                   	push   ebp
c001391f:	57                   	push   edi
c0013920:	56                   	push   esi
c0013921:	53                   	push   ebx
c0013922:	83 ec 18             	sub    esp,0x18
c0013925:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013929:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001392c:	e8 7b 25 00 00       	call   c0015eac <Thr::processFromPID(int)>
c0013931:	83 c4 10             	add    esp,0x10
c0013934:	89 c1                	mov    ecx,eax
c0013936:	b8 01 00 00 00       	mov    eax,0x1
c001393b:	85 c9                	test   ecx,ecx
c001393d:	74 57                	je     c0013996 <SysGetVGAPtr(regs*)+0x78>
c001393f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013943:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013949:	74 0c                	je     c0013957 <SysGetVGAPtr(regs*)+0x39>
c001394b:	83 ec 0c             	sub    esp,0xc
c001394e:	55                   	push   ebp
c001394f:	e8 1b 4e ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013954:	83 c4 10             	add    esp,0x10
c0013957:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001395a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001395f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013962:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013964:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013967:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001396a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013970:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013973:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013976:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001397c:	50                   	push   eax
c001397d:	50                   	push   eax
c001397e:	68 a9 1e 02 c0       	push   0xc0021ea9
c0013983:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013986:	05 a8 0f 00 00       	add    eax,0xfa8
c001398b:	50                   	push   eax
c001398c:	e8 bf cc fe ff       	call   c0000650 <strcpy>
c0013991:	83 c4 10             	add    esp,0x10
c0013994:	31 c0                	xor    eax,eax
c0013996:	83 c4 0c             	add    esp,0xc
c0013999:	31 d2                	xor    edx,edx
c001399b:	5b                   	pop    ebx
c001399c:	5e                   	pop    esi
c001399d:	5f                   	pop    edi
c001399e:	5d                   	pop    ebp
c001399f:	c3                   	ret    

c00139a0 <SysKill(regs*)>:
c00139a0:	53                   	push   ebx
c00139a1:	83 ec 08             	sub    esp,0x8
c00139a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139a8:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00139ac:	75 16                	jne    c00139c4 <SysKill(regs*)+0x24>
c00139ae:	83 ec 0c             	sub    esp,0xc
c00139b1:	68 b3 1e 02 c0       	push   0xc0021eb3
c00139b6:	e8 a2 d7 ff ff       	call   c001115d <KePanic(char const*)>
c00139bb:	83 c4 10             	add    esp,0x10
c00139be:	e9 89 00 00 00       	jmp    c0013a4c <SysKill(regs*)+0xac>
c00139c3:	90                   	nop
c00139c4:	83 ec 0c             	sub    esp,0xc
c00139c7:	68 84 a4 02 c0       	push   0xc002a484
c00139cc:	e8 3b bd 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00139d1:	8d 76 00             	lea    esi,[esi+0x0]
c00139d4:	83 c4 10             	add    esp,0x10
c00139d7:	85 c0                	test   eax,eax
c00139d9:	74 19                	je     c00139f4 <SysKill(regs*)+0x54>
c00139db:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00139de:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00139e1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00139e3:	74 33                	je     c0013a18 <SysKill(regs*)+0x78>
c00139e5:	52                   	push   edx
c00139e6:	52                   	push   edx
c00139e7:	50                   	push   eax
c00139e8:	68 84 a4 02 c0       	push   0xc002a484
c00139ed:	e8 3a c0 00 00       	call   c001fa2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00139f2:	eb e0                	jmp    c00139d4 <SysKill(regs*)+0x34>
c00139f4:	83 ec 0c             	sub    esp,0xc
c00139f7:	68 78 a4 02 c0       	push   0xc002a478
c00139fc:	e8 0b bd 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a01:	8d 76 00             	lea    esi,[esi+0x0]
c0013a04:	83 c4 10             	add    esp,0x10
c0013a07:	85 c0                	test   eax,eax
c0013a09:	74 41                	je     c0013a4c <SysKill(regs*)+0xac>
c0013a0b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013a0e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a11:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013a13:	75 27                	jne    c0013a3c <SysKill(regs*)+0x9c>
c0013a15:	8d 76 00             	lea    esi,[esi+0x0]
c0013a18:	51                   	push   ecx
c0013a19:	51                   	push   ecx
c0013a1a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013a1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a22:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a25:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013a2b:	e8 cb db ff ff       	call   c00115fb <KeRaiseSignal(SigHandlerBlock*, int)>
c0013a30:	83 c4 10             	add    esp,0x10
c0013a33:	31 c0                	xor    eax,eax
c0013a35:	31 d2                	xor    edx,edx
c0013a37:	eb 1b                	jmp    c0013a54 <SysKill(regs*)+0xb4>
c0013a39:	8d 76 00             	lea    esi,[esi+0x0]
c0013a3c:	52                   	push   edx
c0013a3d:	52                   	push   edx
c0013a3e:	50                   	push   eax
c0013a3f:	68 78 a4 02 c0       	push   0xc002a478
c0013a44:	e8 e3 bf 00 00       	call   c001fa2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013a49:	eb b9                	jmp    c0013a04 <SysKill(regs*)+0x64>
c0013a4b:	90                   	nop
c0013a4c:	83 c8 ff             	or     eax,0xffffffff
c0013a4f:	89 c2                	mov    edx,eax
c0013a51:	8d 76 00             	lea    esi,[esi+0x0]
c0013a54:	83 c4 08             	add    esp,0x8
c0013a57:	5b                   	pop    ebx
c0013a58:	c3                   	ret    

c0013a59 <SysLoadDLL(regs*)>:
c0013a59:	56                   	push   esi
c0013a5a:	31 d2                	xor    edx,edx
c0013a5c:	53                   	push   ebx
c0013a5d:	b8 01 00 00 00       	mov    eax,0x1
c0013a62:	51                   	push   ecx
c0013a63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a67:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013a6b:	0f 84 8c 00 00 00    	je     c0013afd <SysLoadDLL(regs*)+0xa4>
c0013a71:	83 ec 0c             	sub    esp,0xc
c0013a74:	68 14 01 00 00       	push   0x114
c0013a79:	e8 55 40 ff ff       	call   c0007ad3 <malloc>
c0013a7e:	83 c4 0c             	add    esp,0xc
c0013a81:	89 c3                	mov    ebx,eax
c0013a83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a88:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013a8b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013a8e:	53                   	push   ebx
c0013a8f:	e8 42 7c ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c0013a94:	83 c4 10             	add    esp,0x10
c0013a97:	31 d2                	xor    edx,edx
c0013a99:	85 db                	test   ebx,ebx
c0013a9b:	b8 02 00 00 00       	mov    eax,0x2
c0013aa0:	74 5b                	je     c0013afd <SysLoadDLL(regs*)+0xa4>
c0013aa2:	83 ec 0c             	sub    esp,0xc
c0013aa5:	53                   	push   ebx
c0013aa6:	e8 ab 7f ff ff       	call   c000ba56 <File::exists()>
c0013aab:	83 c4 10             	add    esp,0x10
c0013aae:	84 c0                	test   al,al
c0013ab0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ab2:	75 11                	jne    c0013ac5 <SysLoadDLL(regs*)+0x6c>
c0013ab4:	83 ec 0c             	sub    esp,0xc
c0013ab7:	53                   	push   ebx
c0013ab8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013abb:	83 c4 10             	add    esp,0x10
c0013abe:	b8 03 00 00 00       	mov    eax,0x3
c0013ac3:	eb 36                	jmp    c0013afb <SysLoadDLL(regs*)+0xa2>
c0013ac5:	83 ec 0c             	sub    esp,0xc
c0013ac8:	53                   	push   ebx
c0013ac9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013acc:	58                   	pop    eax
c0013acd:	5a                   	pop    edx
c0013ace:	6a 00                	push   0x0
c0013ad0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013ad3:	e8 1c 15 00 00       	call   c0014ff4 <Thr::loadDLL(char const*, bool)>
c0013ad8:	83 c4 10             	add    esp,0x10
c0013adb:	31 d2                	xor    edx,edx
c0013add:	89 c1                	mov    ecx,eax
c0013adf:	b8 04 00 00 00       	mov    eax,0x4
c0013ae4:	85 c9                	test   ecx,ecx
c0013ae6:	74 15                	je     c0013afd <SysLoadDLL(regs*)+0xa4>
c0013ae8:	53                   	push   ebx
c0013ae9:	53                   	push   ebx
c0013aea:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013af0:	51                   	push   ecx
c0013af1:	e8 3e 17 00 00       	call   c0015234 <Thr::executeDLL(unsigned long, void*)>
c0013af6:	83 c4 10             	add    esp,0x10
c0013af9:	31 c0                	xor    eax,eax
c0013afb:	31 d2                	xor    edx,edx
c0013afd:	59                   	pop    ecx
c0013afe:	5b                   	pop    ebx
c0013aff:	5e                   	pop    esi
c0013b00:	c3                   	ret    

c0013b01 <SysRead(regs*)>:
c0013b01:	57                   	push   edi
c0013b02:	56                   	push   esi
c0013b03:	53                   	push   ebx
c0013b04:	83 ec 10             	sub    esp,0x10
c0013b07:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013b0b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b0e:	83 f8 02             	cmp    eax,0x2
c0013b11:	77 10                	ja     c0013b23 <SysRead(regs*)+0x22>
c0013b13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b18:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b1b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013b21:	eb 0e                	jmp    c0013b31 <SysRead(regs*)+0x30>
c0013b23:	83 ec 0c             	sub    esp,0xc
c0013b26:	50                   	push   eax
c0013b27:	e8 6f 59 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013b2c:	83 c4 10             	add    esp,0x10
c0013b2f:	89 c1                	mov    ecx,eax
c0013b31:	83 c8 ff             	or     eax,0xffffffff
c0013b34:	85 c9                	test   ecx,ecx
c0013b36:	89 c2                	mov    edx,eax
c0013b38:	74 28                	je     c0013b62 <SysRead(regs*)+0x61>
c0013b3a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013b42:	83 ec 0c             	sub    esp,0xc
c0013b45:	31 ff                	xor    edi,edi
c0013b47:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b4b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b4d:	52                   	push   edx
c0013b4e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013b51:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013b54:	57                   	push   edi
c0013b55:	56                   	push   esi
c0013b56:	51                   	push   ecx
c0013b57:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013b5e:	83 c4 20             	add    esp,0x20
c0013b61:	99                   	cdq    
c0013b62:	83 c4 10             	add    esp,0x10
c0013b65:	5b                   	pop    ebx
c0013b66:	5e                   	pop    esi
c0013b67:	5f                   	pop    edi
c0013b68:	c3                   	ret    

c0013b69 <SysRegisterSignal(regs*)>:
c0013b69:	83 ec 18             	sub    esp,0x18
c0013b6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b70:	6a 00                	push   0x0
c0013b72:	6a 00                	push   0x0
c0013b74:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013b77:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013b7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b7f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b82:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013b88:	e8 38 da ff ff       	call   c00115c5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013b8d:	83 c4 2c             	add    esp,0x2c
c0013b90:	99                   	cdq    
c0013b91:	c3                   	ret    

c0013b92 <SysRegistryGetTypeFromPath(regs*)>:
c0013b92:	57                   	push   edi
c0013b93:	56                   	push   esi
c0013b94:	53                   	push   ebx
c0013b95:	81 ec 38 01 00 00    	sub    esp,0x138
c0013b9b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013ba2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ba5:	68 d4 1e 02 c0       	push   0xc0021ed4
c0013baa:	e8 5b 6d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013baf:	5a                   	pop    edx
c0013bb0:	59                   	pop    ecx
c0013bb1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013bb4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013bb7:	e8 34 f6 ff ff       	call   c00131f0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013bbc:	5f                   	pop    edi
c0013bbd:	5a                   	pop    edx
c0013bbe:	89 c6                	mov    esi,eax
c0013bc0:	50                   	push   eax
c0013bc1:	68 f4 1e 02 c0       	push   0xc0021ef4
c0013bc6:	e8 3f 6d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013bcb:	83 c4 10             	add    esp,0x10
c0013bce:	85 f6                	test   esi,esi
c0013bd0:	74 28                	je     c0013bfa <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013bd2:	50                   	push   eax
c0013bd3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013bd7:	57                   	push   edi
c0013bd8:	56                   	push   esi
c0013bd9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013bdc:	e8 f4 f1 ff ff       	call   c0012dd5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013be1:	83 c4 0c             	add    esp,0xc
c0013be4:	57                   	push   edi
c0013be5:	50                   	push   eax
c0013be6:	89 c3                	mov    ebx,eax
c0013be8:	68 fc 1e 02 c0       	push   0xc0021efc
c0013bed:	e8 18 6d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013bf2:	89 d8                	mov    eax,ebx
c0013bf4:	83 c4 10             	add    esp,0x10
c0013bf7:	99                   	cdq    
c0013bf8:	eb 05                	jmp    c0013bff <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013bfa:	83 c8 ff             	or     eax,0xffffffff
c0013bfd:	89 c2                	mov    edx,eax
c0013bff:	81 c4 30 01 00 00    	add    esp,0x130
c0013c05:	5b                   	pop    ebx
c0013c06:	5e                   	pop    esi
c0013c07:	5f                   	pop    edi
c0013c08:	c3                   	ret    

c0013c09 <SysRegistryReadExtent(regs*)>:
c0013c09:	83 ec 1c             	sub    esp,0x1c
c0013c0c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c10:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013c13:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013c16:	85 c0                	test   eax,eax
c0013c18:	79 1f                	jns    c0013c39 <SysRegistryReadExtent(regs*)+0x30>
c0013c1a:	52                   	push   edx
c0013c1b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013c20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013c24:	52                   	push   edx
c0013c25:	50                   	push   eax
c0013c26:	51                   	push   ecx
c0013c27:	e8 9b f0 ff ff       	call   c0012cc7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013c2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013c34:	83 c4 10             	add    esp,0x10
c0013c37:	eb 14                	jmp    c0013c4d <SysRegistryReadExtent(regs*)+0x44>
c0013c39:	83 ec 04             	sub    esp,0x4
c0013c3c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013c3f:	50                   	push   eax
c0013c40:	51                   	push   ecx
c0013c41:	e8 1f eb ff ff       	call   c0012765 <CmGetString(Reghive_Tag*, int, char*)>
c0013c46:	83 c4 10             	add    esp,0x10
c0013c49:	31 c0                	xor    eax,eax
c0013c4b:	31 d2                	xor    edx,edx
c0013c4d:	83 c4 1c             	add    esp,0x1c
c0013c50:	c3                   	ret    

c0013c51 <SysRegistryPathToExtentLookup(regs*)>:
c0013c51:	53                   	push   ebx
c0013c52:	83 ec 10             	sub    esp,0x10
c0013c55:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c59:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c5c:	68 12 1f 02 c0       	push   0xc0021f12
c0013c61:	e8 a4 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013c66:	58                   	pop    eax
c0013c67:	5a                   	pop    edx
c0013c68:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c6b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c6e:	e8 7d f5 ff ff       	call   c00131f0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013c73:	83 c4 18             	add    esp,0x18
c0013c76:	5b                   	pop    ebx
c0013c77:	99                   	cdq    
c0013c78:	c3                   	ret    

c0013c79 <SysRegistryEnterDirectory(regs*)>:
c0013c79:	53                   	push   ebx
c0013c7a:	83 ec 10             	sub    esp,0x10
c0013c7d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c81:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013c84:	68 35 1f 02 c0       	push   0xc0021f35
c0013c89:	e8 7c 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013c8e:	58                   	pop    eax
c0013c8f:	5a                   	pop    edx
c0013c90:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013c93:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c96:	e8 41 eb ff ff       	call   c00127dc <CmEnterDirectory(Reghive_Tag*, int)>
c0013c9b:	83 c4 18             	add    esp,0x18
c0013c9e:	5b                   	pop    ebx
c0013c9f:	99                   	cdq    
c0013ca0:	c3                   	ret    

c0013ca1 <SysRegistryGetNext(regs*)>:
c0013ca1:	53                   	push   ebx
c0013ca2:	83 ec 10             	sub    esp,0x10
c0013ca5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ca9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013cac:	68 53 1f 02 c0       	push   0xc0021f53
c0013cb1:	e8 54 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013cb6:	58                   	pop    eax
c0013cb7:	5a                   	pop    edx
c0013cb8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013cbb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013cbe:	e8 58 eb ff ff       	call   c001281b <CmGetNext(Reghive_Tag*, int)>
c0013cc3:	83 c4 18             	add    esp,0x18
c0013cc6:	5b                   	pop    ebx
c0013cc7:	99                   	cdq    
c0013cc8:	c3                   	ret    

c0013cc9 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013cc9:	57                   	push   edi
c0013cca:	56                   	push   esi
c0013ccb:	53                   	push   ebx
c0013ccc:	81 ec 34 01 00 00    	sub    esp,0x134
c0013cd2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013cd9:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013cdd:	57                   	push   edi
c0013cde:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013ce1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013ce4:	e8 ec f0 ff ff       	call   c0012dd5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013ce9:	89 c3                	mov    ebx,eax
c0013ceb:	58                   	pop    eax
c0013cec:	5a                   	pop    edx
c0013ced:	57                   	push   edi
c0013cee:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013cf1:	e8 5a c9 fe ff       	call   c0000650 <strcpy>
c0013cf6:	81 c4 40 01 00 00    	add    esp,0x140
c0013cfc:	89 d8                	mov    eax,ebx
c0013cfe:	5b                   	pop    ebx
c0013cff:	99                   	cdq    
c0013d00:	5e                   	pop    esi
c0013d01:	5f                   	pop    edi
c0013d02:	c3                   	ret    

c0013d03 <SysRegistryOpen(regs*)>:
c0013d03:	83 ec 18             	sub    esp,0x18
c0013d06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d0a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d0d:	e8 e3 e8 ff ff       	call   c00125f5 <CmOpen(char const*)>
c0013d12:	83 c4 1c             	add    esp,0x1c
c0013d15:	99                   	cdq    
c0013d16:	c3                   	ret    

c0013d17 <SysRegistryClose(regs*)>:
c0013d17:	83 ec 18             	sub    esp,0x18
c0013d1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d1e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d21:	e8 ed e9 ff ff       	call   c0012713 <CmClose(Reghive_Tag*)>
c0013d26:	31 c0                	xor    eax,eax
c0013d28:	31 d2                	xor    edx,edx
c0013d2a:	83 c4 1c             	add    esp,0x1c
c0013d2d:	c3                   	ret    

c0013d2e <SysSbrk(regs*)>:
c0013d2e:	56                   	push   esi
c0013d2f:	53                   	push   ebx
c0013d30:	50                   	push   eax
c0013d31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d3a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d3d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013d40:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013d46:	85 db                	test   ebx,ebx
c0013d48:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013d4b:	74 02                	je     c0013d4f <SysSbrk(regs*)+0x21>
c0013d4d:	79 06                	jns    c0013d55 <SysSbrk(regs*)+0x27>
c0013d4f:	89 f0                	mov    eax,esi
c0013d51:	31 d2                	xor    edx,edx
c0013d53:	eb 2a                	jmp    c0013d7f <SysSbrk(regs*)+0x51>
c0013d55:	83 c8 ff             	or     eax,0xffffffff
c0013d58:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013d5e:	89 c2                	mov    edx,eax
c0013d60:	77 1d                	ja     c0013d7f <SysSbrk(regs*)+0x51>
c0013d62:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013d68:	50                   	push   eax
c0013d69:	68 07 0c 00 00       	push   0xc07
c0013d6e:	c1 ea 0c             	shr    edx,0xc
c0013d71:	52                   	push   edx
c0013d72:	51                   	push   ecx
c0013d73:	e8 8e 60 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0013d78:	89 f0                	mov    eax,esi
c0013d7a:	31 d2                	xor    edx,edx
c0013d7c:	83 c4 10             	add    esp,0x10
c0013d7f:	59                   	pop    ecx
c0013d80:	5b                   	pop    ebx
c0013d81:	5e                   	pop    esi
c0013d82:	c3                   	ret    

c0013d83 <SysSetCwd(regs*)>:
c0013d83:	83 ec 14             	sub    esp,0x14
c0013d86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d8a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d92:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013d95:	e8 5b 7d ff ff       	call   c000baf5 <Fs::setcwd(Process*, char*)>
c0013d9a:	83 c4 1c             	add    esp,0x1c
c0013d9d:	99                   	cdq    
c0013d9e:	c3                   	ret    

c0013d9f <SysSetTime(regs*)>:
c0013d9f:	55                   	push   ebp
c0013da0:	31 c9                	xor    ecx,ecx
c0013da2:	57                   	push   edi
c0013da3:	bd 0c 00 00 00       	mov    ebp,0xc
c0013da8:	56                   	push   esi
c0013da9:	53                   	push   ebx
c0013daa:	31 db                	xor    ebx,ebx
c0013dac:	83 ec 10             	sub    esp,0x10
c0013daf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013db3:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013db6:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013db9:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013dbc:	89 c2                	mov    edx,eax
c0013dbe:	c1 e8 05             	shr    eax,0x5
c0013dc1:	83 e2 1f             	and    edx,0x1f
c0013dc4:	42                   	inc    edx
c0013dc5:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013dcb:	c1 e7 10             	shl    edi,0x10
c0013dce:	88 d1                	mov    cl,dl
c0013dd0:	31 d2                	xor    edx,edx
c0013dd2:	f7 f5                	div    ebp
c0013dd4:	89 dd                	mov    ebp,ebx
c0013dd6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013ddc:	88 d5                	mov    ch,dl
c0013dde:	31 d2                	xor    edx,edx
c0013de0:	0f b7 c1             	movzx  eax,cx
c0013de3:	09 f8                	or     eax,edi
c0013de5:	bf 3c 00 00 00       	mov    edi,0x3c
c0013dea:	89 c1                	mov    ecx,eax
c0013dec:	89 f0                	mov    eax,esi
c0013dee:	f7 f7                	div    edi
c0013df0:	c1 e2 10             	shl    edx,0x10
c0013df3:	09 d5                	or     ebp,edx
c0013df5:	31 d2                	xor    edx,edx
c0013df7:	f7 f7                	div    edi
c0013df9:	89 eb                	mov    ebx,ebp
c0013dfb:	bf 10 0e 00 00       	mov    edi,0xe10
c0013e00:	89 f0                	mov    eax,esi
c0013e02:	88 d7                	mov    bh,dl
c0013e04:	31 d2                	xor    edx,edx
c0013e06:	f7 f7                	div    edi
c0013e08:	bf 18 00 00 00       	mov    edi,0x18
c0013e0d:	31 d2                	xor    edx,edx
c0013e0f:	f7 f7                	div    edi
c0013e11:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013e16:	88 d3                	mov    bl,dl
c0013e18:	53                   	push   ebx
c0013e19:	51                   	push   ecx
c0013e1a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013e20:	e8 d3 84 ff ff       	call   c000c2f8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013e25:	83 c4 1c             	add    esp,0x1c
c0013e28:	31 d2                	xor    edx,edx
c0013e2a:	5b                   	pop    ebx
c0013e2b:	5e                   	pop    esi
c0013e2c:	83 f0 01             	xor    eax,0x1
c0013e2f:	5f                   	pop    edi
c0013e30:	0f b6 c0             	movzx  eax,al
c0013e33:	5d                   	pop    ebp
c0013e34:	c3                   	ret    

c0013e35 <SysTimezone(regs*)>:
c0013e35:	53                   	push   ebx
c0013e36:	83 ec 08             	sub    esp,0x8
c0013e39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e3d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013e41:	75 17                	jne    c0013e5a <SysTimezone(regs*)+0x25>
c0013e43:	83 ec 0c             	sub    esp,0xc
c0013e46:	68 6a 1f 02 c0       	push   0xc0021f6a
c0013e4b:	e8 ba 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e50:	83 c8 ff             	or     eax,0xffffffff
c0013e53:	83 c4 10             	add    esp,0x10
c0013e56:	89 c2                	mov    edx,eax
c0013e58:	eb 20                	jmp    c0013e7a <SysTimezone(regs*)+0x45>
c0013e5a:	83 ec 0c             	sub    esp,0xc
c0013e5d:	68 7f 1f 02 c0       	push   0xc0021f7f
c0013e62:	e8 a3 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e67:	58                   	pop    eax
c0013e68:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e6b:	e8 ec 81 ff ff       	call   c000c05c <User::loadClockSettings(int)>
c0013e70:	83 c4 10             	add    esp,0x10
c0013e73:	b8 01 00 00 00       	mov    eax,0x1
c0013e78:	31 d2                	xor    edx,edx
c0013e7a:	83 c4 08             	add    esp,0x8
c0013e7d:	5b                   	pop    ebx
c0013e7e:	c3                   	ret    

c0013e7f <SysTruncate(regs*)>:
c0013e7f:	55                   	push   ebp
c0013e80:	57                   	push   edi
c0013e81:	31 ff                	xor    edi,edi
c0013e83:	56                   	push   esi
c0013e84:	53                   	push   ebx
c0013e85:	83 ec 0c             	sub    esp,0xc
c0013e88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e8c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013e8f:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013e93:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013e96:	89 ce                	mov    esi,ecx
c0013e98:	0f 84 9a 00 00 00    	je     c0013f38 <SysTruncate(regs*)+0xb9>
c0013e9e:	83 ec 0c             	sub    esp,0xc
c0013ea1:	68 14 01 00 00       	push   0x114
c0013ea6:	e8 28 3c ff ff       	call   c0007ad3 <malloc>
c0013eab:	83 c4 0c             	add    esp,0xc
c0013eae:	89 c3                	mov    ebx,eax
c0013eb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013eb5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013eb8:	55                   	push   ebp
c0013eb9:	53                   	push   ebx
c0013eba:	e8 17 78 ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c0013ebf:	83 c4 10             	add    esp,0x10
c0013ec2:	31 d2                	xor    edx,edx
c0013ec4:	85 db                	test   ebx,ebx
c0013ec6:	b8 03 00 00 00       	mov    eax,0x3
c0013ecb:	0f 84 a2 00 00 00    	je     c0013f73 <SysTruncate(regs*)+0xf4>
c0013ed1:	51                   	push   ecx
c0013ed2:	51                   	push   ecx
c0013ed3:	6a 02                	push   0x2
c0013ed5:	53                   	push   ebx
c0013ed6:	e8 b7 78 ff ff       	call   c000b792 <File::open(FileOpenMode)>
c0013edb:	83 c4 10             	add    esp,0x10
c0013ede:	85 c0                	test   eax,eax
c0013ee0:	74 13                	je     c0013ef5 <SysTruncate(regs*)+0x76>
c0013ee2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ee4:	83 ec 0c             	sub    esp,0xc
c0013ee7:	53                   	push   ebx
c0013ee8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013eeb:	83 c4 10             	add    esp,0x10
c0013eee:	b8 04 00 00 00       	mov    eax,0x4
c0013ef3:	eb 7c                	jmp    c0013f71 <SysTruncate(regs*)+0xf2>
c0013ef5:	52                   	push   edx
c0013ef6:	57                   	push   edi
c0013ef7:	56                   	push   esi
c0013ef8:	53                   	push   ebx
c0013ef9:	e8 a8 79 ff ff       	call   c000b8a6 <File::truncate(unsigned long long)>
c0013efe:	83 c4 10             	add    esp,0x10
c0013f01:	85 c0                	test   eax,eax
c0013f03:	74 1b                	je     c0013f20 <SysTruncate(regs*)+0xa1>
c0013f05:	83 ec 0c             	sub    esp,0xc
c0013f08:	53                   	push   ebx
c0013f09:	e8 e2 78 ff ff       	call   c000b7f0 <File::close()>
c0013f0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f13:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f16:	83 c4 10             	add    esp,0x10
c0013f19:	b8 05 00 00 00       	mov    eax,0x5
c0013f1e:	eb 51                	jmp    c0013f71 <SysTruncate(regs*)+0xf2>
c0013f20:	83 ec 0c             	sub    esp,0xc
c0013f23:	53                   	push   ebx
c0013f24:	e8 c7 78 ff ff       	call   c000b7f0 <File::close()>
c0013f29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f2e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f31:	83 c4 10             	add    esp,0x10
c0013f34:	31 c0                	xor    eax,eax
c0013f36:	eb 39                	jmp    c0013f71 <SysTruncate(regs*)+0xf2>
c0013f38:	31 d2                	xor    edx,edx
c0013f3a:	83 fd 02             	cmp    ebp,0x2
c0013f3d:	b8 01 00 00 00       	mov    eax,0x1
c0013f42:	7e 2f                	jle    c0013f73 <SysTruncate(regs*)+0xf4>
c0013f44:	83 ec 0c             	sub    esp,0xc
c0013f47:	51                   	push   ecx
c0013f48:	e8 4e 55 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013f4d:	83 c4 10             	add    esp,0x10
c0013f50:	31 d2                	xor    edx,edx
c0013f52:	89 c1                	mov    ecx,eax
c0013f54:	b8 02 00 00 00       	mov    eax,0x2
c0013f59:	85 c9                	test   ecx,ecx
c0013f5b:	74 16                	je     c0013f73 <SysTruncate(regs*)+0xf4>
c0013f5d:	50                   	push   eax
c0013f5e:	57                   	push   edi
c0013f5f:	56                   	push   esi
c0013f60:	51                   	push   ecx
c0013f61:	e8 40 79 ff ff       	call   c000b8a6 <File::truncate(unsigned long long)>
c0013f66:	83 c4 10             	add    esp,0x10
c0013f69:	85 c0                	test   eax,eax
c0013f6b:	0f 95 c0             	setne  al
c0013f6e:	0f b6 c0             	movzx  eax,al
c0013f71:	31 d2                	xor    edx,edx
c0013f73:	83 c4 0c             	add    esp,0xc
c0013f76:	5b                   	pop    ebx
c0013f77:	5e                   	pop    esi
c0013f78:	5f                   	pop    edi
c0013f79:	5d                   	pop    ebp
c0013f7a:	c3                   	ret    

c0013f7b <SysWrite(regs*)>:
c0013f7b:	57                   	push   edi
c0013f7c:	56                   	push   esi
c0013f7d:	53                   	push   ebx
c0013f7e:	83 ec 10             	sub    esp,0x10
c0013f81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013f85:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f88:	83 f8 02             	cmp    eax,0x2
c0013f8b:	77 10                	ja     c0013f9d <SysWrite(regs*)+0x22>
c0013f8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f92:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f95:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013f9b:	eb 0e                	jmp    c0013fab <SysWrite(regs*)+0x30>
c0013f9d:	83 ec 0c             	sub    esp,0xc
c0013fa0:	50                   	push   eax
c0013fa1:	e8 f5 54 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013fa6:	83 c4 10             	add    esp,0x10
c0013fa9:	89 c1                	mov    ecx,eax
c0013fab:	83 c8 ff             	or     eax,0xffffffff
c0013fae:	85 c9                	test   ecx,ecx
c0013fb0:	89 c2                	mov    edx,eax
c0013fb2:	74 28                	je     c0013fdc <SysWrite(regs*)+0x61>
c0013fb4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fbc:	83 ec 0c             	sub    esp,0xc
c0013fbf:	31 ff                	xor    edi,edi
c0013fc1:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013fc5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013fc7:	52                   	push   edx
c0013fc8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013fcb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013fce:	57                   	push   edi
c0013fcf:	56                   	push   esi
c0013fd0:	51                   	push   ecx
c0013fd1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013fd4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013fd8:	83 c4 20             	add    esp,0x20
c0013fdb:	99                   	cdq    
c0013fdc:	83 c4 10             	add    esp,0x10
c0013fdf:	5b                   	pop    ebx
c0013fe0:	5e                   	pop    esi
c0013fe1:	5f                   	pop    edi
c0013fe2:	c3                   	ret    

c0013fe3 <SysWsbe(regs*)>:
c0013fe3:	57                   	push   edi
c0013fe4:	b9 0b 00 00 00       	mov    ecx,0xb
c0013fe9:	56                   	push   esi
c0013fea:	be be 1f 02 c0       	mov    esi,0xc0021fbe
c0013fef:	53                   	push   ebx
c0013ff0:	83 ec 30             	sub    esp,0x30
c0013ff3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013ff7:	fc                   	cld    
c0013ff8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013ffa:	83 ec 0c             	sub    esp,0xc
c0013ffd:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014001:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014006:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014009:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001400f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014011:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014014:	57                   	push   edi
c0014015:	e8 66 c5 fe ff       	call   c0000580 <strlen>
c001401a:	5a                   	pop    edx
c001401b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001401f:	52                   	push   edx
c0014020:	31 d2                	xor    edx,edx
c0014022:	57                   	push   edi
c0014023:	52                   	push   edx
c0014024:	50                   	push   eax
c0014025:	56                   	push   esi
c0014026:	ff d3                	call   ebx
c0014028:	83 c4 14             	add    esp,0x14
c001402b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001402f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014032:	e8 a9 23 00 00       	call   c00163e0 <terminateTask(int)>
c0014037:	83 c4 40             	add    esp,0x40
c001403a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001403f:	5b                   	pop    ebx
c0014040:	31 d2                	xor    edx,edx
c0014042:	5e                   	pop    esi
c0014043:	5f                   	pop    edi
c0014044:	c3                   	ret    

c0014045 <SysYield(regs*)>:
c0014045:	83 ec 0c             	sub    esp,0xc
c0014048:	fa                   	cli    
c0014049:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001404f:	e8 0c 1a 00 00       	call   c0015a60 <schedule()>
c0014054:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0014059:	48                   	dec    eax
c001405a:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001405f:	75 01                	jne    c0014062 <SysYield(regs*)+0x1d>
c0014061:	fb                   	sti    
c0014062:	31 c0                	xor    eax,eax
c0014064:	31 d2                	xor    edx,edx
c0014066:	83 c4 0c             	add    esp,0xc
c0014069:	c3                   	ret    

c001406a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001406a:	55                   	push   ebp
c001406b:	57                   	push   edi
c001406c:	56                   	push   esi
c001406d:	53                   	push   ebx
c001406e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014074:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001407f:	74 3b                	je     c00140bc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014081:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014089:	74 31                	je     c00140bc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001408b:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014093:	75 27                	jne    c00140bc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014095:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001409c:	05 00 10 00 00       	add    eax,0x1000
c00140a1:	89 c2                	mov    edx,eax
c00140a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00140a8:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00140af:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00140b5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00140bc:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00140c3:	83 ec 0c             	sub    esp,0xc
c00140c6:	6a 01                	push   0x1
c00140c8:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00140ce:	e8 22 55 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c00140d3:	83 c4 10             	add    esp,0x10
c00140d6:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00140dc:	89 c3                	mov    ebx,eax
c00140de:	0f 86 26 01 00 00    	jbe    c001420a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00140e4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00140ec:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00140f3:	c1 ee 0c             	shr    esi,0xc
c00140f6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00140fa:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014101:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014108:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001410c:	29 ef                	sub    edi,ebp
c001410e:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0014112:	0f 83 f9 00 00 00    	jae    c0014211 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014118:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001411e:	b8 00 10 00 00       	mov    eax,0x1000
c0014123:	0f 47 f8             	cmova  edi,eax
c0014126:	83 ec 0c             	sub    esp,0xc
c0014129:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014130:	31 d2                	xor    edx,edx
c0014132:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014134:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014138:	50                   	push   eax
c0014139:	8d 74 24 30          	lea    esi,[esp+0x30]
c001413d:	56                   	push   esi
c001413e:	52                   	push   edx
c001413f:	57                   	push   edi
c0014140:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014147:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001414a:	83 c4 20             	add    esp,0x20
c001414d:	85 c0                	test   eax,eax
c001414f:	75 06                	jne    c0014157 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014151:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014155:	74 13                	je     c001416a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0014157:	83 ec 0c             	sub    esp,0xc
c001415a:	53                   	push   ebx
c001415b:	e8 a9 57 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014160:	83 c4 10             	add    esp,0x10
c0014163:	31 c0                	xor    eax,eax
c0014165:	e9 7c 01 00 00       	jmp    c00142e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c001416a:	fa                   	cli    
c001416b:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0014171:	e8 6c 3c ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014176:	6a 07                	push   0x7
c0014178:	53                   	push   ebx
c0014179:	50                   	push   eax
c001417a:	89 c7                	mov    edi,eax
c001417c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014181:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014184:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001418a:	e8 6f 5b ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001418f:	83 c4 0c             	add    esp,0xc
c0014192:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014199:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001419f:	6a 00                	push   0x0
c00141a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141a9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141af:	e8 b0 59 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00141b4:	58                   	pop    eax
c00141b5:	5a                   	pop    edx
c00141b6:	68 07 0c 00 00       	push   0xc07
c00141bb:	55                   	push   ebp
c00141bc:	57                   	push   edi
c00141bd:	89 df                	mov    edi,ebx
c00141bf:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00141c6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141cc:	6a 00                	push   0x0
c00141ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141d6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141dc:	e8 81 5d ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00141e1:	b9 00 10 00 00       	mov    ecx,0x1000
c00141e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141e8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00141ed:	83 c4 20             	add    esp,0x20
c00141f0:	48                   	dec    eax
c00141f1:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00141f6:	85 c0                	test   eax,eax
c00141f8:	75 01                	jne    c00141fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00141fa:	fb                   	sti    
c00141fb:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00141ff:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014205:	e9 f0 fe ff ff       	jmp    c00140fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001420a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014211:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014218:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001421e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014224:	0f 86 ae 00 00 00    	jbe    c00142d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001422a:	fa                   	cli    
c001422b:	51                   	push   ecx
c001422c:	31 ff                	xor    edi,edi
c001422e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014235:	c1 ee 0c             	shr    esi,0xc
c0014238:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001423e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014244:	6a 00                	push   0x0
c0014246:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001424b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001424e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014254:	e8 0b 59 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014259:	83 c4 10             	add    esp,0x10
c001425c:	e8 81 3b ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014261:	47                   	inc    edi
c0014262:	6a 07                	push   0x7
c0014264:	53                   	push   ebx
c0014265:	50                   	push   eax
c0014266:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001426a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014270:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014273:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014279:	e8 80 5a ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001427e:	58                   	pop    eax
c001427f:	5a                   	pop    edx
c0014280:	68 07 0c 00 00       	push   0xc07
c0014285:	55                   	push   ebp
c0014286:	81 c5 00 10 00 00    	add    ebp,0x1000
c001428c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014290:	50                   	push   eax
c0014291:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014298:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001429e:	6a 00                	push   0x0
c00142a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142a8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142ae:	e8 af 5c ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00142b3:	83 c4 1c             	add    esp,0x1c
c00142b6:	68 00 10 00 00       	push   0x1000
c00142bb:	6a 00                	push   0x0
c00142bd:	53                   	push   ebx
c00142be:	e8 2d c2 fe ff       	call   c00004f0 <memset>
c00142c3:	83 c4 10             	add    esp,0x10
c00142c6:	39 fe                	cmp    esi,edi
c00142c8:	77 92                	ja     c001425c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00142ca:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00142cf:	48                   	dec    eax
c00142d0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00142d5:	75 01                	jne    c00142d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00142d7:	fb                   	sti    
c00142d8:	83 ec 0c             	sub    esp,0xc
c00142db:	53                   	push   ebx
c00142dc:	e8 28 56 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00142e1:	83 c4 10             	add    esp,0x10
c00142e4:	b0 01                	mov    al,0x1
c00142e6:	81 c4 2c 10 00 00    	add    esp,0x102c
c00142ec:	5b                   	pop    ebx
c00142ed:	5e                   	pop    esi
c00142ee:	5f                   	pop    edi
c00142ef:	5d                   	pop    ebp
c00142f0:	c3                   	ret    

c00142f1 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00142f1:	55                   	push   ebp
c00142f2:	57                   	push   edi
c00142f3:	56                   	push   esi
c00142f4:	53                   	push   ebx
c00142f5:	83 ec 48             	sub    esp,0x48
c00142f8:	68 14 01 00 00       	push   0x114
c00142fd:	e8 d1 37 ff ff       	call   c0007ad3 <malloc>
c0014302:	83 c4 0c             	add    esp,0xc
c0014305:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014309:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001430d:	89 c7                	mov    edi,eax
c001430f:	50                   	push   eax
c0014310:	e8 c1 73 ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c0014315:	58                   	pop    eax
c0014316:	5a                   	pop    edx
c0014317:	6a 01                	push   0x1
c0014319:	57                   	push   edi
c001431a:	e8 73 74 ff ff       	call   c000b792 <File::open(FileOpenMode)>
c001431f:	83 c4 10             	add    esp,0x10
c0014322:	85 c0                	test   eax,eax
c0014324:	0f 85 4c 01 00 00    	jne    c0014476 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001432a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014332:	83 ec 0c             	sub    esp,0xc
c0014335:	6a 34                	push   0x34
c0014337:	e8 97 37 ff ff       	call   c0007ad3 <malloc>
c001433c:	89 c3                	mov    ebx,eax
c001433e:	58                   	pop    eax
c001433f:	8b 07                	mov    eax,DWORD PTR [edi]
c0014341:	8d 74 24 38          	lea    esi,[esp+0x38]
c0014345:	56                   	push   esi
c0014346:	53                   	push   ebx
c0014347:	6a 00                	push   0x0
c0014349:	6a 34                	push   0x34
c001434b:	57                   	push   edi
c001434c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001434f:	83 c4 20             	add    esp,0x20
c0014352:	85 c0                	test   eax,eax
c0014354:	0f 85 1c 01 00 00    	jne    c0014476 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001435a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014360:	0f 85 10 01 00 00    	jne    c0014476 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014366:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014369:	85 c0                	test   eax,eax
c001436b:	0f 84 05 01 00 00    	je     c0014476 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014371:	31 d2                	xor    edx,edx
c0014373:	55                   	push   ebp
c0014374:	52                   	push   edx
c0014375:	50                   	push   eax
c0014376:	57                   	push   edi
c0014377:	e8 d4 74 ff ff       	call   c000b850 <File::seek(unsigned long long)>
c001437c:	83 c4 10             	add    esp,0x10
c001437f:	85 c0                	test   eax,eax
c0014381:	0f 85 ef 00 00 00    	jne    c0014476 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014387:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001438a:	83 ec 0c             	sub    esp,0xc
c001438d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014391:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014395:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014399:	0f af c2             	imul   eax,edx
c001439c:	50                   	push   eax
c001439d:	e8 31 37 ff ff       	call   c0007ad3 <malloc>
c00143a2:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00143a4:	89 34 24             	mov    DWORD PTR [esp],esi
c00143a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00143ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00143af:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00143b3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00143b7:	0f af c2             	imul   eax,edx
c00143ba:	99                   	cdq    
c00143bb:	52                   	push   edx
c00143bc:	50                   	push   eax
c00143bd:	57                   	push   edi
c00143be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00143c1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00143c4:	83 c4 20             	add    esp,0x20
c00143c7:	85 c0                	test   eax,eax
c00143c9:	0f 84 a7 00 00 00    	je     c0014476 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143cf:	31 d2                	xor    edx,edx
c00143d1:	51                   	push   ecx
c00143d2:	52                   	push   edx
c00143d3:	50                   	push   eax
c00143d4:	57                   	push   edi
c00143d5:	e8 76 74 ff ff       	call   c000b850 <File::seek(unsigned long long)>
c00143da:	83 c4 10             	add    esp,0x10
c00143dd:	85 c0                	test   eax,eax
c00143df:	0f 85 91 00 00 00    	jne    c0014476 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143e5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00143e9:	83 ec 0c             	sub    esp,0xc
c00143ec:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00143f0:	0f af c2             	imul   eax,edx
c00143f3:	50                   	push   eax
c00143f4:	e8 da 36 ff ff       	call   c0007ad3 <malloc>
c00143f9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00143fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00143fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014406:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001440a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001440e:	0f af c2             	imul   eax,edx
c0014411:	99                   	cdq    
c0014412:	52                   	push   edx
c0014413:	50                   	push   eax
c0014414:	57                   	push   edi
c0014415:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014418:	83 c4 20             	add    esp,0x20
c001441b:	31 c9                	xor    ecx,ecx
c001441d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014425:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014429:	0f b7 e9             	movzx  ebp,cx
c001442c:	0f 83 86 00 00 00    	jae    c00144b8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014432:	c1 e5 05             	shl    ebp,0x5
c0014435:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014439:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c001443d:	75 73                	jne    c00144b2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c001443f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014443:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014446:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014449:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001444d:	52                   	push   edx
c001444e:	31 d2                	xor    edx,edx
c0014450:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014453:	52                   	push   edx
c0014454:	50                   	push   eax
c0014455:	57                   	push   edi
c0014456:	e8 f5 73 ff ff       	call   c000b850 <File::seek(unsigned long long)>
c001445b:	83 c4 10             	add    esp,0x10
c001445e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014462:	85 c0                	test   eax,eax
c0014464:	74 17                	je     c001447d <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014466:	83 ec 0c             	sub    esp,0xc
c0014469:	68 ea 1f 02 c0       	push   0xc0021fea
c001446e:	e8 97 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014473:	83 c4 10             	add    esp,0x10
c0014476:	31 c0                	xor    eax,eax
c0014478:	e9 8b 00 00 00       	jmp    c0014508 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c001447d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014481:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014484:	83 ec 0c             	sub    esp,0xc
c0014487:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c001448a:	50                   	push   eax
c001448b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001448f:	56                   	push   esi
c0014490:	57                   	push   edi
c0014491:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014495:	e8 d0 fb ff ff       	call   c001406a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001449a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001449e:	83 c4 20             	add    esp,0x20
c00144a1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00144a5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00144a9:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c00144ae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00144b2:	41                   	inc    ecx
c00144b3:	e9 6d ff ff ff       	jmp    c0014425 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00144b8:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00144bc:	83 ec 0c             	sub    esp,0xc
c00144bf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00144c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144c7:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c00144cd:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c00144d3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00144d8:	05 00 10 00 00       	add    eax,0x1000
c00144dd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00144e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144e4:	e8 fa 35 ff ff       	call   c0007ae3 <free>
c00144e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144ec:	e8 f2 35 ff ff       	call   c0007ae3 <free>
c00144f1:	58                   	pop    eax
c00144f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144f6:	e8 e8 35 ff ff       	call   c0007ae3 <free>
c00144fb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144fe:	e8 ed 72 ff ff       	call   c000b7f0 <File::close()>
c0014503:	83 c4 10             	add    esp,0x10
c0014506:	b0 01                	mov    al,0x1
c0014508:	83 c4 3c             	add    esp,0x3c
c001450b:	5b                   	pop    ebx
c001450c:	5e                   	pop    esi
c001450d:	5f                   	pop    edi
c001450e:	5d                   	pop    ebp
c001450f:	c3                   	ret    

c0014510 <Thr::runtimeReferenceHelper()>:
c0014510:	83 ec 18             	sub    esp,0x18
c0014513:	68 f2 1f 02 c0       	push   0xc0021ff2
c0014518:	e8 ed 63 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001451d:	fa                   	cli    
c001451e:	83 c4 10             	add    esp,0x10
c0014521:	eb fe                	jmp    c0014521 <Thr::runtimeReferenceHelper()+0x11>

c0014523 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014523:	57                   	push   edi
c0014524:	56                   	push   esi
c0014525:	53                   	push   ebx
c0014526:	31 db                	xor    ebx,ebx
c0014528:	39 1d 40 a4 02 c0    	cmp    DWORD PTR ds:0xc002a440,ebx
c001452e:	7e 3c                	jle    c001456c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014530:	8b 34 9d c0 a3 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd5c40]
c0014537:	31 ff                	xor    edi,edi
c0014539:	39 3c 9d c0 a2 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd5d40],edi
c0014540:	7e 27                	jle    c0014569 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014542:	50                   	push   eax
c0014543:	50                   	push   eax
c0014544:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014548:	8b 06                	mov    eax,DWORD PTR [esi]
c001454a:	03 04 9d 40 a3 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd5cc0]
c0014551:	50                   	push   eax
c0014552:	e8 29 c2 fe ff       	call   c0000780 <strcmp>
c0014557:	83 c4 10             	add    esp,0x10
c001455a:	85 c0                	test   eax,eax
c001455c:	75 05                	jne    c0014563 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001455e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014561:	eb 0b                	jmp    c001456e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014563:	83 c6 10             	add    esi,0x10
c0014566:	47                   	inc    edi
c0014567:	eb d0                	jmp    c0014539 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014569:	43                   	inc    ebx
c001456a:	eb bc                	jmp    c0014528 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001456c:	31 c0                	xor    eax,eax
c001456e:	5b                   	pop    ebx
c001456f:	5e                   	pop    esi
c0014570:	5f                   	pop    edi
c0014571:	c3                   	ret    

c0014572 <Thr::loadKernelSymbolTable(char const*)>:
c0014572:	55                   	push   ebp
c0014573:	57                   	push   edi
c0014574:	56                   	push   esi
c0014575:	53                   	push   ebx
c0014576:	83 ec 68             	sub    esp,0x68
c0014579:	68 14 01 00 00       	push   0x114
c001457e:	8b 35 90 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a490
c0014584:	e8 4a 35 ff ff       	call   c0007ad3 <malloc>
c0014589:	83 c4 0c             	add    esp,0xc
c001458c:	56                   	push   esi
c001458d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014591:	89 c3                	mov    ebx,eax
c0014593:	50                   	push   eax
c0014594:	e8 3d 71 ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c0014599:	5e                   	pop    esi
c001459a:	5f                   	pop    edi
c001459b:	6a 01                	push   0x1
c001459d:	53                   	push   ebx
c001459e:	e8 ef 71 ff ff       	call   c000b792 <File::open(FileOpenMode)>
c00145a3:	83 c4 10             	add    esp,0x10
c00145a6:	85 c0                	test   eax,eax
c00145a8:	74 0a                	je     c00145b4 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00145aa:	83 ec 0c             	sub    esp,0xc
c00145ad:	68 14 20 02 c0       	push   0xc0022014
c00145b2:	eb 34                	jmp    c00145e8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00145b4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00145bc:	83 ec 0c             	sub    esp,0xc
c00145bf:	6a 34                	push   0x34
c00145c1:	e8 0d 35 ff ff       	call   c0007ad3 <malloc>
c00145c6:	59                   	pop    ecx
c00145c7:	8d 74 24 34          	lea    esi,[esp+0x34]
c00145cb:	89 c7                	mov    edi,eax
c00145cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145cf:	56                   	push   esi
c00145d0:	57                   	push   edi
c00145d1:	6a 00                	push   0x0
c00145d3:	6a 34                	push   0x34
c00145d5:	53                   	push   ebx
c00145d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145d9:	83 c4 20             	add    esp,0x20
c00145dc:	85 c0                	test   eax,eax
c00145de:	74 17                	je     c00145f7 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00145e0:	83 ec 0c             	sub    esp,0xc
c00145e3:	68 2b 20 02 c0       	push   0xc002202b
c00145e8:	e8 70 cb ff ff       	call   c001115d <KePanic(char const*)>
c00145ed:	83 c4 10             	add    esp,0x10
c00145f0:	31 c0                	xor    eax,eax
c00145f2:	e9 31 02 00 00       	jmp    c0014828 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00145f7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00145fd:	75 e1                	jne    c00145e0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00145ff:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014602:	85 c0                	test   eax,eax
c0014604:	74 da                	je     c00145e0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014606:	52                   	push   edx
c0014607:	31 d2                	xor    edx,edx
c0014609:	52                   	push   edx
c001460a:	50                   	push   eax
c001460b:	53                   	push   ebx
c001460c:	e8 3f 72 ff ff       	call   c000b850 <File::seek(unsigned long long)>
c0014611:	83 c4 10             	add    esp,0x10
c0014614:	85 c0                	test   eax,eax
c0014616:	75 c8                	jne    c00145e0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014618:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001461c:	83 ec 0c             	sub    esp,0xc
c001461f:	31 ed                	xor    ebp,ebp
c0014621:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014625:	0f af c2             	imul   eax,edx
c0014628:	50                   	push   eax
c0014629:	e8 a5 34 ff ff       	call   c0007ad3 <malloc>
c001462e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014630:	89 34 24             	mov    DWORD PTR [esp],esi
c0014633:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014637:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001463b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001463f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014643:	0f af c2             	imul   eax,edx
c0014646:	99                   	cdq    
c0014647:	52                   	push   edx
c0014648:	50                   	push   eax
c0014649:	53                   	push   ebx
c001464a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001464d:	83 c4 20             	add    esp,0x20
c0014650:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014658:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014660:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014668:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014670:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014674:	0f b7 f5             	movzx  esi,bp
c0014677:	0f 83 a7 00 00 00    	jae    c0014724 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001467d:	6b f6 28             	imul   esi,esi,0x28
c0014680:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014684:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014687:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001468b:	50                   	push   eax
c001468c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014690:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014694:	8b 16                	mov    edx,DWORD PTR [esi]
c0014696:	6b c0 28             	imul   eax,eax,0x28
c0014699:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001469d:	89 d0                	mov    eax,edx
c001469f:	31 d2                	xor    edx,edx
c00146a1:	52                   	push   edx
c00146a2:	50                   	push   eax
c00146a3:	53                   	push   ebx
c00146a4:	e8 a7 71 ff ff       	call   c000b850 <File::seek(unsigned long long)>
c00146a9:	83 c4 0c             	add    esp,0xc
c00146ac:	6a 20                	push   0x20
c00146ae:	6a 00                	push   0x0
c00146b0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00146b4:	52                   	push   edx
c00146b5:	e8 36 be fe ff       	call   c00004f0 <memset>
c00146ba:	58                   	pop    eax
c00146bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146bd:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00146c1:	51                   	push   ecx
c00146c2:	8d 54 24 40          	lea    edx,[esp+0x40]
c00146c6:	52                   	push   edx
c00146c7:	6a 00                	push   0x0
c00146c9:	6a 1f                	push   0x1f
c00146cb:	53                   	push   ebx
c00146cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00146cf:	83 c4 18             	add    esp,0x18
c00146d2:	68 42 20 02 c0       	push   0xc0022042
c00146d7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00146db:	52                   	push   edx
c00146dc:	e8 9f c0 fe ff       	call   c0000780 <strcmp>
c00146e1:	83 c4 10             	add    esp,0x10
c00146e4:	85 c0                	test   eax,eax
c00146e6:	75 0f                	jne    c00146f7 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00146e8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00146eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00146ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00146f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146f7:	50                   	push   eax
c00146f8:	50                   	push   eax
c00146f9:	68 4a 20 02 c0       	push   0xc002204a
c00146fe:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014702:	50                   	push   eax
c0014703:	e8 78 c0 fe ff       	call   c0000780 <strcmp>
c0014708:	83 c4 10             	add    esp,0x10
c001470b:	85 c0                	test   eax,eax
c001470d:	75 0f                	jne    c001471e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001470f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014712:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014716:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001471a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001471e:	45                   	inc    ebp
c001471f:	e9 4c ff ff ff       	jmp    c0014670 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014724:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014729:	75 10                	jne    c001473b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001472b:	83 ec 0c             	sub    esp,0xc
c001472e:	68 52 20 02 c0       	push   0xc0022052
c0014733:	e8 25 ca ff ff       	call   c001115d <KePanic(char const*)>
c0014738:	83 c4 10             	add    esp,0x10
c001473b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014740:	75 10                	jne    c0014752 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014742:	83 ec 0c             	sub    esp,0xc
c0014745:	68 52 20 02 c0       	push   0xc0022052
c001474a:	e8 0e ca ff ff       	call   c001115d <KePanic(char const*)>
c001474f:	83 c4 10             	add    esp,0x10
c0014752:	50                   	push   eax
c0014753:	31 d2                	xor    edx,edx
c0014755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014759:	52                   	push   edx
c001475a:	50                   	push   eax
c001475b:	53                   	push   ebx
c001475c:	e8 ef 70 ff ff       	call   c000b850 <File::seek(unsigned long long)>
c0014761:	5a                   	pop    edx
c0014762:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014766:	e8 68 33 ff ff       	call   c0007ad3 <malloc>
c001476b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001476f:	31 c9                	xor    ecx,ecx
c0014771:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014775:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014777:	5e                   	pop    esi
c0014778:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001477c:	55                   	push   ebp
c001477d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014781:	51                   	push   ecx
c0014782:	52                   	push   edx
c0014783:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014787:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001478b:	53                   	push   ebx
c001478c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001478f:	83 c4 14             	add    esp,0x14
c0014792:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014796:	e8 38 33 ff ff       	call   c0007ad3 <malloc>
c001479b:	89 c6                	mov    esi,eax
c001479d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001479f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00147a2:	56                   	push   esi
c00147a3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00147a7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00147ab:	51                   	push   ecx
c00147ac:	52                   	push   edx
c00147ad:	53                   	push   ebx
c00147ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147b5:	83 c4 1c             	add    esp,0x1c
c00147b8:	8b 15 40 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a440
c00147be:	c1 e8 04             	shr    eax,0x4
c00147c1:	89 04 95 c0 a2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5d40],eax
c00147c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147cc:	31 d2                	xor    edx,edx
c00147ce:	52                   	push   edx
c00147cf:	50                   	push   eax
c00147d0:	53                   	push   ebx
c00147d1:	e8 7a 70 ff ff       	call   c000b850 <File::seek(unsigned long long)>
c00147d6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00147d8:	31 d2                	xor    edx,edx
c00147da:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00147dd:	56                   	push   esi
c00147de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00147e2:	52                   	push   edx
c00147e3:	50                   	push   eax
c00147e4:	53                   	push   ebx
c00147e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147e8:	83 c4 14             	add    esp,0x14
c00147eb:	53                   	push   ebx
c00147ec:	e8 ff 6f ff ff       	call   c000b7f0 <File::close()>
c00147f1:	5d                   	pop    ebp
c00147f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00147f6:	e8 e8 32 ff ff       	call   c0007ae3 <free>
c00147fb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00147fe:	e8 e0 32 ff ff       	call   c0007ae3 <free>
c0014803:	a1 40 a4 02 c0       	mov    eax,ds:0xc002a440
c0014808:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001480c:	83 c4 10             	add    esp,0x10
c001480f:	89 34 85 40 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5cc0],esi
c0014816:	8d 50 01             	lea    edx,[eax+0x1]
c0014819:	89 0c 85 c0 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5c40],ecx
c0014820:	b0 01                	mov    al,0x1
c0014822:	89 15 40 a4 02 c0    	mov    DWORD PTR ds:0xc002a440,edx
c0014828:	83 c4 5c             	add    esp,0x5c
c001482b:	5b                   	pop    ebx
c001482c:	5e                   	pop    esi
c001482d:	5f                   	pop    edi
c001482e:	5d                   	pop    ebp
c001482f:	c3                   	ret    

c0014830 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014830:	55                   	push   ebp
c0014831:	57                   	push   edi
c0014832:	56                   	push   esi
c0014833:	53                   	push   ebx
c0014834:	81 ec 68 03 00 00    	sub    esp,0x368
c001483a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014841:	8b 35 90 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a490
c0014847:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001484b:	68 14 01 00 00       	push   0x114
c0014850:	e8 7e 32 ff ff       	call   c0007ad3 <malloc>
c0014855:	83 c4 0c             	add    esp,0xc
c0014858:	56                   	push   esi
c0014859:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014860:	50                   	push   eax
c0014861:	89 c3                	mov    ebx,eax
c0014863:	e8 6e 6e ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c0014868:	5f                   	pop    edi
c0014869:	5d                   	pop    ebp
c001486a:	6a 01                	push   0x1
c001486c:	53                   	push   ebx
c001486d:	e8 20 6f ff ff       	call   c000b792 <File::open(FileOpenMode)>
c0014872:	83 c4 10             	add    esp,0x10
c0014875:	85 c0                	test   eax,eax
c0014877:	0f 85 b3 06 00 00    	jne    c0014f30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001487d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014885:	83 ec 0c             	sub    esp,0xc
c0014888:	6a 34                	push   0x34
c001488a:	e8 44 32 ff ff       	call   c0007ad3 <malloc>
c001488f:	5e                   	pop    esi
c0014890:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014894:	89 c5                	mov    ebp,eax
c0014896:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014898:	56                   	push   esi
c0014899:	55                   	push   ebp
c001489a:	6a 00                	push   0x0
c001489c:	6a 34                	push   0x34
c001489e:	53                   	push   ebx
c001489f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148a2:	83 c4 20             	add    esp,0x20
c00148a5:	85 c0                	test   eax,eax
c00148a7:	0f 85 83 06 00 00    	jne    c0014f30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148ad:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c00148b4:	0f 85 76 06 00 00    	jne    c0014f30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148ba:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00148bd:	85 c0                	test   eax,eax
c00148bf:	0f 84 6b 06 00 00    	je     c0014f30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148c5:	31 d2                	xor    edx,edx
c00148c7:	51                   	push   ecx
c00148c8:	52                   	push   edx
c00148c9:	50                   	push   eax
c00148ca:	53                   	push   ebx
c00148cb:	e8 80 6f ff ff       	call   c000b850 <File::seek(unsigned long long)>
c00148d0:	83 c4 10             	add    esp,0x10
c00148d3:	85 c0                	test   eax,eax
c00148d5:	0f 85 55 06 00 00    	jne    c0014f30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148db:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00148de:	83 ec 0c             	sub    esp,0xc
c00148e1:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00148e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00148e9:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00148ed:	0f af c2             	imul   eax,edx
c00148f0:	50                   	push   eax
c00148f1:	e8 dd 31 ff ff       	call   c0007ad3 <malloc>
c00148f6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00148f8:	89 34 24             	mov    DWORD PTR [esp],esi
c00148fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014903:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014907:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001490b:	0f af c2             	imul   eax,edx
c001490e:	99                   	cdq    
c001490f:	52                   	push   edx
c0014910:	50                   	push   eax
c0014911:	53                   	push   ebx
c0014912:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014915:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014918:	83 c4 20             	add    esp,0x20
c001491b:	85 c0                	test   eax,eax
c001491d:	0f 84 0d 06 00 00    	je     c0014f30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014923:	52                   	push   edx
c0014924:	31 d2                	xor    edx,edx
c0014926:	52                   	push   edx
c0014927:	50                   	push   eax
c0014928:	53                   	push   ebx
c0014929:	e8 22 6f ff ff       	call   c000b850 <File::seek(unsigned long long)>
c001492e:	83 c4 10             	add    esp,0x10
c0014931:	85 c0                	test   eax,eax
c0014933:	0f 85 f7 05 00 00    	jne    c0014f30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014939:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001493d:	83 ec 0c             	sub    esp,0xc
c0014940:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014944:	0f af c2             	imul   eax,edx
c0014947:	50                   	push   eax
c0014948:	e8 86 31 ff ff       	call   c0007ad3 <malloc>
c001494d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001494f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014952:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014956:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001495a:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001495e:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014962:	0f af c2             	imul   eax,edx
c0014965:	99                   	cdq    
c0014966:	52                   	push   edx
c0014967:	50                   	push   eax
c0014968:	53                   	push   ebx
c0014969:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001496c:	83 c4 20             	add    esp,0x20
c001496f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014978:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c001497c:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014980:	73 78                	jae    c00149fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014982:	c1 e7 05             	shl    edi,0x5
c0014985:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014989:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001498c:	75 63                	jne    c00149f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c001498e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014991:	31 d2                	xor    edx,edx
c0014993:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014996:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001499a:	50                   	push   eax
c001499b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001499e:	52                   	push   edx
c001499f:	50                   	push   eax
c00149a0:	53                   	push   ebx
c00149a1:	e8 aa 6e ff ff       	call   c000b850 <File::seek(unsigned long long)>
c00149a6:	83 c4 10             	add    esp,0x10
c00149a9:	85 c0                	test   eax,eax
c00149ab:	0f 85 7f 05 00 00    	jne    c0014f30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00149b1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00149b8:	83 ec 0c             	sub    esp,0xc
c00149bb:	31 d2                	xor    edx,edx
c00149bd:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00149c1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00149c3:	01 c6                	add    esi,eax
c00149c5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00149cc:	50                   	push   eax
c00149cd:	56                   	push   esi
c00149ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149d2:	52                   	push   edx
c00149d3:	50                   	push   eax
c00149d4:	53                   	push   ebx
c00149d5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149d8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00149db:	83 c4 1c             	add    esp,0x1c
c00149de:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00149e1:	50                   	push   eax
c00149e2:	6a 00                	push   0x0
c00149e4:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00149e8:	56                   	push   esi
c00149e9:	e8 02 bb fe ff       	call   c00004f0 <memset>
c00149ee:	83 c4 10             	add    esp,0x10
c00149f1:	66 ff 04 24          	inc    WORD PTR [esp]
c00149f5:	e9 7b ff ff ff       	jmp    c0014975 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c00149fa:	50                   	push   eax
c00149fb:	68 00 01 00 00       	push   0x100
c0014a00:	6a 00                	push   0x0
c0014a02:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014a06:	50                   	push   eax
c0014a07:	e8 e4 ba fe ff       	call   c00004f0 <memset>
c0014a0c:	83 c4 0c             	add    esp,0xc
c0014a0f:	68 00 01 00 00       	push   0x100
c0014a14:	6a 00                	push   0x0
c0014a16:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014a1d:	50                   	push   eax
c0014a1e:	e8 cd ba fe ff       	call   c00004f0 <memset>
c0014a23:	83 c4 10             	add    esp,0x10
c0014a26:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014a2d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014a34:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014a3c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014a44:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014a4c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014a54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a58:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014a5c:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014a61:	0f 83 16 01 00 00    	jae    c0014b7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014a67:	6b ff 28             	imul   edi,edi,0x28
c0014a6a:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014a6e:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014a71:	51                   	push   ecx
c0014a72:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014a76:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014a7a:	8b 07                	mov    eax,DWORD PTR [edi]
c0014a7c:	6b d2 28             	imul   edx,edx,0x28
c0014a7f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014a83:	31 d2                	xor    edx,edx
c0014a85:	52                   	push   edx
c0014a86:	50                   	push   eax
c0014a87:	53                   	push   ebx
c0014a88:	e8 c3 6d ff ff       	call   c000b850 <File::seek(unsigned long long)>
c0014a8d:	83 c4 0c             	add    esp,0xc
c0014a90:	6a 20                	push   0x20
c0014a92:	6a 00                	push   0x0
c0014a94:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014a9b:	51                   	push   ecx
c0014a9c:	e8 4f ba fe ff       	call   c00004f0 <memset>
c0014aa1:	58                   	pop    eax
c0014aa2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014aa4:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014aa8:	52                   	push   edx
c0014aa9:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014ab0:	51                   	push   ecx
c0014ab1:	6a 00                	push   0x0
c0014ab3:	6a 1f                	push   0x1f
c0014ab5:	53                   	push   ebx
c0014ab6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ab9:	83 c4 1c             	add    esp,0x1c
c0014abc:	6a 09                	push   0x9
c0014abe:	68 6c 20 02 c0       	push   0xc002206c
c0014ac3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014aca:	51                   	push   ecx
c0014acb:	e8 b0 b8 fe ff       	call   c0000380 <memcmp>
c0014ad0:	83 c4 10             	add    esp,0x10
c0014ad3:	85 c0                	test   eax,eax
c0014ad5:	75 1a                	jne    c0014af1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014ad7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014ada:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014add:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014ae1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014ae4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014aeb:	89 d0                	mov    eax,edx
c0014aed:	40                   	inc    eax
c0014aee:	89 04 24             	mov    DWORD PTR [esp],eax
c0014af1:	52                   	push   edx
c0014af2:	6a 09                	push   0x9
c0014af4:	68 76 20 02 c0       	push   0xc0022076
c0014af9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b00:	50                   	push   eax
c0014b01:	e8 7a b8 fe ff       	call   c0000380 <memcmp>
c0014b06:	83 c4 10             	add    esp,0x10
c0014b09:	85 c0                	test   eax,eax
c0014b0b:	75 1a                	jne    c0014b27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014b0d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014b10:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014b13:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014b17:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b1a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014b21:	89 c8                	mov    eax,ecx
c0014b23:	40                   	inc    eax
c0014b24:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b27:	50                   	push   eax
c0014b28:	50                   	push   eax
c0014b29:	68 42 20 02 c0       	push   0xc0022042
c0014b2e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b35:	50                   	push   eax
c0014b36:	e8 45 bc fe ff       	call   c0000780 <strcmp>
c0014b3b:	83 c4 10             	add    esp,0x10
c0014b3e:	85 c0                	test   eax,eax
c0014b40:	75 0b                	jne    c0014b4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014b42:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014b46:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b4d:	50                   	push   eax
c0014b4e:	50                   	push   eax
c0014b4f:	68 4a 20 02 c0       	push   0xc002204a
c0014b54:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b5b:	50                   	push   eax
c0014b5c:	e8 1f bc fe ff       	call   c0000780 <strcmp>
c0014b61:	83 c4 10             	add    esp,0x10
c0014b64:	85 c0                	test   eax,eax
c0014b66:	75 0b                	jne    c0014b73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014b68:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014b6c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b73:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014b78:	e9 d7 fe ff ff       	jmp    c0014a54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014b7d:	50                   	push   eax
c0014b7e:	31 d2                	xor    edx,edx
c0014b80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b84:	52                   	push   edx
c0014b85:	50                   	push   eax
c0014b86:	53                   	push   ebx
c0014b87:	e8 c4 6c ff ff       	call   c000b850 <File::seek(unsigned long long)>
c0014b8c:	58                   	pop    eax
c0014b8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b91:	e8 3d 2f ff ff       	call   c0007ad3 <malloc>
c0014b96:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014b98:	31 d2                	xor    edx,edx
c0014b9a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014b9e:	58                   	pop    eax
c0014b9f:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014ba3:	56                   	push   esi
c0014ba4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014ba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bac:	52                   	push   edx
c0014bad:	50                   	push   eax
c0014bae:	53                   	push   ebx
c0014baf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014bb2:	83 c4 14             	add    esp,0x14
c0014bb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bb9:	e8 15 2f ff ff       	call   c0007ad3 <malloc>
c0014bbe:	31 d2                	xor    edx,edx
c0014bc0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014bc4:	83 c4 0c             	add    esp,0xc
c0014bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bcb:	52                   	push   edx
c0014bcc:	50                   	push   eax
c0014bcd:	53                   	push   ebx
c0014bce:	e8 7d 6c ff ff       	call   c000b850 <File::seek(unsigned long long)>
c0014bd3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014bd5:	31 d2                	xor    edx,edx
c0014bd7:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014bde:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014be2:	52                   	push   edx
c0014be3:	50                   	push   eax
c0014be4:	53                   	push   ebx
c0014be5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014be8:	83 c4 20             	add    esp,0x20
c0014beb:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014bf0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014bf8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014bfc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014c00:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014c03:	0f 84 2b 03 00 00    	je     c0014f34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014c09:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014c10:	31 d2                	xor    edx,edx
c0014c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c16:	c1 e8 03             	shr    eax,0x3
c0014c19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014c1d:	51                   	push   ecx
c0014c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c22:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014c26:	52                   	push   edx
c0014c27:	50                   	push   eax
c0014c28:	53                   	push   ebx
c0014c29:	e8 22 6c ff ff       	call   c000b850 <File::seek(unsigned long long)>
c0014c2e:	5e                   	pop    esi
c0014c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c33:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014c3a:	e8 94 2e ff ff       	call   c0007ad3 <malloc>
c0014c3f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c41:	31 d2                	xor    edx,edx
c0014c43:	89 c7                	mov    edi,eax
c0014c45:	58                   	pop    eax
c0014c46:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014c4a:	50                   	push   eax
c0014c4b:	57                   	push   edi
c0014c4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c50:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014c57:	52                   	push   edx
c0014c58:	50                   	push   eax
c0014c59:	53                   	push   ebx
c0014c5a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c5d:	83 c4 20             	add    esp,0x20
c0014c60:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014c68:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014c6c:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014c70:	0f 8d a5 02 00 00    	jge    c0014f1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014c76:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014c7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c7f:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014c82:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014c86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c8a:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014c8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c92:	c1 e8 08             	shr    eax,0x8
c0014c95:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014c99:	89 c2                	mov    edx,eax
c0014c9b:	c1 e2 04             	shl    edx,0x4
c0014c9e:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014ca2:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014ca5:	85 f6                	test   esi,esi
c0014ca7:	0f 85 cf 00 00 00    	jne    c0014d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014cad:	83 ec 0c             	sub    esp,0xc
c0014cb0:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014cb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cb8:	03 02                	add    eax,DWORD PTR [edx]
c0014cba:	50                   	push   eax
c0014cbb:	e8 63 f8 ff ff       	call   c0014523 <Thr::getAddressOfKernelSymbol(char const*)>
c0014cc0:	83 c4 10             	add    esp,0x10
c0014cc3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014cc7:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014ccc:	85 c0                	test   eax,eax
c0014cce:	89 c6                	mov    esi,eax
c0014cd0:	0f 85 a6 00 00 00    	jne    c0014d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014cd6:	83 ec 0c             	sub    esp,0xc
c0014cd9:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014cdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ce1:	03 02                	add    eax,DWORD PTR [edx]
c0014ce3:	50                   	push   eax
c0014ce4:	e8 5f c6 ff ff       	call   c0011348 <KeResolveCompatibilitySymbol(char*)>
c0014ce9:	83 c4 10             	add    esp,0x10
c0014cec:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014cf0:	85 c0                	test   eax,eax
c0014cf2:	89 c6                	mov    esi,eax
c0014cf4:	0f 85 82 00 00 00    	jne    c0014d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014cfa:	50                   	push   eax
c0014cfb:	50                   	push   eax
c0014cfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d00:	03 02                	add    eax,DWORD PTR [edx]
c0014d02:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014d06:	50                   	push   eax
c0014d07:	68 80 20 02 c0       	push   0xc0022080
c0014d0c:	e8 f9 5b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014d11:	58                   	pop    eax
c0014d12:	5a                   	pop    edx
c0014d13:	68 9a 20 02 c0       	push   0xc002209a
c0014d18:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d1f:	51                   	push   ecx
c0014d20:	e8 2b b9 fe ff       	call   c0000650 <strcpy>
c0014d25:	59                   	pop    ecx
c0014d26:	58                   	pop    eax
c0014d27:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014d2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d2f:	03 02                	add    eax,DWORD PTR [edx]
c0014d31:	50                   	push   eax
c0014d32:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d39:	51                   	push   ecx
c0014d3a:	e8 31 bb fe ff       	call   c0000870 <strcat>
c0014d3f:	58                   	pop    eax
c0014d40:	5a                   	pop    edx
c0014d41:	68 30 21 02 c0       	push   0xc0022130
c0014d46:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d4d:	51                   	push   ecx
c0014d4e:	e8 1d bb fe ff       	call   c0000870 <strcat>
c0014d53:	83 c4 10             	add    esp,0x10
c0014d56:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014d5b:	0f 84 77 01 00 00    	je     c0014ed8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014d61:	83 ec 0c             	sub    esp,0xc
c0014d64:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d6b:	51                   	push   ecx
c0014d6c:	e8 ec c3 ff ff       	call   c001115d <KePanic(char const*)>
c0014d71:	83 c4 10             	add    esp,0x10
c0014d74:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014d78:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014d7c:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014d81:	83 f8 01             	cmp    eax,0x1
c0014d84:	0f 85 9b 00 00 00    	jne    c0014e25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014d8a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d8e:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014d95:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014d99:	01 d0                	add    eax,edx
c0014d9b:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014da3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014da7:	0f 94 c0             	sete   al
c0014daa:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014db2:	0f 94 c1             	sete   cl
c0014db5:	09 c1                	or     ecx,eax
c0014db7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014dbb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014dc0:	0f b6 c9             	movzx  ecx,cl
c0014dc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dc5:	74 41                	je     c0014e08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014dc7:	8d 14 06             	lea    edx,[esi+eax*1]
c0014dca:	85 c9                	test   ecx,ecx
c0014dcc:	75 15                	jne    c0014de3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014dce:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014dd2:	66 83 f8 0c          	cmp    ax,0xc
c0014dd6:	76 05                	jbe    c0014ddd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014dd8:	b8 0c 00 00 00       	mov    eax,0xc
c0014ddd:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014de1:	76 37                	jbe    c0014e1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014de3:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014de8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014dec:	0f 84 e6 00 00 00    	je     c0014ed8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014df2:	83 ec 0c             	sub    esp,0xc
c0014df5:	68 b1 20 02 c0       	push   0xc00220b1
c0014dfa:	e8 5e c3 ff ff       	call   c001115d <KePanic(char const*)>
c0014dff:	83 c4 10             	add    esp,0x10
c0014e02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014e06:	eb 12                	jmp    c0014e1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e08:	01 c2                	add    edx,eax
c0014e0a:	85 c9                	test   ecx,ecx
c0014e0c:	75 0c                	jne    c0014e1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e0e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014e12:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014e16:	77 02                	ja     c0014e1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e18:	01 f2                	add    edx,esi
c0014e1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e1e:	89 10                	mov    DWORD PTR [eax],edx
c0014e20:	e9 ed 00 00 00       	jmp    c0014f12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014e25:	83 f8 02             	cmp    eax,0x2
c0014e28:	0f 85 81 00 00 00    	jne    c0014eaf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014e2e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014e35:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014e39:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014e3d:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014e45:	74 21                	je     c0014e68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014e47:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014e4f:	74 17                	je     c0014e68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014e51:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014e55:	ba 0a 00 00 00       	mov    edx,0xa
c0014e5a:	83 f9 0e             	cmp    ecx,0xe
c0014e5d:	77 03                	ja     c0014e62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014e5f:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014e62:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014e66:	76 1f                	jbe    c0014e87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014e68:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014e6d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e71:	74 65                	je     c0014ed8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014e73:	83 ec 0c             	sub    esp,0xc
c0014e76:	68 cd 20 02 c0       	push   0xc00220cd
c0014e7b:	e8 dd c2 ff ff       	call   c001115d <KePanic(char const*)>
c0014e80:	83 c4 10             	add    esp,0x10
c0014e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e87:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014e8c:	8b 10                	mov    edx,DWORD PTR [eax]
c0014e8e:	74 15                	je     c0014ea5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014e90:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014e94:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014e9b:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014e9f:	01 d1                	add    ecx,edx
c0014ea1:	01 ce                	add    esi,ecx
c0014ea3:	eb 06                	jmp    c0014eab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014ea5:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014ea9:	01 d6                	add    esi,edx
c0014eab:	89 30                	mov    DWORD PTR [eax],esi
c0014ead:	eb 63                	jmp    c0014f12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014eaf:	56                   	push   esi
c0014eb0:	56                   	push   esi
c0014eb1:	50                   	push   eax
c0014eb2:	68 e9 20 02 c0       	push   0xc00220e9
c0014eb7:	e8 4e 5a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014ebc:	83 c4 10             	add    esp,0x10
c0014ebf:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014ec4:	74 12                	je     c0014ed8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014ec6:	83 ec 0c             	sub    esp,0xc
c0014ec9:	68 f4 20 02 c0       	push   0xc00220f4
c0014ece:	e8 8a c2 ff ff       	call   c001115d <KePanic(char const*)>
c0014ed3:	83 c4 10             	add    esp,0x10
c0014ed6:	eb 3a                	jmp    c0014f12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014ed8:	83 ec 0c             	sub    esp,0xc
c0014edb:	53                   	push   ebx
c0014edc:	e8 0f 69 ff ff       	call   c000b7f0 <File::close()>
c0014ee1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ee3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ee6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ee9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014eec:	e8 f2 2b ff ff       	call   c0007ae3 <free>
c0014ef1:	59                   	pop    ecx
c0014ef2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ef6:	e8 e8 2b ff ff       	call   c0007ae3 <free>
c0014efb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014efe:	e8 e0 2b ff ff       	call   c0007ae3 <free>
c0014f03:	5b                   	pop    ebx
c0014f04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f08:	e8 d6 2b ff ff       	call   c0007ae3 <free>
c0014f0d:	83 c4 10             	add    esp,0x10
c0014f10:	eb 1e                	jmp    c0014f30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f12:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0014f16:	e9 4d fd ff ff       	jmp    c0014c68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0014f1b:	83 ec 0c             	sub    esp,0xc
c0014f1e:	57                   	push   edi
c0014f1f:	e8 bf 2b ff ff       	call   c0007ae3 <free>
c0014f24:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014f28:	83 c4 10             	add    esp,0x10
c0014f2b:	e9 cc fc ff ff       	jmp    c0014bfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0014f30:	31 c0                	xor    eax,eax
c0014f32:	eb 32                	jmp    c0014f66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014f34:	83 ec 0c             	sub    esp,0xc
c0014f37:	53                   	push   ebx
c0014f38:	e8 b3 68 ff ff       	call   c000b7f0 <File::close()>
c0014f3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f42:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f45:	58                   	pop    eax
c0014f46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f4a:	e8 94 2b ff ff       	call   c0007ae3 <free>
c0014f4f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f52:	e8 8c 2b ff ff       	call   c0007ae3 <free>
c0014f57:	5a                   	pop    edx
c0014f58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f5c:	e8 82 2b ff ff       	call   c0007ae3 <free>
c0014f61:	83 c4 10             	add    esp,0x10
c0014f64:	b0 01                	mov    al,0x1
c0014f66:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014f6c:	5b                   	pop    ebx
c0014f6d:	5e                   	pop    esi
c0014f6e:	5f                   	pop    edi
c0014f6f:	5d                   	pop    ebp
c0014f70:	c3                   	ret    

c0014f71 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014f71:	56                   	push   esi
c0014f72:	31 d2                	xor    edx,edx
c0014f74:	53                   	push   ebx
c0014f75:	8b 1d a0 9c 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ca0
c0014f7b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014f7f:	39 d3                	cmp    ebx,edx
c0014f81:	7e 1b                	jle    c0014f9e <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014f83:	8b 04 95 c0 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6140]
c0014f8a:	39 c8                	cmp    eax,ecx
c0014f8c:	77 0d                	ja     c0014f9b <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014f8e:	8b 34 95 c0 9c 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6340]
c0014f95:	01 c6                	add    esi,eax
c0014f97:	39 ce                	cmp    esi,ecx
c0014f99:	77 05                	ja     c0014fa0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014f9b:	42                   	inc    edx
c0014f9c:	eb e1                	jmp    c0014f7f <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014f9e:	31 c0                	xor    eax,eax
c0014fa0:	5b                   	pop    ebx
c0014fa1:	5e                   	pop    esi
c0014fa2:	c3                   	ret    

c0014fa3 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014fa3:	53                   	push   ebx
c0014fa4:	8b 1d a0 9c 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ca0
c0014faa:	31 c0                	xor    eax,eax
c0014fac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014fb0:	39 c3                	cmp    ebx,eax
c0014fb2:	7e 22                	jle    c0014fd6 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014fb4:	8b 14 85 c0 9e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6140]
c0014fbb:	39 ca                	cmp    edx,ecx
c0014fbd:	77 14                	ja     c0014fd3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014fbf:	03 14 85 c0 9c 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6340]
c0014fc6:	39 ca                	cmp    edx,ecx
c0014fc8:	76 09                	jbe    c0014fd3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014fca:	8b 04 85 c0 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f40]
c0014fd1:	eb 05                	jmp    c0014fd8 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014fd3:	40                   	inc    eax
c0014fd4:	eb da                	jmp    c0014fb0 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014fd6:	31 c0                	xor    eax,eax
c0014fd8:	5b                   	pop    ebx
c0014fd9:	c3                   	ret    

c0014fda <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014fda:	53                   	push   ebx
c0014fdb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014fdf:	53                   	push   ebx
c0014fe0:	e8 8c ff ff ff       	call   c0014f71 <Thr::getDriverBaseFromAddress(unsigned long)>
c0014fe5:	5a                   	pop    edx
c0014fe6:	31 d2                	xor    edx,edx
c0014fe8:	85 c0                	test   eax,eax
c0014fea:	74 04                	je     c0014ff0 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014fec:	89 da                	mov    edx,ebx
c0014fee:	29 c2                	sub    edx,eax
c0014ff0:	5b                   	pop    ebx
c0014ff1:	89 d0                	mov    eax,edx
c0014ff3:	c3                   	ret    

c0014ff4 <Thr::loadDLL(char const*, bool)>:
c0014ff4:	55                   	push   ebp
c0014ff5:	57                   	push   edi
c0014ff6:	56                   	push   esi
c0014ff7:	53                   	push   ebx
c0014ff8:	81 ec 34 01 00 00    	sub    esp,0x134
c0014ffe:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015005:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001500c:	56                   	push   esi
c001500d:	68 0c 21 02 c0       	push   0xc002210c
c0015012:	e8 f3 58 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015017:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001501e:	e8 b0 2a ff ff       	call   c0007ad3 <malloc>
c0015023:	83 c4 0c             	add    esp,0xc
c0015026:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001502c:	56                   	push   esi
c001502d:	50                   	push   eax
c001502e:	89 c3                	mov    ebx,eax
c0015030:	e8 a1 66 ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c0015035:	83 c4 10             	add    esp,0x10
c0015038:	85 db                	test   ebx,ebx
c001503a:	75 3c                	jne    c0015078 <Thr::loadDLL(char const*, bool)+0x84>
c001503c:	89 e8                	mov    eax,ebp
c001503e:	84 c0                	test   al,al
c0015040:	0f 84 e1 01 00 00    	je     c0015227 <Thr::loadDLL(char const*, bool)+0x233>
c0015046:	50                   	push   eax
c0015047:	50                   	push   eax
c0015048:	68 1d 21 02 c0       	push   0xc002211d
c001504d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015051:	57                   	push   edi
c0015052:	e8 f9 b5 fe ff       	call   c0000650 <strcpy>
c0015057:	58                   	pop    eax
c0015058:	5a                   	pop    edx
c0015059:	56                   	push   esi
c001505a:	57                   	push   edi
c001505b:	e8 10 b8 fe ff       	call   c0000870 <strcat>
c0015060:	59                   	pop    ecx
c0015061:	58                   	pop    eax
c0015062:	68 30 21 02 c0       	push   0xc0022130
c0015067:	57                   	push   edi
c0015068:	e8 03 b8 fe ff       	call   c0000870 <strcat>
c001506d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015070:	e8 e8 c0 ff ff       	call   c001115d <KePanic(char const*)>
c0015075:	83 c4 10             	add    esp,0x10
c0015078:	50                   	push   eax
c0015079:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001507d:	50                   	push   eax
c001507e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015082:	50                   	push   eax
c0015083:	53                   	push   ebx
c0015084:	e8 0b 6a ff ff       	call   c000ba94 <File::stat(unsigned long long*, bool*)>
c0015089:	83 c4 10             	add    esp,0x10
c001508c:	85 db                	test   ebx,ebx
c001508e:	74 0c                	je     c001509c <Thr::loadDLL(char const*, bool)+0xa8>
c0015090:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015092:	83 ec 0c             	sub    esp,0xc
c0015095:	53                   	push   ebx
c0015096:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015099:	83 c4 10             	add    esp,0x10
c001509c:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00150a1:	75 0a                	jne    c00150ad <Thr::loadDLL(char const*, bool)+0xb9>
c00150a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00150a7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00150ab:	75 3e                	jne    c00150eb <Thr::loadDLL(char const*, bool)+0xf7>
c00150ad:	89 e8                	mov    eax,ebp
c00150af:	31 db                	xor    ebx,ebx
c00150b1:	84 c0                	test   al,al
c00150b3:	0f 84 6e 01 00 00    	je     c0015227 <Thr::loadDLL(char const*, bool)+0x233>
c00150b9:	50                   	push   eax
c00150ba:	50                   	push   eax
c00150bb:	68 1d 21 02 c0       	push   0xc002211d
c00150c0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00150c4:	53                   	push   ebx
c00150c5:	e8 86 b5 fe ff       	call   c0000650 <strcpy>
c00150ca:	58                   	pop    eax
c00150cb:	5a                   	pop    edx
c00150cc:	56                   	push   esi
c00150cd:	53                   	push   ebx
c00150ce:	e8 9d b7 fe ff       	call   c0000870 <strcat>
c00150d3:	59                   	pop    ecx
c00150d4:	5f                   	pop    edi
c00150d5:	68 30 21 02 c0       	push   0xc0022130
c00150da:	53                   	push   ebx
c00150db:	e8 90 b7 fe ff       	call   c0000870 <strcat>
c00150e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150e3:	e8 75 c0 ff ff       	call   c001115d <KePanic(char const*)>
c00150e8:	83 c4 10             	add    esp,0x10
c00150eb:	53                   	push   ebx
c00150ec:	6a 03                	push   0x3
c00150ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150f2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00150f6:	05 ff 0f 00 00       	add    eax,0xfff
c00150fb:	83 d2 00             	adc    edx,0x0
c00150fe:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015102:	50                   	push   eax
c0015103:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015109:	e8 f8 4c ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c001510e:	89 c3                	mov    ebx,eax
c0015110:	58                   	pop    eax
c0015111:	5a                   	pop    edx
c0015112:	53                   	push   ebx
c0015113:	68 b2 07 02 c0       	push   0xc00207b2
c0015118:	e8 ed 57 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001511d:	89 34 24             	mov    DWORD PTR [esp],esi
c0015120:	e8 5b b4 fe ff       	call   c0000580 <strlen>
c0015125:	8b 3d a0 9c 02 c0    	mov    edi,DWORD PTR ds:0xc0029ca0
c001512b:	40                   	inc    eax
c001512c:	89 04 24             	mov    DWORD PTR [esp],eax
c001512f:	e8 9f 29 ff ff       	call   c0007ad3 <malloc>
c0015134:	59                   	pop    ecx
c0015135:	89 04 bd c0 a0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd5f40],eax
c001513c:	a1 a0 9c 02 c0       	mov    eax,ds:0xc0029ca0
c0015141:	5f                   	pop    edi
c0015142:	56                   	push   esi
c0015143:	ff 34 85 c0 a0 02 c0 	push   DWORD PTR [eax*4-0x3ffd5f40]
c001514a:	e8 01 b5 fe ff       	call   c0000650 <strcpy>
c001514f:	a1 a0 9c 02 c0       	mov    eax,ds:0xc0029ca0
c0015154:	89 1c 85 c0 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6140],ebx
c001515b:	8d 50 01             	lea    edx,[eax+0x1]
c001515e:	89 15 a0 9c 02 c0    	mov    DWORD PTR ds:0xc0029ca0,edx
c0015164:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015168:	83 c4 0c             	add    esp,0xc
c001516b:	6a 01                	push   0x1
c001516d:	53                   	push   ebx
c001516e:	56                   	push   esi
c001516f:	89 14 85 c0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6340],edx
c0015176:	e8 b5 f6 ff ff       	call   c0014830 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001517b:	83 c4 10             	add    esp,0x10
c001517e:	89 c7                	mov    edi,eax
c0015180:	89 f8                	mov    eax,edi
c0015182:	83 f0 01             	xor    eax,0x1
c0015185:	84 c0                	test   al,al
c0015187:	74 18                	je     c00151a1 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015189:	89 e8                	mov    eax,ebp
c001518b:	84 c0                	test   al,al
c001518d:	74 12                	je     c00151a1 <Thr::loadDLL(char const*, bool)+0x1ad>
c001518f:	83 ec 0c             	sub    esp,0xc
c0015192:	68 32 21 02 c0       	push   0xc0022132
c0015197:	e8 c1 bf ff ff       	call   c001115d <KePanic(char const*)>
c001519c:	83 c4 10             	add    esp,0x10
c001519f:	eb 06                	jmp    c00151a7 <Thr::loadDLL(char const*, bool)+0x1b3>
c00151a1:	89 f8                	mov    eax,edi
c00151a3:	84 c0                	test   al,al
c00151a5:	75 10                	jne    c00151b7 <Thr::loadDLL(char const*, bool)+0x1c3>
c00151a7:	83 ec 0c             	sub    esp,0xc
c00151aa:	68 51 21 02 c0       	push   0xc0022151
c00151af:	e8 a9 bf ff ff       	call   c001115d <KePanic(char const*)>
c00151b4:	83 c4 10             	add    esp,0x10
c00151b7:	31 f6                	xor    esi,esi
c00151b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00151c1:	05 ff 0f 00 00       	add    eax,0xfff
c00151c6:	83 d2 00             	adc    edx,0x0
c00151c9:	0f ac d0 0c          	shrd   eax,edx,0xc
c00151cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00151d1:	c1 ea 0c             	shr    edx,0xc
c00151d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00151d8:	ba 00 00 00 00       	mov    edx,0x0
c00151dd:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00151e1:	89 d0                	mov    eax,edx
c00151e3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00151e7:	73 32                	jae    c001521b <Thr::loadDLL(char const*, bool)+0x227>
c00151e9:	50                   	push   eax
c00151ea:	50                   	push   eax
c00151eb:	89 f0                	mov    eax,esi
c00151ed:	c1 e0 0c             	shl    eax,0xc
c00151f0:	01 d8                	add    eax,ebx
c00151f2:	50                   	push   eax
c00151f3:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00151f9:	e8 ec 46 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c00151fe:	83 c4 10             	add    esp,0x10
c0015201:	8b 00                	mov    eax,DWORD PTR [eax]
c0015203:	a8 60                	test   al,0x60
c0015205:	75 11                	jne    c0015218 <Thr::loadDLL(char const*, bool)+0x224>
c0015207:	83 ec 0c             	sub    esp,0xc
c001520a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001520f:	50                   	push   eax
c0015210:	e8 64 2b ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0015215:	83 c4 10             	add    esp,0x10
c0015218:	46                   	inc    esi
c0015219:	eb 9e                	jmp    c00151b9 <Thr::loadDLL(char const*, bool)+0x1c5>
c001521b:	89 f8                	mov    eax,edi
c001521d:	84 c0                	test   al,al
c001521f:	b8 00 00 00 00       	mov    eax,0x0
c0015224:	0f 44 d8             	cmove  ebx,eax
c0015227:	81 c4 2c 01 00 00    	add    esp,0x12c
c001522d:	89 d8                	mov    eax,ebx
c001522f:	5b                   	pop    ebx
c0015230:	5e                   	pop    esi
c0015231:	5f                   	pop    edi
c0015232:	5d                   	pop    ebp
c0015233:	c3                   	ret    

c0015234 <Thr::executeDLL(unsigned long, void*)>:
c0015234:	56                   	push   esi
c0015235:	53                   	push   ebx
c0015236:	52                   	push   edx
c0015237:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001523b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001523f:	85 db                	test   ebx,ebx
c0015241:	75 10                	jne    c0015253 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015243:	83 ec 0c             	sub    esp,0xc
c0015246:	68 6d 21 02 c0       	push   0xc002216d
c001524b:	e8 0d bf ff ff       	call   c001115d <KePanic(char const*)>
c0015250:	83 c4 10             	add    esp,0x10
c0015253:	50                   	push   eax
c0015254:	50                   	push   eax
c0015255:	53                   	push   ebx
c0015256:	68 97 21 02 c0       	push   0xc0022197
c001525b:	e8 aa 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015260:	89 d8                	mov    eax,ebx
c0015262:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015266:	83 c4 14             	add    esp,0x14
c0015269:	5b                   	pop    ebx
c001526a:	5e                   	pop    esi
c001526b:	ff e0                	jmp    eax
c001526d:	66 90                	xchg   ax,ax
c001526f:	90                   	nop

c0015270 <userModeEntryPoint(void*)>:
c0015270:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015275:	83 e8 01             	sub    eax,0x1
c0015278:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001527d:	75 01                	jne    c0015280 <userModeEntryPoint(void*)+0x10>
c001527f:	fb                   	sti    
c0015280:	fb                   	sti    
c0015281:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015286:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015289:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001528f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015293:	e9 a7 af fe ff       	jmp    c000023f <goToUsermode>

c0015298 <changeTSS>:
c0015298:	83 ec 14             	sub    esp,0x14
c001529b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152a0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00152a3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00152a8:	c1 e2 15             	shl    edx,0x15
c00152ab:	29 d0                	sub    eax,edx
c00152ad:	50                   	push   eax
c00152ae:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00152b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152b9:	05 7c 11 00 00       	add    eax,0x117c
c00152be:	50                   	push   eax
c00152bf:	e8 78 3c ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c00152c4:	83 c4 1c             	add    esp,0x1c
c00152c7:	c3                   	ret    

c00152c8 <switchToThread(ThreadControlBlock*)>:
c00152c8:	57                   	push   edi
c00152c9:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c00152cf:	56                   	push   esi
c00152d0:	53                   	push   ebx
c00152d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00152d5:	85 c9                	test   ecx,ecx
c00152d7:	0f 85 8b 00 00 00    	jne    c0015368 <switchToThread(ThreadControlBlock*)+0xa0>
c00152dd:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00152e1:	81 fa ff 00 00 00    	cmp    edx,0xff
c00152e7:	74 7b                	je     c0015364 <switchToThread(ThreadControlBlock*)+0x9c>
c00152e9:	b8 00 04 00 00       	mov    eax,0x400
c00152ee:	29 d0                	sub    eax,edx
c00152f0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00152f3:	d1 f8                	sar    eax,1
c00152f5:	01 d0                	add    eax,edx
c00152f7:	90                   	nop
c00152f8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00152fb:	e8 04 28 00 00       	call   c0017b04 <HalQueryPerformanceCounter()>
c0015300:	a3 a8 a4 02 c0       	mov    ds:0xc002a4a8,eax
c0015305:	89 c6                	mov    esi,eax
c0015307:	89 d7                	mov    edi,edx
c0015309:	2b 35 98 a4 02 c0    	sub    esi,DWORD PTR ds:0xc002a498
c001530f:	a3 98 a4 02 c0       	mov    ds:0xc002a498,eax
c0015314:	1b 3d 9c a4 02 c0    	sbb    edi,DWORD PTR ds:0xc002a49c
c001531a:	89 35 a0 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a0,esi
c0015320:	89 15 ac a4 02 c0    	mov    DWORD PTR ds:0xc002a4ac,edx
c0015326:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001532c:	89 15 9c a4 02 c0    	mov    DWORD PTR ds:0xc002a49c,edx
c0015332:	89 3d a4 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a4,edi
c0015338:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001533b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001533e:	01 c6                	add    esi,eax
c0015340:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015343:	11 d7                	adc    edi,edx
c0015345:	83 ec 0c             	sub    esp,0xc
c0015348:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001534b:	53                   	push   ebx
c001534c:	e8 26 af fe ff       	call   c0000277 <switchToThreadASM>
c0015351:	0f 20 c0             	mov    eax,cr0
c0015354:	83 c8 08             	or     eax,0x8
c0015357:	0f 22 c0             	mov    cr0,eax
c001535a:	83 c4 10             	add    esp,0x10
c001535d:	5b                   	pop    ebx
c001535e:	5e                   	pop    esi
c001535f:	5f                   	pop    edi
c0015360:	c3                   	ret    
c0015361:	8d 76 00             	lea    esi,[esi+0x0]
c0015364:	31 c0                	xor    eax,eax
c0015366:	eb 90                	jmp    c00152f8 <switchToThread(ThreadControlBlock*)+0x30>
c0015368:	5b                   	pop    ebx
c0015369:	c7 05 60 a4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x1
c0015373:	5e                   	pop    esi
c0015374:	5f                   	pop    edi
c0015375:	c3                   	ret    
c0015376:	66 90                	xchg   ax,ax

c0015378 <Process::addArgs(char**)>:
c0015378:	57                   	push   edi
c0015379:	56                   	push   esi
c001537a:	53                   	push   ebx
c001537b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001537f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015383:	85 f6                	test   esi,esi
c0015385:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c001538f:	74 4f                	je     c00153e0 <Process::addArgs(char**)+0x68>
c0015391:	8b 06                	mov    eax,DWORD PTR [esi]
c0015393:	85 c0                	test   eax,eax
c0015395:	74 49                	je     c00153e0 <Process::addArgs(char**)+0x68>
c0015397:	31 db                	xor    ebx,ebx
c0015399:	8d 76 00             	lea    esi,[esi+0x0]
c001539c:	83 ec 0c             	sub    esp,0xc
c001539f:	50                   	push   eax
c00153a0:	e8 db b1 fe ff       	call   c0000580 <strlen>
c00153a5:	83 c0 01             	add    eax,0x1
c00153a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00153ab:	e8 23 27 ff ff       	call   c0007ad3 <malloc>
c00153b0:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c00153b7:	5a                   	pop    edx
c00153b8:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00153bb:	83 c3 01             	add    ebx,0x1
c00153be:	59                   	pop    ecx
c00153bf:	52                   	push   edx
c00153c0:	50                   	push   eax
c00153c1:	e8 8a b2 fe ff       	call   c0000650 <strcpy>
c00153c6:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c00153cc:	83 c4 10             	add    esp,0x10
c00153cf:	83 c1 01             	add    ecx,0x1
c00153d2:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c00153d8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00153db:	85 c0                	test   eax,eax
c00153dd:	75 bd                	jne    c001539c <Process::addArgs(char**)+0x24>
c00153df:	90                   	nop
c00153e0:	5b                   	pop    ebx
c00153e1:	5e                   	pop    esi
c00153e2:	5f                   	pop    edi
c00153e3:	c3                   	ret    

c00153e4 <Process::Process(char const*, Process*, char**)>:
c00153e4:	56                   	push   esi
c00153e5:	53                   	push   ebx
c00153e6:	83 ec 14             	sub    esp,0x14
c00153e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153ed:	05 0c 02 00 00       	add    eax,0x20c
c00153f2:	bb 07 00 00 00       	mov    ebx,0x7
c00153f7:	89 c6                	mov    esi,eax
c00153f9:	8d 76 00             	lea    esi,[esi+0x0]
c00153fc:	85 db                	test   ebx,ebx
c00153fe:	78 14                	js     c0015414 <Process::Process(char const*, Process*, char**)+0x30>
c0015400:	83 ec 0c             	sub    esp,0xc
c0015403:	56                   	push   esi
c0015404:	e8 2f a6 00 00       	call   c001fa38 <ThreadControlBlock::ThreadControlBlock()>
c0015409:	83 c4 10             	add    esp,0x10
c001540c:	83 c6 5f             	add    esi,0x5f
c001540f:	83 eb 01             	sub    ebx,0x1
c0015412:	eb e8                	jmp    c00153fc <Process::Process(char const*, Process*, char**)+0x18>
c0015414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015418:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001541f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015423:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001542a:	83 ec 0c             	sub    esp,0xc
c001542d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015431:	e8 1c bb ff ff       	call   c0010f52 <KeNewProcessEnv(Process*)>
c0015436:	83 c4 10             	add    esp,0x10
c0015439:	89 c2                	mov    edx,eax
c001543b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001543f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015445:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015449:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015452:	a1 c0 33 02 c0       	mov    eax,ds:0xc00233c0
c0015457:	8d 50 01             	lea    edx,[eax+0x1]
c001545a:	89 15 c0 33 02 c0    	mov    DWORD PTR ds:0xc00233c0,edx
c0015460:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015464:	89 02                	mov    DWORD PTR [edx],eax
c0015466:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001546e:	83 ec 0c             	sub    esp,0xc
c0015471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015475:	e8 59 26 ff ff       	call   c0007ad3 <malloc>
c001547a:	83 c4 10             	add    esp,0x10
c001547d:	89 c3                	mov    ebx,eax
c001547f:	83 ec 08             	sub    esp,0x8
c0015482:	6a 00                	push   0x0
c0015484:	53                   	push   ebx
c0015485:	e8 c8 4b ff ff       	call   c000a052 <VAS::VAS(bool)>
c001548a:	83 c4 10             	add    esp,0x10
c001548d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015491:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015497:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001549b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00154a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00154ad:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00154b3:	e8 be c0 ff ff       	call   c0011576 <KeInitSignals()>
c00154b8:	89 c2                	mov    edx,eax
c00154ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154be:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00154c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154c8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00154ce:	85 c0                	test   eax,eax
c00154d0:	74 42                	je     c0015514 <Process::Process(char const*, Process*, char**)+0x130>
c00154d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154d6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00154dc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00154e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154e6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00154ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154f0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00154f6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00154fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015500:	05 0c 01 00 00       	add    eax,0x10c
c0015505:	83 ec 08             	sub    esp,0x8
c0015508:	52                   	push   edx
c0015509:	50                   	push   eax
c001550a:	e8 41 b1 fe ff       	call   c0000650 <strcpy>
c001550f:	83 c4 10             	add    esp,0x10
c0015512:	eb 64                	jmp    c0015578 <Process::Process(char const*, Process*, char**)+0x194>
c0015514:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001551c:	83 ec 0c             	sub    esp,0xc
c001551f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015523:	e8 ab 25 ff ff       	call   c0007ad3 <malloc>
c0015528:	83 c4 10             	add    esp,0x10
c001552b:	89 c3                	mov    ebx,eax
c001552d:	83 ec 08             	sub    esp,0x8
c0015530:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015534:	53                   	push   ebx
c0015535:	e8 32 37 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c001553a:	83 c4 10             	add    esp,0x10
c001553d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015541:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015547:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001554b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015551:	83 ec 0c             	sub    esp,0xc
c0015554:	50                   	push   eax
c0015555:	e8 c0 2f ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c001555a:	83 c4 10             	add    esp,0x10
c001555d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015561:	05 0c 01 00 00       	add    eax,0x10c
c0015566:	83 ec 08             	sub    esp,0x8
c0015569:	68 b6 21 02 c0       	push   0xc00221b6
c001556e:	50                   	push   eax
c001556f:	e8 dc b0 fe ff       	call   c0000650 <strcpy>
c0015574:	83 c4 10             	add    esp,0x10
c0015577:	90                   	nop
c0015578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001557c:	83 c0 0c             	add    eax,0xc
c001557f:	83 ec 08             	sub    esp,0x8
c0015582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015586:	50                   	push   eax
c0015587:	e8 c4 b0 fe ff       	call   c0000650 <strcpy>
c001558c:	83 c4 10             	add    esp,0x10
c001558f:	83 ec 08             	sub    esp,0x8
c0015592:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015596:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001559a:	e8 d9 fd ff ff       	call   c0015378 <Process::addArgs(char**)>
c001559f:	83 c4 10             	add    esp,0x10
c00155a2:	83 ec 08             	sub    esp,0x8
c00155a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155ad:	e8 3f ed ff ff       	call   c00142f1 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00155b2:	83 c4 10             	add    esp,0x10
c00155b5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00155b9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00155bd:	83 f0 01             	xor    eax,0x1
c00155c0:	88 c2                	mov    dl,al
c00155c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155c6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00155cc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00155d1:	83 ec 04             	sub    esp,0x4
c00155d4:	50                   	push   eax
c00155d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155d9:	68 10 22 02 c0       	push   0xc0022210
c00155de:	e8 27 53 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00155e3:	83 c4 10             	add    esp,0x10
c00155e6:	90                   	nop
c00155e7:	83 c4 14             	add    esp,0x14
c00155ea:	5b                   	pop    ebx
c00155eb:	5e                   	pop    esi
c00155ec:	c3                   	ret    
c00155ed:	90                   	nop
c00155ee:	66 90                	xchg   ax,ax

c00155f0 <Process::Process(bool, char const*, Process*, char**)>:
c00155f0:	56                   	push   esi
c00155f1:	53                   	push   ebx
c00155f2:	83 ec 24             	sub    esp,0x24
c00155f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00155f9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00155fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015601:	05 0c 02 00 00       	add    eax,0x20c
c0015606:	bb 07 00 00 00       	mov    ebx,0x7
c001560b:	89 c6                	mov    esi,eax
c001560d:	8d 76 00             	lea    esi,[esi+0x0]
c0015610:	85 db                	test   ebx,ebx
c0015612:	78 14                	js     c0015628 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015614:	83 ec 0c             	sub    esp,0xc
c0015617:	56                   	push   esi
c0015618:	e8 1b a4 00 00       	call   c001fa38 <ThreadControlBlock::ThreadControlBlock()>
c001561d:	83 c4 10             	add    esp,0x10
c0015620:	83 c6 5f             	add    esi,0x5f
c0015623:	83 eb 01             	sub    ebx,0x1
c0015626:	eb e8                	jmp    c0015610 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015628:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001562c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015633:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015637:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001563e:	83 ec 0c             	sub    esp,0xc
c0015641:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015645:	e8 08 b9 ff ff       	call   c0010f52 <KeNewProcessEnv(Process*)>
c001564a:	83 c4 10             	add    esp,0x10
c001564d:	89 c2                	mov    edx,eax
c001564f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015653:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015659:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001565d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015666:	a1 c0 33 02 c0       	mov    eax,ds:0xc00233c0
c001566b:	8d 50 01             	lea    edx,[eax+0x1]
c001566e:	89 15 c0 33 02 c0    	mov    DWORD PTR ds:0xc00233c0,edx
c0015674:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015678:	89 02                	mov    DWORD PTR [edx],eax
c001567a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015682:	83 ec 0c             	sub    esp,0xc
c0015685:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015689:	e8 45 24 ff ff       	call   c0007ad3 <malloc>
c001568e:	83 c4 10             	add    esp,0x10
c0015691:	89 c3                	mov    ebx,eax
c0015693:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015698:	83 ec 08             	sub    esp,0x8
c001569b:	50                   	push   eax
c001569c:	53                   	push   ebx
c001569d:	e8 b0 49 ff ff       	call   c000a052 <VAS::VAS(bool)>
c00156a2:	83 c4 10             	add    esp,0x10
c00156a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156a9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00156af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156b3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00156bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156c1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00156c5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00156cb:	e8 a6 be ff ff       	call   c0011576 <KeInitSignals()>
c00156d0:	89 c2                	mov    edx,eax
c00156d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156d6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00156dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156e6:	85 c0                	test   eax,eax
c00156e8:	74 42                	je     c001572c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00156ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156ee:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156f4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00156fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156fe:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015704:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015708:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001570e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015714:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015718:	05 0c 01 00 00       	add    eax,0x10c
c001571d:	83 ec 08             	sub    esp,0x8
c0015720:	52                   	push   edx
c0015721:	50                   	push   eax
c0015722:	e8 29 af fe ff       	call   c0000650 <strcpy>
c0015727:	83 c4 10             	add    esp,0x10
c001572a:	eb 64                	jmp    c0015790 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c001572c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015734:	83 ec 0c             	sub    esp,0xc
c0015737:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001573b:	e8 93 23 ff ff       	call   c0007ad3 <malloc>
c0015740:	83 c4 10             	add    esp,0x10
c0015743:	89 c3                	mov    ebx,eax
c0015745:	83 ec 08             	sub    esp,0x8
c0015748:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001574c:	53                   	push   ebx
c001574d:	e8 1a 35 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015752:	83 c4 10             	add    esp,0x10
c0015755:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015759:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001575f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015763:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015769:	83 ec 0c             	sub    esp,0xc
c001576c:	50                   	push   eax
c001576d:	e8 a8 2d ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015772:	83 c4 10             	add    esp,0x10
c0015775:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015779:	05 0c 01 00 00       	add    eax,0x10c
c001577e:	83 ec 08             	sub    esp,0x8
c0015781:	68 b6 21 02 c0       	push   0xc00221b6
c0015786:	50                   	push   eax
c0015787:	e8 c4 ae fe ff       	call   c0000650 <strcpy>
c001578c:	83 c4 10             	add    esp,0x10
c001578f:	90                   	nop
c0015790:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015794:	83 c0 0c             	add    eax,0xc
c0015797:	83 ec 08             	sub    esp,0x8
c001579a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001579e:	50                   	push   eax
c001579f:	e8 ac ae fe ff       	call   c0000650 <strcpy>
c00157a4:	83 c4 10             	add    esp,0x10
c00157a7:	83 ec 08             	sub    esp,0x8
c00157aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00157ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00157b2:	e8 c1 fb ff ff       	call   c0015378 <Process::addArgs(char**)>
c00157b7:	83 c4 10             	add    esp,0x10
c00157ba:	90                   	nop
c00157bb:	83 c4 24             	add    esp,0x24
c00157be:	5b                   	pop    ebx
c00157bf:	5e                   	pop    esi
c00157c0:	c3                   	ret    
c00157c1:	8d 76 00             	lea    esi,[esi+0x0]

c00157c4 <taskStartupFunction>:
c00157c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157c9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00157cc:	c3                   	ret    
c00157cd:	90                   	nop
c00157ce:	66 90                	xchg   ax,ax

c00157d0 <Semaphore::Semaphore(int)>:
c00157d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00157d8:	89 10                	mov    DWORD PTR [eax],edx
c00157da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157de:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00157e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00157f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00157fb:	90                   	nop
c00157fc:	c3                   	ret    
c00157fd:	90                   	nop
c00157fe:	66 90                	xchg   ax,ax

c0015800 <Mutex::Mutex()>:
c0015800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015804:	6a 01                	push   0x1
c0015806:	50                   	push   eax
c0015807:	e8 c4 ff ff ff       	call   c00157d0 <Semaphore::Semaphore(int)>
c001580c:	83 c4 08             	add    esp,0x8
c001580f:	90                   	nop
c0015810:	c3                   	ret    
c0015811:	90                   	nop
c0015812:	66 90                	xchg   ax,ax

c0015814 <Process::createThread(void (*)(void*), void*, int)>:
c0015814:	57                   	push   edi
c0015815:	31 c9                	xor    ecx,ecx
c0015817:	56                   	push   esi
c0015818:	53                   	push   ebx
c0015819:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001581d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015824:	89 f2                	mov    edx,esi
c0015826:	66 90                	xchg   ax,ax
c0015828:	0f b7 c2             	movzx  eax,dx
c001582b:	80 e2 01             	and    dl,0x1
c001582e:	74 14                	je     c0015844 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015830:	d1 f8                	sar    eax,1
c0015832:	83 c1 01             	add    ecx,0x1
c0015835:	83 f9 10             	cmp    ecx,0x10
c0015838:	89 c2                	mov    edx,eax
c001583a:	75 ec                	jne    c0015828 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001583c:	31 db                	xor    ebx,ebx
c001583e:	89 d8                	mov    eax,ebx
c0015840:	5b                   	pop    ebx
c0015841:	5e                   	pop    esi
c0015842:	5f                   	pop    edi
c0015843:	c3                   	ret    
c0015844:	b8 01 00 00 00       	mov    eax,0x1
c0015849:	d3 e0                	shl    eax,cl
c001584b:	09 c6                	or     esi,eax
c001584d:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015854:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015857:	c1 e0 05             	shl    eax,0x5
c001585a:	29 c8                	sub    eax,ecx
c001585c:	01 d8                	add    eax,ebx
c001585e:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015865:	75 0d                	jne    c0015874 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015867:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015871:	8d 76 00             	lea    esi,[esi+0x0]
c0015874:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001587a:	8d 34 49             	lea    esi,[ecx+ecx*2]
c001587d:	83 ec 0c             	sub    esp,0xc
c0015880:	c1 e6 05             	shl    esi,0x5
c0015883:	29 ce                	sub    esi,ecx
c0015885:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015888:	8d 04 33             	lea    eax,[ebx+esi*1]
c001588b:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015891:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015897:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001589d:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c00158a4:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00158aa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00158ae:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00158b4:	89 ca                	mov    edx,ecx
c00158b6:	f7 da                	neg    edx
c00158b8:	c1 e2 15             	shl    edx,0x15
c00158bb:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00158c1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00158c7:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00158cb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00158d5:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00158db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00158df:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00158e5:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00158ef:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00158f9:	68 00 01 00 00       	push   0x100
c00158fe:	e8 d0 21 ff ff       	call   c0007ad3 <malloc>
c0015903:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015906:	58                   	pop    eax
c0015907:	5a                   	pop    edx
c0015908:	53                   	push   ebx
c0015909:	68 84 a4 02 c0       	push   0xc002a484
c001590e:	e8 bd 9e 00 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015913:	83 c4 10             	add    esp,0x10
c0015916:	89 d8                	mov    eax,ebx
c0015918:	5b                   	pop    ebx
c0015919:	5e                   	pop    esi
c001591a:	5f                   	pop    edi
c001591b:	c3                   	ret    

c001591c <Process::createUserThread()>:
c001591c:	83 ec 0c             	sub    esp,0xc
c001591f:	68 80 00 00 00       	push   0x80
c0015924:	6a 00                	push   0x0
c0015926:	68 70 52 01 c0       	push   0xc0015270
c001592b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001592f:	50                   	push   eax
c0015930:	e8 df fe ff ff       	call   c0015814 <Process::createThread(void (*)(void*), void*, int)>
c0015935:	83 c4 1c             	add    esp,0x1c
c0015938:	c3                   	ret    
c0015939:	8d 76 00             	lea    esi,[esi+0x0]

c001593c <setupMultitasking(void (*)())>:
c001593c:	56                   	push   esi
c001593d:	53                   	push   ebx
c001593e:	83 ec 04             	sub    esp,0x4
c0015941:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015945:	eb 11                	jmp    c0015958 <setupMultitasking(void (*)())+0x1c>
c0015947:	90                   	nop
c0015948:	83 ec 0c             	sub    esp,0xc
c001594b:	68 84 a4 02 c0       	push   0xc002a484
c0015950:	e8 bf 9d 00 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015955:	83 c4 10             	add    esp,0x10
c0015958:	83 ec 0c             	sub    esp,0xc
c001595b:	68 84 a4 02 c0       	push   0xc002a484
c0015960:	e8 8b 9d 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015965:	83 c4 10             	add    esp,0x10
c0015968:	84 c0                	test   al,al
c001596a:	74 dc                	je     c0015948 <setupMultitasking(void (*)())+0xc>
c001596c:	83 ec 0c             	sub    esp,0xc
c001596f:	68 24 07 00 00       	push   0x724
c0015974:	e8 5a 21 ff ff       	call   c0007ad3 <malloc>
c0015979:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015980:	6a 00                	push   0x0
c0015982:	68 ba 21 02 c0       	push   0xc00221ba
c0015987:	6a 01                	push   0x1
c0015989:	50                   	push   eax
c001598a:	89 c3                	mov    ebx,eax
c001598c:	e8 5f fc ff ff       	call   c00155f0 <Process::Process(bool, char const*, Process*, char**)>
c0015991:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015997:	83 c4 14             	add    esp,0x14
c001599a:	89 1d 90 a4 02 c0    	mov    DWORD PTR ds:0xc002a490,ebx
c00159a0:	50                   	push   eax
c00159a1:	e8 c9 2d ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c00159a6:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00159ad:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00159b7:	83 c8 01             	or     eax,0x1
c00159ba:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00159c1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00159c7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00159ca:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00159d4:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00159da:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00159e4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00159ea:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00159f4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00159fe:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015a04:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015a0a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015a14:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015a1e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015a25:	e8 a9 20 ff ff       	call   c0007ad3 <malloc>
c0015a2a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015a30:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015a36:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015a3c:	5a                   	pop    edx
c0015a3d:	59                   	pop    ecx
c0015a3e:	68 b6 21 02 c0       	push   0xc00221b6
c0015a43:	50                   	push   eax
c0015a44:	e8 07 ac fe ff       	call   c0000650 <strcpy>
c0015a49:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015a50:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015a54:	83 c4 14             	add    esp,0x14
c0015a57:	5b                   	pop    ebx
c0015a58:	5e                   	pop    esi
c0015a59:	e9 0b a8 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015a5e:	66 90                	xchg   ax,ax

c0015a60 <schedule()>:
c0015a60:	8b 15 64 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a464
c0015a66:	85 d2                	test   edx,edx
c0015a68:	74 0e                	je     c0015a78 <schedule()+0x18>
c0015a6a:	c7 05 60 a4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x1
c0015a74:	c3                   	ret    
c0015a75:	8d 76 00             	lea    esi,[esi+0x0]
c0015a78:	53                   	push   ebx
c0015a79:	83 ec 14             	sub    esp,0x14
c0015a7c:	68 84 a4 02 c0       	push   0xc002a484
c0015a81:	e8 6a 9c 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a86:	83 c4 10             	add    esp,0x10
c0015a89:	84 c0                	test   al,al
c0015a8b:	75 3f                	jne    c0015acc <schedule()+0x6c>
c0015a8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a92:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015a95:	83 fa 01             	cmp    edx,0x1
c0015a98:	74 3a                	je     c0015ad4 <schedule()+0x74>
c0015a9a:	66 90                	xchg   ax,ax
c0015a9c:	83 ec 0c             	sub    esp,0xc
c0015a9f:	68 84 a4 02 c0       	push   0xc002a484
c0015aa4:	e8 63 9c 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015aa9:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0015ab0:	89 c3                	mov    ebx,eax
c0015ab2:	e8 5d 9c 00 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ab7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015abe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ac1:	e8 02 f8 ff ff       	call   c00152c8 <switchToThread(ThreadControlBlock*)>
c0015ac6:	83 c4 10             	add    esp,0x10
c0015ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0015acc:	83 c4 08             	add    esp,0x8
c0015acf:	5b                   	pop    ebx
c0015ad0:	c3                   	ret    
c0015ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ad4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015adb:	83 ec 08             	sub    esp,0x8
c0015ade:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ae3:	50                   	push   eax
c0015ae4:	68 84 a4 02 c0       	push   0xc002a484
c0015ae9:	e8 e2 9c 00 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015aee:	83 c4 10             	add    esp,0x10
c0015af1:	eb a9                	jmp    c0015a9c <schedule()+0x3c>
c0015af3:	90                   	nop

c0015af4 <Semaphore::tryAcquire()>:
c0015af4:	53                   	push   ebx
c0015af5:	83 ec 08             	sub    esp,0x8
c0015af8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015afc:	fa                   	cli    
c0015afd:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0015b03:	8d 42 01             	lea    eax,[edx+0x1]
c0015b06:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015b0b:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015b10:	8d 58 01             	lea    ebx,[eax+0x1]
c0015b13:	89 1d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ebx
c0015b19:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015b1c:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015b1e:	7c 2c                	jl     c0015b4c <Semaphore::tryAcquire()+0x58>
c0015b20:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015b25:	85 c0                	test   eax,eax
c0015b27:	75 0b                	jne    c0015b34 <Semaphore::tryAcquire()+0x40>
c0015b29:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015b2e:	85 c0                	test   eax,eax
c0015b30:	75 5a                	jne    c0015b8c <Semaphore::tryAcquire()+0x98>
c0015b32:	66 90                	xchg   ax,ax
c0015b34:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015b3a:	31 c0                	xor    eax,eax
c0015b3c:	85 d2                	test   edx,edx
c0015b3e:	75 04                	jne    c0015b44 <Semaphore::tryAcquire()+0x50>
c0015b40:	fb                   	sti    
c0015b41:	8d 76 00             	lea    esi,[esi+0x0]
c0015b44:	83 c4 08             	add    esp,0x8
c0015b47:	5b                   	pop    ebx
c0015b48:	c3                   	ret    
c0015b49:	8d 76 00             	lea    esi,[esi+0x0]
c0015b4c:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015b51:	83 c3 01             	add    ebx,0x1
c0015b54:	85 c0                	test   eax,eax
c0015b56:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015b59:	75 21                	jne    c0015b7c <Semaphore::tryAcquire()+0x88>
c0015b5b:	8b 0d 60 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a460
c0015b61:	85 c9                	test   ecx,ecx
c0015b63:	74 17                	je     c0015b7c <Semaphore::tryAcquire()+0x88>
c0015b65:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015b6f:	e8 ec fe ff ff       	call   c0015a60 <schedule()>
c0015b74:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015b79:	8d 50 ff             	lea    edx,[eax-0x1]
c0015b7c:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015b82:	85 d2                	test   edx,edx
c0015b84:	b0 01                	mov    al,0x1
c0015b86:	75 bc                	jne    c0015b44 <Semaphore::tryAcquire()+0x50>
c0015b88:	eb b6                	jmp    c0015b40 <Semaphore::tryAcquire()+0x4c>
c0015b8a:	66 90                	xchg   ax,ax
c0015b8c:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015b96:	e8 c5 fe ff ff       	call   c0015a60 <schedule()>
c0015b9b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015ba0:	8d 50 ff             	lea    edx,[eax-0x1]
c0015ba3:	31 c0                	xor    eax,eax
c0015ba5:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015bab:	85 d2                	test   edx,edx
c0015bad:	75 95                	jne    c0015b44 <Semaphore::tryAcquire()+0x50>
c0015baf:	eb 8f                	jmp    c0015b40 <Semaphore::tryAcquire()+0x4c>
c0015bb1:	90                   	nop
c0015bb2:	66 90                	xchg   ax,ax

c0015bb4 <Semaphore::assertLocked(char const*)>:
c0015bb4:	83 ec 0c             	sub    esp,0xc
c0015bb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015bbb:	fa                   	cli    
c0015bbc:	8b 0d 68 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a468
c0015bc2:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015bc7:	83 c1 01             	add    ecx,0x1
c0015bca:	89 0d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ecx
c0015bd0:	8d 48 01             	lea    ecx,[eax+0x1]
c0015bd3:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015bd9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015bdb:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015bde:	7c 28                	jl     c0015c08 <Semaphore::assertLocked(char const*)+0x54>
c0015be0:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015be5:	85 c0                	test   eax,eax
c0015be7:	75 0b                	jne    c0015bf4 <Semaphore::assertLocked(char const*)+0x40>
c0015be9:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015bee:	85 c0                	test   eax,eax
c0015bf0:	75 32                	jne    c0015c24 <Semaphore::assertLocked(char const*)+0x70>
c0015bf2:	66 90                	xchg   ax,ax
c0015bf4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015bf9:	83 e8 01             	sub    eax,0x1
c0015bfc:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c01:	75 01                	jne    c0015c04 <Semaphore::assertLocked(char const*)+0x50>
c0015c03:	fb                   	sti    
c0015c04:	83 c4 0c             	add    esp,0xc
c0015c07:	c3                   	ret    
c0015c08:	83 ec 0c             	sub    esp,0xc
c0015c0b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015c0f:	52                   	push   edx
c0015c10:	e8 48 b5 ff ff       	call   c001115d <KePanic(char const*)>
c0015c15:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015c1a:	83 c4 10             	add    esp,0x10
c0015c1d:	83 e8 01             	sub    eax,0x1
c0015c20:	eb be                	jmp    c0015be0 <Semaphore::assertLocked(char const*)+0x2c>
c0015c22:	66 90                	xchg   ax,ax
c0015c24:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015c2e:	e8 2d fe ff ff       	call   c0015a60 <schedule()>
c0015c33:	eb bf                	jmp    c0015bf4 <Semaphore::assertLocked(char const*)+0x40>
c0015c35:	8d 76 00             	lea    esi,[esi+0x0]

c0015c38 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015c38:	83 ec 0c             	sub    esp,0xc
c0015c3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c44:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015c47:	e8 14 fe ff ff       	call   c0015a60 <schedule()>
c0015c4c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c51:	83 e8 01             	sub    eax,0x1
c0015c54:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c59:	75 01                	jne    c0015c5c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015c5b:	fb                   	sti    
c0015c5c:	83 c4 0c             	add    esp,0xc
c0015c5f:	c3                   	ret    

c0015c60 <blockTask(TaskState)>:
c0015c60:	83 ec 0c             	sub    esp,0xc
c0015c63:	fa                   	cli    
c0015c64:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c6d:	83 c0 01             	add    eax,0x1
c0015c70:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c7a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015c7d:	e8 de fd ff ff       	call   c0015a60 <schedule()>
c0015c82:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c87:	83 e8 01             	sub    eax,0x1
c0015c8a:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c8f:	75 03                	jne    c0015c94 <blockTask(TaskState)+0x34>
c0015c91:	fb                   	sti    
c0015c92:	66 90                	xchg   ax,ax
c0015c94:	83 c4 0c             	add    esp,0xc
c0015c97:	c3                   	ret    

c0015c98 <waitTask(int, int*, int)>:
c0015c98:	83 ec 18             	sub    esp,0x18
c0015c9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ca0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015ca4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015ca7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015cab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cb0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015cb3:	6a 07                	push   0x7
c0015cb5:	e8 a6 ff ff ff       	call   c0015c60 <blockTask(TaskState)>
c0015cba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cbf:	83 c4 10             	add    esp,0x10
c0015cc2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015cc5:	85 d2                	test   edx,edx
c0015cc7:	74 0b                	je     c0015cd4 <waitTask(int, int*, int)+0x3c>
c0015cc9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015ccc:	89 02                	mov    DWORD PTR [edx],eax
c0015cce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cd3:	90                   	nop
c0015cd4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015cd7:	83 c4 0c             	add    esp,0xc
c0015cda:	c3                   	ret    
c0015cdb:	90                   	nop

c0015cdc <milliTenthSleepUntil(unsigned int)>:
c0015cdc:	83 ec 0c             	sub    esp,0xc
c0015cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ce3:	39 05 4c 95 02 c0    	cmp    DWORD PTR ds:0xc002954c,eax
c0015ce9:	76 05                	jbe    c0015cf0 <milliTenthSleepUntil(unsigned int)+0x14>
c0015ceb:	90                   	nop
c0015cec:	83 c4 0c             	add    esp,0xc
c0015cef:	c3                   	ret    
c0015cf0:	fa                   	cli    
c0015cf1:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0015cf7:	83 ec 08             	sub    esp,0x8
c0015cfa:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c0015d00:	83 c2 01             	add    edx,0x1
c0015d03:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015d09:	83 c1 01             	add    ecx,0x1
c0015d0c:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015d12:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015d18:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015d1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d20:	50                   	push   eax
c0015d21:	68 78 a4 02 c0       	push   0xc002a478
c0015d26:	e8 a5 9a 00 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d2b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015d32:	e8 29 ff ff ff       	call   c0015c60 <blockTask(TaskState)>
c0015d37:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015d3c:	83 c4 10             	add    esp,0x10
c0015d3f:	83 e8 01             	sub    eax,0x1
c0015d42:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015d47:	85 c0                	test   eax,eax
c0015d49:	75 09                	jne    c0015d54 <milliTenthSleepUntil(unsigned int)+0x78>
c0015d4b:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015d50:	85 c0                	test   eax,eax
c0015d52:	75 14                	jne    c0015d68 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015d54:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015d59:	83 e8 01             	sub    eax,0x1
c0015d5c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015d61:	75 89                	jne    c0015cec <milliTenthSleepUntil(unsigned int)+0x10>
c0015d63:	fb                   	sti    
c0015d64:	83 c4 0c             	add    esp,0xc
c0015d67:	c3                   	ret    
c0015d68:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015d72:	e8 e9 fc ff ff       	call   c0015a60 <schedule()>
c0015d77:	eb db                	jmp    c0015d54 <milliTenthSleepUntil(unsigned int)+0x78>
c0015d79:	8d 76 00             	lea    esi,[esi+0x0]

c0015d7c <milliTenthSleep(unsigned int)>:
c0015d7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d80:	a1 4c 95 02 c0       	mov    eax,ds:0xc002954c
c0015d85:	01 c2                	add    edx,eax
c0015d87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015d8b:	e9 4c ff ff ff       	jmp    c0015cdc <milliTenthSleepUntil(unsigned int)>

c0015d90 <sleep(unsigned int)>:
c0015d90:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015d98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d9c:	eb de                	jmp    c0015d7c <milliTenthSleep(unsigned int)>
c0015d9e:	66 90                	xchg   ax,ax

c0015da0 <Semaphore::acquire()>:
c0015da0:	83 ec 0c             	sub    esp,0xc
c0015da3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015da7:	fa                   	cli    
c0015da8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015dad:	83 c0 01             	add    eax,0x1
c0015db0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015db5:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015dba:	8d 48 01             	lea    ecx,[eax+0x1]
c0015dbd:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015dc3:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015dc6:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015dc8:	7d 2e                	jge    c0015df8 <Semaphore::acquire()+0x58>
c0015dca:	83 c1 01             	add    ecx,0x1
c0015dcd:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015dd0:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015dd5:	85 c0                	test   eax,eax
c0015dd7:	75 0b                	jne    c0015de4 <Semaphore::acquire()+0x44>
c0015dd9:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015dde:	85 c0                	test   eax,eax
c0015de0:	75 66                	jne    c0015e48 <Semaphore::acquire()+0xa8>
c0015de2:	66 90                	xchg   ax,ax
c0015de4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015de9:	83 e8 01             	sub    eax,0x1
c0015dec:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015df1:	75 01                	jne    c0015df4 <Semaphore::acquire()+0x54>
c0015df3:	fb                   	sti    
c0015df4:	83 c4 0c             	add    esp,0xc
c0015df7:	c3                   	ret    
c0015df8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dfd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015e04:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015e07:	85 c9                	test   ecx,ecx
c0015e09:	74 51                	je     c0015e5c <Semaphore::acquire()+0xbc>
c0015e0b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015e0e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e14:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015e17:	90                   	nop
c0015e18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e1d:	83 ec 0c             	sub    esp,0xc
c0015e20:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015e23:	68 3c 22 02 c0       	push   0xc002223c
c0015e28:	e8 dd 4a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015e2d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015e34:	e8 27 fe ff ff       	call   c0015c60 <blockTask(TaskState)>
c0015e39:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015e3e:	83 c4 10             	add    esp,0x10
c0015e41:	83 e8 01             	sub    eax,0x1
c0015e44:	eb 8a                	jmp    c0015dd0 <Semaphore::acquire()+0x30>
c0015e46:	66 90                	xchg   ax,ax
c0015e48:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015e52:	e8 09 fc ff ff       	call   c0015a60 <schedule()>
c0015e57:	eb 8b                	jmp    c0015de4 <Semaphore::acquire()+0x44>
c0015e59:	8d 76 00             	lea    esi,[esi+0x0]
c0015e5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015e64:	eb b2                	jmp    c0015e18 <Semaphore::acquire()+0x78>
c0015e66:	66 90                	xchg   ax,ax

c0015e68 <taskReturned>:
c0015e68:	83 ec 18             	sub    esp,0x18
c0015e6b:	68 5c 22 02 c0       	push   0xc002225c
c0015e70:	e8 e8 b2 ff ff       	call   c001115d <KePanic(char const*)>
c0015e75:	83 c4 10             	add    esp,0x10
c0015e78:	83 ec 0c             	sub    esp,0xc
c0015e7b:	6a 02                	push   0x2
c0015e7d:	e8 de fd ff ff       	call   c0015c60 <blockTask(TaskState)>
c0015e82:	fa                   	cli    
c0015e83:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015e88:	83 c0 01             	add    eax,0x1
c0015e8b:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015e90:	e8 cb fb ff ff       	call   c0015a60 <schedule()>
c0015e95:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015e9a:	83 c4 10             	add    esp,0x10
c0015e9d:	83 e8 01             	sub    eax,0x1
c0015ea0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015ea5:	85 c0                	test   eax,eax
c0015ea7:	75 cf                	jne    c0015e78 <taskReturned+0x10>
c0015ea9:	fb                   	sti    
c0015eaa:	eb cc                	jmp    c0015e78 <taskReturned+0x10>

c0015eac <Thr::processFromPID(int)>:
c0015eac:	57                   	push   edi
c0015ead:	56                   	push   esi
c0015eae:	53                   	push   ebx
c0015eaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015eb3:	fa                   	cli    
c0015eb4:	8b 0d 68 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a468
c0015eba:	83 ec 0c             	sub    esp,0xc
c0015ebd:	68 84 a4 02 c0       	push   0xc002a484
c0015ec2:	83 c1 01             	add    ecx,0x1
c0015ec5:	89 0d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ecx
c0015ecb:	e8 3c 98 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ed0:	83 c4 10             	add    esp,0x10
c0015ed3:	89 c7                	mov    edi,eax
c0015ed5:	eb 15                	jmp    c0015eec <Thr::processFromPID(int)+0x40>
c0015ed7:	90                   	nop
c0015ed8:	83 ec 0c             	sub    esp,0xc
c0015edb:	68 84 a4 02 c0       	push   0xc002a484
c0015ee0:	e8 27 98 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ee5:	83 c4 10             	add    esp,0x10
c0015ee8:	39 f8                	cmp    eax,edi
c0015eea:	74 50                	je     c0015f3c <Thr::processFromPID(int)+0x90>
c0015eec:	83 ec 0c             	sub    esp,0xc
c0015eef:	68 84 a4 02 c0       	push   0xc002a484
c0015ef4:	e8 13 98 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ef9:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0015f00:	89 c3                	mov    ebx,eax
c0015f02:	e8 0d 98 00 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f07:	58                   	pop    eax
c0015f08:	5a                   	pop    edx
c0015f09:	53                   	push   ebx
c0015f0a:	68 84 a4 02 c0       	push   0xc002a484
c0015f0f:	e8 bc 98 00 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f14:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f17:	83 c4 10             	add    esp,0x10
c0015f1a:	39 30                	cmp    DWORD PTR [eax],esi
c0015f1c:	75 ba                	jne    c0015ed8 <Thr::processFromPID(int)+0x2c>
c0015f1e:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f23:	83 e8 01             	sub    eax,0x1
c0015f26:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015f2b:	74 0b                	je     c0015f38 <Thr::processFromPID(int)+0x8c>
c0015f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0015f30:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f33:	90                   	nop
c0015f34:	5b                   	pop    ebx
c0015f35:	5e                   	pop    esi
c0015f36:	5f                   	pop    edi
c0015f37:	c3                   	ret    
c0015f38:	fb                   	sti    
c0015f39:	eb f5                	jmp    c0015f30 <Thr::processFromPID(int)+0x84>
c0015f3b:	90                   	nop
c0015f3c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f41:	8d 50 ff             	lea    edx,[eax-0x1]
c0015f44:	31 c0                	xor    eax,eax
c0015f46:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015f4c:	85 d2                	test   edx,edx
c0015f4e:	75 e4                	jne    c0015f34 <Thr::processFromPID(int)+0x88>
c0015f50:	fb                   	sti    
c0015f51:	5b                   	pop    ebx
c0015f52:	5e                   	pop    esi
c0015f53:	5f                   	pop    edi
c0015f54:	c3                   	ret    
c0015f55:	8d 76 00             	lea    esi,[esi+0x0]

c0015f58 <unblockTask(ThreadControlBlock*)>:
c0015f58:	53                   	push   ebx
c0015f59:	83 ec 08             	sub    esp,0x8
c0015f5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f60:	fa                   	cli    
c0015f61:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f66:	83 c0 01             	add    eax,0x1
c0015f69:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015f6e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015f71:	85 c0                	test   eax,eax
c0015f73:	74 67                	je     c0015fdc <unblockTask(ThreadControlBlock*)+0x84>
c0015f75:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015f78:	83 f8 01             	cmp    eax,0x1
c0015f7b:	74 37                	je     c0015fb4 <unblockTask(ThreadControlBlock*)+0x5c>
c0015f7d:	83 ec 0c             	sub    esp,0xc
c0015f80:	68 84 a4 02 c0       	push   0xc002a484
c0015f85:	e8 82 97 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f8a:	83 c4 10             	add    esp,0x10
c0015f8d:	85 c0                	test   eax,eax
c0015f8f:	75 1b                	jne    c0015fac <unblockTask(ThreadControlBlock*)+0x54>
c0015f91:	eb 5d                	jmp    c0015ff0 <unblockTask(ThreadControlBlock*)+0x98>
c0015f93:	90                   	nop
c0015f94:	83 ec 08             	sub    esp,0x8
c0015f97:	50                   	push   eax
c0015f98:	68 84 a4 02 c0       	push   0xc002a484
c0015f9d:	e8 8a 9a 00 00       	call   c001fa2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015fa2:	83 c4 10             	add    esp,0x10
c0015fa5:	85 c0                	test   eax,eax
c0015fa7:	74 47                	je     c0015ff0 <unblockTask(ThreadControlBlock*)+0x98>
c0015fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0015fac:	39 c3                	cmp    ebx,eax
c0015fae:	75 e4                	jne    c0015f94 <unblockTask(ThreadControlBlock*)+0x3c>
c0015fb0:	eb 12                	jmp    c0015fc4 <unblockTask(ThreadControlBlock*)+0x6c>
c0015fb2:	66 90                	xchg   ax,ax
c0015fb4:	83 ec 0c             	sub    esp,0xc
c0015fb7:	68 d8 21 02 c0       	push   0xc00221d8
c0015fbc:	e8 49 49 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015fc1:	83 c4 10             	add    esp,0x10
c0015fc4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015fc9:	83 e8 01             	sub    eax,0x1
c0015fcc:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015fd1:	75 01                	jne    c0015fd4 <unblockTask(ThreadControlBlock*)+0x7c>
c0015fd3:	fb                   	sti    
c0015fd4:	83 c4 08             	add    esp,0x8
c0015fd7:	5b                   	pop    ebx
c0015fd8:	c3                   	ret    
c0015fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0015fdc:	83 ec 0c             	sub    esp,0xc
c0015fdf:	68 c1 21 02 c0       	push   0xc00221c1
c0015fe4:	e8 21 49 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015fe9:	83 c4 10             	add    esp,0x10
c0015fec:	eb d6                	jmp    c0015fc4 <unblockTask(ThreadControlBlock*)+0x6c>
c0015fee:	66 90                	xchg   ax,ax
c0015ff0:	83 ec 08             	sub    esp,0x8
c0015ff3:	53                   	push   ebx
c0015ff4:	68 84 a4 02 c0       	push   0xc002a484
c0015ff9:	e8 d2 97 00 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ffe:	83 c4 10             	add    esp,0x10
c0016001:	eb c1                	jmp    c0015fc4 <unblockTask(ThreadControlBlock*)+0x6c>
c0016003:	90                   	nop

c0016004 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016004:	55                   	push   ebp
c0016005:	57                   	push   edi
c0016006:	56                   	push   esi
c0016007:	53                   	push   ebx
c0016008:	83 ec 1c             	sub    esp,0x1c
c001600b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001600f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016012:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016018:	85 ed                	test   ebp,ebp
c001601a:	7e 28                	jle    c0016044 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001601c:	31 f6                	xor    esi,esi
c001601e:	66 90                	xchg   ax,ax
c0016020:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016027:	83 ec 0c             	sub    esp,0xc
c001602a:	83 c6 01             	add    esi,0x1
c001602d:	57                   	push   edi
c001602e:	e8 b0 1a ff ff       	call   c0007ae3 <free>
c0016033:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016036:	83 c4 10             	add    esp,0x10
c0016039:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001603f:	7f df                	jg     c0016020 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016041:	8d 76 00             	lea    esi,[esi+0x0]
c0016044:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001604e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016053:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016056:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016059:	d3 c0                	rol    eax,cl
c001605b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016062:	21 c8                	and    eax,ecx
c0016064:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001606b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001606e:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016076:	89 f7                	mov    edi,esi
c0016078:	0f 85 72 01 00 00    	jne    c00161f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001607e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016084:	85 ed                	test   ebp,ebp
c0016086:	74 1c                	je     c00160a4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016088:	83 ec 0c             	sub    esp,0xc
c001608b:	55                   	push   ebp
c001608c:	e8 dd ad ff ff       	call   c0010e6e <EnvVarContainer::~EnvVarContainer()>
c0016091:	59                   	pop    ecx
c0016092:	5e                   	pop    esi
c0016093:	6a 0c                	push   0xc
c0016095:	55                   	push   ebp
c0016096:	e8 71 47 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001609b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001609e:	83 c4 10             	add    esp,0x10
c00160a1:	89 f7                	mov    edi,esi
c00160a3:	90                   	nop
c00160a4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00160aa:	85 c0                	test   eax,eax
c00160ac:	0f 84 b2 00 00 00    	je     c0016164 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00160b2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00160b5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00160b9:	31 c9                	xor    ecx,ecx
c00160bb:	eb 17                	jmp    c00160d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00160bd:	8d 76 00             	lea    esi,[esi+0x0]
c00160c0:	83 c1 01             	add    ecx,0x1
c00160c3:	83 f9 10             	cmp    ecx,0x10
c00160c6:	0f 84 98 00 00 00    	je     c0016164 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00160cc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00160d2:	66 90                	xchg   ax,ax
c00160d4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00160db:	d3 fa                	sar    edx,cl
c00160dd:	80 e2 01             	and    dl,0x1
c00160e0:	74 de                	je     c00160c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00160e2:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00160e5:	c1 e2 05             	shl    edx,0x5
c00160e8:	29 ca                	sub    edx,ecx
c00160ea:	01 d0                	add    eax,edx
c00160ec:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00160f2:	83 fd 07             	cmp    ebp,0x7
c00160f5:	75 c9                	jne    c00160c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00160f7:	05 40 02 00 00       	add    eax,0x240
c00160fc:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00160ff:	83 fd ff             	cmp    ebp,0xffffffff
c0016102:	0f 8c f0 00 00 00    	jl     c00161f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016108:	0f 84 ae 01 00 00    	je     c00162bc <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001610e:	85 ed                	test   ebp,ebp
c0016110:	0f 84 92 01 00 00    	je     c00162a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016116:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016118:	75 a6                	jne    c00160c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001611a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001611e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016124:	01 d0                	add    eax,edx
c0016126:	66 90                	xchg   ax,ax
c0016128:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001612c:	83 ec 0c             	sub    esp,0xc
c001612f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016135:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016138:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001613e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016145:	50                   	push   eax
c0016146:	e8 0d fe ff ff       	call   c0015f58 <unblockTask(ThreadControlBlock*)>
c001614b:	83 c4 10             	add    esp,0x10
c001614e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016151:	89 f7                	mov    edi,esi
c0016153:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016157:	83 c1 01             	add    ecx,0x1
c001615a:	83 f9 10             	cmp    ecx,0x10
c001615d:	0f 85 69 ff ff ff    	jne    c00160cc <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016163:	90                   	nop
c0016164:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001616a:	85 c0                	test   eax,eax
c001616c:	74 62                	je     c00161d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001616e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016174:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001617a:	74 54                	je     c00161d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001617c:	83 ec 0c             	sub    esp,0xc
c001617f:	68 84 a4 02 c0       	push   0xc002a484
c0016184:	e8 83 95 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016189:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0016190:	89 c7                	mov    edi,eax
c0016192:	e8 59 95 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016197:	83 c4 10             	add    esp,0x10
c001619a:	84 c0                	test   al,al
c001619c:	0f 84 ce 00 00 00    	je     c0016270 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00161a2:	66 90                	xchg   ax,ax
c00161a4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161a7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00161ad:	85 d2                	test   edx,edx
c00161af:	74 0f                	je     c00161c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00161b1:	8b 02                	mov    eax,DWORD PTR [edx]
c00161b3:	83 ec 0c             	sub    esp,0xc
c00161b6:	52                   	push   edx
c00161b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161ba:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161bd:	83 c4 10             	add    esp,0x10
c00161c0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00161ca:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00161cd:	8d 76 00             	lea    esi,[esi+0x0]
c00161d0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00161d6:	85 db                	test   ebx,ebx
c00161d8:	74 16                	je     c00161f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00161da:	83 ec 0c             	sub    esp,0xc
c00161dd:	53                   	push   ebx
c00161de:	e8 ad 39 ff ff       	call   c0009b90 <VAS::~VAS()>
c00161e3:	58                   	pop    eax
c00161e4:	5a                   	pop    edx
c00161e5:	6a 14                	push   0x14
c00161e7:	53                   	push   ebx
c00161e8:	e8 1f 46 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00161ed:	83 c4 10             	add    esp,0x10
c00161f0:	83 c4 1c             	add    esp,0x1c
c00161f3:	5b                   	pop    ebx
c00161f4:	5e                   	pop    esi
c00161f5:	5f                   	pop    edi
c00161f6:	5d                   	pop    ebp
c00161f7:	c3                   	ret    
c00161f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00161fc:	83 ec 0c             	sub    esp,0xc
c00161ff:	68 90 22 02 c0       	push   0xc0022290
c0016204:	e8 54 af ff ff       	call   c001115d <KePanic(char const*)>
c0016209:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001620c:	83 c4 10             	add    esp,0x10
c001620f:	89 f7                	mov    edi,esi
c0016211:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016215:	e9 a6 fe ff ff       	jmp    c00160c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001621a:	66 90                	xchg   ax,ax
c001621c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016222:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016228:	75 1e                	jne    c0016248 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001622a:	83 ec 0c             	sub    esp,0xc
c001622d:	68 f8 22 02 c0       	push   0xc00222f8
c0016232:	e8 d3 46 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016237:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001623e:	e8 1d fa ff ff       	call   c0015c60 <blockTask(TaskState)>
c0016243:	83 c4 10             	add    esp,0x10
c0016246:	66 90                	xchg   ax,ax
c0016248:	83 ec 08             	sub    esp,0x8
c001624b:	56                   	push   esi
c001624c:	68 84 a4 02 c0       	push   0xc002a484
c0016251:	e8 7a 95 00 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016256:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c001625d:	e8 aa 94 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016262:	83 c4 10             	add    esp,0x10
c0016265:	39 f8                	cmp    eax,edi
c0016267:	0f 84 37 ff ff ff    	je     c00161a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001626d:	8d 76 00             	lea    esi,[esi+0x0]
c0016270:	83 ec 0c             	sub    esp,0xc
c0016273:	68 84 a4 02 c0       	push   0xc002a484
c0016278:	e8 8f 94 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001627d:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0016284:	89 c6                	mov    esi,eax
c0016286:	e8 89 94 00 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001628b:	83 c4 10             	add    esp,0x10
c001628e:	39 f3                	cmp    ebx,esi
c0016290:	74 b6                	je     c0016248 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016292:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016295:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016298:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001629e:	75 a8                	jne    c0016248 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00162a0:	e9 77 ff ff ff       	jmp    c001621c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00162a5:	8d 76 00             	lea    esi,[esi+0x0]
c00162a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00162ac:	83 ec 0c             	sub    esp,0xc
c00162af:	68 c4 22 02 c0       	push   0xc00222c4
c00162b4:	e9 4b ff ff ff       	jmp    c0016204 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00162b9:	8d 76 00             	lea    esi,[esi+0x0]
c00162bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00162c0:	8b 36                	mov    esi,DWORD PTR [esi]
c00162c2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00162c5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162c8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00162ce:	01 d7                	add    edi,edx
c00162d0:	89 f8                	mov    eax,edi
c00162d2:	e9 51 fe ff ff       	jmp    c0016128 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00162d7:	90                   	nop

c00162d8 <cleanerTaskFunction(void*)>:
c00162d8:	53                   	push   ebx
c00162d9:	83 ec 08             	sub    esp,0x8
c00162dc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00162e1:	83 e8 01             	sub    eax,0x1
c00162e4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00162e9:	75 01                	jne    c00162ec <cleanerTaskFunction(void*)+0x14>
c00162eb:	fb                   	sti    
c00162ec:	fa                   	cli    
c00162ed:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00162f2:	80 3d 4c a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a44c,0x0
c00162f9:	8d 50 01             	lea    edx,[eax+0x1]
c00162fc:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0016302:	0f 84 c4 00 00 00    	je     c00163cc <cleanerTaskFunction(void*)+0xf4>
c0016308:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001630d:	85 c0                	test   eax,eax
c001630f:	75 03                	jne    c0016314 <cleanerTaskFunction(void*)+0x3c>
c0016311:	fb                   	sti    
c0016312:	66 90                	xchg   ax,ax
c0016314:	c6 05 4c a4 02 c0 00 	mov    BYTE PTR ds:0xc002a44c,0x0
c001631b:	fa                   	cli    
c001631c:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0016322:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c0016328:	83 c2 01             	add    edx,0x1
c001632b:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0016331:	83 c1 01             	add    ecx,0x1
c0016334:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c001633a:	fa                   	cli    
c001633b:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c0016341:	83 c3 01             	add    ebx,0x1
c0016344:	89 1d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ebx
c001634a:	eb 28                	jmp    c0016374 <cleanerTaskFunction(void*)+0x9c>
c001634c:	83 ec 0c             	sub    esp,0xc
c001634f:	68 6c a4 02 c0       	push   0xc002a46c
c0016354:	e8 b3 93 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016359:	c7 04 24 6c a4 02 c0 	mov    DWORD PTR [esp],0xc002a46c
c0016360:	89 c3                	mov    ebx,eax
c0016362:	e8 ad 93 00 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016367:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001636a:	e8 95 fc ff ff       	call   c0016004 <cleanupTerminatedTask(ThreadControlBlock*)>
c001636f:	83 c4 10             	add    esp,0x10
c0016372:	66 90                	xchg   ax,ax
c0016374:	83 ec 0c             	sub    esp,0xc
c0016377:	68 6c a4 02 c0       	push   0xc002a46c
c001637c:	e8 6f 93 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016381:	83 c4 10             	add    esp,0x10
c0016384:	84 c0                	test   al,al
c0016386:	74 c4                	je     c001634c <cleanerTaskFunction(void*)+0x74>
c0016388:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001638d:	83 e8 01             	sub    eax,0x1
c0016390:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016395:	75 01                	jne    c0016398 <cleanerTaskFunction(void*)+0xc0>
c0016397:	fb                   	sti    
c0016398:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c001639d:	83 e8 01             	sub    eax,0x1
c00163a0:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c00163a5:	0f 85 31 ff ff ff    	jne    c00162dc <cleanerTaskFunction(void*)+0x4>
c00163ab:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c00163b0:	85 c0                	test   eax,eax
c00163b2:	0f 84 24 ff ff ff    	je     c00162dc <cleanerTaskFunction(void*)+0x4>
c00163b8:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c00163c2:	e8 99 f6 ff ff       	call   c0015a60 <schedule()>
c00163c7:	e9 10 ff ff ff       	jmp    c00162dc <cleanerTaskFunction(void*)+0x4>
c00163cc:	83 ec 0c             	sub    esp,0xc
c00163cf:	6a 02                	push   0x2
c00163d1:	e8 62 f8 ff ff       	call   c0015c38 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00163d6:	83 c4 10             	add    esp,0x10
c00163d9:	e9 36 ff ff ff       	jmp    c0016314 <cleanerTaskFunction(void*)+0x3c>
c00163de:	66 90                	xchg   ax,ax

c00163e0 <terminateTask(int)>:
c00163e0:	83 ec 14             	sub    esp,0x14
c00163e3:	fa                   	cli    
c00163e4:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c00163ea:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c00163f0:	83 c2 01             	add    edx,0x1
c00163f3:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c00163f9:	83 c1 01             	add    ecx,0x1
c00163fc:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0016402:	fa                   	cli    
c0016403:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016408:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001640c:	83 c0 01             	add    eax,0x1
c001640f:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016414:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016419:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001641c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016421:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016424:	50                   	push   eax
c0016425:	68 6c a4 02 c0       	push   0xc002a46c
c001642a:	e8 a1 93 00 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001642f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016434:	83 c4 10             	add    esp,0x10
c0016437:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001643e:	a1 48 a4 02 c0       	mov    eax,ds:0xc002a448
c0016443:	85 c0                	test   eax,eax
c0016445:	74 65                	je     c00164ac <terminateTask(int)+0xcc>
c0016447:	c6 05 4c a4 02 c0 01 	mov    BYTE PTR ds:0xc002a44c,0x1
c001644e:	83 ec 0c             	sub    esp,0xc
c0016451:	50                   	push   eax
c0016452:	e8 01 fb ff ff       	call   c0015f58 <unblockTask(ThreadControlBlock*)>
c0016457:	83 c4 10             	add    esp,0x10
c001645a:	66 90                	xchg   ax,ax
c001645c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016461:	83 e8 01             	sub    eax,0x1
c0016464:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016469:	75 01                	jne    c001646c <terminateTask(int)+0x8c>
c001646b:	fb                   	sti    
c001646c:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0016471:	83 e8 01             	sub    eax,0x1
c0016474:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0016479:	75 09                	jne    c0016484 <terminateTask(int)+0xa4>
c001647b:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c0016482:	75 3c                	jne    c00164c0 <terminateTask(int)+0xe0>
c0016484:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016489:	83 e8 01             	sub    eax,0x1
c001648c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016491:	75 01                	jne    c0016494 <terminateTask(int)+0xb4>
c0016493:	fb                   	sti    
c0016494:	fa                   	cli    
c0016495:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001649a:	83 c0 01             	add    eax,0x1
c001649d:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00164a2:	66 90                	xchg   ax,ax
c00164a4:	e8 b7 f5 ff ff       	call   c0015a60 <schedule()>
c00164a9:	eb d9                	jmp    c0016484 <terminateTask(int)+0xa4>
c00164ab:	90                   	nop
c00164ac:	83 ec 0c             	sub    esp,0xc
c00164af:	68 ef 21 02 c0       	push   0xc00221ef
c00164b4:	e8 51 44 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00164b9:	83 c4 10             	add    esp,0x10
c00164bc:	eb 9e                	jmp    c001645c <terminateTask(int)+0x7c>
c00164be:	66 90                	xchg   ax,ax
c00164c0:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c00164ca:	eb d8                	jmp    c00164a4 <terminateTask(int)+0xc4>

c00164cc <Thr::terminateFromIRQ(int)>:
c00164cc:	83 ec 18             	sub    esp,0x18
c00164cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164d3:	50                   	push   eax
c00164d4:	e8 07 ff ff ff       	call   c00163e0 <terminateTask(int)>
c00164d9:	90                   	nop
c00164da:	66 90                	xchg   ax,ax

c00164dc <Semaphore::release()>:
c00164dc:	83 ec 0c             	sub    esp,0xc
c00164df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164e3:	fa                   	cli    
c00164e4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00164e9:	83 c0 01             	add    eax,0x1
c00164ec:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00164f1:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c00164f6:	8d 48 01             	lea    ecx,[eax+0x1]
c00164f9:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c00164ff:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016502:	85 c9                	test   ecx,ecx
c0016504:	74 42                	je     c0016548 <Semaphore::release()+0x6c>
c0016506:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016509:	83 ec 0c             	sub    esp,0xc
c001650c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001650f:	51                   	push   ecx
c0016510:	e8 43 fa ff ff       	call   c0015f58 <unblockTask(ThreadControlBlock*)>
c0016515:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c001651a:	83 c4 10             	add    esp,0x10
c001651d:	83 e8 01             	sub    eax,0x1
c0016520:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0016525:	85 c0                	test   eax,eax
c0016527:	75 0b                	jne    c0016534 <Semaphore::release()+0x58>
c0016529:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c001652e:	85 c0                	test   eax,eax
c0016530:	75 22                	jne    c0016554 <Semaphore::release()+0x78>
c0016532:	66 90                	xchg   ax,ax
c0016534:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016539:	83 e8 01             	sub    eax,0x1
c001653c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016541:	75 01                	jne    c0016544 <Semaphore::release()+0x68>
c0016543:	fb                   	sti    
c0016544:	83 c4 0c             	add    esp,0xc
c0016547:	c3                   	ret    
c0016548:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001654b:	83 e9 01             	sub    ecx,0x1
c001654e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016551:	eb cd                	jmp    c0016520 <Semaphore::release()+0x44>
c0016553:	90                   	nop
c0016554:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c001655e:	e8 fd f4 ff ff       	call   c0015a60 <schedule()>
c0016563:	eb cf                	jmp    c0016534 <Semaphore::release()+0x58>
c0016565:	8d 76 00             	lea    esi,[esi+0x0]

c0016568 <__static_initialization_and_destruction_0(int, int)>:
c0016568:	83 ec 0c             	sub    esp,0xc
c001656b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016570:	0f 85 8e 00 00 00    	jne    c0016604 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016576:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001657e:	0f 85 80 00 00 00    	jne    c0016604 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016584:	83 ec 0c             	sub    esp,0xc
c0016587:	68 84 a4 02 c0       	push   0xc002a484
c001658c:	e8 f3 94 00 00       	call   c001fa84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016591:	83 c4 10             	add    esp,0x10
c0016594:	83 ec 04             	sub    esp,0x4
c0016597:	68 c8 2e 02 c0       	push   0xc0022ec8
c001659c:	68 84 a4 02 c0       	push   0xc002a484
c00165a1:	68 34 fa 01 c0       	push   0xc001fa34
c00165a6:	e8 11 42 ff ff       	call   c000a7bc <__cxa_atexit>
c00165ab:	83 c4 10             	add    esp,0x10
c00165ae:	83 ec 0c             	sub    esp,0xc
c00165b1:	68 78 a4 02 c0       	push   0xc002a478
c00165b6:	e8 c9 94 00 00       	call   c001fa84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00165bb:	83 c4 10             	add    esp,0x10
c00165be:	83 ec 04             	sub    esp,0x4
c00165c1:	68 c8 2e 02 c0       	push   0xc0022ec8
c00165c6:	68 78 a4 02 c0       	push   0xc002a478
c00165cb:	68 34 fa 01 c0       	push   0xc001fa34
c00165d0:	e8 e7 41 ff ff       	call   c000a7bc <__cxa_atexit>
c00165d5:	83 c4 10             	add    esp,0x10
c00165d8:	83 ec 0c             	sub    esp,0xc
c00165db:	68 6c a4 02 c0       	push   0xc002a46c
c00165e0:	e8 9f 94 00 00       	call   c001fa84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00165e5:	83 c4 10             	add    esp,0x10
c00165e8:	83 ec 04             	sub    esp,0x4
c00165eb:	68 c8 2e 02 c0       	push   0xc0022ec8
c00165f0:	68 6c a4 02 c0       	push   0xc002a46c
c00165f5:	68 34 fa 01 c0       	push   0xc001fa34
c00165fa:	e8 bd 41 ff ff       	call   c000a7bc <__cxa_atexit>
c00165ff:	83 c4 10             	add    esp,0x10
c0016602:	66 90                	xchg   ax,ax
c0016604:	90                   	nop
c0016605:	83 c4 0c             	add    esp,0xc
c0016608:	c3                   	ret    
c0016609:	8d 76 00             	lea    esi,[esi+0x0]

c001660c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001660c:	83 ec 0c             	sub    esp,0xc
c001660f:	83 ec 08             	sub    esp,0x8
c0016612:	68 ff ff 00 00       	push   0xffff
c0016617:	6a 01                	push   0x1
c0016619:	e8 4a ff ff ff       	call   c0016568 <__static_initialization_and_destruction_0(int, int)>
c001661e:	83 c4 10             	add    esp,0x10
c0016621:	83 c4 0c             	add    esp,0xc
c0016624:	c3                   	ret    

c0016625 <Vm::inbv(unsigned short)>:
c0016625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016629:	66 81 fa fe fe       	cmp    dx,0xfefe
c001662e:	75 06                	jne    c0016636 <Vm::inbv(unsigned short)+0x11>
c0016630:	a0 cc a4 02 c0       	mov    al,ds:0xc002a4cc
c0016635:	c3                   	ret    
c0016636:	ec                   	in     al,dx
c0016637:	c3                   	ret    

c0016638 <Vm::outbv(unsigned short, unsigned char)>:
c0016638:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001663c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016640:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016645:	75 25                	jne    c001666c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016647:	8b 0d cc a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a4cc
c001664d:	88 81 e0 a4 02 c0    	mov    BYTE PTR [ecx-0x3ffd5b20],al
c0016653:	8d 51 01             	lea    edx,[ecx+0x1]
c0016656:	89 15 cc a4 02 c0    	mov    DWORD PTR ds:0xc002a4cc,edx
c001665c:	83 fa 20             	cmp    edx,0x20
c001665f:	75 0c                	jne    c001666d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016661:	c7 05 cc a4 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x1f
c001666b:	c3                   	ret    
c001666c:	ee                   	out    dx,al
c001666d:	c3                   	ret    

c001666e <Vm::realToLinear(unsigned short, unsigned short)>:
c001666e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016673:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016678:	c1 e0 04             	shl    eax,0x4
c001667b:	01 d0                	add    eax,edx
c001667d:	c3                   	ret    

c001667e <Vm::getSegment(unsigned int)>:
c001667e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016682:	c1 e8 10             	shr    eax,0x10
c0016685:	c3                   	ret    

c0016686 <Vm::getOffset(unsigned int)>:
c0016686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001668a:	c3                   	ret    

c001668b <Vm::mainloop2()>:
c001668b:	83 ec 18             	sub    esp,0x18
c001668e:	fa                   	cli    
c001668f:	6a 02                	push   0x2
c0016691:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0016697:	c6 05 c5 a4 02 c0 01 	mov    BYTE PTR ds:0xc002a4c5,0x1
c001669e:	e8 95 f5 ff ff       	call   c0015c38 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00166a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166a8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00166ac:	52                   	push   edx
c00166ad:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00166b1:	52                   	push   edx
c00166b2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00166b6:	52                   	push   edx
c00166b7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00166bb:	50                   	push   eax
c00166bc:	e8 4e 9b fe ff       	call   c000020f <goToVM86>
c00166c1:	83 c4 2c             	add    esp,0x2c
c00166c4:	c3                   	ret    

c00166c5 <Vm::mainVm8086Loop(void*)>:
c00166c5:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00166ca:	48                   	dec    eax
c00166cb:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00166d0:	75 01                	jne    c00166d3 <Vm::mainVm8086Loop(void*)+0xe>
c00166d2:	fb                   	sti    
c00166d3:	eb b6                	jmp    c001668b <Vm::mainloop2()>

c00166d5 <Vm::mainloop3(unsigned long)>:
c00166d5:	83 ec 18             	sub    esp,0x18
c00166d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166dc:	fa                   	cli    
c00166dd:	6a 02                	push   0x2
c00166df:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00166e5:	c6 05 c4 a4 02 c0 01 	mov    BYTE PTR ds:0xc002a4c4,0x1
c00166ec:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c00166f1:	e8 42 f5 ff ff       	call   c0015c38 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00166f6:	83 c4 1c             	add    esp,0x1c
c00166f9:	eb 90                	jmp    c001668b <Vm::mainloop2()>

c00166fb <Vm::initialise8086()>:
c00166fb:	83 ec 0c             	sub    esp,0xc
c00166fe:	68 80 00 00 00       	push   0x80
c0016703:	6a 00                	push   0x0
c0016705:	68 c5 66 01 c0       	push   0xc00166c5
c001670a:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0016710:	e8 ff f0 ff ff       	call   c0015814 <Process::createThread(void (*)(void*), void*, int)>
c0016715:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001671c:	68 00 01 00 00       	push   0x100
c0016721:	6a 00                	push   0x0
c0016723:	6a 00                	push   0x0
c0016725:	a3 c8 a4 02 c0       	mov    ds:0xc002a4c8,eax
c001672a:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001672f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016735:	e8 ce 37 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001673a:	83 c4 2c             	add    esp,0x2c
c001673d:	c3                   	ret    

c001673e <Vm::finish8086()>:
c001673e:	53                   	push   ebx
c001673f:	83 ec 08             	sub    esp,0x8
c0016742:	fa                   	cli    
c0016743:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0016749:	80 3d c4 a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a4c4,0x0
c0016750:	75 15                	jne    c0016767 <Vm::finish8086()+0x29>
c0016752:	e8 09 f3 ff ff       	call   c0015a60 <schedule()>
c0016757:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001675c:	48                   	dec    eax
c001675d:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016762:	75 de                	jne    c0016742 <Vm::finish8086()+0x4>
c0016764:	fb                   	sti    
c0016765:	eb db                	jmp    c0016742 <Vm::finish8086()+0x4>
c0016767:	c6 05 c4 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c4,0x0
c001676e:	83 ec 0c             	sub    esp,0xc
c0016771:	8b 1d c0 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a4c0
c0016777:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c001677d:	e8 d6 f7 ff ff       	call   c0015f58 <unblockTask(ThreadControlBlock*)>
c0016782:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016787:	83 c4 10             	add    esp,0x10
c001678a:	8d 50 ff             	lea    edx,[eax-0x1]
c001678d:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0016793:	85 d2                	test   edx,edx
c0016795:	75 01                	jne    c0016798 <Vm::finish8086()+0x5a>
c0016797:	fb                   	sti    
c0016798:	83 c4 08             	add    esp,0x8
c001679b:	89 d8                	mov    eax,ebx
c001679d:	5b                   	pop    ebx
c001679e:	c3                   	ret    

c001679f <Vm::getOutput8086(unsigned char*)>:
c001679f:	57                   	push   edi
c00167a0:	8b 0d cc a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a4cc
c00167a6:	56                   	push   esi
c00167a7:	be e0 a4 02 c0       	mov    esi,0xc002a4e0
c00167ac:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00167b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00167b2:	5e                   	pop    esi
c00167b3:	a1 cc a4 02 c0       	mov    eax,ds:0xc002a4cc
c00167b8:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c00167c2:	5f                   	pop    edi
c00167c3:	c3                   	ret    

c00167c4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00167c4:	55                   	push   ebp
c00167c5:	57                   	push   edi
c00167c6:	56                   	push   esi
c00167c7:	53                   	push   ebx
c00167c8:	83 ec 0c             	sub    esp,0xc
c00167cb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00167cf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00167d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00167d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00167db:	fa                   	cli    
c00167dc:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00167e2:	80 3d c5 a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a4c5,0x0
c00167e9:	75 15                	jne    c0016800 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00167eb:	e8 70 f2 ff ff       	call   c0015a60 <schedule()>
c00167f0:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00167f5:	48                   	dec    eax
c00167f6:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00167fb:	75 de                	jne    c00167db <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00167fd:	fb                   	sti    
c00167fe:	eb db                	jmp    c00167db <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016800:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c001680a:	a1 c8 a4 02 c0       	mov    eax,ds:0xc002a4c8
c001680f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016813:	0f b7 ff             	movzx  edi,di
c0016816:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001681a:	0f b7 f6             	movzx  esi,si
c001681d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016821:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016825:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016829:	50                   	push   eax
c001682a:	6a 20                	push   0x20
c001682c:	6a 00                	push   0x0
c001682e:	68 e0 a4 02 c0       	push   0xc002a4e0
c0016833:	e8 b8 9c fe ff       	call   c00004f0 <memset>
c0016838:	5a                   	pop    edx
c0016839:	59                   	pop    ecx
c001683a:	57                   	push   edi
c001683b:	56                   	push   esi
c001683c:	e8 2d fe ff ff       	call   c001666e <Vm::realToLinear(unsigned short, unsigned short)>
c0016841:	83 c4 10             	add    esp,0x10
c0016844:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016848:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001684c:	89 c7                	mov    edi,eax
c001684e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016850:	c6 05 c5 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c5,0x0
c0016857:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001685c:	48                   	dec    eax
c001685d:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016862:	75 01                	jne    c0016865 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016864:	fb                   	sti    
c0016865:	83 ec 0c             	sub    esp,0xc
c0016868:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c001686e:	e8 e5 f6 ff ff       	call   c0015f58 <unblockTask(ThreadControlBlock*)>
c0016873:	83 c4 1c             	add    esp,0x1c
c0016876:	b0 01                	mov    al,0x1
c0016878:	5b                   	pop    ebx
c0016879:	5e                   	pop    esi
c001687a:	5f                   	pop    edi
c001687b:	5d                   	pop    ebp
c001687c:	c3                   	ret    

c001687d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001687d:	55                   	push   ebp
c001687e:	57                   	push   edi
c001687f:	56                   	push   esi
c0016880:	53                   	push   ebx
c0016881:	83 ec 34             	sub    esp,0x34
c0016884:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016888:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001688c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016890:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016894:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016898:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001689c:	68 20 23 02 c0       	push   0xc0022320
c00168a1:	e8 64 40 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00168a6:	83 c4 10             	add    esp,0x10
c00168a9:	fa                   	cli    
c00168aa:	8a 1d c5 a4 02 c0    	mov    bl,BYTE PTR ds:0xc002a4c5
c00168b0:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00168b6:	84 db                	test   bl,bl
c00168b8:	75 15                	jne    c00168cf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c00168ba:	e8 a1 f1 ff ff       	call   c0015a60 <schedule()>
c00168bf:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00168c4:	48                   	dec    eax
c00168c5:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00168ca:	75 dd                	jne    c00168a9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00168cc:	fb                   	sti    
c00168cd:	eb da                	jmp    c00168a9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00168cf:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c00168d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00168dd:	a1 c8 a4 02 c0       	mov    eax,ds:0xc002a4c8
c00168e2:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00168e6:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00168ea:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00168ee:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00168f2:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00168f6:	50                   	push   eax
c00168f7:	6a 20                	push   0x20
c00168f9:	6a 00                	push   0x0
c00168fb:	68 e0 a4 02 c0       	push   0xc002a4e0
c0016900:	e8 eb 9b fe ff       	call   c00004f0 <memset>
c0016905:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001690c:	e8 c2 11 ff ff       	call   c0007ad3 <malloc>
c0016911:	83 c4 0c             	add    esp,0xc
c0016914:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001691a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001691e:	89 c5                	mov    ebp,eax
c0016920:	50                   	push   eax
c0016921:	e8 b0 4d ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c0016926:	83 c4 10             	add    esp,0x10
c0016929:	85 ed                	test   ebp,ebp
c001692b:	75 0a                	jne    c0016937 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c001692d:	83 ec 0c             	sub    esp,0xc
c0016930:	68 42 23 02 c0       	push   0xc0022342
c0016935:	eb 2b                	jmp    c0016962 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016937:	50                   	push   eax
c0016938:	8d 44 24 17          	lea    eax,[esp+0x17]
c001693c:	50                   	push   eax
c001693d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016941:	50                   	push   eax
c0016942:	55                   	push   ebp
c0016943:	e8 4c 51 ff ff       	call   c000ba94 <File::stat(unsigned long long*, bool*)>
c0016948:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001694c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016950:	83 c4 10             	add    esp,0x10
c0016953:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016958:	74 27                	je     c0016981 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c001695a:	83 ec 0c             	sub    esp,0xc
c001695d:	68 56 23 02 c0       	push   0xc0022356
c0016962:	e8 f6 a7 ff ff       	call   c001115d <KePanic(char const*)>
c0016967:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001696c:	83 c4 10             	add    esp,0x10
c001696f:	48                   	dec    eax
c0016970:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016975:	85 c0                	test   eax,eax
c0016977:	75 01                	jne    c001697a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016979:	fb                   	sti    
c001697a:	31 db                	xor    ebx,ebx
c001697c:	e9 90 00 00 00       	jmp    c0016a11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016981:	51                   	push   ecx
c0016982:	51                   	push   ecx
c0016983:	6a 01                	push   0x1
c0016985:	55                   	push   ebp
c0016986:	e8 07 4e ff ff       	call   c000b792 <File::open(FileOpenMode)>
c001698b:	83 c4 10             	add    esp,0x10
c001698e:	85 c0                	test   eax,eax
c0016990:	74 26                	je     c00169b8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016992:	83 ec 0c             	sub    esp,0xc
c0016995:	68 6f 23 02 c0       	push   0xc002236f
c001699a:	e8 be a7 ff ff       	call   c001115d <KePanic(char const*)>
c001699f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00169a4:	83 c4 10             	add    esp,0x10
c00169a7:	48                   	dec    eax
c00169a8:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00169ad:	85 c0                	test   eax,eax
c00169af:	75 c9                	jne    c001697a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00169b1:	fb                   	sti    
c00169b2:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00169b6:	eb 59                	jmp    c0016a11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00169b8:	50                   	push   eax
c00169b9:	0f b7 ff             	movzx  edi,di
c00169bc:	50                   	push   eax
c00169bd:	0f b7 f6             	movzx  esi,si
c00169c0:	57                   	push   edi
c00169c1:	56                   	push   esi
c00169c2:	e8 a7 fc ff ff       	call   c001666e <Vm::realToLinear(unsigned short, unsigned short)>
c00169c7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00169ca:	5a                   	pop    edx
c00169cb:	8d 74 24 20          	lea    esi,[esp+0x20]
c00169cf:	56                   	push   esi
c00169d0:	50                   	push   eax
c00169d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169d9:	55                   	push   ebp
c00169da:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00169dd:	83 c4 14             	add    esp,0x14
c00169e0:	55                   	push   ebp
c00169e1:	e8 0a 4e ff ff       	call   c000b7f0 <File::close()>
c00169e6:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00169eb:	83 c4 10             	add    esp,0x10
c00169ee:	c6 05 c5 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c5,0x0
c00169f5:	48                   	dec    eax
c00169f6:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00169fb:	85 c0                	test   eax,eax
c00169fd:	75 01                	jne    c0016a00 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c00169ff:	fb                   	sti    
c0016a00:	83 ec 0c             	sub    esp,0xc
c0016a03:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c0016a09:	e8 4a f5 ff ff       	call   c0015f58 <unblockTask(ThreadControlBlock*)>
c0016a0e:	83 c4 10             	add    esp,0x10
c0016a11:	83 c4 2c             	add    esp,0x2c
c0016a14:	88 d8                	mov    al,bl
c0016a16:	5b                   	pop    ebx
c0016a17:	5e                   	pop    esi
c0016a18:	5f                   	pop    edi
c0016a19:	5d                   	pop    ebp
c0016a1a:	c3                   	ret    

c0016a1b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016a1b:	57                   	push   edi
c0016a1c:	56                   	push   esi
c0016a1d:	53                   	push   ebx
c0016a1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a26:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016a2a:	83 e8 06             	sub    eax,0x6
c0016a2d:	0f b7 c0             	movzx  eax,ax
c0016a30:	50                   	push   eax
c0016a31:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016a36:	50                   	push   eax
c0016a37:	e8 32 fc ff ff       	call   c001666e <Vm::realToLinear(unsigned short, unsigned short)>
c0016a3c:	5a                   	pop    edx
c0016a3d:	59                   	pop    ecx
c0016a3e:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016a41:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016a44:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016a47:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016a4d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016a50:	8d 51 02             	lea    edx,[ecx+0x2]
c0016a53:	66 89 10             	mov    WORD PTR [eax],dx
c0016a56:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016a5a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016a5e:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016a62:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016a65:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016a69:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016a6f:	89 f1                	mov    ecx,esi
c0016a71:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016a75:	89 f2                	mov    edx,esi
c0016a77:	0f b6 d6             	movzx  edx,dh
c0016a7a:	0f b6 f1             	movzx  esi,cl
c0016a7d:	74 0a                	je     c0016a89 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016a7f:	c1 e2 08             	shl    edx,0x8
c0016a82:	09 f2                	or     edx,esi
c0016a84:	80 ce 02             	or     dh,0x2
c0016a87:	eb 08                	jmp    c0016a91 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016a89:	c1 e2 08             	shl    edx,0x8
c0016a8c:	09 f2                	or     edx,esi
c0016a8e:	80 e6 fd             	and    dh,0xfd
c0016a91:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016a95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a9a:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016a9e:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016aa6:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016aa9:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016ab1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016ab4:	5b                   	pop    ebx
c0016ab5:	5e                   	pop    esi
c0016ab6:	5f                   	pop    edi
c0016ab7:	c3                   	ret    

c0016ab8 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016ab8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016abd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ac2:	c1 e0 04             	shl    eax,0x4
c0016ac5:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016ac8:	c3                   	ret    

c0016ac9 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016ac9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ace:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ad3:	c1 e0 04             	shl    eax,0x4
c0016ad6:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016ada:	c3                   	ret    

c0016adb <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016adb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ae0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ae5:	c1 e0 04             	shl    eax,0x4
c0016ae8:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016aeb:	c3                   	ret    

c0016aec <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016aec:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016af1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016af6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016afa:	c1 e0 04             	shl    eax,0x4
c0016afd:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016b00:	c3                   	ret    

c0016b01 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016b01:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b06:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b0b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b0f:	c1 e0 04             	shl    eax,0x4
c0016b12:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016b16:	c3                   	ret    

c0016b17 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016b17:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b1c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b25:	c1 e0 04             	shl    eax,0x4
c0016b28:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016b2b:	c3                   	ret    

c0016b2c <Vm::faultHandler(regs*)>:
c0016b2c:	55                   	push   ebp
c0016b2d:	57                   	push   edi
c0016b2e:	56                   	push   esi
c0016b2f:	53                   	push   ebx
c0016b30:	83 ec 2c             	sub    esp,0x2c
c0016b33:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016b37:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016b3a:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016b3e:	0f b7 f8             	movzx  edi,ax
c0016b41:	0f b7 c0             	movzx  eax,ax
c0016b44:	52                   	push   edx
c0016b45:	50                   	push   eax
c0016b46:	e8 23 fb ff ff       	call   c001666e <Vm::realToLinear(unsigned short, unsigned short)>
c0016b4b:	5a                   	pop    edx
c0016b4c:	59                   	pop    ecx
c0016b4d:	89 c1                	mov    ecx,eax
c0016b4f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016b52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b56:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016b5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b5f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016b62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b66:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016b6b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b73:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b77:	e8 f2 fa ff ff       	call   c001666e <Vm::realToLinear(unsigned short, unsigned short)>
c0016b7c:	5e                   	pop    esi
c0016b7d:	be 06 00 00 00       	mov    esi,0x6
c0016b82:	5d                   	pop    ebp
c0016b83:	31 ed                	xor    ebp,ebp
c0016b85:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016b8a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016b8d:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016b93:	0f 84 74 02 00 00    	je     c0016e0d <Vm::faultHandler(regs*)+0x2e1>
c0016b99:	0f 87 94 00 00 00    	ja     c0016c33 <Vm::faultHandler(regs*)+0x107>
c0016b9f:	83 fa 66             	cmp    edx,0x66
c0016ba2:	0f 84 e2 01 00 00    	je     c0016d8a <Vm::faultHandler(regs*)+0x25e>
c0016ba8:	77 47                	ja     c0016bf1 <Vm::faultHandler(regs*)+0xc5>
c0016baa:	83 fa 36             	cmp    edx,0x36
c0016bad:	0f 84 ca 01 00 00    	je     c0016d7d <Vm::faultHandler(regs*)+0x251>
c0016bb3:	77 1a                	ja     c0016bcf <Vm::faultHandler(regs*)+0xa3>
c0016bb5:	83 fa 26             	cmp    edx,0x26
c0016bb8:	0f 84 98 01 00 00    	je     c0016d56 <Vm::faultHandler(regs*)+0x22a>
c0016bbe:	83 fa 2e             	cmp    edx,0x2e
c0016bc1:	0f 85 27 06 00 00    	jne    c00171ee <Vm::faultHandler(regs*)+0x6c2>
c0016bc7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016bca:	31 f6                	xor    esi,esi
c0016bcc:	41                   	inc    ecx
c0016bcd:	eb bb                	jmp    c0016b8a <Vm::faultHandler(regs*)+0x5e>
c0016bcf:	83 fa 64             	cmp    edx,0x64
c0016bd2:	0f 84 8b 01 00 00    	je     c0016d63 <Vm::faultHandler(regs*)+0x237>
c0016bd8:	0f 87 92 01 00 00    	ja     c0016d70 <Vm::faultHandler(regs*)+0x244>
c0016bde:	83 fa 3e             	cmp    edx,0x3e
c0016be1:	0f 85 07 06 00 00    	jne    c00171ee <Vm::faultHandler(regs*)+0x6c2>
c0016be7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016bea:	be 01 00 00 00       	mov    esi,0x1
c0016bef:	eb db                	jmp    c0016bcc <Vm::faultHandler(regs*)+0xa0>
c0016bf1:	83 fa 6d             	cmp    edx,0x6d
c0016bf4:	0f 84 34 03 00 00    	je     c0016f2e <Vm::faultHandler(regs*)+0x402>
c0016bfa:	77 17                	ja     c0016c13 <Vm::faultHandler(regs*)+0xe7>
c0016bfc:	83 fa 67             	cmp    edx,0x67
c0016bff:	0f 84 92 01 00 00    	je     c0016d97 <Vm::faultHandler(regs*)+0x26b>
c0016c05:	83 fa 6c             	cmp    edx,0x6c
c0016c08:	0f 84 b1 02 00 00    	je     c0016ebf <Vm::faultHandler(regs*)+0x393>
c0016c0e:	e9 db 05 00 00       	jmp    c00171ee <Vm::faultHandler(regs*)+0x6c2>
c0016c13:	83 fa 6f             	cmp    edx,0x6f
c0016c16:	0f 84 40 04 00 00    	je     c001705c <Vm::faultHandler(regs*)+0x530>
c0016c1c:	0f 82 a2 03 00 00    	jb     c0016fc4 <Vm::faultHandler(regs*)+0x498>
c0016c22:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016c28:	0f 84 76 01 00 00    	je     c0016da4 <Vm::faultHandler(regs*)+0x278>
c0016c2e:	e9 bb 05 00 00       	jmp    c00171ee <Vm::faultHandler(regs*)+0x6c2>
c0016c33:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016c39:	0f 84 57 05 00 00    	je     c0017196 <Vm::faultHandler(regs*)+0x66a>
c0016c3f:	0f 87 a9 00 00 00    	ja     c0016cee <Vm::faultHandler(regs*)+0x1c2>
c0016c45:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016c4b:	0f 84 d6 04 00 00    	je     c0017127 <Vm::faultHandler(regs*)+0x5fb>
c0016c51:	77 78                	ja     c0016ccb <Vm::faultHandler(regs*)+0x19f>
c0016c53:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016c59:	0f 84 0e 02 00 00    	je     c0016e6d <Vm::faultHandler(regs*)+0x341>
c0016c5f:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016c65:	0f 85 83 05 00 00    	jne    c00171ee <Vm::faultHandler(regs*)+0x6c2>
c0016c6b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016c6f:	89 d1                	mov    ecx,edx
c0016c71:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016c74:	c1 e1 08             	shl    ecx,0x8
c0016c77:	09 ca                	or     edx,ecx
c0016c79:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016c7c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016c80:	89 d1                	mov    ecx,edx
c0016c82:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016c86:	c1 e1 08             	shl    ecx,0x8
c0016c89:	09 ca                	or     edx,ecx
c0016c8b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016c8e:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016c92:	89 d1                	mov    ecx,edx
c0016c94:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016c98:	c1 e1 08             	shl    ecx,0x8
c0016c9b:	09 ca                	or     edx,ecx
c0016c9d:	81 ca 00 02 02 00    	or     edx,0x20200
c0016ca3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016ca6:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016caa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016cb0:	d1 e8                	shr    eax,1
c0016cb2:	83 e0 01             	and    eax,0x1
c0016cb5:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016cb8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016cbb:	83 c0 06             	add    eax,0x6
c0016cbe:	25 ff ff 00 00       	and    eax,0xffff
c0016cc3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016cc6:	e9 1f 05 00 00       	jmp    c00171ea <Vm::faultHandler(regs*)+0x6be>
c0016ccb:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016cd1:	0f 84 95 04 00 00    	je     c001716c <Vm::faultHandler(regs*)+0x640>
c0016cd7:	0f 82 66 04 00 00    	jb     c0017143 <Vm::faultHandler(regs*)+0x617>
c0016cdd:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016ce3:	0f 84 9a 04 00 00    	je     c0017183 <Vm::faultHandler(regs*)+0x657>
c0016ce9:	e9 00 05 00 00       	jmp    c00171ee <Vm::faultHandler(regs*)+0x6c2>
c0016cee:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016cf4:	0f 84 dd 04 00 00    	je     c00171d7 <Vm::faultHandler(regs*)+0x6ab>
c0016cfa:	77 2e                	ja     c0016d2a <Vm::faultHandler(regs*)+0x1fe>
c0016cfc:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016d02:	0f 84 aa 04 00 00    	je     c00171b2 <Vm::faultHandler(regs*)+0x686>
c0016d08:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016d0e:	0f 85 da 04 00 00    	jne    c00171ee <Vm::faultHandler(regs*)+0x6c2>
c0016d14:	50                   	push   eax
c0016d15:	50                   	push   eax
c0016d16:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016d1a:	50                   	push   eax
c0016d1b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016d1f:	50                   	push   eax
c0016d20:	e8 13 f9 ff ff       	call   c0016638 <Vm::outbv(unsigned short, unsigned char)>
c0016d25:	e9 a5 04 00 00       	jmp    c00171cf <Vm::faultHandler(regs*)+0x6a3>
c0016d2a:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016d30:	0f 84 6d 01 00 00    	je     c0016ea3 <Vm::faultHandler(regs*)+0x377>
c0016d36:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016d3c:	0f 84 6f 01 00 00    	je     c0016eb1 <Vm::faultHandler(regs*)+0x385>
c0016d42:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016d48:	0f 85 a0 04 00 00    	jne    c00171ee <Vm::faultHandler(regs*)+0x6c2>
c0016d4e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d51:	e9 76 fe ff ff       	jmp    c0016bcc <Vm::faultHandler(regs*)+0xa0>
c0016d56:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d59:	be 02 00 00 00       	mov    esi,0x2
c0016d5e:	e9 69 fe ff ff       	jmp    c0016bcc <Vm::faultHandler(regs*)+0xa0>
c0016d63:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d66:	be 03 00 00 00       	mov    esi,0x3
c0016d6b:	e9 5c fe ff ff       	jmp    c0016bcc <Vm::faultHandler(regs*)+0xa0>
c0016d70:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d73:	be 04 00 00 00       	mov    esi,0x4
c0016d78:	e9 4f fe ff ff       	jmp    c0016bcc <Vm::faultHandler(regs*)+0xa0>
c0016d7d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d80:	be 05 00 00 00       	mov    esi,0x5
c0016d85:	e9 42 fe ff ff       	jmp    c0016bcc <Vm::faultHandler(regs*)+0xa0>
c0016d8a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d8d:	bd 01 00 00 00       	mov    ebp,0x1
c0016d92:	e9 35 fe ff ff       	jmp    c0016bcc <Vm::faultHandler(regs*)+0xa0>
c0016d97:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d9a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016d9f:	e9 28 fe ff ff       	jmp    c0016bcc <Vm::faultHandler(regs*)+0xa0>
c0016da4:	83 e5 01             	and    ebp,0x1
c0016da7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016daa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016dae:	74 30                	je     c0016de0 <Vm::faultHandler(regs*)+0x2b4>
c0016db0:	83 e9 04             	sub    ecx,0x4
c0016db3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016db9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016dbf:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016dc2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016dc5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016dcb:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016dcf:	0f 84 12 04 00 00    	je     c00171e7 <Vm::faultHandler(regs*)+0x6bb>
c0016dd5:	80 ce 02             	or     dh,0x2
c0016dd8:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016ddb:	e9 07 04 00 00       	jmp    c00171e7 <Vm::faultHandler(regs*)+0x6bb>
c0016de0:	83 e9 02             	sub    ecx,0x2
c0016de3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016de9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016dec:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016df0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016df6:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016dfa:	74 05                	je     c0016e01 <Vm::faultHandler(regs*)+0x2d5>
c0016dfc:	80 ce 02             	or     dh,0x2
c0016dff:	eb 03                	jmp    c0016e04 <Vm::faultHandler(regs*)+0x2d8>
c0016e01:	80 e6 fd             	and    dh,0xfd
c0016e04:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016e08:	e9 da 03 00 00       	jmp    c00171e7 <Vm::faultHandler(regs*)+0x6bb>
c0016e0d:	83 e5 01             	and    ebp,0x1
c0016e10:	74 2a                	je     c0016e3c <Vm::faultHandler(regs*)+0x310>
c0016e12:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e14:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e1a:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e20:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e23:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e25:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e2b:	c1 e8 09             	shr    eax,0x9
c0016e2e:	83 e0 01             	and    eax,0x1
c0016e31:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016e34:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e37:	83 c0 04             	add    eax,0x4
c0016e3a:	eb 24                	jmp    c0016e60 <Vm::faultHandler(regs*)+0x334>
c0016e3c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016e3f:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e45:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e48:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016e4b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e51:	c1 e8 09             	shr    eax,0x9
c0016e54:	83 e0 01             	and    eax,0x1
c0016e57:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016e5a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e5d:	83 c0 02             	add    eax,0x2
c0016e60:	25 ff ff 00 00       	and    eax,0xffff
c0016e65:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016e68:	e9 7a 03 00 00       	jmp    c00171e7 <Vm::faultHandler(regs*)+0x6bb>
c0016e6d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016e71:	3d ee 00 00 00       	cmp    eax,0xee
c0016e76:	75 10                	jne    c0016e88 <Vm::faultHandler(regs*)+0x35c>
c0016e78:	83 ec 0c             	sub    esp,0xc
c0016e7b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016e7e:	e8 52 f8 ff ff       	call   c00166d5 <Vm::mainloop3(unsigned long)>
c0016e83:	e9 4a 03 00 00       	jmp    c00171d2 <Vm::faultHandler(regs*)+0x6a6>
c0016e88:	83 ec 0c             	sub    esp,0xc
c0016e8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016e8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e93:	51                   	push   ecx
c0016e94:	50                   	push   eax
c0016e95:	53                   	push   ebx
c0016e96:	e8 80 fb ff ff       	call   c0016a1b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016e9b:	83 c4 20             	add    esp,0x20
c0016e9e:	e9 47 03 00 00       	jmp    c00171ea <Vm::faultHandler(regs*)+0x6be>
c0016ea3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ea8:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016eac:	e9 36 03 00 00       	jmp    c00171e7 <Vm::faultHandler(regs*)+0x6bb>
c0016eb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb6:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016eba:	e9 28 03 00 00       	jmp    c00171e7 <Vm::faultHandler(regs*)+0x6bb>
c0016ebf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016ec4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016ec7:	74 2b                	je     c0016ef4 <Vm::faultHandler(regs*)+0x3c8>
c0016ec9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016ed0:	76 22                	jbe    c0016ef4 <Vm::faultHandler(regs*)+0x3c8>
c0016ed2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016ed6:	50                   	push   eax
c0016ed7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016edb:	50                   	push   eax
c0016edc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016ee0:	50                   	push   eax
c0016ee1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016ee5:	50                   	push   eax
c0016ee6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016eea:	50                   	push   eax
c0016eeb:	6a 6c                	push   0x6c
c0016eed:	6a 6c                	push   0x6c
c0016eef:	e9 c0 01 00 00       	jmp    c00170b4 <Vm::faultHandler(regs*)+0x588>
c0016ef4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016ef8:	83 ec 0c             	sub    esp,0xc
c0016efb:	0f b7 f6             	movzx  esi,si
c0016efe:	50                   	push   eax
c0016eff:	e8 21 f7 ff ff       	call   c0016625 <Vm::inbv(unsigned short)>
c0016f04:	83 c4 0c             	add    esp,0xc
c0016f07:	0f b6 c0             	movzx  eax,al
c0016f0a:	50                   	push   eax
c0016f0b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016f0f:	50                   	push   eax
c0016f10:	56                   	push   esi
c0016f11:	e8 d6 fb ff ff       	call   c0016aec <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016f16:	83 c4 10             	add    esp,0x10
c0016f19:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f1c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016f20:	74 03                	je     c0016f25 <Vm::faultHandler(regs*)+0x3f9>
c0016f22:	48                   	dec    eax
c0016f23:	eb 01                	jmp    c0016f26 <Vm::faultHandler(regs*)+0x3fa>
c0016f25:	40                   	inc    eax
c0016f26:	0f b7 c0             	movzx  eax,ax
c0016f29:	e9 8e 00 00 00       	jmp    c0016fbc <Vm::faultHandler(regs*)+0x490>
c0016f2e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016f33:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016f36:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f39:	74 29                	je     c0016f64 <Vm::faultHandler(regs*)+0x438>
c0016f3b:	3d ff ff 00 00       	cmp    eax,0xffff
c0016f40:	76 22                	jbe    c0016f64 <Vm::faultHandler(regs*)+0x438>
c0016f42:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016f46:	50                   	push   eax
c0016f47:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016f4b:	50                   	push   eax
c0016f4c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016f50:	50                   	push   eax
c0016f51:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016f55:	50                   	push   eax
c0016f56:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f5a:	50                   	push   eax
c0016f5b:	6a 6d                	push   0x6d
c0016f5d:	6a 6d                	push   0x6d
c0016f5f:	e9 50 01 00 00       	jmp    c00170b4 <Vm::faultHandler(regs*)+0x588>
c0016f64:	83 e5 01             	and    ebp,0x1
c0016f67:	0f b7 c8             	movzx  ecx,ax
c0016f6a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016f6d:	0f b7 f6             	movzx  esi,si
c0016f70:	74 1e                	je     c0016f90 <Vm::faultHandler(regs*)+0x464>
c0016f72:	ed                   	in     eax,dx
c0016f73:	55                   	push   ebp
c0016f74:	50                   	push   eax
c0016f75:	51                   	push   ecx
c0016f76:	56                   	push   esi
c0016f77:	e8 9b fb ff ff       	call   c0016b17 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016f7c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f7f:	83 c4 10             	add    esp,0x10
c0016f82:	8d 50 04             	lea    edx,[eax+0x4]
c0016f85:	83 e8 04             	sub    eax,0x4
c0016f88:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016f8e:	eb 20                	jmp    c0016fb0 <Vm::faultHandler(regs*)+0x484>
c0016f90:	66 ed                	in     ax,dx
c0016f92:	57                   	push   edi
c0016f93:	0f b7 c0             	movzx  eax,ax
c0016f96:	50                   	push   eax
c0016f97:	51                   	push   ecx
c0016f98:	56                   	push   esi
c0016f99:	e8 63 fb ff ff       	call   c0016b01 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016f9e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fa1:	83 c4 10             	add    esp,0x10
c0016fa4:	8d 50 02             	lea    edx,[eax+0x2]
c0016fa7:	83 e8 02             	sub    eax,0x2
c0016faa:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016fb0:	25 ff ff 00 00       	and    eax,0xffff
c0016fb5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016fb9:	0f 44 c2             	cmove  eax,edx
c0016fbc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016fbf:	e9 23 02 00 00       	jmp    c00171e7 <Vm::faultHandler(regs*)+0x6bb>
c0016fc4:	8d 46 ff             	lea    eax,[esi-0x1]
c0016fc7:	0f b6 f0             	movzx  esi,al
c0016fca:	83 fe 05             	cmp    esi,0x5
c0016fcd:	77 23                	ja     c0016ff2 <Vm::faultHandler(regs*)+0x4c6>
c0016fcf:	ff 24 b5 e4 23 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddc1c]
c0016fd6:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016fdb:	eb 15                	jmp    c0016ff2 <Vm::faultHandler(regs*)+0x4c6>
c0016fdd:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016fe1:	eb 0f                	jmp    c0016ff2 <Vm::faultHandler(regs*)+0x4c6>
c0016fe3:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016fe7:	eb 09                	jmp    c0016ff2 <Vm::faultHandler(regs*)+0x4c6>
c0016fe9:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016fed:	eb 03                	jmp    c0016ff2 <Vm::faultHandler(regs*)+0x4c6>
c0016fef:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016ff2:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016ff7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016ffa:	74 29                	je     c0017025 <Vm::faultHandler(regs*)+0x4f9>
c0016ffc:	3d ff ff 00 00       	cmp    eax,0xffff
c0017001:	76 22                	jbe    c0017025 <Vm::faultHandler(regs*)+0x4f9>
c0017003:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017007:	50                   	push   eax
c0017008:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001700c:	50                   	push   eax
c001700d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017011:	50                   	push   eax
c0017012:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017016:	50                   	push   eax
c0017017:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001701b:	50                   	push   eax
c001701c:	6a 6e                	push   0x6e
c001701e:	6a 6e                	push   0x6e
c0017020:	e9 8f 00 00 00       	jmp    c00170b4 <Vm::faultHandler(regs*)+0x588>
c0017025:	52                   	push   edx
c0017026:	0f b7 c0             	movzx  eax,ax
c0017029:	52                   	push   edx
c001702a:	50                   	push   eax
c001702b:	57                   	push   edi
c001702c:	e8 87 fa ff ff       	call   c0016ab8 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017031:	59                   	pop    ecx
c0017032:	5e                   	pop    esi
c0017033:	0f b6 c0             	movzx  eax,al
c0017036:	50                   	push   eax
c0017037:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001703b:	50                   	push   eax
c001703c:	e8 f7 f5 ff ff       	call   c0016638 <Vm::outbv(unsigned short, unsigned char)>
c0017041:	83 c4 10             	add    esp,0x10
c0017044:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017047:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001704b:	74 03                	je     c0017050 <Vm::faultHandler(regs*)+0x524>
c001704d:	48                   	dec    eax
c001704e:	eb 01                	jmp    c0017051 <Vm::faultHandler(regs*)+0x525>
c0017050:	40                   	inc    eax
c0017051:	0f b7 c0             	movzx  eax,ax
c0017054:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017057:	e9 8b 01 00 00       	jmp    c00171e7 <Vm::faultHandler(regs*)+0x6bb>
c001705c:	8d 46 ff             	lea    eax,[esi-0x1]
c001705f:	0f b6 f0             	movzx  esi,al
c0017062:	83 fe 05             	cmp    esi,0x5
c0017065:	77 1e                	ja     c0017085 <Vm::faultHandler(regs*)+0x559>
c0017067:	ff 24 b5 fc 23 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddc04]
c001706e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017072:	eb 11                	jmp    c0017085 <Vm::faultHandler(regs*)+0x559>
c0017074:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017077:	eb 0c                	jmp    c0017085 <Vm::faultHandler(regs*)+0x559>
c0017079:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001707c:	eb 07                	jmp    c0017085 <Vm::faultHandler(regs*)+0x559>
c001707e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017081:	eb 02                	jmp    c0017085 <Vm::faultHandler(regs*)+0x559>
c0017083:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017085:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001708a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001708d:	74 37                	je     c00170c6 <Vm::faultHandler(regs*)+0x59a>
c001708f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017095:	76 2f                	jbe    c00170c6 <Vm::faultHandler(regs*)+0x59a>
c0017097:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001709b:	50                   	push   eax
c001709c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00170a0:	50                   	push   eax
c00170a1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00170a5:	50                   	push   eax
c00170a6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00170aa:	50                   	push   eax
c00170ab:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170af:	50                   	push   eax
c00170b0:	6a 6f                	push   0x6f
c00170b2:	6a 6f                	push   0x6f
c00170b4:	68 88 23 02 c0       	push   0xc0022388
c00170b9:	e8 4c 38 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00170be:	83 c4 20             	add    esp,0x20
c00170c1:	e9 86 01 00 00       	jmp    c001724c <Vm::faultHandler(regs*)+0x720>
c00170c6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00170c9:	0f b7 d7             	movzx  edx,di
c00170cc:	0f b7 c6             	movzx  eax,si
c00170cf:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00170d2:	81 e1 00 04 00 00    	and    ecx,0x400
c00170d8:	83 e5 01             	and    ebp,0x1
c00170db:	74 1c                	je     c00170f9 <Vm::faultHandler(regs*)+0x5cd>
c00170dd:	55                   	push   ebp
c00170de:	55                   	push   ebp
c00170df:	50                   	push   eax
c00170e0:	52                   	push   edx
c00170e1:	e8 f5 f9 ff ff       	call   c0016adb <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00170e6:	83 c4 10             	add    esp,0x10
c00170e9:	89 fa                	mov    edx,edi
c00170eb:	ef                   	out    dx,eax
c00170ec:	8d 46 04             	lea    eax,[esi+0x4]
c00170ef:	83 ee 04             	sub    esi,0x4
c00170f2:	25 ff ff 00 00       	and    eax,0xffff
c00170f7:	eb 1b                	jmp    c0017114 <Vm::faultHandler(regs*)+0x5e8>
c00170f9:	55                   	push   ebp
c00170fa:	55                   	push   ebp
c00170fb:	50                   	push   eax
c00170fc:	52                   	push   edx
c00170fd:	e8 c7 f9 ff ff       	call   c0016ac9 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017102:	83 c4 10             	add    esp,0x10
c0017105:	89 fa                	mov    edx,edi
c0017107:	66 ef                	out    dx,ax
c0017109:	8d 46 02             	lea    eax,[esi+0x2]
c001710c:	83 ee 02             	sub    esi,0x2
c001710f:	25 ff ff 00 00       	and    eax,0xffff
c0017114:	81 e6 ff ff 00 00    	and    esi,0xffff
c001711a:	85 c9                	test   ecx,ecx
c001711c:	0f 44 f0             	cmove  esi,eax
c001711f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017122:	e9 c0 00 00 00       	jmp    c00171e7 <Vm::faultHandler(regs*)+0x6bb>
c0017127:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001712e:	83 ec 0c             	sub    esp,0xc
c0017131:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017135:	50                   	push   eax
c0017136:	e8 ea f4 ff ff       	call   c0016625 <Vm::inbv(unsigned short)>
c001713b:	0f b6 c0             	movzx  eax,al
c001713e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017141:	eb 3a                	jmp    c001717d <Vm::faultHandler(regs*)+0x651>
c0017143:	83 e5 01             	and    ebp,0x1
c0017146:	74 07                	je     c001714f <Vm::faultHandler(regs*)+0x623>
c0017148:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001714c:	ed                   	in     eax,dx
c001714d:	eb 14                	jmp    c0017163 <Vm::faultHandler(regs*)+0x637>
c001714f:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017152:	66 31 f6             	xor    si,si
c0017155:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017158:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001715c:	66 ed                	in     ax,dx
c001715e:	0f b7 c0             	movzx  eax,ax
c0017161:	09 f0                	or     eax,esi
c0017163:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017166:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001716a:	eb 7e                	jmp    c00171ea <Vm::faultHandler(regs*)+0x6be>
c001716c:	52                   	push   edx
c001716d:	52                   	push   edx
c001716e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017172:	50                   	push   eax
c0017173:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017177:	50                   	push   eax
c0017178:	e8 bb f4 ff ff       	call   c0016638 <Vm::outbv(unsigned short, unsigned char)>
c001717d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017181:	eb 4f                	jmp    c00171d2 <Vm::faultHandler(regs*)+0x6a6>
c0017183:	83 e5 01             	and    ebp,0x1
c0017186:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017189:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001718d:	74 03                	je     c0017192 <Vm::faultHandler(regs*)+0x666>
c001718f:	ef                   	out    dx,eax
c0017190:	eb d4                	jmp    c0017166 <Vm::faultHandler(regs*)+0x63a>
c0017192:	66 ef                	out    dx,ax
c0017194:	eb d0                	jmp    c0017166 <Vm::faultHandler(regs*)+0x63a>
c0017196:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001719a:	83 ec 0c             	sub    esp,0xc
c001719d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00171a4:	50                   	push   eax
c00171a5:	e8 7b f4 ff ff       	call   c0016625 <Vm::inbv(unsigned short)>
c00171aa:	0f b6 c0             	movzx  eax,al
c00171ad:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00171b0:	eb 1d                	jmp    c00171cf <Vm::faultHandler(regs*)+0x6a3>
c00171b2:	83 e5 01             	and    ebp,0x1
c00171b5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00171b8:	74 03                	je     c00171bd <Vm::faultHandler(regs*)+0x691>
c00171ba:	ed                   	in     eax,dx
c00171bb:	eb 0d                	jmp    c00171ca <Vm::faultHandler(regs*)+0x69e>
c00171bd:	66 ed                	in     ax,dx
c00171bf:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00171c2:	0f b7 c0             	movzx  eax,ax
c00171c5:	66 31 d2             	xor    dx,dx
c00171c8:	09 d0                	or     eax,edx
c00171ca:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00171cd:	eb 18                	jmp    c00171e7 <Vm::faultHandler(regs*)+0x6bb>
c00171cf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171d2:	83 c4 10             	add    esp,0x10
c00171d5:	eb 13                	jmp    c00171ea <Vm::faultHandler(regs*)+0x6be>
c00171d7:	83 e5 01             	and    ebp,0x1
c00171da:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00171dd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00171e0:	74 03                	je     c00171e5 <Vm::faultHandler(regs*)+0x6b9>
c00171e2:	ef                   	out    dx,eax
c00171e3:	eb 02                	jmp    c00171e7 <Vm::faultHandler(regs*)+0x6bb>
c00171e5:	66 ef                	out    dx,ax
c00171e7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171ea:	b0 01                	mov    al,0x1
c00171ec:	eb 60                	jmp    c001724e <Vm::faultHandler(regs*)+0x722>
c00171ee:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00171f2:	50                   	push   eax
c00171f3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00171f7:	50                   	push   eax
c00171f8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00171fc:	50                   	push   eax
c00171fd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017201:	50                   	push   eax
c0017202:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017206:	50                   	push   eax
c0017207:	52                   	push   edx
c0017208:	52                   	push   edx
c0017209:	68 b5 23 02 c0       	push   0xc00223b5
c001720e:	e8 f7 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017213:	83 c4 20             	add    esp,0x20
c0017216:	83 ec 0c             	sub    esp,0xc
c0017219:	6a 60                	push   0x60
c001721b:	e8 05 f4 ff ff       	call   c0016625 <Vm::inbv(unsigned short)>
c0017220:	83 c4 10             	add    esp,0x10
c0017223:	0f b6 d0             	movzx  edx,al
c0017226:	83 fa 1c             	cmp    edx,0x1c
c0017229:	74 05                	je     c0017230 <Vm::faultHandler(regs*)+0x704>
c001722b:	83 fa 5a             	cmp    edx,0x5a
c001722e:	75 e6                	jne    c0017216 <Vm::faultHandler(regs*)+0x6ea>
c0017230:	0f b6 c0             	movzx  eax,al
c0017233:	83 f8 1c             	cmp    eax,0x1c
c0017236:	74 05                	je     c001723d <Vm::faultHandler(regs*)+0x711>
c0017238:	83 f8 5a             	cmp    eax,0x5a
c001723b:	75 0f                	jne    c001724c <Vm::faultHandler(regs*)+0x720>
c001723d:	83 ec 0c             	sub    esp,0xc
c0017240:	6a 60                	push   0x60
c0017242:	e8 de f3 ff ff       	call   c0016625 <Vm::inbv(unsigned short)>
c0017247:	83 c4 10             	add    esp,0x10
c001724a:	eb e4                	jmp    c0017230 <Vm::faultHandler(regs*)+0x704>
c001724c:	31 c0                	xor    eax,eax
c001724e:	83 c4 2c             	add    esp,0x2c
c0017251:	5b                   	pop    ebx
c0017252:	5e                   	pop    esi
c0017253:	5f                   	pop    edi
c0017254:	5d                   	pop    ebp
c0017255:	c3                   	ret    

c0017256 <noCopro(unsigned long)>:
c0017256:	c3                   	ret    

c0017257 <nmiHandler(regs*, void*)>:
c0017257:	83 ec 0c             	sub    esp,0xc
c001725a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001725f:	83 ec 0c             	sub    esp,0xc
c0017262:	50                   	push   eax
c0017263:	e8 6e 00 ff ff       	call   c00072d6 <Computer::handleNMI()>
c0017268:	83 c4 10             	add    esp,0x10
c001726b:	90                   	nop
c001726c:	83 c4 0c             	add    esp,0xc
c001726f:	c3                   	ret    

c0017270 <doubleFault(regs*, void*)>:
c0017270:	55                   	push   ebp
c0017271:	89 e5                	mov    ebp,esp
c0017273:	83 ec 08             	sub    esp,0x8
c0017276:	83 ec 0c             	sub    esp,0xc
c0017279:	68 14 24 02 c0       	push   0xc0022414
c001727e:	e8 da 9e ff ff       	call   c001115d <KePanic(char const*)>
c0017283:	83 c4 10             	add    esp,0x10
c0017286:	90                   	nop
c0017287:	c9                   	leave  
c0017288:	c3                   	ret    

c0017289 <displayDebugInfo(regs*)>:
c0017289:	83 ec 1c             	sub    esp,0x1c
c001728c:	0f 20 c0             	mov    eax,cr0
c001728f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017293:	0f 20 d0             	mov    eax,cr2
c0017296:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001729a:	0f 20 d8             	mov    eax,cr3
c001729d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172a1:	0f 20 e0             	mov    eax,cr4
c00172a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00172a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172ab:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00172ae:	83 ec 08             	sub    esp,0x8
c00172b1:	50                   	push   eax
c00172b2:	68 30 24 02 c0       	push   0xc0022430
c00172b7:	e8 4e 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00172bc:	83 c4 10             	add    esp,0x10
c00172bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172c3:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00172c6:	83 ec 08             	sub    esp,0x8
c00172c9:	50                   	push   eax
c00172ca:	68 21 24 02 c0       	push   0xc0022421
c00172cf:	e8 36 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00172d4:	83 c4 10             	add    esp,0x10
c00172d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172db:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00172de:	83 ec 08             	sub    esp,0x8
c00172e1:	50                   	push   eax
c00172e2:	68 2c 24 02 c0       	push   0xc002242c
c00172e7:	e8 1e 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00172ec:	83 c4 10             	add    esp,0x10
c00172ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172f3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00172f6:	83 ec 08             	sub    esp,0x8
c00172f9:	50                   	push   eax
c00172fa:	68 3b 24 02 c0       	push   0xc002243b
c00172ff:	e8 06 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017304:	83 c4 10             	add    esp,0x10
c0017307:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001730b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001730e:	83 ec 08             	sub    esp,0x8
c0017311:	50                   	push   eax
c0017312:	68 46 24 02 c0       	push   0xc0022446
c0017317:	e8 ee 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001731c:	83 c4 10             	add    esp,0x10
c001731f:	83 ec 08             	sub    esp,0x8
c0017322:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017326:	68 51 24 02 c0       	push   0xc0022451
c001732b:	e8 da 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017330:	83 c4 10             	add    esp,0x10
c0017333:	83 ec 08             	sub    esp,0x8
c0017336:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001733a:	68 5c 24 02 c0       	push   0xc002245c
c001733f:	e8 c6 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017344:	83 c4 10             	add    esp,0x10
c0017347:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001734b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001734e:	c1 e0 05             	shl    eax,0x5
c0017351:	8d 90 e0 33 02 c0    	lea    edx,[eax-0x3ffdcc20]
c0017357:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001735b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001735e:	83 ec 04             	sub    esp,0x4
c0017361:	52                   	push   edx
c0017362:	50                   	push   eax
c0017363:	68 67 24 02 c0       	push   0xc0022467
c0017368:	e8 9d 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001736d:	83 c4 10             	add    esp,0x10
c0017370:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017375:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001737b:	83 ec 0c             	sub    esp,0xc
c001737e:	50                   	push   eax
c001737f:	e8 eb 13 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0017384:	83 c4 10             	add    esp,0x10
c0017387:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001738c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017392:	83 ec 08             	sub    esp,0x8
c0017395:	68 76 24 02 c0       	push   0xc0022476
c001739a:	50                   	push   eax
c001739b:	e8 0c 17 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00173a0:	83 c4 10             	add    esp,0x10
c00173a3:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00173a8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173ae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00173b2:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00173b5:	83 ec 08             	sub    esp,0x8
c00173b8:	52                   	push   edx
c00173b9:	50                   	push   eax
c00173ba:	e8 a7 16 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00173bf:	83 c4 10             	add    esp,0x10
c00173c2:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00173c7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173cd:	83 ec 08             	sub    esp,0x8
c00173d0:	68 84 24 02 c0       	push   0xc0022484
c00173d5:	50                   	push   eax
c00173d6:	e8 d1 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00173db:	83 c4 10             	add    esp,0x10
c00173de:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00173e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173e9:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00173ee:	8b 12                	mov    edx,DWORD PTR [edx]
c00173f0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00173f3:	83 c2 0c             	add    edx,0xc
c00173f6:	83 ec 08             	sub    esp,0x8
c00173f9:	52                   	push   edx
c00173fa:	50                   	push   eax
c00173fb:	e8 ac 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017400:	83 c4 10             	add    esp,0x10
c0017403:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017408:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001740e:	83 ec 08             	sub    esp,0x8
c0017411:	68 8d 24 02 c0       	push   0xc002248d
c0017416:	50                   	push   eax
c0017417:	e8 90 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001741c:	83 c4 10             	add    esp,0x10
c001741f:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017424:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001742a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001742e:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017431:	83 ec 08             	sub    esp,0x8
c0017434:	52                   	push   edx
c0017435:	50                   	push   eax
c0017436:	e8 2b 16 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001743b:	83 c4 10             	add    esp,0x10
c001743e:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017443:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017449:	83 ec 08             	sub    esp,0x8
c001744c:	68 95 24 02 c0       	push   0xc0022495
c0017451:	50                   	push   eax
c0017452:	e8 55 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017457:	83 c4 10             	add    esp,0x10
c001745a:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001745f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017465:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017469:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001746c:	83 ec 08             	sub    esp,0x8
c001746f:	52                   	push   edx
c0017470:	50                   	push   eax
c0017471:	e8 f0 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017476:	83 c4 10             	add    esp,0x10
c0017479:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001747e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017484:	83 ec 08             	sub    esp,0x8
c0017487:	68 9d 24 02 c0       	push   0xc002249d
c001748c:	50                   	push   eax
c001748d:	e8 1a 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017492:	83 c4 10             	add    esp,0x10
c0017495:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001749a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174a4:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00174a7:	83 ec 08             	sub    esp,0x8
c00174aa:	52                   	push   edx
c00174ab:	50                   	push   eax
c00174ac:	e8 b5 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00174b1:	83 c4 10             	add    esp,0x10
c00174b4:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174b9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174bf:	83 ec 08             	sub    esp,0x8
c00174c2:	68 a5 24 02 c0       	push   0xc00224a5
c00174c7:	50                   	push   eax
c00174c8:	e8 df 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00174cd:	83 c4 10             	add    esp,0x10
c00174d0:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174df:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00174e2:	83 ec 08             	sub    esp,0x8
c00174e5:	52                   	push   edx
c00174e6:	50                   	push   eax
c00174e7:	e8 7a 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00174ec:	83 c4 10             	add    esp,0x10
c00174ef:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174fa:	83 ec 08             	sub    esp,0x8
c00174fd:	68 ad 24 02 c0       	push   0xc00224ad
c0017502:	50                   	push   eax
c0017503:	e8 a4 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017508:	83 c4 10             	add    esp,0x10
c001750b:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017510:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017516:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001751a:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001751d:	83 ec 08             	sub    esp,0x8
c0017520:	52                   	push   edx
c0017521:	50                   	push   eax
c0017522:	e8 3f 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017527:	83 c4 10             	add    esp,0x10
c001752a:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001752f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017535:	83 ec 08             	sub    esp,0x8
c0017538:	68 b5 24 02 c0       	push   0xc00224b5
c001753d:	50                   	push   eax
c001753e:	e8 69 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017543:	83 c4 10             	add    esp,0x10
c0017546:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001754b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017551:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017555:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017558:	83 ec 08             	sub    esp,0x8
c001755b:	52                   	push   edx
c001755c:	50                   	push   eax
c001755d:	e8 04 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017562:	83 c4 10             	add    esp,0x10
c0017565:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001756a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017570:	83 ec 08             	sub    esp,0x8
c0017573:	68 bd 24 02 c0       	push   0xc00224bd
c0017578:	50                   	push   eax
c0017579:	e8 2e 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001757e:	83 c4 10             	add    esp,0x10
c0017581:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017586:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001758c:	83 ec 08             	sub    esp,0x8
c001758f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017593:	50                   	push   eax
c0017594:	e8 cd 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017599:	83 c4 10             	add    esp,0x10
c001759c:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175a7:	83 ec 08             	sub    esp,0x8
c00175aa:	68 c6 24 02 c0       	push   0xc00224c6
c00175af:	50                   	push   eax
c00175b0:	e8 f7 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175b5:	83 c4 10             	add    esp,0x10
c00175b8:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175bd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175c3:	83 ec 08             	sub    esp,0x8
c00175c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00175ca:	50                   	push   eax
c00175cb:	e8 96 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175d0:	83 c4 10             	add    esp,0x10
c00175d3:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175d8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175de:	83 ec 08             	sub    esp,0x8
c00175e1:	68 ce 24 02 c0       	push   0xc00224ce
c00175e6:	50                   	push   eax
c00175e7:	e8 c0 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175ec:	83 c4 10             	add    esp,0x10
c00175ef:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175fa:	83 ec 08             	sub    esp,0x8
c00175fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017601:	50                   	push   eax
c0017602:	e8 5f 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017607:	83 c4 10             	add    esp,0x10
c001760a:	fa                   	cli    
c001760b:	f4                   	hlt    
c001760c:	eb fe                	jmp    c001760c <displayDebugInfo(regs*)+0x383>

c001760e <HalSystemIdle()>:
c001760e:	56                   	push   esi
c001760f:	53                   	push   ebx
c0017610:	83 ec 14             	sub    esp,0x14
c0017613:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017618:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001761e:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017624:	83 e0 04             	and    eax,0x4
c0017627:	0f b6 c0             	movzx  eax,al
c001762a:	85 c0                	test   eax,eax
c001762c:	0f 95 c0             	setne  al
c001762f:	0f b6 c0             	movzx  eax,al
c0017632:	85 c0                	test   eax,eax
c0017634:	74 4c                	je     c0017682 <HalSystemIdle()+0x74>
c0017636:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001763b:	83 ec 08             	sub    esp,0x8
c001763e:	68 e1 00 00 00       	push   0xe1
c0017643:	50                   	push   eax
c0017644:	e8 99 fa fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017649:	83 c4 10             	add    esp,0x10
c001764c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017650:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017654:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017659:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001765d:	83 e2 02             	and    edx,0x2
c0017660:	89 d3                	mov    ebx,edx
c0017662:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017666:	83 e2 00             	and    edx,0x0
c0017669:	89 d6                	mov    esi,edx
c001766b:	56                   	push   esi
c001766c:	53                   	push   ebx
c001766d:	68 e1 00 00 00       	push   0xe1
c0017672:	50                   	push   eax
c0017673:	e8 96 fa fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017678:	83 c4 10             	add    esp,0x10
c001767b:	e8 14 8b fe ff       	call   c0000194 <doTPAUSE>
c0017680:	eb 01                	jmp    c0017683 <HalSystemIdle()+0x75>
c0017682:	f4                   	hlt    
c0017683:	90                   	nop
c0017684:	83 c4 14             	add    esp,0x14
c0017687:	5b                   	pop    ebx
c0017688:	5e                   	pop    esi
c0017689:	c3                   	ret    

c001768a <displayProgramFault(char const*)>:
c001768a:	83 ec 0c             	sub    esp,0xc
c001768d:	83 ec 0c             	sub    esp,0xc
c0017690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017694:	e8 71 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017699:	83 c4 10             	add    esp,0x10
c001769c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00176a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00176a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00176a6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176ac:	85 c0                	test   eax,eax
c00176ae:	74 21                	je     c00176d1 <displayProgramFault(char const*)+0x47>
c00176b0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00176b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00176b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00176ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176c0:	6a 04                	push   0x4
c00176c2:	6a 0f                	push   0xf
c00176c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176c8:	50                   	push   eax
c00176c9:	e8 50 14 ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00176ce:	83 c4 10             	add    esp,0x10
c00176d1:	90                   	nop
c00176d2:	83 c4 0c             	add    esp,0xc
c00176d5:	c3                   	ret    

c00176d6 <gpFault(regs*, void*)>:
c00176d6:	83 ec 1c             	sub    esp,0x1c
c00176d9:	c7 05 14 a5 02 c0 2c 6b 01 c0 	mov    DWORD PTR ds:0xc002a514,0xc0016b2c
c00176e3:	a1 14 a5 02 c0       	mov    eax,ds:0xc002a514
c00176e8:	85 c0                	test   eax,eax
c00176ea:	74 1e                	je     c001770a <gpFault(regs*, void*)+0x34>
c00176ec:	a1 14 a5 02 c0       	mov    eax,ds:0xc002a514
c00176f1:	83 ec 0c             	sub    esp,0xc
c00176f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00176f8:	ff d0                	call   eax
c00176fa:	83 c4 10             	add    esp,0x10
c00176fd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017701:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017706:	85 c0                	test   eax,eax
c0017708:	75 2e                	jne    c0017738 <gpFault(regs*, void*)+0x62>
c001770a:	83 ec 0c             	sub    esp,0xc
c001770d:	68 d6 24 02 c0       	push   0xc00224d6
c0017712:	e8 73 ff ff ff       	call   c001768a <displayProgramFault(char const*)>
c0017717:	83 c4 10             	add    esp,0x10
c001771a:	83 ec 0c             	sub    esp,0xc
c001771d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017721:	e8 63 fb ff ff       	call   c0017289 <displayDebugInfo(regs*)>
c0017726:	83 c4 10             	add    esp,0x10
c0017729:	83 ec 0c             	sub    esp,0xc
c001772c:	6a 00                	push   0x0
c001772e:	e8 99 ed ff ff       	call   c00164cc <Thr::terminateFromIRQ(int)>
c0017733:	83 c4 10             	add    esp,0x10
c0017736:	eb 01                	jmp    c0017739 <gpFault(regs*, void*)+0x63>
c0017738:	90                   	nop
c0017739:	83 c4 1c             	add    esp,0x1c
c001773c:	c3                   	ret    

c001773d <pgFault(regs*, void*)>:
c001773d:	83 ec 1c             	sub    esp,0x1c
c0017740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017744:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017747:	0f 20 d0             	mov    eax,cr2
c001774a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001774e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017752:	83 ec 04             	sub    esp,0x4
c0017755:	52                   	push   edx
c0017756:	50                   	push   eax
c0017757:	68 b4 25 02 c0       	push   0xc00225b4
c001775c:	e8 a9 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017761:	83 c4 10             	add    esp,0x10
c0017764:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017769:	8b 00                	mov    eax,DWORD PTR [eax]
c001776b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001776e:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017774:	0f 20 d2             	mov    edx,cr2
c0017777:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001777b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001777f:	83 ec 08             	sub    esp,0x8
c0017782:	52                   	push   edx
c0017783:	50                   	push   eax
c0017784:	e8 f1 2b ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017789:	83 c4 10             	add    esp,0x10
c001778c:	0f b6 c0             	movzx  eax,al
c001778f:	85 c0                	test   eax,eax
c0017791:	75 2e                	jne    c00177c1 <pgFault(regs*, void*)+0x84>
c0017793:	83 ec 0c             	sub    esp,0xc
c0017796:	68 ef 24 02 c0       	push   0xc00224ef
c001779b:	e8 ea fe ff ff       	call   c001768a <displayProgramFault(char const*)>
c00177a0:	83 c4 10             	add    esp,0x10
c00177a3:	83 ec 0c             	sub    esp,0xc
c00177a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177aa:	e8 da fa ff ff       	call   c0017289 <displayDebugInfo(regs*)>
c00177af:	83 c4 10             	add    esp,0x10
c00177b2:	83 ec 0c             	sub    esp,0xc
c00177b5:	6a 00                	push   0x0
c00177b7:	e8 10 ed ff ff       	call   c00164cc <Thr::terminateFromIRQ(int)>
c00177bc:	83 c4 10             	add    esp,0x10
c00177bf:	eb 01                	jmp    c00177c2 <pgFault(regs*, void*)+0x85>
c00177c1:	90                   	nop
c00177c2:	83 c4 1c             	add    esp,0x1c
c00177c5:	c3                   	ret    

c00177c6 <otherISRHandler(regs*, void*)>:
c00177c6:	83 ec 0c             	sub    esp,0xc
c00177c9:	83 ec 0c             	sub    esp,0xc
c00177cc:	68 dc 25 02 c0       	push   0xc00225dc
c00177d1:	e8 b4 fe ff ff       	call   c001768a <displayProgramFault(char const*)>
c00177d6:	83 c4 10             	add    esp,0x10
c00177d9:	83 ec 0c             	sub    esp,0xc
c00177dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00177e0:	e8 a4 fa ff ff       	call   c0017289 <displayDebugInfo(regs*)>
c00177e5:	83 c4 10             	add    esp,0x10
c00177e8:	83 ec 0c             	sub    esp,0xc
c00177eb:	6a 00                	push   0x0
c00177ed:	e8 da ec ff ff       	call   c00164cc <Thr::terminateFromIRQ(int)>
c00177f2:	83 c4 10             	add    esp,0x10
c00177f5:	90                   	nop
c00177f6:	83 c4 0c             	add    esp,0xc
c00177f9:	c3                   	ret    

c00177fa <opcodeFault(regs*, void*)>:
c00177fa:	55                   	push   ebp
c00177fb:	89 e5                	mov    ebp,esp
c00177fd:	83 ec 08             	sub    esp,0x8
c0017800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017803:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017806:	83 ec 08             	sub    esp,0x8
c0017809:	50                   	push   eax
c001780a:	68 fa 24 02 c0       	push   0xc00224fa
c001780f:	e8 f6 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017814:	83 c4 10             	add    esp,0x10
c0017817:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001781c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017822:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017828:	0f b6 c0             	movzx  eax,al
c001782b:	85 c0                	test   eax,eax
c001782d:	74 21                	je     c0017850 <opcodeFault(regs*, void*)+0x56>
c001782f:	83 ec 0c             	sub    esp,0xc
c0017832:	68 04 26 02 c0       	push   0xc0022604
c0017837:	e8 ce 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001783c:	83 c4 10             	add    esp,0x10
c001783f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017842:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017845:	8d 50 19             	lea    edx,[eax+0x19]
c0017848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001784b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001784e:	eb 2b                	jmp    c001787b <opcodeFault(regs*, void*)+0x81>
c0017850:	83 ec 0c             	sub    esp,0xc
c0017853:	68 08 25 02 c0       	push   0xc0022508
c0017858:	e8 2d fe ff ff       	call   c001768a <displayProgramFault(char const*)>
c001785d:	83 c4 10             	add    esp,0x10
c0017860:	83 ec 0c             	sub    esp,0xc
c0017863:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017866:	e8 1e fa ff ff       	call   c0017289 <displayDebugInfo(regs*)>
c001786b:	83 c4 10             	add    esp,0x10
c001786e:	83 ec 0c             	sub    esp,0xc
c0017871:	6a 00                	push   0x0
c0017873:	e8 54 ec ff ff       	call   c00164cc <Thr::terminateFromIRQ(int)>
c0017878:	83 c4 10             	add    esp,0x10
c001787b:	c9                   	leave  
c001787c:	c3                   	ret    

c001787d <i386SaveCoprocessor(void*)>:
c001787d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017881:	83 c0 3f             	add    eax,0x3f
c0017884:	83 e0 c0             	and    eax,0xffffffc0
c0017887:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001788b:	ff 25 10 a5 02 c0    	jmp    DWORD PTR ds:0xc002a510

c0017891 <i386LoadCoprocessor(void*)>:
c0017891:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017895:	83 c0 3f             	add    eax,0x3f
c0017898:	83 e0 c0             	and    eax,0xffffffc0
c001789b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001789f:	ff 25 0c a5 02 c0    	jmp    DWORD PTR ds:0xc002a50c

c00178a5 <x87EmulHandler(regs*, void*)>:
c00178a5:	53                   	push   ebx
c00178a6:	83 ec 08             	sub    esp,0x8
c00178a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00178ae:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00178b2:	74 10                	je     c00178c4 <x87EmulHandler(regs*, void*)+0x1f>
c00178b4:	83 ec 0c             	sub    esp,0xc
c00178b7:	68 15 25 02 c0       	push   0xc0022515
c00178bc:	e8 9c 98 ff ff       	call   c001115d <KePanic(char const*)>
c00178c1:	83 c4 10             	add    esp,0x10
c00178c4:	0f 20 c0             	mov    eax,cr0
c00178c7:	a8 08                	test   al,0x8
c00178c9:	74 59                	je     c0017924 <x87EmulHandler(regs*, void*)+0x7f>
c00178cb:	0f 06                	clts   
c00178cd:	a1 08 a5 02 c0       	mov    eax,ds:0xc002a508
c00178d2:	85 c0                	test   eax,eax
c00178d4:	74 0e                	je     c00178e4 <x87EmulHandler(regs*, void*)+0x3f>
c00178d6:	83 ec 0c             	sub    esp,0xc
c00178d9:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00178dc:	e8 9c ff ff ff       	call   c001787d <i386SaveCoprocessor(void*)>
c00178e1:	83 c4 10             	add    esp,0x10
c00178e4:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00178ea:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00178ee:	75 12                	jne    c0017902 <x87EmulHandler(regs*, void*)+0x5d>
c00178f0:	83 ec 0c             	sub    esp,0xc
c00178f3:	68 40 02 00 00       	push   0x240
c00178f8:	e8 d6 01 ff ff       	call   c0007ad3 <malloc>
c00178fd:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017900:	eb 10                	jmp    c0017912 <x87EmulHandler(regs*, void*)+0x6d>
c0017902:	a1 08 a5 02 c0       	mov    eax,ds:0xc002a508
c0017907:	83 ec 0c             	sub    esp,0xc
c001790a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001790d:	e8 7f ff ff ff       	call   c0017891 <i386LoadCoprocessor(void*)>
c0017912:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017917:	83 c4 10             	add    esp,0x10
c001791a:	a3 08 a5 02 c0       	mov    ds:0xc002a508,eax
c001791f:	83 c4 08             	add    esp,0x8
c0017922:	5b                   	pop    ebx
c0017923:	c3                   	ret    
c0017924:	83 ec 0c             	sub    esp,0xc
c0017927:	68 29 25 02 c0       	push   0xc0022529
c001792c:	e8 d9 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017931:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017939:	83 c4 18             	add    esp,0x18
c001793c:	5b                   	pop    ebx
c001793d:	e9 8a eb ff ff       	jmp    c00164cc <Thr::terminateFromIRQ(int)>

c0017942 <HalInitialiseCoprocessor()>:
c0017942:	83 ec 10             	sub    esp,0x10
c0017945:	6a 00                	push   0x0
c0017947:	68 a5 78 01 c0       	push   0xc00178a5
c001794c:	6a 07                	push   0x7
c001794e:	c7 05 08 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a508,0x0
c0017958:	e8 bd 51 ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001795d:	e8 ae 70 00 00       	call   c001ea10 <avxDetect>
c0017962:	83 c4 10             	add    esp,0x10
c0017965:	85 c0                	test   eax,eax
c0017967:	74 1c                	je     c0017985 <HalInitialiseCoprocessor()+0x43>
c0017969:	c7 05 10 a5 02 c0 3a ea 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001ea3a
c0017973:	c7 05 0c a5 02 c0 4b ea 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001ea4b
c001797d:	83 c4 0c             	add    esp,0xc
c0017980:	e9 d7 70 00 00       	jmp    c001ea5c <avxInit>
c0017985:	e8 16 74 00 00       	call   c001eda0 <absolutelyNoChanceInHell>
c001798a:	85 c0                	test   eax,eax
c001798c:	74 1c                	je     c00179aa <HalInitialiseCoprocessor()+0x68>
c001798e:	c7 05 10 a5 02 c0 b8 ed 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001edb8
c0017998:	c7 05 0c a5 02 c0 c0 ed 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001edc0
c00179a2:	83 c4 0c             	add    esp,0xc
c00179a5:	e9 1e 74 00 00       	jmp    c001edc8 <sseInit>
c00179aa:	e8 37 74 00 00       	call   c001ede6 <x87Detect>
c00179af:	85 c0                	test   eax,eax
c00179b1:	74 1c                	je     c00179cf <HalInitialiseCoprocessor()+0x8d>
c00179b3:	c7 05 10 a5 02 c0 01 ee 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001ee01
c00179bd:	c7 05 0c a5 02 c0 08 ee 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001ee08
c00179c7:	83 c4 0c             	add    esp,0xc
c00179ca:	e9 40 74 00 00       	jmp    c001ee0f <x87Init>
c00179cf:	c7 05 10 a5 02 c0 56 72 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc0017256
c00179d9:	c7 05 0c a5 02 c0 56 72 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc0017256
c00179e3:	0f 20 c0             	mov    eax,cr0
c00179e6:	83 c8 04             	or     eax,0x4
c00179e9:	0f 22 c0             	mov    cr0,eax
c00179ec:	83 c4 0c             	add    esp,0xc
c00179ef:	c3                   	ret    

c00179f0 <HalPanic(char const*)>:
c00179f0:	53                   	push   ebx
c00179f1:	83 ec 10             	sub    esp,0x10
c00179f4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00179f8:	fa                   	cli    
c00179f9:	53                   	push   ebx
c00179fa:	68 3f 25 02 c0       	push   0xc002253f
c00179ff:	e8 06 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017a04:	a1 04 a5 02 c0       	mov    eax,ds:0xc002a504
c0017a09:	83 c4 10             	add    esp,0x10
c0017a0c:	85 c0                	test   eax,eax
c0017a0e:	74 09                	je     c0017a19 <HalPanic(char const*)+0x29>
c0017a10:	83 ec 0c             	sub    esp,0xc
c0017a13:	53                   	push   ebx
c0017a14:	ff d0                	call   eax
c0017a16:	83 c4 10             	add    esp,0x10
c0017a19:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017a1e:	85 c0                	test   eax,eax
c0017a20:	0f 84 dc 00 00 00    	je     c0017b02 <HalPanic(char const*)+0x112>
c0017a26:	52                   	push   edx
c0017a27:	6a 01                	push   0x1
c0017a29:	6a 0f                	push   0xf
c0017a2b:	50                   	push   eax
c0017a2c:	e8 99 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017a31:	59                   	pop    ecx
c0017a32:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a38:	e8 7d 0d ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017a3d:	58                   	pop    eax
c0017a3e:	5a                   	pop    edx
c0017a3f:	68 64 08 02 c0       	push   0xc0020864
c0017a44:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a4a:	e8 b3 0b ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017a4f:	83 c4 0c             	add    esp,0xc
c0017a52:	6a 01                	push   0x1
c0017a54:	6a 0f                	push   0xf
c0017a56:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a5c:	e8 69 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017a61:	59                   	pop    ecx
c0017a62:	58                   	pop    eax
c0017a63:	68 58 25 02 c0       	push   0xc0022558
c0017a68:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a6e:	e8 39 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a73:	83 c4 0c             	add    esp,0xc
c0017a76:	6a 0f                	push   0xf
c0017a78:	6a 01                	push   0x1
c0017a7a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a80:	e8 45 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017a85:	58                   	pop    eax
c0017a86:	5a                   	pop    edx
c0017a87:	68 61 25 02 c0       	push   0xc0022561
c0017a8c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a92:	e8 15 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a97:	83 c4 0c             	add    esp,0xc
c0017a9a:	6a 01                	push   0x1
c0017a9c:	6a 0f                	push   0xf
c0017a9e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017aa4:	e8 21 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017aa9:	59                   	pop    ecx
c0017aaa:	58                   	pop    eax
c0017aab:	68 a5 25 02 c0       	push   0xc00225a5
c0017ab0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ab6:	e8 f1 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017abb:	58                   	pop    eax
c0017abc:	5a                   	pop    edx
c0017abd:	68 6e 25 02 c0       	push   0xc002256e
c0017ac2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ac8:	e8 df 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017acd:	59                   	pop    ecx
c0017ace:	58                   	pop    eax
c0017acf:	68 a8 25 02 c0       	push   0xc00225a8
c0017ad4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ada:	e8 cd 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017adf:	58                   	pop    eax
c0017ae0:	5a                   	pop    edx
c0017ae1:	53                   	push   ebx
c0017ae2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ae8:	e8 bf 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017aed:	59                   	pop    ecx
c0017aee:	5b                   	pop    ebx
c0017aef:	68 a5 25 02 c0       	push   0xc00225a5
c0017af4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017afa:	e8 ad 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017aff:	83 c4 10             	add    esp,0x10
c0017b02:	eb fe                	jmp    c0017b02 <HalPanic(char const*)+0x112>

c0017b04 <HalQueryPerformanceCounter()>:
c0017b04:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b09:	31 d2                	xor    edx,edx
c0017b0b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017b11:	31 c0                	xor    eax,eax
c0017b13:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017b1a:	74 02                	je     c0017b1e <HalQueryPerformanceCounter()+0x1a>
c0017b1c:	0f 31                	rdtsc  
c0017b1e:	c3                   	ret    

c0017b1f <HalInitialise()>:
c0017b1f:	53                   	push   ebx
c0017b20:	83 ec 08             	sub    esp,0x8
c0017b23:	e8 29 52 ff ff       	call   c000cd51 <setupINTS()>
c0017b28:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b2d:	80 3d 40 98 02 c0 00 	cmp    BYTE PTR ds:0xc0029840,0x0
c0017b34:	75 0f                	jne    c0017b45 <HalInitialise()+0x26>
c0017b36:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017b3c:	83 e2 fe             	and    edx,0xfffffffe
c0017b3f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017b45:	c6 05 00 a5 02 c0 00 	mov    BYTE PTR ds:0xc002a500,0x0
c0017b4c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017b52:	83 e2 fe             	and    edx,0xfffffffe
c0017b55:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017b5b:	e8 a0 02 00 00       	call   c0017e00 <picOpen()>
c0017b60:	80 3d 00 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a500,0x0
c0017b67:	74 0a                	je     c0017b73 <HalInitialise()+0x54>
c0017b69:	e8 e2 01 00 00       	call   c0017d50 <picDisable()>
c0017b6e:	e8 0d 68 00 00       	call   c001e380 <apicOpen()>
c0017b73:	50                   	push   eax
c0017b74:	bb 0f 00 00 00       	mov    ebx,0xf
c0017b79:	6a 00                	push   0x0
c0017b7b:	68 c6 77 01 c0       	push   0xc00177c6
c0017b80:	6a 00                	push   0x0
c0017b82:	e8 93 4f ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017b87:	83 c4 0c             	add    esp,0xc
c0017b8a:	6a 00                	push   0x0
c0017b8c:	68 c6 77 01 c0       	push   0xc00177c6
c0017b91:	6a 01                	push   0x1
c0017b93:	e8 82 4f ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017b98:	83 c4 0c             	add    esp,0xc
c0017b9b:	6a 00                	push   0x0
c0017b9d:	68 57 72 01 c0       	push   0xc0017257
c0017ba2:	6a 02                	push   0x2
c0017ba4:	e8 71 4f ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ba9:	83 c4 0c             	add    esp,0xc
c0017bac:	6a 00                	push   0x0
c0017bae:	68 c6 77 01 c0       	push   0xc00177c6
c0017bb3:	6a 03                	push   0x3
c0017bb5:	e8 60 4f ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bba:	83 c4 0c             	add    esp,0xc
c0017bbd:	6a 00                	push   0x0
c0017bbf:	68 c6 77 01 c0       	push   0xc00177c6
c0017bc4:	6a 04                	push   0x4
c0017bc6:	e8 4f 4f ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bcb:	83 c4 0c             	add    esp,0xc
c0017bce:	6a 00                	push   0x0
c0017bd0:	68 c6 77 01 c0       	push   0xc00177c6
c0017bd5:	6a 05                	push   0x5
c0017bd7:	e8 3e 4f ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bdc:	83 c4 0c             	add    esp,0xc
c0017bdf:	6a 00                	push   0x0
c0017be1:	68 fa 77 01 c0       	push   0xc00177fa
c0017be6:	6a 06                	push   0x6
c0017be8:	e8 2d 4f ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bed:	83 c4 0c             	add    esp,0xc
c0017bf0:	6a 00                	push   0x0
c0017bf2:	68 70 72 01 c0       	push   0xc0017270
c0017bf7:	6a 08                	push   0x8
c0017bf9:	e8 1c 4f ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bfe:	83 c4 0c             	add    esp,0xc
c0017c01:	6a 00                	push   0x0
c0017c03:	68 c6 77 01 c0       	push   0xc00177c6
c0017c08:	6a 09                	push   0x9
c0017c0a:	e8 0b 4f ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c0f:	83 c4 0c             	add    esp,0xc
c0017c12:	6a 00                	push   0x0
c0017c14:	68 c6 77 01 c0       	push   0xc00177c6
c0017c19:	6a 0a                	push   0xa
c0017c1b:	e8 fa 4e ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c20:	83 c4 0c             	add    esp,0xc
c0017c23:	6a 00                	push   0x0
c0017c25:	68 c6 77 01 c0       	push   0xc00177c6
c0017c2a:	6a 0b                	push   0xb
c0017c2c:	e8 e9 4e ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c31:	83 c4 0c             	add    esp,0xc
c0017c34:	6a 00                	push   0x0
c0017c36:	68 d6 76 01 c0       	push   0xc00176d6
c0017c3b:	6a 0d                	push   0xd
c0017c3d:	e8 d8 4e ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c42:	83 c4 0c             	add    esp,0xc
c0017c45:	6a 00                	push   0x0
c0017c47:	68 3d 77 01 c0       	push   0xc001773d
c0017c4c:	6a 0e                	push   0xe
c0017c4e:	e8 c7 4e ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c53:	83 c4 10             	add    esp,0x10
c0017c56:	50                   	push   eax
c0017c57:	6a 00                	push   0x0
c0017c59:	68 c6 77 01 c0       	push   0xc00177c6
c0017c5e:	53                   	push   ebx
c0017c5f:	43                   	inc    ebx
c0017c60:	e8 b5 4e ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c65:	83 c4 10             	add    esp,0x10
c0017c68:	83 fb 1e             	cmp    ebx,0x1e
c0017c6b:	75 e9                	jne    c0017c56 <HalInitialise()+0x137>
c0017c6d:	50                   	push   eax
c0017c6e:	6a 00                	push   0x0
c0017c70:	68 57 24 01 c0       	push   0xc0012457
c0017c75:	6a 60                	push   0x60
c0017c77:	e8 9e 4e ff ff       	call   c000cb1a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c7c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017c81:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017c8b:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017c92:	e8 3c fe fe ff       	call   c0007ad3 <malloc>
c0017c97:	89 04 24             	mov    DWORD PTR [esp],eax
c0017c9a:	89 c3                	mov    ebx,eax
c0017c9c:	e8 37 09 00 00       	call   c00185d8 <RTC::RTC()>
c0017ca1:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017cab:	5a                   	pop    edx
c0017cac:	59                   	pop    ecx
c0017cad:	53                   	push   ebx
c0017cae:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017cb4:	e8 2b 49 ff ff       	call   c000c5e4 <Device::addChild(Device*)>
c0017cb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017cbb:	6a 00                	push   0x0
c0017cbd:	6a 00                	push   0x0
c0017cbf:	6a 00                	push   0x0
c0017cc1:	53                   	push   ebx
c0017cc2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017cc5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017cca:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017cd0:	83 c4 28             	add    esp,0x28
c0017cd3:	5b                   	pop    ebx
c0017cd4:	c3                   	ret    

c0017cd5 <HalMakeBeep(int)>:
c0017cd5:	53                   	push   ebx
c0017cd6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017cda:	85 db                	test   ebx,ebx
c0017cdc:	75 07                	jne    c0017ce5 <HalMakeBeep(int)+0x10>
c0017cde:	e4 61                	in     al,0x61
c0017ce0:	83 e0 fc             	and    eax,0xfffffffc
c0017ce3:	eb 26                	jmp    c0017d0b <HalMakeBeep(int)+0x36>
c0017ce5:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017cea:	99                   	cdq    
c0017ceb:	f7 fb                	idiv   ebx
c0017ced:	89 c1                	mov    ecx,eax
c0017cef:	b0 b6                	mov    al,0xb6
c0017cf1:	e6 43                	out    0x43,al
c0017cf3:	88 c8                	mov    al,cl
c0017cf5:	e6 42                	out    0x42,al
c0017cf7:	89 c8                	mov    eax,ecx
c0017cf9:	c1 e8 08             	shr    eax,0x8
c0017cfc:	e6 42                	out    0x42,al
c0017cfe:	e4 61                	in     al,0x61
c0017d00:	89 c2                	mov    edx,eax
c0017d02:	83 ca 03             	or     edx,0x3
c0017d05:	38 d0                	cmp    al,dl
c0017d07:	74 04                	je     c0017d0d <HalMakeBeep(int)+0x38>
c0017d09:	88 d0                	mov    al,dl
c0017d0b:	e6 61                	out    0x61,al
c0017d0d:	5b                   	pop    ebx
c0017d0e:	c3                   	ret    

c0017d0f <HalGetRand()>:
c0017d0f:	31 c0                	xor    eax,eax
c0017d11:	c3                   	ret    

c0017d12 <HalEndOfInterrupt(int)>:
c0017d12:	80 3d 00 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a500,0x0
c0017d19:	74 23                	je     c0017d3e <HalEndOfInterrupt(int)+0x2c>
c0017d1b:	83 ec 14             	sub    esp,0x14
c0017d1e:	6a 1b                	push   0x1b
c0017d20:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d26:	e8 b7 f3 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017d2b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017d30:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017d3a:	83 c4 1c             	add    esp,0x1c
c0017d3d:	c3                   	ret    
c0017d3e:	e9 41 02 00 00       	jmp    c0017f84 <picEOI(int)>

c0017d43 <HalRestart()>:
c0017d43:	c3                   	ret    

c0017d44 <HalShutdown()>:
c0017d44:	c3                   	ret    

c0017d45 <HalSleep()>:
c0017d45:	c3                   	ret    
c0017d46:	66 90                	xchg   ax,ax

c0017d48 <picIoWait()>:
c0017d48:	eb 00                	jmp    c0017d4a <picIoWait()+0x2>
c0017d4a:	eb 00                	jmp    c0017d4c <picIoWait()+0x4>
c0017d4c:	90                   	nop
c0017d4d:	c3                   	ret    
c0017d4e:	66 90                	xchg   ax,ax

c0017d50 <picDisable()>:
c0017d50:	83 ec 10             	sub    esp,0x10
c0017d53:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017d5a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017d5f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017d63:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017d68:	ee                   	out    dx,al
c0017d69:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017d70:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017d75:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017d79:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017d7e:	ee                   	out    dx,al
c0017d7f:	90                   	nop
c0017d80:	83 c4 10             	add    esp,0x10
c0017d83:	c3                   	ret    

c0017d84 <picGetIRQReg(int)>:
c0017d84:	83 ec 10             	sub    esp,0x10
c0017d87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d8b:	0f b6 c0             	movzx  eax,al
c0017d8e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017d95:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017d99:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017d9d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017da2:	ee                   	out    dx,al
c0017da3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017da7:	0f b6 c0             	movzx  eax,al
c0017daa:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017db1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017db5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017db9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017dbe:	ee                   	out    dx,al
c0017dbf:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017dc6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017dcb:	89 c2                	mov    edx,eax
c0017dcd:	ec                   	in     al,dx
c0017dce:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017dd2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017dd6:	0f b6 c0             	movzx  eax,al
c0017dd9:	c1 e0 08             	shl    eax,0x8
c0017ddc:	89 c1                	mov    ecx,eax
c0017dde:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017de5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017dea:	89 c2                	mov    edx,eax
c0017dec:	ec                   	in     al,dx
c0017ded:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017df1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017df5:	0f b6 c0             	movzx  eax,al
c0017df8:	09 c8                	or     eax,ecx
c0017dfa:	83 c4 10             	add    esp,0x10
c0017dfd:	c3                   	ret    
c0017dfe:	66 90                	xchg   ax,ax

c0017e00 <picOpen()>:
c0017e00:	83 ec 50             	sub    esp,0x50
c0017e03:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017e0a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017e0f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017e13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017e17:	ee                   	out    dx,al
c0017e18:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017e1f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017e24:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017e28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e2c:	ee                   	out    dx,al
c0017e2d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017e35:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017e3d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017e44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e48:	89 c2                	mov    edx,eax
c0017e4a:	ec                   	in     al,dx
c0017e4b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017e4f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017e53:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017e57:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017e5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e62:	89 c2                	mov    edx,eax
c0017e64:	ec                   	in     al,dx
c0017e65:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017e69:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017e6d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017e71:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017e78:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017e7d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017e81:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e85:	ee                   	out    dx,al
c0017e86:	e8 bd fe ff ff       	call   c0017d48 <picIoWait()>
c0017e8b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017e92:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017e97:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017e9b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017e9f:	ee                   	out    dx,al
c0017ea0:	e8 a3 fe ff ff       	call   c0017d48 <picIoWait()>
c0017ea5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017ea9:	0f b6 c0             	movzx  eax,al
c0017eac:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017eb3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017eb7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017ebb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ebf:	ee                   	out    dx,al
c0017ec0:	e8 83 fe ff ff       	call   c0017d48 <picIoWait()>
c0017ec5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017ec9:	0f b6 c0             	movzx  eax,al
c0017ecc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017ed3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017ed7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017edb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017edf:	ee                   	out    dx,al
c0017ee0:	e8 63 fe ff ff       	call   c0017d48 <picIoWait()>
c0017ee5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017eec:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017ef1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017ef5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ef9:	ee                   	out    dx,al
c0017efa:	e8 49 fe ff ff       	call   c0017d48 <picIoWait()>
c0017eff:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017f06:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017f0b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017f0f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017f13:	ee                   	out    dx,al
c0017f14:	e8 2f fe ff ff       	call   c0017d48 <picIoWait()>
c0017f19:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017f20:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017f25:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017f29:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017f2d:	ee                   	out    dx,al
c0017f2e:	e8 15 fe ff ff       	call   c0017d48 <picIoWait()>
c0017f33:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017f3a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017f3f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017f43:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017f47:	ee                   	out    dx,al
c0017f48:	e8 fb fd ff ff       	call   c0017d48 <picIoWait()>
c0017f4d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017f52:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017f59:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017f5d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017f61:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017f65:	ee                   	out    dx,al
c0017f66:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017f6b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017f72:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017f76:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017f7a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017f7e:	ee                   	out    dx,al
c0017f7f:	90                   	nop
c0017f80:	83 c4 50             	add    esp,0x50
c0017f83:	c3                   	ret    

c0017f84 <picEOI(int)>:
c0017f84:	83 ec 10             	sub    esp,0x10
c0017f87:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017f8c:	75 1e                	jne    c0017fac <picEOI(int)+0x28>
c0017f8e:	6a 0b                	push   0xb
c0017f90:	e8 ef fd ff ff       	call   c0017d84 <picGetIRQReg(int)>
c0017f95:	83 c4 04             	add    esp,0x4
c0017f98:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0017f9d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0017fa2:	25 80 00 00 00       	and    eax,0x80
c0017fa7:	74 73                	je     c001801c <picEOI(int)+0x98>
c0017fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0017fac:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017fb1:	75 31                	jne    c0017fe4 <picEOI(int)+0x60>
c0017fb3:	6a 0b                	push   0xb
c0017fb5:	e8 ca fd ff ff       	call   c0017d84 <picGetIRQReg(int)>
c0017fba:	83 c4 04             	add    esp,0x4
c0017fbd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017fc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fc6:	98                   	cwde   
c0017fc7:	85 c0                	test   eax,eax
c0017fc9:	78 19                	js     c0017fe4 <picEOI(int)+0x60>
c0017fcb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0017fd2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0017fd7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017fdb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017fe0:	ee                   	out    dx,al
c0017fe1:	eb 3d                	jmp    c0018020 <picEOI(int)+0x9c>
c0017fe3:	90                   	nop
c0017fe4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017fe9:	7e 19                	jle    c0018004 <picEOI(int)+0x80>
c0017feb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017ff2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017ff7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017ffb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018000:	ee                   	out    dx,al
c0018001:	8d 76 00             	lea    esi,[esi+0x0]
c0018004:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001800b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018010:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018014:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018019:	ee                   	out    dx,al
c001801a:	eb 04                	jmp    c0018020 <picEOI(int)+0x9c>
c001801c:	90                   	nop
c001801d:	8d 76 00             	lea    esi,[esi+0x0]
c0018020:	83 c4 10             	add    esp,0x10
c0018023:	c3                   	ret    

c0018024 <RTC::open(int, int, void*)>:
c0018024:	31 c0                	xor    eax,eax
c0018026:	c3                   	ret    
c0018027:	90                   	nop

c0018028 <RTC::close(int, int, void*)>:
c0018028:	31 c0                	xor    eax,eax
c001802a:	c3                   	ret    
c001802b:	90                   	nop

c001802c <RTC::timeInSecondsUTC()>:
c001802c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018030:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018036:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001803c:	c3                   	ret    
c001803d:	90                   	nop

c001803e <RTC::timeInDatetimeUTC()>:
c001803e:	53                   	push   ebx
c001803f:	83 ec 14             	sub    esp,0x14
c0018042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018046:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001804a:	8b 10                	mov    edx,DWORD PTR [eax]
c001804c:	50                   	push   eax
c001804d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018050:	83 c4 0c             	add    esp,0xc
c0018053:	52                   	push   edx
c0018054:	50                   	push   eax
c0018055:	53                   	push   ebx
c0018056:	e8 fd 42 ff ff       	call   c000c358 <secondsToDatetime(unsigned long long)>
c001805b:	89 d8                	mov    eax,ebx
c001805d:	83 c4 14             	add    esp,0x14
c0018060:	5b                   	pop    ebx
c0018061:	c2 04 00             	ret    0x4

c0018064 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018064:	56                   	push   esi
c0018065:	53                   	push   ebx
c0018066:	83 ec 14             	sub    esp,0x14
c0018069:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001806d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001806f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018072:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018076:	52                   	push   edx
c0018077:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001807b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001807f:	50                   	push   eax
c0018080:	e8 d3 42 ff ff       	call   c000c358 <secondsToDatetime(unsigned long long)>
c0018085:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018089:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001808d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018091:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018095:	89 f0                	mov    eax,esi
c0018097:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001809b:	83 c4 20             	add    esp,0x20
c001809e:	5b                   	pop    ebx
c001809f:	5e                   	pop    esi
c00180a0:	ff e0                	jmp    eax

c00180a2 <RTC::~RTC()>:
c00180a2:	83 ec 0c             	sub    esp,0xc
c00180a5:	ba 44 26 02 c0       	mov    edx,0xc0022644
c00180aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180ae:	89 10                	mov    DWORD PTR [eax],edx
c00180b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b4:	83 ec 0c             	sub    esp,0xc
c00180b7:	50                   	push   eax
c00180b8:	e8 27 40 ff ff       	call   c000c0e4 <Clock::~Clock()>
c00180bd:	83 c4 10             	add    esp,0x10
c00180c0:	90                   	nop
c00180c1:	83 c4 0c             	add    esp,0xc
c00180c4:	c3                   	ret    
c00180c5:	90                   	nop

c00180c6 <RTC::~RTC()>:
c00180c6:	83 ec 0c             	sub    esp,0xc
c00180c9:	83 ec 0c             	sub    esp,0xc
c00180cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180d0:	e8 cd ff ff ff       	call   c00180a2 <RTC::~RTC()>
c00180d5:	83 c4 10             	add    esp,0x10
c00180d8:	83 ec 08             	sub    esp,0x8
c00180db:	68 60 01 00 00       	push   0x160
c00180e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180e4:	e8 23 27 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00180e9:	83 c4 10             	add    esp,0x10
c00180ec:	83 c4 0c             	add    esp,0xc
c00180ef:	c3                   	ret    

c00180f0 <RTC::get_update_in_progress_flag()>:
c00180f0:	83 ec 14             	sub    esp,0x14
c00180f3:	6a 0a                	push   0xa
c00180f5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00180fb:	e8 9a f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018100:	83 c4 1c             	add    esp,0x1c
c0018103:	0f b6 c0             	movzx  eax,al
c0018106:	c1 e8 07             	shr    eax,0x7
c0018109:	c3                   	ret    

c001810a <RTC::completeRTCRefresh()>:
c001810a:	55                   	push   ebp
c001810b:	57                   	push   edi
c001810c:	56                   	push   esi
c001810d:	53                   	push   ebx
c001810e:	83 ec 3c             	sub    esp,0x3c
c0018111:	8b 1d 4c 95 02 c0    	mov    ebx,DWORD PTR ds:0xc002954c
c0018117:	83 ec 0c             	sub    esp,0xc
c001811a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001811e:	e8 cd ff ff ff       	call   c00180f0 <RTC::get_update_in_progress_flag()>
c0018123:	83 c4 10             	add    esp,0x10
c0018126:	84 c0                	test   al,al
c0018128:	74 0e                	je     c0018138 <RTC::completeRTCRefresh()+0x2e>
c001812a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018130:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c0018136:	73 df                	jae    c0018117 <RTC::completeRTCRefresh()+0xd>
c0018138:	50                   	push   eax
c0018139:	50                   	push   eax
c001813a:	6a 00                	push   0x0
c001813c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018142:	e8 53 f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018147:	89 c7                	mov    edi,eax
c0018149:	58                   	pop    eax
c001814a:	5a                   	pop    edx
c001814b:	6a 02                	push   0x2
c001814d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018153:	e8 42 f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018158:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001815c:	59                   	pop    ecx
c001815d:	5b                   	pop    ebx
c001815e:	6a 04                	push   0x4
c0018160:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018166:	e8 2f f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001816b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001816f:	5e                   	pop    esi
c0018170:	5d                   	pop    ebp
c0018171:	6a 07                	push   0x7
c0018173:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018179:	e8 1c f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001817e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018182:	58                   	pop    eax
c0018183:	5a                   	pop    edx
c0018184:	6a 08                	push   0x8
c0018186:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001818c:	e8 09 f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018191:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018195:	59                   	pop    ecx
c0018196:	5b                   	pop    ebx
c0018197:	6a 09                	push   0x9
c0018199:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001819f:	e8 f6 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181a4:	0f b6 c0             	movzx  eax,al
c00181a7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00181ab:	83 c4 10             	add    esp,0x10
c00181ae:	8b 1d 4c 95 02 c0    	mov    ebx,DWORD PTR ds:0xc002954c
c00181b4:	83 ec 0c             	sub    esp,0xc
c00181b7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00181bb:	e8 30 ff ff ff       	call   c00180f0 <RTC::get_update_in_progress_flag()>
c00181c0:	83 c4 10             	add    esp,0x10
c00181c3:	84 c0                	test   al,al
c00181c5:	74 0e                	je     c00181d5 <RTC::completeRTCRefresh()+0xcb>
c00181c7:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00181cd:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c00181d3:	73 df                	jae    c00181b4 <RTC::completeRTCRefresh()+0xaa>
c00181d5:	51                   	push   ecx
c00181d6:	51                   	push   ecx
c00181d7:	6a 00                	push   0x0
c00181d9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181df:	e8 b6 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181e4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00181e8:	5b                   	pop    ebx
c00181e9:	5e                   	pop    esi
c00181ea:	6a 02                	push   0x2
c00181ec:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181f2:	e8 a3 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181f7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00181fb:	5d                   	pop    ebp
c00181fc:	58                   	pop    eax
c00181fd:	6a 04                	push   0x4
c00181ff:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018205:	e8 90 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001820a:	88 c3                	mov    bl,al
c001820c:	58                   	pop    eax
c001820d:	5a                   	pop    edx
c001820e:	6a 07                	push   0x7
c0018210:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018216:	e8 7f ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001821b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001821f:	59                   	pop    ecx
c0018220:	5e                   	pop    esi
c0018221:	6a 08                	push   0x8
c0018223:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018229:	e8 6c ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001822e:	5d                   	pop    ebp
c001822f:	89 c6                	mov    esi,eax
c0018231:	58                   	pop    eax
c0018232:	6a 09                	push   0x9
c0018234:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001823a:	e8 5b ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001823f:	89 f9                	mov    ecx,edi
c0018241:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018245:	83 c4 10             	add    esp,0x10
c0018248:	0f b6 e8             	movzx  ebp,al
c001824b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018250:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018254:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018258:	74 27                	je     c0018281 <RTC::completeRTCRefresh()+0x177>
c001825a:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001825e:	89 f0                	mov    eax,esi
c0018260:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018264:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018268:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001826c:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018270:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018274:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018278:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001827c:	e9 2d ff ff ff       	jmp    c00181ae <RTC::completeRTCRefresh()+0xa4>
c0018281:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018286:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001828a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001828e:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0018292:	75 c6                	jne    c001825a <RTC::completeRTCRefresh()+0x150>
c0018294:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018299:	89 f1                	mov    ecx,esi
c001829b:	0f b6 fb             	movzx  edi,bl
c001829e:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00182a2:	0f b6 c9             	movzx  ecx,cl
c00182a5:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00182a9:	89 f1                	mov    ecx,esi
c00182ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00182af:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00182b3:	0f 94 c2             	sete   dl
c00182b6:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00182ba:	0f 94 c0             	sete   al
c00182bd:	21 d0                	and    eax,edx
c00182bf:	31 d2                	xor    edx,edx
c00182c1:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00182c5:	0f 94 c2             	sete   dl
c00182c8:	85 c2                	test   edx,eax
c00182ca:	74 8e                	je     c001825a <RTC::completeRTCRefresh()+0x150>
c00182cc:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00182d0:	75 88                	jne    c001825a <RTC::completeRTCRefresh()+0x150>
c00182d2:	52                   	push   edx
c00182d3:	52                   	push   edx
c00182d4:	6a 0b                	push   0xb
c00182d6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182dc:	e8 b9 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182e1:	83 c4 10             	add    esp,0x10
c00182e4:	a8 04                	test   al,0x4
c00182e6:	75 7a                	jne    c0018362 <RTC::completeRTCRefresh()+0x258>
c00182e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182ec:	c1 ef 04             	shr    edi,0x4
c00182ef:	83 e6 0f             	and    esi,0xf
c00182f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00182f6:	c1 ed 04             	shr    ebp,0x4
c00182f9:	6b ed 0a             	imul   ebp,ebp,0xa
c00182fc:	c1 ea 04             	shr    edx,0x4
c00182ff:	6b d2 0a             	imul   edx,edx,0xa
c0018302:	83 e1 0f             	and    ecx,0xf
c0018305:	01 d1                	add    ecx,edx
c0018307:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001830b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001830f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018313:	c1 ea 04             	shr    edx,0x4
c0018316:	6b d2 0a             	imul   edx,edx,0xa
c0018319:	83 e1 0f             	and    ecx,0xf
c001831c:	01 d1                	add    ecx,edx
c001831e:	89 fa                	mov    edx,edi
c0018320:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018324:	83 e2 07             	and    edx,0x7
c0018327:	89 d9                	mov    ecx,ebx
c0018329:	6b d2 0a             	imul   edx,edx,0xa
c001832c:	83 e1 0f             	and    ecx,0xf
c001832f:	83 e3 80             	and    ebx,0xffffff80
c0018332:	01 d1                	add    ecx,edx
c0018334:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018338:	09 cb                	or     ebx,ecx
c001833a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001833e:	c1 ea 04             	shr    edx,0x4
c0018341:	6b d2 0a             	imul   edx,edx,0xa
c0018344:	83 e1 0f             	and    ecx,0xf
c0018347:	01 d1                	add    ecx,edx
c0018349:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001834d:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018351:	c1 ea 04             	shr    edx,0x4
c0018354:	6b d2 0a             	imul   edx,edx,0xa
c0018357:	01 d6                	add    esi,edx
c0018359:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001835d:	83 e2 0f             	and    edx,0xf
c0018360:	01 d5                	add    ebp,edx
c0018362:	a8 02                	test   al,0x2
c0018364:	75 15                	jne    c001837b <RTC::completeRTCRefresh()+0x271>
c0018366:	f6 c3 80             	test   bl,0x80
c0018369:	74 10                	je     c001837b <RTC::completeRTCRefresh()+0x271>
c001836b:	83 e3 7f             	and    ebx,0x7f
c001836e:	b9 18 00 00 00       	mov    ecx,0x18
c0018373:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018376:	99                   	cdq    
c0018377:	f7 f9                	idiv   ecx
c0018379:	88 d3                	mov    bl,dl
c001837b:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018381:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018387:	77 06                	ja     c001838f <RTC::completeRTCRefresh()+0x285>
c0018389:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001838f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018394:	31 c9                	xor    ecx,ecx
c0018396:	31 d2                	xor    edx,edx
c0018398:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001839c:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00183a0:	89 cd                	mov    ebp,ecx
c00183a2:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c00183a6:	c1 e7 10             	shl    edi,0x10
c00183a9:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00183af:	c1 e0 10             	shl    eax,0x10
c00183b2:	09 c5                	or     ebp,eax
c00183b4:	89 e9                	mov    ecx,ebp
c00183b6:	0f b7 c2             	movzx  eax,dx
c00183b9:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00183bd:	09 f8                	or     eax,edi
c00183bf:	89 c2                	mov    edx,eax
c00183c1:	50                   	push   eax
c00183c2:	50                   	push   eax
c00183c3:	88 d9                	mov    cl,bl
c00183c5:	51                   	push   ecx
c00183c6:	52                   	push   edx
c00183c7:	e8 07 3e ff ff       	call   c000c1d3 <datetimeToSeconds(datetime_t)>
c00183cc:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00183d0:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00183d6:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00183dc:	83 c4 4c             	add    esp,0x4c
c00183df:	5b                   	pop    ebx
c00183e0:	5e                   	pop    esi
c00183e1:	5f                   	pop    edi
c00183e2:	5d                   	pop    ebp
c00183e3:	c3                   	ret    

c00183e4 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00183e4:	55                   	push   ebp
c00183e5:	57                   	push   edi
c00183e6:	56                   	push   esi
c00183e7:	53                   	push   ebx
c00183e8:	83 ec 30             	sub    esp,0x30
c00183eb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00183ef:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00183f3:	6a 00                	push   0x0
c00183f5:	6a 00                	push   0x0
c00183f7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183fd:	e8 b0 ee fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018402:	83 c4 0c             	add    esp,0xc
c0018405:	6a 00                	push   0x0
c0018407:	6a 02                	push   0x2
c0018409:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001840f:	e8 9e ee fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018414:	89 f8                	mov    eax,edi
c0018416:	89 f9                	mov    ecx,edi
c0018418:	0f b6 c4             	movzx  eax,ah
c001841b:	31 d2                	xor    edx,edx
c001841d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018421:	c1 e9 10             	shr    ecx,0x10
c0018424:	89 f0                	mov    eax,esi
c0018426:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001842a:	89 f0                	mov    eax,esi
c001842c:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018430:	0f b6 c4             	movzx  eax,ah
c0018433:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018437:	89 f0                	mov    eax,esi
c0018439:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001843d:	c1 e8 10             	shr    eax,0x10
c0018440:	b9 64 00 00 00       	mov    ecx,0x64
c0018445:	f7 f1                	div    ecx
c0018447:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001844b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001844f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018453:	59                   	pop    ecx
c0018454:	5b                   	pop    ebx
c0018455:	89 fb                	mov    ebx,edi
c0018457:	6a 0b                	push   0xb
c0018459:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001845f:	e8 36 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018464:	83 c4 10             	add    esp,0x10
c0018467:	a8 04                	test   al,0x4
c0018469:	89 c5                	mov    ebp,eax
c001846b:	75 6e                	jne    c00184db <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c001846d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018471:	31 d2                	xor    edx,edx
c0018473:	0f b6 c1             	movzx  eax,cl
c0018476:	b9 0a 00 00 00       	mov    ecx,0xa
c001847b:	f7 f1                	div    ecx
c001847d:	c1 e0 04             	shl    eax,0x4
c0018480:	09 d0                	or     eax,edx
c0018482:	31 d2                	xor    edx,edx
c0018484:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018488:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001848d:	f7 f1                	div    ecx
c001848f:	c1 e0 04             	shl    eax,0x4
c0018492:	09 d0                	or     eax,edx
c0018494:	31 d2                	xor    edx,edx
c0018496:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001849a:	0f b6 c3             	movzx  eax,bl
c001849d:	f7 f1                	div    ecx
c001849f:	c1 e0 04             	shl    eax,0x4
c00184a2:	09 d0                	or     eax,edx
c00184a4:	31 d2                	xor    edx,edx
c00184a6:	89 c3                	mov    ebx,eax
c00184a8:	89 f0                	mov    eax,esi
c00184aa:	0f b6 c0             	movzx  eax,al
c00184ad:	f7 f1                	div    ecx
c00184af:	c1 e0 04             	shl    eax,0x4
c00184b2:	09 d0                	or     eax,edx
c00184b4:	31 d2                	xor    edx,edx
c00184b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00184ba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00184bf:	f7 f1                	div    ecx
c00184c1:	c1 e0 04             	shl    eax,0x4
c00184c4:	09 d0                	or     eax,edx
c00184c6:	31 d2                	xor    edx,edx
c00184c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00184cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184d0:	f7 f1                	div    ecx
c00184d2:	c1 e0 04             	shl    eax,0x4
c00184d5:	09 d0                	or     eax,edx
c00184d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184db:	83 e5 02             	and    ebp,0x2
c00184de:	75 1e                	jne    c00184fe <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00184e0:	0f b6 c3             	movzx  eax,bl
c00184e3:	83 f8 0b             	cmp    eax,0xb
c00184e6:	76 10                	jbe    c00184f8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00184e8:	8d 53 f4             	lea    edx,[ebx-0xc]
c00184eb:	84 d2                	test   dl,dl
c00184ed:	88 d3                	mov    bl,dl
c00184ef:	75 02                	jne    c00184f3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c00184f1:	b3 0c                	mov    bl,0xc
c00184f3:	83 cb 80             	or     ebx,0xffffff80
c00184f6:	eb 06                	jmp    c00184fe <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00184f8:	85 c0                	test   eax,eax
c00184fa:	75 02                	jne    c00184fe <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00184fc:	b3 0c                	mov    bl,0xc
c00184fe:	50                   	push   eax
c00184ff:	0f b6 db             	movzx  ebx,bl
c0018502:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018507:	52                   	push   edx
c0018508:	6a 00                	push   0x0
c001850a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018510:	e8 9d ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018515:	83 c4 0c             	add    esp,0xc
c0018518:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001851d:	50                   	push   eax
c001851e:	6a 02                	push   0x2
c0018520:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018526:	e8 87 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001852b:	83 c4 0c             	add    esp,0xc
c001852e:	53                   	push   ebx
c001852f:	6a 04                	push   0x4
c0018531:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018537:	e8 76 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001853c:	83 c4 0c             	add    esp,0xc
c001853f:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018544:	52                   	push   edx
c0018545:	6a 07                	push   0x7
c0018547:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001854d:	e8 60 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018552:	83 c4 0c             	add    esp,0xc
c0018555:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001855a:	50                   	push   eax
c001855b:	6a 08                	push   0x8
c001855d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018563:	e8 4a ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018568:	83 c4 0c             	add    esp,0xc
c001856b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018570:	55                   	push   ebp
c0018571:	6a 09                	push   0x9
c0018573:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018579:	e8 34 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001857e:	5a                   	pop    edx
c001857f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018583:	e8 82 fb ff ff       	call   c001810a <RTC::completeRTCRefresh()>
c0018588:	83 c4 3c             	add    esp,0x3c
c001858b:	b0 01                	mov    al,0x1
c001858d:	5b                   	pop    ebx
c001858e:	5e                   	pop    esi
c001858f:	5f                   	pop    edi
c0018590:	5d                   	pop    ebp
c0018591:	c3                   	ret    

c0018592 <rtcIRQHandler(regs*, void*)>:
c0018592:	53                   	push   ebx
c0018593:	83 ec 10             	sub    esp,0x10
c0018596:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001859a:	6a 0c                	push   0xc
c001859c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185a2:	e8 f3 eb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00185a7:	83 c4 10             	add    esp,0x10
c00185aa:	a8 80                	test   al,0x80
c00185ac:	74 24                	je     c00185d2 <rtcIRQHandler(regs*, void*)+0x40>
c00185ae:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00185b5:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00185bc:	66 ff 05 18 a5 02 c0 	inc    WORD PTR ds:0xc002a518
c00185c3:	75 0d                	jne    c00185d2 <rtcIRQHandler(regs*, void*)+0x40>
c00185c5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00185c9:	83 c4 08             	add    esp,0x8
c00185cc:	5b                   	pop    ebx
c00185cd:	e9 38 fb ff ff       	jmp    c001810a <RTC::completeRTCRefresh()>
c00185d2:	83 c4 08             	add    esp,0x8
c00185d5:	5b                   	pop    ebx
c00185d6:	c3                   	ret    
c00185d7:	90                   	nop

c00185d8 <RTC::RTC()>:
c00185d8:	83 ec 1c             	sub    esp,0x1c
c00185db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185df:	83 ec 08             	sub    esp,0x8
c00185e2:	68 27 26 02 c0       	push   0xc0022627
c00185e7:	50                   	push   eax
c00185e8:	e8 c1 3a ff ff       	call   c000c0ae <Clock::Clock(char const*)>
c00185ed:	83 c4 10             	add    esp,0x10
c00185f0:	ba 44 26 02 c0       	mov    edx,0xc0022644
c00185f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185f9:	89 10                	mov    DWORD PTR [eax],edx
c00185fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185ff:	83 ec 0c             	sub    esp,0xc
c0018602:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018606:	6a 01                	push   0x1
c0018608:	68 92 85 01 c0       	push   0xc0018592
c001860d:	6a 08                	push   0x8
c001860f:	50                   	push   eax
c0018610:	e8 7b 3f ff ff       	call   c000c590 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018615:	83 c4 20             	add    esp,0x20
c0018618:	89 c2                	mov    edx,eax
c001861a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001861e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018624:	fa                   	cli    
c0018625:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001862a:	83 c0 01             	add    eax,0x1
c001862d:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0018632:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018637:	83 ec 08             	sub    esp,0x8
c001863a:	6a 0b                	push   0xb
c001863c:	50                   	push   eax
c001863d:	e8 58 eb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018642:	83 c4 10             	add    esp,0x10
c0018645:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018649:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001864e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018652:	83 ca 10             	or     edx,0x10
c0018655:	0f b6 d2             	movzx  edx,dl
c0018658:	83 ec 04             	sub    esp,0x4
c001865b:	52                   	push   edx
c001865c:	6a 0b                	push   0xb
c001865e:	50                   	push   eax
c001865f:	e8 4e ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018664:	83 c4 10             	add    esp,0x10
c0018667:	83 ec 0c             	sub    esp,0xc
c001866a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001866e:	e8 97 fa ff ff       	call   c001810a <RTC::completeRTCRefresh()>
c0018673:	83 c4 10             	add    esp,0x10
c0018676:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001867b:	83 e8 01             	sub    eax,0x1
c001867e:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0018683:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0018688:	85 c0                	test   eax,eax
c001868a:	75 01                	jne    c001868d <RTC::RTC()+0xb5>
c001868c:	fb                   	sti    
c001868d:	90                   	nop
c001868e:	83 c4 1c             	add    esp,0x1c
c0018691:	c3                   	ret    
c0018692:	66 90                	xchg   ax,ax

c0018694 <HalConsoleScroll(int, int)>:
c0018694:	83 ec 10             	sub    esp,0x10
c0018697:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001869f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00186a7:	90                   	nop
c00186a8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00186ad:	0f 8f e1 00 00 00    	jg     c0018794 <HalConsoleScroll(int, int)+0x100>
c00186b3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00186bb:	90                   	nop
c00186bc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00186c4:	0f 8f be 00 00 00    	jg     c0018788 <HalConsoleScroll(int, int)+0xf4>
c00186ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00186ce:	89 d0                	mov    eax,edx
c00186d0:	c1 e0 02             	shl    eax,0x2
c00186d3:	01 d0                	add    eax,edx
c00186d5:	c1 e0 05             	shl    eax,0x5
c00186d8:	89 c2                	mov    edx,eax
c00186da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00186de:	01 d0                	add    eax,edx
c00186e0:	89 c2                	mov    edx,eax
c00186e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186e6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00186e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00186ed:	89 d0                	mov    eax,edx
c00186ef:	c1 e0 02             	shl    eax,0x2
c00186f2:	01 d0                	add    eax,edx
c00186f4:	c1 e0 05             	shl    eax,0x5
c00186f7:	89 c2                	mov    edx,eax
c00186f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00186fd:	01 d0                	add    eax,edx
c00186ff:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018705:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018709:	01 d0                	add    eax,edx
c001870b:	8a 11                	mov    dl,BYTE PTR [ecx]
c001870d:	88 10                	mov    BYTE PTR [eax],dl
c001870f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018714:	75 66                	jne    c001877c <HalConsoleScroll(int, int)+0xe8>
c0018716:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001871a:	83 e0 01             	and    eax,0x1
c001871d:	74 39                	je     c0018758 <HalConsoleScroll(int, int)+0xc4>
c001871f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018723:	83 e0 0f             	and    eax,0xf
c0018726:	88 c2                	mov    dl,al
c0018728:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001872c:	c1 e0 04             	shl    eax,0x4
c001872f:	09 d0                	or     eax,edx
c0018731:	88 c1                	mov    cl,al
c0018733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018737:	89 d0                	mov    eax,edx
c0018739:	c1 e0 02             	shl    eax,0x2
c001873c:	01 d0                	add    eax,edx
c001873e:	c1 e0 05             	shl    eax,0x5
c0018741:	89 c2                	mov    edx,eax
c0018743:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018747:	01 d0                	add    eax,edx
c0018749:	89 c2                	mov    edx,eax
c001874b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001874f:	01 d0                	add    eax,edx
c0018751:	88 ca                	mov    dl,cl
c0018753:	88 10                	mov    BYTE PTR [eax],dl
c0018755:	eb 25                	jmp    c001877c <HalConsoleScroll(int, int)+0xe8>
c0018757:	90                   	nop
c0018758:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001875c:	89 d0                	mov    eax,edx
c001875e:	c1 e0 02             	shl    eax,0x2
c0018761:	01 d0                	add    eax,edx
c0018763:	c1 e0 05             	shl    eax,0x5
c0018766:	89 c2                	mov    edx,eax
c0018768:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001876c:	01 d0                	add    eax,edx
c001876e:	89 c2                	mov    edx,eax
c0018770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018774:	01 d0                	add    eax,edx
c0018776:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018779:	8d 76 00             	lea    esi,[esi+0x0]
c001877c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018781:	e9 36 ff ff ff       	jmp    c00186bc <HalConsoleScroll(int, int)+0x28>
c0018786:	66 90                	xchg   ax,ax
c0018788:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001878d:	e9 16 ff ff ff       	jmp    c00186a8 <HalConsoleScroll(int, int)+0x14>
c0018792:	66 90                	xchg   ax,ax
c0018794:	90                   	nop
c0018795:	83 c4 10             	add    esp,0x10
c0018798:	c3                   	ret    
c0018799:	8d 76 00             	lea    esi,[esi+0x0]

c001879c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001879c:	83 ec 14             	sub    esp,0x14
c001879f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187a3:	88 04 24             	mov    BYTE PTR [esp],al
c00187a6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00187a9:	0f b6 c0             	movzx  eax,al
c00187ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00187b0:	89 d1                	mov    ecx,edx
c00187b2:	83 e1 0f             	and    ecx,0xf
c00187b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00187b9:	c1 e2 04             	shl    edx,0x4
c00187bc:	0f b6 d2             	movzx  edx,dl
c00187bf:	09 ca                	or     edx,ecx
c00187c1:	c1 e2 08             	shl    edx,0x8
c00187c4:	09 d0                	or     eax,edx
c00187c6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00187cb:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00187d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00187d7:	89 d0                	mov    eax,edx
c00187d9:	c1 e0 02             	shl    eax,0x2
c00187dc:	01 d0                	add    eax,edx
c00187de:	c1 e0 04             	shl    eax,0x4
c00187e1:	89 c2                	mov    edx,eax
c00187e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187e7:	01 d0                	add    eax,edx
c00187e9:	d1 e0                	shl    eax,1
c00187eb:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00187ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187f3:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00187f8:	66 89 10             	mov    WORD PTR [eax],dx
c00187fb:	90                   	nop
c00187fc:	83 c4 14             	add    esp,0x14
c00187ff:	c3                   	ret    

c0018800 <HalConsoleCursorUpdate(int, int)>:
c0018800:	83 ec 20             	sub    esp,0x20
c0018803:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018807:	89 c2                	mov    edx,eax
c0018809:	c1 e2 02             	shl    edx,0x2
c001880c:	01 d0                	add    eax,edx
c001880e:	c1 e0 04             	shl    eax,0x4
c0018811:	89 c2                	mov    edx,eax
c0018813:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018817:	01 d0                	add    eax,edx
c0018819:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001881e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018825:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001882a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001882e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018832:	ee                   	out    dx,al
c0018833:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018838:	0f b6 c0             	movzx  eax,al
c001883b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018842:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018846:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001884a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001884e:	ee                   	out    dx,al
c001884f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018856:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001885b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001885f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018863:	ee                   	out    dx,al
c0018864:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018869:	c1 e8 08             	shr    eax,0x8
c001886c:	0f b6 c0             	movzx  eax,al
c001886f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018876:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001887a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001887e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018882:	ee                   	out    dx,al
c0018883:	90                   	nop
c0018884:	83 c4 20             	add    esp,0x20
c0018887:	c3                   	ret    

c0018888 <FAT::getName()>:
c0018888:	b8 78 26 02 c0       	mov    eax,0xc0022678
c001888d:	c3                   	ret    
c001888e:	66 90                	xchg   ax,ax

c0018890 <FAT::tell(void*, unsigned long long*)>:
c0018890:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018895:	75 09                	jne    c00188a0 <FAT::tell(void*, unsigned long long*)+0x10>
c0018897:	b8 04 00 00 00       	mov    eax,0x4
c001889c:	c3                   	ret    
c001889d:	8d 76 00             	lea    esi,[esi+0x0]
c00188a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00188a5:	75 09                	jne    c00188b0 <FAT::tell(void*, unsigned long long*)+0x20>
c00188a7:	b8 04 00 00 00       	mov    eax,0x4
c00188ac:	c3                   	ret    
c00188ad:	8d 76 00             	lea    esi,[esi+0x0]
c00188b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00188b7:	ba 00 00 00 00       	mov    edx,0x0
c00188bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00188c0:	89 01                	mov    DWORD PTR [ecx],eax
c00188c2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00188c5:	b8 00 00 00 00       	mov    eax,0x0
c00188ca:	c3                   	ret    
c00188cb:	90                   	nop

c00188cc <FAT::stat(void*, unsigned long long*)>:
c00188cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00188d1:	75 09                	jne    c00188dc <FAT::stat(void*, unsigned long long*)+0x10>
c00188d3:	b8 04 00 00 00       	mov    eax,0x4
c00188d8:	c3                   	ret    
c00188d9:	8d 76 00             	lea    esi,[esi+0x0]
c00188dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00188e1:	75 09                	jne    c00188ec <FAT::stat(void*, unsigned long long*)+0x20>
c00188e3:	b8 04 00 00 00       	mov    eax,0x4
c00188e8:	c3                   	ret    
c00188e9:	8d 76 00             	lea    esi,[esi+0x0]
c00188ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00188f3:	ba 00 00 00 00       	mov    edx,0x0
c00188f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00188fc:	89 01                	mov    DWORD PTR [ecx],eax
c00188fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018901:	b8 00 00 00 00       	mov    eax,0x0
c0018906:	c3                   	ret    
c0018907:	90                   	nop

c0018908 <FAT::~FAT()>:
c0018908:	83 ec 0c             	sub    esp,0xc
c001890b:	ba c4 26 02 c0       	mov    edx,0xc00226c4
c0018910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018914:	89 10                	mov    DWORD PTR [eax],edx
c0018916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001891a:	83 ec 0c             	sub    esp,0xc
c001891d:	50                   	push   eax
c001891e:	e8 51 2b ff ff       	call   c000b474 <Filesystem::~Filesystem()>
c0018923:	83 c4 10             	add    esp,0x10
c0018926:	90                   	nop
c0018927:	83 c4 0c             	add    esp,0xc
c001892a:	c3                   	ret    
c001892b:	90                   	nop

c001892c <FAT::~FAT()>:
c001892c:	83 ec 0c             	sub    esp,0xc
c001892f:	83 ec 0c             	sub    esp,0xc
c0018932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018936:	e8 cd ff ff ff       	call   c0018908 <FAT::~FAT()>
c001893b:	83 c4 10             	add    esp,0x10
c001893e:	83 ec 08             	sub    esp,0x8
c0018941:	6a 08                	push   0x8
c0018943:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018947:	e8 c0 1e ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001894c:	83 c4 10             	add    esp,0x10
c001894f:	83 c4 0c             	add    esp,0xc
c0018952:	c3                   	ret    
c0018953:	90                   	nop

c0018954 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018954:	83 ec 1c             	sub    esp,0x1c
c0018957:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001895e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018963:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018967:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c001896e:	83 f8 ff             	cmp    eax,0xffffffff
c0018971:	75 35                	jne    c00189a8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018973:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018977:	88 c2                	mov    dl,al
c0018979:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c001897e:	01 d0                	add    eax,edx
c0018980:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018984:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c001898a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001898e:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018995:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c001899a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001899e:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c00189a5:	eb 19                	jmp    c00189c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00189a7:	90                   	nop
c00189a8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00189ac:	88 c2                	mov    dl,al
c00189ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189b2:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c00189b9:	01 d0                	add    eax,edx
c00189bb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00189bf:	90                   	nop
c00189c0:	83 ec 04             	sub    esp,0x4
c00189c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00189c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00189cb:	8d 44 24 15          	lea    eax,[esp+0x15]
c00189cf:	50                   	push   eax
c00189d0:	e8 1e c6 fe ff       	call   c0004ff3 <f_getlabel>
c00189d5:	83 c4 10             	add    esp,0x10
c00189d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00189dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00189e1:	75 09                	jne    c00189ec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00189e3:	b8 00 00 00 00       	mov    eax,0x0
c00189e8:	eb 0a                	jmp    c00189f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00189ea:	66 90                	xchg   ax,ax
c00189ec:	b8 01 00 00 00       	mov    eax,0x1
c00189f1:	8d 76 00             	lea    esi,[esi+0x0]
c00189f4:	83 c4 1c             	add    esp,0x1c
c00189f7:	c3                   	ret    

c00189f8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00189f8:	53                   	push   ebx
c00189f9:	83 ec 58             	sub    esp,0x58
c00189fc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018a04:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018a08:	b9 00 00 00 00       	mov    ecx,0x0
c0018a0d:	b8 3c 00 00 00       	mov    eax,0x3c
c0018a12:	83 e0 f8             	and    eax,0xfffffff8
c0018a15:	89 c3                	mov    ebx,eax
c0018a17:	b8 00 00 00 00       	mov    eax,0x0
c0018a1c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018a20:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018a24:	83 c0 08             	add    eax,0x8
c0018a27:	39 d8                	cmp    eax,ebx
c0018a29:	72 f1                	jb     c0018a1c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018a2b:	01 c2                	add    edx,eax
c0018a2d:	89 0a                	mov    DWORD PTR [edx],ecx
c0018a2f:	83 c2 04             	add    edx,0x4
c0018a32:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018a36:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018a3d:	83 f8 ff             	cmp    eax,0xffffffff
c0018a40:	75 36                	jne    c0018a78 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018a42:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018a46:	88 c2                	mov    dl,al
c0018a48:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018a4d:	01 d0                	add    eax,edx
c0018a4f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a53:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018a59:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018a5d:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018a64:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018a69:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018a6d:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018a74:	eb 1a                	jmp    c0018a90 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018a76:	66 90                	xchg   ax,ax
c0018a78:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018a7c:	88 c2                	mov    dl,al
c0018a7e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018a82:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018a89:	01 d0                	add    eax,edx
c0018a8b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a8f:	90                   	nop
c0018a90:	83 ec 08             	sub    esp,0x8
c0018a93:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018a97:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018a9b:	50                   	push   eax
c0018a9c:	e8 cf 7d fe ff       	call   c0000870 <strcat>
c0018aa1:	83 c4 10             	add    esp,0x10
c0018aa4:	83 ec 0c             	sub    esp,0xc
c0018aa7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018aab:	50                   	push   eax
c0018aac:	e8 96 c6 fe ff       	call   c0005147 <f_setlabel>
c0018ab1:	83 c4 10             	add    esp,0x10
c0018ab4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018ab8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018abd:	75 09                	jne    c0018ac8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018abf:	b8 00 00 00 00       	mov    eax,0x0
c0018ac4:	eb 0a                	jmp    c0018ad0 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018ac6:	66 90                	xchg   ax,ax
c0018ac8:	b8 01 00 00 00       	mov    eax,0x1
c0018acd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ad0:	83 c4 58             	add    esp,0x58
c0018ad3:	5b                   	pop    ebx
c0018ad4:	c3                   	ret    
c0018ad5:	90                   	nop
c0018ad6:	66 90                	xchg   ax,ax

c0018ad8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018ad8:	83 ec 2c             	sub    esp,0x2c
c0018adb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018ae3:	83 ec 08             	sub    esp,0x8
c0018ae6:	68 9c 26 02 c0       	push   0xc002269c
c0018aeb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018aef:	e8 8c 7c fe ff       	call   c0000780 <strcmp>
c0018af4:	83 c4 10             	add    esp,0x10
c0018af7:	85 c0                	test   eax,eax
c0018af9:	0f 94 c0             	sete   al
c0018afc:	0f b6 c0             	movzx  eax,al
c0018aff:	85 c0                	test   eax,eax
c0018b01:	74 0d                	je     c0018b10 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018b03:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b0b:	e9 c0 00 00 00       	jmp    c0018bd0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b10:	83 ec 08             	sub    esp,0x8
c0018b13:	68 8e 26 02 c0       	push   0xc002268e
c0018b18:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b1c:	e8 5f 7c fe ff       	call   c0000780 <strcmp>
c0018b21:	83 c4 10             	add    esp,0x10
c0018b24:	85 c0                	test   eax,eax
c0018b26:	0f 94 c0             	sete   al
c0018b29:	0f b6 c0             	movzx  eax,al
c0018b2c:	85 c0                	test   eax,eax
c0018b2e:	74 10                	je     c0018b40 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018b30:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b38:	e9 93 00 00 00       	jmp    c0018bd0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b40:	83 ec 08             	sub    esp,0x8
c0018b43:	68 94 26 02 c0       	push   0xc0022694
c0018b48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b4c:	e8 2f 7c fe ff       	call   c0000780 <strcmp>
c0018b51:	83 c4 10             	add    esp,0x10
c0018b54:	85 c0                	test   eax,eax
c0018b56:	0f 94 c0             	sete   al
c0018b59:	0f b6 c0             	movzx  eax,al
c0018b5c:	85 c0                	test   eax,eax
c0018b5e:	74 0c                	je     c0018b6c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018b60:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b68:	eb 66                	jmp    c0018bd0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b6a:	66 90                	xchg   ax,ax
c0018b6c:	83 ec 08             	sub    esp,0x8
c0018b6f:	68 1c ff 01 c0       	push   0xc001ff1c
c0018b74:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b78:	e8 03 7c fe ff       	call   c0000780 <strcmp>
c0018b7d:	83 c4 10             	add    esp,0x10
c0018b80:	85 c0                	test   eax,eax
c0018b82:	0f 94 c0             	sete   al
c0018b85:	0f b6 c0             	movzx  eax,al
c0018b88:	85 c0                	test   eax,eax
c0018b8a:	74 0c                	je     c0018b98 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018b8c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018b94:	eb 3a                	jmp    c0018bd0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b96:	66 90                	xchg   ax,ax
c0018b98:	83 ec 08             	sub    esp,0x8
c0018b9b:	68 9a 26 02 c0       	push   0xc002269a
c0018ba0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ba4:	e8 d7 7b fe ff       	call   c0000780 <strcmp>
c0018ba9:	83 c4 10             	add    esp,0x10
c0018bac:	85 c0                	test   eax,eax
c0018bae:	0f 94 c0             	sete   al
c0018bb1:	0f b6 c0             	movzx  eax,al
c0018bb4:	85 c0                	test   eax,eax
c0018bb6:	74 0c                	je     c0018bc4 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018bb8:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018bc0:	eb 0e                	jmp    c0018bd0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018bc2:	66 90                	xchg   ax,ax
c0018bc4:	b8 08 00 00 00       	mov    eax,0x8
c0018bc9:	e9 ea 00 00 00       	jmp    c0018cb8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018bce:	66 90                	xchg   ax,ax
c0018bd0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018bd7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018bdc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018be0:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018be7:	83 f8 ff             	cmp    eax,0xffffffff
c0018bea:	75 34                	jne    c0018c20 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018bec:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018bf0:	88 c2                	mov    dl,al
c0018bf2:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018bf7:	01 d0                	add    eax,edx
c0018bf9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018bfd:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018c03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c07:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018c0e:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018c13:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018c17:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018c1e:	eb 18                	jmp    c0018c38 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018c20:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c24:	88 c2                	mov    dl,al
c0018c26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c2a:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018c31:	01 d0                	add    eax,edx
c0018c33:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c37:	90                   	nop
c0018c38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c3c:	88 04 24             	mov    BYTE PTR [esp],al
c0018c3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018c43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c47:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018c4f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018c54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018c5c:	83 ec 0c             	sub    esp,0xc
c0018c5f:	68 00 20 00 00       	push   0x2000
c0018c64:	e8 6a ee fe ff       	call   c0007ad3 <malloc>
c0018c69:	83 c4 10             	add    esp,0x10
c0018c6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018c70:	68 00 20 00 00       	push   0x2000
c0018c75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c79:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c7d:	50                   	push   eax
c0018c7e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018c82:	50                   	push   eax
c0018c83:	e8 bc c7 fe ff       	call   c0005444 <f_mkfs>
c0018c88:	83 c4 10             	add    esp,0x10
c0018c8b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018c8f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018c94:	75 0a                	jne    c0018ca0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018c96:	b8 00 00 00 00       	mov    eax,0x0
c0018c9b:	eb 1b                	jmp    c0018cb8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018ca0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018ca5:	75 09                	jne    c0018cb0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018ca7:	b8 09 00 00 00       	mov    eax,0x9
c0018cac:	eb 0a                	jmp    c0018cb8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018cae:	66 90                	xchg   ax,ax
c0018cb0:	b8 01 00 00 00       	mov    eax,0x1
c0018cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cb8:	83 c4 2c             	add    esp,0x2c
c0018cbb:	c3                   	ret    

c0018cbc <FAT::tryMount(LogicalDisk*, int)>:
c0018cbc:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018cc2:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018cc7:	83 f8 14             	cmp    eax,0x14
c0018cca:	75 18                	jne    c0018ce4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018ccc:	83 ec 0c             	sub    esp,0xc
c0018ccf:	68 a0 26 02 c0       	push   0xc00226a0
c0018cd4:	e8 84 84 ff ff       	call   c001115d <KePanic(char const*)>
c0018cd9:	83 c4 10             	add    esp,0x10
c0018cdc:	b0 00                	mov    al,0x0
c0018cde:	e9 ed 01 00 00       	jmp    c0018ed0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018ce3:	90                   	nop
c0018ce4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018ceb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018cf1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018cf7:	3d 00 02 00 00       	cmp    eax,0x200
c0018cfc:	74 0a                	je     c0018d08 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018cfe:	b0 00                	mov    al,0x0
c0018d00:	e9 cb 01 00 00       	jmp    c0018ed0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d05:	8d 76 00             	lea    esi,[esi+0x0]
c0018d08:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018d10:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018d17:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018d1e:	83 f8 ff             	cmp    eax,0xffffffff
c0018d21:	74 09                	je     c0018d2c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018d23:	b0 01                	mov    al,0x1
c0018d25:	e9 a6 01 00 00       	jmp    c0018ed0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d2a:	66 90                	xchg   ax,ax
c0018d2c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018d36:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018d3e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018d45:	88 c2                	mov    dl,al
c0018d47:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018d4c:	01 d0                	add    eax,edx
c0018d4e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018d55:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018d5b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018d62:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018d69:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018d6e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018d75:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018d7c:	83 ec 0c             	sub    esp,0xc
c0018d7f:	68 34 02 00 00       	push   0x234
c0018d84:	e8 4a ed fe ff       	call   c0007ad3 <malloc>
c0018d89:	83 c4 10             	add    esp,0x10
c0018d8c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018d93:	83 ec 04             	sub    esp,0x4
c0018d96:	6a 00                	push   0x0
c0018d98:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018d9f:	50                   	push   eax
c0018da0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018da7:	e8 92 ae fe ff       	call   c0003c3e <f_mount>
c0018dac:	83 c4 10             	add    esp,0x10
c0018daf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018db6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018dbe:	74 1c                	je     c0018ddc <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018dc0:	83 ec 0c             	sub    esp,0xc
c0018dc3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018dca:	e8 24 ed fe ff       	call   c0007af3 <rfree>
c0018dcf:	83 c4 10             	add    esp,0x10
c0018dd2:	b0 00                	mov    al,0x0
c0018dd4:	e9 f7 00 00 00       	jmp    c0018ed0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ddc:	83 ec 04             	sub    esp,0x4
c0018ddf:	68 00 01 00 00       	push   0x100
c0018de4:	6a 00                	push   0x0
c0018de6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018ded:	50                   	push   eax
c0018dee:	e8 fd 76 fe ff       	call   c00004f0 <memset>
c0018df3:	83 c4 10             	add    esp,0x10
c0018df6:	83 ec 08             	sub    esp,0x8
c0018df9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e00:	50                   	push   eax
c0018e01:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e08:	50                   	push   eax
c0018e09:	e8 62 7a fe ff       	call   c0000870 <strcat>
c0018e0e:	83 c4 10             	add    esp,0x10
c0018e11:	83 ec 08             	sub    esp,0x8
c0018e14:	68 ae 26 02 c0       	push   0xc00226ae
c0018e19:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e20:	50                   	push   eax
c0018e21:	e8 4a 7a fe ff       	call   c0000870 <strcat>
c0018e26:	83 c4 10             	add    esp,0x10
c0018e29:	83 ec 04             	sub    esp,0x4
c0018e2c:	6a 01                	push   0x1
c0018e2e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018e35:	50                   	push   eax
c0018e36:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e3a:	50                   	push   eax
c0018e3b:	e8 60 ae fe ff       	call   c0003ca0 <f_open>
c0018e40:	83 c4 10             	add    esp,0x10
c0018e43:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018e4a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018e51:	85 c0                	test   eax,eax
c0018e53:	74 0b                	je     c0018e60 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018e55:	78 31                	js     c0018e88 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018e57:	83 e8 04             	sub    eax,0x4
c0018e5a:	83 f8 01             	cmp    eax,0x1
c0018e5d:	77 29                	ja     c0018e88 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018e5f:	90                   	nop
c0018e60:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018e68:	83 ec 0c             	sub    esp,0xc
c0018e6b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e6f:	50                   	push   eax
c0018e70:	e8 db b5 fe ff       	call   c0004450 <f_close>
c0018e75:	83 c4 10             	add    esp,0x10
c0018e78:	90                   	nop
c0018e79:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018e81:	85 c0                	test   eax,eax
c0018e83:	74 43                	je     c0018ec8 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018e85:	eb 31                	jmp    c0018eb8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018e87:	90                   	nop
c0018e88:	83 ec 0c             	sub    esp,0xc
c0018e8b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e92:	e8 5c ec fe ff       	call   c0007af3 <rfree>
c0018e97:	83 c4 10             	add    esp,0x10
c0018e9a:	83 ec 04             	sub    esp,0x4
c0018e9d:	6a 00                	push   0x0
c0018e9f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018ea6:	50                   	push   eax
c0018ea7:	6a 00                	push   0x0
c0018ea9:	e8 90 ad fe ff       	call   c0003c3e <f_mount>
c0018eae:	83 c4 10             	add    esp,0x10
c0018eb1:	b0 00                	mov    al,0x0
c0018eb3:	eb 1b                	jmp    c0018ed0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018eb8:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018ebd:	83 c0 01             	add    eax,0x1
c0018ec0:	a3 20 a5 02 c0       	mov    ds:0xc002a520,eax
c0018ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ec8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018ecf:	90                   	nop
c0018ed0:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018ed6:	c3                   	ret    
c0018ed7:	90                   	nop

c0018ed8 <FAT::allocateSwapfile(char const*, int)>:
c0018ed8:	55                   	push   ebp
c0018ed9:	57                   	push   edi
c0018eda:	56                   	push   esi
c0018edb:	53                   	push   ebx
c0018edc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018ee2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018eed:	83 ec 0c             	sub    esp,0xc
c0018ef0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018ef7:	e8 d7 eb fe ff       	call   c0007ad3 <malloc>
c0018efc:	83 c4 10             	add    esp,0x10
c0018eff:	89 c7                	mov    edi,eax
c0018f01:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0018f06:	83 ec 04             	sub    esp,0x4
c0018f09:	50                   	push   eax
c0018f0a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018f11:	57                   	push   edi
c0018f12:	e8 bf 27 ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c0018f17:	83 c4 10             	add    esp,0x10
c0018f1a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018f21:	83 ec 04             	sub    esp,0x4
c0018f24:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018f28:	50                   	push   eax
c0018f29:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f2d:	50                   	push   eax
c0018f2e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018f35:	e8 5a 2b ff ff       	call   c000ba94 <File::stat(unsigned long long*, bool*)>
c0018f3a:	83 c4 10             	add    esp,0x10
c0018f3d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018f44:	c1 e0 14             	shl    eax,0x14
c0018f47:	89 c7                	mov    edi,eax
c0018f49:	89 c5                	mov    ebp,eax
c0018f4b:	c1 fd 1f             	sar    ebp,0x1f
c0018f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f56:	89 f9                	mov    ecx,edi
c0018f58:	31 c1                	xor    ecx,eax
c0018f5a:	89 cb                	mov    ebx,ecx
c0018f5c:	89 e9                	mov    ecx,ebp
c0018f5e:	31 d1                	xor    ecx,edx
c0018f60:	89 ce                	mov    esi,ecx
c0018f62:	89 f0                	mov    eax,esi
c0018f64:	09 d8                	or     eax,ebx
c0018f66:	0f 84 9c 00 00 00    	je     c0019008 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018f6c:	83 ec 0c             	sub    esp,0xc
c0018f6f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018f76:	e8 e5 29 ff ff       	call   c000b960 <File::unlink()>
c0018f7b:	83 c4 10             	add    esp,0x10
c0018f7e:	83 ec 08             	sub    esp,0x8
c0018f81:	6a 12                	push   0x12
c0018f83:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018f8a:	e8 03 28 ff ff       	call   c000b792 <File::open(FileOpenMode)>
c0018f8f:	83 c4 10             	add    esp,0x10
c0018f92:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018f99:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018f9f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018fa6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018fad:	c1 e0 14             	shl    eax,0x14
c0018fb0:	83 ec 04             	sub    esp,0x4
c0018fb3:	6a 01                	push   0x1
c0018fb5:	50                   	push   eax
c0018fb6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0018fbd:	e8 15 c3 fe ff       	call   c00052d7 <f_expand>
c0018fc2:	83 c4 10             	add    esp,0x10
c0018fc5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018fcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fce:	83 c0 10             	add    eax,0x10
c0018fd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fd3:	83 ec 0c             	sub    esp,0xc
c0018fd6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018fda:	52                   	push   edx
c0018fdb:	8d 54 24 30          	lea    edx,[esp+0x30]
c0018fdf:	52                   	push   edx
c0018fe0:	6a 00                	push   0x0
c0018fe2:	68 00 04 00 00       	push   0x400
c0018fe7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018fee:	ff d0                	call   eax
c0018ff0:	83 c4 20             	add    esp,0x20
c0018ff3:	83 ec 0c             	sub    esp,0xc
c0018ff6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018ffd:	e8 ee 27 ff ff       	call   c000b7f0 <File::close()>
c0019002:	83 c4 10             	add    esp,0x10
c0019005:	8d 76 00             	lea    esi,[esi+0x0]
c0019008:	83 ec 08             	sub    esp,0x8
c001900b:	6a 01                	push   0x1
c001900d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019014:	e8 79 27 ff ff       	call   c000b792 <File::open(FileOpenMode)>
c0019019:	83 c4 10             	add    esp,0x10
c001901c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019023:	8b 00                	mov    eax,DWORD PTR [eax]
c0019025:	83 c0 0c             	add    eax,0xc
c0019028:	8b 00                	mov    eax,DWORD PTR [eax]
c001902a:	83 ec 0c             	sub    esp,0xc
c001902d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019031:	52                   	push   edx
c0019032:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019036:	52                   	push   edx
c0019037:	6a 00                	push   0x0
c0019039:	6a 04                	push   0x4
c001903b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019042:	ff d0                	call   eax
c0019044:	83 c4 20             	add    esp,0x20
c0019047:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001904e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019054:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001905b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019062:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019065:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001906c:	83 ec 0c             	sub    esp,0xc
c001906f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019076:	e8 75 27 ff ff       	call   c000b7f0 <File::close()>
c001907b:	83 c4 10             	add    esp,0x10
c001907e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019085:	ba 00 00 00 00       	mov    edx,0x0
c001908a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019090:	5b                   	pop    ebx
c0019091:	5e                   	pop    esi
c0019092:	5f                   	pop    edi
c0019093:	5d                   	pop    ebp
c0019094:	c3                   	ret    
c0019095:	90                   	nop
c0019096:	66 90                	xchg   ax,ax

c0019098 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019098:	57                   	push   edi
c0019099:	56                   	push   esi
c001909a:	53                   	push   ebx
c001909b:	81 ec 50 02 00 00    	sub    esp,0x250
c00190a1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00190a9:	74 0d                	je     c00190b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00190ab:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00190b3:	75 0f                	jne    c00190c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00190b5:	8d 76 00             	lea    esi,[esi+0x0]
c00190b8:	b8 04 00 00 00       	mov    eax,0x4
c00190bd:	e9 3a 01 00 00       	jmp    c00191fc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00190c2:	66 90                	xchg   ax,ax
c00190c4:	83 ec 08             	sub    esp,0x8
c00190c7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00190ce:	50                   	push   eax
c00190cf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00190d6:	e8 41 b6 fe ff       	call   c000471c <f_readdir>
c00190db:	83 c4 10             	add    esp,0x10
c00190de:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00190e5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00190ec:	83 ec 0c             	sub    esp,0xc
c00190ef:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00190f6:	83 c0 16             	add    eax,0x16
c00190f9:	50                   	push   eax
c00190fa:	e8 81 74 fe ff       	call   c0000580 <strlen>
c00190ff:	83 c4 10             	add    esp,0x10
c0019102:	ba 00 00 00 00       	mov    edx,0x0
c0019107:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001910b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001910f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019116:	0f b6 c0             	movzx  eax,al
c0019119:	83 e0 10             	and    eax,0x10
c001911c:	74 0a                	je     c0019128 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001911e:	b8 02 00 00 00       	mov    eax,0x2
c0019123:	eb 0b                	jmp    c0019130 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019125:	8d 76 00             	lea    esi,[esi+0x0]
c0019128:	b8 01 00 00 00       	mov    eax,0x1
c001912d:	8d 76 00             	lea    esi,[esi+0x0]
c0019130:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019134:	83 ec 08             	sub    esp,0x8
c0019137:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001913e:	83 c0 16             	add    eax,0x16
c0019141:	50                   	push   eax
c0019142:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019146:	83 c0 10             	add    eax,0x10
c0019149:	50                   	push   eax
c001914a:	e8 01 75 fe ff       	call   c0000650 <strcpy>
c001914f:	83 c4 10             	add    esp,0x10
c0019152:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019159:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019160:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019164:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001916b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019172:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019179:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019180:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019187:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001918e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019195:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001919c:	89 c6                	mov    esi,eax
c001919e:	89 d7                	mov    edi,edx
c00191a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00191a2:	89 c8                	mov    eax,ecx
c00191a4:	89 fa                	mov    edx,edi
c00191a6:	89 f3                	mov    ebx,esi
c00191a8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00191af:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00191b6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00191bd:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00191c4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00191ca:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00191d1:	0f be c0             	movsx  eax,al
c00191d4:	85 c0                	test   eax,eax
c00191d6:	75 08                	jne    c00191e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00191d8:	b8 07 00 00 00       	mov    eax,0x7
c00191dd:	eb 1d                	jmp    c00191fc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00191df:	90                   	nop
c00191e0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00191e7:	85 c0                	test   eax,eax
c00191e9:	75 09                	jne    c00191f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00191eb:	b8 00 00 00 00       	mov    eax,0x0
c00191f0:	eb 0a                	jmp    c00191fc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00191f2:	66 90                	xchg   ax,ax
c00191f4:	b8 01 00 00 00       	mov    eax,0x1
c00191f9:	8d 76 00             	lea    esi,[esi+0x0]
c00191fc:	81 c4 50 02 00 00    	add    esp,0x250
c0019202:	5b                   	pop    ebx
c0019203:	5e                   	pop    esi
c0019204:	5f                   	pop    edi
c0019205:	c3                   	ret    
c0019206:	66 90                	xchg   ax,ax

c0019208 <FAT::read(void*, unsigned long, void*, int*)>:
c0019208:	83 ec 1c             	sub    esp,0x1c
c001920b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019210:	74 0a                	je     c001921c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019212:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019217:	75 0b                	jne    c0019224 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019219:	8d 76 00             	lea    esi,[esi+0x0]
c001921c:	b8 04 00 00 00       	mov    eax,0x4
c0019221:	eb 41                	jmp    c0019264 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019223:	90                   	nop
c0019224:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019228:	50                   	push   eax
c0019229:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001922d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019231:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019235:	e8 29 ad fe ff       	call   c0003f63 <f_read>
c001923a:	83 c4 10             	add    esp,0x10
c001923d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019241:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019245:	89 c2                	mov    edx,eax
c0019247:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001924b:	89 10                	mov    DWORD PTR [eax],edx
c001924d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019251:	85 c0                	test   eax,eax
c0019253:	75 07                	jne    c001925c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019255:	b8 00 00 00 00       	mov    eax,0x0
c001925a:	eb 08                	jmp    c0019264 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001925c:	b8 01 00 00 00       	mov    eax,0x1
c0019261:	8d 76 00             	lea    esi,[esi+0x0]
c0019264:	83 c4 1c             	add    esp,0x1c
c0019267:	c3                   	ret    

c0019268 <FAT::write(void*, unsigned long, void*, int*)>:
c0019268:	83 ec 1c             	sub    esp,0x1c
c001926b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019270:	74 0a                	je     c001927c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019272:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019277:	75 0b                	jne    c0019284 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019279:	8d 76 00             	lea    esi,[esi+0x0]
c001927c:	b8 04 00 00 00       	mov    eax,0x4
c0019281:	eb 41                	jmp    c00192c4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019283:	90                   	nop
c0019284:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019288:	50                   	push   eax
c0019289:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001928d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019291:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019295:	e8 aa ae fe ff       	call   c0004144 <f_write>
c001929a:	83 c4 10             	add    esp,0x10
c001929d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192a5:	89 c2                	mov    edx,eax
c00192a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00192ab:	89 10                	mov    DWORD PTR [eax],edx
c00192ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192b1:	85 c0                	test   eax,eax
c00192b3:	75 07                	jne    c00192bc <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00192b5:	b8 00 00 00 00       	mov    eax,0x0
c00192ba:	eb 08                	jmp    c00192c4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00192bc:	b8 01 00 00 00       	mov    eax,0x1
c00192c1:	8d 76 00             	lea    esi,[esi+0x0]
c00192c4:	83 c4 1c             	add    esp,0x1c
c00192c7:	c3                   	ret    

c00192c8 <FAT::close(void*)>:
c00192c8:	83 ec 1c             	sub    esp,0x1c
c00192cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00192d0:	75 0a                	jne    c00192dc <FAT::close(void*)+0x14>
c00192d2:	b8 04 00 00 00       	mov    eax,0x4
c00192d7:	eb 3f                	jmp    c0019318 <FAT::close(void*)+0x50>
c00192d9:	8d 76 00             	lea    esi,[esi+0x0]
c00192dc:	83 ec 0c             	sub    esp,0xc
c00192df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192e3:	e8 68 b1 fe ff       	call   c0004450 <f_close>
c00192e8:	83 c4 10             	add    esp,0x10
c00192eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192ef:	83 ec 0c             	sub    esp,0xc
c00192f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192f6:	e8 e8 e7 fe ff       	call   c0007ae3 <free>
c00192fb:	83 c4 10             	add    esp,0x10
c00192fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019302:	85 c0                	test   eax,eax
c0019304:	75 0a                	jne    c0019310 <FAT::close(void*)+0x48>
c0019306:	b8 00 00 00 00       	mov    eax,0x0
c001930b:	eb 0b                	jmp    c0019318 <FAT::close(void*)+0x50>
c001930d:	8d 76 00             	lea    esi,[esi+0x0]
c0019310:	b8 01 00 00 00       	mov    eax,0x1
c0019315:	8d 76 00             	lea    esi,[esi+0x0]
c0019318:	83 c4 1c             	add    esp,0x1c
c001931b:	c3                   	ret    

c001931c <FAT::closeDir(void*)>:
c001931c:	83 ec 1c             	sub    esp,0x1c
c001931f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019324:	75 0a                	jne    c0019330 <FAT::closeDir(void*)+0x14>
c0019326:	b8 04 00 00 00       	mov    eax,0x4
c001932b:	eb 3f                	jmp    c001936c <FAT::closeDir(void*)+0x50>
c001932d:	8d 76 00             	lea    esi,[esi+0x0]
c0019330:	83 ec 0c             	sub    esp,0xc
c0019333:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019337:	e8 be b3 fe ff       	call   c00046fa <f_closedir>
c001933c:	83 c4 10             	add    esp,0x10
c001933f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019343:	83 ec 0c             	sub    esp,0xc
c0019346:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001934a:	e8 94 e7 fe ff       	call   c0007ae3 <free>
c001934f:	83 c4 10             	add    esp,0x10
c0019352:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019356:	85 c0                	test   eax,eax
c0019358:	75 0a                	jne    c0019364 <FAT::closeDir(void*)+0x48>
c001935a:	b8 00 00 00 00       	mov    eax,0x0
c001935f:	eb 0b                	jmp    c001936c <FAT::closeDir(void*)+0x50>
c0019361:	8d 76 00             	lea    esi,[esi+0x0]
c0019364:	b8 01 00 00 00       	mov    eax,0x1
c0019369:	8d 76 00             	lea    esi,[esi+0x0]
c001936c:	83 c4 1c             	add    esp,0x1c
c001936f:	c3                   	ret    

c0019370 <FAT::truncate(void*, unsigned long long)>:
c0019370:	83 ec 2c             	sub    esp,0x2c
c0019373:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019377:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001937b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001937f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019383:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019388:	75 0a                	jne    c0019394 <FAT::truncate(void*, unsigned long long)+0x24>
c001938a:	b8 04 00 00 00       	mov    eax,0x4
c001938f:	eb 47                	jmp    c00193d8 <FAT::truncate(void*, unsigned long long)+0x68>
c0019391:	8d 76 00             	lea    esi,[esi+0x0]
c0019394:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019398:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001939b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001939f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00193a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00193ab:	83 ec 08             	sub    esp,0x8
c00193ae:	50                   	push   eax
c00193af:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00193b3:	e8 c7 b0 fe ff       	call   c000447f <f_lseek>
c00193b8:	83 c4 10             	add    esp,0x10
c00193bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00193bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00193c3:	85 c0                	test   eax,eax
c00193c5:	75 09                	jne    c00193d0 <FAT::truncate(void*, unsigned long long)+0x60>
c00193c7:	b8 00 00 00 00       	mov    eax,0x0
c00193cc:	eb 0a                	jmp    c00193d8 <FAT::truncate(void*, unsigned long long)+0x68>
c00193ce:	66 90                	xchg   ax,ax
c00193d0:	b8 01 00 00 00       	mov    eax,0x1
c00193d5:	8d 76 00             	lea    esi,[esi+0x0]
c00193d8:	83 c4 2c             	add    esp,0x2c
c00193db:	c3                   	ret    

c00193dc <FAT::seek(void*, unsigned long long)>:
c00193dc:	83 ec 2c             	sub    esp,0x2c
c00193df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00193e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00193eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193ef:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00193f4:	75 0a                	jne    c0019400 <FAT::seek(void*, unsigned long long)+0x24>
c00193f6:	b8 04 00 00 00       	mov    eax,0x4
c00193fb:	eb 33                	jmp    c0019430 <FAT::seek(void*, unsigned long long)+0x54>
c00193fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019400:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019404:	83 ec 08             	sub    esp,0x8
c0019407:	50                   	push   eax
c0019408:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001940c:	e8 6e b0 fe ff       	call   c000447f <f_lseek>
c0019411:	83 c4 10             	add    esp,0x10
c0019414:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001941c:	85 c0                	test   eax,eax
c001941e:	75 08                	jne    c0019428 <FAT::seek(void*, unsigned long long)+0x4c>
c0019420:	b8 00 00 00 00       	mov    eax,0x0
c0019425:	eb 09                	jmp    c0019430 <FAT::seek(void*, unsigned long long)+0x54>
c0019427:	90                   	nop
c0019428:	b8 01 00 00 00       	mov    eax,0x1
c001942d:	8d 76 00             	lea    esi,[esi+0x0]
c0019430:	83 c4 2c             	add    esp,0x2c
c0019433:	c3                   	ret    

c0019434 <fatWrapperReadDisk>:
c0019434:	53                   	push   ebx
c0019435:	83 ec 18             	sub    esp,0x18
c0019438:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001943c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019440:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019445:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c001944c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019450:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019454:	ba 00 00 00 00       	mov    edx,0x0
c0019459:	83 ec 0c             	sub    esp,0xc
c001945c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019460:	53                   	push   ebx
c0019461:	52                   	push   edx
c0019462:	50                   	push   eax
c0019463:	51                   	push   ecx
c0019464:	e8 65 45 ff ff       	call   c000d9ce <LogicalDisk::read(unsigned long long, int, void*)>
c0019469:	83 c4 20             	add    esp,0x20
c001946c:	83 c4 18             	add    esp,0x18
c001946f:	5b                   	pop    ebx
c0019470:	c3                   	ret    
c0019471:	8d 76 00             	lea    esi,[esi+0x0]

c0019474 <fatWrapperWriteDisk>:
c0019474:	53                   	push   ebx
c0019475:	83 ec 18             	sub    esp,0x18
c0019478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001947c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019480:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019485:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c001948c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019490:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019494:	ba 00 00 00 00       	mov    edx,0x0
c0019499:	83 ec 0c             	sub    esp,0xc
c001949c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194a0:	53                   	push   ebx
c00194a1:	52                   	push   edx
c00194a2:	50                   	push   eax
c00194a3:	51                   	push   ecx
c00194a4:	e8 91 45 ff ff       	call   c000da3a <LogicalDisk::write(unsigned long long, int, void*)>
c00194a9:	83 c4 20             	add    esp,0x20
c00194ac:	83 c4 18             	add    esp,0x18
c00194af:	5b                   	pop    ebx
c00194b0:	c3                   	ret    
c00194b1:	8d 76 00             	lea    esi,[esi+0x0]

c00194b4 <fatWrapperIoctl>:
c00194b4:	53                   	push   ebx
c00194b5:	83 ec 28             	sub    esp,0x28
c00194b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00194bc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00194c0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194c4:	88 d0                	mov    al,dl
c00194c6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00194ca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00194cf:	83 f8 02             	cmp    eax,0x2
c00194d2:	75 34                	jne    c0019508 <fatWrapperIoctl+0x54>
c00194d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00194d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00194dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00194e1:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c00194e8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00194ee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00194f4:	89 c2                	mov    edx,eax
c00194f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00194fa:	66 89 10             	mov    WORD PTR [eax],dx
c00194fd:	b8 00 00 00 00       	mov    eax,0x0
c0019502:	e9 c5 00 00 00       	jmp    c00195cc <fatWrapperIoctl+0x118>
c0019507:	90                   	nop
c0019508:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001950d:	83 f8 01             	cmp    eax,0x1
c0019510:	75 6a                	jne    c001957c <fatWrapperIoctl+0xc8>
c0019512:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019516:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001951a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001951f:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c0019526:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001952c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019532:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019538:	89 c8                	mov    eax,ecx
c001953a:	89 da                	mov    edx,ebx
c001953c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019540:	c1 e0 0a             	shl    eax,0xa
c0019543:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019548:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c001954f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019555:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001955b:	89 cb                	mov    ebx,ecx
c001955d:	c1 fb 1f             	sar    ebx,0x1f
c0019560:	53                   	push   ebx
c0019561:	51                   	push   ecx
c0019562:	52                   	push   edx
c0019563:	50                   	push   eax
c0019564:	e8 b7 5b 00 00       	call   c001f120 <__udivdi3>
c0019569:	83 c4 10             	add    esp,0x10
c001956c:	89 c2                	mov    edx,eax
c001956e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019572:	89 10                	mov    DWORD PTR [eax],edx
c0019574:	b8 00 00 00 00       	mov    eax,0x0
c0019579:	eb 51                	jmp    c00195cc <fatWrapperIoctl+0x118>
c001957b:	90                   	nop
c001957c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019581:	85 c0                	test   eax,eax
c0019583:	75 07                	jne    c001958c <fatWrapperIoctl+0xd8>
c0019585:	b8 00 00 00 00       	mov    eax,0x0
c001958a:	eb 40                	jmp    c00195cc <fatWrapperIoctl+0x118>
c001958c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019591:	83 f8 03             	cmp    eax,0x3
c0019594:	75 1a                	jne    c00195b0 <fatWrapperIoctl+0xfc>
c0019596:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001959a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001959e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195a2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00195a8:	b8 00 00 00 00       	mov    eax,0x0
c00195ad:	eb 1d                	jmp    c00195cc <fatWrapperIoctl+0x118>
c00195af:	90                   	nop
c00195b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195b5:	83 f8 04             	cmp    eax,0x4
c00195b8:	75 0a                	jne    c00195c4 <fatWrapperIoctl+0x110>
c00195ba:	b8 00 00 00 00       	mov    eax,0x0
c00195bf:	eb 0b                	jmp    c00195cc <fatWrapperIoctl+0x118>
c00195c1:	8d 76 00             	lea    esi,[esi+0x0]
c00195c4:	b8 04 00 00 00       	mov    eax,0x4
c00195c9:	8d 76 00             	lea    esi,[esi+0x0]
c00195cc:	83 c4 28             	add    esp,0x28
c00195cf:	5b                   	pop    ebx
c00195d0:	c3                   	ret    
c00195d1:	90                   	nop
c00195d2:	66 90                	xchg   ax,ax

c00195d4 <FAT::FAT()>:
c00195d4:	83 ec 1c             	sub    esp,0x1c
c00195d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195db:	83 ec 0c             	sub    esp,0xc
c00195de:	50                   	push   eax
c00195df:	e8 6c 1e ff ff       	call   c000b450 <Filesystem::Filesystem()>
c00195e4:	83 c4 10             	add    esp,0x10
c00195e7:	ba c4 26 02 c0       	mov    edx,0xc00226c4
c00195ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195f0:	89 10                	mov    DWORD PTR [eax],edx
c00195f2:	c7 05 20 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a520,0x0
c00195fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019604:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019609:	7f 19                	jg     c0019624 <FAT::FAT()+0x50>
c001960b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001960f:	c7 04 85 40 a5 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5ac0],0xffffffff
c001961a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001961f:	eb e3                	jmp    c0019604 <FAT::FAT()+0x30>
c0019621:	8d 76 00             	lea    esi,[esi+0x0]
c0019624:	90                   	nop
c0019625:	83 c4 1c             	add    esp,0x1c
c0019628:	c3                   	ret    
c0019629:	90                   	nop
c001962a:	66 90                	xchg   ax,ax

c001962c <FAT::fixFilepath(char*)>:
c001962c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019630:	8a 00                	mov    al,BYTE PTR [eax]
c0019632:	0f be c0             	movsx  eax,al
c0019635:	83 f8 40             	cmp    eax,0x40
c0019638:	7e 2e                	jle    c0019668 <FAT::fixFilepath(char*)+0x3c>
c001963a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001963e:	8a 00                	mov    al,BYTE PTR [eax]
c0019640:	83 e8 41             	sub    eax,0x41
c0019643:	88 c2                	mov    dl,al
c0019645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019649:	88 10                	mov    BYTE PTR [eax],dl
c001964b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001964f:	8a 00                	mov    al,BYTE PTR [eax]
c0019651:	0f be c0             	movsx  eax,al
c0019654:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c001965b:	83 c0 30             	add    eax,0x30
c001965e:	88 c2                	mov    dl,al
c0019660:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019664:	88 10                	mov    BYTE PTR [eax],dl
c0019666:	66 90                	xchg   ax,ax
c0019668:	90                   	nop
c0019669:	c3                   	ret    
c001966a:	66 90                	xchg   ax,ax

c001966c <FAT::open(char const*, void**, FileOpenMode)>:
c001966c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019672:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001967a:	74 0c                	je     c0019688 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001967c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019684:	75 0e                	jne    c0019694 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019686:	66 90                	xchg   ax,ax
c0019688:	b8 04 00 00 00       	mov    eax,0x4
c001968d:	e9 46 01 00 00       	jmp    c00197d8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019692:	66 90                	xchg   ax,ax
c0019694:	83 ec 08             	sub    esp,0x8
c0019697:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001969e:	8d 44 24 14          	lea    eax,[esp+0x14]
c00196a2:	50                   	push   eax
c00196a3:	e8 a8 6f fe ff       	call   c0000650 <strcpy>
c00196a8:	83 c4 10             	add    esp,0x10
c00196ab:	83 ec 08             	sub    esp,0x8
c00196ae:	8d 44 24 10          	lea    eax,[esp+0x10]
c00196b2:	50                   	push   eax
c00196b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00196ba:	e8 6d ff ff ff       	call   c001962c <FAT::fixFilepath(char*)>
c00196bf:	83 c4 10             	add    esp,0x10
c00196c2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00196ca:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00196d1:	83 e0 01             	and    eax,0x1
c00196d4:	74 12                	je     c00196e8 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c00196d6:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00196dd:	83 c8 01             	or     eax,0x1
c00196e0:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00196e7:	90                   	nop
c00196e8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00196ef:	83 e0 04             	and    eax,0x4
c00196f2:	74 24                	je     c0019718 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c00196f4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00196fb:	83 c8 30             	or     eax,0x30
c00196fe:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019705:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001970c:	83 c8 02             	or     eax,0x2
c001970f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019716:	66 90                	xchg   ax,ax
c0019718:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001971f:	83 e0 02             	and    eax,0x2
c0019722:	74 14                	je     c0019738 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019724:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001972b:	83 c8 02             	or     eax,0x2
c001972e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019735:	8d 76 00             	lea    esi,[esi+0x0]
c0019738:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001973f:	83 e0 08             	and    eax,0x8
c0019742:	74 14                	je     c0019758 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019744:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001974b:	83 c8 04             	or     eax,0x4
c001974e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019755:	8d 76 00             	lea    esi,[esi+0x0]
c0019758:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001975f:	83 e0 10             	and    eax,0x10
c0019762:	74 14                	je     c0019778 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019764:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001976b:	83 c8 08             	or     eax,0x8
c001976e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019775:	8d 76 00             	lea    esi,[esi+0x0]
c0019778:	83 ec 0c             	sub    esp,0xc
c001977b:	68 28 02 00 00       	push   0x228
c0019780:	e8 4e e3 fe ff       	call   c0007ad3 <malloc>
c0019785:	83 c4 10             	add    esp,0x10
c0019788:	89 c2                	mov    edx,eax
c001978a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019791:	89 10                	mov    DWORD PTR [eax],edx
c0019793:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001979b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00197a4:	83 ec 04             	sub    esp,0x4
c00197a7:	52                   	push   edx
c00197a8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00197ac:	52                   	push   edx
c00197ad:	50                   	push   eax
c00197ae:	e8 ed a4 fe ff       	call   c0003ca0 <f_open>
c00197b3:	83 c4 10             	add    esp,0x10
c00197b6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00197bd:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00197c5:	74 09                	je     c00197d0 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c00197c7:	b8 01 00 00 00       	mov    eax,0x1
c00197cc:	eb 0a                	jmp    c00197d8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00197ce:	66 90                	xchg   ax,ax
c00197d0:	b8 00 00 00 00       	mov    eax,0x0
c00197d5:	8d 76 00             	lea    esi,[esi+0x0]
c00197d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00197de:	c3                   	ret    
c00197df:	90                   	nop

c00197e0 <FAT::openDir(char const*, void**)>:
c00197e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00197ee:	74 0c                	je     c00197fc <FAT::openDir(char const*, void**)+0x1c>
c00197f0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00197f8:	75 0e                	jne    c0019808 <FAT::openDir(char const*, void**)+0x28>
c00197fa:	66 90                	xchg   ax,ax
c00197fc:	b8 04 00 00 00       	mov    eax,0x4
c0019801:	e9 82 00 00 00       	jmp    c0019888 <FAT::openDir(char const*, void**)+0xa8>
c0019806:	66 90                	xchg   ax,ax
c0019808:	83 ec 08             	sub    esp,0x8
c001980b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019812:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019816:	50                   	push   eax
c0019817:	e8 34 6e fe ff       	call   c0000650 <strcpy>
c001981c:	83 c4 10             	add    esp,0x10
c001981f:	83 ec 08             	sub    esp,0x8
c0019822:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019826:	50                   	push   eax
c0019827:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001982e:	e8 f9 fd ff ff       	call   c001962c <FAT::fixFilepath(char*)>
c0019833:	83 c4 10             	add    esp,0x10
c0019836:	83 ec 0c             	sub    esp,0xc
c0019839:	6a 30                	push   0x30
c001983b:	e8 93 e2 fe ff       	call   c0007ad3 <malloc>
c0019840:	83 c4 10             	add    esp,0x10
c0019843:	89 c2                	mov    edx,eax
c0019845:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001984c:	89 10                	mov    DWORD PTR [eax],edx
c001984e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019855:	8b 00                	mov    eax,DWORD PTR [eax]
c0019857:	83 ec 08             	sub    esp,0x8
c001985a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001985e:	52                   	push   edx
c001985f:	50                   	push   eax
c0019860:	e8 ca ad fe ff       	call   c000462f <f_opendir>
c0019865:	83 c4 10             	add    esp,0x10
c0019868:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001986f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019877:	74 07                	je     c0019880 <FAT::openDir(char const*, void**)+0xa0>
c0019879:	b8 01 00 00 00       	mov    eax,0x1
c001987e:	eb 08                	jmp    c0019888 <FAT::openDir(char const*, void**)+0xa8>
c0019880:	b8 00 00 00 00       	mov    eax,0x0
c0019885:	8d 76 00             	lea    esi,[esi+0x0]
c0019888:	81 c4 1c 01 00 00    	add    esp,0x11c
c001988e:	c3                   	ret    
c001988f:	90                   	nop

c0019890 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019890:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019896:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001989e:	75 0c                	jne    c00198ac <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00198a0:	b8 04 00 00 00       	mov    eax,0x4
c00198a5:	e9 d6 00 00 00       	jmp    c0019980 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00198aa:	66 90                	xchg   ax,ax
c00198ac:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00198b4:	75 0a                	jne    c00198c0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00198b6:	b8 04 00 00 00       	mov    eax,0x4
c00198bb:	e9 c0 00 00 00       	jmp    c0019980 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00198c0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00198c8:	75 0a                	jne    c00198d4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00198ca:	b8 04 00 00 00       	mov    eax,0x4
c00198cf:	e9 ac 00 00 00       	jmp    c0019980 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00198d4:	83 ec 08             	sub    esp,0x8
c00198d7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00198de:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00198e5:	50                   	push   eax
c00198e6:	e8 65 6d fe ff       	call   c0000650 <strcpy>
c00198eb:	83 c4 10             	add    esp,0x10
c00198ee:	83 ec 08             	sub    esp,0x8
c00198f1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00198f8:	50                   	push   eax
c00198f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019900:	e8 27 fd ff ff       	call   c001962c <FAT::fixFilepath(char*)>
c0019905:	83 c4 10             	add    esp,0x10
c0019908:	83 ec 08             	sub    esp,0x8
c001990b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001990f:	50                   	push   eax
c0019910:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019917:	50                   	push   eax
c0019918:	e8 91 ae fe ff       	call   c00047ae <f_stat>
c001991d:	83 c4 10             	add    esp,0x10
c0019920:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019927:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001992e:	85 c0                	test   eax,eax
c0019930:	74 0a                	je     c001993c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019932:	83 f8 04             	cmp    eax,0x4
c0019935:	74 39                	je     c0019970 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019937:	eb 3f                	jmp    c0019978 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019939:	8d 76 00             	lea    esi,[esi+0x0]
c001993c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019940:	0f b6 c0             	movzx  eax,al
c0019943:	83 e0 10             	and    eax,0x10
c0019946:	0f 95 c2             	setne  dl
c0019949:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019950:	88 10                	mov    BYTE PTR [eax],dl
c0019952:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019956:	ba 00 00 00 00       	mov    edx,0x0
c001995b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019962:	89 01                	mov    DWORD PTR [ecx],eax
c0019964:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019967:	b8 00 00 00 00       	mov    eax,0x0
c001996c:	eb 12                	jmp    c0019980 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001996e:	66 90                	xchg   ax,ax
c0019970:	b8 02 00 00 00       	mov    eax,0x2
c0019975:	eb 09                	jmp    c0019980 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019977:	90                   	nop
c0019978:	b8 01 00 00 00       	mov    eax,0x1
c001997d:	8d 76 00             	lea    esi,[esi+0x0]
c0019980:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019986:	c3                   	ret    
c0019987:	90                   	nop

c0019988 <FAT::unlink(char const*)>:
c0019988:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001998e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019996:	75 08                	jne    c00199a0 <FAT::unlink(char const*)+0x18>
c0019998:	b8 04 00 00 00       	mov    eax,0x4
c001999d:	eb 61                	jmp    c0019a00 <FAT::unlink(char const*)+0x78>
c001999f:	90                   	nop
c00199a0:	83 ec 08             	sub    esp,0x8
c00199a3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199ae:	50                   	push   eax
c00199af:	e8 9c 6c fe ff       	call   c0000650 <strcpy>
c00199b4:	83 c4 10             	add    esp,0x10
c00199b7:	83 ec 08             	sub    esp,0x8
c00199ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199be:	50                   	push   eax
c00199bf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199c6:	e8 61 fc ff ff       	call   c001962c <FAT::fixFilepath(char*)>
c00199cb:	83 c4 10             	add    esp,0x10
c00199ce:	83 ec 0c             	sub    esp,0xc
c00199d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199d5:	50                   	push   eax
c00199d6:	e8 45 b0 fe ff       	call   c0004a20 <f_unlink>
c00199db:	83 c4 10             	add    esp,0x10
c00199de:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00199e5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00199ec:	85 c0                	test   eax,eax
c00199ee:	75 08                	jne    c00199f8 <FAT::unlink(char const*)+0x70>
c00199f0:	b8 00 00 00 00       	mov    eax,0x0
c00199f5:	eb 09                	jmp    c0019a00 <FAT::unlink(char const*)+0x78>
c00199f7:	90                   	nop
c00199f8:	b8 01 00 00 00       	mov    eax,0x1
c00199fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019a00:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a06:	c3                   	ret    
c0019a07:	90                   	nop

c0019a08 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019a08:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019a0e:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019a15:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019a1c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a20:	88 d0                	mov    al,dl
c0019a22:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a26:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019a2e:	75 0c                	jne    c0019a3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019a30:	b8 04 00 00 00       	mov    eax,0x4
c0019a35:	e9 7e 01 00 00       	jmp    c0019bb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019a3a:	66 90                	xchg   ax,ax
c0019a3c:	83 ec 08             	sub    esp,0x8
c0019a3f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019a46:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019a4a:	50                   	push   eax
c0019a4b:	e8 00 6c fe ff       	call   c0000650 <strcpy>
c0019a50:	83 c4 10             	add    esp,0x10
c0019a53:	83 ec 08             	sub    esp,0x8
c0019a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019a5a:	50                   	push   eax
c0019a5b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019a62:	e8 c5 fb ff ff       	call   c001962c <FAT::fixFilepath(char*)>
c0019a67:	83 c4 10             	add    esp,0x10
c0019a6a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019a72:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019a7a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019a7f:	83 e0 01             	and    eax,0x1
c0019a82:	74 14                	je     c0019a98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019a84:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019a8b:	83 c8 01             	or     eax,0x1
c0019a8e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019a95:	8d 76 00             	lea    esi,[esi+0x0]
c0019a98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019a9d:	83 e0 02             	and    eax,0x2
c0019aa0:	74 12                	je     c0019ab4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0019aa2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019aa9:	83 c8 20             	or     eax,0x20
c0019aac:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019ab3:	90                   	nop
c0019ab4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ab9:	83 e0 04             	and    eax,0x4
c0019abc:	74 12                	je     c0019ad0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019abe:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019ac5:	83 c8 04             	or     eax,0x4
c0019ac8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019acf:	90                   	nop
c0019ad0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ad5:	83 e0 08             	and    eax,0x8
c0019ad8:	74 12                	je     c0019aec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019ada:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019ae1:	83 c8 02             	or     eax,0x2
c0019ae4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019aeb:	90                   	nop
c0019aec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019af1:	83 e0 01             	and    eax,0x1
c0019af4:	74 12                	je     c0019b08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019af6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019afd:	83 c8 01             	or     eax,0x1
c0019b00:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b07:	90                   	nop
c0019b08:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b0d:	83 e0 02             	and    eax,0x2
c0019b10:	74 12                	je     c0019b24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019b12:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b19:	83 c8 20             	or     eax,0x20
c0019b1c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b23:	90                   	nop
c0019b24:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b29:	83 e0 04             	and    eax,0x4
c0019b2c:	74 12                	je     c0019b40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019b2e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b35:	83 c8 04             	or     eax,0x4
c0019b38:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b3f:	90                   	nop
c0019b40:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b45:	83 e0 08             	and    eax,0x8
c0019b48:	74 12                	je     c0019b5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0019b4a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b51:	83 c8 02             	or     eax,0x2
c0019b54:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b5b:	90                   	nop
c0019b5c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019b63:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b6a:	09 d0                	or     eax,edx
c0019b6c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b73:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019b7b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019b83:	83 ec 04             	sub    esp,0x4
c0019b86:	52                   	push   edx
c0019b87:	50                   	push   eax
c0019b88:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b8c:	50                   	push   eax
c0019b8d:	e8 01 b3 fe ff       	call   c0004e93 <f_chmod>
c0019b92:	83 c4 10             	add    esp,0x10
c0019b95:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019b9c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019ba3:	85 c0                	test   eax,eax
c0019ba5:	75 09                	jne    c0019bb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019ba7:	b8 00 00 00 00       	mov    eax,0x0
c0019bac:	eb 0a                	jmp    c0019bb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019bae:	66 90                	xchg   ax,ax
c0019bb0:	b8 01 00 00 00       	mov    eax,0x1
c0019bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019bb8:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019bbe:	c3                   	ret    
c0019bbf:	90                   	nop

c0019bc0 <FAT::rename(char const*, char const*)>:
c0019bc0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019bc6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019bce:	74 0c                	je     c0019bdc <FAT::rename(char const*, char const*)+0x1c>
c0019bd0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019bd8:	75 0e                	jne    c0019be8 <FAT::rename(char const*, char const*)+0x28>
c0019bda:	66 90                	xchg   ax,ax
c0019bdc:	b8 04 00 00 00       	mov    eax,0x4
c0019be1:	e9 9e 00 00 00       	jmp    c0019c84 <FAT::rename(char const*, char const*)+0xc4>
c0019be6:	66 90                	xchg   ax,ax
c0019be8:	83 ec 08             	sub    esp,0x8
c0019beb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019bf2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019bf9:	50                   	push   eax
c0019bfa:	e8 51 6a fe ff       	call   c0000650 <strcpy>
c0019bff:	83 c4 10             	add    esp,0x10
c0019c02:	83 ec 08             	sub    esp,0x8
c0019c05:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019c0c:	50                   	push   eax
c0019c0d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c14:	e8 13 fa ff ff       	call   c001962c <FAT::fixFilepath(char*)>
c0019c19:	83 c4 10             	add    esp,0x10
c0019c1c:	83 ec 08             	sub    esp,0x8
c0019c1f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019c26:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c2a:	50                   	push   eax
c0019c2b:	e8 20 6a fe ff       	call   c0000650 <strcpy>
c0019c30:	83 c4 10             	add    esp,0x10
c0019c33:	83 ec 08             	sub    esp,0x8
c0019c36:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c3a:	50                   	push   eax
c0019c3b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c42:	e8 e5 f9 ff ff       	call   c001962c <FAT::fixFilepath(char*)>
c0019c47:	83 c4 10             	add    esp,0x10
c0019c4a:	83 ec 08             	sub    esp,0x8
c0019c4d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c51:	50                   	push   eax
c0019c52:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c59:	50                   	push   eax
c0019c5a:	e8 7c b0 fe ff       	call   c0004cdb <f_rename>
c0019c5f:	83 c4 10             	add    esp,0x10
c0019c62:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019c69:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019c70:	85 c0                	test   eax,eax
c0019c72:	75 08                	jne    c0019c7c <FAT::rename(char const*, char const*)+0xbc>
c0019c74:	b8 00 00 00 00       	mov    eax,0x0
c0019c79:	eb 09                	jmp    c0019c84 <FAT::rename(char const*, char const*)+0xc4>
c0019c7b:	90                   	nop
c0019c7c:	b8 01 00 00 00       	mov    eax,0x1
c0019c81:	8d 76 00             	lea    esi,[esi+0x0]
c0019c84:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019c8a:	c3                   	ret    
c0019c8b:	90                   	nop

c0019c8c <FAT::mkdir(char const*)>:
c0019c8c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c92:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c9a:	75 08                	jne    c0019ca4 <FAT::mkdir(char const*)+0x18>
c0019c9c:	b8 04 00 00 00       	mov    eax,0x4
c0019ca1:	eb 61                	jmp    c0019d04 <FAT::mkdir(char const*)+0x78>
c0019ca3:	90                   	nop
c0019ca4:	83 ec 08             	sub    esp,0x8
c0019ca7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cae:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019cb2:	50                   	push   eax
c0019cb3:	e8 98 69 fe ff       	call   c0000650 <strcpy>
c0019cb8:	83 c4 10             	add    esp,0x10
c0019cbb:	83 ec 08             	sub    esp,0x8
c0019cbe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cc2:	50                   	push   eax
c0019cc3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cca:	e8 5d f9 ff ff       	call   c001962c <FAT::fixFilepath(char*)>
c0019ccf:	83 c4 10             	add    esp,0x10
c0019cd2:	83 ec 0c             	sub    esp,0xc
c0019cd5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019cd9:	50                   	push   eax
c0019cda:	e8 61 ae fe ff       	call   c0004b40 <f_mkdir>
c0019cdf:	83 c4 10             	add    esp,0x10
c0019ce2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019ce9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019cf0:	85 c0                	test   eax,eax
c0019cf2:	75 08                	jne    c0019cfc <FAT::mkdir(char const*)+0x70>
c0019cf4:	b8 00 00 00 00       	mov    eax,0x0
c0019cf9:	eb 09                	jmp    c0019d04 <FAT::mkdir(char const*)+0x78>
c0019cfb:	90                   	nop
c0019cfc:	b8 01 00 00 00       	mov    eax,0x1
c0019d01:	8d 76 00             	lea    esi,[esi+0x0]
c0019d04:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d0a:	c3                   	ret    
c0019d0b:	90                   	nop

c0019d0c <FAT::exists(char const*)>:
c0019d0c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019d12:	83 ec 08             	sub    esp,0x8
c0019d15:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d1c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d20:	50                   	push   eax
c0019d21:	e8 2a 69 fe ff       	call   c0000650 <strcpy>
c0019d26:	83 c4 10             	add    esp,0x10
c0019d29:	83 ec 08             	sub    esp,0x8
c0019d2c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019d30:	50                   	push   eax
c0019d31:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d38:	e8 ef f8 ff ff       	call   c001962c <FAT::fixFilepath(char*)>
c0019d3d:	83 c4 10             	add    esp,0x10
c0019d40:	83 ec 08             	sub    esp,0x8
c0019d43:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019d4a:	50                   	push   eax
c0019d4b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d4f:	50                   	push   eax
c0019d50:	e8 59 aa fe ff       	call   c00047ae <f_stat>
c0019d55:	83 c4 10             	add    esp,0x10
c0019d58:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019d5f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019d66:	85 c0                	test   eax,eax
c0019d68:	75 06                	jne    c0019d70 <FAT::exists(char const*)+0x64>
c0019d6a:	b0 01                	mov    al,0x1
c0019d6c:	eb 06                	jmp    c0019d74 <FAT::exists(char const*)+0x68>
c0019d6e:	66 90                	xchg   ax,ax
c0019d70:	b0 00                	mov    al,0x0
c0019d72:	66 90                	xchg   ax,ax
c0019d74:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019d7a:	c3                   	ret    
c0019d7b:	90                   	nop

c0019d7c <isoReadDiscSectorHelper>:
c0019d7c:	83 ec 2c             	sub    esp,0x2c
c0019d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019d83:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019d87:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019d8c:	83 e8 41             	sub    eax,0x41
c0019d8f:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c0019d96:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d9a:	ba 00 00 00 00       	mov    edx,0x0
c0019d9f:	83 ec 0c             	sub    esp,0xc
c0019da2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019da6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019daa:	52                   	push   edx
c0019dab:	50                   	push   eax
c0019dac:	51                   	push   ecx
c0019dad:	e8 1c 3c ff ff       	call   c000d9ce <LogicalDisk::read(unsigned long long, int, void*)>
c0019db2:	83 c4 20             	add    esp,0x20
c0019db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019db9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019dbe:	74 0c                	je     c0019dcc <isoReadDiscSectorHelper+0x50>
c0019dc0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dc4:	c1 e0 0b             	shl    eax,0xb
c0019dc7:	eb 0b                	jmp    c0019dd4 <isoReadDiscSectorHelper+0x58>
c0019dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0019dcc:	b8 00 00 00 00       	mov    eax,0x0
c0019dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0019dd4:	83 c4 2c             	add    esp,0x2c
c0019dd7:	c3                   	ret    

c0019dd8 <iso_kprintf>:
c0019dd8:	83 ec 0c             	sub    esp,0xc
c0019ddb:	83 ec 08             	sub    esp,0x8
c0019dde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019de2:	68 72 24 02 c0       	push   0xc0022472
c0019de7:	e8 1e 0b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019dec:	83 c4 10             	add    esp,0x10
c0019def:	90                   	nop
c0019df0:	83 c4 0c             	add    esp,0xc
c0019df3:	c3                   	ret    

c0019df4 <iso_kprintfd>:
c0019df4:	83 ec 0c             	sub    esp,0xc
c0019df7:	83 ec 08             	sub    esp,0x8
c0019dfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019dfe:	68 fa 0c 02 c0       	push   0xc0020cfa
c0019e03:	e8 02 0b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019e08:	83 c4 10             	add    esp,0x10
c0019e0b:	90                   	nop
c0019e0c:	83 c4 0c             	add    esp,0xc
c0019e0f:	c3                   	ret    

c0019e10 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019e10:	b8 08 00 00 00       	mov    eax,0x8
c0019e15:	c3                   	ret    

c0019e16 <ISO9660::truncate(void*, unsigned long long)>:
c0019e16:	b8 01 00 00 00       	mov    eax,0x1
c0019e1b:	c3                   	ret    

c0019e1c <ISO9660::getName()>:
c0019e1c:	b8 28 27 02 c0       	mov    eax,0xc0022728
c0019e21:	c3                   	ret    

c0019e22 <ISO9660::closeDir(void*)>:
c0019e22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e26:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e28:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019e2b:	90                   	nop

c0019e2c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019e2c:	b8 01 00 00 00       	mov    eax,0x1
c0019e31:	c3                   	ret    

c0019e32 <ISO9660::unlink(char const*)>:
c0019e32:	b8 01 00 00 00       	mov    eax,0x1
c0019e37:	c3                   	ret    

c0019e38 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019e38:	b8 03 00 00 00       	mov    eax,0x3
c0019e3d:	c3                   	ret    

c0019e3e <ISO9660::rename(char const*, char const*)>:
c0019e3e:	b8 01 00 00 00       	mov    eax,0x1
c0019e43:	c3                   	ret    

c0019e44 <ISO9660::mkdir(char const*)>:
c0019e44:	b8 01 00 00 00       	mov    eax,0x1
c0019e49:	c3                   	ret    

c0019e4a <ISO9660::~ISO9660()>:
c0019e4a:	83 ec 0c             	sub    esp,0xc
c0019e4d:	ba 68 28 02 c0       	mov    edx,0xc0022868
c0019e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e56:	89 10                	mov    DWORD PTR [eax],edx
c0019e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e5c:	83 ec 0c             	sub    esp,0xc
c0019e5f:	50                   	push   eax
c0019e60:	e8 0f 16 ff ff       	call   c000b474 <Filesystem::~Filesystem()>
c0019e65:	83 c4 10             	add    esp,0x10
c0019e68:	90                   	nop
c0019e69:	83 c4 0c             	add    esp,0xc
c0019e6c:	c3                   	ret    
c0019e6d:	90                   	nop

c0019e6e <ISO9660::~ISO9660()>:
c0019e6e:	83 ec 0c             	sub    esp,0xc
c0019e71:	83 ec 0c             	sub    esp,0xc
c0019e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e78:	e8 cd ff ff ff       	call   c0019e4a <ISO9660::~ISO9660()>
c0019e7d:	83 c4 10             	add    esp,0x10
c0019e80:	83 ec 08             	sub    esp,0x8
c0019e83:	6a 08                	push   0x8
c0019e85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e89:	e8 7e 09 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0019e8e:	83 c4 10             	add    esp,0x10
c0019e91:	83 c4 0c             	add    esp,0xc
c0019e94:	c3                   	ret    
c0019e95:	90                   	nop

c0019e96 <ISO9660::exists(char const*)>:
c0019e96:	83 ec 18             	sub    esp,0x18
c0019e99:	68 43 27 02 c0       	push   0xc0022743
c0019e9e:	e8 ba 72 ff ff       	call   c001115d <KePanic(char const*)>
c0019ea3:	31 c0                	xor    eax,eax
c0019ea5:	83 c4 1c             	add    esp,0x1c
c0019ea8:	c3                   	ret    
c0019ea9:	90                   	nop

c0019eaa <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019eaa:	56                   	push   esi
c0019eab:	53                   	push   ebx
c0019eac:	53                   	push   ebx
c0019ead:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019eb1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019eb5:	85 db                	test   ebx,ebx
c0019eb7:	0f 84 ca 00 00 00    	je     c0019f87 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019ebd:	85 f6                	test   esi,esi
c0019ebf:	0f 84 c2 00 00 00    	je     c0019f87 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019ec5:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019eca:	b8 03 00 00 00       	mov    eax,0x3
c0019ecf:	0f 85 b7 00 00 00    	jne    c0019f8c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019ed5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019ed7:	38 0d 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,cl
c0019edd:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c0019ee4:	74 1b                	je     c0019f01 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019ee6:	85 c0                	test   eax,eax
c0019ee8:	74 10                	je     c0019efa <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019eea:	83 ec 0c             	sub    esp,0xc
c0019eed:	68 61 27 02 c0       	push   0xc0022761
c0019ef2:	e8 66 72 ff ff       	call   c001115d <KePanic(char const*)>
c0019ef7:	83 c4 10             	add    esp,0x10
c0019efa:	8a 03                	mov    al,BYTE PTR [ebx]
c0019efc:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c0019f01:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f04:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c0019f0b:	85 c0                	test   eax,eax
c0019f0d:	74 09                	je     c0019f18 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019f0f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019f16:	74 48                	je     c0019f60 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019f18:	83 ec 0c             	sub    esp,0xc
c0019f1b:	68 71 27 02 c0       	push   0xc0022771
c0019f20:	e8 e5 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f25:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f28:	83 c4 10             	add    esp,0x10
c0019f2b:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c0019f32:	85 c0                	test   eax,eax
c0019f34:	74 17                	je     c0019f4d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019f36:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019f3d:	83 ec 0c             	sub    esp,0xc
c0019f40:	68 91 27 02 c0       	push   0xc0022791
c0019f45:	e8 c0 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f4a:	83 c4 10             	add    esp,0x10
c0019f4d:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c0019f54:	83 ec 0c             	sub    esp,0xc
c0019f57:	50                   	push   eax
c0019f58:	e8 0a cb fe ff       	call   c0006a67 <init_percd>
c0019f5d:	83 c4 10             	add    esp,0x10
c0019f60:	51                   	push   ecx
c0019f61:	83 c3 03             	add    ebx,0x3
c0019f64:	51                   	push   ecx
c0019f65:	6a 00                	push   0x0
c0019f67:	53                   	push   ebx
c0019f68:	e8 bd c5 fe ff       	call   c000652a <iso_open>
c0019f6d:	83 c4 10             	add    esp,0x10
c0019f70:	89 c2                	mov    edx,eax
c0019f72:	b8 01 00 00 00       	mov    eax,0x1
c0019f77:	83 fa ff             	cmp    edx,0xffffffff
c0019f7a:	74 10                	je     c0019f8c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019f7c:	83 c2 32             	add    edx,0x32
c0019f7f:	31 c0                	xor    eax,eax
c0019f81:	01 d2                	add    edx,edx
c0019f83:	89 16                	mov    DWORD PTR [esi],edx
c0019f85:	eb 05                	jmp    c0019f8c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019f87:	b8 04 00 00 00       	mov    eax,0x4
c0019f8c:	5a                   	pop    edx
c0019f8d:	5b                   	pop    ebx
c0019f8e:	5e                   	pop    esi
c0019f8f:	c3                   	ret    

c0019f90 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019f90:	53                   	push   ebx
c0019f91:	83 ec 08             	sub    esp,0x8
c0019f94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f98:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019f9c:	85 c0                	test   eax,eax
c0019f9e:	74 2d                	je     c0019fcd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019fa0:	85 db                	test   ebx,ebx
c0019fa2:	74 29                	je     c0019fcd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019fa4:	52                   	push   edx
c0019fa5:	b9 02 00 00 00       	mov    ecx,0x2
c0019faa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fae:	99                   	cdq    
c0019faf:	f7 f9                	idiv   ecx
c0019fb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019fb5:	83 e8 32             	sub    eax,0x32
c0019fb8:	50                   	push   eax
c0019fb9:	e8 14 c6 fe ff       	call   c00065d2 <iso_read>
c0019fbe:	83 c4 10             	add    esp,0x10
c0019fc1:	89 03                	mov    DWORD PTR [ebx],eax
c0019fc3:	09 d0                	or     eax,edx
c0019fc5:	0f 94 c0             	sete   al
c0019fc8:	0f b6 c0             	movzx  eax,al
c0019fcb:	eb 05                	jmp    c0019fd2 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0019fcd:	b8 04 00 00 00       	mov    eax,0x4
c0019fd2:	83 c4 08             	add    esp,0x8
c0019fd5:	5b                   	pop    ebx
c0019fd6:	c3                   	ret    
c0019fd7:	90                   	nop

c0019fd8 <ISO9660::seek(void*, unsigned long long)>:
c0019fd8:	57                   	push   edi
c0019fd9:	b8 04 00 00 00       	mov    eax,0x4
c0019fde:	56                   	push   esi
c0019fdf:	51                   	push   ecx
c0019fe0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019fe4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019fe8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019fec:	85 d2                	test   edx,edx
c0019fee:	74 26                	je     c001a016 <ISO9660::seek(void*, unsigned long long)+0x3e>
c0019ff0:	89 d0                	mov    eax,edx
c0019ff2:	b9 02 00 00 00       	mov    ecx,0x2
c0019ff7:	6a 00                	push   0x0
c0019ff9:	99                   	cdq    
c0019ffa:	f7 f9                	idiv   ecx
c0019ffc:	57                   	push   edi
c0019ffd:	56                   	push   esi
c0019ffe:	83 e8 32             	sub    eax,0x32
c001a001:	50                   	push   eax
c001a002:	e8 e1 c6 fe ff       	call   c00066e8 <iso_seek>
c001a007:	83 c4 10             	add    esp,0x10
c001a00a:	31 f0                	xor    eax,esi
c001a00c:	31 fa                	xor    edx,edi
c001a00e:	09 d0                	or     eax,edx
c001a010:	0f 95 c0             	setne  al
c001a013:	0f b6 c0             	movzx  eax,al
c001a016:	5a                   	pop    edx
c001a017:	5e                   	pop    esi
c001a018:	5f                   	pop    edi
c001a019:	c3                   	ret    

c001a01a <ISO9660::tell(void*, unsigned long long*)>:
c001a01a:	53                   	push   ebx
c001a01b:	83 ec 08             	sub    esp,0x8
c001a01e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a022:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a026:	85 c0                	test   eax,eax
c001a028:	74 24                	je     c001a04e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a02a:	85 db                	test   ebx,ebx
c001a02c:	74 20                	je     c001a04e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a02e:	b9 02 00 00 00       	mov    ecx,0x2
c001a033:	99                   	cdq    
c001a034:	f7 f9                	idiv   ecx
c001a036:	83 ec 0c             	sub    esp,0xc
c001a039:	83 e8 32             	sub    eax,0x32
c001a03c:	50                   	push   eax
c001a03d:	e8 2a c7 fe ff       	call   c000676c <iso_tell>
c001a042:	83 c4 10             	add    esp,0x10
c001a045:	89 03                	mov    DWORD PTR [ebx],eax
c001a047:	31 c0                	xor    eax,eax
c001a049:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a04c:	eb 05                	jmp    c001a053 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a04e:	b8 04 00 00 00       	mov    eax,0x4
c001a053:	83 c4 08             	add    esp,0x8
c001a056:	5b                   	pop    ebx
c001a057:	c3                   	ret    

c001a058 <ISO9660::stat(void*, unsigned long long*)>:
c001a058:	56                   	push   esi
c001a059:	53                   	push   ebx
c001a05a:	83 ec 10             	sub    esp,0x10
c001a05d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a061:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a065:	68 b5 27 02 c0       	push   0xc00227b5
c001a06a:	e8 9b 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a06f:	83 c4 10             	add    esp,0x10
c001a072:	85 db                	test   ebx,ebx
c001a074:	74 2a                	je     c001a0a0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a076:	85 f6                	test   esi,esi
c001a078:	74 26                	je     c001a0a0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a07a:	89 d8                	mov    eax,ebx
c001a07c:	b9 02 00 00 00       	mov    ecx,0x2
c001a081:	99                   	cdq    
c001a082:	83 ec 0c             	sub    esp,0xc
c001a085:	f7 f9                	idiv   ecx
c001a087:	83 e8 32             	sub    eax,0x32
c001a08a:	50                   	push   eax
c001a08b:	e8 0d c7 fe ff       	call   c000679d <iso_total>
c001a090:	83 c4 10             	add    esp,0x10
c001a093:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a09a:	89 06                	mov    DWORD PTR [esi],eax
c001a09c:	31 c0                	xor    eax,eax
c001a09e:	eb 05                	jmp    c001a0a5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a0a0:	b8 04 00 00 00       	mov    eax,0x4
c001a0a5:	5a                   	pop    edx
c001a0a6:	5b                   	pop    ebx
c001a0a7:	5e                   	pop    esi
c001a0a8:	c3                   	ret    
c001a0a9:	90                   	nop

c001a0aa <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a0aa:	55                   	push   ebp
c001a0ab:	57                   	push   edi
c001a0ac:	56                   	push   esi
c001a0ad:	53                   	push   ebx
c001a0ae:	83 ec 18             	sub    esp,0x18
c001a0b1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a0b5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a0b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a0bd:	68 bd 27 02 c0       	push   0xc00227bd
c001a0c2:	e8 43 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a0c7:	83 c4 10             	add    esp,0x10
c001a0ca:	85 ff                	test   edi,edi
c001a0cc:	0f 94 c0             	sete   al
c001a0cf:	85 f6                	test   esi,esi
c001a0d1:	0f 94 c2             	sete   dl
c001a0d4:	09 d0                	or     eax,edx
c001a0d6:	a8 01                	test   al,0x1
c001a0d8:	0f 85 dd 00 00 00    	jne    c001a1bb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a0de:	85 db                	test   ebx,ebx
c001a0e0:	0f 84 d5 00 00 00    	je     c001a1bb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a0e6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a0e9:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a0ef:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a0f6:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a0fd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a0ff:	38 0d 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,cl
c001a105:	74 1b                	je     c001a122 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a107:	85 c0                	test   eax,eax
c001a109:	74 10                	je     c001a11b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a10b:	83 ec 0c             	sub    esp,0xc
c001a10e:	68 61 27 02 c0       	push   0xc0022761
c001a113:	e8 45 70 ff ff       	call   c001115d <KePanic(char const*)>
c001a118:	83 c4 10             	add    esp,0x10
c001a11b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a11d:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c001a122:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a125:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a12c:	85 c0                	test   eax,eax
c001a12e:	74 09                	je     c001a139 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a130:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a137:	74 51                	je     c001a18a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a139:	83 ec 0c             	sub    esp,0xc
c001a13c:	68 c5 27 02 c0       	push   0xc00227c5
c001a141:	e8 c4 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a146:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a149:	83 c4 10             	add    esp,0x10
c001a14c:	83 3c 85 dc 93 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd6c24],0x0
c001a154:	74 21                	je     c001a177 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a156:	83 ec 0c             	sub    esp,0xc
c001a159:	68 e5 27 02 c0       	push   0xc00227e5
c001a15e:	e8 a7 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a163:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a166:	83 c4 10             	add    esp,0x10
c001a169:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a170:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a177:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a17e:	83 ec 0c             	sub    esp,0xc
c001a181:	50                   	push   eax
c001a182:	e8 e0 c8 fe ff       	call   c0006a67 <init_percd>
c001a187:	83 c4 10             	add    esp,0x10
c001a18a:	52                   	push   edx
c001a18b:	83 c3 03             	add    ebx,0x3
c001a18e:	52                   	push   edx
c001a18f:	6a 00                	push   0x0
c001a191:	53                   	push   ebx
c001a192:	e8 93 c3 fe ff       	call   c000652a <iso_open>
c001a197:	83 c4 10             	add    esp,0x10
c001a19a:	83 f8 ff             	cmp    eax,0xffffffff
c001a19d:	89 c5                	mov    ebp,eax
c001a19f:	75 21                	jne    c001a1c2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a1a1:	50                   	push   eax
c001a1a2:	50                   	push   eax
c001a1a3:	6a 01                	push   0x1
c001a1a5:	53                   	push   ebx
c001a1a6:	e8 7f c3 fe ff       	call   c000652a <iso_open>
c001a1ab:	83 c4 10             	add    esp,0x10
c001a1ae:	ba 02 00 00 00       	mov    edx,0x2
c001a1b3:	40                   	inc    eax
c001a1b4:	74 2b                	je     c001a1e1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a1b6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a1b9:	eb 24                	jmp    c001a1df <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a1bb:	ba 04 00 00 00       	mov    edx,0x4
c001a1c0:	eb 1f                	jmp    c001a1e1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a1c2:	83 ec 0c             	sub    esp,0xc
c001a1c5:	50                   	push   eax
c001a1c6:	e8 d2 c5 fe ff       	call   c000679d <iso_total>
c001a1cb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a1d2:	89 07                	mov    DWORD PTR [edi],eax
c001a1d4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a1d7:	e8 d8 c3 fe ff       	call   c00065b4 <iso_close>
c001a1dc:	83 c4 10             	add    esp,0x10
c001a1df:	31 d2                	xor    edx,edx
c001a1e1:	83 c4 0c             	add    esp,0xc
c001a1e4:	89 d0                	mov    eax,edx
c001a1e6:	5b                   	pop    ebx
c001a1e7:	5e                   	pop    esi
c001a1e8:	5f                   	pop    edi
c001a1e9:	5d                   	pop    ebp
c001a1ea:	c3                   	ret    
c001a1eb:	90                   	nop

c001a1ec <ISO9660::close(void*)>:
c001a1ec:	83 ec 0c             	sub    esp,0xc
c001a1ef:	b8 04 00 00 00       	mov    eax,0x4
c001a1f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a1f8:	85 d2                	test   edx,edx
c001a1fa:	74 1b                	je     c001a217 <ISO9660::close(void*)+0x2b>
c001a1fc:	89 d0                	mov    eax,edx
c001a1fe:	b9 02 00 00 00       	mov    ecx,0x2
c001a203:	99                   	cdq    
c001a204:	83 ec 0c             	sub    esp,0xc
c001a207:	f7 f9                	idiv   ecx
c001a209:	83 e8 32             	sub    eax,0x32
c001a20c:	50                   	push   eax
c001a20d:	e8 a2 c3 fe ff       	call   c00065b4 <iso_close>
c001a212:	83 c4 10             	add    esp,0x10
c001a215:	31 c0                	xor    eax,eax
c001a217:	83 c4 0c             	add    esp,0xc
c001a21a:	c3                   	ret    
c001a21b:	90                   	nop

c001a21c <ISO9660::openDir(char const*, void**)>:
c001a21c:	56                   	push   esi
c001a21d:	53                   	push   ebx
c001a21e:	50                   	push   eax
c001a21f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a223:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a227:	85 db                	test   ebx,ebx
c001a229:	0f 84 bd 00 00 00    	je     c001a2ec <ISO9660::openDir(char const*, void**)+0xd0>
c001a22f:	85 f6                	test   esi,esi
c001a231:	0f 84 b5 00 00 00    	je     c001a2ec <ISO9660::openDir(char const*, void**)+0xd0>
c001a237:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a239:	38 15 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,dl
c001a23f:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a246:	74 1b                	je     c001a263 <ISO9660::openDir(char const*, void**)+0x47>
c001a248:	85 c0                	test   eax,eax
c001a24a:	74 10                	je     c001a25c <ISO9660::openDir(char const*, void**)+0x40>
c001a24c:	83 ec 0c             	sub    esp,0xc
c001a24f:	68 61 27 02 c0       	push   0xc0022761
c001a254:	e8 04 6f ff ff       	call   c001115d <KePanic(char const*)>
c001a259:	83 c4 10             	add    esp,0x10
c001a25c:	8a 03                	mov    al,BYTE PTR [ebx]
c001a25e:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c001a263:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a266:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a26d:	85 c0                	test   eax,eax
c001a26f:	74 10                	je     c001a281 <ISO9660::openDir(char const*, void**)+0x65>
c001a271:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a278:	74 1a                	je     c001a294 <ISO9660::openDir(char const*, void**)+0x78>
c001a27a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a281:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a288:	83 ec 0c             	sub    esp,0xc
c001a28b:	50                   	push   eax
c001a28c:	e8 d6 c7 fe ff       	call   c0006a67 <init_percd>
c001a291:	83 c4 10             	add    esp,0x10
c001a294:	50                   	push   eax
c001a295:	83 c3 03             	add    ebx,0x3
c001a298:	50                   	push   eax
c001a299:	6a 01                	push   0x1
c001a29b:	53                   	push   ebx
c001a29c:	e8 89 c2 fe ff       	call   c000652a <iso_open>
c001a2a1:	83 c4 10             	add    esp,0x10
c001a2a4:	83 f8 ff             	cmp    eax,0xffffffff
c001a2a7:	89 c3                	mov    ebx,eax
c001a2a9:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a2ae:	75 1c                	jne    c001a2cc <ISO9660::openDir(char const*, void**)+0xb0>
c001a2b0:	53                   	push   ebx
c001a2b1:	53                   	push   ebx
c001a2b2:	68 09 28 02 c0       	push   0xc0022809
c001a2b7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a2bd:	e8 ea e7 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a2c2:	83 c4 10             	add    esp,0x10
c001a2c5:	b8 01 00 00 00       	mov    eax,0x1
c001a2ca:	eb 25                	jmp    c001a2f1 <ISO9660::openDir(char const*, void**)+0xd5>
c001a2cc:	51                   	push   ecx
c001a2cd:	01 db                	add    ebx,ebx
c001a2cf:	51                   	push   ecx
c001a2d0:	83 c3 65             	add    ebx,0x65
c001a2d3:	68 1c 28 02 c0       	push   0xc002281c
c001a2d8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a2de:	e8 c9 e7 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a2e3:	83 c4 10             	add    esp,0x10
c001a2e6:	31 c0                	xor    eax,eax
c001a2e8:	89 1e                	mov    DWORD PTR [esi],ebx
c001a2ea:	eb 05                	jmp    c001a2f1 <ISO9660::openDir(char const*, void**)+0xd5>
c001a2ec:	b8 04 00 00 00       	mov    eax,0x4
c001a2f1:	5a                   	pop    edx
c001a2f2:	5b                   	pop    ebx
c001a2f3:	5e                   	pop    esi
c001a2f4:	c3                   	ret    
c001a2f5:	90                   	nop

c001a2f6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a2f6:	55                   	push   ebp
c001a2f7:	57                   	push   edi
c001a2f8:	56                   	push   esi
c001a2f9:	53                   	push   ebx
c001a2fa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a300:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a307:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a30e:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a315:	85 db                	test   ebx,ebx
c001a317:	0f 84 e4 00 00 00    	je     c001a401 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a31d:	85 ed                	test   ebp,ebp
c001a31f:	0f 84 dc 00 00 00    	je     c001a401 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a325:	83 ec 0c             	sub    esp,0xc
c001a328:	68 2f 28 02 c0       	push   0xc002282f
c001a32d:	e8 d8 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a332:	89 d8                	mov    eax,ebx
c001a334:	b9 02 00 00 00       	mov    ecx,0x2
c001a339:	99                   	cdq    
c001a33a:	f7 f9                	idiv   ecx
c001a33c:	83 e8 32             	sub    eax,0x32
c001a33f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a342:	e8 a8 c4 fe ff       	call   c00067ef <iso_readdir>
c001a347:	83 c4 10             	add    esp,0x10
c001a34a:	85 c0                	test   eax,eax
c001a34c:	89 c3                	mov    ebx,eax
c001a34e:	75 38                	jne    c001a388 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a350:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a355:	53                   	push   ebx
c001a356:	53                   	push   ebx
c001a357:	68 3a 28 02 c0       	push   0xc002283a
c001a35c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a362:	e8 45 e7 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a367:	83 c4 0c             	add    esp,0xc
c001a36a:	68 10 01 00 00       	push   0x110
c001a36f:	6a 00                	push   0x0
c001a371:	57                   	push   edi
c001a372:	e8 79 61 fe ff       	call   c00004f0 <memset>
c001a377:	83 c4 10             	add    esp,0x10
c001a37a:	b8 01 00 00 00       	mov    eax,0x1
c001a37f:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a386:	eb 7e                	jmp    c001a406 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a388:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a38e:	8d 70 08             	lea    esi,[eax+0x8]
c001a391:	83 ec 0c             	sub    esp,0xc
c001a394:	56                   	push   esi
c001a395:	e8 e6 61 fe ff       	call   c0000580 <strlen>
c001a39a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a3a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a3a6:	83 c4 10             	add    esp,0x10
c001a3a9:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a3ad:	75 0a                	jne    c001a3b9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a3af:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a3b2:	b8 02 00 00 00       	mov    eax,0x2
c001a3b7:	74 05                	je     c001a3be <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a3b9:	b8 01 00 00 00       	mov    eax,0x1
c001a3be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3c2:	50                   	push   eax
c001a3c3:	50                   	push   eax
c001a3c4:	56                   	push   esi
c001a3c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a3c9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a3cd:	50                   	push   eax
c001a3ce:	e8 7d 62 fe ff       	call   c0000650 <strcpy>
c001a3d3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a3da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3dc:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a3e3:	5a                   	pop    edx
c001a3e4:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a3e9:	59                   	pop    ecx
c001a3ea:	68 4d 28 02 c0       	push   0xc002284d
c001a3ef:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a3f5:	e8 b2 e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a3fa:	83 c4 10             	add    esp,0x10
c001a3fd:	31 c0                	xor    eax,eax
c001a3ff:	eb 05                	jmp    c001a406 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a401:	b8 04 00 00 00       	mov    eax,0x4
c001a406:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a40c:	5b                   	pop    ebx
c001a40d:	5e                   	pop    esi
c001a40e:	5f                   	pop    edi
c001a40f:	5d                   	pop    ebp
c001a410:	c3                   	ret    

c001a411 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a411:	57                   	push   edi
c001a412:	56                   	push   esi
c001a413:	53                   	push   ebx
c001a414:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a418:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a41c:	39 35 24 a6 02 c0    	cmp    DWORD PTR ds:0xc002a624,esi
c001a422:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a426:	0f be cb             	movsx  ecx,bl
c001a429:	75 0b                	jne    c001a436 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a42b:	0f be 05 80 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023680
c001a432:	39 c8                	cmp    eax,ecx
c001a434:	74 47                	je     c001a47d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a436:	83 ec 0c             	sub    esp,0xc
c001a439:	31 d2                	xor    edx,edx
c001a43b:	68 40 a6 02 c0       	push   0xc002a640
c001a440:	6a 01                	push   0x1
c001a442:	52                   	push   edx
c001a443:	56                   	push   esi
c001a444:	ff 34 8d dc 93 02 c0 	push   DWORD PTR [ecx*4-0x3ffd6c24]
c001a44b:	e8 7e 35 ff ff       	call   c000d9ce <LogicalDisk::read(unsigned long long, int, void*)>
c001a450:	83 c4 20             	add    esp,0x20
c001a453:	85 c0                	test   eax,eax
c001a455:	75 0e                	jne    c001a465 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a457:	89 35 24 a6 02 c0    	mov    DWORD PTR ds:0xc002a624,esi
c001a45d:	88 1d 80 36 02 c0    	mov    BYTE PTR ds:0xc0023680,bl
c001a463:	eb 18                	jmp    c001a47d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a465:	50                   	push   eax
c001a466:	68 00 08 00 00       	push   0x800
c001a46b:	6a 00                	push   0x0
c001a46d:	57                   	push   edi
c001a46e:	e8 7d 60 fe ff       	call   c00004f0 <memset>
c001a473:	83 c4 10             	add    esp,0x10
c001a476:	b8 01 00 00 00       	mov    eax,0x1
c001a47b:	eb 0e                	jmp    c001a48b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a47d:	be 40 a6 02 c0       	mov    esi,0xc002a640
c001a482:	b9 00 08 00 00       	mov    ecx,0x800
c001a487:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a489:	31 c0                	xor    eax,eax
c001a48b:	5b                   	pop    ebx
c001a48c:	5e                   	pop    esi
c001a48d:	5f                   	pop    edi
c001a48e:	c3                   	ret    
c001a48f:	90                   	nop

c001a490 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a490:	53                   	push   ebx
c001a491:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a497:	c7 05 24 a6 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a624,0xdeadbeef
c001a4a1:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a4a8:	8d 58 41             	lea    ebx,[eax+0x41]
c001a4ab:	0f be db             	movsx  ebx,bl
c001a4ae:	53                   	push   ebx
c001a4af:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a4b3:	50                   	push   eax
c001a4b4:	6a 10                	push   0x10
c001a4b6:	e8 56 ff ff ff       	call   c001a411 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a4bb:	83 c4 10             	add    esp,0x10
c001a4be:	31 d2                	xor    edx,edx
c001a4c0:	85 c0                	test   eax,eax
c001a4c2:	75 33                	jne    c001a4f7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4c4:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a4c9:	75 2c                	jne    c001a4f7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4cb:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a4d0:	75 25                	jne    c001a4f7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4d2:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a4d7:	75 1e                	jne    c001a4f7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4d9:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a4de:	75 17                	jne    c001a4f7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4e0:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a4e5:	75 10                	jne    c001a4f7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4e7:	83 ec 0c             	sub    esp,0xc
c001a4ea:	53                   	push   ebx
c001a4eb:	e8 77 c5 fe ff       	call   c0006a67 <init_percd>
c001a4f0:	83 c4 10             	add    esp,0x10
c001a4f3:	40                   	inc    eax
c001a4f4:	0f 95 c2             	setne  dl
c001a4f7:	81 c4 08 08 00 00    	add    esp,0x808
c001a4fd:	88 d0                	mov    al,dl
c001a4ff:	5b                   	pop    ebx
c001a500:	c3                   	ret    
c001a501:	90                   	nop

c001a502 <ISO9660::ISO9660()>:
c001a502:	83 ec 0c             	sub    esp,0xc
c001a505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a509:	83 ec 0c             	sub    esp,0xc
c001a50c:	50                   	push   eax
c001a50d:	e8 3e 0f ff ff       	call   c000b450 <Filesystem::Filesystem()>
c001a512:	83 c4 10             	add    esp,0x10
c001a515:	ba 68 28 02 c0       	mov    edx,0xc0022868
c001a51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a51e:	89 10                	mov    DWORD PTR [eax],edx
c001a520:	e8 54 c6 fe ff       	call   c0006b79 <fs_iso9660_init>
c001a525:	90                   	nop
c001a526:	83 c4 0c             	add    esp,0xc
c001a529:	c3                   	ret    

c001a52a <SoundCard::beginPlayback()>:
c001a52a:	c7 44 24 04 cc 28 02 c0 	mov    DWORD PTR [esp+0x4],0xc00228cc
c001a532:	e9 26 6c ff ff       	jmp    c001115d <KePanic(char const*)>
c001a537:	90                   	nop

c001a538 <SoundCard::stopPlayback()>:
c001a538:	c7 44 24 04 cc 28 02 c0 	mov    DWORD PTR [esp+0x4],0xc00228cc
c001a540:	e9 18 6c ff ff       	jmp    c001115d <KePanic(char const*)>
c001a545:	90                   	nop

c001a546 <SoundCard::SoundCard(char const*)>:
c001a546:	83 ec 1c             	sub    esp,0x1c
c001a549:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a54d:	83 ec 08             	sub    esp,0x8
c001a550:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a554:	50                   	push   eax
c001a555:	e8 22 22 ff ff       	call   c000c77c <Device::Device(char const*)>
c001a55a:	83 c4 10             	add    esp,0x10
c001a55d:	ba 18 29 02 c0       	mov    edx,0xc0022918
c001a562:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a566:	89 10                	mov    DWORD PTR [eax],edx
c001a568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a56c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a577:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a581:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a585:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a58f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a593:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a59d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5a1:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a5ab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a5b3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a5b8:	7f 1a                	jg     c001a5d4 <SoundCard::SoundCard(char const*)+0x8e>
c001a5ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a5c2:	83 c2 54             	add    edx,0x54
c001a5c5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a5cd:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a5d2:	eb df                	jmp    c001a5b3 <SoundCard::SoundCard(char const*)+0x6d>
c001a5d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5d8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a5df:	90                   	nop
c001a5e0:	83 c4 1c             	add    esp,0x1c
c001a5e3:	c3                   	ret    

c001a5e4 <SoundCard::~SoundCard()>:
c001a5e4:	83 ec 0c             	sub    esp,0xc
c001a5e7:	ba 18 29 02 c0       	mov    edx,0xc0022918
c001a5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5f0:	89 10                	mov    DWORD PTR [eax],edx
c001a5f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5f6:	83 ec 0c             	sub    esp,0xc
c001a5f9:	50                   	push   eax
c001a5fa:	e8 e7 1e ff ff       	call   c000c4e6 <Device::~Device()>
c001a5ff:	83 c4 10             	add    esp,0x10
c001a602:	90                   	nop
c001a603:	83 c4 0c             	add    esp,0xc
c001a606:	c3                   	ret    
c001a607:	90                   	nop

c001a608 <SoundCard::~SoundCard()>:
c001a608:	83 ec 0c             	sub    esp,0xc
c001a60b:	83 ec 0c             	sub    esp,0xc
c001a60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a612:	e8 cd ff ff ff       	call   c001a5e4 <SoundCard::~SoundCard()>
c001a617:	83 c4 10             	add    esp,0x10
c001a61a:	83 ec 08             	sub    esp,0x8
c001a61d:	68 e8 01 00 00       	push   0x1e8
c001a622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a626:	e8 e1 01 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a62b:	83 c4 10             	add    esp,0x10
c001a62e:	83 c4 0c             	add    esp,0xc
c001a631:	c3                   	ret    

c001a632 <SoundCard::configureRates(int, int, int)>:
c001a632:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a636:	31 c0                	xor    eax,eax
c001a638:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a63f:	75 20                	jne    c001a661 <SoundCard::configureRates(int, int, int)+0x2f>
c001a641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a645:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a64b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a64f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a659:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a65f:	b0 01                	mov    al,0x1
c001a661:	c3                   	ret    

c001a662 <SoundCard::getSamples16(int, short*)>:
c001a662:	55                   	push   ebp
c001a663:	57                   	push   edi
c001a664:	31 ff                	xor    edi,edi
c001a666:	56                   	push   esi
c001a667:	53                   	push   ebx
c001a668:	31 db                	xor    ebx,ebx
c001a66a:	83 ec 10             	sub    esp,0x10
c001a66d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a671:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a675:	8d 04 36             	lea    eax,[esi+esi*1]
c001a678:	50                   	push   eax
c001a679:	6a 00                	push   0x0
c001a67b:	55                   	push   ebp
c001a67c:	e8 6f 5e fe ff       	call   c00004f0 <memset>
c001a681:	83 c4 10             	add    esp,0x10
c001a684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a688:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a68f:	85 c0                	test   eax,eax
c001a691:	74 1a                	je     c001a6ad <SoundCard::getSamples16(int, short*)+0x4b>
c001a693:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a697:	75 14                	jne    c001a6ad <SoundCard::getSamples16(int, short*)+0x4b>
c001a699:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a69d:	55                   	push   ebp
c001a69e:	56                   	push   esi
c001a69f:	50                   	push   eax
c001a6a0:	e8 f3 02 00 00       	call   c001a998 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a6a5:	83 c4 10             	add    esp,0x10
c001a6a8:	39 c3                	cmp    ebx,eax
c001a6aa:	0f 4c d8             	cmovl  ebx,eax
c001a6ad:	47                   	inc    edi
c001a6ae:	83 ff 20             	cmp    edi,0x20
c001a6b1:	75 d1                	jne    c001a684 <SoundCard::getSamples16(int, short*)+0x22>
c001a6b3:	83 c4 0c             	add    esp,0xc
c001a6b6:	89 d8                	mov    eax,ebx
c001a6b8:	5b                   	pop    ebx
c001a6b9:	5e                   	pop    esi
c001a6ba:	5f                   	pop    edi
c001a6bb:	5d                   	pop    ebp
c001a6bc:	c3                   	ret    
c001a6bd:	90                   	nop

c001a6be <SoundCard::getSamples32(int, int*)>:
c001a6be:	55                   	push   ebp
c001a6bf:	57                   	push   edi
c001a6c0:	31 ff                	xor    edi,edi
c001a6c2:	56                   	push   esi
c001a6c3:	31 f6                	xor    esi,esi
c001a6c5:	53                   	push   ebx
c001a6c6:	83 ec 10             	sub    esp,0x10
c001a6c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a6cd:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a6d1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a6d5:	c1 e0 02             	shl    eax,0x2
c001a6d8:	50                   	push   eax
c001a6d9:	6a 00                	push   0x0
c001a6db:	55                   	push   ebp
c001a6dc:	e8 0f 5e fe ff       	call   c00004f0 <memset>
c001a6e1:	83 c4 10             	add    esp,0x10
c001a6e4:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a6eb:	85 c0                	test   eax,eax
c001a6ed:	74 1a                	je     c001a709 <SoundCard::getSamples32(int, int*)+0x4b>
c001a6ef:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a6f3:	75 14                	jne    c001a709 <SoundCard::getSamples32(int, int*)+0x4b>
c001a6f5:	53                   	push   ebx
c001a6f6:	55                   	push   ebp
c001a6f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6fb:	50                   	push   eax
c001a6fc:	e8 67 03 00 00       	call   c001aa68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a701:	83 c4 10             	add    esp,0x10
c001a704:	39 c6                	cmp    esi,eax
c001a706:	0f 4c f0             	cmovl  esi,eax
c001a709:	47                   	inc    edi
c001a70a:	83 ff 20             	cmp    edi,0x20
c001a70d:	75 d5                	jne    c001a6e4 <SoundCard::getSamples32(int, int*)+0x26>
c001a70f:	85 f6                	test   esi,esi
c001a711:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a718:	75 0f                	jne    c001a729 <SoundCard::getSamples32(int, int*)+0x6b>
c001a71a:	85 c0                	test   eax,eax
c001a71c:	74 1b                	je     c001a739 <SoundCard::getSamples32(int, int*)+0x7b>
c001a71e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a720:	83 ec 0c             	sub    esp,0xc
c001a723:	53                   	push   ebx
c001a724:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a727:	eb 0d                	jmp    c001a736 <SoundCard::getSamples32(int, int*)+0x78>
c001a729:	85 c0                	test   eax,eax
c001a72b:	75 0c                	jne    c001a739 <SoundCard::getSamples32(int, int*)+0x7b>
c001a72d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a72f:	83 ec 0c             	sub    esp,0xc
c001a732:	53                   	push   ebx
c001a733:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a736:	83 c4 10             	add    esp,0x10
c001a739:	83 c4 0c             	add    esp,0xc
c001a73c:	89 f0                	mov    eax,esi
c001a73e:	5b                   	pop    ebx
c001a73f:	5e                   	pop    esi
c001a740:	5f                   	pop    edi
c001a741:	5d                   	pop    ebp
c001a742:	c3                   	ret    
c001a743:	90                   	nop

c001a744 <SoundCard::addChannel(SoundPort*)>:
c001a744:	83 ec 0c             	sub    esp,0xc
c001a747:	31 c0                	xor    eax,eax
c001a749:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a74d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a755:	74 1b                	je     c001a772 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a757:	40                   	inc    eax
c001a758:	83 f8 20             	cmp    eax,0x20
c001a75b:	75 f0                	jne    c001a74d <SoundCard::addChannel(SoundPort*)+0x9>
c001a75d:	83 ec 0c             	sub    esp,0xc
c001a760:	68 f1 28 02 c0       	push   0xc00228f1
c001a765:	e8 f3 69 ff ff       	call   c001115d <KePanic(char const*)>
c001a76a:	83 c4 10             	add    esp,0x10
c001a76d:	83 c8 ff             	or     eax,0xffffffff
c001a770:	eb 0b                	jmp    c001a77d <SoundCard::addChannel(SoundPort*)+0x39>
c001a772:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a776:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a77d:	83 c4 0c             	add    esp,0xc
c001a780:	c3                   	ret    
c001a781:	90                   	nop

c001a782 <SoundCard::removeChannel(int)>:
c001a782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a786:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a78a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a795:	c3                   	ret    
c001a796:	66 90                	xchg   ax,ax

c001a798 <SoundPort::SoundPort(int, int, int, int)>:
c001a798:	83 ec 0c             	sub    esp,0xc
c001a79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a79f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7aa:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a7b6:	89 10                	mov    DWORD PTR [eax],edx
c001a7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a7c0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7cb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a7ce:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a7d3:	75 13                	jne    c001a7e8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7d9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7db:	05 a0 0f 00 00       	add    eax,0xfa0
c001a7e0:	d1 e0                	shl    eax,1
c001a7e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a7e6:	66 90                	xchg   ax,ax
c001a7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a7f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7f7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a802:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a805:	c1 e0 02             	shl    eax,0x2
c001a808:	83 ec 0c             	sub    esp,0xc
c001a80b:	50                   	push   eax
c001a80c:	e8 c2 d2 fe ff       	call   c0007ad3 <malloc>
c001a811:	83 c4 10             	add    esp,0x10
c001a814:	89 c2                	mov    edx,eax
c001a816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a81a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a81d:	90                   	nop
c001a81e:	83 c4 0c             	add    esp,0xc
c001a821:	c3                   	ret    
c001a822:	66 90                	xchg   ax,ax

c001a824 <SoundPort::~SoundPort()>:
c001a824:	83 ec 0c             	sub    esp,0xc
c001a827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a82b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a82e:	85 c0                	test   eax,eax
c001a830:	74 1e                	je     c001a850 <SoundPort::~SoundPort()+0x2c>
c001a832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a836:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a839:	83 ec 0c             	sub    esp,0xc
c001a83c:	50                   	push   eax
c001a83d:	e8 a1 d2 fe ff       	call   c0007ae3 <free>
c001a842:	83 c4 10             	add    esp,0x10
c001a845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a849:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a850:	90                   	nop
c001a851:	83 c4 0c             	add    esp,0xc
c001a854:	c3                   	ret    
c001a855:	90                   	nop
c001a856:	66 90                	xchg   ax,ax

c001a858 <SoundPort::unpause()>:
c001a858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a85c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a860:	c3                   	ret    
c001a861:	90                   	nop
c001a862:	66 90                	xchg   ax,ax

c001a864 <SoundPort::pause()>:
c001a864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a868:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a86c:	c3                   	ret    
c001a86d:	90                   	nop
c001a86e:	66 90                	xchg   ax,ax

c001a870 <SoundPort::getBufferUsed()>:
c001a870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a874:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a877:	c3                   	ret    

c001a878 <SoundPort::getBufferSize()>:
c001a878:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a87c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a87f:	c3                   	ret    

c001a880 <SoundPort::buffer16(short*, int)>:
c001a880:	55                   	push   ebp
c001a881:	57                   	push   edi
c001a882:	56                   	push   esi
c001a883:	53                   	push   ebx
c001a884:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a888:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a88c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a88f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a892:	74 68                	je     c001a8fc <SoundPort::buffer16(short*, int)+0x7c>
c001a894:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a898:	85 c9                	test   ecx,ecx
c001a89a:	7e 60                	jle    c001a8fc <SoundPort::buffer16(short*, int)+0x7c>
c001a89c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a8a0:	8d 70 01             	lea    esi,[eax+0x1]
c001a8a3:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a8a6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a8a9:	c1 e1 0f             	shl    ecx,0xf
c001a8ac:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a8af:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a8b2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a8b5:	74 4d                	je     c001a904 <SoundPort::buffer16(short*, int)+0x84>
c001a8b7:	31 f6                	xor    esi,esi
c001a8b9:	eb 21                	jmp    c001a8dc <SoundPort::buffer16(short*, int)+0x5c>
c001a8bb:	90                   	nop
c001a8bc:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a8c1:	8d 79 01             	lea    edi,[ecx+0x1]
c001a8c4:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a8c7:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a8ca:	c1 e3 0f             	shl    ebx,0xf
c001a8cd:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a8d0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a8d3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a8d6:	74 1c                	je     c001a8f4 <SoundPort::buffer16(short*, int)+0x74>
c001a8d8:	89 c6                	mov    esi,eax
c001a8da:	66 90                	xchg   ax,ax
c001a8dc:	8d 46 01             	lea    eax,[esi+0x1]
c001a8df:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a8e3:	75 d7                	jne    c001a8bc <SoundPort::buffer16(short*, int)+0x3c>
c001a8e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8ec:	5b                   	pop    ebx
c001a8ed:	5e                   	pop    esi
c001a8ee:	5f                   	pop    edi
c001a8ef:	5d                   	pop    ebp
c001a8f0:	c3                   	ret    
c001a8f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8f4:	5b                   	pop    ebx
c001a8f5:	8d 46 02             	lea    eax,[esi+0x2]
c001a8f8:	5e                   	pop    esi
c001a8f9:	5f                   	pop    edi
c001a8fa:	5d                   	pop    ebp
c001a8fb:	c3                   	ret    
c001a8fc:	5b                   	pop    ebx
c001a8fd:	31 c0                	xor    eax,eax
c001a8ff:	5e                   	pop    esi
c001a900:	5f                   	pop    edi
c001a901:	5d                   	pop    ebp
c001a902:	c3                   	ret    
c001a903:	90                   	nop
c001a904:	b8 01 00 00 00       	mov    eax,0x1
c001a909:	eb e1                	jmp    c001a8ec <SoundPort::buffer16(short*, int)+0x6c>
c001a90b:	90                   	nop

c001a90c <SoundPort::buffer32(int*, int)>:
c001a90c:	55                   	push   ebp
c001a90d:	57                   	push   edi
c001a90e:	56                   	push   esi
c001a90f:	53                   	push   ebx
c001a910:	83 ec 04             	sub    esp,0x4
c001a913:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a91b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a91f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a922:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a925:	89 04 24             	mov    DWORD PTR [esp],eax
c001a928:	74 5a                	je     c001a984 <SoundPort::buffer32(int*, int)+0x78>
c001a92a:	85 c0                	test   eax,eax
c001a92c:	7e 56                	jle    c001a984 <SoundPort::buffer32(int*, int)+0x78>
c001a92e:	8d 71 01             	lea    esi,[ecx+0x1]
c001a931:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a934:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a937:	8b 37                	mov    esi,DWORD PTR [edi]
c001a939:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a93c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a93f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a942:	74 4c                	je     c001a990 <SoundPort::buffer32(int*, int)+0x84>
c001a944:	31 f6                	xor    esi,esi
c001a946:	eb 1c                	jmp    c001a964 <SoundPort::buffer32(int*, int)+0x58>
c001a948:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a94b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a94e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a951:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a954:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a958:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a95b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a95e:	74 18                	je     c001a978 <SoundPort::buffer32(int*, int)+0x6c>
c001a960:	89 de                	mov    esi,ebx
c001a962:	66 90                	xchg   ax,ax
c001a964:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a967:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a96a:	75 dc                	jne    c001a948 <SoundPort::buffer32(int*, int)+0x3c>
c001a96c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a96f:	90                   	nop
c001a970:	83 c4 04             	add    esp,0x4
c001a973:	5b                   	pop    ebx
c001a974:	5e                   	pop    esi
c001a975:	5f                   	pop    edi
c001a976:	5d                   	pop    ebp
c001a977:	c3                   	ret    
c001a978:	8d 46 02             	lea    eax,[esi+0x2]
c001a97b:	83 c4 04             	add    esp,0x4
c001a97e:	5b                   	pop    ebx
c001a97f:	5e                   	pop    esi
c001a980:	5f                   	pop    edi
c001a981:	5d                   	pop    ebp
c001a982:	c3                   	ret    
c001a983:	90                   	nop
c001a984:	83 c4 04             	add    esp,0x4
c001a987:	31 c0                	xor    eax,eax
c001a989:	5b                   	pop    ebx
c001a98a:	5e                   	pop    esi
c001a98b:	5f                   	pop    edi
c001a98c:	5d                   	pop    ebp
c001a98d:	c3                   	ret    
c001a98e:	66 90                	xchg   ax,ax
c001a990:	b8 01 00 00 00       	mov    eax,0x1
c001a995:	eb d9                	jmp    c001a970 <SoundPort::buffer32(int*, int)+0x64>
c001a997:	90                   	nop

c001a998 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001a998:	55                   	push   ebp
c001a999:	57                   	push   edi
c001a99a:	56                   	push   esi
c001a99b:	53                   	push   ebx
c001a99c:	83 ec 0c             	sub    esp,0xc
c001a99f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a9a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a9a7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a9ab:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a9af:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001a9b5:	39 03                	cmp    DWORD PTR [ebx],eax
c001a9b7:	74 13                	je     c001a9cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001a9b9:	83 ec 0c             	sub    esp,0xc
c001a9bc:	68 44 29 02 c0       	push   0xc0022944
c001a9c1:	e8 97 67 ff ff       	call   c001115d <KePanic(char const*)>
c001a9c6:	83 c4 10             	add    esp,0x10
c001a9c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9cc:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001a9d2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001a9d5:	74 11                	je     c001a9e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001a9d7:	83 ec 0c             	sub    esp,0xc
c001a9da:	68 83 29 02 c0       	push   0xc0022983
c001a9df:	e8 79 67 ff ff       	call   c001115d <KePanic(char const*)>
c001a9e4:	83 c4 10             	add    esp,0x10
c001a9e7:	90                   	nop
c001a9e8:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001a9ee:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001a9f1:	74 11                	je     c001aa04 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001a9f3:	83 ec 0c             	sub    esp,0xc
c001a9f6:	68 83 29 02 c0       	push   0xc0022983
c001a9fb:	e8 5d 67 ff ff       	call   c001115d <KePanic(char const*)>
c001aa00:	83 c4 10             	add    esp,0x10
c001aa03:	90                   	nop
c001aa04:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001aa07:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001aa0b:	85 f6                	test   esi,esi
c001aa0d:	7e 2d                	jle    c001aa3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001aa0f:	31 c0                	xor    eax,eax
c001aa11:	8d 76 00             	lea    esi,[esi+0x0]
c001aa14:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aa17:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001aa1a:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001aa20:	85 c9                	test   ecx,ecx
c001aa22:	0f 49 d1             	cmovns edx,ecx
c001aa25:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001aa29:	c1 fa 0f             	sar    edx,0xf
c001aa2c:	01 d1                	add    ecx,edx
c001aa2e:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001aa32:	83 c0 01             	add    eax,0x1
c001aa35:	39 f0                	cmp    eax,esi
c001aa37:	75 db                	jne    c001aa14 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001aa39:	8d 76 00             	lea    esi,[esi+0x0]
c001aa3c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aa3f:	83 ec 04             	sub    esp,0x4
c001aa42:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aa45:	29 f0                	sub    eax,esi
c001aa47:	c1 e0 02             	shl    eax,0x2
c001aa4a:	50                   	push   eax
c001aa4b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001aa4e:	50                   	push   eax
c001aa4f:	52                   	push   edx
c001aa50:	e8 7b 59 fe ff       	call   c00003d0 <memmove>
c001aa55:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aa58:	29 f0                	sub    eax,esi
c001aa5a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001aa5d:	83 c4 1c             	add    esp,0x1c
c001aa60:	89 f0                	mov    eax,esi
c001aa62:	5b                   	pop    ebx
c001aa63:	5e                   	pop    esi
c001aa64:	5f                   	pop    edi
c001aa65:	5d                   	pop    ebp
c001aa66:	c3                   	ret    
c001aa67:	90                   	nop

c001aa68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001aa68:	55                   	push   ebp
c001aa69:	57                   	push   edi
c001aa6a:	56                   	push   esi
c001aa6b:	53                   	push   ebx
c001aa6c:	83 ec 0c             	sub    esp,0xc
c001aa6f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aa73:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aa77:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001aa7b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001aa7f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001aa85:	39 03                	cmp    DWORD PTR [ebx],eax
c001aa87:	74 13                	je     c001aa9c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001aa89:	83 ec 0c             	sub    esp,0xc
c001aa8c:	68 64 29 02 c0       	push   0xc0022964
c001aa91:	e8 c7 66 ff ff       	call   c001115d <KePanic(char const*)>
c001aa96:	83 c4 10             	add    esp,0x10
c001aa99:	8d 76 00             	lea    esi,[esi+0x0]
c001aa9c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001aaa2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001aaa5:	74 11                	je     c001aab8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001aaa7:	83 ec 0c             	sub    esp,0xc
c001aaaa:	68 9f 29 02 c0       	push   0xc002299f
c001aaaf:	e8 a9 66 ff ff       	call   c001115d <KePanic(char const*)>
c001aab4:	83 c4 10             	add    esp,0x10
c001aab7:	90                   	nop
c001aab8:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001aabe:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001aac1:	74 11                	je     c001aad4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001aac3:	83 ec 0c             	sub    esp,0xc
c001aac6:	68 9f 29 02 c0       	push   0xc002299f
c001aacb:	e8 8d 66 ff ff       	call   c001115d <KePanic(char const*)>
c001aad0:	83 c4 10             	add    esp,0x10
c001aad3:	90                   	nop
c001aad4:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001aad7:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001aadb:	85 ff                	test   edi,edi
c001aadd:	7e 21                	jle    c001ab00 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001aadf:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001aae6:	31 c0                	xor    eax,eax
c001aae8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aaeb:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001aaee:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001aaf1:	01 d5                	add    ebp,edx
c001aaf3:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001aaf6:	83 c0 04             	add    eax,0x4
c001aaf9:	39 c1                	cmp    ecx,eax
c001aafb:	75 eb                	jne    c001aae8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001aafd:	8d 76 00             	lea    esi,[esi+0x0]
c001ab00:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ab03:	83 ec 04             	sub    esp,0x4
c001ab06:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab09:	29 f8                	sub    eax,edi
c001ab0b:	c1 e0 02             	shl    eax,0x2
c001ab0e:	50                   	push   eax
c001ab0f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ab12:	50                   	push   eax
c001ab13:	52                   	push   edx
c001ab14:	e8 b7 58 fe ff       	call   c00003d0 <memmove>
c001ab19:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ab1c:	29 f8                	sub    eax,edi
c001ab1e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ab21:	83 c4 1c             	add    esp,0x1c
c001ab24:	89 f8                	mov    eax,edi
c001ab26:	5b                   	pop    ebx
c001ab27:	5e                   	pop    esi
c001ab28:	5f                   	pop    edi
c001ab29:	5d                   	pop    ebp
c001ab2a:	c3                   	ret    
c001ab2b:	90                   	nop

c001ab2c <PCI::open(int, int, void*)>:
c001ab2c:	83 ec 18             	sub    esp,0x18
c001ab2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ab37:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ab3d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab3f:	50                   	push   eax
c001ab40:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ab43:	31 c0                	xor    eax,eax
c001ab45:	83 c4 1c             	add    esp,0x1c
c001ab48:	c3                   	ret    
c001ab49:	90                   	nop

c001ab4a <PCI::close(int, int, void*)>:
c001ab4a:	31 c0                	xor    eax,eax
c001ab4c:	c3                   	ret    
c001ab4d:	90                   	nop

c001ab4e <PCI::PCI()>:
c001ab4e:	83 ec 0c             	sub    esp,0xc
c001ab51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab55:	83 ec 08             	sub    esp,0x8
c001ab58:	68 bb 29 02 c0       	push   0xc00229bb
c001ab5d:	50                   	push   eax
c001ab5e:	e8 dd 13 ff ff       	call   c000bf40 <Bus::Bus(char const*)>
c001ab63:	83 c4 10             	add    esp,0x10
c001ab66:	ba 64 2a 02 c0       	mov    edx,0xc0022a64
c001ab6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab6f:	89 10                	mov    DWORD PTR [eax],edx
c001ab71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab75:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ab7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab83:	a3 40 ae 02 c0       	mov    ds:0xc002ae40,eax
c001ab88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ab92:	0f b6 d0             	movzx  edx,al
c001ab95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab99:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001aba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aba4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abaa:	0f b6 d0             	movzx  edx,al
c001abad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001abb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abc0:	8d 50 01             	lea    edx,[eax+0x1]
c001abc3:	88 d1                	mov    cl,dl
c001abc5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abc9:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001abcf:	0f b6 d0             	movzx  edx,al
c001abd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001abda:	83 c9 c0             	or     ecx,0xffffffc0
c001abdd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001abe1:	90                   	nop
c001abe2:	83 c4 0c             	add    esp,0xc
c001abe5:	c3                   	ret    

c001abe6 <PCI::readBAR8(unsigned int, int)>:
c001abe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001abea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abee:	f6 c2 01             	test   dl,0x1
c001abf1:	74 07                	je     c001abfa <PCI::readBAR8(unsigned int, int)+0x14>
c001abf3:	83 e2 fc             	and    edx,0xfffffffc
c001abf6:	01 c2                	add    edx,eax
c001abf8:	ec                   	in     al,dx
c001abf9:	c3                   	ret    
c001abfa:	83 e2 f0             	and    edx,0xfffffff0
c001abfd:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ac00:	c3                   	ret    
c001ac01:	90                   	nop

c001ac02 <PCI::readBAR16(unsigned int, int)>:
c001ac02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac0a:	f6 c2 01             	test   dl,0x1
c001ac0d:	74 08                	je     c001ac17 <PCI::readBAR16(unsigned int, int)+0x15>
c001ac0f:	83 e2 fc             	and    edx,0xfffffffc
c001ac12:	01 c2                	add    edx,eax
c001ac14:	66 ed                	in     ax,dx
c001ac16:	c3                   	ret    
c001ac17:	83 e2 f0             	and    edx,0xfffffff0
c001ac1a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ac1e:	c3                   	ret    
c001ac1f:	90                   	nop

c001ac20 <PCI::readBAR32(unsigned int, int)>:
c001ac20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac28:	f6 c2 01             	test   dl,0x1
c001ac2b:	74 07                	je     c001ac34 <PCI::readBAR32(unsigned int, int)+0x14>
c001ac2d:	83 e2 fc             	and    edx,0xfffffffc
c001ac30:	01 c2                	add    edx,eax
c001ac32:	ed                   	in     eax,dx
c001ac33:	c3                   	ret    
c001ac34:	83 e2 f0             	and    edx,0xfffffff0
c001ac37:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ac3a:	c3                   	ret    
c001ac3b:	90                   	nop

c001ac3c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ac3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac44:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac48:	f6 c2 01             	test   dl,0x1
c001ac4b:	74 07                	je     c001ac54 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ac4d:	83 e2 fc             	and    edx,0xfffffffc
c001ac50:	01 ca                	add    edx,ecx
c001ac52:	ee                   	out    dx,al
c001ac53:	c3                   	ret    
c001ac54:	83 e2 f0             	and    edx,0xfffffff0
c001ac57:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ac5a:	c3                   	ret    
c001ac5b:	90                   	nop

c001ac5c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ac5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac68:	f6 c2 01             	test   dl,0x1
c001ac6b:	74 08                	je     c001ac75 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ac6d:	83 e2 fc             	and    edx,0xfffffffc
c001ac70:	01 ca                	add    edx,ecx
c001ac72:	66 ef                	out    dx,ax
c001ac74:	c3                   	ret    
c001ac75:	83 e2 f0             	and    edx,0xfffffff0
c001ac78:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ac7c:	c3                   	ret    
c001ac7d:	90                   	nop

c001ac7e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ac7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac8a:	f6 c2 01             	test   dl,0x1
c001ac8d:	74 07                	je     c001ac96 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ac8f:	83 e2 fc             	and    edx,0xfffffffc
c001ac92:	01 ca                	add    edx,ecx
c001ac94:	ef                   	out    dx,eax
c001ac95:	c3                   	ret    
c001ac96:	83 e2 f0             	and    edx,0xfffffff0
c001ac99:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ac9c:	c3                   	ret    
c001ac9d:	90                   	nop

c001ac9e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ac9e:	55                   	push   ebp
c001ac9f:	57                   	push   edi
c001aca0:	56                   	push   esi
c001aca1:	53                   	push   ebx
c001aca2:	83 ec 0c             	sub    esp,0xc
c001aca5:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001acaa:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001acae:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001acb2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001acb6:	83 fe 07             	cmp    esi,0x7
c001acb9:	76 10                	jbe    c001accb <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001acbb:	83 ec 0c             	sub    esp,0xc
c001acbe:	68 c3 29 02 c0       	push   0xc00229c3
c001acc3:	e8 95 64 ff ff       	call   c001115d <KePanic(char const*)>
c001acc8:	83 c4 10             	add    esp,0x10
c001accb:	0f b6 db             	movzx  ebx,bl
c001acce:	83 fb 0f             	cmp    ebx,0xf
c001acd1:	76 10                	jbe    c001ace3 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001acd3:	83 ec 0c             	sub    esp,0xc
c001acd6:	68 f3 29 02 c0       	push   0xc00229f3
c001acdb:	e8 7d 64 ff ff       	call   c001115d <KePanic(char const*)>
c001ace0:	83 c4 10             	add    esp,0x10
c001ace3:	8d 04 36             	lea    eax,[esi+esi*1]
c001ace6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aceb:	83 c8 f0             	or     eax,0xfffffff0
c001acee:	ee                   	out    dx,al
c001acef:	ba fa 0c 00 00       	mov    edx,0xcfa
c001acf4:	89 e8                	mov    eax,ebp
c001acf6:	ee                   	out    dx,al
c001acf7:	89 f9                	mov    ecx,edi
c001acf9:	89 d8                	mov    eax,ebx
c001acfb:	0f b6 d9             	movzx  ebx,cl
c001acfe:	83 c4 0c             	add    esp,0xc
c001ad01:	c1 e0 08             	shl    eax,0x8
c001ad04:	83 e3 fc             	and    ebx,0xfffffffc
c001ad07:	09 d8                	or     eax,ebx
c001ad09:	5b                   	pop    ebx
c001ad0a:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ad0f:	5e                   	pop    esi
c001ad10:	5f                   	pop    edi
c001ad11:	5d                   	pop    ebp
c001ad12:	c3                   	ret    
c001ad13:	90                   	nop

c001ad14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad14:	57                   	push   edi
c001ad15:	56                   	push   esi
c001ad16:	53                   	push   ebx
c001ad17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad23:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ad27:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ad2d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad31:	83 ff 01             	cmp    edi,0x1
c001ad34:	75 3f                	jne    c001ad75 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001ad36:	89 de                	mov    esi,ebx
c001ad38:	0f b6 c0             	movzx  eax,al
c001ad3b:	c1 e0 10             	shl    eax,0x10
c001ad3e:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ad44:	0f b6 c9             	movzx  ecx,cl
c001ad47:	09 f0                	or     eax,esi
c001ad49:	c1 e1 08             	shl    ecx,0x8
c001ad4c:	0f b6 d2             	movzx  edx,dl
c001ad4f:	c1 e2 0b             	shl    edx,0xb
c001ad52:	09 c8                	or     eax,ecx
c001ad54:	09 d0                	or     eax,edx
c001ad56:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad5b:	0d 00 00 00 80       	or     eax,0x80000000
c001ad60:	ef                   	out    dx,eax
c001ad61:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ad66:	ed                   	in     eax,dx
c001ad67:	83 e3 02             	and    ebx,0x2
c001ad6a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ad71:	d3 e8                	shr    eax,cl
c001ad73:	eb 44                	jmp    c001adb9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ad75:	83 ff 02             	cmp    edi,0x2
c001ad78:	75 2d                	jne    c001ada7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001ad7a:	83 ec 0c             	sub    esp,0xc
c001ad7d:	0f b6 fb             	movzx  edi,bl
c001ad80:	57                   	push   edi
c001ad81:	0f b6 c9             	movzx  ecx,cl
c001ad84:	51                   	push   ecx
c001ad85:	0f b6 d2             	movzx  edx,dl
c001ad88:	52                   	push   edx
c001ad89:	0f b6 c0             	movzx  eax,al
c001ad8c:	50                   	push   eax
c001ad8d:	56                   	push   esi
c001ad8e:	e8 0b ff ff ff       	call   c001ac9e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ad93:	89 c2                	mov    edx,eax
c001ad95:	ed                   	in     eax,dx
c001ad96:	83 e3 02             	and    ebx,0x2
c001ad99:	83 c4 20             	add    esp,0x20
c001ad9c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ada3:	d3 e8                	shr    eax,cl
c001ada5:	eb 12                	jmp    c001adb9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ada7:	83 ec 0c             	sub    esp,0xc
c001adaa:	68 23 2a 02 c0       	push   0xc0022a23
c001adaf:	e8 a9 63 ff ff       	call   c001115d <KePanic(char const*)>
c001adb4:	83 c4 10             	add    esp,0x10
c001adb7:	31 c0                	xor    eax,eax
c001adb9:	5b                   	pop    ebx
c001adba:	5e                   	pop    esi
c001adbb:	5f                   	pop    edi
c001adbc:	c3                   	ret    
c001adbd:	90                   	nop

c001adbe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001adbe:	83 ec 18             	sub    esp,0x18
c001adc1:	6a 00                	push   0x0
c001adc3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001adc8:	50                   	push   eax
c001adc9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001adce:	50                   	push   eax
c001adcf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001add4:	50                   	push   eax
c001add5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001add9:	e8 36 ff ff ff       	call   c001ad14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001adde:	83 c4 2c             	add    esp,0x2c
c001ade1:	c3                   	ret    

c001ade2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ade2:	83 ec 18             	sub    esp,0x18
c001ade5:	6a 0e                	push   0xe
c001ade7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001adec:	50                   	push   eax
c001aded:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001adf2:	50                   	push   eax
c001adf3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001adf8:	50                   	push   eax
c001adf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adfd:	e8 12 ff ff ff       	call   c001ad14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae02:	83 c4 2c             	add    esp,0x2c
c001ae05:	0f b6 c0             	movzx  eax,al
c001ae08:	c3                   	ret    
c001ae09:	90                   	nop

c001ae0a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ae0a:	55                   	push   ebp
c001ae0b:	57                   	push   edi
c001ae0c:	56                   	push   esi
c001ae0d:	53                   	push   ebx
c001ae0e:	83 ec 18             	sub    esp,0x18
c001ae11:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001ae16:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001ae1b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001ae20:	6a 0a                	push   0xa
c001ae22:	56                   	push   esi
c001ae23:	55                   	push   ebp
c001ae24:	57                   	push   edi
c001ae25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae29:	e8 e6 fe ff ff       	call   c001ad14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae2e:	83 c4 14             	add    esp,0x14
c001ae31:	6a 0a                	push   0xa
c001ae33:	56                   	push   esi
c001ae34:	55                   	push   ebp
c001ae35:	57                   	push   edi
c001ae36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae3a:	89 c3                	mov    ebx,eax
c001ae3c:	0f b6 db             	movzx  ebx,bl
c001ae3f:	e8 d0 fe ff ff       	call   c001ad14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae44:	83 c4 2c             	add    esp,0x2c
c001ae47:	25 00 ff 00 00       	and    eax,0xff00
c001ae4c:	09 d8                	or     eax,ebx
c001ae4e:	5b                   	pop    ebx
c001ae4f:	5e                   	pop    esi
c001ae50:	5f                   	pop    edi
c001ae51:	5d                   	pop    ebp
c001ae52:	c3                   	ret    
c001ae53:	90                   	nop

c001ae54 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ae54:	83 ec 18             	sub    esp,0x18
c001ae57:	6a 08                	push   0x8
c001ae59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae5e:	50                   	push   eax
c001ae5f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae64:	50                   	push   eax
c001ae65:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae6a:	50                   	push   eax
c001ae6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae6f:	e8 a0 fe ff ff       	call   c001ad14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae74:	83 c4 2c             	add    esp,0x2c
c001ae77:	0f b6 c4             	movzx  eax,ah
c001ae7a:	c3                   	ret    
c001ae7b:	90                   	nop

c001ae7c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ae7c:	83 ec 18             	sub    esp,0x18
c001ae7f:	6a 08                	push   0x8
c001ae81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae86:	50                   	push   eax
c001ae87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae8c:	50                   	push   eax
c001ae8d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae92:	50                   	push   eax
c001ae93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae97:	e8 78 fe ff ff       	call   c001ad14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae9c:	83 c4 2c             	add    esp,0x2c
c001ae9f:	c3                   	ret    

c001aea0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001aea0:	83 ec 18             	sub    esp,0x18
c001aea3:	6a 3c                	push   0x3c
c001aea5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeaa:	50                   	push   eax
c001aeab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeb0:	50                   	push   eax
c001aeb1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeb6:	50                   	push   eax
c001aeb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aebb:	e8 54 fe ff ff       	call   c001ad14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aec0:	83 c4 2c             	add    esp,0x2c
c001aec3:	c3                   	ret    

c001aec4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001aec4:	83 ec 18             	sub    esp,0x18
c001aec7:	6a 18                	push   0x18
c001aec9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aece:	50                   	push   eax
c001aecf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aed4:	50                   	push   eax
c001aed5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeda:	50                   	push   eax
c001aedb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aedf:	e8 30 fe ff ff       	call   c001ad14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aee4:	83 c4 2c             	add    esp,0x2c
c001aee7:	0f b6 c4             	movzx  eax,ah
c001aeea:	c3                   	ret    
c001aeeb:	90                   	nop

c001aeec <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001aeec:	55                   	push   ebp
c001aeed:	57                   	push   edi
c001aeee:	56                   	push   esi
c001aeef:	53                   	push   ebx
c001aef0:	83 ec 28             	sub    esp,0x28
c001aef3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001aef7:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001aefc:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001af01:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001af06:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001af0d:	8d 43 12             	lea    eax,[ebx+0x12]
c001af10:	83 c3 10             	add    ebx,0x10
c001af13:	0f b6 c0             	movzx  eax,al
c001af16:	0f b6 db             	movzx  ebx,bl
c001af19:	50                   	push   eax
c001af1a:	51                   	push   ecx
c001af1b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001af1f:	57                   	push   edi
c001af20:	55                   	push   ebp
c001af21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af25:	e8 ea fd ff ff       	call   c001ad14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af2a:	83 c4 14             	add    esp,0x14
c001af2d:	53                   	push   ebx
c001af2e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af32:	51                   	push   ecx
c001af33:	89 c6                	mov    esi,eax
c001af35:	57                   	push   edi
c001af36:	55                   	push   ebp
c001af37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af3b:	c1 e6 10             	shl    esi,0x10
c001af3e:	e8 d1 fd ff ff       	call   c001ad14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af43:	83 c4 3c             	add    esp,0x3c
c001af46:	5b                   	pop    ebx
c001af47:	0f b7 c0             	movzx  eax,ax
c001af4a:	09 f0                	or     eax,esi
c001af4c:	5e                   	pop    esi
c001af4d:	5f                   	pop    edi
c001af4e:	5d                   	pop    ebp
c001af4f:	c3                   	ret    

c001af50 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001af50:	55                   	push   ebp
c001af51:	57                   	push   edi
c001af52:	56                   	push   esi
c001af53:	53                   	push   ebx
c001af54:	83 ec 0c             	sub    esp,0xc
c001af57:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001af5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af5f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001af63:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001af67:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001af6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001af71:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001af75:	83 f9 01             	cmp    ecx,0x1
c001af78:	75 5d                	jne    c001afd7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001af7a:	0f b6 c8             	movzx  ecx,al
c001af7d:	89 f0                	mov    eax,esi
c001af7f:	25 fc 00 00 00       	and    eax,0xfc
c001af84:	0f b6 d2             	movzx  edx,dl
c001af87:	c1 e1 10             	shl    ecx,0x10
c001af8a:	c1 e2 0b             	shl    edx,0xb
c001af8d:	09 c1                	or     ecx,eax
c001af8f:	89 f8                	mov    eax,edi
c001af91:	0f b6 f8             	movzx  edi,al
c001af94:	c1 e7 08             	shl    edi,0x8
c001af97:	09 f9                	or     ecx,edi
c001af99:	09 d1                	or     ecx,edx
c001af9b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001afa0:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001afa6:	89 c8                	mov    eax,ecx
c001afa8:	ef                   	out    dx,eax
c001afa9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001afae:	ed                   	in     eax,dx
c001afaf:	83 e6 02             	and    esi,0x2
c001afb2:	0f b7 db             	movzx  ebx,bx
c001afb5:	74 0a                	je     c001afc1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001afb7:	c1 e3 10             	shl    ebx,0x10
c001afba:	0f b7 d0             	movzx  edx,ax
c001afbd:	09 d3                	or     ebx,edx
c001afbf:	eb 05                	jmp    c001afc6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001afc1:	66 31 c0             	xor    ax,ax
c001afc4:	09 c3                	or     ebx,eax
c001afc6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001afcb:	89 c8                	mov    eax,ecx
c001afcd:	ef                   	out    dx,eax
c001afce:	ba fc 0c 00 00       	mov    edx,0xcfc
c001afd3:	89 d8                	mov    eax,ebx
c001afd5:	eb 41                	jmp    c001b018 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001afd7:	83 f9 02             	cmp    ecx,0x2
c001afda:	75 45                	jne    c001b021 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001afdc:	89 f1                	mov    ecx,esi
c001afde:	83 ec 0c             	sub    esp,0xc
c001afe1:	0f b6 f1             	movzx  esi,cl
c001afe4:	89 f9                	mov    ecx,edi
c001afe6:	56                   	push   esi
c001afe7:	0f b6 f9             	movzx  edi,cl
c001afea:	57                   	push   edi
c001afeb:	0f b6 d2             	movzx  edx,dl
c001afee:	52                   	push   edx
c001afef:	0f b6 c0             	movzx  eax,al
c001aff2:	50                   	push   eax
c001aff3:	55                   	push   ebp
c001aff4:	e8 a5 fc ff ff       	call   c001ac9e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aff9:	89 c2                	mov    edx,eax
c001affb:	ed                   	in     eax,dx
c001affc:	83 c4 20             	add    esp,0x20
c001afff:	f6 c2 02             	test   dl,0x2
c001b002:	0f b7 db             	movzx  ebx,bx
c001b005:	74 0c                	je     c001b013 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b007:	0f b7 c8             	movzx  ecx,ax
c001b00a:	89 d8                	mov    eax,ebx
c001b00c:	c1 e0 10             	shl    eax,0x10
c001b00f:	09 c8                	or     eax,ecx
c001b011:	eb 05                	jmp    c001b018 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b013:	66 31 c0             	xor    ax,ax
c001b016:	09 d8                	or     eax,ebx
c001b018:	ef                   	out    dx,eax
c001b019:	83 c4 0c             	add    esp,0xc
c001b01c:	5b                   	pop    ebx
c001b01d:	5e                   	pop    esi
c001b01e:	5f                   	pop    edi
c001b01f:	5d                   	pop    ebp
c001b020:	c3                   	ret    
c001b021:	c7 44 24 20 23 2a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022a23
c001b029:	83 c4 0c             	add    esp,0xc
c001b02c:	5b                   	pop    ebx
c001b02d:	5e                   	pop    esi
c001b02e:	5f                   	pop    edi
c001b02f:	5d                   	pop    ebp
c001b030:	e9 28 61 ff ff       	jmp    c001115d <KePanic(char const*)>
c001b035:	90                   	nop

c001b036 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b036:	55                   	push   ebp
c001b037:	57                   	push   edi
c001b038:	56                   	push   esi
c001b039:	53                   	push   ebx
c001b03a:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b040:	80 3d 4c ae 02 c0 00 	cmp    BYTE PTR ds:0xc002ae4c,0x0
c001b047:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b04e:	0f 85 bd 00 00 00    	jne    c001b111 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b054:	83 ec 0c             	sub    esp,0xc
c001b057:	68 14 01 00 00       	push   0x114
c001b05c:	e8 72 ca fe ff       	call   c0007ad3 <malloc>
c001b061:	83 c4 0c             	add    esp,0xc
c001b064:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001b06a:	68 29 2a 02 c0       	push   0xc0022a29
c001b06f:	50                   	push   eax
c001b070:	89 c3                	mov    ebx,eax
c001b072:	e8 5f 06 ff ff       	call   c000b6d6 <File::File(char const*, Process*)>
c001b077:	83 c4 10             	add    esp,0x10
c001b07a:	85 db                	test   ebx,ebx
c001b07c:	0f 84 6b 02 00 00    	je     c001b2ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b082:	57                   	push   edi
c001b083:	57                   	push   edi
c001b084:	6a 01                	push   0x1
c001b086:	53                   	push   ebx
c001b087:	e8 06 07 ff ff       	call   c000b792 <File::open(FileOpenMode)>
c001b08c:	83 c4 10             	add    esp,0x10
c001b08f:	85 c0                	test   eax,eax
c001b091:	0f 85 56 02 00 00    	jne    c001b2ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b097:	52                   	push   edx
c001b098:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b09c:	50                   	push   eax
c001b09d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b0a1:	50                   	push   eax
c001b0a2:	53                   	push   ebx
c001b0a3:	e8 ec 09 ff ff       	call   c000ba94 <File::stat(unsigned long long*, bool*)>
c001b0a8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b0ac:	40                   	inc    eax
c001b0ad:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0b0:	e8 1e ca fe ff       	call   c0007ad3 <malloc>
c001b0b5:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b0b9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b0bd:	59                   	pop    ecx
c001b0be:	a3 48 ae 02 c0       	mov    ds:0xc002ae48,eax
c001b0c3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b0c5:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b0c9:	51                   	push   ecx
c001b0ca:	50                   	push   eax
c001b0cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b0cf:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b0d3:	53                   	push   ebx
c001b0d4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b0d7:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b0db:	83 c4 20             	add    esp,0x20
c001b0de:	89 c8                	mov    eax,ecx
c001b0e0:	99                   	cdq    
c001b0e1:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b0e5:	0f 85 02 02 00 00    	jne    c001b2ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b0eb:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b0ef:	0f 85 f8 01 00 00    	jne    c001b2ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b0f5:	83 ec 0c             	sub    esp,0xc
c001b0f8:	53                   	push   ebx
c001b0f9:	e8 f2 06 ff ff       	call   c000b7f0 <File::close()>
c001b0fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b102:	83 c4 10             	add    esp,0x10
c001b105:	c6 05 4c ae 02 c0 01 	mov    BYTE PTR ds:0xc002ae4c,0x1
c001b10c:	a3 44 ae 02 c0       	mov    ds:0xc002ae44,eax
c001b111:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b119:	31 c9                	xor    ecx,ecx
c001b11b:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b122:	8b 2d 44 ae 02 c0    	mov    ebp,DWORD PTR ds:0xc002ae44
c001b128:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b12f:	8b 15 48 ae 02 c0    	mov    edx,DWORD PTR ds:0xc002ae48
c001b135:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b13a:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b142:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b147:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b14f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b153:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b15b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b15f:	39 cd                	cmp    ebp,ecx
c001b161:	0f 8e 86 01 00 00    	jle    c001b2ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b167:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b16a:	d4 40                	aam    0x40
c001b16c:	d5 39                	aad    0x39
c001b16e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b172:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b176:	d4 40                	aam    0x40
c001b178:	d5 39                	aad    0x39
c001b17a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b17e:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b182:	d4 40                	aam    0x40
c001b184:	d5 39                	aad    0x39
c001b186:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b18a:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b18e:	d4 40                	aam    0x40
c001b190:	d5 39                	aad    0x39
c001b192:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b196:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b19a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b19e:	3c 56                	cmp    al,0x56
c001b1a0:	74 47                	je     c001b1e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b1a2:	d4 40                	aam    0x40
c001b1a4:	d5 39                	aad    0x39
c001b1a6:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b1a9:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b1ad:	0f b6 db             	movzx  ebx,bl
c001b1b0:	c1 e3 04             	shl    ebx,0x4
c001b1b3:	d4 40                	aam    0x40
c001b1b5:	d5 39                	aad    0x39
c001b1b7:	83 e8 30             	sub    eax,0x30
c001b1ba:	0f b6 c0             	movzx  eax,al
c001b1bd:	09 c3                	or     ebx,eax
c001b1bf:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b1c3:	c1 e3 04             	shl    ebx,0x4
c001b1c6:	d4 40                	aam    0x40
c001b1c8:	d5 39                	aad    0x39
c001b1ca:	83 e8 30             	sub    eax,0x30
c001b1cd:	0f b6 c0             	movzx  eax,al
c001b1d0:	09 c3                	or     ebx,eax
c001b1d2:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b1d6:	c1 e3 04             	shl    ebx,0x4
c001b1d9:	d4 40                	aam    0x40
c001b1db:	d5 39                	aad    0x39
c001b1dd:	83 e8 30             	sub    eax,0x30
c001b1e0:	0f b6 c0             	movzx  eax,al
c001b1e3:	09 c3                	or     ebx,eax
c001b1e5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b1e9:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b1ed:	80 fb 58             	cmp    bl,0x58
c001b1f0:	74 49                	je     c001b23b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b1f2:	88 d8                	mov    al,bl
c001b1f4:	d4 40                	aam    0x40
c001b1f6:	d5 39                	aad    0x39
c001b1f8:	83 e8 30             	sub    eax,0x30
c001b1fb:	0f b6 f8             	movzx  edi,al
c001b1fe:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b202:	c1 e7 04             	shl    edi,0x4
c001b205:	d4 40                	aam    0x40
c001b207:	d5 39                	aad    0x39
c001b209:	83 e8 30             	sub    eax,0x30
c001b20c:	0f b6 c0             	movzx  eax,al
c001b20f:	09 c7                	or     edi,eax
c001b211:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b215:	c1 e7 04             	shl    edi,0x4
c001b218:	d4 40                	aam    0x40
c001b21a:	d5 39                	aad    0x39
c001b21c:	83 e8 30             	sub    eax,0x30
c001b21f:	0f b6 c0             	movzx  eax,al
c001b222:	09 c7                	or     edi,eax
c001b224:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b228:	c1 e7 04             	shl    edi,0x4
c001b22b:	d4 40                	aam    0x40
c001b22d:	d5 39                	aad    0x39
c001b22f:	83 e8 30             	sub    eax,0x30
c001b232:	0f b6 c0             	movzx  eax,al
c001b235:	09 c7                	or     edi,eax
c001b237:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b23b:	8d 41 10             	lea    eax,[ecx+0x10]
c001b23e:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b242:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b246:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b24a:	83 f9 0a             	cmp    ecx,0xa
c001b24d:	74 07                	je     c001b256 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b24f:	47                   	inc    edi
c001b250:	39 c5                	cmp    ebp,eax
c001b252:	75 16                	jne    c001b26a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b254:	89 e8                	mov    eax,ebp
c001b256:	83 f9 0a             	cmp    ecx,0xa
c001b259:	0f 94 c1             	sete   cl
c001b25c:	0f b6 c9             	movzx  ecx,cl
c001b25f:	01 c1                	add    ecx,eax
c001b261:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b266:	75 0f                	jne    c001b277 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b268:	eb 1c                	jmp    c001b286 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b26a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b26d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b271:	40                   	inc    eax
c001b272:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b275:	eb cb                	jmp    c001b242 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b277:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b27b:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b280:	0f 85 d9 fe ff ff    	jne    c001b15f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b286:	80 fb 58             	cmp    bl,0x58
c001b289:	74 10                	je     c001b29b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b28b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b290:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b295:	0f 85 c4 fe ff ff    	jne    c001b15f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b29b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b29f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2a3:	83 e8 30             	sub    eax,0x30
c001b2a6:	c1 e0 04             	shl    eax,0x4
c001b2a9:	83 eb 30             	sub    ebx,0x30
c001b2ac:	09 d8                	or     eax,ebx
c001b2ae:	0f b6 c0             	movzx  eax,al
c001b2b1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b2b5:	0f 85 a4 fe ff ff    	jne    c001b15f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b2bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2bf:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b2c3:	83 e8 30             	sub    eax,0x30
c001b2c6:	c1 e0 04             	shl    eax,0x4
c001b2c9:	83 eb 30             	sub    ebx,0x30
c001b2cc:	09 d8                	or     eax,ebx
c001b2ce:	0f b6 c0             	movzx  eax,al
c001b2d1:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b2d5:	0f 85 84 fe ff ff    	jne    c001b15f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b2db:	50                   	push   eax
c001b2dc:	50                   	push   eax
c001b2dd:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b2e1:	50                   	push   eax
c001b2e2:	56                   	push   esi
c001b2e3:	e8 68 53 fe ff       	call   c0000650 <strcpy>
c001b2e8:	83 c4 10             	add    esp,0x10
c001b2eb:	eb 05                	jmp    c001b2f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b2ed:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b2f0:	31 f6                	xor    esi,esi
c001b2f2:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b2f8:	89 f0                	mov    eax,esi
c001b2fa:	5b                   	pop    ebx
c001b2fb:	5e                   	pop    esi
c001b2fc:	5f                   	pop    edi
c001b2fd:	5d                   	pop    ebp
c001b2fe:	c3                   	ret    
c001b2ff:	90                   	nop

c001b300 <PCI::checkBus(unsigned char)>:
c001b300:	56                   	push   esi
c001b301:	53                   	push   ebx
c001b302:	31 db                	xor    ebx,ebx
c001b304:	51                   	push   ecx
c001b305:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b30a:	52                   	push   edx
c001b30b:	53                   	push   ebx
c001b30c:	43                   	inc    ebx
c001b30d:	56                   	push   esi
c001b30e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b312:	e8 0f 03 00 00       	call   c001b626 <PCI::checkDevice(unsigned char, unsigned char)>
c001b317:	83 c4 10             	add    esp,0x10
c001b31a:	83 fb 20             	cmp    ebx,0x20
c001b31d:	75 eb                	jne    c001b30a <PCI::checkBus(unsigned char)+0xa>
c001b31f:	58                   	pop    eax
c001b320:	5b                   	pop    ebx
c001b321:	5e                   	pop    esi
c001b322:	c3                   	ret    
c001b323:	90                   	nop

c001b324 <PCI::foundDevice(PCIDeviceInfo)>:
c001b324:	55                   	push   ebp
c001b325:	57                   	push   edi
c001b326:	56                   	push   esi
c001b327:	53                   	push   ebx
c001b328:	83 ec 1c             	sub    esp,0x1c
c001b32b:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b330:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b334:	3d ff ff 00 00       	cmp    eax,0xffff
c001b339:	0f 84 63 01 00 00    	je     c001b4a2 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b33f:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b344:	66 3d 06 04          	cmp    ax,0x406
c001b348:	75 2c                	jne    c001b376 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b34a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b34f:	50                   	push   eax
c001b350:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b355:	50                   	push   eax
c001b356:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b35b:	50                   	push   eax
c001b35c:	53                   	push   ebx
c001b35d:	e8 62 fb ff ff       	call   c001aec4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b362:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b366:	0f b6 c0             	movzx  eax,al
c001b369:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b36d:	83 c4 2c             	add    esp,0x2c
c001b370:	5b                   	pop    ebx
c001b371:	5e                   	pop    esi
c001b372:	5f                   	pop    edi
c001b373:	5d                   	pop    ebp
c001b374:	eb 8a                	jmp    c001b300 <PCI::checkBus(unsigned char)>
c001b376:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b37b:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b381:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b385:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b38d:	85 d2                	test   edx,edx
c001b38f:	74 34                	je     c001b3c5 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b391:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b394:	85 c9                	test   ecx,ecx
c001b396:	74 29                	je     c001b3c1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b398:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b39e:	31 f5                	xor    ebp,esi
c001b3a0:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b3a6:	75 19                	jne    c001b3c1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b3a8:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b3ae:	75 11                	jne    c001b3c1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b3b0:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b3b7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b3bb:	0f 84 e1 00 00 00    	je     c001b4a2 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b3c1:	8b 12                	mov    edx,DWORD PTR [edx]
c001b3c3:	eb c8                	jmp    c001b38d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b3c5:	3d 01 06 00 00       	cmp    eax,0x601
c001b3ca:	75 19                	jne    c001b3e5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b3cc:	83 ec 0c             	sub    esp,0xc
c001b3cf:	68 64 01 00 00       	push   0x164
c001b3d4:	e8 fa c6 fe ff       	call   c0007ad3 <malloc>
c001b3d9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3dc:	89 c5                	mov    ebp,eax
c001b3de:	e8 ab 0e 00 00       	call   c001c28e <SATABus::SATABus()>
c001b3e3:	eb 1e                	jmp    c001b403 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b3e5:	3d 01 01 00 00       	cmp    eax,0x101
c001b3ea:	75 62                	jne    c001b44e <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b3ec:	83 ec 0c             	sub    esp,0xc
c001b3ef:	68 70 02 00 00       	push   0x270
c001b3f4:	e8 da c6 fe ff       	call   c0007ad3 <malloc>
c001b3f9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3fc:	89 c5                	mov    ebp,eax
c001b3fe:	e8 f3 02 00 00       	call   c001b6f6 <IDE::IDE()>
c001b403:	58                   	pop    eax
c001b404:	5a                   	pop    edx
c001b405:	55                   	push   ebp
c001b406:	53                   	push   ebx
c001b407:	e8 d8 11 ff ff       	call   c000c5e4 <Device::addChild(Device*)>
c001b40c:	83 ec 1c             	sub    esp,0x1c
c001b40f:	b9 09 00 00 00       	mov    ecx,0x9
c001b414:	fc                   	cld    
c001b415:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b419:	89 e7                	mov    edi,esp
c001b41b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b41d:	55                   	push   ebp
c001b41e:	e8 07 11 ff ff       	call   c000c52a <Device::preOpenPCI(PCIDeviceInfo)>
c001b423:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b426:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b42a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b432:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b43a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b442:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b445:	83 c4 4c             	add    esp,0x4c
c001b448:	5b                   	pop    ebx
c001b449:	5e                   	pop    esi
c001b44a:	5f                   	pop    edi
c001b44b:	5d                   	pop    ebp
c001b44c:	ff e0                	jmp    eax
c001b44e:	83 ec 0c             	sub    esp,0xc
c001b451:	68 58 01 00 00       	push   0x158
c001b456:	e8 78 c6 fe ff       	call   c0007ad3 <malloc>
c001b45b:	5a                   	pop    edx
c001b45c:	59                   	pop    ecx
c001b45d:	68 42 2a 02 c0       	push   0xc0022a42
c001b462:	50                   	push   eax
c001b463:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b467:	e8 16 14 ff ff       	call   c000c882 <DriverlessDevice::DriverlessDevice(char const*)>
c001b46c:	5e                   	pop    esi
c001b46d:	5f                   	pop    edi
c001b46e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b472:	50                   	push   eax
c001b473:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b477:	53                   	push   ebx
c001b478:	e8 67 11 ff ff       	call   c000c5e4 <Device::addChild(Device*)>
c001b47d:	83 c4 10             	add    esp,0x10
c001b480:	b9 09 00 00 00       	mov    ecx,0x9
c001b485:	fc                   	cld    
c001b486:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b48a:	89 fe                	mov    esi,edi
c001b48c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b48e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b496:	83 c4 1c             	add    esp,0x1c
c001b499:	5b                   	pop    ebx
c001b49a:	5e                   	pop    esi
c001b49b:	5f                   	pop    edi
c001b49c:	5d                   	pop    ebp
c001b49d:	e9 88 10 ff ff       	jmp    c000c52a <Device::preOpenPCI(PCIDeviceInfo)>
c001b4a2:	83 c4 1c             	add    esp,0x1c
c001b4a5:	5b                   	pop    ebx
c001b4a6:	5e                   	pop    esi
c001b4a7:	5f                   	pop    edi
c001b4a8:	5d                   	pop    ebp
c001b4a9:	c3                   	ret    

c001b4aa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b4aa:	55                   	push   ebp
c001b4ab:	57                   	push   edi
c001b4ac:	56                   	push   esi
c001b4ad:	53                   	push   ebx
c001b4ae:	83 ec 68             	sub    esp,0x68
c001b4b1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b4b8:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b4bc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b4c0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b4c7:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b4cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b4d0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b4d7:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b4dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b4e0:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b4e5:	6a 0c                	push   0xc
c001b4e7:	57                   	push   edi
c001b4e8:	53                   	push   ebx
c001b4e9:	56                   	push   esi
c001b4ea:	55                   	push   ebp
c001b4eb:	e8 24 f8 ff ff       	call   c001ad14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4f0:	83 c4 20             	add    esp,0x20
c001b4f3:	57                   	push   edi
c001b4f4:	53                   	push   ebx
c001b4f5:	56                   	push   esi
c001b4f6:	55                   	push   ebp
c001b4f7:	e8 0e f9 ff ff       	call   c001ae0a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b4fc:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b501:	57                   	push   edi
c001b502:	53                   	push   ebx
c001b503:	56                   	push   esi
c001b504:	55                   	push   ebp
c001b505:	e8 96 f9 ff ff       	call   c001aea0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b50a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b50e:	83 c4 14             	add    esp,0x14
c001b511:	6a 3c                	push   0x3c
c001b513:	57                   	push   edi
c001b514:	53                   	push   ebx
c001b515:	56                   	push   esi
c001b516:	55                   	push   ebp
c001b517:	e8 f8 f7 ff ff       	call   c001ad14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b51c:	0f b6 c4             	movzx  eax,ah
c001b51f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b523:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b527:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b52b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b530:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b536:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b53c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b540:	83 c4 20             	add    esp,0x20
c001b543:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b548:	74 30                	je     c001b57a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b54a:	31 c0                	xor    eax,eax
c001b54c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b550:	7e 28                	jle    c001b57a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b552:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b55a:	39 cb                	cmp    ebx,ecx
c001b55c:	75 19                	jne    c001b577 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b55e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b566:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b56a:	75 0b                	jne    c001b577 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b56c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b573:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b577:	40                   	inc    eax
c001b578:	eb d2                	jmp    c001b54c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b57a:	31 d2                	xor    edx,edx
c001b57c:	83 ec 0c             	sub    esp,0xc
c001b57f:	57                   	push   edi
c001b580:	53                   	push   ebx
c001b581:	56                   	push   esi
c001b582:	52                   	push   edx
c001b583:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b587:	55                   	push   ebp
c001b588:	e8 5f f9 ff ff       	call   c001aeec <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b58d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b591:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b595:	42                   	inc    edx
c001b596:	83 c4 20             	add    esp,0x20
c001b599:	83 fa 06             	cmp    edx,0x6
c001b59c:	75 de                	jne    c001b57c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b59e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5a2:	83 ec 0c             	sub    esp,0xc
c001b5a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b5a9:	c1 e2 08             	shl    edx,0x8
c001b5ac:	0f b6 c4             	movzx  eax,ah
c001b5af:	09 d0                	or     eax,edx
c001b5b1:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b5b6:	6a 02                	push   0x2
c001b5b8:	57                   	push   edi
c001b5b9:	53                   	push   ebx
c001b5ba:	56                   	push   esi
c001b5bb:	55                   	push   ebp
c001b5bc:	e8 53 f7 ff ff       	call   c001ad14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5c1:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b5c6:	83 c4 20             	add    esp,0x20
c001b5c9:	57                   	push   edi
c001b5ca:	53                   	push   ebx
c001b5cb:	56                   	push   esi
c001b5cc:	55                   	push   ebp
c001b5cd:	e8 82 f8 ff ff       	call   c001ae54 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b5d2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b5d6:	57                   	push   edi
c001b5d7:	53                   	push   ebx
c001b5d8:	56                   	push   esi
c001b5d9:	55                   	push   ebp
c001b5da:	e8 df f7 ff ff       	call   c001adbe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b5df:	b9 09 00 00 00       	mov    ecx,0x9
c001b5e4:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b5e9:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b5ed:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b5f1:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b5f5:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b5f9:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b5fd:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b601:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b605:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b609:	83 ec 0c             	sub    esp,0xc
c001b60c:	fc                   	cld    
c001b60d:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b611:	89 e7                	mov    edi,esp
c001b613:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b615:	55                   	push   ebp
c001b616:	e8 09 fd ff ff       	call   c001b324 <PCI::foundDevice(PCIDeviceInfo)>
c001b61b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b621:	5b                   	pop    ebx
c001b622:	5e                   	pop    esi
c001b623:	5f                   	pop    edi
c001b624:	5d                   	pop    ebp
c001b625:	c3                   	ret    

c001b626 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b626:	55                   	push   ebp
c001b627:	57                   	push   edi
c001b628:	56                   	push   esi
c001b629:	53                   	push   ebx
c001b62a:	83 ec 0c             	sub    esp,0xc
c001b62d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b632:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b637:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b63b:	6a 00                	push   0x0
c001b63d:	56                   	push   esi
c001b63e:	57                   	push   edi
c001b63f:	55                   	push   ebp
c001b640:	e8 79 f7 ff ff       	call   c001adbe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b645:	6a 00                	push   0x0
c001b647:	56                   	push   esi
c001b648:	57                   	push   edi
c001b649:	55                   	push   ebp
c001b64a:	e8 5b fe ff ff       	call   c001b4aa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b64f:	83 c4 20             	add    esp,0x20
c001b652:	6a 00                	push   0x0
c001b654:	56                   	push   esi
c001b655:	57                   	push   edi
c001b656:	55                   	push   ebp
c001b657:	e8 86 f7 ff ff       	call   c001ade2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b65c:	83 c4 10             	add    esp,0x10
c001b65f:	a8 80                	test   al,0x80
c001b661:	74 2d                	je     c001b690 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b663:	bb 01 00 00 00       	mov    ebx,0x1
c001b668:	53                   	push   ebx
c001b669:	56                   	push   esi
c001b66a:	57                   	push   edi
c001b66b:	55                   	push   ebp
c001b66c:	e8 4d f7 ff ff       	call   c001adbe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b671:	83 c4 10             	add    esp,0x10
c001b674:	0f b7 c0             	movzx  eax,ax
c001b677:	3d ff ff 00 00       	cmp    eax,0xffff
c001b67c:	74 0c                	je     c001b68a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b67e:	53                   	push   ebx
c001b67f:	56                   	push   esi
c001b680:	57                   	push   edi
c001b681:	55                   	push   ebp
c001b682:	e8 23 fe ff ff       	call   c001b4aa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b687:	83 c4 10             	add    esp,0x10
c001b68a:	43                   	inc    ebx
c001b68b:	83 fb 08             	cmp    ebx,0x8
c001b68e:	75 d8                	jne    c001b668 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b690:	83 c4 0c             	add    esp,0xc
c001b693:	5b                   	pop    ebx
c001b694:	5e                   	pop    esi
c001b695:	5f                   	pop    edi
c001b696:	5d                   	pop    ebp
c001b697:	c3                   	ret    

c001b698 <PCI::detect()>:
c001b698:	56                   	push   esi
c001b699:	53                   	push   ebx
c001b69a:	53                   	push   ebx
c001b69b:	31 db                	xor    ebx,ebx
c001b69d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6a1:	6a 00                	push   0x0
c001b6a3:	6a 00                	push   0x0
c001b6a5:	6a 00                	push   0x0
c001b6a7:	56                   	push   esi
c001b6a8:	e8 35 f7 ff ff       	call   c001ade2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b6ad:	83 c4 10             	add    esp,0x10
c001b6b0:	a8 80                	test   al,0x80
c001b6b2:	75 21                	jne    c001b6d5 <PCI::detect()+0x3d>
c001b6b4:	51                   	push   ecx
c001b6b5:	51                   	push   ecx
c001b6b6:	6a 00                	push   0x0
c001b6b8:	56                   	push   esi
c001b6b9:	e8 42 fc ff ff       	call   c001b300 <PCI::checkBus(unsigned char)>
c001b6be:	83 c4 10             	add    esp,0x10
c001b6c1:	eb 2a                	jmp    c001b6ed <PCI::detect()+0x55>
c001b6c3:	52                   	push   edx
c001b6c4:	52                   	push   edx
c001b6c5:	53                   	push   ebx
c001b6c6:	43                   	inc    ebx
c001b6c7:	56                   	push   esi
c001b6c8:	e8 33 fc ff ff       	call   c001b300 <PCI::checkBus(unsigned char)>
c001b6cd:	83 c4 10             	add    esp,0x10
c001b6d0:	83 fb 08             	cmp    ebx,0x8
c001b6d3:	74 18                	je     c001b6ed <PCI::detect()+0x55>
c001b6d5:	53                   	push   ebx
c001b6d6:	6a 00                	push   0x0
c001b6d8:	6a 00                	push   0x0
c001b6da:	56                   	push   esi
c001b6db:	e8 de f6 ff ff       	call   c001adbe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6e0:	83 c4 10             	add    esp,0x10
c001b6e3:	0f b7 c0             	movzx  eax,ax
c001b6e6:	3d ff ff 00 00       	cmp    eax,0xffff
c001b6eb:	74 d6                	je     c001b6c3 <PCI::detect()+0x2b>
c001b6ed:	58                   	pop    eax
c001b6ee:	5b                   	pop    ebx
c001b6ef:	5e                   	pop    esi
c001b6f0:	c3                   	ret    
c001b6f1:	90                   	nop

c001b6f2 <IDE::close(int, int, void*)>:
c001b6f2:	83 c8 ff             	or     eax,0xffffffff
c001b6f5:	c3                   	ret    

c001b6f6 <IDE::IDE()>:
c001b6f6:	83 ec 0c             	sub    esp,0xc
c001b6f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6fd:	83 ec 08             	sub    esp,0x8
c001b700:	68 88 2a 02 c0       	push   0xc0022a88
c001b705:	50                   	push   eax
c001b706:	e8 1d 12 ff ff       	call   c000c928 <HardDiskController::HardDiskController(char const*)>
c001b70b:	83 c4 10             	add    esp,0x10
c001b70e:	ba 18 2b 02 c0       	mov    edx,0xc0022b18
c001b713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b717:	89 10                	mov    DWORD PTR [eax],edx
c001b719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b71d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b724:	90                   	nop
c001b725:	83 c4 0c             	add    esp,0xc
c001b728:	c3                   	ret    
c001b729:	90                   	nop

c001b72a <IDE::prepareInterrupt(unsigned char)>:
c001b72a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b72f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b733:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b73b:	c3                   	ret    

c001b73c <selectDrive(unsigned char, unsigned char)>:
c001b73c:	c3                   	ret    
c001b73d:	90                   	nop

c001b73e <IDE::getBase(unsigned char)>:
c001b73e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b747:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b74f:	c3                   	ret    

c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b750:	55                   	push   ebp
c001b751:	57                   	push   edi
c001b752:	56                   	push   esi
c001b753:	53                   	push   ebx
c001b754:	83 ec 1c             	sub    esp,0x1c
c001b757:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b75b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b75f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b763:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b767:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b76a:	80 f9 03             	cmp    cl,0x3
c001b76d:	77 4f                	ja     c001b7be <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b76f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b773:	0f b6 f2             	movzx  esi,dl
c001b776:	0f b6 db             	movzx  ebx,bl
c001b779:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b77c:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b781:	80 ca 80             	or     dl,0x80
c001b784:	52                   	push   edx
c001b785:	6a 0c                	push   0xc
c001b787:	56                   	push   esi
c001b788:	57                   	push   edi
c001b789:	e8 c2 ff ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b78e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b793:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b797:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b79b:	ee                   	out    dx,al
c001b79c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b7a1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b7a5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b7a9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b7b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b7b5:	83 c4 2c             	add    esp,0x2c
c001b7b8:	5b                   	pop    ebx
c001b7b9:	5e                   	pop    esi
c001b7ba:	5f                   	pop    edi
c001b7bb:	5d                   	pop    ebp
c001b7bc:	eb 92                	jmp    c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7be:	0f b6 cb             	movzx  ecx,bl
c001b7c1:	83 f9 07             	cmp    ecx,0x7
c001b7c4:	77 12                	ja     c001b7d8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b7c6:	0f b6 d2             	movzx  edx,dl
c001b7c9:	0f b6 db             	movzx  ebx,bl
c001b7cc:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001b7d4:	01 da                	add    edx,ebx
c001b7d6:	eb 2f                	jmp    c001b807 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b7d8:	83 f9 0d             	cmp    ecx,0xd
c001b7db:	77 13                	ja     c001b7f0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b7dd:	0f b6 d2             	movzx  edx,dl
c001b7e0:	0f b6 db             	movzx  ebx,bl
c001b7e3:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b7ea:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b7ee:	eb 17                	jmp    c001b807 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b7f0:	83 f9 15             	cmp    ecx,0x15
c001b7f3:	77 13                	ja     c001b808 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b7f5:	0f b6 d2             	movzx  edx,dl
c001b7f8:	0f b6 db             	movzx  ebx,bl
c001b7fb:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b803:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b807:	ee                   	out    dx,al
c001b808:	83 c4 1c             	add    esp,0x1c
c001b80b:	5b                   	pop    ebx
c001b80c:	5e                   	pop    esi
c001b80d:	5f                   	pop    edi
c001b80e:	5d                   	pop    ebp
c001b80f:	c3                   	ret    

c001b810 <IDE::read(unsigned char, unsigned char)>:
c001b810:	57                   	push   edi
c001b811:	56                   	push   esi
c001b812:	53                   	push   ebx
c001b813:	83 ec 10             	sub    esp,0x10
c001b816:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b81a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b81e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b822:	8d 42 f8             	lea    eax,[edx-0x8]
c001b825:	3c 03                	cmp    al,0x3
c001b827:	77 48                	ja     c001b871 <IDE::read(unsigned char, unsigned char)+0x61>
c001b829:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b82d:	0f b6 f1             	movzx  esi,cl
c001b830:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001b833:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001b838:	0c 80                	or     al,0x80
c001b83a:	50                   	push   eax
c001b83b:	6a 0c                	push   0xc
c001b83d:	56                   	push   esi
c001b83e:	53                   	push   ebx
c001b83f:	e8 0c ff ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b844:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b848:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001b84d:	0f b6 d2             	movzx  edx,dl
c001b850:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b854:	ec                   	in     al,dx
c001b855:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b859:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001b85e:	52                   	push   edx
c001b85f:	6a 0c                	push   0xc
c001b861:	56                   	push   esi
c001b862:	53                   	push   ebx
c001b863:	e8 e8 fe ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b868:	83 c4 20             	add    esp,0x20
c001b86b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b86f:	eb 4c                	jmp    c001b8bd <IDE::read(unsigned char, unsigned char)+0xad>
c001b871:	0f b6 f2             	movzx  esi,dl
c001b874:	83 fe 07             	cmp    esi,0x7
c001b877:	77 12                	ja     c001b88b <IDE::read(unsigned char, unsigned char)+0x7b>
c001b879:	0f b6 c9             	movzx  ecx,cl
c001b87c:	0f b6 d2             	movzx  edx,dl
c001b87f:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001b887:	01 c2                	add    edx,eax
c001b889:	eb 31                	jmp    c001b8bc <IDE::read(unsigned char, unsigned char)+0xac>
c001b88b:	83 fe 0d             	cmp    esi,0xd
c001b88e:	77 13                	ja     c001b8a3 <IDE::read(unsigned char, unsigned char)+0x93>
c001b890:	0f b6 c9             	movzx  ecx,cl
c001b893:	0f b6 d2             	movzx  edx,dl
c001b896:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001b89d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b8a1:	eb 19                	jmp    c001b8bc <IDE::read(unsigned char, unsigned char)+0xac>
c001b8a3:	31 c0                	xor    eax,eax
c001b8a5:	83 fe 15             	cmp    esi,0x15
c001b8a8:	77 13                	ja     c001b8bd <IDE::read(unsigned char, unsigned char)+0xad>
c001b8aa:	0f b6 c9             	movzx  ecx,cl
c001b8ad:	0f b6 d2             	movzx  edx,dl
c001b8b0:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001b8b8:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b8bc:	ec                   	in     al,dx
c001b8bd:	83 c4 10             	add    esp,0x10
c001b8c0:	5b                   	pop    ebx
c001b8c1:	5e                   	pop    esi
c001b8c2:	5f                   	pop    edi
c001b8c3:	c3                   	ret    

c001b8c4 <IDE::waitInterrupt(unsigned char)>:
c001b8c4:	55                   	push   ebp
c001b8c5:	57                   	push   edi
c001b8c6:	56                   	push   esi
c001b8c7:	53                   	push   ebx
c001b8c8:	31 db                	xor    ebx,ebx
c001b8ca:	83 ec 0c             	sub    esp,0xc
c001b8cd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b8d1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b8d6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b8de:	89 e8                	mov    eax,ebp
c001b8e0:	84 c0                	test   al,al
c001b8e2:	75 30                	jne    c001b914 <IDE::waitInterrupt(unsigned char)+0x50>
c001b8e4:	50                   	push   eax
c001b8e5:	6a 0c                	push   0xc
c001b8e7:	56                   	push   esi
c001b8e8:	57                   	push   edi
c001b8e9:	e8 22 ff ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001b8ee:	83 c4 10             	add    esp,0x10
c001b8f1:	a8 01                	test   al,0x1
c001b8f3:	75 27                	jne    c001b91c <IDE::waitInterrupt(unsigned char)+0x58>
c001b8f5:	f6 c3 04             	test   bl,0x4
c001b8f8:	75 12                	jne    c001b90c <IDE::waitInterrupt(unsigned char)+0x48>
c001b8fa:	83 fb 32             	cmp    ebx,0x32
c001b8fd:	7e 0d                	jle    c001b90c <IDE::waitInterrupt(unsigned char)+0x48>
c001b8ff:	83 ec 0c             	sub    esp,0xc
c001b902:	6a 64                	push   0x64
c001b904:	e8 73 a4 ff ff       	call   c0015d7c <milliTenthSleep(unsigned int)>
c001b909:	83 c4 10             	add    esp,0x10
c001b90c:	83 fb 3c             	cmp    ebx,0x3c
c001b90f:	74 0b                	je     c001b91c <IDE::waitInterrupt(unsigned char)+0x58>
c001b911:	43                   	inc    ebx
c001b912:	eb c2                	jmp    c001b8d6 <IDE::waitInterrupt(unsigned char)+0x12>
c001b914:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b91c:	83 c4 0c             	add    esp,0xc
c001b91f:	89 e8                	mov    eax,ebp
c001b921:	5b                   	pop    ebx
c001b922:	5e                   	pop    esi
c001b923:	5f                   	pop    edi
c001b924:	5d                   	pop    ebp
c001b925:	c3                   	ret    

c001b926 <ideChannel0IRQHandler(regs*, void*)>:
c001b926:	83 ec 10             	sub    esp,0x10
c001b929:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b92d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b934:	6a 07                	push   0x7
c001b936:	6a 00                	push   0x0
c001b938:	50                   	push   eax
c001b939:	e8 d2 fe ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001b93e:	83 c4 1c             	add    esp,0x1c
c001b941:	c3                   	ret    

c001b942 <ideChannel1IRQHandler(regs*, void*)>:
c001b942:	83 ec 10             	sub    esp,0x10
c001b945:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b949:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b950:	6a 07                	push   0x7
c001b952:	6a 01                	push   0x1
c001b954:	50                   	push   eax
c001b955:	e8 b6 fe ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001b95a:	83 c4 1c             	add    esp,0x1c
c001b95d:	c3                   	ret    

c001b95e <IDE::enableIRQs(unsigned char, bool)>:
c001b95e:	57                   	push   edi
c001b95f:	b8 02 00 00 00       	mov    eax,0x2
c001b964:	56                   	push   esi
c001b965:	53                   	push   ebx
c001b966:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b96b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b96f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b973:	74 02                	je     c001b977 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b975:	31 c0                	xor    eax,eax
c001b977:	0f b6 db             	movzx  ebx,bl
c001b97a:	bf 04 00 00 00       	mov    edi,0x4
c001b97f:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001b986:	50                   	push   eax
c001b987:	6a 0c                	push   0xc
c001b989:	53                   	push   ebx
c001b98a:	56                   	push   esi
c001b98b:	e8 c0 fd ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b990:	83 c4 10             	add    esp,0x10
c001b993:	50                   	push   eax
c001b994:	6a 0c                	push   0xc
c001b996:	53                   	push   ebx
c001b997:	56                   	push   esi
c001b998:	e8 73 fe ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001b99d:	83 c4 10             	add    esp,0x10
c001b9a0:	4f                   	dec    edi
c001b9a1:	75 f0                	jne    c001b993 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001b9a3:	5b                   	pop    ebx
c001b9a4:	5e                   	pop    esi
c001b9a5:	5f                   	pop    edi
c001b9a6:	c3                   	ret    
c001b9a7:	90                   	nop

c001b9a8 <IDE::open(int, int, void*)>:
c001b9a8:	55                   	push   ebp
c001b9a9:	57                   	push   edi
c001b9aa:	56                   	push   esi
c001b9ab:	53                   	push   ebx
c001b9ac:	83 ec 1c             	sub    esp,0x1c
c001b9af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b9b3:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b9ba:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b9c3:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b9cc:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b9d3:	0f 85 da 02 00 00    	jne    c001bcb3 <IDE::open(int, int, void*)+0x30b>
c001b9d9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b9df:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001b9e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9e7:	83 e0 7f             	and    eax,0x7f
c001b9ea:	83 f8 05             	cmp    eax,0x5
c001b9ed:	74 05                	je     c001b9f4 <IDE::open(int, int, void*)+0x4c>
c001b9ef:	83 f8 0f             	cmp    eax,0xf
c001b9f2:	75 32                	jne    c001ba26 <IDE::open(int, int, void*)+0x7e>
c001b9f4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b9fa:	83 e0 fc             	and    eax,0xfffffffc
c001b9fd:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ba04:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ba0a:	83 e0 fc             	and    eax,0xfffffffc
c001ba0d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ba14:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ba1a:	83 e0 fc             	and    eax,0xfffffffc
c001ba1d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ba24:	eb 14                	jmp    c001ba3a <IDE::open(int, int, void*)+0x92>
c001ba26:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ba30:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ba3a:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001ba41:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ba46:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ba4d:	89 fa                	mov    edx,edi
c001ba4f:	89 f1                	mov    ecx,esi
c001ba51:	c1 e1 10             	shl    ecx,0x10
c001ba54:	89 e8                	mov    eax,ebp
c001ba56:	c1 e0 0b             	shl    eax,0xb
c001ba59:	09 c1                	or     ecx,eax
c001ba5b:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ba62:	c1 e0 08             	shl    eax,0x8
c001ba65:	09 c1                	or     ecx,eax
c001ba67:	89 c8                	mov    eax,ecx
c001ba69:	0d 08 00 00 80       	or     eax,0x80000008
c001ba6e:	ef                   	out    dx,eax
c001ba6f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ba74:	ed                   	in     eax,dx
c001ba75:	c1 e8 10             	shr    eax,0x10
c001ba78:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba7d:	0f 84 f9 00 00 00    	je     c001bb7c <IDE::open(int, int, void*)+0x1d4>
c001ba83:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ba89:	89 fa                	mov    edx,edi
c001ba8b:	89 c8                	mov    eax,ecx
c001ba8d:	ef                   	out    dx,eax
c001ba8e:	b0 fe                	mov    al,0xfe
c001ba90:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ba95:	ee                   	out    dx,al
c001ba96:	89 c8                	mov    eax,ecx
c001ba98:	89 fa                	mov    edx,edi
c001ba9a:	ef                   	out    dx,eax
c001ba9b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001baa0:	ed                   	in     eax,dx
c001baa1:	3c fe                	cmp    al,0xfe
c001baa3:	0f 85 a4 00 00 00    	jne    c001bb4d <IDE::open(int, int, void*)+0x1a5>
c001baa9:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001baaf:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bab6:	74 30                	je     c001bae8 <IDE::open(int, int, void*)+0x140>
c001bab8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001babe:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bac2:	83 ec 0c             	sub    esp,0xc
c001bac5:	40                   	inc    eax
c001bac6:	0f b6 c0             	movzx  eax,al
c001bac9:	50                   	push   eax
c001baca:	55                   	push   ebp
c001bacb:	56                   	push   esi
c001bacc:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bad2:	51                   	push   ecx
c001bad3:	e8 a8 3a ff ff       	call   c000f580 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bad8:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001badd:	83 c4 1c             	add    esp,0x1c
c001bae0:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bae6:	eb 0a                	jmp    c001baf2 <IDE::open(int, int, void*)+0x14a>
c001bae8:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001baf2:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001baf9:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001bafe:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bb05:	89 ea                	mov    edx,ebp
c001bb07:	c1 e1 10             	shl    ecx,0x10
c001bb0a:	c1 e0 08             	shl    eax,0x8
c001bb0d:	09 c1                	or     ecx,eax
c001bb0f:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bb16:	c1 e0 0b             	shl    eax,0xb
c001bb19:	09 c1                	or     ecx,eax
c001bb1b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bb21:	89 c8                	mov    eax,ecx
c001bb23:	ef                   	out    dx,eax
c001bb24:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001bb2a:	be fc 0c 00 00       	mov    esi,0xcfc
c001bb2f:	89 f2                	mov    edx,esi
c001bb31:	89 f8                	mov    eax,edi
c001bb33:	ee                   	out    dx,al
c001bb34:	89 c8                	mov    eax,ecx
c001bb36:	89 ea                	mov    edx,ebp
c001bb38:	ef                   	out    dx,eax
c001bb39:	89 f2                	mov    edx,esi
c001bb3b:	ed                   	in     eax,dx
c001bb3c:	0f b6 c0             	movzx  eax,al
c001bb3f:	39 f8                	cmp    eax,edi
c001bb41:	74 49                	je     c001bb8c <IDE::open(int, int, void*)+0x1e4>
c001bb43:	83 ec 0c             	sub    esp,0xc
c001bb46:	68 a0 2a 02 c0       	push   0xc0022aa0
c001bb4b:	eb 37                	jmp    c001bb84 <IDE::open(int, int, void*)+0x1dc>
c001bb4d:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bb56:	75 1a                	jne    c001bb72 <IDE::open(int, int, void*)+0x1ca>
c001bb58:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bb5d:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bb62:	74 05                	je     c001bb69 <IDE::open(int, int, void*)+0x1c1>
c001bb64:	83 c0 80             	add    eax,0xffffff80
c001bb67:	75 09                	jne    c001bb72 <IDE::open(int, int, void*)+0x1ca>
c001bb69:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bb70:	eb 1a                	jmp    c001bb8c <IDE::open(int, int, void*)+0x1e4>
c001bb72:	83 ec 0c             	sub    esp,0xc
c001bb75:	68 a8 2a 02 c0       	push   0xc0022aa8
c001bb7a:	eb 08                	jmp    c001bb84 <IDE::open(int, int, void*)+0x1dc>
c001bb7c:	83 ec 0c             	sub    esp,0xc
c001bb7f:	68 d9 2a 02 c0       	push   0xc0022ad9
c001bb84:	e8 d4 55 ff ff       	call   c001115d <KePanic(char const*)>
c001bb89:	83 c4 10             	add    esp,0x10
c001bb8c:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bb93:	74 1a                	je     c001bbaf <IDE::open(int, int, void*)+0x207>
c001bb95:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bb9b:	83 e0 fc             	and    eax,0xfffffffc
c001bb9e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bba5:	83 c0 08             	add    eax,0x8
c001bba8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bbaf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bbb5:	89 c2                	mov    edx,eax
c001bbb7:	83 e2 0f             	and    edx,0xf
c001bbba:	83 fa 08             	cmp    edx,0x8
c001bbbd:	75 0a                	jne    c001bbc9 <IDE::open(int, int, void*)+0x221>
c001bbbf:	83 e8 02             	sub    eax,0x2
c001bbc2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bbc9:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bbcf:	89 c2                	mov    edx,eax
c001bbd1:	83 e2 0f             	and    edx,0xf
c001bbd4:	83 fa 08             	cmp    edx,0x8
c001bbd7:	75 0a                	jne    c001bbe3 <IDE::open(int, int, void*)+0x23b>
c001bbd9:	83 e8 02             	sub    eax,0x2
c001bbdc:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bbe3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bbea:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bbf1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bbf4:	89 d0                	mov    eax,edx
c001bbf6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bbfa:	8d 7a 01             	lea    edi,[edx+0x1]
c001bbfd:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bc01:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc05:	83 e1 3f             	and    ecx,0x3f
c001bc08:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bc0c:	89 f9                	mov    ecx,edi
c001bc0e:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bc15:	8d 78 02             	lea    edi,[eax+0x2]
c001bc18:	0f b6 c9             	movzx  ecx,cl
c001bc1b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc1e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bc22:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc26:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bc2a:	83 e2 3f             	and    edx,0x3f
c001bc2d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bc31:	89 f9                	mov    ecx,edi
c001bc33:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bc39:	8d 78 03             	lea    edi,[eax+0x3]
c001bc3c:	0f b6 d1             	movzx  edx,cl
c001bc3f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc42:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bc46:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc4a:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc4e:	83 e1 3f             	and    ecx,0x3f
c001bc51:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bc55:	89 f9                	mov    ecx,edi
c001bc57:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bc5d:	8d 78 04             	lea    edi,[eax+0x4]
c001bc60:	0f b6 c9             	movzx  ecx,cl
c001bc63:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc66:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bc6a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc6e:	89 fa                	mov    edx,edi
c001bc70:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bc76:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bc7a:	83 e2 3f             	and    edx,0x3f
c001bc7d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bc81:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bc88:	66 85 f6             	test   si,si
c001bc8b:	74 65                	je     c001bcf2 <IDE::open(int, int, void*)+0x34a>
c001bc8d:	89 f9                	mov    ecx,edi
c001bc8f:	83 c0 05             	add    eax,0x5
c001bc92:	0f b6 d1             	movzx  edx,cl
c001bc95:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc98:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc9c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bca0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bca6:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bcaa:	83 e0 3f             	and    eax,0x3f
c001bcad:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bcb1:	eb 3f                	jmp    c001bcf2 <IDE::open(int, int, void*)+0x34a>
c001bcb3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bcba:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bcc0:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bcc7:	05 06 02 00 00       	add    eax,0x206
c001bccc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bcd3:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bcda:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bce1:	05 06 02 00 00       	add    eax,0x206
c001bce6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bced:	e9 bd fe ff ff       	jmp    c001bbaf <IDE::open(int, int, void*)+0x207>
c001bcf2:	50                   	push   eax
c001bcf3:	50                   	push   eax
c001bcf4:	6a 00                	push   0x0
c001bcf6:	53                   	push   ebx
c001bcf7:	e8 2e fa ff ff       	call   c001b72a <IDE::prepareInterrupt(unsigned char)>
c001bcfc:	5a                   	pop    edx
c001bcfd:	59                   	pop    ecx
c001bcfe:	6a 01                	push   0x1
c001bd00:	53                   	push   ebx
c001bd01:	e8 24 fa ff ff       	call   c001b72a <IDE::prepareInterrupt(unsigned char)>
c001bd06:	83 c4 0c             	add    esp,0xc
c001bd09:	6a 00                	push   0x0
c001bd0b:	6a 00                	push   0x0
c001bd0d:	53                   	push   ebx
c001bd0e:	e8 4b fc ff ff       	call   c001b95e <IDE::enableIRQs(unsigned char, bool)>
c001bd13:	83 c4 0c             	add    esp,0xc
c001bd16:	6a 00                	push   0x0
c001bd18:	6a 01                	push   0x1
c001bd1a:	53                   	push   ebx
c001bd1b:	e8 3e fc ff ff       	call   c001b95e <IDE::enableIRQs(unsigned char, bool)>
c001bd20:	83 c4 10             	add    esp,0x10
c001bd23:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bd2a:	74 34                	je     c001bd60 <IDE::open(int, int, void*)+0x3b8>
c001bd2c:	83 ec 0c             	sub    esp,0xc
c001bd2f:	53                   	push   ebx
c001bd30:	6a 01                	push   0x1
c001bd32:	68 26 b9 01 c0       	push   0xc001b926
c001bd37:	6a 0e                	push   0xe
c001bd39:	53                   	push   ebx
c001bd3a:	e8 51 08 ff ff       	call   c000c590 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd3f:	83 c4 14             	add    esp,0x14
c001bd42:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bd48:	53                   	push   ebx
c001bd49:	6a 01                	push   0x1
c001bd4b:	68 42 b9 01 c0       	push   0xc001b942
c001bd50:	6a 0f                	push   0xf
c001bd52:	53                   	push   ebx
c001bd53:	e8 38 08 ff ff       	call   c000c590 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd58:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bd5e:	eb 38                	jmp    c001bd98 <IDE::open(int, int, void*)+0x3f0>
c001bd60:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bd6a:	83 ec 0c             	sub    esp,0xc
c001bd6d:	53                   	push   ebx
c001bd6e:	6a 00                	push   0x0
c001bd70:	68 26 b9 01 c0       	push   0xc001b926
c001bd75:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bd7b:	53                   	push   ebx
c001bd7c:	e8 0f 08 ff ff       	call   c000c590 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd81:	83 c4 14             	add    esp,0x14
c001bd84:	53                   	push   ebx
c001bd85:	6a 00                	push   0x0
c001bd87:	68 42 b9 01 c0       	push   0xc001b942
c001bd8c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bd92:	53                   	push   ebx
c001bd93:	e8 f8 07 ff ff       	call   c000c590 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd98:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd9a:	83 c4 20             	add    esp,0x20
c001bd9d:	83 ec 0c             	sub    esp,0xc
c001bda0:	53                   	push   ebx
c001bda1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bda4:	83 c4 0c             	add    esp,0xc
c001bda7:	6a 07                	push   0x7
c001bda9:	6a 00                	push   0x0
c001bdab:	53                   	push   ebx
c001bdac:	e8 5f fa ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001bdb1:	83 c4 0c             	add    esp,0xc
c001bdb4:	6a 07                	push   0x7
c001bdb6:	6a 01                	push   0x1
c001bdb8:	53                   	push   ebx
c001bdb9:	e8 52 fa ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001bdbe:	83 c4 0c             	add    esp,0xc
c001bdc1:	6a 01                	push   0x1
c001bdc3:	6a 00                	push   0x0
c001bdc5:	53                   	push   ebx
c001bdc6:	e8 93 fb ff ff       	call   c001b95e <IDE::enableIRQs(unsigned char, bool)>
c001bdcb:	83 c4 0c             	add    esp,0xc
c001bdce:	6a 01                	push   0x1
c001bdd0:	6a 01                	push   0x1
c001bdd2:	53                   	push   ebx
c001bdd3:	e8 86 fb ff ff       	call   c001b95e <IDE::enableIRQs(unsigned char, bool)>
c001bdd8:	83 c4 2c             	add    esp,0x2c
c001bddb:	31 c0                	xor    eax,eax
c001bddd:	5b                   	pop    ebx
c001bdde:	5e                   	pop    esi
c001bddf:	5f                   	pop    edi
c001bde0:	5d                   	pop    ebp
c001bde1:	c3                   	ret    

c001bde2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bde2:	55                   	push   ebp
c001bde3:	57                   	push   edi
c001bde4:	56                   	push   esi
c001bde5:	53                   	push   ebx
c001bde6:	83 ec 1c             	sub    esp,0x1c
c001bde9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bded:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bdf1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bdf5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bdf9:	8d 42 f8             	lea    eax,[edx-0x8]
c001bdfc:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001be00:	3c 03                	cmp    al,0x3
c001be02:	77 5a                	ja     c001be5e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001be04:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001be08:	0f b6 db             	movzx  ebx,bl
c001be0b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001be0f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001be12:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be17:	0c 80                	or     al,0x80
c001be19:	50                   	push   eax
c001be1a:	6a 0c                	push   0xc
c001be1c:	53                   	push   ebx
c001be1d:	56                   	push   esi
c001be1e:	e8 2d f9 ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be23:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be27:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001be2c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be30:	0f b6 d2             	movzx  edx,dl
c001be33:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be37:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001be39:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be3e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001be42:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001be46:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be4e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be52:	83 c4 2c             	add    esp,0x2c
c001be55:	5b                   	pop    ebx
c001be56:	5e                   	pop    esi
c001be57:	5f                   	pop    edi
c001be58:	5d                   	pop    ebp
c001be59:	e9 f2 f8 ff ff       	jmp    c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be5e:	0f b6 c2             	movzx  eax,dl
c001be61:	83 f8 07             	cmp    eax,0x7
c001be64:	77 12                	ja     c001be78 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001be66:	0f b6 db             	movzx  ebx,bl
c001be69:	0f b6 c2             	movzx  eax,dl
c001be6c:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001be74:	01 c2                	add    edx,eax
c001be76:	eb 2f                	jmp    c001bea7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001be78:	83 f8 0d             	cmp    eax,0xd
c001be7b:	77 13                	ja     c001be90 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001be7d:	0f b6 db             	movzx  ebx,bl
c001be80:	0f b6 d2             	movzx  edx,dl
c001be83:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001be8a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001be8e:	eb 17                	jmp    c001bea7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001be90:	83 f8 15             	cmp    eax,0x15
c001be93:	77 14                	ja     c001bea9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001be95:	0f b6 db             	movzx  ebx,bl
c001be98:	0f b6 d2             	movzx  edx,dl
c001be9b:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001bea3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bea7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bea9:	83 c4 1c             	add    esp,0x1c
c001beac:	5b                   	pop    ebx
c001bead:	5e                   	pop    esi
c001beae:	5f                   	pop    edi
c001beaf:	5d                   	pop    ebp
c001beb0:	c3                   	ret    
c001beb1:	90                   	nop

c001beb2 <IDE::detect()>:
c001beb2:	55                   	push   ebp
c001beb3:	57                   	push   edi
c001beb4:	56                   	push   esi
c001beb5:	53                   	push   ebx
c001beb6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bebc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bec3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001beca:	0f 85 9e 02 00 00    	jne    c001c16e <IDE::detect()+0x2bc>
c001bed0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bed7:	31 f6                	xor    esi,esi
c001bed9:	31 ff                	xor    edi,edi
c001bedb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bee3:	89 f8                	mov    eax,edi
c001bee5:	c1 e0 06             	shl    eax,0x6
c001bee8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bef0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bef4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001befc:	c1 e0 04             	shl    eax,0x4
c001beff:	83 c8 a0             	or     eax,0xffffffa0
c001bf02:	0f b6 c0             	movzx  eax,al
c001bf05:	50                   	push   eax
c001bf06:	6a 06                	push   0x6
c001bf08:	56                   	push   esi
c001bf09:	53                   	push   ebx
c001bf0a:	e8 41 f8 ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf0f:	83 c4 0c             	add    esp,0xc
c001bf12:	6a 0c                	push   0xc
c001bf14:	56                   	push   esi
c001bf15:	53                   	push   ebx
c001bf16:	e8 f5 f8 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001bf1b:	83 c4 0c             	add    esp,0xc
c001bf1e:	6a 0c                	push   0xc
c001bf20:	56                   	push   esi
c001bf21:	53                   	push   ebx
c001bf22:	e8 e9 f8 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001bf27:	83 c4 0c             	add    esp,0xc
c001bf2a:	6a 0c                	push   0xc
c001bf2c:	56                   	push   esi
c001bf2d:	53                   	push   ebx
c001bf2e:	e8 dd f8 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001bf33:	83 c4 0c             	add    esp,0xc
c001bf36:	6a 0c                	push   0xc
c001bf38:	56                   	push   esi
c001bf39:	53                   	push   ebx
c001bf3a:	e8 d1 f8 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001bf3f:	68 ec 00 00 00       	push   0xec
c001bf44:	6a 07                	push   0x7
c001bf46:	56                   	push   esi
c001bf47:	53                   	push   ebx
c001bf48:	e8 03 f8 ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf4d:	83 c4 1c             	add    esp,0x1c
c001bf50:	6a 0c                	push   0xc
c001bf52:	56                   	push   esi
c001bf53:	53                   	push   ebx
c001bf54:	e8 b7 f8 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001bf59:	83 c4 0c             	add    esp,0xc
c001bf5c:	6a 0c                	push   0xc
c001bf5e:	56                   	push   esi
c001bf5f:	53                   	push   ebx
c001bf60:	e8 ab f8 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001bf65:	83 c4 0c             	add    esp,0xc
c001bf68:	6a 0c                	push   0xc
c001bf6a:	56                   	push   esi
c001bf6b:	53                   	push   ebx
c001bf6c:	e8 9f f8 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001bf71:	83 c4 0c             	add    esp,0xc
c001bf74:	6a 0c                	push   0xc
c001bf76:	56                   	push   esi
c001bf77:	53                   	push   ebx
c001bf78:	e8 93 f8 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001bf7d:	83 c4 0c             	add    esp,0xc
c001bf80:	6a 0c                	push   0xc
c001bf82:	56                   	push   esi
c001bf83:	53                   	push   ebx
c001bf84:	e8 87 f8 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001bf89:	83 c4 10             	add    esp,0x10
c001bf8c:	84 c0                	test   al,al
c001bf8e:	0f 84 61 01 00 00    	je     c001c0f5 <IDE::detect()+0x243>
c001bf94:	31 ed                	xor    ebp,ebp
c001bf96:	50                   	push   eax
c001bf97:	6a 0c                	push   0xc
c001bf99:	56                   	push   esi
c001bf9a:	53                   	push   ebx
c001bf9b:	e8 70 f8 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001bfa0:	83 c4 10             	add    esp,0x10
c001bfa3:	a8 01                	test   al,0x1
c001bfa5:	0f 85 6b 01 00 00    	jne    c001c116 <IDE::detect()+0x264>
c001bfab:	a8 80                	test   al,0x80
c001bfad:	75 04                	jne    c001bfb3 <IDE::detect()+0x101>
c001bfaf:	a8 08                	test   al,0x8
c001bfb1:	75 23                	jne    c001bfd6 <IDE::detect()+0x124>
c001bfb3:	45                   	inc    ebp
c001bfb4:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001bfba:	7e da                	jle    c001bf96 <IDE::detect()+0xe4>
c001bfbc:	83 ec 0c             	sub    esp,0xc
c001bfbf:	6a 32                	push   0x32
c001bfc1:	e8 b6 9d ff ff       	call   c0015d7c <milliTenthSleep(unsigned int)>
c001bfc6:	83 c4 10             	add    esp,0x10
c001bfc9:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001bfcf:	75 c5                	jne    c001bf96 <IDE::detect()+0xe4>
c001bfd1:	e9 40 01 00 00       	jmp    c001c116 <IDE::detect()+0x264>
c001bfd6:	31 c9                	xor    ecx,ecx
c001bfd8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001bfdc:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001bfe0:	83 ec 0c             	sub    esp,0xc
c001bfe3:	68 80 00 00 00       	push   0x80
c001bfe8:	55                   	push   ebp
c001bfe9:	6a 00                	push   0x0
c001bfeb:	56                   	push   esi
c001bfec:	53                   	push   ebx
c001bfed:	e8 f0 fd ff ff       	call   c001bde2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001bff2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001bff7:	89 f8                	mov    eax,edi
c001bff9:	c1 e0 06             	shl    eax,0x6
c001bffc:	01 d8                	add    eax,ebx
c001bffe:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c005:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c00c:	89 d1                	mov    ecx,edx
c001c00e:	89 f2                	mov    edx,esi
c001c010:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c016:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c01a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c020:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c024:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c02b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c033:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c03a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c042:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c048:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c04f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c055:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c059:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c05d:	83 c4 20             	add    esp,0x20
c001c060:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c063:	83 c5 02             	add    ebp,0x2
c001c066:	83 c0 02             	add    eax,0x2
c001c069:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c06f:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c072:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c078:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c07c:	75 e2                	jne    c001c060 <IDE::detect()+0x1ae>
c001c07e:	89 f8                	mov    eax,edi
c001c080:	c1 e0 06             	shl    eax,0x6
c001c083:	01 d8                	add    eax,ebx
c001c085:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c08c:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c093:	c1 ea 09             	shr    edx,0x9
c001c096:	83 e2 01             	and    edx,0x1
c001c099:	80 e1 01             	and    cl,0x1
c001c09c:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c0a2:	75 22                	jne    c001c0c6 <IDE::detect()+0x214>
c001c0a4:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c0ab:	74 47                	je     c001c0f4 <IDE::detect()+0x242>
c001c0ad:	83 ec 0c             	sub    esp,0xc
c001c0b0:	68 7c 01 00 00       	push   0x17c
c001c0b5:	e8 19 ba fe ff       	call   c0007ad3 <malloc>
c001c0ba:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0bd:	89 c5                	mov    ebp,eax
c001c0bf:	e8 16 05 00 00       	call   c001c5da <ATA::ATA()>
c001c0c4:	eb 17                	jmp    c001c0dd <IDE::detect()+0x22b>
c001c0c6:	83 ec 0c             	sub    esp,0xc
c001c0c9:	68 84 01 00 00       	push   0x184
c001c0ce:	e8 00 ba fe ff       	call   c0007ad3 <malloc>
c001c0d3:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0d6:	89 c5                	mov    ebp,eax
c001c0d8:	e8 6f 0e 00 00       	call   c001cf4c <ATAPI::ATAPI()>
c001c0dd:	5a                   	pop    edx
c001c0de:	59                   	pop    ecx
c001c0df:	55                   	push   ebp
c001c0e0:	53                   	push   ebx
c001c0e1:	e8 fe 04 ff ff       	call   c000c5e4 <Device::addChild(Device*)>
c001c0e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c0e9:	53                   	push   ebx
c001c0ea:	57                   	push   edi
c001c0eb:	6a 00                	push   0x0
c001c0ed:	55                   	push   ebp
c001c0ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c0f1:	83 c4 20             	add    esp,0x20
c001c0f4:	47                   	inc    edi
c001c0f5:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c0fa:	74 0d                	je     c001c109 <IDE::detect()+0x257>
c001c0fc:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c104:	e9 da fd ff ff       	jmp    c001bee3 <IDE::detect()+0x31>
c001c109:	4e                   	dec    esi
c001c10a:	74 62                	je     c001c16e <IDE::detect()+0x2bc>
c001c10c:	be 01 00 00 00       	mov    esi,0x1
c001c111:	e9 c5 fd ff ff       	jmp    c001bedb <IDE::detect()+0x29>
c001c116:	50                   	push   eax
c001c117:	6a 04                	push   0x4
c001c119:	56                   	push   esi
c001c11a:	53                   	push   ebx
c001c11b:	e8 f0 f6 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001c120:	83 c4 0c             	add    esp,0xc
c001c123:	6a 05                	push   0x5
c001c125:	56                   	push   esi
c001c126:	53                   	push   ebx
c001c127:	89 c5                	mov    ebp,eax
c001c129:	e8 e2 f6 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001c12e:	89 e9                	mov    ecx,ebp
c001c130:	83 c4 10             	add    esp,0x10
c001c133:	0f b6 e9             	movzx  ebp,cl
c001c136:	83 fd 14             	cmp    ebp,0x14
c001c139:	74 2d                	je     c001c168 <IDE::detect()+0x2b6>
c001c13b:	83 fd 69             	cmp    ebp,0x69
c001c13e:	75 b5                	jne    c001c0f5 <IDE::detect()+0x243>
c001c140:	3c 96                	cmp    al,0x96
c001c142:	75 b1                	jne    c001c0f5 <IDE::detect()+0x243>
c001c144:	68 a1 00 00 00       	push   0xa1
c001c149:	6a 07                	push   0x7
c001c14b:	56                   	push   esi
c001c14c:	53                   	push   ebx
c001c14d:	e8 fe f5 ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c152:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c159:	e8 1e 9c ff ff       	call   c0015d7c <milliTenthSleep(unsigned int)>
c001c15e:	83 c4 10             	add    esp,0x10
c001c161:	b1 01                	mov    cl,0x1
c001c163:	e9 70 fe ff ff       	jmp    c001bfd8 <IDE::detect()+0x126>
c001c168:	3c eb                	cmp    al,0xeb
c001c16a:	75 cf                	jne    c001c13b <IDE::detect()+0x289>
c001c16c:	eb d6                	jmp    c001c144 <IDE::detect()+0x292>
c001c16e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c174:	5b                   	pop    ebx
c001c175:	5e                   	pop    esi
c001c176:	5f                   	pop    edi
c001c177:	5d                   	pop    ebp
c001c178:	c3                   	ret    
c001c179:	90                   	nop

c001c17a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c17a:	55                   	push   ebp
c001c17b:	57                   	push   edi
c001c17c:	56                   	push   esi
c001c17d:	53                   	push   ebx
c001c17e:	83 ec 1c             	sub    esp,0x1c
c001c181:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c185:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c189:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c18d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c191:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c195:	88 c3                	mov    bl,al
c001c197:	25 ff 00 00 00       	and    eax,0xff
c001c19c:	0f 84 88 00 00 00    	je     c001c22a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c1a2:	83 ec 0c             	sub    esp,0xc
c001c1a5:	89 c7                	mov    edi,eax
c001c1a7:	68 03 2b 02 c0       	push   0xc0022b03
c001c1ac:	e8 59 e7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c1b1:	83 c4 10             	add    esp,0x10
c001c1b4:	83 ff 01             	cmp    edi,0x1
c001c1b7:	74 6b                	je     c001c224 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c1b9:	83 ff 02             	cmp    edi,0x2
c001c1bc:	75 58                	jne    c001c216 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c1be:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c1c3:	50                   	push   eax
c001c1c4:	6a 01                	push   0x1
c001c1c6:	01 ff                	add    edi,edi
c001c1c8:	09 fe                	or     esi,edi
c001c1ca:	89 f0                	mov    eax,esi
c001c1cc:	0f b6 f0             	movzx  esi,al
c001c1cf:	c1 e6 06             	shl    esi,0x6
c001c1d2:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c1da:	50                   	push   eax
c001c1db:	55                   	push   ebp
c001c1dc:	e8 2f f6 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001c1e1:	83 c4 10             	add    esp,0x10
c001c1e4:	a8 01                	test   al,0x1
c001c1e6:	74 02                	je     c001c1ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c1e8:	b3 07                	mov    bl,0x7
c001c1ea:	a8 02                	test   al,0x2
c001c1ec:	74 02                	je     c001c1f0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c1ee:	b3 03                	mov    bl,0x3
c001c1f0:	a8 04                	test   al,0x4
c001c1f2:	74 02                	je     c001c1f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c1f4:	b3 14                	mov    bl,0x14
c001c1f6:	a8 08                	test   al,0x8
c001c1f8:	74 02                	je     c001c1fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c1fa:	b3 03                	mov    bl,0x3
c001c1fc:	a8 10                	test   al,0x10
c001c1fe:	74 02                	je     c001c202 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c200:	b3 15                	mov    bl,0x15
c001c202:	a8 20                	test   al,0x20
c001c204:	74 02                	je     c001c208 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c206:	b3 03                	mov    bl,0x3
c001c208:	a8 40                	test   al,0x40
c001c20a:	74 02                	je     c001c20e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c20c:	b3 16                	mov    bl,0x16
c001c20e:	a8 80                	test   al,0x80
c001c210:	74 18                	je     c001c22a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c212:	b3 0d                	mov    bl,0xd
c001c214:	eb 14                	jmp    c001c22a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c216:	83 ff 03             	cmp    edi,0x3
c001c219:	74 0d                	je     c001c228 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c21b:	83 ff 04             	cmp    edi,0x4
c001c21e:	75 0a                	jne    c001c22a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c220:	b3 08                	mov    bl,0x8
c001c222:	eb 06                	jmp    c001c22a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c224:	b3 13                	mov    bl,0x13
c001c226:	eb 02                	jmp    c001c22a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c228:	b3 17                	mov    bl,0x17
c001c22a:	83 c4 1c             	add    esp,0x1c
c001c22d:	88 d8                	mov    al,bl
c001c22f:	5b                   	pop    ebx
c001c230:	5e                   	pop    esi
c001c231:	5f                   	pop    edi
c001c232:	5d                   	pop    ebp
c001c233:	c3                   	ret    

c001c234 <IDE::polling(unsigned char, unsigned int)>:
c001c234:	57                   	push   edi
c001c235:	56                   	push   esi
c001c236:	53                   	push   ebx
c001c237:	bb 04 00 00 00       	mov    ebx,0x4
c001c23c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c240:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c245:	52                   	push   edx
c001c246:	6a 0c                	push   0xc
c001c248:	56                   	push   esi
c001c249:	57                   	push   edi
c001c24a:	e8 c1 f5 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001c24f:	83 c4 10             	add    esp,0x10
c001c252:	4b                   	dec    ebx
c001c253:	75 f0                	jne    c001c245 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c255:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c25a:	50                   	push   eax
c001c25b:	6a 0c                	push   0xc
c001c25d:	56                   	push   esi
c001c25e:	57                   	push   edi
c001c25f:	e8 ac f5 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001c264:	83 c4 10             	add    esp,0x10
c001c267:	a8 01                	test   al,0x1
c001c269:	75 17                	jne    c001c282 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c26b:	a8 20                	test   al,0x20
c001c26d:	75 0f                	jne    c001c27e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c26f:	4b                   	dec    ebx
c001c270:	74 10                	je     c001c282 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c272:	a8 80                	test   al,0x80
c001c274:	75 e4                	jne    c001c25a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c276:	a8 08                	test   al,0x8
c001c278:	74 e0                	je     c001c25a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c27a:	31 c0                	xor    eax,eax
c001c27c:	eb 06                	jmp    c001c284 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c27e:	b0 01                	mov    al,0x1
c001c280:	eb 02                	jmp    c001c284 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c282:	b0 02                	mov    al,0x2
c001c284:	5b                   	pop    ebx
c001c285:	5e                   	pop    esi
c001c286:	5f                   	pop    edi
c001c287:	c3                   	ret    

c001c288 <SATABus::close(int, int, void*)>:
c001c288:	31 c0                	xor    eax,eax
c001c28a:	c3                   	ret    
c001c28b:	90                   	nop

c001c28c <SATABus::detect()>:
c001c28c:	c3                   	ret    
c001c28d:	90                   	nop

c001c28e <SATABus::SATABus()>:
c001c28e:	83 ec 0c             	sub    esp,0xc
c001c291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c295:	83 ec 08             	sub    esp,0x8
c001c298:	68 3c 2b 02 c0       	push   0xc0022b3c
c001c29d:	50                   	push   eax
c001c29e:	e8 85 06 ff ff       	call   c000c928 <HardDiskController::HardDiskController(char const*)>
c001c2a3:	83 c4 10             	add    esp,0x10
c001c2a6:	ba 68 2b 02 c0       	mov    edx,0xc0022b68
c001c2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2af:	89 10                	mov    DWORD PTR [eax],edx
c001c2b1:	83 ec 0c             	sub    esp,0xc
c001c2b4:	6a 50                	push   0x50
c001c2b6:	e8 f6 bb fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c2bb:	83 c4 10             	add    esp,0x10
c001c2be:	89 c2                	mov    edx,eax
c001c2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2c4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c2ca:	83 ec 0c             	sub    esp,0xc
c001c2cd:	6a 50                	push   0x50
c001c2cf:	e8 21 d3 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c2d4:	83 c4 10             	add    esp,0x10
c001c2d7:	89 c2                	mov    edx,eax
c001c2d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2dd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c2e3:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c2e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c2ec:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c2f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c2f6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c2fc:	83 ec 0c             	sub    esp,0xc
c001c2ff:	6a 03                	push   0x3
c001c301:	6a 50                	push   0x50
c001c303:	51                   	push   ecx
c001c304:	52                   	push   edx
c001c305:	50                   	push   eax
c001c306:	e8 fd db fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c30b:	83 c4 20             	add    esp,0x20
c001c30e:	90                   	nop
c001c30f:	83 c4 0c             	add    esp,0xc
c001c312:	c3                   	ret    
c001c313:	90                   	nop

c001c314 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c314:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c318:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c31b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c31e:	09 c2                	or     edx,eax
c001c320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c324:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c32a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c32c:	31 c0                	xor    eax,eax
c001c32e:	c1 e9 08             	shr    ecx,0x8
c001c331:	83 e1 0f             	and    ecx,0xf
c001c334:	39 c8                	cmp    eax,ecx
c001c336:	74 0a                	je     c001c342 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c338:	f6 c2 01             	test   dl,0x1
c001c33b:	74 08                	je     c001c345 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c33d:	d1 ea                	shr    edx,1
c001c33f:	40                   	inc    eax
c001c340:	eb f2                	jmp    c001c334 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c342:	83 c8 ff             	or     eax,0xffffffff
c001c345:	c3                   	ret    

c001c346 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c346:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c34a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c34d:	89 c2                	mov    edx,eax
c001c34f:	c1 ea 08             	shr    edx,0x8
c001c352:	83 e2 0f             	and    edx,0xf
c001c355:	4a                   	dec    edx
c001c356:	75 32                	jne    c001c38a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c358:	83 e0 0f             	and    eax,0xf
c001c35b:	83 f8 03             	cmp    eax,0x3
c001c35e:	75 2a                	jne    c001c38a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c360:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c363:	b8 02 00 00 00       	mov    eax,0x2
c001c368:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c36e:	74 1c                	je     c001c38c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c370:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c376:	b8 04 00 00 00       	mov    eax,0x4
c001c37b:	74 0f                	je     c001c38c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c37d:	31 c0                	xor    eax,eax
c001c37f:	83 fa 03             	cmp    edx,0x3
c001c382:	0f 94 c0             	sete   al
c001c385:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c389:	c3                   	ret    
c001c38a:	31 c0                	xor    eax,eax
c001c38c:	c3                   	ret    
c001c38d:	90                   	nop

c001c38e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c38e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c392:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c395:	0f ba e2 0f          	bt     edx,0xf
c001c399:	72 f7                	jb     c001c392 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c39b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c39e:	83 ca 10             	or     edx,0x10
c001c3a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3a4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3a7:	83 ca 01             	or     edx,0x1
c001c3aa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3ad:	c3                   	ret    

c001c3ae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3b2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3b5:	83 e2 fe             	and    edx,0xfffffffe
c001c3b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3bb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3be:	83 e2 ef             	and    edx,0xffffffef
c001c3c1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3c4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3c7:	0f ba e2 0e          	bt     edx,0xe
c001c3cb:	72 f7                	jb     c001c3c4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c3cd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3d0:	0f ba e2 0f          	bt     edx,0xf
c001c3d4:	72 ee                	jb     c001c3c4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c3d6:	c3                   	ret    
c001c3d7:	90                   	nop

c001c3d8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c3d8:	55                   	push   ebp
c001c3d9:	57                   	push   edi
c001c3da:	56                   	push   esi
c001c3db:	53                   	push   ebx
c001c3dc:	83 ec 1c             	sub    esp,0x1c
c001c3df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c3e3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c3e7:	53                   	push   ebx
c001c3e8:	57                   	push   edi
c001c3e9:	e8 c0 ff ff ff       	call   c001c3ae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c3ee:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c3f2:	83 ec 0c             	sub    esp,0xc
c001c3f5:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c3fb:	c1 e5 0a             	shl    ebp,0xa
c001c3fe:	01 e8                	add    eax,ebp
c001c400:	89 03                	mov    DWORD PTR [ebx],eax
c001c402:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c404:	68 00 04 00 00       	push   0x400
c001c409:	6a 00                	push   0x0
c001c40b:	50                   	push   eax
c001c40c:	e8 df 40 fe ff       	call   c00004f0 <memset>
c001c411:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c417:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c41b:	83 c4 1c             	add    esp,0x1c
c001c41e:	01 e8                	add    eax,ebp
c001c420:	89 03                	mov    DWORD PTR [ebx],eax
c001c422:	c1 e6 08             	shl    esi,0x8
c001c425:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c42c:	81 c6 00 80 00 00    	add    esi,0x8000
c001c432:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c438:	01 f0                	add    eax,esi
c001c43a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c43d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c440:	68 00 01 00 00       	push   0x100
c001c445:	6a 00                	push   0x0
c001c447:	50                   	push   eax
c001c448:	e8 a3 40 fe ff       	call   c00004f0 <memset>
c001c44d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c453:	31 d2                	xor    edx,edx
c001c455:	01 f0                	add    eax,esi
c001c457:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c45a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c461:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001c467:	01 ee                	add    esi,ebp
c001c469:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c46d:	83 c4 10             	add    esp,0x10
c001c470:	c1 e5 0d             	shl    ebp,0xd
c001c473:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001c479:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001c47f:	83 c6 20             	add    esi,0x20
c001c482:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c486:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c48c:	01 e8                	add    eax,ebp
c001c48e:	01 d0                	add    eax,edx
c001c490:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c493:	52                   	push   edx
c001c494:	68 00 01 00 00       	push   0x100
c001c499:	6a 00                	push   0x0
c001c49b:	50                   	push   eax
c001c49c:	e8 4f 40 fe ff       	call   c00004f0 <memset>
c001c4a1:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c4a7:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001c4ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4b2:	83 c4 10             	add    esp,0x10
c001c4b5:	01 e8                	add    eax,ebp
c001c4b7:	01 d0                	add    eax,edx
c001c4b9:	81 c2 00 01 00 00    	add    edx,0x100
c001c4bf:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c4c2:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001c4c8:	75 af                	jne    c001c479 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001c4ca:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c4d1:	50                   	push   eax
c001c4d2:	50                   	push   eax
c001c4d3:	53                   	push   ebx
c001c4d4:	57                   	push   edi
c001c4d5:	e8 b4 fe ff ff       	call   c001c38e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c4da:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c4e1:	83 c4 2c             	add    esp,0x2c
c001c4e4:	5b                   	pop    ebx
c001c4e5:	5e                   	pop    esi
c001c4e6:	5f                   	pop    edi
c001c4e7:	5d                   	pop    ebp
c001c4e8:	c3                   	ret    
c001c4e9:	90                   	nop

c001c4ea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c4ea:	55                   	push   ebp
c001c4eb:	57                   	push   edi
c001c4ec:	56                   	push   esi
c001c4ed:	53                   	push   ebx
c001c4ee:	31 db                	xor    ebx,ebx
c001c4f0:	83 ec 0c             	sub    esp,0xc
c001c4f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c4f7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c4fb:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c4fe:	f7 c7 01 00 00 00    	test   edi,0x1
c001c504:	74 7a                	je     c001c580 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c506:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c50a:	89 d8                	mov    eax,ebx
c001c50c:	c1 e0 07             	shl    eax,0x7
c001c50f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c516:	55                   	push   ebp
c001c517:	56                   	push   esi
c001c518:	e8 29 fe ff ff       	call   c001c346 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c51d:	5a                   	pop    edx
c001c51e:	59                   	pop    ecx
c001c51f:	83 f8 01             	cmp    eax,0x1
c001c522:	75 21                	jne    c001c545 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c524:	50                   	push   eax
c001c525:	53                   	push   ebx
c001c526:	55                   	push   ebp
c001c527:	56                   	push   esi
c001c528:	e8 ab fe ff ff       	call   c001c3d8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c52d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c534:	e8 9a b5 fe ff       	call   c0007ad3 <malloc>
c001c539:	89 04 24             	mov    DWORD PTR [esp],eax
c001c53c:	89 c5                	mov    ebp,eax
c001c53e:	e8 c1 10 00 00       	call   c001d604 <SATA::SATA()>
c001c543:	eb 24                	jmp    c001c569 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c545:	83 f8 04             	cmp    eax,0x4
c001c548:	75 36                	jne    c001c580 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c54a:	51                   	push   ecx
c001c54b:	53                   	push   ebx
c001c54c:	55                   	push   ebp
c001c54d:	56                   	push   esi
c001c54e:	e8 85 fe ff ff       	call   c001c3d8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c553:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c55a:	e8 74 b5 fe ff       	call   c0007ad3 <malloc>
c001c55f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c562:	89 c5                	mov    ebp,eax
c001c564:	e8 f5 17 00 00       	call   c001dd5e <SATAPI::SATAPI()>
c001c569:	58                   	pop    eax
c001c56a:	5a                   	pop    edx
c001c56b:	55                   	push   ebp
c001c56c:	56                   	push   esi
c001c56d:	e8 72 00 ff ff       	call   c000c5e4 <Device::addChild(Device*)>
c001c572:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c575:	56                   	push   esi
c001c576:	6a 00                	push   0x0
c001c578:	53                   	push   ebx
c001c579:	55                   	push   ebp
c001c57a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c57d:	83 c4 20             	add    esp,0x20
c001c580:	d1 ef                	shr    edi,1
c001c582:	43                   	inc    ebx
c001c583:	83 fb 20             	cmp    ebx,0x20
c001c586:	0f 85 72 ff ff ff    	jne    c001c4fe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c58c:	83 c4 0c             	add    esp,0xc
c001c58f:	5b                   	pop    ebx
c001c590:	5e                   	pop    esi
c001c591:	5f                   	pop    edi
c001c592:	5d                   	pop    ebp
c001c593:	c3                   	ret    

c001c594 <SATABus::open(int, int, void*)>:
c001c594:	83 ec 14             	sub    esp,0x14
c001c597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c59b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c5a1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c5a7:	52                   	push   edx
c001c5a8:	50                   	push   eax
c001c5a9:	e8 3c ff ff ff       	call   c001c4ea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c5ae:	31 c0                	xor    eax,eax
c001c5b0:	83 c4 1c             	add    esp,0x1c
c001c5b3:	c3                   	ret    

c001c5b4 <ATA::close(int, int, void*)>:
c001c5b4:	83 ec 0c             	sub    esp,0xc
c001c5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c5c1:	85 c0                	test   eax,eax
c001c5c3:	74 0c                	je     c001c5d1 <ATA::close(int, int, void*)+0x1d>
c001c5c5:	8b 10                	mov    edx,DWORD PTR [eax]
c001c5c7:	83 ec 0c             	sub    esp,0xc
c001c5ca:	50                   	push   eax
c001c5cb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c5ce:	83 c4 10             	add    esp,0x10
c001c5d1:	31 c0                	xor    eax,eax
c001c5d3:	83 c4 0c             	add    esp,0xc
c001c5d6:	c3                   	ret    
c001c5d7:	90                   	nop

c001c5d8 <ATA::powerSaving(PowerSavingLevel)>:
c001c5d8:	c3                   	ret    
c001c5d9:	90                   	nop

c001c5da <ATA::ATA()>:
c001c5da:	83 ec 0c             	sub    esp,0xc
c001c5dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e1:	83 ec 04             	sub    esp,0x4
c001c5e4:	68 00 02 00 00       	push   0x200
c001c5e9:	68 35 2c 02 c0       	push   0xc0022c35
c001c5ee:	50                   	push   eax
c001c5ef:	e8 be 03 ff ff       	call   c000c9b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c5f4:	83 c4 10             	add    esp,0x10
c001c5f7:	ba a8 2b 02 c0       	mov    edx,0xc0022ba8
c001c5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c600:	89 10                	mov    DWORD PTR [eax],edx
c001c602:	90                   	nop
c001c603:	83 c4 0c             	add    esp,0xc
c001c606:	c3                   	ret    
c001c607:	90                   	nop

c001c608 <ATA::flush(bool)>:
c001c608:	53                   	push   ebx
c001c609:	83 ec 08             	sub    esp,0x8
c001c60c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c615:	83 f8 01             	cmp    eax,0x1
c001c618:	19 c0                	sbb    eax,eax
c001c61a:	83 e0 fd             	and    eax,0xfffffffd
c001c61d:	05 ea 00 00 00       	add    eax,0xea
c001c622:	50                   	push   eax
c001c623:	6a 07                	push   0x7
c001c625:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c62c:	50                   	push   eax
c001c62d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c633:	e8 18 f1 ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c638:	83 c4 0c             	add    esp,0xc
c001c63b:	6a 00                	push   0x0
c001c63d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c644:	50                   	push   eax
c001c645:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c64b:	e8 e4 fb ff ff       	call   c001c234 <IDE::polling(unsigned char, unsigned int)>
c001c650:	83 c4 18             	add    esp,0x18
c001c653:	5b                   	pop    ebx
c001c654:	c3                   	ret    
c001c655:	90                   	nop

c001c656 <ATA::readyForCommand()>:
c001c656:	56                   	push   esi
c001c657:	53                   	push   ebx
c001c658:	53                   	push   ebx
c001c659:	31 db                	xor    ebx,ebx
c001c65b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c65f:	51                   	push   ecx
c001c660:	6a 0c                	push   0xc
c001c662:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c669:	50                   	push   eax
c001c66a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c670:	e8 9b f1 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001c675:	83 c4 10             	add    esp,0x10
c001c678:	a8 88                	test   al,0x88
c001c67a:	74 1f                	je     c001c69b <ATA::readyForCommand()+0x45>
c001c67c:	43                   	inc    ebx
c001c67d:	83 fb 63             	cmp    ebx,0x63
c001c680:	7e dd                	jle    c001c65f <ATA::readyForCommand()+0x9>
c001c682:	83 ec 0c             	sub    esp,0xc
c001c685:	6a 0a                	push   0xa
c001c687:	e8 f0 96 ff ff       	call   c0015d7c <milliTenthSleep(unsigned int)>
c001c68c:	83 c4 10             	add    esp,0x10
c001c68f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c695:	75 c8                	jne    c001c65f <ATA::readyForCommand()+0x9>
c001c697:	31 c0                	xor    eax,eax
c001c699:	eb 02                	jmp    c001c69d <ATA::readyForCommand()+0x47>
c001c69b:	b0 01                	mov    al,0x1
c001c69d:	5a                   	pop    edx
c001c69e:	5b                   	pop    ebx
c001c69f:	5e                   	pop    esi
c001c6a0:	c3                   	ret    
c001c6a1:	90                   	nop

c001c6a2 <ATA::access(unsigned long long, int, void*, bool)>:
c001c6a2:	55                   	push   ebp
c001c6a3:	57                   	push   edi
c001c6a4:	56                   	push   esi
c001c6a5:	53                   	push   ebx
c001c6a6:	83 ec 2c             	sub    esp,0x2c
c001c6a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c6ad:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c6b1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c6b5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c6b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6bd:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c6c1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c6c5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c6cf:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c6d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c6d9:	c1 e0 06             	shl    eax,0x6
c001c6dc:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c6e4:	74 5b                	je     c001c741 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001c6e6:	89 fa                	mov    edx,edi
c001c6e8:	89 f0                	mov    eax,esi
c001c6ea:	c1 ea 1c             	shr    edx,0x1c
c001c6ed:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001c6f1:	89 d1                	mov    ecx,edx
c001c6f3:	09 c1                	or     ecx,eax
c001c6f5:	74 25                	je     c001c71c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c6f7:	31 ed                	xor    ebp,ebp
c001c6f9:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c700:	89 fa                	mov    edx,edi
c001c702:	89 f0                	mov    eax,esi
c001c704:	0f ad d0             	shrd   eax,edx,cl
c001c707:	d3 ea                	shr    edx,cl
c001c709:	f6 c1 20             	test   cl,0x20
c001c70c:	74 02                	je     c001c710 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c70e:	89 d0                	mov    eax,edx
c001c710:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c714:	45                   	inc    ebp
c001c715:	83 fd 06             	cmp    ebp,0x6
c001c718:	75 df                	jne    c001c6f9 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c71a:	eb 71                	jmp    c001c78d <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001c71c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c721:	89 f0                	mov    eax,esi
c001c723:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c72a:	0f ac f8 10          	shrd   eax,edi,0x10
c001c72e:	bf 01 00 00 00       	mov    edi,0x1
c001c733:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c737:	c1 ee 18             	shr    esi,0x18
c001c73a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c73f:	eb 53                	jmp    c001c794 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c741:	6a 00                	push   0x0
c001c743:	6a 3f                	push   0x3f
c001c745:	57                   	push   edi
c001c746:	56                   	push   esi
c001c747:	e8 d4 2a 00 00       	call   c001f220 <__umoddi3>
c001c74c:	83 c4 10             	add    esp,0x10
c001c74f:	40                   	inc    eax
c001c750:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c754:	6a 00                	push   0x0
c001c756:	68 f0 03 00 00       	push   0x3f0
c001c75b:	57                   	push   edi
c001c75c:	56                   	push   esi
c001c75d:	e8 be 29 00 00       	call   c001f120 <__udivdi3>
c001c762:	83 c4 10             	add    esp,0x10
c001c765:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c76a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c771:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c776:	6a 00                	push   0x0
c001c778:	6a 3f                	push   0x3f
c001c77a:	57                   	push   edi
c001c77b:	31 ff                	xor    edi,edi
c001c77d:	56                   	push   esi
c001c77e:	e8 9d 29 00 00       	call   c001f120 <__udivdi3>
c001c783:	83 c4 10             	add    esp,0x10
c001c786:	83 e0 0f             	and    eax,0xf
c001c789:	89 c6                	mov    esi,eax
c001c78b:	eb 07                	jmp    c001c794 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c78d:	31 f6                	xor    esi,esi
c001c78f:	bf 02 00 00 00       	mov    edi,0x2
c001c794:	50                   	push   eax
c001c795:	6a 00                	push   0x0
c001c797:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c79e:	50                   	push   eax
c001c79f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c7a3:	e8 b6 f1 ff ff       	call   c001b95e <IDE::enableIRQs(unsigned char, bool)>
c001c7a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7ab:	e8 a6 fe ff ff       	call   c001c656 <ATA::readyForCommand()>
c001c7b0:	83 c4 10             	add    esp,0x10
c001c7b3:	84 c0                	test   al,al
c001c7b5:	75 0a                	jne    c001c7c1 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001c7b7:	be 01 00 00 00       	mov    esi,0x1
c001c7bc:	e9 9b 02 00 00       	jmp    c001ca5c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c7c1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c7c7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c7cd:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c7d4:	c1 e0 04             	shl    eax,0x4
c001c7d7:	09 c6                	or     esi,eax
c001c7d9:	f7 c7 03 00 00 00    	test   edi,0x3
c001c7df:	75 05                	jne    c001c7e6 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001c7e1:	83 ce a0             	or     esi,0xffffffa0
c001c7e4:	eb 03                	jmp    c001c7e9 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c7e6:	83 ce e0             	or     esi,0xffffffe0
c001c7e9:	89 f0                	mov    eax,esi
c001c7eb:	0f b6 f0             	movzx  esi,al
c001c7ee:	56                   	push   esi
c001c7ef:	6a 06                	push   0x6
c001c7f1:	51                   	push   ecx
c001c7f2:	52                   	push   edx
c001c7f3:	e8 58 ef ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7f8:	83 c4 10             	add    esp,0x10
c001c7fb:	6a 00                	push   0x0
c001c7fd:	6a 01                	push   0x1
c001c7ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c806:	50                   	push   eax
c001c807:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c80d:	e8 3e ef ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c812:	89 f8                	mov    eax,edi
c001c814:	83 c4 10             	add    esp,0x10
c001c817:	0f b6 f0             	movzx  esi,al
c001c81a:	83 fe 02             	cmp    esi,0x2
c001c81d:	75 6e                	jne    c001c88d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c81f:	6a 00                	push   0x0
c001c821:	6a 08                	push   0x8
c001c823:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c82a:	50                   	push   eax
c001c82b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c831:	e8 1a ef ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c836:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c83b:	50                   	push   eax
c001c83c:	6a 09                	push   0x9
c001c83e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c845:	50                   	push   eax
c001c846:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c84c:	e8 ff ee ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c851:	83 c4 20             	add    esp,0x20
c001c854:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c859:	50                   	push   eax
c001c85a:	6a 0a                	push   0xa
c001c85c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c863:	50                   	push   eax
c001c864:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c86a:	e8 e1 ee ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c86f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c874:	50                   	push   eax
c001c875:	6a 0b                	push   0xb
c001c877:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c87e:	50                   	push   eax
c001c87f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c885:	e8 c6 ee ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c88a:	83 c4 20             	add    esp,0x20
c001c88d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c892:	50                   	push   eax
c001c893:	6a 02                	push   0x2
c001c895:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c89c:	50                   	push   eax
c001c89d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8a3:	e8 a8 ee ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8a8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c8ad:	50                   	push   eax
c001c8ae:	6a 03                	push   0x3
c001c8b0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8b7:	50                   	push   eax
c001c8b8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8be:	e8 8d ee ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8c3:	83 c4 20             	add    esp,0x20
c001c8c6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c8cb:	50                   	push   eax
c001c8cc:	6a 04                	push   0x4
c001c8ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8d5:	50                   	push   eax
c001c8d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8dc:	e8 6f ee ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c8e6:	50                   	push   eax
c001c8e7:	6a 05                	push   0x5
c001c8e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8f0:	50                   	push   eax
c001c8f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8f7:	e8 54 ee ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8fc:	83 c4 20             	add    esp,0x20
c001c8ff:	83 fe 02             	cmp    esi,0x2
c001c902:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001c907:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001c90c:	85 c9                	test   ecx,ecx
c001c90e:	74 07                	je     c001c917 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c910:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c915:	75 47                	jne    c001c95e <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001c917:	89 f8                	mov    eax,edi
c001c919:	0f b6 f8             	movzx  edi,al
c001c91c:	31 c0                	xor    eax,eax
c001c91e:	83 ff 02             	cmp    edi,0x2
c001c921:	0f 95 c0             	setne  al
c001c924:	89 c6                	mov    esi,eax
c001c926:	74 0c                	je     c001c934 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001c928:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c92d:	b8 30 00 00 00       	mov    eax,0x30
c001c932:	75 2f                	jne    c001c963 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c934:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c938:	83 f2 01             	xor    edx,0x1
c001c93b:	85 c9                	test   ecx,ecx
c001c93d:	74 09                	je     c001c948 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001c93f:	84 d2                	test   dl,dl
c001c941:	b8 24 00 00 00       	mov    eax,0x24
c001c946:	75 1b                	jne    c001c963 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c948:	85 f6                	test   esi,esi
c001c94a:	0f 84 67 fe ff ff    	je     c001c7b7 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c950:	84 d2                	test   dl,dl
c001c952:	b8 20 00 00 00       	mov    eax,0x20
c001c957:	75 0a                	jne    c001c963 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c959:	e9 59 fe ff ff       	jmp    c001c7b7 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c95e:	b8 34 00 00 00       	mov    eax,0x34
c001c963:	50                   	push   eax
c001c964:	6a 07                	push   0x7
c001c966:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c96d:	50                   	push   eax
c001c96e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c974:	e8 d7 ed ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c979:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c97d:	83 c4 10             	add    esp,0x10
c001c980:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001c985:	85 f6                	test   esi,esi
c001c987:	0f 84 b5 00 00 00    	je     c001ca42 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001c98d:	50                   	push   eax
c001c98e:	6a 01                	push   0x1
c001c990:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c997:	50                   	push   eax
c001c998:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c99e:	e8 91 f8 ff ff       	call   c001c234 <IDE::polling(unsigned char, unsigned int)>
c001c9a3:	83 c4 10             	add    esp,0x10
c001c9a6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c9ac:	0f b6 c0             	movzx  eax,al
c001c9af:	85 c0                	test   eax,eax
c001c9b1:	74 1f                	je     c001c9d2 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001c9b3:	50                   	push   eax
c001c9b4:	89 c6                	mov    esi,eax
c001c9b6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c9bd:	0f b6 d2             	movzx  edx,dl
c001c9c0:	50                   	push   eax
c001c9c1:	52                   	push   edx
c001c9c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9c8:	e8 ad f7 ff ff       	call   c001c17a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c9cd:	e9 87 00 00 00       	jmp    c001ca59 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001c9d2:	85 ed                	test   ebp,ebp
c001c9d4:	74 3b                	je     c001ca11 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001c9d6:	31 ff                	xor    edi,edi
c001c9d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c9dc:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001c9e0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001c9e5:	50                   	push   eax
c001c9e6:	50                   	push   eax
c001c9e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9ee:	50                   	push   eax
c001c9ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9f5:	e8 44 ed ff ff       	call   c001b73e <IDE::getBase(unsigned char)>
c001c9fa:	89 c2                	mov    edx,eax
c001c9fc:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001ca01:	66 ef                	out    dx,ax
c001ca03:	47                   	inc    edi
c001ca04:	83 c4 10             	add    esp,0x10
c001ca07:	81 ff 00 01 00 00    	cmp    edi,0x100
c001ca0d:	75 c9                	jne    c001c9d8 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001ca0f:	eb 23                	jmp    c001ca34 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001ca11:	51                   	push   ecx
c001ca12:	0f b6 d2             	movzx  edx,dl
c001ca15:	51                   	push   ecx
c001ca16:	52                   	push   edx
c001ca17:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca1d:	e8 1c ed ff ff       	call   c001b73e <IDE::getBase(unsigned char)>
c001ca22:	b9 00 01 00 00       	mov    ecx,0x100
c001ca27:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ca2b:	89 c2                	mov    edx,eax
c001ca2d:	fc                   	cld    
c001ca2e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ca31:	83 c4 10             	add    esp,0x10
c001ca34:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ca3c:	4e                   	dec    esi
c001ca3d:	e9 43 ff ff ff       	jmp    c001c985 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001ca42:	31 f6                	xor    esi,esi
c001ca44:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca49:	74 11                	je     c001ca5c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001ca4b:	50                   	push   eax
c001ca4c:	50                   	push   eax
c001ca4d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001ca52:	50                   	push   eax
c001ca53:	53                   	push   ebx
c001ca54:	e8 af fb ff ff       	call   c001c608 <ATA::flush(bool)>
c001ca59:	83 c4 10             	add    esp,0x10
c001ca5c:	83 c4 2c             	add    esp,0x2c
c001ca5f:	89 f0                	mov    eax,esi
c001ca61:	5b                   	pop    ebx
c001ca62:	5e                   	pop    esi
c001ca63:	5f                   	pop    edi
c001ca64:	5d                   	pop    ebp
c001ca65:	c3                   	ret    

c001ca66 <ATA::detectCHS()>:
c001ca66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca6a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ca70:	c1 e0 06             	shl    eax,0x6
c001ca73:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ca79:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ca83:	c7 44 24 04 8c 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b8c
c001ca8b:	e9 cd 46 ff ff       	jmp    c001115d <KePanic(char const*)>

c001ca90 <ATA::open(int, int, void*)>:
c001ca90:	53                   	push   ebx
c001ca91:	83 ec 08             	sub    esp,0x8
c001ca94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001caa0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001caa6:	c1 e0 06             	shl    eax,0x6
c001caa9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001caaf:	01 d0                	add    eax,edx
c001cab1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cab8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cabe:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cac5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cacf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cad6:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cadc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cae3:	75 0c                	jne    c001caf1 <ATA::open(int, int, void*)+0x61>
c001cae5:	83 ec 0c             	sub    esp,0xc
c001cae8:	53                   	push   ebx
c001cae9:	e8 78 ff ff ff       	call   c001ca66 <ATA::detectCHS()>
c001caee:	83 c4 10             	add    esp,0x10
c001caf1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001caf7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cafd:	c1 e0 06             	shl    eax,0x6
c001cb00:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cb07:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cb11:	d1 e8                	shr    eax,1
c001cb13:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cb19:	6a 04                	push   0x4
c001cb1b:	6a 0c                	push   0xc
c001cb1d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb24:	50                   	push   eax
c001cb25:	52                   	push   edx
c001cb26:	e8 25 ec ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb2b:	90                   	nop
c001cb2c:	90                   	nop
c001cb2d:	6a 00                	push   0x0
c001cb2f:	6a 0c                	push   0xc
c001cb31:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb38:	50                   	push   eax
c001cb39:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb3f:	e8 0c ec ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb44:	83 c4 14             	add    esp,0x14
c001cb47:	53                   	push   ebx
c001cb48:	e8 cd fe fe ff       	call   c000ca1a <PhysicalDisk::startCache()>
c001cb4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb50:	e8 11 11 ff ff       	call   c000dc66 <createPartitionsForDisk(PhysicalDisk*)>
c001cb55:	83 c4 18             	add    esp,0x18
c001cb58:	31 c0                	xor    eax,eax
c001cb5a:	5b                   	pop    ebx
c001cb5b:	c3                   	ret    

c001cb5c <combineCharAndColour(char, unsigned char)>:
c001cb5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb61:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cb67:	c1 e0 08             	shl    eax,0x8
c001cb6a:	09 d0                	or     eax,edx
c001cb6c:	c3                   	ret    

c001cb6d <combineColours(unsigned char, unsigned char)>:
c001cb6d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb72:	c1 e0 04             	shl    eax,0x4
c001cb75:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cb79:	c3                   	ret    

c001cb7a <ATA::read(unsigned long long, int, void*)>:
c001cb7a:	55                   	push   ebp
c001cb7b:	57                   	push   edi
c001cb7c:	56                   	push   esi
c001cb7d:	be 04 00 00 00       	mov    esi,0x4
c001cb82:	53                   	push   ebx
c001cb83:	83 ec 0c             	sub    esp,0xc
c001cb86:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cb8a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb8e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cb92:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cb96:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cb99:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cb9f:	0f 87 a1 01 00 00    	ja     c001cd46 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cba5:	85 c9                	test   ecx,ecx
c001cba7:	be 06 00 00 00       	mov    esi,0x6
c001cbac:	0f 84 94 01 00 00    	je     c001cd46 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cbb2:	55                   	push   ebp
c001cbb3:	55                   	push   ebp
c001cbb4:	6a 00                	push   0x0
c001cbb6:	51                   	push   ecx
c001cbb7:	53                   	push   ebx
c001cbb8:	52                   	push   edx
c001cbb9:	50                   	push   eax
c001cbba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbbe:	e8 df fa ff ff       	call   c001c6a2 <ATA::access(unsigned long long, int, void*, bool)>
c001cbc3:	83 c4 20             	add    esp,0x20
c001cbc6:	85 c0                	test   eax,eax
c001cbc8:	89 c6                	mov    esi,eax
c001cbca:	0f 85 71 01 00 00    	jne    c001cd41 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cbd0:	50                   	push   eax
c001cbd1:	bd 10 27 00 00       	mov    ebp,0x2710
c001cbd6:	50                   	push   eax
c001cbd7:	03 1d 54 ae 02 c0    	add    ebx,DWORD PTR ds:0xc002ae54
c001cbdd:	6a 0f                	push   0xf
c001cbdf:	6a 00                	push   0x0
c001cbe1:	89 da                	mov    edx,ebx
c001cbe3:	89 1d 54 ae 02 c0    	mov    DWORD PTR ds:0xc002ae54,ebx
c001cbe9:	e8 7f ff ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001cbee:	59                   	pop    ecx
c001cbef:	b9 0a 00 00 00       	mov    ecx,0xa
c001cbf4:	5b                   	pop    ebx
c001cbf5:	0f b6 d8             	movzx  ebx,al
c001cbf8:	89 d0                	mov    eax,edx
c001cbfa:	53                   	push   ebx
c001cbfb:	99                   	cdq    
c001cbfc:	f7 fd                	idiv   ebp
c001cbfe:	99                   	cdq    
c001cbff:	f7 f9                	idiv   ecx
c001cc01:	83 c2 30             	add    edx,0x30
c001cc04:	0f b6 d2             	movzx  edx,dl
c001cc07:	52                   	push   edx
c001cc08:	e8 4f ff ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001cc0d:	5f                   	pop    edi
c001cc0e:	bf e8 03 00 00       	mov    edi,0x3e8
c001cc13:	5a                   	pop    edx
c001cc14:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cc1a:	53                   	push   ebx
c001cc1b:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc20:	99                   	cdq    
c001cc21:	f7 ff                	idiv   edi
c001cc23:	99                   	cdq    
c001cc24:	f7 f9                	idiv   ecx
c001cc26:	8d 42 30             	lea    eax,[edx+0x30]
c001cc29:	0f b6 c0             	movzx  eax,al
c001cc2c:	50                   	push   eax
c001cc2d:	e8 2a ff ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001cc32:	5f                   	pop    edi
c001cc33:	bf 64 00 00 00       	mov    edi,0x64
c001cc38:	5a                   	pop    edx
c001cc39:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cc3f:	53                   	push   ebx
c001cc40:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc45:	99                   	cdq    
c001cc46:	f7 ff                	idiv   edi
c001cc48:	99                   	cdq    
c001cc49:	f7 f9                	idiv   ecx
c001cc4b:	8d 42 30             	lea    eax,[edx+0x30]
c001cc4e:	0f b6 c0             	movzx  eax,al
c001cc51:	50                   	push   eax
c001cc52:	e8 05 ff ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001cc57:	5a                   	pop    edx
c001cc58:	5a                   	pop    edx
c001cc59:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cc5f:	53                   	push   ebx
c001cc60:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc65:	99                   	cdq    
c001cc66:	f7 f9                	idiv   ecx
c001cc68:	99                   	cdq    
c001cc69:	f7 f9                	idiv   ecx
c001cc6b:	8d 42 30             	lea    eax,[edx+0x30]
c001cc6e:	0f b6 c0             	movzx  eax,al
c001cc71:	50                   	push   eax
c001cc72:	e8 e5 fe ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001cc77:	5a                   	pop    edx
c001cc78:	5a                   	pop    edx
c001cc79:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cc7f:	53                   	push   ebx
c001cc80:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc85:	99                   	cdq    
c001cc86:	f7 f9                	idiv   ecx
c001cc88:	83 c2 30             	add    edx,0x30
c001cc8b:	0f b6 d2             	movzx  edx,dl
c001cc8e:	52                   	push   edx
c001cc8f:	e8 c8 fe ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001cc94:	5a                   	pop    edx
c001cc95:	5a                   	pop    edx
c001cc96:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cc9c:	53                   	push   ebx
c001cc9d:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cca2:	99                   	cdq    
c001cca3:	f7 fd                	idiv   ebp
c001cca5:	99                   	cdq    
c001cca6:	f7 f9                	idiv   ecx
c001cca8:	8d 42 30             	lea    eax,[edx+0x30]
c001ccab:	0f b6 c0             	movzx  eax,al
c001ccae:	50                   	push   eax
c001ccaf:	e8 a8 fe ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001ccb4:	5d                   	pop    ebp
c001ccb5:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ccba:	5a                   	pop    edx
c001ccbb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ccc1:	53                   	push   ebx
c001ccc2:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ccc7:	99                   	cdq    
c001ccc8:	f7 fd                	idiv   ebp
c001ccca:	99                   	cdq    
c001cccb:	f7 f9                	idiv   ecx
c001cccd:	8d 42 30             	lea    eax,[edx+0x30]
c001ccd0:	0f b6 c0             	movzx  eax,al
c001ccd3:	50                   	push   eax
c001ccd4:	e8 83 fe ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001ccd9:	5d                   	pop    ebp
c001ccda:	5a                   	pop    edx
c001ccdb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cce1:	53                   	push   ebx
c001cce2:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cce7:	99                   	cdq    
c001cce8:	f7 ff                	idiv   edi
c001ccea:	99                   	cdq    
c001cceb:	f7 f9                	idiv   ecx
c001cced:	8d 42 30             	lea    eax,[edx+0x30]
c001ccf0:	0f b6 c0             	movzx  eax,al
c001ccf3:	50                   	push   eax
c001ccf4:	e8 63 fe ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001ccf9:	5f                   	pop    edi
c001ccfa:	5d                   	pop    ebp
c001ccfb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cd01:	53                   	push   ebx
c001cd02:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cd07:	99                   	cdq    
c001cd08:	f7 f9                	idiv   ecx
c001cd0a:	99                   	cdq    
c001cd0b:	f7 f9                	idiv   ecx
c001cd0d:	8d 42 30             	lea    eax,[edx+0x30]
c001cd10:	0f b6 c0             	movzx  eax,al
c001cd13:	50                   	push   eax
c001cd14:	e8 43 fe ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001cd19:	5a                   	pop    edx
c001cd1a:	5f                   	pop    edi
c001cd1b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cd21:	53                   	push   ebx
c001cd22:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cd27:	99                   	cdq    
c001cd28:	f7 f9                	idiv   ecx
c001cd2a:	83 c2 30             	add    edx,0x30
c001cd2d:	0f b6 d2             	movzx  edx,dl
c001cd30:	52                   	push   edx
c001cd31:	e8 26 fe ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001cd36:	83 c4 10             	add    esp,0x10
c001cd39:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cd3f:	eb 05                	jmp    c001cd46 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd41:	be 01 00 00 00       	mov    esi,0x1
c001cd46:	83 c4 0c             	add    esp,0xc
c001cd49:	89 f0                	mov    eax,esi
c001cd4b:	5b                   	pop    ebx
c001cd4c:	5e                   	pop    esi
c001cd4d:	5f                   	pop    edi
c001cd4e:	5d                   	pop    ebp
c001cd4f:	c3                   	ret    

c001cd50 <ATA::write(unsigned long long, int, void*)>:
c001cd50:	55                   	push   ebp
c001cd51:	57                   	push   edi
c001cd52:	56                   	push   esi
c001cd53:	be 04 00 00 00       	mov    esi,0x4
c001cd58:	53                   	push   ebx
c001cd59:	83 ec 0c             	sub    esp,0xc
c001cd5c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd68:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd6c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd6f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd75:	0f 87 9c 01 00 00    	ja     c001cf17 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cd7b:	85 c9                	test   ecx,ecx
c001cd7d:	be 06 00 00 00       	mov    esi,0x6
c001cd82:	0f 84 8f 01 00 00    	je     c001cf17 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cd88:	55                   	push   ebp
c001cd89:	55                   	push   ebp
c001cd8a:	6a 01                	push   0x1
c001cd8c:	51                   	push   ecx
c001cd8d:	53                   	push   ebx
c001cd8e:	52                   	push   edx
c001cd8f:	50                   	push   eax
c001cd90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd94:	e8 09 f9 ff ff       	call   c001c6a2 <ATA::access(unsigned long long, int, void*, bool)>
c001cd99:	83 c4 20             	add    esp,0x20
c001cd9c:	85 c0                	test   eax,eax
c001cd9e:	89 c6                	mov    esi,eax
c001cda0:	0f 85 6c 01 00 00    	jne    c001cf12 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cda6:	50                   	push   eax
c001cda7:	bd 10 27 00 00       	mov    ebp,0x2710
c001cdac:	50                   	push   eax
c001cdad:	6a 0f                	push   0xf
c001cdaf:	6a 00                	push   0x0
c001cdb1:	01 1d 50 ae 02 c0    	add    DWORD PTR ds:0xc002ae50,ebx
c001cdb7:	e8 b1 fd ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001cdbc:	5a                   	pop    edx
c001cdbd:	59                   	pop    ecx
c001cdbe:	b9 0a 00 00 00       	mov    ecx,0xa
c001cdc3:	0f b6 d8             	movzx  ebx,al
c001cdc6:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cdcb:	53                   	push   ebx
c001cdcc:	99                   	cdq    
c001cdcd:	f7 fd                	idiv   ebp
c001cdcf:	99                   	cdq    
c001cdd0:	f7 f9                	idiv   ecx
c001cdd2:	8d 42 30             	lea    eax,[edx+0x30]
c001cdd5:	0f b6 c0             	movzx  eax,al
c001cdd8:	50                   	push   eax
c001cdd9:	e8 7e fd ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001cdde:	5f                   	pop    edi
c001cddf:	bf e8 03 00 00       	mov    edi,0x3e8
c001cde4:	5a                   	pop    edx
c001cde5:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cdeb:	53                   	push   ebx
c001cdec:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cdf1:	99                   	cdq    
c001cdf2:	f7 ff                	idiv   edi
c001cdf4:	99                   	cdq    
c001cdf5:	f7 f9                	idiv   ecx
c001cdf7:	8d 42 30             	lea    eax,[edx+0x30]
c001cdfa:	0f b6 c0             	movzx  eax,al
c001cdfd:	50                   	push   eax
c001cdfe:	e8 59 fd ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001ce03:	5f                   	pop    edi
c001ce04:	bf 64 00 00 00       	mov    edi,0x64
c001ce09:	5a                   	pop    edx
c001ce0a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce10:	53                   	push   ebx
c001ce11:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce16:	99                   	cdq    
c001ce17:	f7 ff                	idiv   edi
c001ce19:	99                   	cdq    
c001ce1a:	f7 f9                	idiv   ecx
c001ce1c:	8d 42 30             	lea    eax,[edx+0x30]
c001ce1f:	0f b6 c0             	movzx  eax,al
c001ce22:	50                   	push   eax
c001ce23:	e8 34 fd ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001ce28:	5a                   	pop    edx
c001ce29:	5a                   	pop    edx
c001ce2a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce30:	53                   	push   ebx
c001ce31:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce36:	99                   	cdq    
c001ce37:	f7 f9                	idiv   ecx
c001ce39:	99                   	cdq    
c001ce3a:	f7 f9                	idiv   ecx
c001ce3c:	8d 42 30             	lea    eax,[edx+0x30]
c001ce3f:	0f b6 c0             	movzx  eax,al
c001ce42:	50                   	push   eax
c001ce43:	e8 14 fd ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001ce48:	5a                   	pop    edx
c001ce49:	5a                   	pop    edx
c001ce4a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce50:	53                   	push   ebx
c001ce51:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce56:	99                   	cdq    
c001ce57:	f7 f9                	idiv   ecx
c001ce59:	83 c2 30             	add    edx,0x30
c001ce5c:	0f b6 d2             	movzx  edx,dl
c001ce5f:	52                   	push   edx
c001ce60:	e8 f7 fc ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001ce65:	5a                   	pop    edx
c001ce66:	5a                   	pop    edx
c001ce67:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce6d:	53                   	push   ebx
c001ce6e:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ce73:	99                   	cdq    
c001ce74:	f7 fd                	idiv   ebp
c001ce76:	99                   	cdq    
c001ce77:	f7 f9                	idiv   ecx
c001ce79:	8d 42 30             	lea    eax,[edx+0x30]
c001ce7c:	0f b6 c0             	movzx  eax,al
c001ce7f:	50                   	push   eax
c001ce80:	e8 d7 fc ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001ce85:	5d                   	pop    ebp
c001ce86:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce8b:	5a                   	pop    edx
c001ce8c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce92:	53                   	push   ebx
c001ce93:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ce98:	99                   	cdq    
c001ce99:	f7 fd                	idiv   ebp
c001ce9b:	99                   	cdq    
c001ce9c:	f7 f9                	idiv   ecx
c001ce9e:	8d 42 30             	lea    eax,[edx+0x30]
c001cea1:	0f b6 c0             	movzx  eax,al
c001cea4:	50                   	push   eax
c001cea5:	e8 b2 fc ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001ceaa:	5d                   	pop    ebp
c001ceab:	5a                   	pop    edx
c001ceac:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ceb2:	53                   	push   ebx
c001ceb3:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ceb8:	99                   	cdq    
c001ceb9:	f7 ff                	idiv   edi
c001cebb:	99                   	cdq    
c001cebc:	f7 f9                	idiv   ecx
c001cebe:	8d 42 30             	lea    eax,[edx+0x30]
c001cec1:	0f b6 c0             	movzx  eax,al
c001cec4:	50                   	push   eax
c001cec5:	e8 92 fc ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001ceca:	5f                   	pop    edi
c001cecb:	5d                   	pop    ebp
c001cecc:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ced2:	53                   	push   ebx
c001ced3:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ced8:	99                   	cdq    
c001ced9:	f7 f9                	idiv   ecx
c001cedb:	99                   	cdq    
c001cedc:	f7 f9                	idiv   ecx
c001cede:	8d 42 30             	lea    eax,[edx+0x30]
c001cee1:	0f b6 c0             	movzx  eax,al
c001cee4:	50                   	push   eax
c001cee5:	e8 72 fc ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001ceea:	5a                   	pop    edx
c001ceeb:	5f                   	pop    edi
c001ceec:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cef2:	53                   	push   ebx
c001cef3:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cef8:	99                   	cdq    
c001cef9:	f7 f9                	idiv   ecx
c001cefb:	83 c2 30             	add    edx,0x30
c001cefe:	0f b6 d2             	movzx  edx,dl
c001cf01:	52                   	push   edx
c001cf02:	e8 55 fc ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001cf07:	83 c4 10             	add    esp,0x10
c001cf0a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf10:	eb 05                	jmp    c001cf17 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf12:	be 01 00 00 00       	mov    esi,0x1
c001cf17:	83 c4 0c             	add    esp,0xc
c001cf1a:	89 f0                	mov    eax,esi
c001cf1c:	5b                   	pop    ebx
c001cf1d:	5e                   	pop    esi
c001cf1e:	5f                   	pop    edi
c001cf1f:	5d                   	pop    ebp
c001cf20:	c3                   	ret    
c001cf21:	90                   	nop

c001cf22 <ATAPI::write(unsigned long long, int, void*)>:
c001cf22:	b8 03 00 00 00       	mov    eax,0x3
c001cf27:	c3                   	ret    

c001cf28 <ATAPI::close(int, int, void*)>:
c001cf28:	83 ec 0c             	sub    esp,0xc
c001cf2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf2f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf35:	85 c0                	test   eax,eax
c001cf37:	74 0c                	je     c001cf45 <ATAPI::close(int, int, void*)+0x1d>
c001cf39:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf3b:	83 ec 0c             	sub    esp,0xc
c001cf3e:	50                   	push   eax
c001cf3f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cf42:	83 c4 10             	add    esp,0x10
c001cf45:	31 c0                	xor    eax,eax
c001cf47:	83 c4 0c             	add    esp,0xc
c001cf4a:	c3                   	ret    
c001cf4b:	90                   	nop

c001cf4c <ATAPI::ATAPI()>:
c001cf4c:	83 ec 0c             	sub    esp,0xc
c001cf4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf53:	83 ec 04             	sub    esp,0x4
c001cf56:	68 00 08 00 00       	push   0x800
c001cf5b:	68 d5 2c 02 c0       	push   0xc0022cd5
c001cf60:	50                   	push   eax
c001cf61:	e8 4c fa fe ff       	call   c000c9b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cf66:	83 c4 10             	add    esp,0x10
c001cf69:	ba f0 2b 02 c0       	mov    edx,0xc0022bf0
c001cf6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf72:	89 10                	mov    DWORD PTR [eax],edx
c001cf74:	90                   	nop
c001cf75:	83 c4 0c             	add    esp,0xc
c001cf78:	c3                   	ret    
c001cf79:	90                   	nop

c001cf7a <ATAPI::readyForCommand()>:
c001cf7a:	56                   	push   esi
c001cf7b:	53                   	push   ebx
c001cf7c:	53                   	push   ebx
c001cf7d:	31 db                	xor    ebx,ebx
c001cf7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf83:	51                   	push   ecx
c001cf84:	6a 0c                	push   0xc
c001cf86:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cf8d:	50                   	push   eax
c001cf8e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cf94:	e8 77 e8 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001cf99:	83 c4 10             	add    esp,0x10
c001cf9c:	a8 88                	test   al,0x88
c001cf9e:	74 25                	je     c001cfc5 <ATAPI::readyForCommand()+0x4b>
c001cfa0:	43                   	inc    ebx
c001cfa1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001cfa7:	7e da                	jle    c001cf83 <ATAPI::readyForCommand()+0x9>
c001cfa9:	83 ec 0c             	sub    esp,0xc
c001cfac:	68 5e 01 00 00       	push   0x15e
c001cfb1:	e8 c6 8d ff ff       	call   c0015d7c <milliTenthSleep(unsigned int)>
c001cfb6:	83 c4 10             	add    esp,0x10
c001cfb9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001cfbf:	75 c2                	jne    c001cf83 <ATAPI::readyForCommand()+0x9>
c001cfc1:	31 c0                	xor    eax,eax
c001cfc3:	eb 02                	jmp    c001cfc7 <ATAPI::readyForCommand()+0x4d>
c001cfc5:	b0 01                	mov    al,0x1
c001cfc7:	5a                   	pop    edx
c001cfc8:	5b                   	pop    ebx
c001cfc9:	5e                   	pop    esi
c001cfca:	c3                   	ret    
c001cfcb:	90                   	nop

c001cfcc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cfcc:	55                   	push   ebp
c001cfcd:	57                   	push   edi
c001cfce:	56                   	push   esi
c001cfcf:	53                   	push   ebx
c001cfd0:	83 ec 20             	sub    esp,0x20
c001cfd3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cfd7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cfdb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001cfdf:	6a 01                	push   0x1
c001cfe1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfe8:	50                   	push   eax
c001cfe9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfef:	e8 6a e9 ff ff       	call   c001b95e <IDE::enableIRQs(unsigned char, bool)>
c001cff4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cffb:	59                   	pop    ecx
c001cffc:	5e                   	pop    esi
c001cffd:	50                   	push   eax
c001cffe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d004:	e8 21 e7 ff ff       	call   c001b72a <IDE::prepareInterrupt(unsigned char)>
c001d009:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d00c:	e8 69 ff ff ff       	call   c001cf7a <ATAPI::readyForCommand()>
c001d011:	83 c4 10             	add    esp,0x10
c001d014:	84 c0                	test   al,al
c001d016:	75 0a                	jne    c001d022 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d018:	bb 01 00 00 00       	mov    ebx,0x1
c001d01d:	e9 5f 02 00 00       	jmp    c001d281 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d022:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d028:	c1 e0 04             	shl    eax,0x4
c001d02b:	0f b6 c0             	movzx  eax,al
c001d02e:	50                   	push   eax
c001d02f:	6a 06                	push   0x6
c001d031:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d038:	50                   	push   eax
c001d039:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d03f:	e8 0c e7 ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d044:	6a 00                	push   0x0
c001d046:	6a 01                	push   0x1
c001d048:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d04f:	50                   	push   eax
c001d050:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d056:	e8 f5 e6 ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d05b:	83 c4 20             	add    esp,0x20
c001d05e:	0f b6 c3             	movzx  eax,bl
c001d061:	50                   	push   eax
c001d062:	0f b6 df             	movzx  ebx,bh
c001d065:	6a 04                	push   0x4
c001d067:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d06e:	50                   	push   eax
c001d06f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d075:	e8 d6 e6 ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d07a:	53                   	push   ebx
c001d07b:	6a 05                	push   0x5
c001d07d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d084:	50                   	push   eax
c001d085:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d08b:	e8 c0 e6 ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d090:	83 c4 20             	add    esp,0x20
c001d093:	68 a0 00 00 00       	push   0xa0
c001d098:	6a 07                	push   0x7
c001d09a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0a1:	50                   	push   eax
c001d0a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0a8:	e8 a3 e6 ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0ad:	83 c4 0c             	add    esp,0xc
c001d0b0:	6a 01                	push   0x1
c001d0b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0b9:	50                   	push   eax
c001d0ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0c0:	e8 6f f1 ff ff       	call   c001c234 <IDE::polling(unsigned char, unsigned int)>
c001d0c5:	83 c4 10             	add    esp,0x10
c001d0c8:	0f b6 d8             	movzx  ebx,al
c001d0cb:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d0d1:	85 db                	test   ebx,ebx
c001d0d3:	74 20                	je     c001d0f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d0d5:	53                   	push   ebx
c001d0d6:	0f b6 c0             	movzx  eax,al
c001d0d9:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d0e0:	52                   	push   edx
c001d0e1:	50                   	push   eax
c001d0e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0e8:	e8 8d f0 ff ff       	call   c001c17a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d0ed:	83 c4 10             	add    esp,0x10
c001d0f0:	e9 8c 01 00 00       	jmp    c001d281 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d0f5:	52                   	push   edx
c001d0f6:	0f b6 c0             	movzx  eax,al
c001d0f9:	52                   	push   edx
c001d0fa:	50                   	push   eax
c001d0fb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d101:	e8 38 e6 ff ff       	call   c001b73e <IDE::getBase(unsigned char)>
c001d106:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d10a:	b9 06 00 00 00       	mov    ecx,0x6
c001d10f:	89 c2                	mov    edx,eax
c001d111:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d114:	89 e8                	mov    eax,ebp
c001d116:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d11a:	83 c4 10             	add    esp,0x10
c001d11d:	0f b6 c0             	movzx  eax,al
c001d120:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d124:	85 db                	test   ebx,ebx
c001d126:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d12c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d133:	0f 84 eb 00 00 00    	je     c001d224 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d139:	55                   	push   ebp
c001d13a:	55                   	push   ebp
c001d13b:	52                   	push   edx
c001d13c:	50                   	push   eax
c001d13d:	e8 82 e7 ff ff       	call   c001b8c4 <IDE::waitInterrupt(unsigned char)>
c001d142:	83 c4 10             	add    esp,0x10
c001d145:	84 c0                	test   al,al
c001d147:	0f 84 cb fe ff ff    	je     c001d018 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d14d:	56                   	push   esi
c001d14e:	56                   	push   esi
c001d14f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d156:	50                   	push   eax
c001d157:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d15d:	e8 c8 e5 ff ff       	call   c001b72a <IDE::prepareInterrupt(unsigned char)>
c001d162:	83 c4 0c             	add    esp,0xc
c001d165:	6a 04                	push   0x4
c001d167:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d16e:	50                   	push   eax
c001d16f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d175:	e8 96 e6 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001d17a:	83 c4 0c             	add    esp,0xc
c001d17d:	6a 05                	push   0x5
c001d17f:	89 c6                	mov    esi,eax
c001d181:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d188:	50                   	push   eax
c001d189:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d18f:	e8 7c e6 ff ff       	call   c001b810 <IDE::read(unsigned char, unsigned char)>
c001d194:	83 c4 10             	add    esp,0x10
c001d197:	0f b6 e8             	movzx  ebp,al
c001d19a:	89 f0                	mov    eax,esi
c001d19c:	c1 e5 08             	shl    ebp,0x8
c001d19f:	0f b6 f0             	movzx  esi,al
c001d1a2:	09 f5                	or     ebp,esi
c001d1a4:	31 f6                	xor    esi,esi
c001d1a6:	d1 fd                	sar    ebp,1
c001d1a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d1ad:	74 5c                	je     c001d20b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d1af:	39 ee                	cmp    esi,ebp
c001d1b1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d1b7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d1be:	75 0d                	jne    c001d1cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d1c0:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d1c3:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d1c7:	4b                   	dec    ebx
c001d1c8:	e9 57 ff ff ff       	jmp    c001d124 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d1cd:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d1d1:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d1d5:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d1da:	51                   	push   ecx
c001d1db:	51                   	push   ecx
c001d1dc:	52                   	push   edx
c001d1dd:	50                   	push   eax
c001d1de:	e8 5b e5 ff ff       	call   c001b73e <IDE::getBase(unsigned char)>
c001d1e3:	89 c2                	mov    edx,eax
c001d1e5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d1ea:	66 ef                	out    dx,ax
c001d1ec:	46                   	inc    esi
c001d1ed:	83 c4 10             	add    esp,0x10
c001d1f0:	eb bd                	jmp    c001d1af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d1f2:	51                   	push   ecx
c001d1f3:	51                   	push   ecx
c001d1f4:	52                   	push   edx
c001d1f5:	50                   	push   eax
c001d1f6:	e8 43 e5 ff ff       	call   c001b73e <IDE::getBase(unsigned char)>
c001d1fb:	89 c2                	mov    edx,eax
c001d1fd:	66 ed                	in     ax,dx
c001d1ff:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d203:	83 c4 10             	add    esp,0x10
c001d206:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d20a:	46                   	inc    esi
c001d20b:	39 ee                	cmp    esi,ebp
c001d20d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d213:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d21a:	75 d6                	jne    c001d1f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d21c:	01 f6                	add    esi,esi
c001d21e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d222:	eb a3                	jmp    c001d1c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d224:	51                   	push   ecx
c001d225:	51                   	push   ecx
c001d226:	52                   	push   edx
c001d227:	50                   	push   eax
c001d228:	e8 97 e6 ff ff       	call   c001b8c4 <IDE::waitInterrupt(unsigned char)>
c001d22d:	83 c4 10             	add    esp,0x10
c001d230:	84 c0                	test   al,al
c001d232:	0f 84 e0 fd ff ff    	je     c001d018 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d238:	52                   	push   edx
c001d239:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d23e:	52                   	push   edx
c001d23f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d246:	50                   	push   eax
c001d247:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d24d:	e8 d8 e4 ff ff       	call   c001b72a <IDE::prepareInterrupt(unsigned char)>
c001d252:	83 c4 10             	add    esp,0x10
c001d255:	50                   	push   eax
c001d256:	50                   	push   eax
c001d257:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d25e:	50                   	push   eax
c001d25f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d265:	e8 d4 e4 ff ff       	call   c001b73e <IDE::getBase(unsigned char)>
c001d26a:	8d 50 07             	lea    edx,[eax+0x7]
c001d26d:	ec                   	in     al,dx
c001d26e:	83 c4 10             	add    esp,0x10
c001d271:	a8 88                	test   al,0x88
c001d273:	74 0a                	je     c001d27f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d275:	4b                   	dec    ebx
c001d276:	75 dd                	jne    c001d255 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d278:	bb 02 00 00 00       	mov    ebx,0x2
c001d27d:	eb 02                	jmp    c001d281 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d27f:	31 db                	xor    ebx,ebx
c001d281:	83 c4 1c             	add    esp,0x1c
c001d284:	89 d8                	mov    eax,ebx
c001d286:	5b                   	pop    ebx
c001d287:	5e                   	pop    esi
c001d288:	5f                   	pop    edi
c001d289:	5d                   	pop    ebp
c001d28a:	c3                   	ret    
c001d28b:	90                   	nop

c001d28c <ATAPI::diskRemoved()>:
c001d28c:	53                   	push   ebx
c001d28d:	83 ec 14             	sub    esp,0x14
c001d290:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d294:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d29b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d2a1:	e8 ae 06 ff ff       	call   c000d954 <LogicalDisk::unmount()>
c001d2a6:	58                   	pop    eax
c001d2a7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d2ad:	e8 86 10 ff ff       	call   c000e338 <VCache::writeWriteBuffer()>
c001d2b2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d2b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2bc:	83 c4 18             	add    esp,0x18
c001d2bf:	5b                   	pop    ebx
c001d2c0:	e9 63 10 ff ff       	jmp    c000e328 <VCache::invalidateReadBuffer()>
c001d2c5:	90                   	nop

c001d2c6 <ATAPI::eject()>:
c001d2c6:	57                   	push   edi
c001d2c7:	b9 03 00 00 00       	mov    ecx,0x3
c001d2cc:	53                   	push   ebx
c001d2cd:	83 ec 14             	sub    esp,0x14
c001d2d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d2d4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d2d8:	fc                   	cld    
c001d2d9:	31 c0                	xor    eax,eax
c001d2db:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d2dd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d2e2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d2e7:	50                   	push   eax
c001d2e8:	50                   	push   eax
c001d2e9:	6a 00                	push   0x0
c001d2eb:	6a 00                	push   0x0
c001d2ed:	6a 00                	push   0x0
c001d2ef:	6a 02                	push   0x2
c001d2f1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d2f5:	50                   	push   eax
c001d2f6:	53                   	push   ebx
c001d2f7:	e8 d0 fc ff ff       	call   c001cfcc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d2fc:	83 c4 14             	add    esp,0x14
c001d2ff:	53                   	push   ebx
c001d300:	e8 87 ff ff ff       	call   c001d28c <ATAPI::diskRemoved()>
c001d305:	83 c4 24             	add    esp,0x24
c001d308:	31 c0                	xor    eax,eax
c001d30a:	5b                   	pop    ebx
c001d30b:	5f                   	pop    edi
c001d30c:	c3                   	ret    
c001d30d:	90                   	nop

c001d30e <ATAPI::diskInserted()>:
c001d30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d312:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d319:	c3                   	ret    

c001d31a <ATAPI::detectMedia()>:
c001d31a:	56                   	push   esi
c001d31b:	53                   	push   ebx
c001d31c:	83 ec 28             	sub    esp,0x28
c001d31f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d323:	6a 0c                	push   0xc
c001d325:	6a 00                	push   0x0
c001d327:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d32b:	56                   	push   esi
c001d32c:	e8 bf 31 fe ff       	call   c00004f0 <memset>
c001d331:	58                   	pop    eax
c001d332:	5a                   	pop    edx
c001d333:	6a 00                	push   0x0
c001d335:	6a 00                	push   0x0
c001d337:	6a 00                	push   0x0
c001d339:	6a 00                	push   0x0
c001d33b:	56                   	push   esi
c001d33c:	53                   	push   ebx
c001d33d:	e8 8a fc ff ff       	call   c001cfcc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d342:	83 c4 1c             	add    esp,0x1c
c001d345:	6a 0c                	push   0xc
c001d347:	6a 00                	push   0x0
c001d349:	56                   	push   esi
c001d34a:	e8 a1 31 fe ff       	call   c00004f0 <memset>
c001d34f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d354:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d359:	59                   	pop    ecx
c001d35a:	58                   	pop    eax
c001d35b:	6a 01                	push   0x1
c001d35d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d361:	50                   	push   eax
c001d362:	6a 00                	push   0x0
c001d364:	6a 12                	push   0x12
c001d366:	56                   	push   esi
c001d367:	53                   	push   ebx
c001d368:	e8 5f fc ff ff       	call   c001cfcc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d36d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d371:	83 c4 20             	add    esp,0x20
c001d374:	83 e0 7f             	and    eax,0x7f
c001d377:	83 f8 70             	cmp    eax,0x70
c001d37a:	74 15                	je     c001d391 <ATAPI::detectMedia()+0x77>
c001d37c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d383:	75 0c                	jne    c001d391 <ATAPI::detectMedia()+0x77>
c001d385:	83 ec 0c             	sub    esp,0xc
c001d388:	53                   	push   ebx
c001d389:	e8 80 ff ff ff       	call   c001d30e <ATAPI::diskInserted()>
c001d38e:	83 c4 10             	add    esp,0x10
c001d391:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d395:	83 e0 0f             	and    eax,0xf
c001d398:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d39d:	0f b6 c0             	movzx  eax,al
c001d3a0:	75 19                	jne    c001d3bb <ATAPI::detectMedia()+0xa1>
c001d3a2:	83 f8 02             	cmp    eax,0x2
c001d3a5:	75 14                	jne    c001d3bb <ATAPI::detectMedia()+0xa1>
c001d3a7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3ae:	74 24                	je     c001d3d4 <ATAPI::detectMedia()+0xba>
c001d3b0:	83 ec 0c             	sub    esp,0xc
c001d3b3:	53                   	push   ebx
c001d3b4:	e8 d3 fe ff ff       	call   c001d28c <ATAPI::diskRemoved()>
c001d3b9:	eb 16                	jmp    c001d3d1 <ATAPI::detectMedia()+0xb7>
c001d3bb:	85 c0                	test   eax,eax
c001d3bd:	75 15                	jne    c001d3d4 <ATAPI::detectMedia()+0xba>
c001d3bf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3c6:	75 0c                	jne    c001d3d4 <ATAPI::detectMedia()+0xba>
c001d3c8:	83 ec 0c             	sub    esp,0xc
c001d3cb:	53                   	push   ebx
c001d3cc:	e8 3d ff ff ff       	call   c001d30e <ATAPI::diskInserted()>
c001d3d1:	83 c4 10             	add    esp,0x10
c001d3d4:	83 c4 24             	add    esp,0x24
c001d3d7:	5b                   	pop    ebx
c001d3d8:	5e                   	pop    esi
c001d3d9:	c3                   	ret    

c001d3da <ATAPI::open(int, int, void*)>:
c001d3da:	56                   	push   esi
c001d3db:	53                   	push   ebx
c001d3dc:	50                   	push   eax
c001d3dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d3e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d3e9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d3ef:	c1 e0 06             	shl    eax,0x6
c001d3f2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d3f8:	01 d0                	add    eax,edx
c001d3fa:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d401:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d407:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d40e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d418:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d41f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d425:	6a 04                	push   0x4
c001d427:	6a 0c                	push   0xc
c001d429:	51                   	push   ecx
c001d42a:	52                   	push   edx
c001d42b:	e8 20 e3 ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d430:	90                   	nop
c001d431:	90                   	nop
c001d432:	6a 00                	push   0x0
c001d434:	6a 0c                	push   0xc
c001d436:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d43d:	50                   	push   eax
c001d43e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d444:	e8 07 e3 ff ff       	call   c001b750 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d449:	83 c4 14             	add    esp,0x14
c001d44c:	68 78 01 00 00       	push   0x178
c001d451:	e8 7d a6 fe ff       	call   c0007ad3 <malloc>
c001d456:	83 c4 0c             	add    esp,0xc
c001d459:	6a 00                	push   0x0
c001d45b:	68 ff ff ff 7f       	push   0x7fffffff
c001d460:	6a 00                	push   0x0
c001d462:	6a 00                	push   0x0
c001d464:	53                   	push   ebx
c001d465:	68 87 2d 02 c0       	push   0xc0022d87
c001d46a:	89 c6                	mov    esi,eax
c001d46c:	50                   	push   eax
c001d46d:	e8 20 03 ff ff       	call   c000d792 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d472:	83 c4 14             	add    esp,0x14
c001d475:	56                   	push   esi
c001d476:	e8 d7 03 ff ff       	call   c000d852 <LogicalDisk::assignDriveLetter()>
c001d47b:	5a                   	pop    edx
c001d47c:	59                   	pop    ecx
c001d47d:	0f be c0             	movsx  eax,al
c001d480:	50                   	push   eax
c001d481:	68 d8 2b 02 c0       	push   0xc0022bd8
c001d486:	e8 7f d4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d48b:	58                   	pop    eax
c001d48c:	5a                   	pop    edx
c001d48d:	56                   	push   esi
c001d48e:	53                   	push   ebx
c001d48f:	e8 50 f1 fe ff       	call   c000c5e4 <Device::addChild(Device*)>
c001d494:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d49a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d49d:	e8 78 f5 fe ff       	call   c000ca1a <PhysicalDisk::startCache()>
c001d4a2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d4a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4ac:	e8 69 fe ff ff       	call   c001d31a <ATAPI::detectMedia()>
c001d4b1:	83 c4 14             	add    esp,0x14
c001d4b4:	31 c0                	xor    eax,eax
c001d4b6:	5b                   	pop    ebx
c001d4b7:	5e                   	pop    esi
c001d4b8:	c3                   	ret    
c001d4b9:	90                   	nop

c001d4ba <ATAPI::read(unsigned long long, int, void*)>:
c001d4ba:	55                   	push   ebp
c001d4bb:	57                   	push   edi
c001d4bc:	56                   	push   esi
c001d4bd:	53                   	push   ebx
c001d4be:	83 ec 1c             	sub    esp,0x1c
c001d4c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d4c5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d4c9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d4cd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d4d4:	74 3c                	je     c001d512 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d4d6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d4da:	b9 03 00 00 00       	mov    ecx,0x3
c001d4df:	fc                   	cld    
c001d4e0:	31 c0                	xor    eax,eax
c001d4e2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d4e4:	89 e8                	mov    eax,ebp
c001d4e6:	0f ce                	bswap  esi
c001d4e8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d4ec:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d4f1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d4f5:	50                   	push   eax
c001d4f6:	50                   	push   eax
c001d4f7:	55                   	push   ebp
c001d4f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d4fc:	c1 e5 0b             	shl    ebp,0xb
c001d4ff:	6a 00                	push   0x0
c001d501:	55                   	push   ebp
c001d502:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d506:	50                   	push   eax
c001d507:	53                   	push   ebx
c001d508:	e8 bf fa ff ff       	call   c001cfcc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d50d:	83 c4 20             	add    esp,0x20
c001d510:	eb 1a                	jmp    c001d52c <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d512:	83 ec 0c             	sub    esp,0xc
c001d515:	53                   	push   ebx
c001d516:	e8 ff fd ff ff       	call   c001d31a <ATAPI::detectMedia()>
c001d51b:	83 c4 10             	add    esp,0x10
c001d51e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d525:	75 af                	jne    c001d4d6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d527:	b8 02 00 00 00       	mov    eax,0x2
c001d52c:	83 c4 1c             	add    esp,0x1c
c001d52f:	5b                   	pop    ebx
c001d530:	5e                   	pop    esi
c001d531:	5f                   	pop    edi
c001d532:	5d                   	pop    ebp
c001d533:	c3                   	ret    

c001d534 <SATA::close(int, int, void*)>:
c001d534:	83 ec 0c             	sub    esp,0xc
c001d537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d53b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d541:	85 c0                	test   eax,eax
c001d543:	74 0c                	je     c001d551 <SATA::close(int, int, void*)+0x1d>
c001d545:	8b 10                	mov    edx,DWORD PTR [eax]
c001d547:	83 ec 0c             	sub    esp,0xc
c001d54a:	50                   	push   eax
c001d54b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d54e:	83 c4 10             	add    esp,0x10
c001d551:	31 c0                	xor    eax,eax
c001d553:	83 c4 0c             	add    esp,0xc
c001d556:	c3                   	ret    
c001d557:	90                   	nop

c001d558 <SATA::powerSaving(PowerSavingLevel)>:
c001d558:	c3                   	ret    
c001d559:	90                   	nop

c001d55a <SATA::open(int, int, void*)>:
c001d55a:	56                   	push   esi
c001d55b:	53                   	push   ebx
c001d55c:	50                   	push   eax
c001d55d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d561:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d565:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d56f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d575:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d579:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d583:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d58d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d594:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d59a:	e8 43 a8 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d59f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d5a5:	89 c6                	mov    esi,eax
c001d5a7:	e8 36 a8 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d5ac:	81 c6 00 10 00 00    	add    esi,0x1000
c001d5b2:	39 c6                	cmp    esi,eax
c001d5b4:	74 10                	je     c001d5c6 <SATA::open(int, int, void*)+0x6c>
c001d5b6:	83 ec 0c             	sub    esp,0xc
c001d5b9:	68 20 2c 02 c0       	push   0xc0022c20
c001d5be:	e8 9a 3b ff ff       	call   c001115d <KePanic(char const*)>
c001d5c3:	83 c4 10             	add    esp,0x10
c001d5c6:	83 ec 0c             	sub    esp,0xc
c001d5c9:	6a 02                	push   0x2
c001d5cb:	e8 25 c0 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001d5d0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d5d6:	6a 03                	push   0x3
c001d5d8:	50                   	push   eax
c001d5d9:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d5df:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d5e5:	e8 14 c7 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001d5ea:	83 c4 14             	add    esp,0x14
c001d5ed:	53                   	push   ebx
c001d5ee:	e8 27 f4 fe ff       	call   c000ca1a <PhysicalDisk::startCache()>
c001d5f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5f6:	e8 6b 06 ff ff       	call   c000dc66 <createPartitionsForDisk(PhysicalDisk*)>
c001d5fb:	83 c4 14             	add    esp,0x14
c001d5fe:	31 c0                	xor    eax,eax
c001d600:	5b                   	pop    ebx
c001d601:	5e                   	pop    esi
c001d602:	c3                   	ret    
c001d603:	90                   	nop

c001d604 <SATA::SATA()>:
c001d604:	83 ec 0c             	sub    esp,0xc
c001d607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d60b:	83 ec 04             	sub    esp,0x4
c001d60e:	68 00 02 00 00       	push   0x200
c001d613:	68 34 2c 02 c0       	push   0xc0022c34
c001d618:	50                   	push   eax
c001d619:	e8 94 f3 fe ff       	call   c000c9b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d61e:	83 c4 10             	add    esp,0x10
c001d621:	ba a4 2c 02 c0       	mov    edx,0xc0022ca4
c001d626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d62a:	89 10                	mov    DWORD PTR [eax],edx
c001d62c:	90                   	nop
c001d62d:	83 c4 0c             	add    esp,0xc
c001d630:	c3                   	ret    
c001d631:	90                   	nop

c001d632 <SATA::access(unsigned long long, int, void*, bool)>:
c001d632:	55                   	push   ebp
c001d633:	57                   	push   edi
c001d634:	56                   	push   esi
c001d635:	53                   	push   ebx
c001d636:	83 ec 2c             	sub    esp,0x2c
c001d639:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d63d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d642:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d646:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d64a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d64e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d652:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d656:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d65a:	7e 10                	jle    c001d66c <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001d65c:	83 ec 0c             	sub    esp,0xc
c001d65f:	68 44 2c 02 c0       	push   0xc0022c44
c001d664:	e8 f4 3a ff ff       	call   c001115d <KePanic(char const*)>
c001d669:	83 c4 10             	add    esp,0x10
c001d66c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d672:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001d678:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d67e:	89 e8                	mov    eax,ebp
c001d680:	c1 e0 07             	shl    eax,0x7
c001d683:	01 d0                	add    eax,edx
c001d685:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d68f:	8d 45 02             	lea    eax,[ebp+0x2]
c001d692:	51                   	push   ecx
c001d693:	c1 e0 07             	shl    eax,0x7
c001d696:	51                   	push   ecx
c001d697:	01 d0                	add    eax,edx
c001d699:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d69d:	50                   	push   eax
c001d69e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d6a4:	e8 6b ec ff ff       	call   c001c314 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d6a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d6ad:	83 c4 10             	add    esp,0x10
c001d6b0:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001d6b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d6b9:	0f 84 5b 01 00 00    	je     c001d81a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d6bf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d6c3:	c1 e0 09             	shl    eax,0x9
c001d6c6:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d6cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d6cf:	74 0e                	je     c001d6df <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001d6d1:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d6d7:	89 c1                	mov    ecx,eax
c001d6d9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d6dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d6df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d6e3:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d6e9:	8d 45 02             	lea    eax,[ebp+0x2]
c001d6ec:	c1 e0 07             	shl    eax,0x7
c001d6ef:	01 d0                	add    eax,edx
c001d6f1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6f3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d6f9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d6ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d703:	c1 e1 05             	shl    ecx,0x5
c001d706:	01 c8                	add    eax,ecx
c001d708:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d70c:	83 e1 01             	and    ecx,0x1
c001d70f:	89 ce                	mov    esi,ecx
c001d711:	8a 08                	mov    cl,BYTE PTR [eax]
c001d713:	c1 e6 06             	shl    esi,0x6
c001d716:	83 e1 bf             	and    ecx,0xffffffbf
c001d719:	09 f1                	or     ecx,esi
c001d71b:	88 08                	mov    BYTE PTR [eax],cl
c001d71d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d71f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d725:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d72b:	89 08                	mov    DWORD PTR [eax],ecx
c001d72d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d733:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d739:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d73f:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d742:	50                   	push   eax
c001d743:	68 90 00 00 00       	push   0x90
c001d748:	6a 00                	push   0x0
c001d74a:	56                   	push   esi
c001d74b:	e8 a0 2d fe ff       	call   c00004f0 <memset>
c001d750:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d756:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d75c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d760:	83 c4 10             	add    esp,0x10
c001d763:	48                   	dec    eax
c001d764:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d769:	89 c1                	mov    ecx,eax
c001d76b:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d771:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d776:	09 c8                	or     eax,ecx
c001d778:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d77e:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d784:	83 c8 80             	or     eax,0xffffff80
c001d787:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d78d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d790:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d794:	25 00 7f 00 00       	and    eax,0x7f00
c001d799:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d79e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d7a3:	66 89 06             	mov    WORD PTR [esi],ax
c001d7a6:	b0 35                	mov    al,0x35
c001d7a8:	75 02                	jne    c001d7ac <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001d7aa:	b0 25                	mov    al,0x25
c001d7ac:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d7af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7b3:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d7b7:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d7bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7bf:	c1 e8 10             	shr    eax,0x10
c001d7c2:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d7c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7c9:	c1 e8 18             	shr    eax,0x18
c001d7cc:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d7cf:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d7d3:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d7d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d7da:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d7dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d7e1:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d7e5:	89 ee                	mov    esi,ebp
c001d7e7:	31 c0                	xor    eax,eax
c001d7e9:	c1 e6 07             	shl    esi,0x7
c001d7ec:	01 d6                	add    esi,edx
c001d7ee:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d7f4:	80 e1 88             	and    cl,0x88
c001d7f7:	74 0a                	je     c001d803 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d7f9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d7fe:	74 0a                	je     c001d80a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d800:	40                   	inc    eax
c001d801:	eb eb                	jmp    c001d7ee <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d803:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d808:	75 17                	jne    c001d821 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d80a:	83 ec 0c             	sub    esp,0xc
c001d80d:	68 7d 2c 02 c0       	push   0xc0022c7d
c001d812:	e8 f3 d0 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d817:	83 c4 10             	add    esp,0x10
c001d81a:	b8 01 00 00 00       	mov    eax,0x1
c001d81f:	eb 5b                	jmp    c001d87c <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d821:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d825:	c1 e5 07             	shl    ebp,0x7
c001d828:	b8 01 00 00 00       	mov    eax,0x1
c001d82d:	01 ea                	add    edx,ebp
c001d82f:	d3 e0                	shl    eax,cl
c001d831:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d837:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d83d:	85 c8                	test   eax,ecx
c001d83f:	74 16                	je     c001d857 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001d841:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d847:	0f ba e1 1e          	bt     ecx,0x1e
c001d84b:	73 ea                	jae    c001d837 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001d84d:	83 ec 0c             	sub    esp,0xc
c001d850:	68 8b 2c 02 c0       	push   0xc0022c8b
c001d855:	eb bb                	jmp    c001d812 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d857:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d85d:	0f ba e0 1e          	bt     eax,0x1e
c001d861:	72 b7                	jb     c001d81a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d863:	31 c0                	xor    eax,eax
c001d865:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d86a:	75 10                	jne    c001d87c <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d86c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d872:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d876:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d87a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d87c:	83 c4 2c             	add    esp,0x2c
c001d87f:	5b                   	pop    ebx
c001d880:	5e                   	pop    esi
c001d881:	5f                   	pop    edi
c001d882:	5d                   	pop    ebp
c001d883:	c3                   	ret    

c001d884 <SATA::read(unsigned long long, int, void*)>:
c001d884:	55                   	push   ebp
c001d885:	57                   	push   edi
c001d886:	56                   	push   esi
c001d887:	be 04 00 00 00       	mov    esi,0x4
c001d88c:	53                   	push   ebx
c001d88d:	83 ec 0c             	sub    esp,0xc
c001d890:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d894:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d898:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d89c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d8a0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d8a3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d8a9:	0f 87 1a 02 00 00    	ja     c001dac9 <SATA::read(unsigned long long, int, void*)+0x245>
c001d8af:	85 c9                	test   ecx,ecx
c001d8b1:	be 06 00 00 00       	mov    esi,0x6
c001d8b6:	0f 84 0d 02 00 00    	je     c001dac9 <SATA::read(unsigned long long, int, void*)+0x245>
c001d8bc:	56                   	push   esi
c001d8bd:	56                   	push   esi
c001d8be:	6a 00                	push   0x0
c001d8c0:	51                   	push   ecx
c001d8c1:	53                   	push   ebx
c001d8c2:	52                   	push   edx
c001d8c3:	50                   	push   eax
c001d8c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8c8:	e8 65 fd ff ff       	call   c001d632 <SATA::access(unsigned long long, int, void*, bool)>
c001d8cd:	83 c4 20             	add    esp,0x20
c001d8d0:	85 c0                	test   eax,eax
c001d8d2:	89 c6                	mov    esi,eax
c001d8d4:	0f 85 ea 01 00 00    	jne    c001dac4 <SATA::read(unsigned long long, int, void*)+0x240>
c001d8da:	50                   	push   eax
c001d8db:	50                   	push   eax
c001d8dc:	6a 0f                	push   0xf
c001d8de:	6a 00                	push   0x0
c001d8e0:	01 1d 54 ae 02 c0    	add    DWORD PTR ds:0xc002ae54,ebx
c001d8e6:	bb 0a 00 00 00       	mov    ebx,0xa
c001d8eb:	e8 7d f2 ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001d8f0:	5a                   	pop    edx
c001d8f1:	59                   	pop    ecx
c001d8f2:	b9 10 27 00 00       	mov    ecx,0x2710
c001d8f7:	0f b6 c0             	movzx  eax,al
c001d8fa:	50                   	push   eax
c001d8fb:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d900:	99                   	cdq    
c001d901:	f7 f9                	idiv   ecx
c001d903:	99                   	cdq    
c001d904:	f7 fb                	idiv   ebx
c001d906:	8d 42 30             	lea    eax,[edx+0x30]
c001d909:	0f b6 c0             	movzx  eax,al
c001d90c:	50                   	push   eax
c001d90d:	e8 4a f2 ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001d912:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d918:	5f                   	pop    edi
c001d919:	5d                   	pop    ebp
c001d91a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d91f:	6a 0f                	push   0xf
c001d921:	6a 00                	push   0x0
c001d923:	e8 45 f2 ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001d928:	5a                   	pop    edx
c001d929:	59                   	pop    ecx
c001d92a:	0f b6 c0             	movzx  eax,al
c001d92d:	50                   	push   eax
c001d92e:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d933:	99                   	cdq    
c001d934:	f7 fd                	idiv   ebp
c001d936:	99                   	cdq    
c001d937:	f7 fb                	idiv   ebx
c001d939:	8d 42 30             	lea    eax,[edx+0x30]
c001d93c:	0f b6 c0             	movzx  eax,al
c001d93f:	50                   	push   eax
c001d940:	e8 17 f2 ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001d945:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d94b:	5f                   	pop    edi
c001d94c:	bf 64 00 00 00       	mov    edi,0x64
c001d951:	58                   	pop    eax
c001d952:	6a 0f                	push   0xf
c001d954:	6a 00                	push   0x0
c001d956:	e8 12 f2 ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001d95b:	5a                   	pop    edx
c001d95c:	59                   	pop    ecx
c001d95d:	0f b6 c0             	movzx  eax,al
c001d960:	50                   	push   eax
c001d961:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d966:	99                   	cdq    
c001d967:	f7 ff                	idiv   edi
c001d969:	99                   	cdq    
c001d96a:	f7 fb                	idiv   ebx
c001d96c:	8d 42 30             	lea    eax,[edx+0x30]
c001d96f:	0f b6 c0             	movzx  eax,al
c001d972:	50                   	push   eax
c001d973:	e8 e4 f1 ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001d978:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d97e:	58                   	pop    eax
c001d97f:	5a                   	pop    edx
c001d980:	6a 0f                	push   0xf
c001d982:	6a 00                	push   0x0
c001d984:	e8 e4 f1 ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001d989:	59                   	pop    ecx
c001d98a:	5a                   	pop    edx
c001d98b:	0f b6 c0             	movzx  eax,al
c001d98e:	50                   	push   eax
c001d98f:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d994:	99                   	cdq    
c001d995:	f7 fb                	idiv   ebx
c001d997:	99                   	cdq    
c001d998:	f7 fb                	idiv   ebx
c001d99a:	8d 42 30             	lea    eax,[edx+0x30]
c001d99d:	0f b6 c0             	movzx  eax,al
c001d9a0:	50                   	push   eax
c001d9a1:	e8 b6 f1 ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001d9a6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d9ac:	59                   	pop    ecx
c001d9ad:	58                   	pop    eax
c001d9ae:	6a 0f                	push   0xf
c001d9b0:	6a 00                	push   0x0
c001d9b2:	e8 b6 f1 ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001d9b7:	5a                   	pop    edx
c001d9b8:	59                   	pop    ecx
c001d9b9:	0f b6 c0             	movzx  eax,al
c001d9bc:	50                   	push   eax
c001d9bd:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d9c2:	99                   	cdq    
c001d9c3:	f7 fb                	idiv   ebx
c001d9c5:	83 c2 30             	add    edx,0x30
c001d9c8:	0f b6 d2             	movzx  edx,dl
c001d9cb:	52                   	push   edx
c001d9cc:	e8 8b f1 ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001d9d1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d9d7:	58                   	pop    eax
c001d9d8:	5a                   	pop    edx
c001d9d9:	6a 0f                	push   0xf
c001d9db:	6a 00                	push   0x0
c001d9dd:	e8 8b f1 ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001d9e2:	59                   	pop    ecx
c001d9e3:	b9 10 27 00 00       	mov    ecx,0x2710
c001d9e8:	5a                   	pop    edx
c001d9e9:	0f b6 c0             	movzx  eax,al
c001d9ec:	50                   	push   eax
c001d9ed:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001d9f2:	99                   	cdq    
c001d9f3:	f7 f9                	idiv   ecx
c001d9f5:	99                   	cdq    
c001d9f6:	f7 fb                	idiv   ebx
c001d9f8:	8d 42 30             	lea    eax,[edx+0x30]
c001d9fb:	0f b6 c0             	movzx  eax,al
c001d9fe:	50                   	push   eax
c001d9ff:	e8 58 f1 ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001da04:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001da0a:	59                   	pop    ecx
c001da0b:	58                   	pop    eax
c001da0c:	6a 0f                	push   0xf
c001da0e:	6a 00                	push   0x0
c001da10:	e8 58 f1 ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001da15:	5a                   	pop    edx
c001da16:	59                   	pop    ecx
c001da17:	0f b6 c0             	movzx  eax,al
c001da1a:	50                   	push   eax
c001da1b:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da20:	99                   	cdq    
c001da21:	f7 fd                	idiv   ebp
c001da23:	99                   	cdq    
c001da24:	f7 fb                	idiv   ebx
c001da26:	8d 42 30             	lea    eax,[edx+0x30]
c001da29:	0f b6 c0             	movzx  eax,al
c001da2c:	50                   	push   eax
c001da2d:	e8 2a f1 ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001da32:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001da38:	5d                   	pop    ebp
c001da39:	58                   	pop    eax
c001da3a:	6a 0f                	push   0xf
c001da3c:	6a 00                	push   0x0
c001da3e:	e8 2a f1 ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001da43:	5a                   	pop    edx
c001da44:	59                   	pop    ecx
c001da45:	0f b6 c0             	movzx  eax,al
c001da48:	50                   	push   eax
c001da49:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da4e:	99                   	cdq    
c001da4f:	f7 ff                	idiv   edi
c001da51:	99                   	cdq    
c001da52:	f7 fb                	idiv   ebx
c001da54:	8d 42 30             	lea    eax,[edx+0x30]
c001da57:	0f b6 c0             	movzx  eax,al
c001da5a:	50                   	push   eax
c001da5b:	e8 fc f0 ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001da60:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001da66:	5f                   	pop    edi
c001da67:	5d                   	pop    ebp
c001da68:	6a 0f                	push   0xf
c001da6a:	6a 00                	push   0x0
c001da6c:	e8 fc f0 ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001da71:	5a                   	pop    edx
c001da72:	59                   	pop    ecx
c001da73:	0f b6 c0             	movzx  eax,al
c001da76:	50                   	push   eax
c001da77:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da7c:	99                   	cdq    
c001da7d:	f7 fb                	idiv   ebx
c001da7f:	99                   	cdq    
c001da80:	f7 fb                	idiv   ebx
c001da82:	8d 42 30             	lea    eax,[edx+0x30]
c001da85:	0f b6 c0             	movzx  eax,al
c001da88:	50                   	push   eax
c001da89:	e8 ce f0 ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001da8e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001da94:	5f                   	pop    edi
c001da95:	5d                   	pop    ebp
c001da96:	6a 0f                	push   0xf
c001da98:	6a 00                	push   0x0
c001da9a:	e8 ce f0 ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001da9f:	5a                   	pop    edx
c001daa0:	59                   	pop    ecx
c001daa1:	0f b6 c0             	movzx  eax,al
c001daa4:	50                   	push   eax
c001daa5:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001daaa:	99                   	cdq    
c001daab:	f7 fb                	idiv   ebx
c001daad:	83 c2 30             	add    edx,0x30
c001dab0:	0f b6 d2             	movzx  edx,dl
c001dab3:	52                   	push   edx
c001dab4:	e8 a3 f0 ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001dab9:	83 c4 10             	add    esp,0x10
c001dabc:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dac2:	eb 05                	jmp    c001dac9 <SATA::read(unsigned long long, int, void*)+0x245>
c001dac4:	be 01 00 00 00       	mov    esi,0x1
c001dac9:	83 c4 0c             	add    esp,0xc
c001dacc:	89 f0                	mov    eax,esi
c001dace:	5b                   	pop    ebx
c001dacf:	5e                   	pop    esi
c001dad0:	5f                   	pop    edi
c001dad1:	5d                   	pop    ebp
c001dad2:	c3                   	ret    
c001dad3:	90                   	nop

c001dad4 <SATA::write(unsigned long long, int, void*)>:
c001dad4:	55                   	push   ebp
c001dad5:	57                   	push   edi
c001dad6:	56                   	push   esi
c001dad7:	53                   	push   ebx
c001dad8:	83 ec 0c             	sub    esp,0xc
c001dadb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dadf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dae3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dae7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001daeb:	8d 70 ff             	lea    esi,[eax-0x1]
c001daee:	b8 04 00 00 00       	mov    eax,0x4
c001daf3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001daf9:	0f 87 2c 02 00 00    	ja     c001dd2b <SATA::write(unsigned long long, int, void*)+0x257>
c001daff:	85 db                	test   ebx,ebx
c001db01:	b8 06 00 00 00       	mov    eax,0x6
c001db06:	0f 84 1f 02 00 00    	je     c001dd2b <SATA::write(unsigned long long, int, void*)+0x257>
c001db0c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001db10:	c1 e6 09             	shl    esi,0x9
c001db13:	01 de                	add    esi,ebx
c001db15:	50                   	push   eax
c001db16:	89 d7                	mov    edi,edx
c001db18:	50                   	push   eax
c001db19:	83 c7 01             	add    edi,0x1
c001db1c:	6a 01                	push   0x1
c001db1e:	89 cd                	mov    ebp,ecx
c001db20:	53                   	push   ebx
c001db21:	83 d5 00             	adc    ebp,0x0
c001db24:	6a 01                	push   0x1
c001db26:	81 c3 00 02 00 00    	add    ebx,0x200
c001db2c:	51                   	push   ecx
c001db2d:	52                   	push   edx
c001db2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db32:	e8 fb fa ff ff       	call   c001d632 <SATA::access(unsigned long long, int, void*, bool)>
c001db37:	83 c4 20             	add    esp,0x20
c001db3a:	39 f3                	cmp    ebx,esi
c001db3c:	89 fa                	mov    edx,edi
c001db3e:	89 e9                	mov    ecx,ebp
c001db40:	75 d3                	jne    c001db15 <SATA::write(unsigned long long, int, void*)+0x41>
c001db42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001db46:	bd 10 27 00 00       	mov    ebp,0x2710
c001db4b:	bb 0a 00 00 00       	mov    ebx,0xa
c001db50:	01 05 50 ae 02 c0    	add    DWORD PTR ds:0xc002ae50,eax
c001db56:	50                   	push   eax
c001db57:	50                   	push   eax
c001db58:	6a 0f                	push   0xf
c001db5a:	6a 00                	push   0x0
c001db5c:	e8 0c f0 ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001db61:	5a                   	pop    edx
c001db62:	59                   	pop    ecx
c001db63:	0f b6 c0             	movzx  eax,al
c001db66:	50                   	push   eax
c001db67:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001db6c:	99                   	cdq    
c001db6d:	f7 fd                	idiv   ebp
c001db6f:	99                   	cdq    
c001db70:	f7 fb                	idiv   ebx
c001db72:	8d 42 30             	lea    eax,[edx+0x30]
c001db75:	0f b6 c0             	movzx  eax,al
c001db78:	50                   	push   eax
c001db79:	e8 de ef ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001db7e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001db84:	5e                   	pop    esi
c001db85:	5f                   	pop    edi
c001db86:	bf e8 03 00 00       	mov    edi,0x3e8
c001db8b:	6a 0f                	push   0xf
c001db8d:	6a 00                	push   0x0
c001db8f:	e8 d9 ef ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001db94:	5a                   	pop    edx
c001db95:	59                   	pop    ecx
c001db96:	0f b6 c0             	movzx  eax,al
c001db99:	50                   	push   eax
c001db9a:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001db9f:	99                   	cdq    
c001dba0:	f7 ff                	idiv   edi
c001dba2:	99                   	cdq    
c001dba3:	f7 fb                	idiv   ebx
c001dba5:	8d 42 30             	lea    eax,[edx+0x30]
c001dba8:	0f b6 c0             	movzx  eax,al
c001dbab:	50                   	push   eax
c001dbac:	e8 ab ef ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001dbb1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dbb7:	5e                   	pop    esi
c001dbb8:	be 64 00 00 00       	mov    esi,0x64
c001dbbd:	58                   	pop    eax
c001dbbe:	6a 0f                	push   0xf
c001dbc0:	6a 00                	push   0x0
c001dbc2:	e8 a6 ef ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001dbc7:	5a                   	pop    edx
c001dbc8:	59                   	pop    ecx
c001dbc9:	0f b6 c0             	movzx  eax,al
c001dbcc:	50                   	push   eax
c001dbcd:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dbd2:	99                   	cdq    
c001dbd3:	f7 fe                	idiv   esi
c001dbd5:	99                   	cdq    
c001dbd6:	f7 fb                	idiv   ebx
c001dbd8:	8d 42 30             	lea    eax,[edx+0x30]
c001dbdb:	0f b6 c0             	movzx  eax,al
c001dbde:	50                   	push   eax
c001dbdf:	e8 78 ef ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001dbe4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dbea:	58                   	pop    eax
c001dbeb:	5a                   	pop    edx
c001dbec:	6a 0f                	push   0xf
c001dbee:	6a 00                	push   0x0
c001dbf0:	e8 78 ef ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001dbf5:	59                   	pop    ecx
c001dbf6:	5a                   	pop    edx
c001dbf7:	0f b6 c0             	movzx  eax,al
c001dbfa:	50                   	push   eax
c001dbfb:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dc00:	99                   	cdq    
c001dc01:	f7 fb                	idiv   ebx
c001dc03:	99                   	cdq    
c001dc04:	f7 fb                	idiv   ebx
c001dc06:	8d 42 30             	lea    eax,[edx+0x30]
c001dc09:	0f b6 c0             	movzx  eax,al
c001dc0c:	50                   	push   eax
c001dc0d:	e8 4a ef ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001dc12:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dc18:	59                   	pop    ecx
c001dc19:	58                   	pop    eax
c001dc1a:	6a 0f                	push   0xf
c001dc1c:	6a 00                	push   0x0
c001dc1e:	e8 4a ef ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001dc23:	5a                   	pop    edx
c001dc24:	59                   	pop    ecx
c001dc25:	0f b6 c0             	movzx  eax,al
c001dc28:	50                   	push   eax
c001dc29:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dc2e:	99                   	cdq    
c001dc2f:	f7 fb                	idiv   ebx
c001dc31:	83 c2 30             	add    edx,0x30
c001dc34:	0f b6 d2             	movzx  edx,dl
c001dc37:	52                   	push   edx
c001dc38:	e8 1f ef ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001dc3d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dc43:	58                   	pop    eax
c001dc44:	5a                   	pop    edx
c001dc45:	6a 0f                	push   0xf
c001dc47:	6a 00                	push   0x0
c001dc49:	e8 1f ef ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001dc4e:	59                   	pop    ecx
c001dc4f:	5a                   	pop    edx
c001dc50:	0f b6 c0             	movzx  eax,al
c001dc53:	50                   	push   eax
c001dc54:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dc59:	99                   	cdq    
c001dc5a:	f7 fd                	idiv   ebp
c001dc5c:	99                   	cdq    
c001dc5d:	f7 fb                	idiv   ebx
c001dc5f:	8d 42 30             	lea    eax,[edx+0x30]
c001dc62:	0f b6 c0             	movzx  eax,al
c001dc65:	50                   	push   eax
c001dc66:	e8 f1 ee ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001dc6b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dc71:	59                   	pop    ecx
c001dc72:	5d                   	pop    ebp
c001dc73:	6a 0f                	push   0xf
c001dc75:	6a 00                	push   0x0
c001dc77:	e8 f1 ee ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001dc7c:	5a                   	pop    edx
c001dc7d:	59                   	pop    ecx
c001dc7e:	0f b6 c0             	movzx  eax,al
c001dc81:	50                   	push   eax
c001dc82:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dc87:	99                   	cdq    
c001dc88:	f7 ff                	idiv   edi
c001dc8a:	99                   	cdq    
c001dc8b:	f7 fb                	idiv   ebx
c001dc8d:	8d 42 30             	lea    eax,[edx+0x30]
c001dc90:	0f b6 c0             	movzx  eax,al
c001dc93:	50                   	push   eax
c001dc94:	e8 c3 ee ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001dc99:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dc9f:	5f                   	pop    edi
c001dca0:	5d                   	pop    ebp
c001dca1:	6a 0f                	push   0xf
c001dca3:	6a 00                	push   0x0
c001dca5:	e8 c3 ee ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001dcaa:	5a                   	pop    edx
c001dcab:	59                   	pop    ecx
c001dcac:	0f b6 c0             	movzx  eax,al
c001dcaf:	50                   	push   eax
c001dcb0:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dcb5:	99                   	cdq    
c001dcb6:	f7 fe                	idiv   esi
c001dcb8:	99                   	cdq    
c001dcb9:	f7 fb                	idiv   ebx
c001dcbb:	8d 42 30             	lea    eax,[edx+0x30]
c001dcbe:	0f b6 c0             	movzx  eax,al
c001dcc1:	50                   	push   eax
c001dcc2:	e8 95 ee ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001dcc7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dccd:	5e                   	pop    esi
c001dcce:	5f                   	pop    edi
c001dccf:	6a 0f                	push   0xf
c001dcd1:	6a 00                	push   0x0
c001dcd3:	e8 95 ee ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001dcd8:	5d                   	pop    ebp
c001dcd9:	5a                   	pop    edx
c001dcda:	0f b6 c0             	movzx  eax,al
c001dcdd:	50                   	push   eax
c001dcde:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dce3:	99                   	cdq    
c001dce4:	f7 fb                	idiv   ebx
c001dce6:	99                   	cdq    
c001dce7:	f7 fb                	idiv   ebx
c001dce9:	8d 42 30             	lea    eax,[edx+0x30]
c001dcec:	0f b6 c0             	movzx  eax,al
c001dcef:	50                   	push   eax
c001dcf0:	e8 67 ee ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001dcf5:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dcfb:	59                   	pop    ecx
c001dcfc:	5e                   	pop    esi
c001dcfd:	6a 0f                	push   0xf
c001dcff:	6a 00                	push   0x0
c001dd01:	e8 67 ee ff ff       	call   c001cb6d <combineColours(unsigned char, unsigned char)>
c001dd06:	5f                   	pop    edi
c001dd07:	5d                   	pop    ebp
c001dd08:	0f b6 c0             	movzx  eax,al
c001dd0b:	50                   	push   eax
c001dd0c:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dd11:	99                   	cdq    
c001dd12:	f7 fb                	idiv   ebx
c001dd14:	83 c2 30             	add    edx,0x30
c001dd17:	0f b6 d2             	movzx  edx,dl
c001dd1a:	52                   	push   edx
c001dd1b:	e8 3c ee ff ff       	call   c001cb5c <combineCharAndColour(char, unsigned char)>
c001dd20:	83 c4 10             	add    esp,0x10
c001dd23:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dd29:	31 c0                	xor    eax,eax
c001dd2b:	83 c4 0c             	add    esp,0xc
c001dd2e:	5b                   	pop    ebx
c001dd2f:	5e                   	pop    esi
c001dd30:	5f                   	pop    edi
c001dd31:	5d                   	pop    ebp
c001dd32:	c3                   	ret    
c001dd33:	90                   	nop

c001dd34 <SATAPI::write(unsigned long long, int, void*)>:
c001dd34:	b8 03 00 00 00       	mov    eax,0x3
c001dd39:	c3                   	ret    

c001dd3a <SATAPI::close(int, int, void*)>:
c001dd3a:	83 ec 0c             	sub    esp,0xc
c001dd3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd41:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dd47:	85 c0                	test   eax,eax
c001dd49:	74 0c                	je     c001dd57 <SATAPI::close(int, int, void*)+0x1d>
c001dd4b:	8b 10                	mov    edx,DWORD PTR [eax]
c001dd4d:	83 ec 0c             	sub    esp,0xc
c001dd50:	50                   	push   eax
c001dd51:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dd54:	83 c4 10             	add    esp,0x10
c001dd57:	31 c0                	xor    eax,eax
c001dd59:	83 c4 0c             	add    esp,0xc
c001dd5c:	c3                   	ret    
c001dd5d:	90                   	nop

c001dd5e <SATAPI::SATAPI()>:
c001dd5e:	83 ec 0c             	sub    esp,0xc
c001dd61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd65:	83 ec 04             	sub    esp,0x4
c001dd68:	68 00 08 00 00       	push   0x800
c001dd6d:	68 d4 2c 02 c0       	push   0xc0022cd4
c001dd72:	50                   	push   eax
c001dd73:	e8 3a ec fe ff       	call   c000c9b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dd78:	83 c4 10             	add    esp,0x10
c001dd7b:	ba c8 2d 02 c0       	mov    edx,0xc0022dc8
c001dd80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd84:	89 10                	mov    DWORD PTR [eax],edx
c001dd86:	90                   	nop
c001dd87:	83 c4 0c             	add    esp,0xc
c001dd8a:	c3                   	ret    
c001dd8b:	90                   	nop

c001dd8c <SATAPI::diskRemoved()>:
c001dd8c:	c3                   	ret    
c001dd8d:	90                   	nop

c001dd8e <SATAPI::diskInserted()>:
c001dd8e:	83 ec 18             	sub    esp,0x18
c001dd91:	68 e0 2c 02 c0       	push   0xc0022ce0
c001dd96:	e8 6f cb fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001dd9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd9f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001dda6:	83 c4 1c             	add    esp,0x1c
c001dda9:	c3                   	ret    

c001ddaa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ddaa:	55                   	push   ebp
c001ddab:	57                   	push   edi
c001ddac:	56                   	push   esi
c001ddad:	53                   	push   ebx
c001ddae:	83 ec 34             	sub    esp,0x34
c001ddb1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ddb5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ddb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ddbd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ddc1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ddc5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ddcb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ddd5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001dddb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dddf:	83 c0 02             	add    eax,0x2
c001dde2:	c1 e0 07             	shl    eax,0x7
c001dde5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dde9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dded:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ddf1:	c1 e0 07             	shl    eax,0x7
c001ddf4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ddf8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ddfc:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001de06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001de0a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001de10:	e8 ff e4 ff ff       	call   c001c314 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001de15:	83 c4 10             	add    esp,0x10
c001de18:	89 c2                	mov    edx,eax
c001de1a:	b8 01 00 00 00       	mov    eax,0x1
c001de1f:	83 fa ff             	cmp    edx,0xffffffff
c001de22:	0f 84 5f 02 00 00    	je     c001e087 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001de28:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001de2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de30:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001de36:	8b 00                	mov    eax,DWORD PTR [eax]
c001de38:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001de3e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001de44:	89 d1                	mov    ecx,edx
c001de46:	c1 e1 05             	shl    ecx,0x5
c001de49:	01 c8                	add    eax,ecx
c001de4b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de4d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001de53:	81 c9 25 00 01 00    	or     ecx,0x10025
c001de59:	89 08                	mov    DWORD PTR [eax],ecx
c001de5b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001de61:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001de67:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001de6d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001de70:	50                   	push   eax
c001de71:	68 90 00 00 00       	push   0x90
c001de76:	6a 00                	push   0x0
c001de78:	53                   	push   ebx
c001de79:	e8 72 26 fe ff       	call   c00004f0 <memset>
c001de7e:	8d 7b 40             	lea    edi,[ebx+0x40]
c001de81:	b9 0c 00 00 00       	mov    ecx,0xc
c001de86:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001de8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de8c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001de92:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001de96:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001de9a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001dea0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dea4:	48                   	dec    eax
c001dea5:	25 ff ff 3f 00       	and    eax,0x3fffff
c001deaa:	89 c1                	mov    ecx,eax
c001deac:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001deb2:	25 00 00 c0 ff       	and    eax,0xffc00000
c001deb7:	09 c8                	or     eax,ecx
c001deb9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001debf:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001dec5:	83 c8 80             	or     eax,0xffffff80
c001dec8:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001dece:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001ded1:	25 00 7f 00 00       	and    eax,0x7f00
c001ded6:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dedb:	66 89 03             	mov    WORD PTR [ebx],ax
c001dede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dee2:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001dee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001deea:	c1 e8 10             	shr    eax,0x10
c001deed:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001def0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001def4:	c1 e8 18             	shr    eax,0x18
c001def7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001defa:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001defe:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001df01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001df05:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001df08:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df0c:	83 c4 10             	add    esp,0x10
c001df0f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df13:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001df17:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001df1b:	31 c0                	xor    eax,eax
c001df1d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001df23:	80 e1 88             	and    cl,0x88
c001df26:	74 0a                	je     c001df32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001df28:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df2d:	74 0a                	je     c001df39 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001df2f:	40                   	inc    eax
c001df30:	eb eb                	jmp    c001df1d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001df32:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df37:	75 43                	jne    c001df7c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001df39:	83 ec 0c             	sub    esp,0xc
c001df3c:	68 f8 2c 02 c0       	push   0xc0022cf8
c001df41:	e8 c4 c9 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001df46:	58                   	pop    eax
c001df47:	5a                   	pop    edx
c001df48:	68 0d 2d 02 c0       	push   0xc0022d0d
c001df4d:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001df53:	e8 54 ab fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001df58:	59                   	pop    ecx
c001df59:	5b                   	pop    ebx
c001df5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df5e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df64:	e8 45 e4 ff ff       	call   c001c3ae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001df69:	5e                   	pop    esi
c001df6a:	5f                   	pop    edi
c001df6b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df6f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df75:	e8 14 e4 ff ff       	call   c001c38e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001df7a:	eb 48                	jmp    c001dfc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001df7c:	b8 01 00 00 00       	mov    eax,0x1
c001df81:	88 d1                	mov    cl,dl
c001df83:	d3 e0                	shl    eax,cl
c001df85:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001df8a:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001df90:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df94:	89 c7                	mov    edi,eax
c001df96:	c1 e3 07             	shl    ebx,0x7
c001df99:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001df9d:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001dfa3:	85 c7                	test   edi,eax
c001dfa5:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001dfab:	0f 84 a3 00 00 00    	je     c001e054 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001dfb1:	0f ba e0 1e          	bt     eax,0x1e
c001dfb5:	73 1a                	jae    c001dfd1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001dfb7:	83 ec 0c             	sub    esp,0xc
c001dfba:	68 1f 2d 02 c0       	push   0xc0022d1f
c001dfbf:	e8 46 c9 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001dfc4:	83 c4 10             	add    esp,0x10
c001dfc7:	b8 01 00 00 00       	mov    eax,0x1
c001dfcc:	e9 b6 00 00 00       	jmp    c001e087 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001dfd1:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001dfd7:	83 f8 0d             	cmp    eax,0xd
c001dfda:	77 0a                	ja     c001dfe6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001dfdc:	83 ec 0c             	sub    esp,0xc
c001dfdf:	68 c8 00 00 00       	push   0xc8
c001dfe4:	eb 28                	jmp    c001e00e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001dfe6:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001dfec:	83 f8 0d             	cmp    eax,0xd
c001dfef:	77 0a                	ja     c001dffb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001dff1:	83 ec 0c             	sub    esp,0xc
c001dff4:	68 58 02 00 00       	push   0x258
c001dff9:	eb 13                	jmp    c001e00e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001dffb:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e001:	83 f8 06             	cmp    eax,0x6
c001e004:	77 10                	ja     c001e016 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e006:	83 ec 0c             	sub    esp,0xc
c001e009:	68 dc 05 00 00       	push   0x5dc
c001e00e:	e8 69 7d ff ff       	call   c0015d7c <milliTenthSleep(unsigned int)>
c001e013:	83 c4 10             	add    esp,0x10
c001e016:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e01a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e01d:	75 06                	jne    c001e025 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e01f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e023:	74 15                	je     c001e03a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e025:	83 fe 06             	cmp    esi,0x6
c001e028:	77 10                	ja     c001e03a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e02a:	83 ec 0c             	sub    esp,0xc
c001e02d:	68 c4 09 00 00       	push   0x9c4
c001e032:	e8 45 7d ff ff       	call   c0015d7c <milliTenthSleep(unsigned int)>
c001e037:	83 c4 10             	add    esp,0x10
c001e03a:	46                   	inc    esi
c001e03b:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e041:	0f 85 56 ff ff ff    	jne    c001df9d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e047:	83 ec 0c             	sub    esp,0xc
c001e04a:	68 32 2d 02 c0       	push   0xc0022d32
c001e04f:	e9 6b ff ff ff       	jmp    c001dfbf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e054:	0f ba e0 1e          	bt     eax,0x1e
c001e058:	73 0d                	jae    c001e067 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e05a:	83 ec 0c             	sub    esp,0xc
c001e05d:	68 46 2d 02 c0       	push   0xc0022d46
c001e062:	e9 58 ff ff ff       	jmp    c001dfbf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e067:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e06c:	74 17                	je     c001e085 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e06e:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e073:	74 10                	je     c001e085 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e075:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e07b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e07f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e083:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e085:	31 c0                	xor    eax,eax
c001e087:	83 c4 2c             	add    esp,0x2c
c001e08a:	5b                   	pop    ebx
c001e08b:	5e                   	pop    esi
c001e08c:	5f                   	pop    edi
c001e08d:	5d                   	pop    ebp
c001e08e:	c3                   	ret    
c001e08f:	90                   	nop

c001e090 <SATAPI::eject()>:
c001e090:	57                   	push   edi
c001e091:	b9 03 00 00 00       	mov    ecx,0x3
c001e096:	83 ec 18             	sub    esp,0x18
c001e099:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e09d:	fc                   	cld    
c001e09e:	31 c0                	xor    eax,eax
c001e0a0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e0a2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e0a7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e0ac:	50                   	push   eax
c001e0ad:	6a 00                	push   0x0
c001e0af:	6a 00                	push   0x0
c001e0b1:	6a 00                	push   0x0
c001e0b3:	6a 00                	push   0x0
c001e0b5:	6a 02                	push   0x2
c001e0b7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0bb:	50                   	push   eax
c001e0bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e0c0:	e8 e5 fc ff ff       	call   c001ddaa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e0c5:	83 c4 38             	add    esp,0x38
c001e0c8:	31 c0                	xor    eax,eax
c001e0ca:	5f                   	pop    edi
c001e0cb:	c3                   	ret    

c001e0cc <SATAPI::detectMedia()>:
c001e0cc:	53                   	push   ebx
c001e0cd:	83 ec 14             	sub    esp,0x14
c001e0d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e0d4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e0da:	e8 59 02 ff ff       	call   c000e338 <VCache::writeWriteBuffer()>
c001e0df:	59                   	pop    ecx
c001e0e0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e0e6:	e8 3d 02 ff ff       	call   c000e328 <VCache::invalidateReadBuffer()>
c001e0eb:	c7 04 24 5b 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d5b
c001e0f2:	e8 13 c8 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e0f7:	83 c4 10             	add    esp,0x10
c001e0fa:	31 c0                	xor    eax,eax
c001e0fc:	8b 14 85 e0 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b20]
c001e103:	85 d2                	test   edx,edx
c001e105:	74 0f                	je     c001e116 <SATAPI::detectMedia()+0x4a>
c001e107:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e10d:	75 07                	jne    c001e116 <SATAPI::detectMedia()+0x4a>
c001e10f:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e116:	40                   	inc    eax
c001e117:	83 f8 1a             	cmp    eax,0x1a
c001e11a:	75 e0                	jne    c001e0fc <SATAPI::detectMedia()+0x30>
c001e11c:	83 c4 08             	add    esp,0x8
c001e11f:	5b                   	pop    ebx
c001e120:	c3                   	ret    
c001e121:	90                   	nop

c001e122 <SATAPI::open(int, int, void*)>:
c001e122:	56                   	push   esi
c001e123:	53                   	push   ebx
c001e124:	51                   	push   ecx
c001e125:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e129:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e12d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e137:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e13d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e141:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e14b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e155:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e15c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e162:	e8 7b 9c fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e167:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e16d:	89 c6                	mov    esi,eax
c001e16f:	e8 6e 9c fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e174:	81 c6 00 10 00 00    	add    esi,0x1000
c001e17a:	39 c6                	cmp    esi,eax
c001e17c:	74 10                	je     c001e18e <SATAPI::open(int, int, void*)+0x6c>
c001e17e:	83 ec 0c             	sub    esp,0xc
c001e181:	68 70 2d 02 c0       	push   0xc0022d70
c001e186:	e8 d2 2f ff ff       	call   c001115d <KePanic(char const*)>
c001e18b:	83 c4 10             	add    esp,0x10
c001e18e:	83 ec 0c             	sub    esp,0xc
c001e191:	6a 02                	push   0x2
c001e193:	e8 5d b4 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e198:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e19e:	6a 03                	push   0x3
c001e1a0:	50                   	push   eax
c001e1a1:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e1a7:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e1ad:	e8 4c bb fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e1b2:	83 c4 14             	add    esp,0x14
c001e1b5:	68 78 01 00 00       	push   0x178
c001e1ba:	e8 14 99 fe ff       	call   c0007ad3 <malloc>
c001e1bf:	83 c4 0c             	add    esp,0xc
c001e1c2:	6a 00                	push   0x0
c001e1c4:	68 ff ff ff 7f       	push   0x7fffffff
c001e1c9:	6a 00                	push   0x0
c001e1cb:	6a 00                	push   0x0
c001e1cd:	53                   	push   ebx
c001e1ce:	68 86 2d 02 c0       	push   0xc0022d86
c001e1d3:	89 c6                	mov    esi,eax
c001e1d5:	50                   	push   eax
c001e1d6:	e8 b7 f5 fe ff       	call   c000d792 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e1db:	83 c4 14             	add    esp,0x14
c001e1de:	56                   	push   esi
c001e1df:	e8 6e f6 fe ff       	call   c000d852 <LogicalDisk::assignDriveLetter()>
c001e1e4:	5a                   	pop    edx
c001e1e5:	59                   	pop    ecx
c001e1e6:	0f be c0             	movsx  eax,al
c001e1e9:	50                   	push   eax
c001e1ea:	68 d8 2b 02 c0       	push   0xc0022bd8
c001e1ef:	e8 16 c7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e1f4:	58                   	pop    eax
c001e1f5:	5a                   	pop    edx
c001e1f6:	56                   	push   esi
c001e1f7:	53                   	push   ebx
c001e1f8:	e8 e7 e3 fe ff       	call   c000c5e4 <Device::addChild(Device*)>
c001e1fd:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e203:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e206:	e8 0f e8 fe ff       	call   c000ca1a <PhysicalDisk::startCache()>
c001e20b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e212:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e215:	e8 b2 fe ff ff       	call   c001e0cc <SATAPI::detectMedia()>
c001e21a:	83 c4 14             	add    esp,0x14
c001e21d:	31 c0                	xor    eax,eax
c001e21f:	5b                   	pop    ebx
c001e220:	5e                   	pop    esi
c001e221:	c3                   	ret    

c001e222 <SATAPI::read(unsigned long long, int, void*)>:
c001e222:	55                   	push   ebp
c001e223:	57                   	push   edi
c001e224:	56                   	push   esi
c001e225:	53                   	push   ebx
c001e226:	83 ec 3c             	sub    esp,0x3c
c001e229:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e22d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e231:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e235:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e239:	83 fd 04             	cmp    ebp,0x4
c001e23c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e240:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e244:	7e 10                	jle    c001e256 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e246:	83 ec 0c             	sub    esp,0xc
c001e249:	68 94 2d 02 c0       	push   0xc0022d94
c001e24e:	e8 0a 2f ff ff       	call   c001115d <KePanic(char const*)>
c001e253:	83 c4 10             	add    esp,0x10
c001e256:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e25c:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e262:	51                   	push   ecx
c001e263:	50                   	push   eax
c001e264:	83 c0 02             	add    eax,0x2
c001e267:	c1 e0 07             	shl    eax,0x7
c001e26a:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e270:	50                   	push   eax
c001e271:	52                   	push   edx
c001e272:	e8 61 e1 ff ff       	call   c001c3d8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e277:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e27b:	b9 03 00 00 00       	mov    ecx,0x3
c001e280:	fc                   	cld    
c001e281:	31 c0                	xor    eax,eax
c001e283:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e285:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e28a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e28f:	83 c4 0c             	add    esp,0xc
c001e292:	6a 00                	push   0x0
c001e294:	6a 00                	push   0x0
c001e296:	6a 00                	push   0x0
c001e298:	6a 00                	push   0x0
c001e29a:	6a 02                	push   0x2
c001e29c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e2a0:	50                   	push   eax
c001e2a1:	53                   	push   ebx
c001e2a2:	e8 03 fb ff ff       	call   c001ddaa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e2a7:	83 c4 20             	add    esp,0x20
c001e2aa:	85 c0                	test   eax,eax
c001e2ac:	89 c6                	mov    esi,eax
c001e2ae:	75 46                	jne    c001e2f6 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e2b0:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e2b4:	b9 03 00 00 00       	mov    ecx,0x3
c001e2b9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e2bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2bf:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e2c4:	0f c8                	bswap  eax
c001e2c6:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e2ca:	89 e8                	mov    eax,ebp
c001e2cc:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e2d0:	50                   	push   eax
c001e2d1:	55                   	push   ebp
c001e2d2:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e2d6:	c1 e5 0b             	shl    ebp,0xb
c001e2d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e2dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e2e1:	55                   	push   ebp
c001e2e2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e2e6:	50                   	push   eax
c001e2e7:	53                   	push   ebx
c001e2e8:	e8 bd fa ff ff       	call   c001ddaa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e2ed:	83 c4 20             	add    esp,0x20
c001e2f0:	85 c0                	test   eax,eax
c001e2f2:	89 c6                	mov    esi,eax
c001e2f4:	74 0c                	je     c001e302 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e2f6:	83 ec 0c             	sub    esp,0xc
c001e2f9:	53                   	push   ebx
c001e2fa:	e8 cd fd ff ff       	call   c001e0cc <SATAPI::detectMedia()>
c001e2ff:	83 c4 10             	add    esp,0x10
c001e302:	83 c4 3c             	add    esp,0x3c
c001e305:	89 f0                	mov    eax,esi
c001e307:	5b                   	pop    ebx
c001e308:	5e                   	pop    esi
c001e309:	5f                   	pop    edi
c001e30a:	5d                   	pop    ebp
c001e30b:	c3                   	ret    

c001e30c <IOAPIC::close(int, int, void*)>:
c001e30c:	b8 00 00 00 00       	mov    eax,0x0
c001e311:	c3                   	ret    

c001e312 <apicGetBase()>:
c001e312:	55                   	push   ebp
c001e313:	89 e5                	mov    ebp,esp
c001e315:	83 ec 18             	sub    esp,0x18
c001e318:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e31d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e323:	83 e0 08             	and    eax,0x8
c001e326:	0f b6 c0             	movzx  eax,al
c001e329:	85 c0                	test   eax,eax
c001e32b:	75 07                	jne    c001e334 <apicGetBase()+0x22>
c001e32d:	b8 00 00 00 00       	mov    eax,0x0
c001e332:	eb 21                	jmp    c001e355 <apicGetBase()+0x43>
c001e334:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e339:	83 ec 08             	sub    esp,0x8
c001e33c:	6a 1b                	push   0x1b
c001e33e:	50                   	push   eax
c001e33f:	e8 9e 8d fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e344:	83 c4 10             	add    esp,0x10
c001e347:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e34a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e34d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e350:	25 00 00 ff ff       	and    eax,0xffff0000
c001e355:	c9                   	leave  
c001e356:	c3                   	ret    
c001e357:	90                   	nop

c001e358 <IOAPIC::IOAPIC()>:
c001e358:	83 ec 0c             	sub    esp,0xc
c001e35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e35f:	83 ec 08             	sub    esp,0x8
c001e362:	68 f8 2d 02 c0       	push   0xc0022df8
c001e367:	50                   	push   eax
c001e368:	e8 0f e4 fe ff       	call   c000c77c <Device::Device(char const*)>
c001e36d:	83 c4 10             	add    esp,0x10
c001e370:	ba 08 2e 02 c0       	mov    edx,0xc0022e08
c001e375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e379:	89 10                	mov    DWORD PTR [eax],edx
c001e37b:	90                   	nop
c001e37c:	83 c4 0c             	add    esp,0xc
c001e37f:	c3                   	ret    

c001e380 <apicOpen()>:
c001e380:	55                   	push   ebp
c001e381:	89 e5                	mov    ebp,esp
c001e383:	53                   	push   ebx
c001e384:	83 ec 34             	sub    esp,0x34
c001e387:	a0 a0 ae 02 c0       	mov    al,ds:0xc002aea0
c001e38c:	83 f0 01             	xor    eax,0x1
c001e38f:	0f b6 c0             	movzx  eax,al
c001e392:	85 c0                	test   eax,eax
c001e394:	0f 84 a3 00 00 00    	je     c001e43d <apicOpen()+0xbd>
c001e39a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e39e:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c001e3a3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e3a7:	0f b6 c0             	movzx  eax,al
c001e3aa:	39 c2                	cmp    edx,eax
c001e3ac:	0f 83 84 00 00 00    	jae    c001e436 <apicOpen()+0xb6>
c001e3b2:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e3b9:	83 ec 0c             	sub    esp,0xc
c001e3bc:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e3bf:	e8 0f 97 fe ff       	call   c0007ad3 <malloc>
c001e3c4:	83 c4 10             	add    esp,0x10
c001e3c7:	89 c3                	mov    ebx,eax
c001e3c9:	83 ec 0c             	sub    esp,0xc
c001e3cc:	53                   	push   ebx
c001e3cd:	e8 86 ff ff ff       	call   c001e358 <IOAPIC::IOAPIC()>
c001e3d2:	83 c4 10             	add    esp,0x10
c001e3d5:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e3d8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e3dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e3df:	89 14 85 80 ae 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5180],edx
c001e3e6:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c001e3eb:	83 c0 01             	add    eax,0x1
c001e3ee:	a3 60 ae 02 c0       	mov    ds:0xc002ae60,eax
c001e3f3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e3f8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e3fe:	83 ec 08             	sub    esp,0x8
c001e401:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e404:	50                   	push   eax
c001e405:	e8 da e1 fe ff       	call   c000c5e4 <Device::addChild(Device*)>
c001e40a:	83 c4 10             	add    esp,0x10
c001e40d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e410:	8b 00                	mov    eax,DWORD PTR [eax]
c001e412:	83 c0 08             	add    eax,0x8
c001e415:	8b 00                	mov    eax,DWORD PTR [eax]
c001e417:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e41b:	6a 00                	push   0x0
c001e41d:	6a 00                	push   0x0
c001e41f:	52                   	push   edx
c001e420:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e423:	ff d0                	call   eax
c001e425:	83 c4 10             	add    esp,0x10
c001e428:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e42b:	83 c0 01             	add    eax,0x1
c001e42e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e431:	e9 68 ff ff ff       	jmp    c001e39e <apicOpen()+0x1e>
c001e436:	c6 05 a0 ae 02 c0 01 	mov    BYTE PTR ds:0xc002aea0,0x1
c001e43d:	e8 d0 fe ff ff       	call   c001e312 <apicGetBase()>
c001e442:	05 f0 00 00 00       	add    eax,0xf0
c001e447:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e44a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e44d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e44f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e452:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e459:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e460:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e463:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e466:	89 10                	mov    DWORD PTR [eax],edx
c001e468:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e46f:	a1 90 97 02 c0       	mov    eax,ds:0xc0029790
c001e474:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e477:	7d 7c                	jge    c001e4f5 <apicOpen()+0x175>
c001e479:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e47c:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e483:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e486:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e489:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e490:	c1 e8 08             	shr    eax,0x8
c001e493:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e497:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e49a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e4a1:	c1 e8 18             	shr    eax,0x18
c001e4a4:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e4a7:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e4ab:	3d ff 00 00 00       	cmp    eax,0xff
c001e4b0:	75 3a                	jne    c001e4ec <apicOpen()+0x16c>
c001e4b2:	e8 5b fe ff ff       	call   c001e312 <apicGetBase()>
c001e4b7:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e4bb:	83 fa 01             	cmp    edx,0x1
c001e4be:	75 07                	jne    c001e4c7 <apicOpen()+0x147>
c001e4c0:	ba 60 03 00 00       	mov    edx,0x360
c001e4c5:	eb 05                	jmp    c001e4cc <apicOpen()+0x14c>
c001e4c7:	ba 50 03 00 00       	mov    edx,0x350
c001e4cc:	01 d0                	add    eax,edx
c001e4ce:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e4d1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e4d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4d6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e4d9:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e4e0:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e4e4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e4e7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e4ea:	89 10                	mov    DWORD PTR [eax],edx
c001e4ec:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e4f0:	e9 7a ff ff ff       	jmp    c001e46f <apicOpen()+0xef>
c001e4f5:	90                   	nop
c001e4f6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e4f9:	c9                   	leave  
c001e4fa:	c3                   	ret    
c001e4fb:	90                   	nop

c001e4fc <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e4fc:	55                   	push   ebp
c001e4fd:	89 e5                	mov    ebp,esp
c001e4ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e502:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e508:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e50b:	72 1d                	jb     c001e52a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e50d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e510:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e519:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e51f:	01 d0                	add    eax,edx
c001e521:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e524:	73 04                	jae    c001e52a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e526:	b0 01                	mov    al,0x1
c001e528:	eb 02                	jmp    c001e52c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e52a:	b0 00                	mov    al,0x0
c001e52c:	5d                   	pop    ebp
c001e52d:	c3                   	ret    

c001e52e <IOAPIC::read(int)>:
c001e52e:	55                   	push   ebp
c001e52f:	89 e5                	mov    ebp,esp
c001e531:	83 ec 10             	sub    esp,0x10
c001e534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e537:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e53d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e540:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e543:	0f b6 d0             	movzx  edx,al
c001e546:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e549:	89 10                	mov    DWORD PTR [eax],edx
c001e54b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e54e:	83 c0 10             	add    eax,0x10
c001e551:	8b 00                	mov    eax,DWORD PTR [eax]
c001e553:	c9                   	leave  
c001e554:	c3                   	ret    
c001e555:	90                   	nop

c001e556 <IOAPIC::open(int, int, void*)>:
c001e556:	55                   	push   ebp
c001e557:	89 e5                	mov    ebp,esp
c001e559:	57                   	push   edi
c001e55a:	56                   	push   esi
c001e55b:	53                   	push   ebx
c001e55c:	83 ec 04             	sub    esp,0x4
c001e55f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e562:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e565:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e56b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e56e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e574:	8b 14 85 80 98 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6780]
c001e57b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e57e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e587:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e58d:	8b 14 85 00 99 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6700]
c001e594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e597:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e59d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5a0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e5a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5a9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e5af:	0f b6 f0             	movzx  esi,al
c001e5b2:	89 d0                	mov    eax,edx
c001e5b4:	ba 00 00 00 00       	mov    edx,0x0
c001e5b9:	89 c7                	mov    edi,eax
c001e5bb:	83 e7 ff             	and    edi,0xffffffff
c001e5be:	89 f9                	mov    ecx,edi
c001e5c0:	0f b6 da             	movzx  ebx,dl
c001e5c3:	89 c8                	mov    eax,ecx
c001e5c5:	89 da                	mov    edx,ebx
c001e5c7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e5ca:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e5cd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e5d1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e5d5:	83 e0 00             	and    eax,0x0
c001e5d8:	09 d0                	or     eax,edx
c001e5da:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e5de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5e1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e5e7:	8d 50 01             	lea    edx,[eax+0x1]
c001e5ea:	88 d1                	mov    cl,dl
c001e5ec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e5ef:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e5f5:	0f b6 d0             	movzx  edx,al
c001e5f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5fb:	83 c2 08             	add    edx,0x8
c001e5fe:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e602:	0f b6 c9             	movzx  ecx,cl
c001e605:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e60b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e60f:	6a 01                	push   0x1
c001e611:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e614:	e8 15 ff ff ff       	call   c001e52e <IOAPIC::read(int)>
c001e619:	83 c4 08             	add    esp,0x8
c001e61c:	c1 f8 10             	sar    eax,0x10
c001e61f:	0f b6 c0             	movzx  eax,al
c001e622:	8d 50 01             	lea    edx,[eax+0x1]
c001e625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e628:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e62e:	b8 00 00 00 00       	mov    eax,0x0
c001e633:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e636:	5b                   	pop    ebx
c001e637:	5e                   	pop    esi
c001e638:	5f                   	pop    edi
c001e639:	5d                   	pop    ebp
c001e63a:	c3                   	ret    
c001e63b:	90                   	nop

c001e63c <IOAPIC::write(int, int)>:
c001e63c:	55                   	push   ebp
c001e63d:	89 e5                	mov    ebp,esp
c001e63f:	83 ec 10             	sub    esp,0x10
c001e642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e645:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e64b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e64e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e651:	0f b6 d0             	movzx  edx,al
c001e654:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e657:	89 10                	mov    DWORD PTR [eax],edx
c001e659:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e65c:	8d 50 10             	lea    edx,[eax+0x10]
c001e65f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e662:	89 02                	mov    DWORD PTR [edx],eax
c001e664:	90                   	nop
c001e665:	c9                   	leave  
c001e666:	c3                   	ret    
c001e667:	90                   	nop

c001e668 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e668:	55                   	push   ebp
c001e669:	89 e5                	mov    ebp,esp
c001e66b:	53                   	push   ebx
c001e66c:	83 ec 2c             	sub    esp,0x2c
c001e66f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e672:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e675:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e678:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e67b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e67e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e681:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e684:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e687:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e68a:	88 d8                	mov    al,bl
c001e68c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e68f:	88 c8                	mov    al,cl
c001e691:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e694:	88 d0                	mov    al,dl
c001e696:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e699:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e69d:	83 c0 08             	add    eax,0x8
c001e6a0:	d1 e0                	shl    eax,1
c001e6a2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e6a5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e6a9:	83 c0 08             	add    eax,0x8
c001e6ac:	d1 e0                	shl    eax,1
c001e6ae:	83 c0 01             	add    eax,0x1
c001e6b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e6b4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e6b7:	50                   	push   eax
c001e6b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6bb:	e8 6e fe ff ff       	call   c001e52e <IOAPIC::read(int)>
c001e6c0:	83 c4 08             	add    esp,0x8
c001e6c3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e6c6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e6cd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e6d0:	c1 e0 18             	shl    eax,0x18
c001e6d3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e6d6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e6d9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e6dc:	52                   	push   edx
c001e6dd:	50                   	push   eax
c001e6de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6e1:	e8 56 ff ff ff       	call   c001e63c <IOAPIC::write(int, int)>
c001e6e6:	83 c4 0c             	add    esp,0xc
c001e6e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e6ec:	50                   	push   eax
c001e6ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6f0:	e8 39 fe ff ff       	call   c001e52e <IOAPIC::read(int)>
c001e6f5:	83 c4 08             	add    esp,0x8
c001e6f8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e6fb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e702:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e709:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e710:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e714:	85 c0                	test   eax,eax
c001e716:	74 09                	je     c001e721 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e718:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e71f:	eb 07                	jmp    c001e728 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e721:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e728:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e72c:	85 c0                	test   eax,eax
c001e72e:	74 09                	je     c001e739 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e730:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e737:	eb 07                	jmp    c001e740 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e739:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e740:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e747:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e74b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e74e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e751:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e754:	52                   	push   edx
c001e755:	50                   	push   eax
c001e756:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e759:	e8 de fe ff ff       	call   c001e63c <IOAPIC::write(int, int)>
c001e75e:	83 c4 0c             	add    esp,0xc
c001e761:	90                   	nop
c001e762:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e765:	c9                   	leave  
c001e766:	c3                   	ret    
c001e767:	90                   	nop

c001e768 <APICTimer::close(int, int, void*)>:
c001e768:	b8 00 00 00 00       	mov    eax,0x0
c001e76d:	c3                   	ret    
c001e76e:	66 90                	xchg   ax,ax

c001e770 <apicTimerHandler(regs*, void*)>:
c001e770:	83 ec 0c             	sub    esp,0xc
c001e773:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e777:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e779:	b8 10 27 00 00       	mov    eax,0x2710
c001e77e:	ba 00 00 00 00       	mov    edx,0x0
c001e783:	f7 f1                	div    ecx
c001e785:	83 ec 0c             	sub    esp,0xc
c001e788:	50                   	push   eax
c001e789:	e8 c2 f8 fe ff       	call   c000e050 <timerHandler(unsigned int)>
c001e78e:	83 c4 10             	add    esp,0x10
c001e791:	90                   	nop
c001e792:	83 c4 0c             	add    esp,0xc
c001e795:	c3                   	ret    
c001e796:	66 90                	xchg   ax,ax

c001e798 <APICTimer::open(int, int, void*)>:
c001e798:	83 ec 0c             	sub    esp,0xc
c001e79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e79f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7a1:	83 c0 24             	add    eax,0x24
c001e7a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7a6:	83 ec 08             	sub    esp,0x8
c001e7a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7b1:	ff d0                	call   eax
c001e7b3:	83 c4 10             	add    esp,0x10
c001e7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e7be:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7cc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e7d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7d6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e7dc:	83 ec 0c             	sub    esp,0xc
c001e7df:	51                   	push   ecx
c001e7e0:	6a 01                	push   0x1
c001e7e2:	68 70 e7 01 c0       	push   0xc001e770
c001e7e7:	52                   	push   edx
c001e7e8:	50                   	push   eax
c001e7e9:	e8 a2 dd fe ff       	call   c000c590 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e7ee:	83 c4 20             	add    esp,0x20
c001e7f1:	89 c2                	mov    edx,eax
c001e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7f7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e7fd:	b8 00 00 00 00       	mov    eax,0x0
c001e802:	83 c4 0c             	add    esp,0xc
c001e805:	c3                   	ret    
c001e806:	66 90                	xchg   ax,ax

c001e808 <APICTimer::write(int)>:
c001e808:	83 ec 0c             	sub    esp,0xc
c001e80b:	83 ec 0c             	sub    esp,0xc
c001e80e:	68 2c 2e 02 c0       	push   0xc0022e2c
c001e813:	e8 45 29 ff ff       	call   c001115d <KePanic(char const*)>
c001e818:	83 c4 10             	add    esp,0x10
c001e81b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e81f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e823:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e829:	90                   	nop
c001e82a:	83 c4 0c             	add    esp,0xc
c001e82d:	c3                   	ret    
c001e82e:	66 90                	xchg   ax,ax

c001e830 <APICTimer::APICTimer()>:
c001e830:	83 ec 0c             	sub    esp,0xc
c001e833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e837:	83 ec 08             	sub    esp,0x8
c001e83a:	68 3c 2e 02 c0       	push   0xc0022e3c
c001e83f:	50                   	push   eax
c001e840:	e8 3f f7 fe ff       	call   c000df84 <Timer::Timer(char const*)>
c001e845:	83 c4 10             	add    esp,0x10
c001e848:	ba 50 2e 02 c0       	mov    edx,0xc0022e50
c001e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e851:	89 10                	mov    DWORD PTR [eax],edx
c001e853:	90                   	nop
c001e854:	83 c4 0c             	add    esp,0xc
c001e857:	c3                   	ret    

c001e858 <PIT::write(int)>:
c001e858:	83 ec 10             	sub    esp,0x10
c001e85b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e85f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e863:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e869:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e86d:	a3 a4 ae 02 c0       	mov    ds:0xc002aea4,eax
c001e872:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e877:	89 c2                	mov    edx,eax
c001e879:	c1 fa 1f             	sar    edx,0x1f
c001e87c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e880:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e884:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e88b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e890:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e894:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e899:	ee                   	out    dx,al
c001e89a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e89e:	0f b6 c0             	movzx  eax,al
c001e8a1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e8a8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e8ac:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e8b0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e8b5:	ee                   	out    dx,al
c001e8b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8ba:	c1 f8 08             	sar    eax,0x8
c001e8bd:	0f b6 c0             	movzx  eax,al
c001e8c0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e8c7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e8cb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e8cf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e8d4:	ee                   	out    dx,al
c001e8d5:	90                   	nop
c001e8d6:	83 c4 10             	add    esp,0x10
c001e8d9:	c3                   	ret    
c001e8da:	66 90                	xchg   ax,ax

c001e8dc <pitHandler(regs*, void*)>:
c001e8dc:	83 ec 0c             	sub    esp,0xc
c001e8df:	8b 0d a4 ae 02 c0    	mov    ecx,DWORD PTR ds:0xc002aea4
c001e8e5:	b8 10 27 00 00       	mov    eax,0x2710
c001e8ea:	89 c2                	mov    edx,eax
c001e8ec:	c1 fa 1f             	sar    edx,0x1f
c001e8ef:	f7 f9                	idiv   ecx
c001e8f1:	83 ec 0c             	sub    esp,0xc
c001e8f4:	50                   	push   eax
c001e8f5:	e8 56 f7 fe ff       	call   c000e050 <timerHandler(unsigned int)>
c001e8fa:	83 c4 10             	add    esp,0x10
c001e8fd:	90                   	nop
c001e8fe:	83 c4 0c             	add    esp,0xc
c001e901:	c3                   	ret    
c001e902:	66 90                	xchg   ax,ax

c001e904 <PIT::open(int, int, void*)>:
c001e904:	83 ec 0c             	sub    esp,0xc
c001e907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e90b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e90d:	83 c0 24             	add    eax,0x24
c001e910:	8b 00                	mov    eax,DWORD PTR [eax]
c001e912:	83 ec 08             	sub    esp,0x8
c001e915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e919:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e91d:	ff d0                	call   eax
c001e91f:	83 c4 10             	add    esp,0x10
c001e922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e926:	83 ec 0c             	sub    esp,0xc
c001e929:	6a 00                	push   0x0
c001e92b:	6a 01                	push   0x1
c001e92d:	68 dc e8 01 c0       	push   0xc001e8dc
c001e932:	6a 00                	push   0x0
c001e934:	50                   	push   eax
c001e935:	e8 56 dc fe ff       	call   c000c590 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e93a:	83 c4 20             	add    esp,0x20
c001e93d:	89 c2                	mov    edx,eax
c001e93f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e943:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e949:	b8 00 00 00 00       	mov    eax,0x0
c001e94e:	83 c4 0c             	add    esp,0xc
c001e951:	c3                   	ret    
c001e952:	66 90                	xchg   ax,ax

c001e954 <PIT::close(int, int, void*)>:
c001e954:	83 ec 0c             	sub    esp,0xc
c001e957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e969:	6a 01                	push   0x1
c001e96b:	68 dc e8 01 c0       	push   0xc001e8dc
c001e970:	6a 00                	push   0x0
c001e972:	50                   	push   eax
c001e973:	e8 4e dc fe ff       	call   c000c5c6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e978:	83 c4 10             	add    esp,0x10
c001e97b:	b8 00 00 00 00       	mov    eax,0x0
c001e980:	83 c4 0c             	add    esp,0xc
c001e983:	c3                   	ret    

c001e984 <PIT::PIT()>:
c001e984:	83 ec 0c             	sub    esp,0xc
c001e987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98b:	83 ec 08             	sub    esp,0x8
c001e98e:	68 78 2e 02 c0       	push   0xc0022e78
c001e993:	50                   	push   eax
c001e994:	e8 eb f5 fe ff       	call   c000df84 <Timer::Timer(char const*)>
c001e999:	83 c4 10             	add    esp,0x10
c001e99c:	ba a0 2e 02 c0       	mov    edx,0xc0022ea0
c001e9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a5:	89 10                	mov    DWORD PTR [eax],edx
c001e9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9b1:	0f b6 d0             	movzx  edx,al
c001e9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9c9:	0f b6 d0             	movzx  edx,al
c001e9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9df:	8d 50 01             	lea    edx,[eax+0x1]
c001e9e2:	88 d1                	mov    cl,dl
c001e9e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9e8:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e9ee:	0f b6 d0             	movzx  edx,al
c001e9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e9f9:	83 e1 3f             	and    ecx,0x3f
c001e9fc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea00:	90                   	nop
c001ea01:	83 c4 0c             	add    esp,0xc
c001ea04:	c3                   	ret    
c001ea05:	66 90                	xchg   ax,ax
c001ea07:	66 90                	xchg   ax,ax
c001ea09:	66 90                	xchg   ax,ax
c001ea0b:	66 90                	xchg   ax,ax
c001ea0d:	66 90                	xchg   ax,ax
c001ea0f:	90                   	nop

c001ea10 <avxDetect>:
c001ea10:	b8 01 00 00 00       	mov    eax,0x1
c001ea15:	0f a2                	cpuid  
c001ea17:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ea1d:	74 15                	je     c001ea34 <avxDetect.noAVX>
c001ea1f:	b8 01 00 00 00       	mov    eax,0x1
c001ea24:	0f a2                	cpuid  
c001ea26:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ea2c:	74 06                	je     c001ea34 <avxDetect.noAVX>
c001ea2e:	b8 01 00 00 00       	mov    eax,0x1
c001ea33:	c3                   	ret    

c001ea34 <avxDetect.noAVX>:
c001ea34:	b8 00 00 00 00       	mov    eax,0x0
c001ea39:	c3                   	ret    

c001ea3a <avxSave>:
c001ea3a:	53                   	push   ebx
c001ea3b:	52                   	push   edx
c001ea3c:	31 c0                	xor    eax,eax
c001ea3e:	48                   	dec    eax
c001ea3f:	89 c2                	mov    edx,eax
c001ea41:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea45:	0f ae 23             	xsave  [ebx]
c001ea48:	5a                   	pop    edx
c001ea49:	5b                   	pop    ebx
c001ea4a:	c3                   	ret    

c001ea4b <avxLoad>:
c001ea4b:	53                   	push   ebx
c001ea4c:	52                   	push   edx
c001ea4d:	31 c0                	xor    eax,eax
c001ea4f:	48                   	dec    eax
c001ea50:	89 c2                	mov    edx,eax
c001ea52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea56:	0f ae 2b             	xrstor [ebx]
c001ea59:	5a                   	pop    edx
c001ea5a:	5b                   	pop    ebx
c001ea5b:	c3                   	ret    

c001ea5c <avxInit>:
c001ea5c:	e8 67 03 00 00       	call   c001edc8 <sseInit>
c001ea61:	50                   	push   eax
c001ea62:	51                   	push   ecx
c001ea63:	0f 20 e0             	mov    eax,cr4
c001ea66:	0d 00 00 04 00       	or     eax,0x40000
c001ea6b:	0f 22 e0             	mov    cr4,eax
c001ea6e:	31 c9                	xor    ecx,ecx
c001ea70:	0f 01 d0             	xgetbv 
c001ea73:	0d 07 00 00 00       	or     eax,0x7
c001ea78:	0f 01 d1             	xsetbv 
c001ea7b:	59                   	pop    ecx
c001ea7c:	58                   	pop    eax
c001ea7d:	c3                   	ret    

c001ea7e <avxClose>:
c001ea7e:	c3                   	ret    

c001ea7f <wouldSheSayYes>:
c001ea7f:	c3                   	ret    
c001ea80:	49                   	dec    ecx
c001ea81:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ea85:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ea89:	75 20                	jne    c001eaab <isr0+0xb>
c001ea8b:	4e                   	dec    esi
c001ea8c:	79 61                	jns    c001eaef <isr7+0x3>
c001ea8e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ea93:	66 90                	xchg   ax,ax
c001ea95:	66 90                	xchg   ax,ax
c001ea97:	66 90                	xchg   ax,ax
c001ea99:	66 90                	xchg   ax,ax
c001ea9b:	66 90                	xchg   ax,ax
c001ea9d:	66 90                	xchg   ax,ax
c001ea9f:	90                   	nop

c001eaa0 <isr0>:
c001eaa0:	fa                   	cli    
c001eaa1:	68 00 00 00 00       	push   0x0
c001eaa6:	68 00 00 00 00       	push   0x0
c001eaab:	e9 56 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eab0 <isr1>:
c001eab0:	fa                   	cli    
c001eab1:	6a 00                	push   0x0
c001eab3:	6a 01                	push   0x1
c001eab5:	e9 4c 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eaba <isr2>:
c001eaba:	fa                   	cli    
c001eabb:	6a 00                	push   0x0
c001eabd:	6a 02                	push   0x2
c001eabf:	e9 42 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eac4 <isr3>:
c001eac4:	fa                   	cli    
c001eac5:	6a 00                	push   0x0
c001eac7:	6a 03                	push   0x3
c001eac9:	e9 38 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eace <isr4>:
c001eace:	fa                   	cli    
c001eacf:	6a 00                	push   0x0
c001ead1:	6a 04                	push   0x4
c001ead3:	e9 2e 01 00 00       	jmp    c001ec06 <int_common_stub>

c001ead8 <isr5>:
c001ead8:	fa                   	cli    
c001ead9:	6a 00                	push   0x0
c001eadb:	6a 05                	push   0x5
c001eadd:	e9 24 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eae2 <isr6>:
c001eae2:	fa                   	cli    
c001eae3:	6a 00                	push   0x0
c001eae5:	6a 06                	push   0x6
c001eae7:	e9 1a 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eaec <isr7>:
c001eaec:	fa                   	cli    
c001eaed:	6a 00                	push   0x0
c001eaef:	6a 07                	push   0x7
c001eaf1:	e9 10 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eaf6 <isr8>:
c001eaf6:	fa                   	cli    
c001eaf7:	6a 08                	push   0x8
c001eaf9:	e9 08 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eafe <isr9>:
c001eafe:	fa                   	cli    
c001eaff:	6a 00                	push   0x0
c001eb01:	6a 09                	push   0x9
c001eb03:	e9 fe 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb08 <isr10>:
c001eb08:	fa                   	cli    
c001eb09:	6a 0a                	push   0xa
c001eb0b:	e9 f6 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb10 <isr11>:
c001eb10:	fa                   	cli    
c001eb11:	6a 0b                	push   0xb
c001eb13:	e9 ee 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb18 <isr12>:
c001eb18:	fa                   	cli    
c001eb19:	6a 0c                	push   0xc
c001eb1b:	e9 e6 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb20 <isr13>:
c001eb20:	fa                   	cli    
c001eb21:	6a 0d                	push   0xd
c001eb23:	53                   	push   ebx
c001eb24:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb28:	81 fb f6 ec 01 c0    	cmp    ebx,0xc001ecf6
c001eb2e:	5b                   	pop    ebx
c001eb2f:	0f 84 c3 01 00 00    	je     c001ecf8 <finishSignal2>
c001eb35:	e9 cc 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb3a <isr14>:
c001eb3a:	fa                   	cli    
c001eb3b:	6a 0e                	push   0xe
c001eb3d:	e9 c4 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb42 <isr15>:
c001eb42:	fa                   	cli    
c001eb43:	6a 00                	push   0x0
c001eb45:	6a 0f                	push   0xf
c001eb47:	e9 ba 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb4c <isr16>:
c001eb4c:	fa                   	cli    
c001eb4d:	6a 00                	push   0x0
c001eb4f:	6a 10                	push   0x10
c001eb51:	e9 b0 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb56 <isr17>:
c001eb56:	fa                   	cli    
c001eb57:	6a 00                	push   0x0
c001eb59:	6a 11                	push   0x11
c001eb5b:	e9 a6 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb60 <isr18>:
c001eb60:	fa                   	cli    
c001eb61:	6a 00                	push   0x0
c001eb63:	6a 12                	push   0x12
c001eb65:	e9 9c 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb6a <irq3>:
c001eb6a:	fa                   	cli    
c001eb6b:	6a 00                	push   0x0
c001eb6d:	6a 23                	push   0x23
c001eb6f:	e9 92 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb74 <irq4>:
c001eb74:	fa                   	cli    
c001eb75:	6a 00                	push   0x0
c001eb77:	6a 24                	push   0x24
c001eb79:	e9 88 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb7e <irq5>:
c001eb7e:	fa                   	cli    
c001eb7f:	6a 00                	push   0x0
c001eb81:	6a 25                	push   0x25
c001eb83:	e9 7e 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb88 <irq6>:
c001eb88:	fa                   	cli    
c001eb89:	6a 00                	push   0x0
c001eb8b:	6a 26                	push   0x26
c001eb8d:	e9 74 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb92 <irq7>:
c001eb92:	fa                   	cli    
c001eb93:	6a 00                	push   0x0
c001eb95:	6a 27                	push   0x27
c001eb97:	e9 6a 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb9c <irq8>:
c001eb9c:	fa                   	cli    
c001eb9d:	6a 00                	push   0x0
c001eb9f:	6a 28                	push   0x28
c001eba1:	e9 60 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eba6 <irq9>:
c001eba6:	fa                   	cli    
c001eba7:	6a 00                	push   0x0
c001eba9:	6a 29                	push   0x29
c001ebab:	e9 56 00 00 00       	jmp    c001ec06 <int_common_stub>

c001ebb0 <irq10>:
c001ebb0:	fa                   	cli    
c001ebb1:	6a 00                	push   0x0
c001ebb3:	6a 2a                	push   0x2a
c001ebb5:	e9 4c 00 00 00       	jmp    c001ec06 <int_common_stub>

c001ebba <irq11>:
c001ebba:	fa                   	cli    
c001ebbb:	6a 00                	push   0x0
c001ebbd:	6a 2b                	push   0x2b
c001ebbf:	e9 42 00 00 00       	jmp    c001ec06 <int_common_stub>

c001ebc4 <irq12>:
c001ebc4:	fa                   	cli    
c001ebc5:	6a 00                	push   0x0
c001ebc7:	6a 2c                	push   0x2c
c001ebc9:	e9 38 00 00 00       	jmp    c001ec06 <int_common_stub>

c001ebce <irq13>:
c001ebce:	fa                   	cli    
c001ebcf:	6a 00                	push   0x0
c001ebd1:	6a 2d                	push   0x2d
c001ebd3:	e9 2e 00 00 00       	jmp    c001ec06 <int_common_stub>

c001ebd8 <irq14>:
c001ebd8:	fa                   	cli    
c001ebd9:	6a 00                	push   0x0
c001ebdb:	6a 2e                	push   0x2e
c001ebdd:	e9 24 00 00 00       	jmp    c001ec06 <int_common_stub>

c001ebe2 <irq15>:
c001ebe2:	fa                   	cli    
c001ebe3:	6a 00                	push   0x0
c001ebe5:	6a 2f                	push   0x2f
c001ebe7:	e9 1a 00 00 00       	jmp    c001ec06 <int_common_stub>

c001ebec <irq1>:
c001ebec:	fa                   	cli    
c001ebed:	6a 00                	push   0x0
c001ebef:	6a 21                	push   0x21
c001ebf1:	eb 13                	jmp    c001ec06 <int_common_stub>

c001ebf3 <irq2>:
c001ebf3:	fa                   	cli    
c001ebf4:	6a 00                	push   0x0
c001ebf6:	6a 22                	push   0x22
c001ebf8:	eb 0c                	jmp    c001ec06 <int_common_stub>

c001ebfa <isr96>:
c001ebfa:	6a 00                	push   0x0
c001ebfc:	6a 60                	push   0x60
c001ebfe:	fb                   	sti    
c001ebff:	eb 37                	jmp    c001ec38 <syscall_common_stub>

c001ec01 <irq0>:
c001ec01:	fa                   	cli    
c001ec02:	6a 00                	push   0x0
c001ec04:	6a 20                	push   0x20

c001ec06 <int_common_stub>:
c001ec06:	60                   	pusha  
c001ec07:	1e                   	push   ds
c001ec08:	06                   	push   es
c001ec09:	0f a0                	push   fs
c001ec0b:	0f a8                	push   gs
c001ec0d:	66 b8 10 00          	mov    ax,0x10
c001ec11:	66 8e d8             	mov    ds,ax
c001ec14:	66 8e c0             	mov    es,ax
c001ec17:	66 8e e0             	mov    fs,ax
c001ec1a:	66 8e e8             	mov    gs,ax
c001ec1d:	54                   	push   esp
c001ec1e:	fc                   	cld    
c001ec1f:	e8 6c de fe ff       	call   c000ca90 <int_handler>
c001ec24:	81 c4 04 00 00 00    	add    esp,0x4
c001ec2a:	0f a9                	pop    gs
c001ec2c:	0f a1                	pop    fs
c001ec2e:	07                   	pop    es
c001ec2f:	1f                   	pop    ds
c001ec30:	61                   	popa   
c001ec31:	81 c4 08 00 00 00    	add    esp,0x8
c001ec37:	cf                   	iret   

c001ec38 <syscall_common_stub>:
c001ec38:	60                   	pusha  
c001ec39:	1e                   	push   ds
c001ec3a:	06                   	push   es
c001ec3b:	0f a0                	push   fs
c001ec3d:	0f a8                	push   gs
c001ec3f:	66 b8 10 00          	mov    ax,0x10
c001ec43:	66 8e d8             	mov    ds,ax
c001ec46:	66 8e c0             	mov    es,ax
c001ec49:	66 8e e0             	mov    fs,ax
c001ec4c:	66 8e e8             	mov    gs,ax
c001ec4f:	54                   	push   esp
c001ec50:	fc                   	cld    
c001ec51:	e8 3a de fe ff       	call   c000ca90 <int_handler>
c001ec56:	81 c4 04 00 00 00    	add    esp,0x4
c001ec5c:	0f a9                	pop    gs
c001ec5e:	0f a1                	pop    fs
c001ec60:	07                   	pop    es
c001ec61:	1f                   	pop    ds
c001ec62:	e8 08 2b ff ff       	call   c001176f <KiCheckSignalZ>
c001ec67:	3d 00 00 00 00       	cmp    eax,0x0
c001ec6c:	0f 84 c0 00 00 00    	je     c001ed32 <skipSignals>
c001ec72:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ec77:	61                   	popa   
c001ec78:	53                   	push   ebx
c001ec79:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ec7f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ec82:	5b                   	pop    ebx
c001ec83:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ec88:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ec8b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ec8e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ec91:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ec94:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ec97:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ec9a:	81 c4 08 00 00 00    	add    esp,0x8
c001eca0:	5e                   	pop    esi
c001eca1:	5b                   	pop    ebx
c001eca2:	59                   	pop    ecx
c001eca3:	5a                   	pop    edx
c001eca4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001eca7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ecaa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ecad:	52                   	push   edx
c001ecae:	51                   	push   ecx
c001ecaf:	53                   	push   ebx
c001ecb0:	56                   	push   esi
c001ecb1:	81 ec 08 00 00 00    	sub    esp,0x8
c001ecb7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ecba:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ecbd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ecc0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ecc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ecc6:	60                   	pusha  
c001ecc7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001eccd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ecd0:	89 e3                	mov    ebx,esp
c001ecd2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ecd5:	52                   	push   edx
c001ecd6:	68 f6 ec 01 c0       	push   0xc001ecf6
c001ecdb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ecde:	89 dc                	mov    esp,ebx
c001ece0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ece3:	68 23 00 00 00       	push   0x23
c001ece8:	51                   	push   ecx
c001ece9:	68 02 02 00 00       	push   0x202
c001ecee:	68 1b 00 00 00       	push   0x1b
c001ecf3:	ff 36                	push   DWORD PTR [esi]
c001ecf5:	cf                   	iret   

c001ecf6 <finishSignal>:
c001ecf6:	cd 0f                	int    0xf

c001ecf8 <finishSignal2>:
c001ecf8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ecfe:	e8 e9 2a ff ff       	call   c00117ec <KiFinishSignalZ>
c001ed03:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ed09:	68 23 00 00 00       	push   0x23
c001ed0e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ed11:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ed14:	68 1b 00 00 00       	push   0x1b
c001ed19:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ed1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed1f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ed22:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ed25:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ed28:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ed2b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ed2e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ed31:	cf                   	iret   

c001ed32 <skipSignals>:
c001ed32:	61                   	popa   
c001ed33:	81 c4 08 00 00 00    	add    esp,0x8
c001ed39:	cf                   	iret   
c001ed3a:	90                   	nop
c001ed3b:	90                   	nop

c001ed3c <irq16>:
c001ed3c:	fa                   	cli    
c001ed3d:	6a 00                	push   0x0
c001ed3f:	6a 30                	push   0x30
c001ed41:	e9 c0 fe ff ff       	jmp    c001ec06 <int_common_stub>

c001ed46 <irq17>:
c001ed46:	fa                   	cli    
c001ed47:	6a 00                	push   0x0
c001ed49:	6a 31                	push   0x31
c001ed4b:	e9 b6 fe ff ff       	jmp    c001ec06 <int_common_stub>

c001ed50 <irq18>:
c001ed50:	fa                   	cli    
c001ed51:	6a 00                	push   0x0
c001ed53:	6a 32                	push   0x32
c001ed55:	e9 ac fe ff ff       	jmp    c001ec06 <int_common_stub>

c001ed5a <irq19>:
c001ed5a:	fa                   	cli    
c001ed5b:	6a 00                	push   0x0
c001ed5d:	6a 33                	push   0x33
c001ed5f:	e9 a2 fe ff ff       	jmp    c001ec06 <int_common_stub>

c001ed64 <irq20>:
c001ed64:	fa                   	cli    
c001ed65:	6a 00                	push   0x0
c001ed67:	6a 34                	push   0x34
c001ed69:	e9 98 fe ff ff       	jmp    c001ec06 <int_common_stub>

c001ed6e <irq21>:
c001ed6e:	fa                   	cli    
c001ed6f:	6a 00                	push   0x0
c001ed71:	6a 35                	push   0x35
c001ed73:	e9 8e fe ff ff       	jmp    c001ec06 <int_common_stub>

c001ed78 <irq22>:
c001ed78:	fa                   	cli    
c001ed79:	6a 00                	push   0x0
c001ed7b:	6a 36                	push   0x36
c001ed7d:	e9 84 fe ff ff       	jmp    c001ec06 <int_common_stub>

c001ed82 <irq23>:
c001ed82:	fa                   	cli    
c001ed83:	6a 00                	push   0x0
c001ed85:	6a 37                	push   0x37
c001ed87:	e9 7a fe ff ff       	jmp    c001ec06 <int_common_stub>
c001ed8c:	66 90                	xchg   ax,ax
c001ed8e:	66 90                	xchg   ax,ax

c001ed90 <i386GetRDRAND>:
c001ed90:	b9 64 00 00 00       	mov    ecx,0x64

c001ed95 <retry>:
c001ed95:	0f c7 f0             	rdrand eax
c001ed98:	72 05                	jb     c001ed9f <retry.done>
c001ed9a:	e2 f9                	loop   c001ed95 <retry>

c001ed9c <retry.fail>:
c001ed9c:	31 c0                	xor    eax,eax
c001ed9e:	c3                   	ret    

c001ed9f <retry.done>:
c001ed9f:	c3                   	ret    

c001eda0 <absolutelyNoChanceInHell>:
c001eda0:	b8 01 00 00 00       	mov    eax,0x1
c001eda5:	0f a2                	cpuid  
c001eda7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001edad:	74 06                	je     c001edb5 <sseDetect.noSSE>
c001edaf:	b8 01 00 00 00       	mov    eax,0x1
c001edb4:	c3                   	ret    

c001edb5 <sseDetect.noSSE>:
c001edb5:	31 c0                	xor    eax,eax
c001edb7:	c3                   	ret    

c001edb8 <sseSave>:
c001edb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edbc:	0f ae 00             	fxsave [eax]
c001edbf:	c3                   	ret    

c001edc0 <sseLoad>:
c001edc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edc4:	0f ae 08             	fxrstor [eax]
c001edc7:	c3                   	ret    

c001edc8 <sseInit>:
c001edc8:	e8 42 00 00 00       	call   c001ee0f <x87Init>
c001edcd:	0f 20 e0             	mov    eax,cr4
c001edd0:	66 0d 00 06          	or     ax,0x600
c001edd4:	0f 22 e0             	mov    cr4,eax
c001edd7:	c3                   	ret    

c001edd8 <sseClose>:
c001edd8:	c3                   	ret    
c001edd9:	66 90                	xchg   ax,ax
c001eddb:	66 90                	xchg   ax,ax
c001eddd:	66 90                	xchg   ax,ax
c001eddf:	90                   	nop

c001ede0 <value_37F>:
c001ede0:	7f 03                	jg     c001ede5 <value_37A+0x1>

c001ede2 <value_37E>:
c001ede2:	7e 03                	jle    c001ede7 <x87Detect+0x1>

c001ede4 <value_37A>:
c001ede4:	7a 03                	jp     c001ede9 <x87Detect+0x3>

c001ede6 <x87Detect>:
c001ede6:	b8 01 00 00 00       	mov    eax,0x1
c001edeb:	0f a2                	cpuid  
c001eded:	f7 c2 01 00 00 00    	test   edx,0x1
c001edf3:	74 06                	je     c001edfb <x87Detect.nox87>
c001edf5:	b8 01 00 00 00       	mov    eax,0x1
c001edfa:	c3                   	ret    

c001edfb <x87Detect.nox87>:
c001edfb:	b8 00 00 00 00       	mov    eax,0x0
c001ee00:	c3                   	ret    

c001ee01 <x87Save>:
c001ee01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee05:	dd 30                	fnsave [eax]
c001ee07:	c3                   	ret    

c001ee08 <x87Load>:
c001ee08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee0c:	dd 20                	frstor [eax]
c001ee0e:	c3                   	ret    

c001ee0f <x87Init>:
c001ee0f:	0f 20 c0             	mov    eax,cr0
c001ee12:	66 25 fb ff          	and    ax,0xfffb
c001ee16:	66 0d 22 00          	or     ax,0x22
c001ee1a:	0f 22 c0             	mov    cr0,eax
c001ee1d:	db e3                	fninit 
c001ee1f:	0f 06                	clts   
c001ee21:	d9 2d e4 ed 01 c0    	fldcw  WORD PTR ds:0xc001ede4
c001ee27:	c3                   	ret    

c001ee28 <x87Close>:
c001ee28:	c3                   	ret    
c001ee29:	66 90                	xchg   ax,ax
c001ee2b:	90                   	nop

c001ee2c <__do_global_ctors_aux>:
c001ee2c:	a1 e0 fd 01 c0       	mov    eax,ds:0xc001fde0
c001ee31:	83 f8 ff             	cmp    eax,0xffffffff
c001ee34:	74 1a                	je     c001ee50 <__do_global_ctors_aux+0x24>
c001ee36:	55                   	push   ebp
c001ee37:	89 e5                	mov    ebp,esp
c001ee39:	53                   	push   ebx
c001ee3a:	52                   	push   edx
c001ee3b:	bb e0 fd 01 c0       	mov    ebx,0xc001fde0
c001ee40:	ff d0                	call   eax
c001ee42:	83 eb 04             	sub    ebx,0x4
c001ee45:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ee47:	83 f8 ff             	cmp    eax,0xffffffff
c001ee4a:	75 f4                	jne    c001ee40 <__do_global_ctors_aux+0x14>
c001ee4c:	58                   	pop    eax
c001ee4d:	5b                   	pop    ebx
c001ee4e:	5d                   	pop    ebp
c001ee4f:	c3                   	ret    
c001ee50:	c3                   	ret    
c001ee51:	66 90                	xchg   ax,ax
c001ee53:	90                   	nop

c001ee54 <__divdi3>:
c001ee54:	55                   	push   ebp
c001ee55:	57                   	push   edi
c001ee56:	56                   	push   esi
c001ee57:	53                   	push   ebx
c001ee58:	83 ec 1c             	sub    esp,0x1c
c001ee5b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ee5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee63:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ee66:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ee6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ee6e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ee72:	85 db                	test   ebx,ebx
c001ee74:	0f 88 8e 00 00 00    	js     c001ef08 <__divdi3+0xb4>
c001ee7a:	89 dd                	mov    ebp,ebx
c001ee7c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ee84:	89 d3                	mov    ebx,edx
c001ee86:	85 d2                	test   edx,edx
c001ee88:	79 0d                	jns    c001ee97 <__divdi3+0x43>
c001ee8a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ee8e:	f7 d8                	neg    eax
c001ee90:	83 d2 00             	adc    edx,0x0
c001ee93:	f7 da                	neg    edx
c001ee95:	89 d3                	mov    ebx,edx
c001ee97:	89 c7                	mov    edi,eax
c001ee99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ee9c:	85 db                	test   ebx,ebx
c001ee9e:	75 48                	jne    c001eee8 <__divdi3+0x94>
c001eea0:	39 ef                	cmp    edi,ebp
c001eea2:	76 24                	jbe    c001eec8 <__divdi3+0x74>
c001eea4:	89 ea                	mov    edx,ebp
c001eea6:	f7 f7                	div    edi
c001eea8:	89 c1                	mov    ecx,eax
c001eeaa:	31 f6                	xor    esi,esi
c001eeac:	89 c8                	mov    eax,ecx
c001eeae:	89 f2                	mov    edx,esi
c001eeb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eeb4:	85 c9                	test   ecx,ecx
c001eeb6:	74 07                	je     c001eebf <__divdi3+0x6b>
c001eeb8:	f7 d8                	neg    eax
c001eeba:	83 d2 00             	adc    edx,0x0
c001eebd:	f7 da                	neg    edx
c001eebf:	83 c4 1c             	add    esp,0x1c
c001eec2:	5b                   	pop    ebx
c001eec3:	5e                   	pop    esi
c001eec4:	5f                   	pop    edi
c001eec5:	5d                   	pop    ebp
c001eec6:	c3                   	ret    
c001eec7:	90                   	nop
c001eec8:	85 ff                	test   edi,edi
c001eeca:	75 0b                	jne    c001eed7 <__divdi3+0x83>
c001eecc:	b8 01 00 00 00       	mov    eax,0x1
c001eed1:	31 d2                	xor    edx,edx
c001eed3:	f7 f3                	div    ebx
c001eed5:	89 c7                	mov    edi,eax
c001eed7:	31 d2                	xor    edx,edx
c001eed9:	89 e8                	mov    eax,ebp
c001eedb:	f7 f7                	div    edi
c001eedd:	89 c6                	mov    esi,eax
c001eedf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eee2:	f7 f7                	div    edi
c001eee4:	89 c1                	mov    ecx,eax
c001eee6:	eb c4                	jmp    c001eeac <__divdi3+0x58>
c001eee8:	39 eb                	cmp    ebx,ebp
c001eeea:	77 3c                	ja     c001ef28 <__divdi3+0xd4>
c001eeec:	0f bd f3             	bsr    esi,ebx
c001eeef:	83 f6 1f             	xor    esi,0x1f
c001eef2:	75 40                	jne    c001ef34 <__divdi3+0xe0>
c001eef4:	39 eb                	cmp    ebx,ebp
c001eef6:	72 09                	jb     c001ef01 <__divdi3+0xad>
c001eef8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001eefb:	0f 87 97 00 00 00    	ja     c001ef98 <__divdi3+0x144>
c001ef01:	b9 01 00 00 00       	mov    ecx,0x1
c001ef06:	eb a4                	jmp    c001eeac <__divdi3+0x58>
c001ef08:	f7 d9                	neg    ecx
c001ef0a:	83 d3 00             	adc    ebx,0x0
c001ef0d:	f7 db                	neg    ebx
c001ef0f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef12:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef16:	89 dd                	mov    ebp,ebx
c001ef18:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ef20:	e9 5f ff ff ff       	jmp    c001ee84 <__divdi3+0x30>
c001ef25:	8d 76 00             	lea    esi,[esi+0x0]
c001ef28:	31 f6                	xor    esi,esi
c001ef2a:	31 c9                	xor    ecx,ecx
c001ef2c:	e9 7b ff ff ff       	jmp    c001eeac <__divdi3+0x58>
c001ef31:	8d 76 00             	lea    esi,[esi+0x0]
c001ef34:	b8 20 00 00 00       	mov    eax,0x20
c001ef39:	29 f0                	sub    eax,esi
c001ef3b:	89 f1                	mov    ecx,esi
c001ef3d:	d3 e3                	shl    ebx,cl
c001ef3f:	89 fa                	mov    edx,edi
c001ef41:	88 c1                	mov    cl,al
c001ef43:	d3 ea                	shr    edx,cl
c001ef45:	09 da                	or     edx,ebx
c001ef47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ef4b:	89 f1                	mov    ecx,esi
c001ef4d:	d3 e7                	shl    edi,cl
c001ef4f:	89 eb                	mov    ebx,ebp
c001ef51:	88 c1                	mov    cl,al
c001ef53:	d3 eb                	shr    ebx,cl
c001ef55:	89 f1                	mov    ecx,esi
c001ef57:	d3 e5                	shl    ebp,cl
c001ef59:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ef5c:	88 c1                	mov    cl,al
c001ef5e:	d3 ea                	shr    edx,cl
c001ef60:	09 d5                	or     ebp,edx
c001ef62:	89 e8                	mov    eax,ebp
c001ef64:	89 da                	mov    edx,ebx
c001ef66:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ef6a:	89 d3                	mov    ebx,edx
c001ef6c:	89 c5                	mov    ebp,eax
c001ef6e:	f7 e7                	mul    edi
c001ef70:	39 d3                	cmp    ebx,edx
c001ef72:	72 18                	jb     c001ef8c <__divdi3+0x138>
c001ef74:	74 0a                	je     c001ef80 <__divdi3+0x12c>
c001ef76:	89 e9                	mov    ecx,ebp
c001ef78:	31 f6                	xor    esi,esi
c001ef7a:	e9 2d ff ff ff       	jmp    c001eeac <__divdi3+0x58>
c001ef7f:	90                   	nop
c001ef80:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001ef83:	89 f1                	mov    ecx,esi
c001ef85:	d3 e7                	shl    edi,cl
c001ef87:	39 c7                	cmp    edi,eax
c001ef89:	73 eb                	jae    c001ef76 <__divdi3+0x122>
c001ef8b:	90                   	nop
c001ef8c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001ef8f:	31 f6                	xor    esi,esi
c001ef91:	e9 16 ff ff ff       	jmp    c001eeac <__divdi3+0x58>
c001ef96:	66 90                	xchg   ax,ax
c001ef98:	31 c9                	xor    ecx,ecx
c001ef9a:	e9 0d ff ff ff       	jmp    c001eeac <__divdi3+0x58>
c001ef9f:	90                   	nop

c001efa0 <__moddi3>:
c001efa0:	55                   	push   ebp
c001efa1:	57                   	push   edi
c001efa2:	56                   	push   esi
c001efa3:	53                   	push   ebx
c001efa4:	83 ec 2c             	sub    esp,0x2c
c001efa7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001efab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001efaf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001efb3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001efb7:	85 db                	test   ebx,ebx
c001efb9:	0f 88 85 00 00 00    	js     c001f044 <__moddi3+0xa4>
c001efbf:	89 de                	mov    esi,ebx
c001efc1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001efc9:	89 d7                	mov    edi,edx
c001efcb:	85 d2                	test   edx,edx
c001efcd:	79 09                	jns    c001efd8 <__moddi3+0x38>
c001efcf:	f7 d8                	neg    eax
c001efd1:	83 d2 00             	adc    edx,0x0
c001efd4:	f7 da                	neg    edx
c001efd6:	89 d7                	mov    edi,edx
c001efd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efdc:	89 cd                	mov    ebp,ecx
c001efde:	85 ff                	test   edi,edi
c001efe0:	75 52                	jne    c001f034 <__moddi3+0x94>
c001efe2:	89 c3                	mov    ebx,eax
c001efe4:	39 f0                	cmp    eax,esi
c001efe6:	76 24                	jbe    c001f00c <__moddi3+0x6c>
c001efe8:	89 c8                	mov    eax,ecx
c001efea:	89 f2                	mov    edx,esi
c001efec:	f7 f3                	div    ebx
c001efee:	89 d6                	mov    esi,edx
c001eff0:	89 f0                	mov    eax,esi
c001eff2:	31 d2                	xor    edx,edx
c001eff4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eff8:	85 c9                	test   ecx,ecx
c001effa:	74 07                	je     c001f003 <__moddi3+0x63>
c001effc:	f7 d8                	neg    eax
c001effe:	83 d2 00             	adc    edx,0x0
c001f001:	f7 da                	neg    edx
c001f003:	83 c4 2c             	add    esp,0x2c
c001f006:	5b                   	pop    ebx
c001f007:	5e                   	pop    esi
c001f008:	5f                   	pop    edi
c001f009:	5d                   	pop    ebp
c001f00a:	c3                   	ret    
c001f00b:	90                   	nop
c001f00c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f010:	85 db                	test   ebx,ebx
c001f012:	75 0d                	jne    c001f021 <__moddi3+0x81>
c001f014:	b8 01 00 00 00       	mov    eax,0x1
c001f019:	31 d2                	xor    edx,edx
c001f01b:	f7 f7                	div    edi
c001f01d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f021:	89 f0                	mov    eax,esi
c001f023:	31 d2                	xor    edx,edx
c001f025:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f029:	f7 f7                	div    edi
c001f02b:	89 e8                	mov    eax,ebp
c001f02d:	f7 f7                	div    edi
c001f02f:	89 d6                	mov    esi,edx
c001f031:	eb bd                	jmp    c001eff0 <__moddi3+0x50>
c001f033:	90                   	nop
c001f034:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f038:	39 f7                	cmp    edi,esi
c001f03a:	76 20                	jbe    c001f05c <__moddi3+0xbc>
c001f03c:	89 c8                	mov    eax,ecx
c001f03e:	89 f2                	mov    edx,esi
c001f040:	eb b2                	jmp    c001eff4 <__moddi3+0x54>
c001f042:	66 90                	xchg   ax,ax
c001f044:	f7 d9                	neg    ecx
c001f046:	83 d3 00             	adc    ebx,0x0
c001f049:	f7 db                	neg    ebx
c001f04b:	89 de                	mov    esi,ebx
c001f04d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f055:	e9 6f ff ff ff       	jmp    c001efc9 <__moddi3+0x29>
c001f05a:	66 90                	xchg   ax,ax
c001f05c:	0f bd c7             	bsr    eax,edi
c001f05f:	83 f0 1f             	xor    eax,0x1f
c001f062:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f066:	75 24                	jne    c001f08c <__moddi3+0xec>
c001f068:	39 f7                	cmp    edi,esi
c001f06a:	72 06                	jb     c001f072 <__moddi3+0xd2>
c001f06c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f070:	77 0c                	ja     c001f07e <__moddi3+0xde>
c001f072:	89 e9                	mov    ecx,ebp
c001f074:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f078:	19 fe                	sbb    esi,edi
c001f07a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f07e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f082:	89 f2                	mov    edx,esi
c001f084:	e9 6b ff ff ff       	jmp    c001eff4 <__moddi3+0x54>
c001f089:	8d 76 00             	lea    esi,[esi+0x0]
c001f08c:	b8 20 00 00 00       	mov    eax,0x20
c001f091:	89 c2                	mov    edx,eax
c001f093:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f097:	29 da                	sub    edx,ebx
c001f099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f09d:	88 d9                	mov    cl,bl
c001f09f:	d3 e7                	shl    edi,cl
c001f0a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0a5:	88 d1                	mov    cl,dl
c001f0a7:	d3 e8                	shr    eax,cl
c001f0a9:	09 c7                	or     edi,eax
c001f0ab:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f0af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f0b3:	89 d8                	mov    eax,ebx
c001f0b5:	88 d9                	mov    cl,bl
c001f0b7:	d3 e7                	shl    edi,cl
c001f0b9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f0bd:	89 f3                	mov    ebx,esi
c001f0bf:	88 d1                	mov    cl,dl
c001f0c1:	d3 eb                	shr    ebx,cl
c001f0c3:	89 c7                	mov    edi,eax
c001f0c5:	88 c1                	mov    cl,al
c001f0c7:	d3 e6                	shl    esi,cl
c001f0c9:	89 e8                	mov    eax,ebp
c001f0cb:	88 d1                	mov    cl,dl
c001f0cd:	d3 e8                	shr    eax,cl
c001f0cf:	09 f0                	or     eax,esi
c001f0d1:	89 f9                	mov    ecx,edi
c001f0d3:	d3 e5                	shl    ebp,cl
c001f0d5:	89 da                	mov    edx,ebx
c001f0d7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f0db:	89 d3                	mov    ebx,edx
c001f0dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f0e1:	89 c6                	mov    esi,eax
c001f0e3:	89 d1                	mov    ecx,edx
c001f0e5:	39 d3                	cmp    ebx,edx
c001f0e7:	72 27                	jb     c001f110 <__moddi3+0x170>
c001f0e9:	74 21                	je     c001f10c <__moddi3+0x16c>
c001f0eb:	29 f5                	sub    ebp,esi
c001f0ed:	19 cb                	sbb    ebx,ecx
c001f0ef:	89 de                	mov    esi,ebx
c001f0f1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f0f5:	d3 e6                	shl    esi,cl
c001f0f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f0fb:	89 f9                	mov    ecx,edi
c001f0fd:	d3 ed                	shr    ebp,cl
c001f0ff:	09 ee                	or     esi,ebp
c001f101:	89 f0                	mov    eax,esi
c001f103:	d3 eb                	shr    ebx,cl
c001f105:	89 da                	mov    edx,ebx
c001f107:	e9 e8 fe ff ff       	jmp    c001eff4 <__moddi3+0x54>
c001f10c:	39 c5                	cmp    ebp,eax
c001f10e:	73 db                	jae    c001f0eb <__moddi3+0x14b>
c001f110:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f114:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f118:	89 d1                	mov    ecx,edx
c001f11a:	89 c6                	mov    esi,eax
c001f11c:	eb cd                	jmp    c001f0eb <__moddi3+0x14b>
c001f11e:	66 90                	xchg   ax,ax

c001f120 <__udivdi3>:
c001f120:	55                   	push   ebp
c001f121:	57                   	push   edi
c001f122:	56                   	push   esi
c001f123:	53                   	push   ebx
c001f124:	83 ec 1c             	sub    esp,0x1c
c001f127:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f12b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f12f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f133:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f137:	85 d2                	test   edx,edx
c001f139:	75 41                	jne    c001f17c <__udivdi3+0x5c>
c001f13b:	39 f7                	cmp    edi,esi
c001f13d:	76 15                	jbe    c001f154 <__udivdi3+0x34>
c001f13f:	89 e8                	mov    eax,ebp
c001f141:	89 f2                	mov    edx,esi
c001f143:	f7 f7                	div    edi
c001f145:	31 db                	xor    ebx,ebx
c001f147:	89 da                	mov    edx,ebx
c001f149:	83 c4 1c             	add    esp,0x1c
c001f14c:	5b                   	pop    ebx
c001f14d:	5e                   	pop    esi
c001f14e:	5f                   	pop    edi
c001f14f:	5d                   	pop    ebp
c001f150:	c3                   	ret    
c001f151:	8d 76 00             	lea    esi,[esi+0x0]
c001f154:	89 f9                	mov    ecx,edi
c001f156:	85 ff                	test   edi,edi
c001f158:	75 0b                	jne    c001f165 <__udivdi3+0x45>
c001f15a:	b8 01 00 00 00       	mov    eax,0x1
c001f15f:	31 d2                	xor    edx,edx
c001f161:	f7 f7                	div    edi
c001f163:	89 c1                	mov    ecx,eax
c001f165:	31 d2                	xor    edx,edx
c001f167:	89 f0                	mov    eax,esi
c001f169:	f7 f1                	div    ecx
c001f16b:	89 c3                	mov    ebx,eax
c001f16d:	89 e8                	mov    eax,ebp
c001f16f:	f7 f1                	div    ecx
c001f171:	89 da                	mov    edx,ebx
c001f173:	83 c4 1c             	add    esp,0x1c
c001f176:	5b                   	pop    ebx
c001f177:	5e                   	pop    esi
c001f178:	5f                   	pop    edi
c001f179:	5d                   	pop    ebp
c001f17a:	c3                   	ret    
c001f17b:	90                   	nop
c001f17c:	39 f2                	cmp    edx,esi
c001f17e:	77 1c                	ja     c001f19c <__udivdi3+0x7c>
c001f180:	0f bd da             	bsr    ebx,edx
c001f183:	83 f3 1f             	xor    ebx,0x1f
c001f186:	75 24                	jne    c001f1ac <__udivdi3+0x8c>
c001f188:	39 f2                	cmp    edx,esi
c001f18a:	72 08                	jb     c001f194 <__udivdi3+0x74>
c001f18c:	39 ef                	cmp    edi,ebp
c001f18e:	0f 87 84 00 00 00    	ja     c001f218 <__udivdi3+0xf8>
c001f194:	b8 01 00 00 00       	mov    eax,0x1
c001f199:	eb ac                	jmp    c001f147 <__udivdi3+0x27>
c001f19b:	90                   	nop
c001f19c:	31 db                	xor    ebx,ebx
c001f19e:	31 c0                	xor    eax,eax
c001f1a0:	89 da                	mov    edx,ebx
c001f1a2:	83 c4 1c             	add    esp,0x1c
c001f1a5:	5b                   	pop    ebx
c001f1a6:	5e                   	pop    esi
c001f1a7:	5f                   	pop    edi
c001f1a8:	5d                   	pop    ebp
c001f1a9:	c3                   	ret    
c001f1aa:	66 90                	xchg   ax,ax
c001f1ac:	b8 20 00 00 00       	mov    eax,0x20
c001f1b1:	29 d8                	sub    eax,ebx
c001f1b3:	88 d9                	mov    cl,bl
c001f1b5:	d3 e2                	shl    edx,cl
c001f1b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f1bb:	89 fa                	mov    edx,edi
c001f1bd:	88 c1                	mov    cl,al
c001f1bf:	d3 ea                	shr    edx,cl
c001f1c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1c5:	09 d1                	or     ecx,edx
c001f1c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f1cb:	88 d9                	mov    cl,bl
c001f1cd:	d3 e7                	shl    edi,cl
c001f1cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f1d3:	89 f7                	mov    edi,esi
c001f1d5:	88 c1                	mov    cl,al
c001f1d7:	d3 ef                	shr    edi,cl
c001f1d9:	88 d9                	mov    cl,bl
c001f1db:	d3 e6                	shl    esi,cl
c001f1dd:	89 ea                	mov    edx,ebp
c001f1df:	88 c1                	mov    cl,al
c001f1e1:	d3 ea                	shr    edx,cl
c001f1e3:	09 d6                	or     esi,edx
c001f1e5:	89 f0                	mov    eax,esi
c001f1e7:	89 fa                	mov    edx,edi
c001f1e9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f1ed:	89 d7                	mov    edi,edx
c001f1ef:	89 c6                	mov    esi,eax
c001f1f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f1f5:	39 d7                	cmp    edi,edx
c001f1f7:	72 13                	jb     c001f20c <__udivdi3+0xec>
c001f1f9:	74 09                	je     c001f204 <__udivdi3+0xe4>
c001f1fb:	89 f0                	mov    eax,esi
c001f1fd:	31 db                	xor    ebx,ebx
c001f1ff:	e9 43 ff ff ff       	jmp    c001f147 <__udivdi3+0x27>
c001f204:	88 d9                	mov    cl,bl
c001f206:	d3 e5                	shl    ebp,cl
c001f208:	39 c5                	cmp    ebp,eax
c001f20a:	73 ef                	jae    c001f1fb <__udivdi3+0xdb>
c001f20c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f20f:	31 db                	xor    ebx,ebx
c001f211:	e9 31 ff ff ff       	jmp    c001f147 <__udivdi3+0x27>
c001f216:	66 90                	xchg   ax,ax
c001f218:	31 c0                	xor    eax,eax
c001f21a:	e9 28 ff ff ff       	jmp    c001f147 <__udivdi3+0x27>
c001f21f:	90                   	nop

c001f220 <__umoddi3>:
c001f220:	55                   	push   ebp
c001f221:	57                   	push   edi
c001f222:	56                   	push   esi
c001f223:	53                   	push   ebx
c001f224:	83 ec 1c             	sub    esp,0x1c
c001f227:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f22b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f22f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f233:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f237:	89 da                	mov    edx,ebx
c001f239:	85 c0                	test   eax,eax
c001f23b:	75 37                	jne    c001f274 <__umoddi3+0x54>
c001f23d:	39 df                	cmp    edi,ebx
c001f23f:	76 13                	jbe    c001f254 <__umoddi3+0x34>
c001f241:	89 f0                	mov    eax,esi
c001f243:	f7 f7                	div    edi
c001f245:	89 d0                	mov    eax,edx
c001f247:	31 d2                	xor    edx,edx
c001f249:	83 c4 1c             	add    esp,0x1c
c001f24c:	5b                   	pop    ebx
c001f24d:	5e                   	pop    esi
c001f24e:	5f                   	pop    edi
c001f24f:	5d                   	pop    ebp
c001f250:	c3                   	ret    
c001f251:	8d 76 00             	lea    esi,[esi+0x0]
c001f254:	89 fd                	mov    ebp,edi
c001f256:	85 ff                	test   edi,edi
c001f258:	75 0b                	jne    c001f265 <__umoddi3+0x45>
c001f25a:	b8 01 00 00 00       	mov    eax,0x1
c001f25f:	31 d2                	xor    edx,edx
c001f261:	f7 f7                	div    edi
c001f263:	89 c5                	mov    ebp,eax
c001f265:	89 d8                	mov    eax,ebx
c001f267:	31 d2                	xor    edx,edx
c001f269:	f7 f5                	div    ebp
c001f26b:	89 f0                	mov    eax,esi
c001f26d:	f7 f5                	div    ebp
c001f26f:	89 d0                	mov    eax,edx
c001f271:	eb d4                	jmp    c001f247 <__umoddi3+0x27>
c001f273:	90                   	nop
c001f274:	89 f1                	mov    ecx,esi
c001f276:	39 d8                	cmp    eax,ebx
c001f278:	76 0a                	jbe    c001f284 <__umoddi3+0x64>
c001f27a:	89 f0                	mov    eax,esi
c001f27c:	83 c4 1c             	add    esp,0x1c
c001f27f:	5b                   	pop    ebx
c001f280:	5e                   	pop    esi
c001f281:	5f                   	pop    edi
c001f282:	5d                   	pop    ebp
c001f283:	c3                   	ret    
c001f284:	0f bd e8             	bsr    ebp,eax
c001f287:	83 f5 1f             	xor    ebp,0x1f
c001f28a:	75 1c                	jne    c001f2a8 <__umoddi3+0x88>
c001f28c:	39 d8                	cmp    eax,ebx
c001f28e:	72 04                	jb     c001f294 <__umoddi3+0x74>
c001f290:	39 f7                	cmp    edi,esi
c001f292:	77 08                	ja     c001f29c <__umoddi3+0x7c>
c001f294:	89 da                	mov    edx,ebx
c001f296:	29 fe                	sub    esi,edi
c001f298:	19 c2                	sbb    edx,eax
c001f29a:	89 f1                	mov    ecx,esi
c001f29c:	89 c8                	mov    eax,ecx
c001f29e:	83 c4 1c             	add    esp,0x1c
c001f2a1:	5b                   	pop    ebx
c001f2a2:	5e                   	pop    esi
c001f2a3:	5f                   	pop    edi
c001f2a4:	5d                   	pop    ebp
c001f2a5:	c3                   	ret    
c001f2a6:	66 90                	xchg   ax,ax
c001f2a8:	ba 20 00 00 00       	mov    edx,0x20
c001f2ad:	29 ea                	sub    edx,ebp
c001f2af:	89 e9                	mov    ecx,ebp
c001f2b1:	d3 e0                	shl    eax,cl
c001f2b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2b7:	89 f8                	mov    eax,edi
c001f2b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f2bd:	88 d1                	mov    cl,dl
c001f2bf:	d3 e8                	shr    eax,cl
c001f2c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2c5:	09 c1                	or     ecx,eax
c001f2c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f2cb:	89 e9                	mov    ecx,ebp
c001f2cd:	d3 e7                	shl    edi,cl
c001f2cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f2d3:	89 d8                	mov    eax,ebx
c001f2d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2d9:	88 d1                	mov    cl,dl
c001f2db:	d3 e8                	shr    eax,cl
c001f2dd:	89 c7                	mov    edi,eax
c001f2df:	89 e9                	mov    ecx,ebp
c001f2e1:	d3 e3                	shl    ebx,cl
c001f2e3:	89 f0                	mov    eax,esi
c001f2e5:	88 d1                	mov    cl,dl
c001f2e7:	d3 e8                	shr    eax,cl
c001f2e9:	09 d8                	or     eax,ebx
c001f2eb:	89 e9                	mov    ecx,ebp
c001f2ed:	d3 e6                	shl    esi,cl
c001f2ef:	89 f3                	mov    ebx,esi
c001f2f1:	89 fa                	mov    edx,edi
c001f2f3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f2f7:	89 d1                	mov    ecx,edx
c001f2f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f2fd:	89 c6                	mov    esi,eax
c001f2ff:	89 d7                	mov    edi,edx
c001f301:	39 d1                	cmp    ecx,edx
c001f303:	72 27                	jb     c001f32c <__umoddi3+0x10c>
c001f305:	74 21                	je     c001f328 <__umoddi3+0x108>
c001f307:	89 ca                	mov    edx,ecx
c001f309:	29 f3                	sub    ebx,esi
c001f30b:	19 fa                	sbb    edx,edi
c001f30d:	89 d0                	mov    eax,edx
c001f30f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f313:	d3 e0                	shl    eax,cl
c001f315:	89 e9                	mov    ecx,ebp
c001f317:	d3 eb                	shr    ebx,cl
c001f319:	09 d8                	or     eax,ebx
c001f31b:	d3 ea                	shr    edx,cl
c001f31d:	83 c4 1c             	add    esp,0x1c
c001f320:	5b                   	pop    ebx
c001f321:	5e                   	pop    esi
c001f322:	5f                   	pop    edi
c001f323:	5d                   	pop    ebp
c001f324:	c3                   	ret    
c001f325:	8d 76 00             	lea    esi,[esi+0x0]
c001f328:	39 c3                	cmp    ebx,eax
c001f32a:	73 db                	jae    c001f307 <__umoddi3+0xe7>
c001f32c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f330:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f334:	89 d7                	mov    edi,edx
c001f336:	89 c6                	mov    esi,eax
c001f338:	eb cd                	jmp    c001f307 <__umoddi3+0xe7>

Disassembly of section .init:

c001f33a <_init>:
c001f33a:	55                   	push   ebp
c001f33b:	89 e5                	mov    ebp,esp
c001f33d:	e8 b2 0d fe ff       	call   c00000f4 <frame_dummy>
c001f342:	e8 e5 fa ff ff       	call   c001ee2c <__do_global_ctors_aux>
c001f347:	5d                   	pop    ebp
c001f348:	c3                   	ret    

Disassembly of section .fini:

c001f349 <_fini>:
c001f349:	55                   	push   ebp
c001f34a:	89 e5                	mov    ebp,esp
c001f34c:	e8 33 0d fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f351:	5d                   	pop    ebp
c001f352:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f354 <Computer::~Computer()>:
c001f354:	83 ec 0c             	sub    esp,0xc
c001f357:	ba 74 06 02 c0       	mov    edx,0xc0020674
c001f35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f360:	89 10                	mov    DWORD PTR [eax],edx
c001f362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f366:	83 ec 0c             	sub    esp,0xc
c001f369:	50                   	push   eax
c001f36a:	e8 77 d1 fe ff       	call   c000c4e6 <Device::~Device()>
c001f36f:	83 c4 10             	add    esp,0x10
c001f372:	90                   	nop
c001f373:	83 c4 0c             	add    esp,0xc
c001f376:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f378 <Computer::~Computer()>:
c001f378:	83 ec 0c             	sub    esp,0xc
c001f37b:	83 ec 0c             	sub    esp,0xc
c001f37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f382:	e8 cd ff ff ff       	call   c001f354 <Computer::~Computer()>
c001f387:	83 c4 10             	add    esp,0x10
c001f38a:	83 ec 08             	sub    esp,0x8
c001f38d:	68 70 01 00 00       	push   0x170
c001f392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f396:	e8 71 b4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f39b:	83 c4 10             	add    esp,0x10
c001f39e:	83 c4 0c             	add    esp,0xc
c001f3a1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f3a2 <idleCommon()>:
c001f3a2:	83 ec 0c             	sub    esp,0xc
c001f3a5:	fa                   	cli    
c001f3a6:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001f3ac:	e8 af 66 ff ff       	call   c0015a60 <schedule()>
c001f3b1:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001f3b6:	48                   	dec    eax
c001f3b7:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001f3bc:	75 01                	jne    c001f3bf <idleCommon()+0x1d>
c001f3be:	fb                   	sti    
c001f3bf:	83 c4 0c             	add    esp,0xc
c001f3c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f3c4 <LinkedList<UnixFile>::~LinkedList()>:
c001f3c4:	90                   	nop
c001f3c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f3c6 <LinkedList<UnixFile>::LinkedList()>:
c001f3c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f3db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f3e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f3f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f3fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f406:	90                   	nop
c001f407:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f408 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f408:	83 ec 0c             	sub    esp,0xc
c001f40b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f410:	75 10                	jne    c001f422 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f412:	83 ec 0c             	sub    esp,0xc
c001f415:	68 88 08 02 c0       	push   0xc0020888
c001f41a:	e8 3e 1d ff ff       	call   c001115d <KePanic(char const*)>
c001f41f:	83 c4 10             	add    esp,0x10
c001f422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f426:	8b 00                	mov    eax,DWORD PTR [eax]
c001f428:	85 c0                	test   eax,eax
c001f42a:	74 34                	je     c001f460 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f430:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f433:	85 c0                	test   eax,eax
c001f435:	74 29                	je     c001f460 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f43b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f43e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f442:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f449:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f44d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f454:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f457:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f45e:	eb 65                	jmp    c001f4c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f464:	8b 00                	mov    eax,DWORD PTR [eax]
c001f466:	85 c0                	test   eax,eax
c001f468:	75 4b                	jne    c001f4b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f46e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f471:	85 c0                	test   eax,eax
c001f473:	75 40                	jne    c001f4b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f479:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f47d:	89 10                	mov    DWORD PTR [eax],edx
c001f47f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f483:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f487:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f48e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f491:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f49c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f49f:	85 c0                	test   eax,eax
c001f4a1:	74 22                	je     c001f4c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4a3:	83 ec 0c             	sub    esp,0xc
c001f4a6:	68 aa 08 02 c0       	push   0xc00208aa
c001f4ab:	e8 ad 1c ff ff       	call   c001115d <KePanic(char const*)>
c001f4b0:	83 c4 10             	add    esp,0x10
c001f4b3:	eb 10                	jmp    c001f4c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4b5:	83 ec 0c             	sub    esp,0xc
c001f4b8:	68 b4 08 02 c0       	push   0xc00208b4
c001f4bd:	e8 9b 1c ff ff       	call   c001115d <KePanic(char const*)>
c001f4c2:	83 c4 10             	add    esp,0x10
c001f4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4cc:	8d 50 01             	lea    edx,[eax+0x1]
c001f4cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f4d6:	90                   	nop
c001f4d7:	83 c4 0c             	add    esp,0xc
c001f4da:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f4dc <LinkedList<UnixFile>::getFirstElement()>:
c001f4dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f4e4 <LinkedList<UnixFile>::removeFirst()>:
c001f4e4:	83 ec 0c             	sub    esp,0xc
c001f4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4ed:	85 c0                	test   eax,eax
c001f4ef:	75 12                	jne    c001f503 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f4f1:	83 ec 0c             	sub    esp,0xc
c001f4f4:	68 c0 08 02 c0       	push   0xc00208c0
c001f4f9:	e8 5f 1c ff ff       	call   c001115d <KePanic(char const*)>
c001f4fe:	83 c4 10             	add    esp,0x10
c001f501:	eb 7e                	jmp    c001f581 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f507:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f50a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f50d:	85 c0                	test   eax,eax
c001f50f:	74 10                	je     c001f521 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f511:	83 ec 0c             	sub    esp,0xc
c001f514:	68 0b 09 02 c0       	push   0xc002090b
c001f519:	e8 3f 1c ff ff       	call   c001115d <KePanic(char const*)>
c001f51e:	83 c4 10             	add    esp,0x10
c001f521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f525:	8b 00                	mov    eax,DWORD PTR [eax]
c001f527:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f52a:	85 c0                	test   eax,eax
c001f52c:	75 33                	jne    c001f561 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f52e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f532:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f53c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f547:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f54a:	83 f8 01             	cmp    eax,0x1
c001f54d:	74 21                	je     c001f570 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f54f:	83 ec 0c             	sub    esp,0xc
c001f552:	68 e4 08 02 c0       	push   0xc00208e4
c001f557:	e8 01 1c ff ff       	call   c001115d <KePanic(char const*)>
c001f55c:	83 c4 10             	add    esp,0x10
c001f55f:	eb 0f                	jmp    c001f570 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f565:	8b 00                	mov    eax,DWORD PTR [eax]
c001f567:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56e:	89 10                	mov    DWORD PTR [eax],edx
c001f570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f574:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f577:	8d 50 ff             	lea    edx,[eax-0x1]
c001f57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f57e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f581:	83 c4 0c             	add    esp,0xc
c001f584:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f586 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f586:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f58a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f58d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f58e <DriverlessDevice::~DriverlessDevice()>:
c001f58e:	ba fc 13 02 c0       	mov    edx,0xc00213fc
c001f593:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f597:	89 10                	mov    DWORD PTR [eax],edx
c001f599:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f59d:	50                   	push   eax
c001f59e:	e8 43 cf fe ff       	call   c000c4e6 <Device::~Device()>
c001f5a3:	83 c4 04             	add    esp,0x4
c001f5a6:	90                   	nop
c001f5a7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f5a8 <DriverlessDevice::~DriverlessDevice()>:
c001f5a8:	83 ec 0c             	sub    esp,0xc
c001f5ab:	83 ec 0c             	sub    esp,0xc
c001f5ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5b2:	e8 d7 ff ff ff       	call   c001f58e <DriverlessDevice::~DriverlessDevice()>
c001f5b7:	83 c4 10             	add    esp,0x10
c001f5ba:	83 ec 08             	sub    esp,0x8
c001f5bd:	68 58 01 00 00       	push   0x158
c001f5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5c6:	e8 41 b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f5cb:	83 c4 10             	add    esp,0x10
c001f5ce:	83 c4 0c             	add    esp,0xc
c001f5d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f5d2 <LinkedList<Device>::addElement(Device*)>:
c001f5d2:	83 ec 0c             	sub    esp,0xc
c001f5d5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f5da:	75 10                	jne    c001f5ec <LinkedList<Device>::addElement(Device*)+0x1a>
c001f5dc:	83 ec 0c             	sub    esp,0xc
c001f5df:	68 88 08 02 c0       	push   0xc0020888
c001f5e4:	e8 74 1b ff ff       	call   c001115d <KePanic(char const*)>
c001f5e9:	83 c4 10             	add    esp,0x10
c001f5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5f2:	85 c0                	test   eax,eax
c001f5f4:	74 3a                	je     c001f630 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f5f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5fd:	85 c0                	test   eax,eax
c001f5ff:	74 2f                	je     c001f630 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f605:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f608:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f60c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f616:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f61a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f61d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f621:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f624:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f62e:	eb 68                	jmp    c001f698 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f634:	8b 00                	mov    eax,DWORD PTR [eax]
c001f636:	85 c0                	test   eax,eax
c001f638:	75 4e                	jne    c001f688 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f63e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f641:	85 c0                	test   eax,eax
c001f643:	75 43                	jne    c001f688 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f649:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f64d:	89 10                	mov    DWORD PTR [eax],edx
c001f64f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f653:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f657:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f65e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f661:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f672:	85 c0                	test   eax,eax
c001f674:	74 22                	je     c001f698 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f676:	83 ec 0c             	sub    esp,0xc
c001f679:	68 aa 08 02 c0       	push   0xc00208aa
c001f67e:	e8 da 1a ff ff       	call   c001115d <KePanic(char const*)>
c001f683:	83 c4 10             	add    esp,0x10
c001f686:	eb 10                	jmp    c001f698 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f688:	83 ec 0c             	sub    esp,0xc
c001f68b:	68 b4 08 02 c0       	push   0xc00208b4
c001f690:	e8 c8 1a ff ff       	call   c001115d <KePanic(char const*)>
c001f695:	83 c4 10             	add    esp,0x10
c001f698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f69f:	8d 50 01             	lea    edx,[eax+0x1]
c001f6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f6a9:	90                   	nop
c001f6aa:	83 c4 0c             	add    esp,0xc
c001f6ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f6ae <LinkedList<Device>::LinkedList()>:
c001f6ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6ee:	90                   	nop
c001f6ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f6f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6f6:	85 c0                	test   eax,eax
c001f6f8:	75 0e                	jne    c001f708 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f6fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f701:	85 c0                	test   eax,eax
c001f703:	75 03                	jne    c001f708 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f705:	b0 01                	mov    al,0x1
c001f707:	c3                   	ret    
c001f708:	b0 00                	mov    al,0x0
c001f70a:	90                   	nop
c001f70b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f70c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f710:	8b 00                	mov    eax,DWORD PTR [eax]
c001f712:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f714:	83 ec 0c             	sub    esp,0xc
c001f717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f71d:	85 c0                	test   eax,eax
c001f71f:	75 17                	jne    c001f738 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f721:	83 ec 0c             	sub    esp,0xc
c001f724:	68 c0 08 02 c0       	push   0xc00208c0
c001f729:	e8 2f 1a ff ff       	call   c001115d <KePanic(char const*)>
c001f72e:	83 c4 10             	add    esp,0x10
c001f731:	e9 96 00 00 00       	jmp    c001f7cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f736:	66 90                	xchg   ax,ax
c001f738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f73c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f73f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f742:	85 c0                	test   eax,eax
c001f744:	0f 95 c0             	setne  al
c001f747:	0f b6 c0             	movzx  eax,al
c001f74a:	85 c0                	test   eax,eax
c001f74c:	74 12                	je     c001f760 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f74e:	83 ec 0c             	sub    esp,0xc
c001f751:	68 0b 09 02 c0       	push   0xc002090b
c001f756:	e8 02 1a ff ff       	call   c001115d <KePanic(char const*)>
c001f75b:	83 c4 10             	add    esp,0x10
c001f75e:	66 90                	xchg   ax,ax
c001f760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f764:	8b 00                	mov    eax,DWORD PTR [eax]
c001f766:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f769:	85 c0                	test   eax,eax
c001f76b:	0f 94 c0             	sete   al
c001f76e:	0f b6 c0             	movzx  eax,al
c001f771:	85 c0                	test   eax,eax
c001f773:	74 33                	je     c001f7a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f779:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f783:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f791:	83 f8 01             	cmp    eax,0x1
c001f794:	74 22                	je     c001f7b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f796:	83 ec 0c             	sub    esp,0xc
c001f799:	68 e4 08 02 c0       	push   0xc00208e4
c001f79e:	e8 ba 19 ff ff       	call   c001115d <KePanic(char const*)>
c001f7a3:	83 c4 10             	add    esp,0x10
c001f7a6:	eb 10                	jmp    c001f7b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7ae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b5:	89 10                	mov    DWORD PTR [eax],edx
c001f7b7:	90                   	nop
c001f7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7bf:	8d 50 ff             	lea    edx,[eax-0x1]
c001f7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7c9:	8d 76 00             	lea    esi,[esi+0x0]
c001f7cc:	83 c4 0c             	add    esp,0xc
c001f7cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f7d0:	83 ec 0c             	sub    esp,0xc
c001f7d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f7d8:	75 12                	jne    c001f7ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f7da:	83 ec 0c             	sub    esp,0xc
c001f7dd:	68 88 08 02 c0       	push   0xc0020888
c001f7e2:	e8 76 19 ff ff       	call   c001115d <KePanic(char const*)>
c001f7e7:	83 c4 10             	add    esp,0x10
c001f7ea:	66 90                	xchg   ax,ax
c001f7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7f2:	85 c0                	test   eax,eax
c001f7f4:	74 36                	je     c001f82c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7fd:	85 c0                	test   eax,eax
c001f7ff:	74 2b                	je     c001f82c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f805:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f808:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f80c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f813:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f817:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f821:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f828:	eb 6a                	jmp    c001f894 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f82a:	66 90                	xchg   ax,ax
c001f82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f830:	8b 00                	mov    eax,DWORD PTR [eax]
c001f832:	85 c0                	test   eax,eax
c001f834:	75 4e                	jne    c001f884 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f83d:	85 c0                	test   eax,eax
c001f83f:	75 43                	jne    c001f884 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f845:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f849:	89 10                	mov    DWORD PTR [eax],edx
c001f84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f853:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f85a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f85d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f868:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f86b:	85 c0                	test   eax,eax
c001f86d:	74 25                	je     c001f894 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f86f:	83 ec 0c             	sub    esp,0xc
c001f872:	68 aa 08 02 c0       	push   0xc00208aa
c001f877:	e8 e1 18 ff ff       	call   c001115d <KePanic(char const*)>
c001f87c:	83 c4 10             	add    esp,0x10
c001f87f:	eb 13                	jmp    c001f894 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f881:	8d 76 00             	lea    esi,[esi+0x0]
c001f884:	83 ec 0c             	sub    esp,0xc
c001f887:	68 b4 08 02 c0       	push   0xc00208b4
c001f88c:	e8 cc 18 ff ff       	call   c001115d <KePanic(char const*)>
c001f891:	83 c4 10             	add    esp,0x10
c001f894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f898:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f89b:	8d 50 01             	lea    edx,[eax+0x1]
c001f89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8a5:	90                   	nop
c001f8a6:	83 c4 0c             	add    esp,0xc
c001f8a9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f8ac <ACPI::~ACPI()>:
c001f8ac:	83 ec 0c             	sub    esp,0xc
c001f8af:	ba 00 1a 02 c0       	mov    edx,0xc0021a00
c001f8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b8:	89 10                	mov    DWORD PTR [eax],edx
c001f8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8be:	83 ec 0c             	sub    esp,0xc
c001f8c1:	50                   	push   eax
c001f8c2:	e8 1f cc fe ff       	call   c000c4e6 <Device::~Device()>
c001f8c7:	83 c4 10             	add    esp,0x10
c001f8ca:	90                   	nop
c001f8cb:	83 c4 0c             	add    esp,0xc
c001f8ce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f8d0 <ACPI::~ACPI()>:
c001f8d0:	83 ec 0c             	sub    esp,0xc
c001f8d3:	83 ec 0c             	sub    esp,0xc
c001f8d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8da:	e8 cd ff ff ff       	call   c001f8ac <ACPI::~ACPI()>
c001f8df:	83 c4 10             	add    esp,0x10
c001f8e2:	83 ec 08             	sub    esp,0x8
c001f8e5:	68 64 12 00 00       	push   0x1264
c001f8ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8ee:	e8 19 af fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f8f3:	83 c4 10             	add    esp,0x10
c001f8f6:	83 c4 0c             	add    esp,0xc
c001f8f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f8fc <LinkedList<Device>::~LinkedList()>:
c001f8fc:	90                   	nop
c001f8fd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f900 <LinkedList<Device>::isEmpty()>:
c001f900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f904:	8b 00                	mov    eax,DWORD PTR [eax]
c001f906:	85 c0                	test   eax,eax
c001f908:	75 0e                	jne    c001f918 <LinkedList<Device>::isEmpty()+0x18>
c001f90a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f90e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f911:	85 c0                	test   eax,eax
c001f913:	75 03                	jne    c001f918 <LinkedList<Device>::isEmpty()+0x18>
c001f915:	b0 01                	mov    al,0x1
c001f917:	c3                   	ret    
c001f918:	b0 00                	mov    al,0x0
c001f91a:	90                   	nop
c001f91b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f91c <LinkedList<Device>::getFirstElement()>:
c001f91c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f920:	8b 00                	mov    eax,DWORD PTR [eax]
c001f922:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f924 <LinkedList<Device>::removeFirst()>:
c001f924:	83 ec 0c             	sub    esp,0xc
c001f927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f92d:	85 c0                	test   eax,eax
c001f92f:	75 17                	jne    c001f948 <LinkedList<Device>::removeFirst()+0x24>
c001f931:	83 ec 0c             	sub    esp,0xc
c001f934:	68 c0 08 02 c0       	push   0xc00208c0
c001f939:	e8 1f 18 ff ff       	call   c001115d <KePanic(char const*)>
c001f93e:	83 c4 10             	add    esp,0x10
c001f941:	e9 92 00 00 00       	jmp    c001f9d8 <LinkedList<Device>::removeFirst()+0xb4>
c001f946:	66 90                	xchg   ax,ax
c001f948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f94f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f955:	85 c0                	test   eax,eax
c001f957:	74 13                	je     c001f96c <LinkedList<Device>::removeFirst()+0x48>
c001f959:	83 ec 0c             	sub    esp,0xc
c001f95c:	68 0b 09 02 c0       	push   0xc002090b
c001f961:	e8 f7 17 ff ff       	call   c001115d <KePanic(char const*)>
c001f966:	83 c4 10             	add    esp,0x10
c001f969:	8d 76 00             	lea    esi,[esi+0x0]
c001f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f970:	8b 00                	mov    eax,DWORD PTR [eax]
c001f972:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f978:	85 c0                	test   eax,eax
c001f97a:	75 34                	jne    c001f9b0 <LinkedList<Device>::removeFirst()+0x8c>
c001f97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f980:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f995:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f998:	83 f8 01             	cmp    eax,0x1
c001f99b:	74 27                	je     c001f9c4 <LinkedList<Device>::removeFirst()+0xa0>
c001f99d:	83 ec 0c             	sub    esp,0xc
c001f9a0:	68 e4 08 02 c0       	push   0xc00208e4
c001f9a5:	e8 b3 17 ff ff       	call   c001115d <KePanic(char const*)>
c001f9aa:	83 c4 10             	add    esp,0x10
c001f9ad:	eb 15                	jmp    c001f9c4 <LinkedList<Device>::removeFirst()+0xa0>
c001f9af:	90                   	nop
c001f9b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9b6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c0:	89 10                	mov    DWORD PTR [eax],edx
c001f9c2:	66 90                	xchg   ax,ax
c001f9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9cb:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9d5:	8d 76 00             	lea    esi,[esi+0x0]
c001f9d8:	83 c4 0c             	add    esp,0xc
c001f9db:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f9dc <CPU::~CPU()>:
c001f9dc:	83 ec 0c             	sub    esp,0xc
c001f9df:	ba a8 1b 02 c0       	mov    edx,0xc0021ba8
c001f9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e8:	89 10                	mov    DWORD PTR [eax],edx
c001f9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ee:	83 ec 0c             	sub    esp,0xc
c001f9f1:	50                   	push   eax
c001f9f2:	e8 ef ca fe ff       	call   c000c4e6 <Device::~Device()>
c001f9f7:	83 c4 10             	add    esp,0x10
c001f9fa:	90                   	nop
c001f9fb:	83 c4 0c             	add    esp,0xc
c001f9fe:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fa00 <CPU::~CPU()>:
c001fa00:	83 ec 0c             	sub    esp,0xc
c001fa03:	83 ec 0c             	sub    esp,0xc
c001fa06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa0a:	e8 cd ff ff ff       	call   c001f9dc <CPU::~CPU()>
c001fa0f:	83 c4 10             	add    esp,0x10
c001fa12:	83 ec 08             	sub    esp,0x8
c001fa15:	68 94 11 00 00       	push   0x1194
c001fa1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa1e:	e8 e9 ad fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fa23:	83 c4 10             	add    esp,0x10
c001fa26:	83 c4 0c             	add    esp,0xc
c001fa29:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fa2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fa2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa30:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fa33:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fa34 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fa34:	90                   	nop
c001fa35:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fa38 <ThreadControlBlock::ThreadControlBlock()>:
c001fa38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa3c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa47:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fa4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa52:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fa59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa5d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fa64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa68:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fa6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa73:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fa77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa7b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fa7f:	90                   	nop
c001fa80:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fa84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fa84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa88:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa92:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa9d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001faa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fab9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fabd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fac4:	90                   	nop
c001fac5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fac6 <PCI::~PCI()>:
c001fac6:	83 ec 0c             	sub    esp,0xc
c001fac9:	ba 64 2a 02 c0       	mov    edx,0xc0022a64
c001face:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad2:	89 10                	mov    DWORD PTR [eax],edx
c001fad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad8:	83 ec 0c             	sub    esp,0xc
c001fadb:	50                   	push   eax
c001fadc:	e8 97 c4 fe ff       	call   c000bf78 <Bus::~Bus()>
c001fae1:	83 c4 10             	add    esp,0x10
c001fae4:	90                   	nop
c001fae5:	83 c4 0c             	add    esp,0xc
c001fae8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001faea <PCI::~PCI()>:
c001faea:	83 ec 0c             	sub    esp,0xc
c001faed:	83 ec 0c             	sub    esp,0xc
c001faf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faf4:	e8 cd ff ff ff       	call   c001fac6 <PCI::~PCI()>
c001faf9:	83 c4 10             	add    esp,0x10
c001fafc:	83 ec 08             	sub    esp,0x8
c001faff:	68 5c 01 00 00       	push   0x15c
c001fb04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb08:	e8 ff ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb0d:	83 c4 10             	add    esp,0x10
c001fb10:	83 c4 0c             	add    esp,0xc
c001fb13:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fb14 <IDE::~IDE()>:
c001fb14:	83 ec 0c             	sub    esp,0xc
c001fb17:	ba 18 2b 02 c0       	mov    edx,0xc0022b18
c001fb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb20:	89 10                	mov    DWORD PTR [eax],edx
c001fb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb26:	83 ec 0c             	sub    esp,0xc
c001fb29:	50                   	push   eax
c001fb2a:	e8 31 ce fe ff       	call   c000c960 <HardDiskController::~HardDiskController()>
c001fb2f:	83 c4 10             	add    esp,0x10
c001fb32:	90                   	nop
c001fb33:	83 c4 0c             	add    esp,0xc
c001fb36:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fb38 <IDE::~IDE()>:
c001fb38:	83 ec 0c             	sub    esp,0xc
c001fb3b:	83 ec 0c             	sub    esp,0xc
c001fb3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb42:	e8 cd ff ff ff       	call   c001fb14 <IDE::~IDE()>
c001fb47:	83 c4 10             	add    esp,0x10
c001fb4a:	83 ec 08             	sub    esp,0x8
c001fb4d:	68 70 02 00 00       	push   0x270
c001fb52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb56:	e8 b1 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb5b:	83 c4 10             	add    esp,0x10
c001fb5e:	83 c4 0c             	add    esp,0xc
c001fb61:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fb62 <SATABus::~SATABus()>:
c001fb62:	83 ec 0c             	sub    esp,0xc
c001fb65:	ba 68 2b 02 c0       	mov    edx,0xc0022b68
c001fb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6e:	89 10                	mov    DWORD PTR [eax],edx
c001fb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb74:	83 ec 0c             	sub    esp,0xc
c001fb77:	50                   	push   eax
c001fb78:	e8 e3 cd fe ff       	call   c000c960 <HardDiskController::~HardDiskController()>
c001fb7d:	83 c4 10             	add    esp,0x10
c001fb80:	90                   	nop
c001fb81:	83 c4 0c             	add    esp,0xc
c001fb84:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fb86 <SATABus::~SATABus()>:
c001fb86:	83 ec 0c             	sub    esp,0xc
c001fb89:	83 ec 0c             	sub    esp,0xc
c001fb8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb90:	e8 cd ff ff ff       	call   c001fb62 <SATABus::~SATABus()>
c001fb95:	83 c4 10             	add    esp,0x10
c001fb98:	83 ec 08             	sub    esp,0x8
c001fb9b:	68 64 01 00 00       	push   0x164
c001fba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fba4:	e8 63 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fba9:	83 c4 10             	add    esp,0x10
c001fbac:	83 c4 0c             	add    esp,0xc
c001fbaf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fbb0 <ATA::~ATA()>:
c001fbb0:	83 ec 0c             	sub    esp,0xc
c001fbb3:	ba a8 2b 02 c0       	mov    edx,0xc0022ba8
c001fbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbbc:	89 10                	mov    DWORD PTR [eax],edx
c001fbbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc2:	83 ec 0c             	sub    esp,0xc
c001fbc5:	50                   	push   eax
c001fbc6:	e8 77 ce fe ff       	call   c000ca42 <PhysicalDisk::~PhysicalDisk()>
c001fbcb:	83 c4 10             	add    esp,0x10
c001fbce:	90                   	nop
c001fbcf:	83 c4 0c             	add    esp,0xc
c001fbd2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fbd4 <ATA::~ATA()>:
c001fbd4:	83 ec 0c             	sub    esp,0xc
c001fbd7:	83 ec 0c             	sub    esp,0xc
c001fbda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbde:	e8 cd ff ff ff       	call   c001fbb0 <ATA::~ATA()>
c001fbe3:	83 c4 10             	add    esp,0x10
c001fbe6:	83 ec 08             	sub    esp,0x8
c001fbe9:	68 7c 01 00 00       	push   0x17c
c001fbee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbf2:	e8 15 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fbf7:	83 c4 10             	add    esp,0x10
c001fbfa:	83 c4 0c             	add    esp,0xc
c001fbfd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fbfe <ATAPI::~ATAPI()>:
c001fbfe:	83 ec 0c             	sub    esp,0xc
c001fc01:	ba f0 2b 02 c0       	mov    edx,0xc0022bf0
c001fc06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0a:	89 10                	mov    DWORD PTR [eax],edx
c001fc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc10:	83 ec 0c             	sub    esp,0xc
c001fc13:	50                   	push   eax
c001fc14:	e8 29 ce fe ff       	call   c000ca42 <PhysicalDisk::~PhysicalDisk()>
c001fc19:	83 c4 10             	add    esp,0x10
c001fc1c:	90                   	nop
c001fc1d:	83 c4 0c             	add    esp,0xc
c001fc20:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fc22 <ATAPI::~ATAPI()>:
c001fc22:	83 ec 0c             	sub    esp,0xc
c001fc25:	83 ec 0c             	sub    esp,0xc
c001fc28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc2c:	e8 cd ff ff ff       	call   c001fbfe <ATAPI::~ATAPI()>
c001fc31:	83 c4 10             	add    esp,0x10
c001fc34:	83 ec 08             	sub    esp,0x8
c001fc37:	68 84 01 00 00       	push   0x184
c001fc3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc40:	e8 c7 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc45:	83 c4 10             	add    esp,0x10
c001fc48:	83 c4 0c             	add    esp,0xc
c001fc4b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fc4c <SATA::~SATA()>:
c001fc4c:	83 ec 0c             	sub    esp,0xc
c001fc4f:	ba a4 2c 02 c0       	mov    edx,0xc0022ca4
c001fc54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc58:	89 10                	mov    DWORD PTR [eax],edx
c001fc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5e:	83 ec 0c             	sub    esp,0xc
c001fc61:	50                   	push   eax
c001fc62:	e8 db cd fe ff       	call   c000ca42 <PhysicalDisk::~PhysicalDisk()>
c001fc67:	83 c4 10             	add    esp,0x10
c001fc6a:	90                   	nop
c001fc6b:	83 c4 0c             	add    esp,0xc
c001fc6e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fc70 <SATA::~SATA()>:
c001fc70:	83 ec 0c             	sub    esp,0xc
c001fc73:	83 ec 0c             	sub    esp,0xc
c001fc76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc7a:	e8 cd ff ff ff       	call   c001fc4c <SATA::~SATA()>
c001fc7f:	83 c4 10             	add    esp,0x10
c001fc82:	83 ec 08             	sub    esp,0x8
c001fc85:	68 7c 01 00 00       	push   0x17c
c001fc8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc8e:	e8 79 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc93:	83 c4 10             	add    esp,0x10
c001fc96:	83 c4 0c             	add    esp,0xc
c001fc99:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fc9a <SATAPI::~SATAPI()>:
c001fc9a:	83 ec 0c             	sub    esp,0xc
c001fc9d:	ba c8 2d 02 c0       	mov    edx,0xc0022dc8
c001fca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca6:	89 10                	mov    DWORD PTR [eax],edx
c001fca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcac:	83 ec 0c             	sub    esp,0xc
c001fcaf:	50                   	push   eax
c001fcb0:	e8 8d cd fe ff       	call   c000ca42 <PhysicalDisk::~PhysicalDisk()>
c001fcb5:	83 c4 10             	add    esp,0x10
c001fcb8:	90                   	nop
c001fcb9:	83 c4 0c             	add    esp,0xc
c001fcbc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fcbe <SATAPI::~SATAPI()>:
c001fcbe:	83 ec 0c             	sub    esp,0xc
c001fcc1:	83 ec 0c             	sub    esp,0xc
c001fcc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc8:	e8 cd ff ff ff       	call   c001fc9a <SATAPI::~SATAPI()>
c001fccd:	83 c4 10             	add    esp,0x10
c001fcd0:	83 ec 08             	sub    esp,0x8
c001fcd3:	68 84 01 00 00       	push   0x184
c001fcd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcdc:	e8 2b ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fce1:	83 c4 10             	add    esp,0x10
c001fce4:	83 c4 0c             	add    esp,0xc
c001fce7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fce8 <IOAPIC::~IOAPIC()>:
c001fce8:	83 ec 0c             	sub    esp,0xc
c001fceb:	ba 08 2e 02 c0       	mov    edx,0xc0022e08
c001fcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf4:	89 10                	mov    DWORD PTR [eax],edx
c001fcf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfa:	83 ec 0c             	sub    esp,0xc
c001fcfd:	50                   	push   eax
c001fcfe:	e8 e3 c7 fe ff       	call   c000c4e6 <Device::~Device()>
c001fd03:	83 c4 10             	add    esp,0x10
c001fd06:	90                   	nop
c001fd07:	83 c4 0c             	add    esp,0xc
c001fd0a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fd0c <IOAPIC::~IOAPIC()>:
c001fd0c:	83 ec 0c             	sub    esp,0xc
c001fd0f:	83 ec 0c             	sub    esp,0xc
c001fd12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd16:	e8 cd ff ff ff       	call   c001fce8 <IOAPIC::~IOAPIC()>
c001fd1b:	83 c4 10             	add    esp,0x10
c001fd1e:	83 ec 08             	sub    esp,0x8
c001fd21:	68 68 01 00 00       	push   0x168
c001fd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd2a:	e8 dd aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd2f:	83 c4 10             	add    esp,0x10
c001fd32:	83 c4 0c             	add    esp,0xc
c001fd35:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fd38 <APICTimer::~APICTimer()>:
c001fd38:	83 ec 0c             	sub    esp,0xc
c001fd3b:	ba 50 2e 02 c0       	mov    edx,0xc0022e50
c001fd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd44:	89 10                	mov    DWORD PTR [eax],edx
c001fd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4a:	83 ec 0c             	sub    esp,0xc
c001fd4d:	50                   	push   eax
c001fd4e:	e8 69 e2 fe ff       	call   c000dfbc <Timer::~Timer()>
c001fd53:	83 c4 10             	add    esp,0x10
c001fd56:	90                   	nop
c001fd57:	83 c4 0c             	add    esp,0xc
c001fd5a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fd5c <APICTimer::~APICTimer()>:
c001fd5c:	83 ec 0c             	sub    esp,0xc
c001fd5f:	83 ec 0c             	sub    esp,0xc
c001fd62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd66:	e8 cd ff ff ff       	call   c001fd38 <APICTimer::~APICTimer()>
c001fd6b:	83 c4 10             	add    esp,0x10
c001fd6e:	83 ec 08             	sub    esp,0x8
c001fd71:	68 60 01 00 00       	push   0x160
c001fd76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd7a:	e8 8d aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd7f:	83 c4 10             	add    esp,0x10
c001fd82:	83 c4 0c             	add    esp,0xc
c001fd85:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fd88 <PIT::~PIT()>:
c001fd88:	83 ec 0c             	sub    esp,0xc
c001fd8b:	ba a0 2e 02 c0       	mov    edx,0xc0022ea0
c001fd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd94:	89 10                	mov    DWORD PTR [eax],edx
c001fd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9a:	83 ec 0c             	sub    esp,0xc
c001fd9d:	50                   	push   eax
c001fd9e:	e8 19 e2 fe ff       	call   c000dfbc <Timer::~Timer()>
c001fda3:	83 c4 10             	add    esp,0x10
c001fda6:	90                   	nop
c001fda7:	83 c4 0c             	add    esp,0xc
c001fdaa:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fdac <PIT::~PIT()>:
c001fdac:	83 ec 0c             	sub    esp,0xc
c001fdaf:	83 ec 0c             	sub    esp,0xc
c001fdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb6:	e8 cd ff ff ff       	call   c001fd88 <PIT::~PIT()>
c001fdbb:	83 c4 10             	add    esp,0x10
c001fdbe:	83 ec 08             	sub    esp,0x8
c001fdc1:	68 5c 01 00 00       	push   0x15c
c001fdc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdca:	e8 3d aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fdcf:	83 c4 10             	add    esp,0x10
c001fdd2:	83 c4 0c             	add    esp,0xc
c001fdd5:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be b2 1c 02 c0       	mov    esi,0xc0021cb2
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be ce 1c 02 c0       	mov    esi,0xc0021cce
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
