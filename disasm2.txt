
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 2d 7b 00 00       	call   c0007b4d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 04 43 02 c0       	mov    eax,0xc0024304
c0000025:	3d 04 43 02 c0       	cmp    eax,0xc0024304
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 04 43 02 c0       	push   0xc0024304
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 04 43 02 c0       	mov    eax,0xc0024304
c0000051:	2d 04 43 02 c0       	sub    eax,0xc0024304
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 04 43 02 c0       	push   0xc0024304
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 9c 04 02 c0       	mov    ebx,0xc002049c
c0000097:	81 eb 98 04 02 c0    	sub    ebx,0xc0020498
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 98 04 02 c0       	mov    esi,0xc0020498
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 04 43 02 c0       	push   0xc0024304
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 04 43 02 c0       	push   0xc0024304
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 97 56 01 00       	call   c0015944 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 1c a4 00 00       	call   c000a6e1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 75 56 01 00       	call   c0015944 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 82 5b 01 00       	call   c0015e70 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 1d 62 01 00       	call   c0016514 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 4b 12 01 00       	jmp    c00115ca <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 a0 04 02 c0 02 	test   BYTE PTR [edx-0x3ffdfb60],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 a0 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb60],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 a0 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb60],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 a0 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb60],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 a0 04 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfb60],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 a0 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb60],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 c3 6a 00 00       	call   c00079c8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 1e 6a 00 00       	call   c00079c8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 08 6a 00 00       	call   c00079c8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 06 69 00 00       	call   c00079c8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00011af:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001206:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c000124f:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c000126a:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001324:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000132a:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001331:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013f7:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013fd:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001404:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001552:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 a4 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa5c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 06 7d 01 00       	jmp    c0019ae0 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 30 7d 01 00       	jmp    c0019b20 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 51 7d 01 00       	jmp    c0019b60 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 00 07 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf900]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 00 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf900]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 18 2f 02 c0       	mov    edx,0xc0022f18
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba bc 05 02 c0       	mov    edx,0xc00205bc
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 c2 05 02 c0       	mov    eax,0xc00205c2
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 80 06 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf980]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 cb 05 02 c0       	mov    eax,0xc00205cb
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 00 07 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf900]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 50 06 02 c0       	mov    eax,0xc0020650
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 40 06 02 c0       	mov    ebx,0xc0020640
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 20 06 02 c0       	mov    eax,0xc0020620
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 30 06 02 c0       	mov    eax,0xc0020630
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba d2 05 02 c0       	mov    edx,0xc00205d2
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba de 05 02 c0       	mov    edx,0xc00205de
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba f2 05 02 c0       	mov    edx,0xc00205f2
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 90 1e 00 00       	call   c0007af3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 88 1e 00 00       	call   c0007b03 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 20 0a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020a20
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 20 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a20
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 20 08 02 c0       	mov    eax,0xc0020820
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 60 07 02 c0       	mov    eax,0xc0020760
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 20 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf8e0]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 20 0b 02 c0       	push   0xc0020b20
c0006147:	e8 38 43 01 00       	call   c001a484 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 2e 0b 02 c0       	push   0xc0020b2e
c000617f:	e8 00 43 01 00       	call   c001a484 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 69 42 01 00       	call   c001a428 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 3d 0b 02 c0       	push   0xc0020b3d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000657b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006585:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000659d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006616:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c00066ad:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c000670f:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000674c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c000680c:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 40 0b 02 c0       	push   0xc0020b40
c000682f:	e8 50 3c 01 00       	call   c001a484 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 5e 3c 01 00       	call   c001a4a0 <iso_kprintfd>
c0006842:	c7 04 24 45 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b45
c0006849:	e8 36 3c 01 00       	call   c001a484 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006855:	e8 46 3c 01 00       	call   c001a4a0 <iso_kprintfd>
c000685a:	c7 04 24 4b 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b4b
c0006861:	e8 1e 3c 01 00       	call   c001a484 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c000686d:	e8 2e 3c 01 00       	call   c001a4a0 <iso_kprintfd>
c0006872:	c7 04 24 51 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b51
c0006879:	e8 06 3c 01 00       	call   c001a484 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006885:	e8 16 3c 01 00       	call   c001a4a0 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068eb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 3d 0b 02 c0       	push   0xc0020b3d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a2a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a30:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 5a 0b 02 c0       	push   0xc0020b5a
c0006a52:	e8 2d 3a 01 00       	call   c001a484 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a87:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 65 0b 02 c0       	push   0xc0020b65
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 6c 0b 02 c0       	push   0xc0020b6c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b25:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b48:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 73 0b 02 c0       	push   0xc0020b73
c0006b69:	e8 16 39 01 00       	call   c001a484 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 7e 0b 02 c0       	push   0xc0020b7e
c0006b84:	e8 fb 38 01 00       	call   c001a484 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 65 02 c0       	push   0xc0026540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 40 0f 00 00       	call   c0007af3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006bbf:	e8 2f 0f 00 00       	call   c0007af3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 1a 0f 00 00       	call   c0007af3 <malloc>
c0006bd9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 01 0f 00 00       	call   c0007af3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006c1f:	e8 df 0e 00 00       	call   c0007b03 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 d1 0e 00 00       	call   c0007b03 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 b7 0e 00 00       	call   c0007b03 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 a2 0e 00 00       	call   c0007b03 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	83 ec 0c             	sub    esp,0xc
c0006c8a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0006c8e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006c92:	68 8f 0b 02 c0       	push   0xc0020b8f
c0006c97:	e8 8e 3c 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0006c9c:	e8 61 a1 00 00       	call   c0010e02 <KeExecuteAtexit()>
c0006ca1:	c7 04 24 9d 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b9d
c0006ca8:	e8 7d 3c 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0006cad:	8b 93 68 01 00 00    	mov    edx,DWORD PTR [ebx+0x168]
c0006cb3:	58                   	pop    eax
c0006cb4:	52                   	push   edx
c0006cb5:	e8 24 5e 00 00       	call   c000cade <Device::closeAll()>
c0006cba:	c7 04 24 aa 0b 02 c0 	mov    DWORD PTR [esp],0xc0020baa
c0006cc1:	e8 64 3c 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0006cc6:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ccc:	83 c4 10             	add    esp,0x10
c0006ccf:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cd1:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cd5:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cdd:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006ce1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ce5:	5b                   	pop    ebx
c0006ce6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ce9:	5e                   	pop    esi
c0006cea:	5f                   	pop    edi
c0006ceb:	ff e0                	jmp    eax

c0006ced <Krnl::firstTask()>:
c0006ced:	53                   	push   ebx
c0006cee:	83 ec 14             	sub    esp,0x14
c0006cf1:	fb                   	sti    
c0006cf2:	68 b9 0b 02 c0       	push   0xc0020bb9
c0006cf7:	e8 e5 a1 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c0006cfc:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006d03:	e8 eb 0d 00 00       	call   c0007af3 <malloc>
c0006d08:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006d0f:	89 c3                	mov    ebx,eax
c0006d11:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006d16:	50                   	push   eax
c0006d17:	68 d2 0b 02 c0       	push   0xc0020bd2
c0006d1c:	6a 01                	push   0x1
c0006d1e:	53                   	push   ebx
c0006d1f:	e8 78 ef 00 00       	call   c0015c9c <Process::Process(bool, char const*, Process*, char**)>
c0006d24:	83 c4 20             	add    esp,0x20
c0006d27:	68 ff 00 00 00       	push   0xff
c0006d2c:	6a 00                	push   0x0
c0006d2e:	68 3f 75 00 c0       	push   0xc000753f
c0006d33:	53                   	push   ebx
c0006d34:	e8 87 f1 00 00       	call   c0015ec0 <Process::createThread(void (*)(void*), void*, int)>
c0006d39:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d3f:	6a 7a                	push   0x7a
c0006d41:	6a 00                	push   0x0
c0006d43:	68 84 69 01 c0       	push   0xc0016984
c0006d48:	52                   	push   edx
c0006d49:	e8 72 f1 00 00       	call   c0015ec0 <Process::createThread(void (*)(void*), void*, int)>
c0006d4e:	83 c4 14             	add    esp,0x14
c0006d51:	68 d0 0c 02 c0       	push   0xc0020cd0
c0006d56:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d5b:	e8 81 a1 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c0006d60:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d67:	e8 2a aa 00 00       	call   c0011796 <KeInitRand()>
c0006d6c:	e8 36 00 01 00       	call   c0016da7 <Vm::initialise8086()>
c0006d71:	e8 96 4a 00 00       	call   c000b80c <Fs::initVFS()>
c0006d76:	c7 04 24 df 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bdf
c0006d7d:	e8 5f a1 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c0006d82:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d87:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d8f:	6a 00                	push   0x0
c0006d91:	6a 00                	push   0x0
c0006d93:	6a 00                	push   0x0
c0006d95:	50                   	push   eax
c0006d96:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d99:	83 c4 14             	add    esp,0x14
c0006d9c:	68 d0 0c 02 c0       	push   0xc0020cd0
c0006da1:	e8 3b a1 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c0006da6:	e8 fb 41 00 00       	call   c000afa6 <KeInitialiseSymlinks()>
c0006dab:	e8 92 a6 00 00       	call   c0011442 <KeLoadSystemEnv()>
c0006db0:	e8 ef a8 00 00       	call   c00116a4 <KeSetupPowerManager()>
c0006db5:	83 c4 0c             	add    esp,0xc
c0006db8:	6a 3a                	push   0x3a
c0006dba:	68 f9 0b 02 c0       	push   0xc0020bf9
c0006dbf:	68 02 0c 02 c0       	push   0xc0020c02
c0006dc4:	e8 91 d0 00 00       	call   c0013e5a <Reg::readIntWithDefault(char*, char*, int)>
c0006dc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0006dcc:	e8 67 56 00 00       	call   c000c438 <User::loadClockSettings(int)>
c0006dd1:	c7 04 24 f4 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cf4
c0006dd8:	e8 04 a1 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c0006ddd:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006de2:	59                   	pop    ecx
c0006de3:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006de9:	53                   	push   ebx
c0006dea:	e8 ed 5c 00 00       	call   c000cadc <Device::loadDriversForAll()>
c0006def:	c7 04 24 0a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c0a
c0006df6:	e8 e6 a0 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c0006dfb:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006e01:	58                   	pop    eax
c0006e02:	5a                   	pop    edx
c0006e03:	6a 01                	push   0x1
c0006e05:	68 1b 0c 02 c0       	push   0xc0020c1b
c0006e0a:	e8 94 e8 00 00       	call   c00156a3 <Thr::loadDLL(char const*, bool)>
c0006e0f:	59                   	pop    ecx
c0006e10:	5a                   	pop    edx
c0006e11:	53                   	push   ebx
c0006e12:	50                   	push   eax
c0006e13:	e8 cb ea 00 00       	call   c00158e3 <Thr::executeDLL(unsigned long, void*)>
c0006e18:	83 c4 10             	add    esp,0x10
c0006e1b:	83 ec 0c             	sub    esp,0xc
c0006e1e:	6a 02                	push   0x2
c0006e20:	e8 e7 f4 00 00       	call   c001630c <blockTask(TaskState)>
c0006e25:	83 c4 10             	add    esp,0x10
c0006e28:	eb f1                	jmp    c0006e1b <Krnl::firstTask()+0x12e>

c0006e2a <Computer::Computer()>:
c0006e2a:	83 ec 0c             	sub    esp,0xc
c0006e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e31:	83 ec 08             	sub    esp,0x8
c0006e34:	68 37 0c 02 c0       	push   0xc0020c37
c0006e39:	50                   	push   eax
c0006e3a:	e8 19 5d 00 00       	call   c000cb58 <Device::Device(char const*)>
c0006e3f:	83 c4 10             	add    esp,0x10
c0006e42:	ba 40 0d 02 c0       	mov    edx,0xc0020d40
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	89 10                	mov    DWORD PTR [eax],edx
c0006e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e51:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e73:	83 ca 04             	or     edx,0x4
c0006e76:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e80:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e86:	0f b6 d0             	movzx  edx,al
c0006e89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e98:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e9e:	0f b6 d0             	movzx  edx,al
c0006ea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006eb4:	8d 50 01             	lea    edx,[eax+0x1]
c0006eb7:	88 d1                	mov    cl,dl
c0006eb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ebd:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ec3:	0f b6 d0             	movzx  edx,al
c0006ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eca:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006ece:	83 e1 3f             	and    ecx,0x3f
c0006ed1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006ed5:	90                   	nop
c0006ed6:	83 c4 0c             	add    esp,0xc
c0006ed9:	c3                   	ret    

c0006eda <Computer::setBootMessage(char const*)>:
c0006eda:	c3                   	ret    
c0006edb:	90                   	nop

c0006edc <Computer::detectFeatures()>:
c0006edc:	55                   	push   ebp
c0006edd:	57                   	push   edi
c0006ede:	56                   	push   esi
c0006edf:	53                   	push   ebx
c0006ee0:	83 ec 1c             	sub    esp,0x1c
c0006ee3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ee7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006eed:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ef3:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ef9:	e8 fb 92 ff ff       	call   c00001f9 <detectCPUID>
c0006efe:	31 d2                	xor    edx,edx
c0006f00:	85 c0                	test   eax,eax
c0006f02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f08:	0f 95 c2             	setne  dl
c0006f0b:	d1 e2                	shl    edx,1
c0006f0d:	83 e0 fd             	and    eax,0xfffffffd
c0006f10:	09 d0                	or     eax,edx
c0006f12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f18:	a8 02                	test   al,0x2
c0006f1a:	75 51                	jne    c0006f6d <Computer::detectFeatures()+0x91>
c0006f1c:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f23:	74 0f                	je     c0006f34 <Computer::detectFeatures()+0x58>
c0006f25:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f2b:	83 e0 fb             	and    eax,0xfffffffb
c0006f2e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f34:	e8 5d 85 01 00       	call   c001f496 <x87Detect>
c0006f39:	83 e0 01             	and    eax,0x1
c0006f3c:	c1 e0 04             	shl    eax,0x4
c0006f3f:	89 c2                	mov    edx,eax
c0006f41:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f47:	83 e0 ef             	and    eax,0xffffffef
c0006f4a:	09 d0                	or     eax,edx
c0006f4c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f52:	a8 10                	test   al,0x10
c0006f54:	88 c2                	mov    dl,al
c0006f56:	0f 85 33 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1b3>
c0006f5c:	80 e2 80             	and    dl,0x80
c0006f5f:	0f 85 4c 01 00 00    	jne    c00070b1 <Computer::detectFeatures()+0x1d5>
c0006f65:	83 c4 1c             	add    esp,0x1c
c0006f68:	5b                   	pop    ebx
c0006f69:	5e                   	pop    esi
c0006f6a:	5f                   	pop    edi
c0006f6b:	5d                   	pop    ebp
c0006f6c:	c3                   	ret    
c0006f6d:	83 ec 0c             	sub    esp,0xc
c0006f70:	6a 20                	push   0x20
c0006f72:	e8 a3 93 00 00       	call   c001031a <CPU::cpuidCheckEDX(unsigned int)>
c0006f77:	83 e0 01             	and    eax,0x1
c0006f7a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f81:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f87:	83 e0 f7             	and    eax,0xfffffff7
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f92:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f99:	e8 7c 93 00 00       	call   c001031a <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	83 e2 01             	and    edx,0x1
c0006fa9:	83 e0 fe             	and    eax,0xfffffffe
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006fbb:	e8 5a 93 00 00       	call   c001031a <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	89 c2                	mov    edx,eax
c0006fc2:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fc8:	c1 e2 07             	shl    edx,0x7
c0006fcb:	83 e0 7f             	and    eax,0x7f
c0006fce:	09 d0                	or     eax,edx
c0006fd0:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fd6:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fdd:	e8 38 93 00 00       	call   c001031a <CPU::cpuidCheckEDX(unsigned int)>
c0006fe2:	83 c4 10             	add    esp,0x10
c0006fe5:	83 e0 01             	and    eax,0x1
c0006fe8:	c1 e0 05             	shl    eax,0x5
c0006feb:	89 c2                	mov    edx,eax
c0006fed:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ff3:	83 e0 df             	and    eax,0xffffffdf
c0006ff6:	09 d0                	or     eax,edx
c0006ff8:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0007002:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007008:	0f 84 c9 00 00 00    	je     c00070d7 <Computer::detectFeatures()+0x1fb>
c000700e:	83 e0 fe             	and    eax,0xfffffffe
c0007011:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007017:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000701d:	89 c2                	mov    edx,eax
c000701f:	83 e2 09             	and    edx,0x9
c0007022:	83 fa 01             	cmp    edx,0x1
c0007025:	75 09                	jne    c0007030 <Computer::detectFeatures()+0x154>
c0007027:	83 e0 fe             	and    eax,0xfffffffe
c000702a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007030:	83 ec 0c             	sub    esp,0xc
c0007033:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007037:	50                   	push   eax
c0007038:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000703c:	55                   	push   ebp
c000703d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007041:	57                   	push   edi
c0007042:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007046:	56                   	push   esi
c0007047:	68 00 00 00 80       	push   0x80000000
c000704c:	e8 45 92 00 00       	call   c0010296 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007051:	83 c4 20             	add    esp,0x20
c0007054:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000705b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000705f:	0f 86 b7 fe ff ff    	jbe    c0006f1c <Computer::detectFeatures()+0x40>
c0007065:	83 ec 0c             	sub    esp,0xc
c0007068:	50                   	push   eax
c0007069:	55                   	push   ebp
c000706a:	57                   	push   edi
c000706b:	56                   	push   esi
c000706c:	68 01 00 00 80       	push   0x80000001
c0007071:	e8 20 92 00 00       	call   c0010296 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007076:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000707c:	83 c4 20             	add    esp,0x20
c000707f:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007084:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000708a:	e9 8d fe ff ff       	jmp    c0006f1c <Computer::detectFeatures()+0x40>
c000708f:	e8 bc 83 01 00       	call   c001f450 <absolutelyNoChanceInHell>
c0007094:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c000709a:	83 e2 7f             	and    edx,0x7f
c000709d:	c1 e0 07             	shl    eax,0x7
c00070a0:	09 c2                	or     edx,eax
c00070a2:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c00070a8:	80 e2 80             	and    dl,0x80
c00070ab:	0f 84 b4 fe ff ff    	je     c0006f65 <Computer::detectFeatures()+0x89>
c00070b1:	e8 0a 80 01 00       	call   c001f0c0 <avxDetect>
c00070b6:	83 e0 01             	and    eax,0x1
c00070b9:	c1 e0 05             	shl    eax,0x5
c00070bc:	89 c2                	mov    edx,eax
c00070be:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070c4:	83 e0 df             	and    eax,0xffffffdf
c00070c7:	09 d0                	or     eax,edx
c00070c9:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070cf:	83 c4 1c             	add    esp,0x1c
c00070d2:	5b                   	pop    ebx
c00070d3:	5e                   	pop    esi
c00070d4:	5f                   	pop    edi
c00070d5:	5d                   	pop    ebp
c00070d6:	c3                   	ret    
c00070d7:	83 ec 0c             	sub    esp,0xc
c00070da:	68 00 02 00 00       	push   0x200
c00070df:	e8 36 92 00 00       	call   c001031a <CPU::cpuidCheckEDX(unsigned int)>
c00070e4:	83 c4 10             	add    esp,0x10
c00070e7:	89 c2                	mov    edx,eax
c00070e9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ef:	83 e2 01             	and    edx,0x1
c00070f2:	83 e0 fe             	and    eax,0xfffffffe
c00070f5:	09 d0                	or     eax,edx
c00070f7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070fd:	e9 15 ff ff ff       	jmp    c0007017 <Computer::detectFeatures()+0x13b>

c0007102 <Computer::displayFeatures()>:
c0007102:	c3                   	ret    
c0007103:	90                   	nop

c0007104 <Computer::rdmsr(unsigned int)>:
c0007104:	83 ec 0c             	sub    esp,0xc
c0007107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000710b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007112:	74 0a                	je     c000711e <Computer::rdmsr(unsigned int)+0x1a>
c0007114:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007118:	0f 32                	rdmsr  
c000711a:	83 c4 0c             	add    esp,0xc
c000711d:	c3                   	ret    
c000711e:	83 ec 0c             	sub    esp,0xc
c0007121:	68 40 0c 02 c0       	push   0xc0020c40
c0007126:	e8 b4 a4 00 00       	call   c00115df <KePanic(char const*)>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	eb e4                	jmp    c0007114 <Computer::rdmsr(unsigned int)+0x10>

c0007130 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007130:	57                   	push   edi
c0007131:	56                   	push   esi
c0007132:	83 ec 04             	sub    esp,0x4
c0007135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007139:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000713d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007141:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007148:	74 10                	je     c000715a <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c000714a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000714e:	89 f0                	mov    eax,esi
c0007150:	89 fa                	mov    edx,edi
c0007152:	0f 30                	wrmsr  
c0007154:	83 c4 04             	add    esp,0x4
c0007157:	5e                   	pop    esi
c0007158:	5f                   	pop    edi
c0007159:	c3                   	ret    
c000715a:	83 ec 0c             	sub    esp,0xc
c000715d:	68 46 0c 02 c0       	push   0xc0020c46
c0007162:	e8 78 a4 00 00       	call   c00115df <KePanic(char const*)>
c0007167:	83 c4 10             	add    esp,0x10
c000716a:	eb de                	jmp    c000714a <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000716c <Computer::shutdown()>:
c000716c:	83 ec 0c             	sub    esp,0xc
c000716f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007173:	8b 10                	mov    edx,DWORD PTR [eax]
c0007175:	6a 00                	push   0x0
c0007177:	6a 00                	push   0x0
c0007179:	6a 00                	push   0x0
c000717b:	50                   	push   eax
c000717c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000717f:	83 c4 1c             	add    esp,0x1c
c0007182:	c3                   	ret    
c0007183:	90                   	nop

c0007184 <Computer::restart()>:
c0007184:	83 ec 0c             	sub    esp,0xc
c0007187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000718b:	8b 10                	mov    edx,DWORD PTR [eax]
c000718d:	6a 00                	push   0x0
c000718f:	6a 00                	push   0x0
c0007191:	6a 01                	push   0x1
c0007193:	50                   	push   eax
c0007194:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007197:	83 c4 1c             	add    esp,0x1c
c000719a:	c3                   	ret    
c000719b:	90                   	nop

c000719c <Computer::sleep()>:
c000719c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071a0:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00071a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00071aa:	e9 3d 8c 00 00       	jmp    c000fdec <ACPI::sleep()>
c00071af:	90                   	nop

c00071b0 <Computer::nmiEnabled()>:
c00071b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071b4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c00071ba:	c3                   	ret    
c00071bb:	90                   	nop

c00071bc <Computer::readCMOS(unsigned char)>:
c00071bc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00071c0:	31 d2                	xor    edx,edx
c00071c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071c6:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071cd:	75 02                	jne    c00071d1 <Computer::readCMOS(unsigned char)+0x15>
c00071cf:	b2 80                	mov    dl,0x80
c00071d1:	09 d0                	or     eax,edx
c00071d3:	e6 70                	out    0x70,al
c00071d5:	e4 71                	in     al,0x71
c00071d7:	c3                   	ret    

c00071d8 <Computer::enableNMI(bool)>:
c00071d8:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071e0:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071e6:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ee:	eb cc                	jmp    c00071bc <Computer::readCMOS(unsigned char)>

c00071f0 <Computer::open(int, int, void*)>:
c00071f0:	56                   	push   esi
c00071f1:	53                   	push   ebx
c00071f2:	83 ec 10             	sub    esp,0x10
c00071f5:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007200:	68 4c 0c 02 c0       	push   0xc0020c4c
c0007205:	0f 94 05 60 37 02 c0 	sete   BYTE PTR ds:0xc0023760
c000720c:	e8 d0 9c 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c0007211:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0007218:	e8 d6 08 00 00       	call   c0007af3 <malloc>
c000721d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007220:	89 c6                	mov    esi,eax
c0007222:	e8 39 87 00 00       	call   c000f960 <ACPI::ACPI()>
c0007227:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000722d:	58                   	pop    eax
c000722e:	5a                   	pop    edx
c000722f:	56                   	push   esi
c0007230:	53                   	push   ebx
c0007231:	e8 8a 57 00 00       	call   c000c9c0 <Device::addChild(Device*)>
c0007236:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007239:	e8 9e fc ff ff       	call   c0006edc <Computer::detectFeatures()>
c000723e:	59                   	pop    ecx
c000723f:	5e                   	pop    esi
c0007240:	6a 01                	push   0x1
c0007242:	53                   	push   ebx
c0007243:	e8 90 ff ff ff       	call   c00071d8 <Computer::enableNMI(bool)>
c0007248:	c7 04 24 64 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c64
c000724f:	e8 8d 9c 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c0007254:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000725b:	e8 93 08 00 00       	call   c0007af3 <malloc>
c0007260:	89 04 24             	mov    DWORD PTR [esp],eax
c0007263:	89 c6                	mov    esi,eax
c0007265:	e8 68 91 00 00       	call   c00103d2 <CPU::CPU()>
c000726a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007270:	58                   	pop    eax
c0007271:	5a                   	pop    edx
c0007272:	56                   	push   esi
c0007273:	53                   	push   ebx
c0007274:	e8 47 57 00 00       	call   c000c9c0 <Device::addChild(Device*)>
c0007279:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000727f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007283:	8b 10                	mov    edx,DWORD PTR [eax]
c0007285:	51                   	push   ecx
c0007286:	6a 00                	push   0x0
c0007288:	6a 00                	push   0x0
c000728a:	50                   	push   eax
c000728b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000728e:	83 c4 14             	add    esp,0x14
c0007291:	68 14 0d 02 c0       	push   0xc0020d14
c0007296:	e8 46 9c 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c000729b:	e8 4e 0d 01 00       	call   c0017fee <HalInitialiseCoprocessor()>
c00072a0:	c7 04 24 7e 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c7e
c00072a7:	e8 35 9c 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c00072ac:	c7 04 24 ed 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ced
c00072b3:	e8 30 ed 00 00       	call   c0015fe8 <setupMultitasking(void (*)())>
c00072b8:	83 c4 14             	add    esp,0x14
c00072bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00072c0:	5b                   	pop    ebx
c00072c1:	5e                   	pop    esi
c00072c2:	c3                   	ret    
c00072c3:	90                   	nop

c00072c4 <Computer::disableNMI()>:
c00072c4:	6a 00                	push   0x0
c00072c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072ca:	50                   	push   eax
c00072cb:	e8 08 ff ff ff       	call   c00071d8 <Computer::enableNMI(bool)>
c00072d0:	5a                   	pop    edx
c00072d1:	59                   	pop    ecx
c00072d2:	c3                   	ret    
c00072d3:	90                   	nop

c00072d4 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072d4:	53                   	push   ebx
c00072d5:	b2 80                	mov    dl,0x80
c00072d7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072e3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072ea:	74 02                	je     c00072ee <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ec:	31 d2                	xor    edx,edx
c00072ee:	09 d0                	or     eax,edx
c00072f0:	e6 70                	out    0x70,al
c00072f2:	88 c8                	mov    al,cl
c00072f4:	e6 71                	out    0x71,al
c00072f6:	5b                   	pop    ebx
c00072f7:	c3                   	ret    

c00072f8 <Computer::handleNMI()>:
c00072f8:	56                   	push   esi
c00072f9:	53                   	push   ebx
c00072fa:	83 ec 10             	sub    esp,0x10
c00072fd:	e4 92                	in     al,0x92
c00072ff:	89 c6                	mov    esi,eax
c0007301:	e4 61                	in     al,0x61
c0007303:	68 99 0c 02 c0       	push   0xc0020c99
c0007308:	88 c3                	mov    bl,al
c000730a:	e8 1b 36 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000730f:	83 c4 10             	add    esp,0x10
c0007312:	83 e6 10             	and    esi,0x10
c0007315:	75 10                	jne    c0007327 <Computer::handleNMI()+0x2f>
c0007317:	f6 c3 40             	test   bl,0x40
c000731a:	75 20                	jne    c000733c <Computer::handleNMI()+0x44>
c000731c:	80 e3 80             	and    bl,0x80
c000731f:	75 30                	jne    c0007351 <Computer::handleNMI()+0x59>
c0007321:	83 c4 04             	add    esp,0x4
c0007324:	5b                   	pop    ebx
c0007325:	5e                   	pop    esi
c0007326:	c3                   	ret    
c0007327:	83 ec 0c             	sub    esp,0xc
c000732a:	68 aa 0c 02 c0       	push   0xc0020caa
c000732f:	e8 ab a2 00 00       	call   c00115df <KePanic(char const*)>
c0007334:	83 c4 10             	add    esp,0x10
c0007337:	f6 c3 40             	test   bl,0x40
c000733a:	74 e0                	je     c000731c <Computer::handleNMI()+0x24>
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	68 b7 0c 02 c0       	push   0xc0020cb7
c0007344:	e8 96 a2 00 00       	call   c00115df <KePanic(char const*)>
c0007349:	83 c4 10             	add    esp,0x10
c000734c:	80 e3 80             	and    bl,0x80
c000734f:	74 d0                	je     c0007321 <Computer::handleNMI()+0x29>
c0007351:	c7 44 24 10 c1 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020cc1
c0007359:	83 c4 04             	add    esp,0x4
c000735c:	5b                   	pop    ebx
c000735d:	5e                   	pop    esi
c000735e:	e9 7c a2 00 00       	jmp    c00115df <KePanic(char const*)>
c0007363:	90                   	nop

c0007364 <GDTEntry::setBase(unsigned int)>:
c0007364:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007368:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000736c:	89 c1                	mov    ecx,eax
c000736e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007372:	c1 e9 10             	shr    ecx,0x10
c0007375:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007378:	c1 e8 18             	shr    eax,0x18
c000737b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000737e:	c3                   	ret    
c000737f:	90                   	nop

c0007380 <GDTEntry::setLimit(unsigned int)>:
c0007380:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007384:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007388:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000738b:	66 89 01             	mov    WORD PTR [ecx],ax
c000738e:	c1 e8 10             	shr    eax,0x10
c0007391:	83 e0 0f             	and    eax,0xf
c0007394:	83 e2 f0             	and    edx,0xfffffff0
c0007397:	09 d0                	or     eax,edx
c0007399:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000739c:	c3                   	ret    
c000739d:	90                   	nop

c000739e <GDT::GDT()>:
c000739e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073b2:	90                   	nop
c00073b3:	c3                   	ret    

c00073b4 <GDT::addEntry(GDTEntry)>:
c00073b4:	53                   	push   ebx
c00073b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00073b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00073c1:	8b 02                	mov    eax,DWORD PTR [edx]
c00073c3:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00073ca:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ce:	c1 e0 03             	shl    eax,0x3
c00073d1:	89 0a                	mov    DWORD PTR [edx],ecx
c00073d3:	5b                   	pop    ebx
c00073d4:	c3                   	ret    
c00073d5:	90                   	nop

c00073d6 <GDT::getNumberOfEntries()>:
c00073d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073da:	8b 00                	mov    eax,DWORD PTR [eax]
c00073dc:	c3                   	ret    
c00073dd:	90                   	nop

c00073de <GDT::flush()>:
c00073de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00073e4:	83 c0 04             	add    eax,0x4
c00073e7:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073ec:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073f3:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073fa:	e9 5b 8f ff ff       	jmp    c000035a <loadGDT>
c00073ff:	90                   	nop

c0007400 <GDT::setup()>:
c0007400:	57                   	push   edi
c0007401:	56                   	push   esi
c0007402:	53                   	push   ebx
c0007403:	83 ec 30             	sub    esp,0x30
c0007406:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000740a:	6a 00                	push   0x0
c000740c:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007410:	56                   	push   esi
c0007411:	e8 4e ff ff ff       	call   c0007364 <GDTEntry::setBase(unsigned int)>
c0007416:	6a 00                	push   0x0
c0007418:	56                   	push   esi
c0007419:	e8 62 ff ff ff       	call   c0007380 <GDTEntry::setLimit(unsigned int)>
c000741e:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007426:	6a 00                	push   0x0
c0007428:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000742c:	56                   	push   esi
c000742d:	e8 32 ff ff ff       	call   c0007364 <GDTEntry::setBase(unsigned int)>
c0007432:	68 ff ff ff 00       	push   0xffffff
c0007437:	56                   	push   esi
c0007438:	e8 43 ff ff ff       	call   c0007380 <GDTEntry::setLimit(unsigned int)>
c000743d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007441:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007445:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000744a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000744e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007453:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007457:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000745b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000745f:	89 f8                	mov    eax,edi
c0007461:	89 fa                	mov    edx,edi
c0007463:	80 e4 f7             	and    ah,0xf7
c0007466:	80 ce 60             	or     dh,0x60
c0007469:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000746d:	89 c7                	mov    edi,eax
c000746f:	80 cc 60             	or     ah,0x60
c0007472:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007476:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000747a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007482:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007486:	83 c4 20             	add    esp,0x20
c0007489:	6a 00                	push   0x0
c000748b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000748f:	50                   	push   eax
c0007490:	e8 cf fe ff ff       	call   c0007364 <GDTEntry::setBase(unsigned int)>
c0007495:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007499:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000749d:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c00074a1:	83 e0 3f             	and    eax,0x3f
c00074a4:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c00074a8:	6a 00                	push   0x0
c00074aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00074ae:	50                   	push   eax
c00074af:	e8 b0 fe ff ff       	call   c0007364 <GDTEntry::setBase(unsigned int)>
c00074b4:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c00074b8:	83 e0 3f             	and    eax,0x3f
c00074bb:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ca:	53                   	push   ebx
c00074cb:	e8 e4 fe ff ff       	call   c00073b4 <GDT::addEntry(GDTEntry)>
c00074d0:	83 c4 0c             	add    esp,0xc
c00074d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074db:	53                   	push   ebx
c00074dc:	e8 d3 fe ff ff       	call   c00073b4 <GDT::addEntry(GDTEntry)>
c00074e1:	83 c4 0c             	add    esp,0xc
c00074e4:	57                   	push   edi
c00074e5:	56                   	push   esi
c00074e6:	53                   	push   ebx
c00074e7:	e8 c8 fe ff ff       	call   c00073b4 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074f3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074f7:	53                   	push   ebx
c00074f8:	e8 b7 fe ff ff       	call   c00073b4 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007504:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007508:	53                   	push   ebx
c0007509:	e8 a6 fe ff ff       	call   c00073b4 <GDT::addEntry(GDTEntry)>
c000750e:	83 c4 0c             	add    esp,0xc
c0007511:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007515:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007519:	53                   	push   ebx
c000751a:	e8 95 fe ff ff       	call   c00073b4 <GDT::addEntry(GDTEntry)>
c000751f:	83 c4 0c             	add    esp,0xc
c0007522:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007526:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000752a:	53                   	push   ebx
c000752b:	e8 84 fe ff ff       	call   c00073b4 <GDT::addEntry(GDTEntry)>
c0007530:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007533:	e8 a6 fe ff ff       	call   c00073de <GDT::flush()>
c0007538:	83 c4 40             	add    esp,0x40
c000753b:	5b                   	pop    ebx
c000753c:	5e                   	pop    esi
c000753d:	5f                   	pop    edi
c000753e:	c3                   	ret    

c000753f <idleFunction(void*)>:
c000753f:	83 ec 0c             	sub    esp,0xc
c0007542:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007547:	48                   	dec    eax
c0007548:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000754d:	75 01                	jne    c0007550 <idleFunction(void*)+0x11>
c000754f:	fb                   	sti    
c0007550:	e8 65 07 01 00       	call   c0017cba <HalSystemIdle()>
c0007555:	e8 f8 84 01 00       	call   c001fa52 <idleCommon()>
c000755a:	eb f4                	jmp    c0007550 <idleFunction(void*)+0x11>

c000755c <IDTEntry::IDTEntry(bool)>:
c000755c:	53                   	push   ebx
c000755d:	83 ec 04             	sub    esp,0x4
c0007560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007564:	88 04 24             	mov    BYTE PTR [esp],al
c0007567:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007575:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007579:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000757d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007580:	83 e2 f0             	and    edx,0xfffffff0
c0007583:	83 ca 0e             	or     edx,0xe
c0007586:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007589:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007590:	83 e2 ef             	and    edx,0xffffffef
c0007593:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007596:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000759a:	85 c0                	test   eax,eax
c000759c:	74 06                	je     c00075a4 <IDTEntry::IDTEntry(bool)+0x48>
c000759e:	b2 03                	mov    dl,0x3
c00075a0:	eb 06                	jmp    c00075a8 <IDTEntry::IDTEntry(bool)+0x4c>
c00075a2:	66 90                	xchg   ax,ax
c00075a4:	b2 00                	mov    dl,0x0
c00075a6:	66 90                	xchg   ax,ax
c00075a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075ac:	83 e2 03             	and    edx,0x3
c00075af:	89 d3                	mov    ebx,edx
c00075b1:	c1 e3 05             	shl    ebx,0x5
c00075b4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075b7:	83 e2 9f             	and    edx,0xffffff9f
c00075ba:	88 d1                	mov    cl,dl
c00075bc:	88 da                	mov    dl,bl
c00075be:	09 ca                	or     edx,ecx
c00075c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075c7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075ca:	83 ca 80             	or     edx,0xffffff80
c00075cd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075d0:	90                   	nop
c00075d1:	83 c4 04             	add    esp,0x4
c00075d4:	5b                   	pop    ebx
c00075d5:	c3                   	ret    

c00075d6 <IDTEntry::setOffset(unsigned int)>:
c00075d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075de:	66 89 02             	mov    WORD PTR [edx],ax
c00075e1:	c1 e8 10             	shr    eax,0x10
c00075e4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075e8:	c3                   	ret    
c00075e9:	90                   	nop
c00075ea:	66 90                	xchg   ax,ax

c00075ec <IDT::IDT()>:
c00075ec:	90                   	nop
c00075ed:	c3                   	ret    

c00075ee <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075f2:	83 c0 30             	add    eax,0x30
c00075f5:	c3                   	ret    

c00075f6 <IDT::addEntry(IDTEntry, int)>:
c00075f6:	53                   	push   ebx
c00075f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007603:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007607:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000760a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000760e:	5b                   	pop    ebx
c000760f:	c3                   	ret    

c0007610 <IDT::addEntry(int, void (*)(), bool)>:
c0007610:	53                   	push   ebx
c0007611:	83 ec 10             	sub    esp,0x10
c0007614:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007619:	50                   	push   eax
c000761a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000761e:	53                   	push   ebx
c000761f:	e8 38 ff ff ff       	call   c000755c <IDTEntry::IDTEntry(bool)>
c0007624:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007628:	53                   	push   ebx
c0007629:	e8 a8 ff ff ff       	call   c00075d6 <IDTEntry::setOffset(unsigned int)>
c000762e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007632:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007636:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000763a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000763e:	e8 b3 ff ff ff       	call   c00075f6 <IDT::addEntry(IDTEntry, int)>
c0007643:	83 c4 30             	add    esp,0x30
c0007646:	5b                   	pop    ebx
c0007647:	c3                   	ret    

c0007648 <IDT::flush()>:
c0007648:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007655:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000765a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007661:	c3                   	ret    

c0007662 <IDT::setup()>:
c0007662:	57                   	push   edi
c0007663:	56                   	push   esi
c0007664:	53                   	push   ebx
c0007665:	83 ec 10             	sub    esp,0x10
c0007668:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000766c:	6a 00                	push   0x0
c000766e:	68 50 f1 01 c0       	push   0xc001f150
c0007673:	6a 00                	push   0x0
c0007675:	53                   	push   ebx
c0007676:	e8 95 ff ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c000767b:	6a 00                	push   0x0
c000767d:	68 60 f1 01 c0       	push   0xc001f160
c0007682:	6a 01                	push   0x1
c0007684:	53                   	push   ebx
c0007685:	e8 86 ff ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	6a 00                	push   0x0
c000768f:	68 6a f1 01 c0       	push   0xc001f16a
c0007694:	6a 02                	push   0x2
c0007696:	53                   	push   ebx
c0007697:	e8 74 ff ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c000769c:	6a 00                	push   0x0
c000769e:	68 74 f1 01 c0       	push   0xc001f174
c00076a3:	6a 03                	push   0x3
c00076a5:	53                   	push   ebx
c00076a6:	e8 65 ff ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00076ab:	83 c4 20             	add    esp,0x20
c00076ae:	6a 00                	push   0x0
c00076b0:	68 7e f1 01 c0       	push   0xc001f17e
c00076b5:	6a 04                	push   0x4
c00076b7:	53                   	push   ebx
c00076b8:	e8 53 ff ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00076bd:	6a 00                	push   0x0
c00076bf:	68 88 f1 01 c0       	push   0xc001f188
c00076c4:	6a 05                	push   0x5
c00076c6:	53                   	push   ebx
c00076c7:	e8 44 ff ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00076cc:	83 c4 20             	add    esp,0x20
c00076cf:	6a 00                	push   0x0
c00076d1:	68 92 f1 01 c0       	push   0xc001f192
c00076d6:	6a 06                	push   0x6
c00076d8:	53                   	push   ebx
c00076d9:	e8 32 ff ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00076de:	6a 00                	push   0x0
c00076e0:	68 9c f1 01 c0       	push   0xc001f19c
c00076e5:	6a 07                	push   0x7
c00076e7:	53                   	push   ebx
c00076e8:	e8 23 ff ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00076ed:	83 c4 20             	add    esp,0x20
c00076f0:	6a 00                	push   0x0
c00076f2:	68 a6 f1 01 c0       	push   0xc001f1a6
c00076f7:	6a 08                	push   0x8
c00076f9:	53                   	push   ebx
c00076fa:	e8 11 ff ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00076ff:	6a 00                	push   0x0
c0007701:	68 ae f1 01 c0       	push   0xc001f1ae
c0007706:	6a 09                	push   0x9
c0007708:	53                   	push   ebx
c0007709:	e8 02 ff ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c000770e:	83 c4 20             	add    esp,0x20
c0007711:	6a 00                	push   0x0
c0007713:	68 b8 f1 01 c0       	push   0xc001f1b8
c0007718:	6a 0a                	push   0xa
c000771a:	53                   	push   ebx
c000771b:	e8 f0 fe ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c0007720:	6a 00                	push   0x0
c0007722:	68 c0 f1 01 c0       	push   0xc001f1c0
c0007727:	6a 0b                	push   0xb
c0007729:	53                   	push   ebx
c000772a:	e8 e1 fe ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c000772f:	83 c4 20             	add    esp,0x20
c0007732:	6a 00                	push   0x0
c0007734:	68 c8 f1 01 c0       	push   0xc001f1c8
c0007739:	6a 0c                	push   0xc
c000773b:	53                   	push   ebx
c000773c:	e8 cf fe ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c0007741:	6a 00                	push   0x0
c0007743:	68 d0 f1 01 c0       	push   0xc001f1d0
c0007748:	6a 0d                	push   0xd
c000774a:	53                   	push   ebx
c000774b:	e8 c0 fe ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c0007750:	83 c4 20             	add    esp,0x20
c0007753:	6a 00                	push   0x0
c0007755:	68 ea f1 01 c0       	push   0xc001f1ea
c000775a:	6a 0e                	push   0xe
c000775c:	53                   	push   ebx
c000775d:	e8 ae fe ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c0007762:	6a 00                	push   0x0
c0007764:	68 f2 f1 01 c0       	push   0xc001f1f2
c0007769:	6a 0f                	push   0xf
c000776b:	53                   	push   ebx
c000776c:	e8 9f fe ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c0007771:	83 c4 20             	add    esp,0x20
c0007774:	6a 00                	push   0x0
c0007776:	68 fc f1 01 c0       	push   0xc001f1fc
c000777b:	6a 10                	push   0x10
c000777d:	53                   	push   ebx
c000777e:	e8 8d fe ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c0007783:	6a 00                	push   0x0
c0007785:	68 06 f2 01 c0       	push   0xc001f206
c000778a:	6a 11                	push   0x11
c000778c:	53                   	push   ebx
c000778d:	e8 7e fe ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c0007792:	83 c4 20             	add    esp,0x20
c0007795:	6a 00                	push   0x0
c0007797:	68 10 f2 01 c0       	push   0xc001f210
c000779c:	6a 12                	push   0x12
c000779e:	53                   	push   ebx
c000779f:	e8 6c fe ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00077a4:	6a 01                	push   0x1
c00077a6:	68 aa f2 01 c0       	push   0xc001f2aa
c00077ab:	6a 60                	push   0x60
c00077ad:	53                   	push   ebx
c00077ae:	e8 5d fe ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00077b3:	83 c4 20             	add    esp,0x20
c00077b6:	6a 00                	push   0x0
c00077b8:	68 b1 f2 01 c0       	push   0xc001f2b1
c00077bd:	6a 20                	push   0x20
c00077bf:	53                   	push   ebx
c00077c0:	e8 4b fe ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00077c5:	6a 00                	push   0x0
c00077c7:	68 9c f2 01 c0       	push   0xc001f29c
c00077cc:	6a 21                	push   0x21
c00077ce:	53                   	push   ebx
c00077cf:	e8 3c fe ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00077d4:	83 c4 20             	add    esp,0x20
c00077d7:	6a 00                	push   0x0
c00077d9:	68 a3 f2 01 c0       	push   0xc001f2a3
c00077de:	6a 22                	push   0x22
c00077e0:	53                   	push   ebx
c00077e1:	e8 2a fe ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00077e6:	6a 00                	push   0x0
c00077e8:	68 1a f2 01 c0       	push   0xc001f21a
c00077ed:	6a 23                	push   0x23
c00077ef:	53                   	push   ebx
c00077f0:	e8 1b fe ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00077f5:	83 c4 20             	add    esp,0x20
c00077f8:	6a 00                	push   0x0
c00077fa:	68 24 f2 01 c0       	push   0xc001f224
c00077ff:	6a 24                	push   0x24
c0007801:	53                   	push   ebx
c0007802:	e8 09 fe ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c0007807:	6a 00                	push   0x0
c0007809:	68 2e f2 01 c0       	push   0xc001f22e
c000780e:	6a 25                	push   0x25
c0007810:	53                   	push   ebx
c0007811:	e8 fa fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c0007816:	83 c4 20             	add    esp,0x20
c0007819:	6a 00                	push   0x0
c000781b:	68 38 f2 01 c0       	push   0xc001f238
c0007820:	6a 26                	push   0x26
c0007822:	53                   	push   ebx
c0007823:	e8 e8 fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c0007828:	6a 00                	push   0x0
c000782a:	68 42 f2 01 c0       	push   0xc001f242
c000782f:	6a 27                	push   0x27
c0007831:	53                   	push   ebx
c0007832:	e8 d9 fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c0007837:	83 c4 20             	add    esp,0x20
c000783a:	6a 00                	push   0x0
c000783c:	68 4c f2 01 c0       	push   0xc001f24c
c0007841:	6a 28                	push   0x28
c0007843:	53                   	push   ebx
c0007844:	e8 c7 fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c0007849:	6a 00                	push   0x0
c000784b:	68 56 f2 01 c0       	push   0xc001f256
c0007850:	6a 29                	push   0x29
c0007852:	53                   	push   ebx
c0007853:	e8 b8 fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c0007858:	83 c4 20             	add    esp,0x20
c000785b:	6a 00                	push   0x0
c000785d:	68 60 f2 01 c0       	push   0xc001f260
c0007862:	6a 2a                	push   0x2a
c0007864:	53                   	push   ebx
c0007865:	e8 a6 fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c000786a:	6a 00                	push   0x0
c000786c:	68 6a f2 01 c0       	push   0xc001f26a
c0007871:	6a 2b                	push   0x2b
c0007873:	53                   	push   ebx
c0007874:	e8 97 fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c0007879:	83 c4 20             	add    esp,0x20
c000787c:	6a 00                	push   0x0
c000787e:	68 74 f2 01 c0       	push   0xc001f274
c0007883:	6a 2c                	push   0x2c
c0007885:	53                   	push   ebx
c0007886:	e8 85 fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c000788b:	6a 00                	push   0x0
c000788d:	68 7e f2 01 c0       	push   0xc001f27e
c0007892:	6a 2d                	push   0x2d
c0007894:	53                   	push   ebx
c0007895:	e8 76 fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c000789a:	83 c4 20             	add    esp,0x20
c000789d:	6a 00                	push   0x0
c000789f:	68 88 f2 01 c0       	push   0xc001f288
c00078a4:	6a 2e                	push   0x2e
c00078a6:	53                   	push   ebx
c00078a7:	e8 64 fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00078ac:	6a 00                	push   0x0
c00078ae:	68 92 f2 01 c0       	push   0xc001f292
c00078b3:	6a 2f                	push   0x2f
c00078b5:	53                   	push   ebx
c00078b6:	e8 55 fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00078bb:	83 c4 20             	add    esp,0x20
c00078be:	6a 00                	push   0x0
c00078c0:	68 ec f3 01 c0       	push   0xc001f3ec
c00078c5:	6a 30                	push   0x30
c00078c7:	53                   	push   ebx
c00078c8:	e8 43 fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00078cd:	6a 00                	push   0x0
c00078cf:	68 f6 f3 01 c0       	push   0xc001f3f6
c00078d4:	6a 31                	push   0x31
c00078d6:	53                   	push   ebx
c00078d7:	e8 34 fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00078dc:	83 c4 20             	add    esp,0x20
c00078df:	6a 00                	push   0x0
c00078e1:	68 00 f4 01 c0       	push   0xc001f400
c00078e6:	6a 32                	push   0x32
c00078e8:	53                   	push   ebx
c00078e9:	e8 22 fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00078ee:	6a 00                	push   0x0
c00078f0:	68 0a f4 01 c0       	push   0xc001f40a
c00078f5:	6a 33                	push   0x33
c00078f7:	53                   	push   ebx
c00078f8:	e8 13 fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c00078fd:	83 c4 20             	add    esp,0x20
c0007900:	6a 00                	push   0x0
c0007902:	68 14 f4 01 c0       	push   0xc001f414
c0007907:	6a 34                	push   0x34
c0007909:	53                   	push   ebx
c000790a:	e8 01 fd ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c000790f:	6a 00                	push   0x0
c0007911:	68 1e f4 01 c0       	push   0xc001f41e
c0007916:	6a 35                	push   0x35
c0007918:	53                   	push   ebx
c0007919:	e8 f2 fc ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c000791e:	83 c4 20             	add    esp,0x20
c0007921:	6a 00                	push   0x0
c0007923:	68 28 f4 01 c0       	push   0xc001f428
c0007928:	6a 36                	push   0x36
c000792a:	53                   	push   ebx
c000792b:	e8 e0 fc ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c0007930:	6a 00                	push   0x0
c0007932:	68 32 f4 01 c0       	push   0xc001f432
c0007937:	6a 37                	push   0x37
c0007939:	53                   	push   ebx
c000793a:	e8 d1 fc ff ff       	call   c0007610 <IDT::addEntry(int, void (*)(), bool)>
c000793f:	83 c4 1c             	add    esp,0x1c
c0007942:	6a 03                	push   0x3
c0007944:	6a 02                	push   0x2
c0007946:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000794c:	e8 d5 24 00 00       	call   c0009e26 <VAS::allocatePages(int, int)>
c0007951:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007958:	89 c6                	mov    esi,eax
c000795a:	e8 94 01 00 00       	call   c0007af3 <malloc>
c000795f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007965:	89 04 24             	mov    DWORD PTR [esp],eax
c0007968:	89 c7                	mov    edi,eax
c000796a:	e8 dd 15 00 00       	call   c0008f4c <TSS::TSS()>
c000796f:	83 c4 0c             	add    esp,0xc
c0007972:	68 a6 f1 01 c0       	push   0xc001f1a6
c0007977:	56                   	push   esi
c0007978:	57                   	push   edi
c0007979:	e8 12 16 00 00       	call   c0008f90 <TSS::setup(unsigned long, unsigned long)>
c000797e:	89 c6                	mov    esi,eax
c0007980:	58                   	pop    eax
c0007981:	5a                   	pop    edx
c0007982:	6a 00                	push   0x0
c0007984:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007988:	50                   	push   eax
c0007989:	e8 ce fb ff ff       	call   c000755c <IDTEntry::IDTEntry(bool)>
c000798e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007992:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007997:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000799e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079a2:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00079a8:	80 ce 05             	or     dh,0x5
c00079ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079af:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00079b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079b6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00079b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00079bc:	e8 87 fc ff ff       	call   c0007648 <IDT::flush()>
c00079c1:	83 c4 20             	add    esp,0x20
c00079c4:	5b                   	pop    ebx
c00079c5:	5e                   	pop    esi
c00079c6:	5f                   	pop    edi
c00079c7:	c3                   	ret    

c00079c8 <sbrk>:
c00079c8:	55                   	push   ebp
c00079c9:	57                   	push   edi
c00079ca:	56                   	push   esi
c00079cb:	53                   	push   ebx
c00079cc:	83 ec 1c             	sub    esp,0x1c
c00079cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079d3:	85 c0                	test   eax,eax
c00079d5:	74 66                	je     c0007a3d <sbrk+0x75>
c00079d7:	78 6b                	js     c0007a44 <sbrk+0x7c>
c00079d9:	8b 15 48 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023748
c00079df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079e3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079e9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ee:	0f 49 e8             	cmovns ebp,eax
c00079f1:	c1 fd 0c             	sar    ebp,0xc
c00079f4:	bb 00 00 00 00       	mov    ebx,0x0
c00079f9:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079ff:	8b 3d 48 37 02 c0    	mov    edi,DWORD PTR ds:0xc0023748
c0007a05:	e8 f8 03 00 00       	call   c0007e02 <Phys::allocatePage()>
c0007a0a:	68 01 04 00 00       	push   0x401
c0007a0f:	57                   	push   edi
c0007a10:	50                   	push   eax
c0007a11:	56                   	push   esi
c0007a12:	e8 07 23 00 00       	call   c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)>
c0007a17:	81 05 48 37 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023748,0x1000
c0007a21:	83 c3 01             	add    ebx,0x1
c0007a24:	83 c4 10             	add    esp,0x10
c0007a27:	39 dd                	cmp    ebp,ebx
c0007a29:	75 ce                	jne    c00079f9 <sbrk+0x31>
c0007a2b:	0f 20 d8             	mov    eax,cr3
c0007a2e:	0f 22 d8             	mov    cr3,eax
c0007a31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a35:	83 c4 1c             	add    esp,0x1c
c0007a38:	5b                   	pop    ebx
c0007a39:	5e                   	pop    esi
c0007a3a:	5f                   	pop    edi
c0007a3b:	5d                   	pop    ebp
c0007a3c:	c3                   	ret    
c0007a3d:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0007a42:	eb f1                	jmp    c0007a35 <sbrk+0x6d>
c0007a44:	83 ec 08             	sub    esp,0x8
c0007a47:	50                   	push   eax
c0007a48:	68 64 0d 02 c0       	push   0xc0020d64
c0007a4d:	e8 d8 2e 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0007a52:	83 c4 10             	add    esp,0x10
c0007a55:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a5a:	eb d9                	jmp    c0007a35 <sbrk+0x6d>

c0007a5c <mmap>:
c0007a5c:	83 ec 18             	sub    esp,0x18
c0007a5f:	68 94 0d 02 c0       	push   0xc0020d94
c0007a64:	e8 76 9b 00 00       	call   c00115df <KePanic(char const*)>
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	83 c4 1c             	add    esp,0x1c
c0007a71:	c3                   	ret    

c0007a72 <munmap>:
c0007a72:	83 ec 18             	sub    esp,0x18
c0007a75:	68 99 0d 02 c0       	push   0xc0020d99
c0007a7a:	e8 60 9b 00 00       	call   c00115df <KePanic(char const*)>
c0007a7f:	b8 00 00 00 00       	mov    eax,0x0
c0007a84:	83 c4 1c             	add    esp,0x1c
c0007a87:	c3                   	ret    

c0007a88 <liballoc_lock()>:
c0007a88:	fa                   	cli    
c0007a89:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a90:	b8 00 00 00 00       	mov    eax,0x0
c0007a95:	c3                   	ret    

c0007a96 <liballoc_unlock()>:
c0007a96:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a9b:	83 e8 01             	sub    eax,0x1
c0007a9e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007aa3:	75 01                	jne    c0007aa6 <liballoc_unlock()+0x10>
c0007aa5:	fb                   	sti    
c0007aa6:	b8 00 00 00 00       	mov    eax,0x0
c0007aab:	c3                   	ret    

c0007aac <liballoc_alloc(int)>:
c0007aac:	83 ec 10             	sub    esp,0x10
c0007aaf:	6a 01                	push   0x1
c0007ab1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007ab5:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007abb:	e8 66 23 00 00       	call   c0009e26 <VAS::allocatePages(int, int)>
c0007ac0:	83 c4 1c             	add    esp,0x1c
c0007ac3:	c3                   	ret    

c0007ac4 <liballoc_free(void*, int)>:
c0007ac4:	83 ec 14             	sub    esp,0x14
c0007ac7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007acb:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ad1:	e8 90 1f 00 00       	call   c0009a66 <VAS::freeAllocatedPages(unsigned long)>
c0007ad6:	b8 00 00 00 00       	mov    eax,0x0
c0007adb:	83 c4 1c             	add    esp,0x1c
c0007ade:	c3                   	ret    

c0007adf <realloc>:
c0007adf:	83 ec 14             	sub    esp,0x14
c0007ae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 32 9b ff ff       	call   c0001621 <dlrealloc>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <malloc>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 e5 95 ff ff       	call   c00010e4 <dlmalloc>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <free>:
c0007b03:	83 ec 18             	sub    esp,0x18
c0007b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b0a:	e8 77 92 ff ff       	call   c0000d86 <dlfree>
c0007b0f:	83 c4 1c             	add    esp,0x1c
c0007b12:	c3                   	ret    

c0007b13 <rfree>:
c0007b13:	83 ec 18             	sub    esp,0x18
c0007b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b1a:	e8 67 92 ff ff       	call   c0000d86 <dlfree>
c0007b1f:	83 c4 1c             	add    esp,0x1c
c0007b22:	c3                   	ret    

c0007b23 <calloc>:
c0007b23:	56                   	push   esi
c0007b24:	53                   	push   ebx
c0007b25:	83 ec 10             	sub    esp,0x10
c0007b28:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b2c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b31:	53                   	push   ebx
c0007b32:	e8 bc ff ff ff       	call   c0007af3 <malloc>
c0007b37:	89 c6                	mov    esi,eax
c0007b39:	83 c4 0c             	add    esp,0xc
c0007b3c:	53                   	push   ebx
c0007b3d:	6a 00                	push   0x0
c0007b3f:	50                   	push   eax
c0007b40:	e8 ab 89 ff ff       	call   c00004f0 <memset>
c0007b45:	89 f0                	mov    eax,esi
c0007b47:	83 c4 14             	add    esp,0x14
c0007b4a:	5b                   	pop    ebx
c0007b4b:	5e                   	pop    esi
c0007b4c:	c3                   	ret    

c0007b4d <KeEntryPoint>:
c0007b4d:	57                   	push   edi
c0007b4e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b53:	56                   	push   esi
c0007b54:	31 f6                	xor    esi,esi
c0007b56:	53                   	push   ebx
c0007b57:	89 fa                	mov    edx,edi
c0007b59:	83 ec 2c             	sub    esp,0x2c
c0007b5c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b61:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b66:	89 f0                	mov    eax,esi
c0007b68:	ee                   	out    dx,al
c0007b69:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b6e:	b0 80                	mov    al,0x80
c0007b70:	89 da                	mov    edx,ebx
c0007b72:	ee                   	out    dx,al
c0007b73:	b1 03                	mov    cl,0x3
c0007b75:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b7a:	88 c8                	mov    al,cl
c0007b7c:	ee                   	out    dx,al
c0007b7d:	89 f0                	mov    eax,esi
c0007b7f:	89 fa                	mov    edx,edi
c0007b81:	ee                   	out    dx,al
c0007b82:	88 c8                	mov    al,cl
c0007b84:	89 da                	mov    edx,ebx
c0007b86:	ee                   	out    dx,al
c0007b87:	b0 c7                	mov    al,0xc7
c0007b89:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b8e:	ee                   	out    dx,al
c0007b8f:	b0 0b                	mov    al,0xb
c0007b91:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b96:	ee                   	out    dx,al
c0007b97:	68 a0 0d 02 c0       	push   0xc0020da0
c0007b9c:	e8 89 2d 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0007ba1:	e8 bf 92 00 00       	call   c0010e65 <KeDisplaySplashScreen()>
c0007ba6:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007bab:	05 ff 0f 00 00       	add    eax,0xfff
c0007bb0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007bb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bb8:	e8 b3 03 00 00       	call   c0007f70 <Phys::physicalMemorySetup(unsigned int)>
c0007bbd:	e8 27 1c 00 00       	call   c00097e9 <Virt::virtualMemorySetup()>
c0007bc2:	e8 e8 91 00 00       	call   c0010daf <KeInitialiseAtexit()>
c0007bc7:	58                   	pop    eax
c0007bc8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bcc:	53                   	push   ebx
c0007bcd:	e8 14 1f 00 00       	call   c0009ae6 <VAS::VAS()>
c0007bd2:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007bd8:	e8 0d 7e 01 00       	call   c001f9ea <_init>
c0007bdd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007be4:	e8 0a ff ff ff       	call   c0007af3 <malloc>
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	89 c6                	mov    esi,eax
c0007bee:	e8 37 f2 ff ff       	call   c0006e2a <Computer::Computer()>
c0007bf3:	53                   	push   ebx
c0007bf4:	6a 00                	push   0x0
c0007bf6:	6a 00                	push   0x0
c0007bf8:	56                   	push   esi
c0007bf9:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bff:	e8 ec f5 ff ff       	call   c00071f0 <Computer::open(int, int, void*)>
c0007c04:	83 c4 14             	add    esp,0x14
c0007c07:	53                   	push   ebx
c0007c08:	e8 a3 1f 00 00       	call   c0009bb0 <VAS::~VAS()>
c0007c0d:	83 c4 30             	add    esp,0x30
c0007c10:	5b                   	pop    ebx
c0007c11:	5e                   	pop    esi
c0007c12:	5f                   	pop    edi
c0007c13:	c3                   	ret    

c0007c14 <Phys::allocateDMA(unsigned long)>:
c0007c14:	55                   	push   ebp
c0007c15:	31 ed                	xor    ebp,ebp
c0007c17:	57                   	push   edi
c0007c18:	56                   	push   esi
c0007c19:	31 f6                	xor    esi,esi
c0007c1b:	53                   	push   ebx
c0007c1c:	31 db                	xor    ebx,ebx
c0007c1e:	83 ec 1c             	sub    esp,0x1c
c0007c21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c25:	05 ff 0f 00 00       	add    eax,0xfff
c0007c2a:	c1 e8 0c             	shr    eax,0xc
c0007c2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c31:	31 c0                	xor    eax,eax
c0007c33:	eb 1b                	jmp    c0007c50 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c35:	8d 78 01             	lea    edi,[eax+0x1]
c0007c38:	85 c0                	test   eax,eax
c0007c3a:	0f 44 eb             	cmove  ebp,ebx
c0007c3d:	0f 44 f3             	cmove  esi,ebx
c0007c40:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c44:	74 37                	je     c0007c7d <Phys::allocateDMA(unsigned long)+0x69>
c0007c46:	89 f8                	mov    eax,edi
c0007c48:	83 c3 01             	add    ebx,0x1
c0007c4b:	83 fb 0f             	cmp    ebx,0xf
c0007c4e:	7f 13                	jg     c0007c63 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c50:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c57:	74 dc                	je     c0007c35 <Phys::allocateDMA(unsigned long)+0x21>
c0007c59:	31 c0                	xor    eax,eax
c0007c5b:	83 c3 01             	add    ebx,0x1
c0007c5e:	83 fb 0f             	cmp    ebx,0xf
c0007c61:	7e ed                	jle    c0007c50 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c63:	83 ec 0c             	sub    esp,0xc
c0007c66:	68 b8 0d 02 c0       	push   0xc0020db8
c0007c6b:	e8 6f 99 00 00       	call   c00115df <KePanic(char const*)>
c0007c70:	83 c4 10             	add    esp,0x10
c0007c73:	31 c0                	xor    eax,eax
c0007c75:	83 c4 1c             	add    esp,0x1c
c0007c78:	5b                   	pop    ebx
c0007c79:	5e                   	pop    esi
c0007c7a:	5f                   	pop    edi
c0007c7b:	5d                   	pop    ebp
c0007c7c:	c3                   	ret    
c0007c7d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c81:	89 f2                	mov    edx,esi
c0007c83:	c1 fa 04             	sar    edx,0x4
c0007c86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c8a:	01 f1                	add    ecx,esi
c0007c8c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c8f:	83 e9 01             	sub    ecx,0x1
c0007c92:	0f 48 ca             	cmovs  ecx,edx
c0007c95:	c1 f9 04             	sar    ecx,0x4
c0007c98:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c9c:	74 06                	je     c0007ca4 <Phys::allocateDMA(unsigned long)+0x90>
c0007c9e:	89 eb                	mov    ebx,ebp
c0007ca0:	31 c0                	xor    eax,eax
c0007ca2:	eb b7                	jmp    c0007c5b <Phys::allocateDMA(unsigned long)+0x47>
c0007ca4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ca8:	85 d2                	test   edx,edx
c0007caa:	74 17                	je     c0007cc3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007cac:	8d 96 ec 6e 02 c0    	lea    edx,[esi-0x3ffd9114]
c0007cb2:	8d 84 06 ed 6e 02 c0 	lea    eax,[esi+eax*1-0x3ffd9113]
c0007cb9:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007cbc:	83 c2 01             	add    edx,0x1
c0007cbf:	39 d0                	cmp    eax,edx
c0007cc1:	75 f6                	jne    c0007cb9 <Phys::allocateDMA(unsigned long)+0xa5>
c0007cc3:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007cc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ccd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cd1:	01 c2                	add    edx,eax
c0007cd3:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007cd9:	85 c9                	test   ecx,ecx
c0007cdb:	74 17                	je     c0007cf4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cdd:	83 ec 0c             	sub    esp,0xc
c0007ce0:	68 b8 0d 02 c0       	push   0xc0020db8
c0007ce5:	e8 f5 98 00 00       	call   c00115df <KePanic(char const*)>
c0007cea:	83 c4 10             	add    esp,0x10
c0007ced:	89 f8                	mov    eax,edi
c0007cef:	e9 54 ff ff ff       	jmp    c0007c48 <Phys::allocateDMA(unsigned long)+0x34>
c0007cf4:	c1 e6 0c             	shl    esi,0xc
c0007cf7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cfd:	e9 73 ff ff ff       	jmp    c0007c75 <Phys::allocateDMA(unsigned long)+0x61>

c0007d02 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007d02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d06:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007d0c:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d11:	c1 ea 0c             	shr    edx,0xc
c0007d14:	29 d0                	sub    eax,edx
c0007d16:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d1f:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d24:	c1 e8 0c             	shr    eax,0xc
c0007d27:	85 d2                	test   edx,edx
c0007d29:	74 11                	je     c0007d3c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d2b:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d30:	01 c2                	add    edx,eax
c0007d32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d35:	83 c0 01             	add    eax,0x1
c0007d38:	39 d0                	cmp    eax,edx
c0007d3a:	75 f6                	jne    c0007d32 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d3c:	c3                   	ret    

c0007d3d <Phys::setPageState(unsigned long, bool)>:
c0007d3d:	57                   	push   edi
c0007d3e:	56                   	push   esi
c0007d3f:	8b 35 4c 37 02 c0    	mov    esi,DWORD PTR ds:0xc002374c
c0007d45:	53                   	push   ebx
c0007d46:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d4b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d53:	89 ca                	mov    edx,ecx
c0007d55:	83 e1 07             	and    ecx,0x7
c0007d58:	c1 ea 03             	shr    edx,0x3
c0007d5b:	0f b6 c0             	movzx  eax,al
c0007d5e:	d3 c3                	rol    ebx,cl
c0007d60:	01 d6                	add    esi,edx
c0007d62:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d65:	d3 e0                	shl    eax,cl
c0007d67:	21 fb                	and    ebx,edi
c0007d69:	88 1e                	mov    BYTE PTR [esi],bl
c0007d6b:	8b 1d 4c 37 02 c0    	mov    ebx,DWORD PTR ds:0xc002374c
c0007d71:	01 da                	add    edx,ebx
c0007d73:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d75:	09 c8                	or     eax,ecx
c0007d77:	88 02                	mov    BYTE PTR [edx],al
c0007d79:	5b                   	pop    ebx
c0007d7a:	5e                   	pop    esi
c0007d7b:	5f                   	pop    edi
c0007d7c:	c3                   	ret    

c0007d7d <Phys::getPageState(unsigned long)>:
c0007d7d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d81:	8b 15 4c 37 02 c0    	mov    edx,DWORD PTR ds:0xc002374c
c0007d87:	89 c8                	mov    eax,ecx
c0007d89:	83 e1 07             	and    ecx,0x7
c0007d8c:	c1 e8 03             	shr    eax,0x3
c0007d8f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d93:	d3 f8                	sar    eax,cl
c0007d95:	83 e0 01             	and    eax,0x1
c0007d98:	c3                   	ret    

c0007d99 <Phys::freePage(unsigned long)>:
c0007d99:	53                   	push   ebx
c0007d9a:	83 ec 08             	sub    esp,0x8
c0007d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007da1:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007da7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007dad:	76 41                	jbe    c0007df0 <Phys::freePage(unsigned long)+0x57>
c0007daf:	c1 e8 0c             	shr    eax,0xc
c0007db2:	50                   	push   eax
c0007db3:	89 c3                	mov    ebx,eax
c0007db5:	e8 c3 ff ff ff       	call   c0007d7d <Phys::getPageState(unsigned long)>
c0007dba:	5a                   	pop    edx
c0007dbb:	84 c0                	test   al,al
c0007dbd:	74 20                	je     c0007ddf <Phys::freePage(unsigned long)+0x46>
c0007dbf:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007dc4:	83 ec 08             	sub    esp,0x8
c0007dc7:	6a 00                	push   0x0
c0007dc9:	53                   	push   ebx
c0007dca:	83 e8 01             	sub    eax,0x1
c0007dcd:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007dd2:	e8 66 ff ff ff       	call   c0007d3d <Phys::setPageState(unsigned long, bool)>
c0007dd7:	83 c4 10             	add    esp,0x10
c0007dda:	83 c4 08             	add    esp,0x8
c0007ddd:	5b                   	pop    ebx
c0007dde:	c3                   	ret    
c0007ddf:	c7 44 24 10 5d 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e5d
c0007de7:	83 c4 08             	add    esp,0x8
c0007dea:	5b                   	pop    ebx
c0007deb:	e9 ef 97 00 00       	jmp    c00115df <KePanic(char const*)>
c0007df0:	68 00 10 00 00       	push   0x1000
c0007df5:	50                   	push   eax
c0007df6:	e8 07 ff ff ff       	call   c0007d02 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dfb:	59                   	pop    ecx
c0007dfc:	5b                   	pop    ebx
c0007dfd:	83 c4 08             	add    esp,0x8
c0007e00:	5b                   	pop    ebx
c0007e01:	c3                   	ret    

c0007e02 <Phys::allocatePage()>:
c0007e02:	56                   	push   esi
c0007e03:	53                   	push   ebx
c0007e04:	83 ec 14             	sub    esp,0x14
c0007e07:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007e0d:	89 f3                	mov    ebx,esi
c0007e0f:	eb 0a                	jmp    c0007e1b <Phys::allocatePage()+0x19>
c0007e11:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007e17:	39 de                	cmp    esi,ebx
c0007e19:	74 26                	je     c0007e41 <Phys::allocatePage()+0x3f>
c0007e1b:	53                   	push   ebx
c0007e1c:	e8 5c ff ff ff       	call   c0007d7d <Phys::getPageState(unsigned long)>
c0007e21:	5a                   	pop    edx
c0007e22:	84 c0                	test   al,al
c0007e24:	74 67                	je     c0007e8d <Phys::allocatePage()+0x8b>
c0007e26:	83 c3 01             	add    ebx,0x1
c0007e29:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e2f:	75 e0                	jne    c0007e11 <Phys::allocatePage()+0xf>
c0007e31:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e3b:	31 db                	xor    ebx,ebx
c0007e3d:	39 de                	cmp    esi,ebx
c0007e3f:	75 da                	jne    c0007e1b <Phys::allocatePage()+0x19>
c0007e41:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e46:	83 ec 0c             	sub    esp,0xc
c0007e49:	83 f0 01             	xor    eax,0x1
c0007e4c:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e59:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e5f:	50                   	push   eax
c0007e60:	e8 79 27 00 00       	call   c000a5de <VAS::scanForEviction()>
c0007e65:	83 c4 10             	add    esp,0x10
c0007e68:	85 c0                	test   eax,eax
c0007e6a:	75 48                	jne    c0007eb4 <Phys::allocatePage()+0xb2>
c0007e6c:	83 ec 0c             	sub    esp,0xc
c0007e6f:	68 e0 0d 02 c0       	push   0xc0020de0
c0007e74:	e8 66 97 00 00       	call   c00115df <KePanic(char const*)>
c0007e79:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e7f:	83 c4 10             	add    esp,0x10
c0007e82:	53                   	push   ebx
c0007e83:	e8 f5 fe ff ff       	call   c0007d7d <Phys::getPageState(unsigned long)>
c0007e88:	5a                   	pop    edx
c0007e89:	84 c0                	test   al,al
c0007e8b:	75 99                	jne    c0007e26 <Phys::allocatePage()+0x24>
c0007e8d:	6a 01                	push   0x1
c0007e8f:	53                   	push   ebx
c0007e90:	e8 a8 fe ff ff       	call   c0007d3d <Phys::setPageState(unsigned long, bool)>
c0007e95:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e9b:	59                   	pop    ecx
c0007e9c:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007ea1:	5b                   	pop    ebx
c0007ea2:	83 c2 01             	add    edx,0x1
c0007ea5:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007eab:	c1 e0 0c             	shl    eax,0xc
c0007eae:	83 c4 14             	add    esp,0x14
c0007eb1:	5b                   	pop    ebx
c0007eb2:	5e                   	pop    esi
c0007eb3:	c3                   	ret    
c0007eb4:	83 ec 08             	sub    esp,0x8
c0007eb7:	89 c2                	mov    edx,eax
c0007eb9:	6a 01                	push   0x1
c0007ebb:	c1 ea 0c             	shr    edx,0xc
c0007ebe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ec2:	52                   	push   edx
c0007ec3:	e8 75 fe ff ff       	call   c0007d3d <Phys::setPageState(unsigned long, bool)>
c0007ec8:	83 c4 10             	add    esp,0x10
c0007ecb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ecf:	eb dd                	jmp    c0007eae <Phys::allocatePage()+0xac>

c0007ed1 <Phys::allocateContiguousPages(int)>:
c0007ed1:	57                   	push   edi
c0007ed2:	56                   	push   esi
c0007ed3:	53                   	push   ebx
c0007ed4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ed8:	fa                   	cli    
c0007ed9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007ede:	31 db                	xor    ebx,ebx
c0007ee0:	83 c0 01             	add    eax,0x1
c0007ee3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ee8:	85 db                	test   ebx,ebx
c0007eea:	75 11                	jne    c0007efd <Phys::allocateContiguousPages(int)+0x2c>
c0007eec:	e8 11 ff ff ff       	call   c0007e02 <Phys::allocatePage()>
c0007ef1:	83 fe 01             	cmp    esi,0x1
c0007ef4:	89 c7                	mov    edi,eax
c0007ef6:	74 21                	je     c0007f19 <Phys::allocateContiguousPages(int)+0x48>
c0007ef8:	bb 01 00 00 00       	mov    ebx,0x1
c0007efd:	e8 00 ff ff ff       	call   c0007e02 <Phys::allocatePage()>
c0007f02:	89 da                	mov    edx,ebx
c0007f04:	c1 e2 0c             	shl    edx,0xc
c0007f07:	01 fa                	add    edx,edi
c0007f09:	39 c2                	cmp    edx,eax
c0007f0b:	74 22                	je     c0007f2f <Phys::allocateContiguousPages(int)+0x5e>
c0007f0d:	83 fe 01             	cmp    esi,0x1
c0007f10:	bb 01 00 00 00       	mov    ebx,0x1
c0007f15:	89 c7                	mov    edi,eax
c0007f17:	75 e4                	jne    c0007efd <Phys::allocateContiguousPages(int)+0x2c>
c0007f19:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007f1e:	83 e8 01             	sub    eax,0x1
c0007f21:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f26:	75 01                	jne    c0007f29 <Phys::allocateContiguousPages(int)+0x58>
c0007f28:	fb                   	sti    
c0007f29:	5b                   	pop    ebx
c0007f2a:	89 f8                	mov    eax,edi
c0007f2c:	5e                   	pop    esi
c0007f2d:	5f                   	pop    edi
c0007f2e:	c3                   	ret    
c0007f2f:	83 c3 01             	add    ebx,0x1
c0007f32:	39 f3                	cmp    ebx,esi
c0007f34:	75 b2                	jne    c0007ee8 <Phys::allocateContiguousPages(int)+0x17>
c0007f36:	eb e1                	jmp    c0007f19 <Phys::allocateContiguousPages(int)+0x48>

c0007f38 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f38:	56                   	push   esi
c0007f39:	53                   	push   ebx
c0007f3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f3e:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f44:	73 06                	jae    c0007f4c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f46:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f50:	c1 eb 0c             	shr    ebx,0xc
c0007f53:	c1 e8 0c             	shr    eax,0xc
c0007f56:	39 d8                	cmp    eax,ebx
c0007f58:	73 13                	jae    c0007f6d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f5a:	6a 00                	push   0x0
c0007f5c:	50                   	push   eax
c0007f5d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f60:	e8 d8 fd ff ff       	call   c0007d3d <Phys::setPageState(unsigned long, bool)>
c0007f65:	39 f3                	cmp    ebx,esi
c0007f67:	89 f0                	mov    eax,esi
c0007f69:	5a                   	pop    edx
c0007f6a:	59                   	pop    ecx
c0007f6b:	75 ed                	jne    c0007f5a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f6d:	5b                   	pop    ebx
c0007f6e:	5e                   	pop    esi
c0007f6f:	c3                   	ret    

c0007f70 <Phys::physicalMemorySetup(unsigned int)>:
c0007f70:	55                   	push   ebp
c0007f71:	57                   	push   edi
c0007f72:	56                   	push   esi
c0007f73:	53                   	push   ebx
c0007f74:	31 db                	xor    ebx,ebx
c0007f76:	83 ec 40             	sub    esp,0x40
c0007f79:	6a 10                	push   0x10
c0007f7b:	6a 00                	push   0x0
c0007f7d:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f82:	e8 69 85 ff ff       	call   c00004f0 <memset>
c0007f87:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f8b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f90:	05 00 10 00 00       	add    eax,0x1000
c0007f95:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f99:	5a                   	pop    edx
c0007f9a:	59                   	pop    ecx
c0007f9b:	50                   	push   eax
c0007f9c:	68 73 0e 02 c0       	push   0xc0020e73
c0007fa1:	e8 84 29 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0007fa6:	83 c4 10             	add    esp,0x10
c0007fa9:	83 ec 08             	sub    esp,0x8
c0007fac:	6a 01                	push   0x1
c0007fae:	53                   	push   ebx
c0007faf:	83 c3 01             	add    ebx,0x1
c0007fb2:	e8 86 fd ff ff       	call   c0007d3d <Phys::setPageState(unsigned long, bool)>
c0007fb7:	83 c4 10             	add    esp,0x10
c0007fba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fc0:	75 e7                	jne    c0007fa9 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fc2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fc9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fd0:	c1 e0 08             	shl    eax,0x8
c0007fd3:	09 c2                	or     edx,eax
c0007fd5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fd9:	0f 84 43 01 00 00    	je     c0008122 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fdf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fe7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fec:	e9 82 00 00 00       	jmp    c0008073 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007ff1:	ba 00 00 08 00       	mov    edx,0x80000
c0007ff6:	89 c1                	mov    ecx,eax
c0007ff8:	39 f2                	cmp    edx,esi
c0007ffa:	19 f9                	sbb    ecx,edi
c0007ffc:	0f 82 c0 00 00 00    	jb     c00080c2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0008002:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008006:	89 c5                	mov    ebp,eax
c0008008:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000800c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008010:	19 cd                	sbb    ebp,ecx
c0008012:	0f 83 af 00 00 00    	jae    c00080c7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0008018:	89 d6                	mov    esi,edx
c000801a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000801f:	39 f2                	cmp    edx,esi
c0008021:	89 cf                	mov    edi,ecx
c0008023:	19 c8                	sbb    eax,ecx
c0008025:	73 07                	jae    c000802e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008027:	be 00 00 0a 00       	mov    esi,0xa0000
c000802c:	31 ff                	xor    edi,edi
c000802e:	89 f2                	mov    edx,esi
c0008030:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008035:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000803b:	89 f9                	mov    ecx,edi
c000803d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008041:	83 d1 ff             	adc    ecx,0xffffffff
c0008044:	39 d0                	cmp    eax,edx
c0008046:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000804a:	b8 00 00 00 00       	mov    eax,0x0
c000804f:	19 c8                	sbb    eax,ecx
c0008051:	0f 82 9d 01 00 00    	jb     c00081f4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008057:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000805b:	83 c3 18             	add    ebx,0x18
c000805e:	83 c6 01             	add    esi,0x1
c0008061:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008065:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008069:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000806d:	0f 84 bf 00 00 00    	je     c0008132 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008073:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008075:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008078:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000807b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000807e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008082:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008085:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008089:	01 f0                	add    eax,esi
c000808b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000808f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008093:	55                   	push   ebp
c0008094:	11 fa                	adc    edx,edi
c0008096:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000809a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000809e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080a2:	50                   	push   eax
c00080a3:	56                   	push   esi
c00080a4:	68 10 0e 02 c0       	push   0xc0020e10
c00080a9:	e8 7c 28 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00080ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00080b2:	83 c4 10             	add    esp,0x10
c00080b5:	09 f8                	or     eax,edi
c00080b7:	75 79                	jne    c0008132 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c00080b9:	83 fd 01             	cmp    ebp,0x1
c00080bc:	0f 84 2f ff ff ff    	je     c0007ff1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080c2:	83 fd 01             	cmp    ebp,0x1
c00080c5:	75 90                	jne    c0008057 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080c7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080cb:	31 d2                	xor    edx,edx
c00080cd:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080d1:	89 c8                	mov    eax,ecx
c00080d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080d7:	19 d1                	sbb    ecx,edx
c00080d9:	0f 82 78 ff ff ff    	jb     c0008057 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080df:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080e4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080e8:	b9 00 00 00 00       	mov    ecx,0x0
c00080ed:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080f1:	0f 83 60 ff ff ff    	jae    c0008057 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080f7:	39 c6                	cmp    esi,eax
c00080f9:	19 d7                	sbb    edi,edx
c00080fb:	0f 83 ff 00 00 00    	jae    c0008200 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008101:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008105:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008109:	29 c7                	sub    edi,eax
c000810b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000810f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008113:	19 d5                	sbb    ebp,edx
c0008115:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008119:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000811d:	e9 de 00 00 00       	jmp    c0008200 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008122:	83 ec 0c             	sub    esp,0xc
c0008125:	68 8b 0e 02 c0       	push   0xc0020e8b
c000812a:	e8 b0 94 00 00       	call   c00115df <KePanic(char const*)>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	83 ec 08             	sub    esp,0x8
c0008135:	bb 60 00 00 00       	mov    ebx,0x60
c000813a:	6a 00                	push   0x0
c000813c:	6a 06                	push   0x6
c000813e:	e8 fa fb ff ff       	call   c0007d3d <Phys::setPageState(unsigned long, bool)>
c0008143:	58                   	pop    eax
c0008144:	5a                   	pop    edx
c0008145:	6a 00                	push   0x0
c0008147:	6a 07                	push   0x7
c0008149:	e8 ef fb ff ff       	call   c0007d3d <Phys::setPageState(unsigned long, bool)>
c000814e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008154:	83 c4 10             	add    esp,0x10
c0008157:	83 c1 02             	add    ecx,0x2
c000815a:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	6a 00                	push   0x0
c0008165:	53                   	push   ebx
c0008166:	83 c3 01             	add    ebx,0x1
c0008169:	e8 cf fb ff ff       	call   c0007d3d <Phys::setPageState(unsigned long, bool)>
c000816e:	83 c4 10             	add    esp,0x10
c0008171:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008177:	75 e7                	jne    c0008160 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008179:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000817e:	bb 40 01 00 00       	mov    ebx,0x140
c0008183:	83 c0 20             	add    eax,0x20
c0008186:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000818b:	eb 26                	jmp    c00081b3 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000818d:	83 ec 08             	sub    esp,0x8
c0008190:	6a 00                	push   0x0
c0008192:	53                   	push   ebx
c0008193:	83 c3 01             	add    ebx,0x1
c0008196:	e8 a2 fb ff ff       	call   c0007d3d <Phys::setPageState(unsigned long, bool)>
c000819b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081a0:	83 c4 10             	add    esp,0x10
c00081a3:	83 c0 01             	add    eax,0x1
c00081a6:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081ac:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081b1:	74 07                	je     c00081ba <Phys::physicalMemorySetup(unsigned int)+0x24a>
c00081b3:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081b8:	7e d3                	jle    c000818d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c00081ba:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081bf:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081c4:	7f 26                	jg     c00081ec <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081c6:	83 ec 08             	sub    esp,0x8
c00081c9:	6a 00                	push   0x0
c00081cb:	53                   	push   ebx
c00081cc:	83 c3 01             	add    ebx,0x1
c00081cf:	e8 69 fb ff ff       	call   c0007d3d <Phys::setPageState(unsigned long, bool)>
c00081d4:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081d9:	83 c4 10             	add    esp,0x10
c00081dc:	83 c0 01             	add    eax,0x1
c00081df:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081e5:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081ea:	75 d3                	jne    c00081bf <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081ec:	83 c4 3c             	add    esp,0x3c
c00081ef:	5b                   	pop    ebx
c00081f0:	5e                   	pop    esi
c00081f1:	5f                   	pop    edi
c00081f2:	5d                   	pop    ebp
c00081f3:	c3                   	ret    
c00081f4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081f8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0008200:	83 ec 04             	sub    esp,0x4
c0008203:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0008207:	56                   	push   esi
c0008208:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000820c:	57                   	push   edi
c000820d:	68 34 0e 02 c0       	push   0xc0020e34
c0008212:	e8 13 27 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0008217:	5d                   	pop    ebp
c0008218:	58                   	pop    eax
c0008219:	56                   	push   esi
c000821a:	57                   	push   edi
c000821b:	e8 18 fd ff ff       	call   c0007f38 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008220:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008224:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008228:	83 c4 0c             	add    esp,0xc
c000822b:	8b 35 e8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ee8
c0008231:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008235:	01 f0                	add    eax,esi
c0008237:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000823c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008243:	52                   	push   edx
c0008244:	50                   	push   eax
c0008245:	68 99 0e 02 c0       	push   0xc0020e99
c000824a:	e8 db 26 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000824f:	83 c4 10             	add    esp,0x10
c0008252:	e9 00 fe ff ff       	jmp    c0008057 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008257:	90                   	nop

c0008258 <Pipe::isAtty()>:
c0008258:	31 c0                	xor    eax,eax
c000825a:	c3                   	ret    
c000825b:	90                   	nop

c000825c <Pipe::~Pipe()>:
c000825c:	83 ec 0c             	sub    esp,0xc
c000825f:	ba f8 0e 02 c0       	mov    edx,0xc0020ef8
c0008264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008268:	89 10                	mov    DWORD PTR [eax],edx
c000826a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000826e:	83 ec 0c             	sub    esp,0xc
c0008271:	50                   	push   eax
c0008272:	e8 35 11 00 00       	call   c00093ac <UnixFile::~UnixFile()>
c0008277:	83 c4 10             	add    esp,0x10
c000827a:	90                   	nop
c000827b:	83 c4 0c             	add    esp,0xc
c000827e:	c3                   	ret    
c000827f:	90                   	nop

c0008280 <Pipe::~Pipe()>:
c0008280:	83 ec 0c             	sub    esp,0xc
c0008283:	83 ec 0c             	sub    esp,0xc
c0008286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000828a:	e8 cd ff ff ff       	call   c000825c <Pipe::~Pipe()>
c000828f:	83 c4 10             	add    esp,0x10
c0008292:	83 ec 08             	sub    esp,0x8
c0008295:	6a 20                	push   0x20
c0008297:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000829b:	e8 8c 25 00 00       	call   c000a82c <operator delete(void*, unsigned long)>
c00082a0:	83 c4 10             	add    esp,0x10
c00082a3:	83 c4 0c             	add    esp,0xc
c00082a6:	c3                   	ret    
c00082a7:	90                   	nop

c00082a8 <Pipe::write(unsigned long long, void*, int*)>:
c00082a8:	55                   	push   ebp
c00082a9:	57                   	push   edi
c00082aa:	56                   	push   esi
c00082ab:	53                   	push   ebx
c00082ac:	83 ec 1c             	sub    esp,0x1c
c00082af:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00082b3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00082b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00082bb:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00082be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082c8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082cc:	89 d8                	mov    eax,ebx
c00082ce:	89 d6                	mov    esi,edx
c00082d0:	89 d7                	mov    edi,edx
c00082d2:	c1 ff 1f             	sar    edi,0x1f
c00082d5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082d8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082dc:	c1 f8 1f             	sar    eax,0x1f
c00082df:	39 f3                	cmp    ebx,esi
c00082e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082e9:	19 f8                	sbb    eax,edi
c00082eb:	b8 01 00 00 00       	mov    eax,0x1
c00082f0:	72 72                	jb     c0008364 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082f5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082f9:	01 d0                	add    eax,edx
c00082fb:	99                   	cdq    
c00082fc:	f7 fb                	idiv   ebx
c00082fe:	89 d8                	mov    eax,ebx
c0008300:	29 d0                	sub    eax,edx
c0008302:	89 d6                	mov    esi,edx
c0008304:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008307:	89 c3                	mov    ebx,eax
c0008309:	c1 fb 1f             	sar    ebx,0x1f
c000830c:	39 c2                	cmp    edx,eax
c000830e:	19 df                	sbb    edi,ebx
c0008310:	bb 00 00 00 00       	mov    ebx,0x0
c0008315:	72 04                	jb     c000831b <Pipe::write(unsigned long long, void*, int*)+0x73>
c0008317:	89 d3                	mov    ebx,edx
c0008319:	29 c3                	sub    ebx,eax
c000831b:	89 d0                	mov    eax,edx
c000831d:	29 d8                	sub    eax,ebx
c000831f:	74 0d                	je     c000832e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008321:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008324:	89 c1                	mov    ecx,eax
c0008326:	01 f7                	add    edi,esi
c0008328:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000832c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000832e:	85 db                	test   ebx,ebx
c0008330:	74 0d                	je     c000833f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008332:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008336:	89 d9                	mov    ecx,ebx
c0008338:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000833b:	89 c6                	mov    esi,eax
c000833d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000833f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008342:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008347:	75 10                	jne    c0008359 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008349:	83 ec 0c             	sub    esp,0xc
c000834c:	68 b5 0e 02 c0       	push   0xc0020eb5
c0008351:	e8 89 92 00 00       	call   c00115df <KePanic(char const*)>
c0008356:	83 c4 10             	add    esp,0x10
c0008359:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000835d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008360:	89 08                	mov    DWORD PTR [eax],ecx
c0008362:	31 c0                	xor    eax,eax
c0008364:	83 c4 1c             	add    esp,0x1c
c0008367:	5b                   	pop    ebx
c0008368:	5e                   	pop    esi
c0008369:	5f                   	pop    edi
c000836a:	5d                   	pop    ebp
c000836b:	c3                   	ret    

c000836c <Pipe::read(unsigned long long, void*, int*)>:
c000836c:	55                   	push   ebp
c000836d:	57                   	push   edi
c000836e:	56                   	push   esi
c000836f:	53                   	push   ebx
c0008370:	83 ec 1c             	sub    esp,0x1c
c0008373:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008377:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000837b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000837f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008382:	89 c8                	mov    eax,ecx
c0008384:	99                   	cdq    
c0008385:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008389:	74 24                	je     c00083af <Pipe::read(unsigned long long, void*, int*)+0x43>
c000838b:	39 f9                	cmp    ecx,edi
c000838d:	89 d1                	mov    ecx,edx
c000838f:	19 f1                	sbb    ecx,esi
c0008391:	73 1c                	jae    c00083af <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008393:	fa                   	cli    
c0008394:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000839a:	e8 6d dd 00 00       	call   c001610c <schedule()>
c000839f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00083a4:	48                   	dec    eax
c00083a5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00083aa:	75 d3                	jne    c000837f <Pipe::read(unsigned long long, void*, int*)+0x13>
c00083ac:	fb                   	sti    
c00083ad:	eb d0                	jmp    c000837f <Pipe::read(unsigned long long, void*, int*)+0x13>
c00083af:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00083b3:	39 f8                	cmp    eax,edi
c00083b5:	89 d1                	mov    ecx,edx
c00083b7:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00083bb:	19 f1                	sbb    ecx,esi
c00083bd:	73 08                	jae    c00083c7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c00083bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083c7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083ca:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083cd:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083d1:	29 f7                	sub    edi,esi
c00083d3:	89 f8                	mov    eax,edi
c00083d5:	99                   	cdq    
c00083d6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083da:	89 d0                	mov    eax,edx
c00083dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083e0:	19 c2                	sbb    edx,eax
c00083e2:	89 f8                	mov    eax,edi
c00083e4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083e9:	89 ea                	mov    edx,ebp
c00083eb:	29 c2                	sub    edx,eax
c00083ed:	85 c0                	test   eax,eax
c00083ef:	74 0b                	je     c00083fc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083f1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083f4:	89 c1                	mov    ecx,eax
c00083f6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083fc:	85 d2                	test   edx,edx
c00083fe:	74 0d                	je     c000840d <Pipe::read(unsigned long long, void*, int*)+0xa1>
c0008400:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008404:	89 d1                	mov    ecx,edx
c0008406:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008409:	89 c7                	mov    edi,eax
c000840b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000840d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008410:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008413:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008416:	99                   	cdq    
c0008417:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000841b:	89 f7                	mov    edi,esi
c000841d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008421:	c1 ff 1f             	sar    edi,0x1f
c0008424:	57                   	push   edi
c0008425:	56                   	push   esi
c0008426:	52                   	push   edx
c0008427:	50                   	push   eax
c0008428:	e8 a3 74 01 00       	call   c001f8d0 <__umoddi3>
c000842d:	83 c4 10             	add    esp,0x10
c0008430:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008435:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008438:	75 10                	jne    c000844a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000843a:	83 ec 0c             	sub    esp,0xc
c000843d:	68 d2 0e 02 c0       	push   0xc0020ed2
c0008442:	e8 98 91 00 00       	call   c00115df <KePanic(char const*)>
c0008447:	83 c4 10             	add    esp,0x10
c000844a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000844e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008452:	89 10                	mov    DWORD PTR [eax],edx
c0008454:	83 c4 1c             	add    esp,0x1c
c0008457:	31 c0                	xor    eax,eax
c0008459:	5b                   	pop    ebx
c000845a:	5e                   	pop    esi
c000845b:	5f                   	pop    edi
c000845c:	5d                   	pop    ebp
c000845d:	c3                   	ret    

c000845e <Pipe::Pipe(int)>:
c000845e:	83 ec 0c             	sub    esp,0xc
c0008461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008465:	83 ec 08             	sub    esp,0x8
c0008468:	6a 00                	push   0x0
c000846a:	50                   	push   eax
c000846b:	e8 56 0d 00 00       	call   c00091c6 <UnixFile::UnixFile(int)>
c0008470:	83 c4 10             	add    esp,0x10
c0008473:	ba f8 0e 02 c0       	mov    edx,0xc0020ef8
c0008478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847c:	89 10                	mov    DWORD PTR [eax],edx
c000847e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008482:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008486:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000848d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008498:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000849f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084a3:	83 ec 0c             	sub    esp,0xc
c00084a6:	50                   	push   eax
c00084a7:	e8 47 f6 ff ff       	call   c0007af3 <malloc>
c00084ac:	83 c4 10             	add    esp,0x10
c00084af:	89 c2                	mov    edx,eax
c00084b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084c0:	90                   	nop
c00084c1:	83 c4 0c             	add    esp,0xc
c00084c4:	c3                   	ret    
c00084c5:	90                   	nop

c00084c6 <VgaText::isAtty()>:
c00084c6:	b0 01                	mov    al,0x1
c00084c8:	c3                   	ret    
c00084c9:	90                   	nop

c00084ca <VgaText::~VgaText()>:
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	ba 40 0f 02 c0       	mov    edx,0xc0020f40
c00084d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084d6:	89 10                	mov    DWORD PTR [eax],edx
c00084d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 c7 0e 00 00       	call   c00093ac <UnixFile::~UnixFile()>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	90                   	nop
c00084e9:	83 c4 0c             	add    esp,0xc
c00084ec:	c3                   	ret    
c00084ed:	90                   	nop

c00084ee <VgaText::~VgaText()>:
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	83 ec 0c             	sub    esp,0xc
c00084f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f8:	e8 cd ff ff ff       	call   c00084ca <VgaText::~VgaText()>
c00084fd:	83 c4 10             	add    esp,0x10
c0008500:	83 ec 08             	sub    esp,0x8
c0008503:	68 84 01 00 00       	push   0x184
c0008508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000850c:	e8 1b 23 00 00       	call   c000a82c <operator delete(void*, unsigned long)>
c0008511:	83 c4 10             	add    esp,0x10
c0008514:	83 c4 0c             	add    esp,0xc
c0008517:	c3                   	ret    

c0008518 <VgaText::read(unsigned long long, void*, int*)>:
c0008518:	83 ec 10             	sub    esp,0x10
c000851b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000851f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008527:	e8 76 53 00 00       	call   c000d8a2 <readKeyboard(VgaText*, char*, unsigned long)>
c000852c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008530:	89 02                	mov    DWORD PTR [edx],eax
c0008532:	31 c0                	xor    eax,eax
c0008534:	83 c4 1c             	add    esp,0x1c
c0008537:	c3                   	ret    

c0008538 <setTerminalScrollLock(bool)>:
c0008538:	c3                   	ret    

c0008539 <doTerminalCycle()>:
c0008539:	c3                   	ret    

c000853a <addToTerminalCycle(VgaText*)>:
c000853a:	c3                   	ret    

c000853b <scrollTerminalScrollLock(int)>:
c000853b:	c3                   	ret    

c000853c <VgaText::updateTitle()>:
c000853c:	c3                   	ret    
c000853d:	90                   	nop

c000853e <VgaText::load()>:
c000853e:	c3                   	ret    
c000853f:	90                   	nop

c0008540 <VgaText::updateCursor()>:
c0008540:	83 ec 14             	sub    esp,0x14
c0008543:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008547:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000854a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000854d:	e8 5a 09 01 00       	call   c0018eac <HalConsoleCursorUpdate(int, int)>
c0008552:	83 c4 1c             	add    esp,0x1c
c0008555:	c3                   	ret    

c0008556 <VgaText::doANSI_SGR(int)>:
c0008556:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000855a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000855e:	85 d2                	test   edx,edx
c0008560:	75 0b                	jne    c000856d <VgaText::doANSI_SGR(int)+0x17>
c0008562:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008565:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008568:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000856b:	eb 59                	jmp    c00085c6 <VgaText::doANSI_SGR(int)+0x70>
c000856d:	83 fa 07             	cmp    edx,0x7
c0008570:	75 0b                	jne    c000857d <VgaText::doANSI_SGR(int)+0x27>
c0008572:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008575:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008578:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000857b:	eb 49                	jmp    c00085c6 <VgaText::doANSI_SGR(int)+0x70>
c000857d:	83 fa 1b             	cmp    edx,0x1b
c0008580:	74 e0                	je     c0008562 <VgaText::doANSI_SGR(int)+0xc>
c0008582:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008585:	83 f9 07             	cmp    ecx,0x7
c0008588:	77 09                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x3d>
c000858a:	8b 14 8d 80 37 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc880]
c0008591:	eb 20                	jmp    c00085b3 <VgaText::doANSI_SGR(int)+0x5d>
c0008593:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008596:	83 f9 07             	cmp    ecx,0x7
c0008599:	77 09                	ja     c00085a4 <VgaText::doANSI_SGR(int)+0x4e>
c000859b:	8b 14 8d 80 37 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc880]
c00085a2:	eb 22                	jmp    c00085c6 <VgaText::doANSI_SGR(int)+0x70>
c00085a4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00085a7:	83 f9 07             	cmp    ecx,0x7
c00085aa:	77 0b                	ja     c00085b7 <VgaText::doANSI_SGR(int)+0x61>
c00085ac:	8b 14 95 38 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc9c8]
c00085b3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b6:	c3                   	ret    
c00085b7:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00085ba:	83 f9 07             	cmp    ecx,0x7
c00085bd:	77 0a                	ja     c00085c9 <VgaText::doANSI_SGR(int)+0x73>
c00085bf:	8b 14 95 10 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc9f0]
c00085c6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085c9:	c3                   	ret    

c00085ca <VgaText::setDefaultBgColour(VgaColour)>:
c00085ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085d2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085d5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085d8:	c3                   	ret    
c00085d9:	90                   	nop

c00085da <VgaText::setDefaultFgColour(VgaColour)>:
c00085da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085e5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085e8:	c3                   	ret    
c00085e9:	90                   	nop

c00085ea <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ea:	53                   	push   ebx
c00085eb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085ef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085f7:	51                   	push   ecx
c00085f8:	e8 cd ff ff ff       	call   c00085ca <VgaText::setDefaultBgColour(VgaColour)>
c00085fd:	58                   	pop    eax
c00085fe:	5a                   	pop    edx
c00085ff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008603:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008607:	5b                   	pop    ebx
c0008608:	eb d0                	jmp    c00085da <VgaText::setDefaultFgColour(VgaColour)>

c000860a <VgaText::setTitleTextColour(VgaColour)>:
c000860a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000860e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008612:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008615:	c3                   	ret    

c0008616 <VgaText::setTitleColour(VgaColour)>:
c0008616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000861a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000861e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008621:	c3                   	ret    

c0008622 <VgaText::setTitle(char*)>:
c0008622:	c3                   	ret    
c0008623:	90                   	nop

c0008624 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008628:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000862d:	83 e0 0f             	and    eax,0xf
c0008630:	c1 e2 04             	shl    edx,0x4
c0008633:	09 d0                	or     eax,edx
c0008635:	c3                   	ret    

c0008636 <VgaText::scrollScreen()>:
c0008636:	55                   	push   ebp
c0008637:	57                   	push   edi
c0008638:	56                   	push   esi
c0008639:	be 01 00 00 00       	mov    esi,0x1
c000863e:	53                   	push   ebx
c000863f:	83 ec 0c             	sub    esp,0xc
c0008642:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008646:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008649:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000864f:	31 ff                	xor    edi,edi
c0008651:	01 e9                	add    ecx,ebp
c0008653:	8a 01                	mov    al,BYTE PTR [ecx]
c0008655:	83 fe 18             	cmp    esi,0x18
c0008658:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000865e:	75 20                	jne    c0008680 <VgaText::scrollScreen()+0x4a>
c0008660:	f7 c7 01 00 00 00    	test   edi,0x1
c0008666:	74 15                	je     c000867d <VgaText::scrollScreen()+0x47>
c0008668:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000866c:	50                   	push   eax
c000866d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008671:	50                   	push   eax
c0008672:	e8 ad ff ff ff       	call   c0008624 <VgaText::combineColours(unsigned char, unsigned char)>
c0008677:	5a                   	pop    edx
c0008678:	5a                   	pop    edx
c0008679:	88 01                	mov    BYTE PTR [ecx],al
c000867b:	eb 03                	jmp    c0008680 <VgaText::scrollScreen()+0x4a>
c000867d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008680:	47                   	inc    edi
c0008681:	41                   	inc    ecx
c0008682:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008688:	75 c9                	jne    c0008653 <VgaText::scrollScreen()+0x1d>
c000868a:	46                   	inc    esi
c000868b:	83 fe 19             	cmp    esi,0x19
c000868e:	75 b9                	jne    c0008649 <VgaText::scrollScreen()+0x13>
c0008690:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008696:	75 1f                	jne    c00086b7 <VgaText::scrollScreen()+0x81>
c0008698:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000869c:	74 05                	je     c00086a3 <VgaText::scrollScreen()+0x6d>
c000869e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00086a1:	eb 14                	jmp    c00086b7 <VgaText::scrollScreen()+0x81>
c00086a3:	50                   	push   eax
c00086a4:	50                   	push   eax
c00086a5:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00086a9:	50                   	push   eax
c00086aa:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00086ae:	50                   	push   eax
c00086af:	e8 8c 06 01 00       	call   c0018d40 <HalConsoleScroll(int, int)>
c00086b4:	83 c4 10             	add    esp,0x10
c00086b7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00086bb:	83 c4 0c             	add    esp,0xc
c00086be:	5b                   	pop    ebx
c00086bf:	5e                   	pop    esi
c00086c0:	5f                   	pop    edi
c00086c1:	5d                   	pop    ebp
c00086c2:	e9 79 fe ff ff       	jmp    c0008540 <VgaText::updateCursor()>
c00086c7:	90                   	nop

c00086c8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086cd:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086d2:	c1 e0 08             	shl    eax,0x8
c00086d5:	09 d0                	or     eax,edx
c00086d7:	c3                   	ret    

c00086d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086d8:	55                   	push   ebp
c00086d9:	57                   	push   edi
c00086da:	56                   	push   esi
c00086db:	53                   	push   ebx
c00086dc:	83 ec 1c             	sub    esp,0x1c
c00086df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086e3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086eb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086f3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086f7:	0f b6 c3             	movzx  eax,bl
c00086fa:	50                   	push   eax
c00086fb:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008700:	50                   	push   eax
c0008701:	e8 1e ff ff ff       	call   c0008624 <VgaText::combineColours(unsigned char, unsigned char)>
c0008706:	5a                   	pop    edx
c0008707:	59                   	pop    ecx
c0008708:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000870d:	0f b6 c0             	movzx  eax,al
c0008710:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008714:	50                   	push   eax
c0008715:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008719:	e8 aa ff ff ff       	call   c00086c8 <VgaText::combineCharAndColour(char, unsigned char)>
c000871e:	5a                   	pop    edx
c000871f:	6b d7 50             	imul   edx,edi,0x50
c0008722:	59                   	pop    ecx
c0008723:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008726:	01 f2                	add    edx,esi
c0008728:	0f b7 d2             	movzx  edx,dx
c000872b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000872f:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008735:	75 28                	jne    c000875f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008737:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000873b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008743:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008747:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000874b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000874f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008753:	83 c4 1c             	add    esp,0x1c
c0008756:	5b                   	pop    ebx
c0008757:	5e                   	pop    esi
c0008758:	5f                   	pop    edi
c0008759:	5d                   	pop    ebp
c000875a:	e9 e9 06 01 00       	jmp    c0018e48 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000875f:	83 c4 1c             	add    esp,0x1c
c0008762:	5b                   	pop    ebx
c0008763:	5e                   	pop    esi
c0008764:	5f                   	pop    edi
c0008765:	5d                   	pop    ebp
c0008766:	c3                   	ret    
c0008767:	90                   	nop

c0008768 <VgaText::getCursorX()>:
c0008768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000876c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000876f:	c3                   	ret    

c0008770 <VgaText::getCursorY()>:
c0008770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008774:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008777:	c3                   	ret    

c0008778 <VgaText::setCursor(int, int)>:
c0008778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000877c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008780:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008783:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008787:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000878a:	e9 b1 fd ff ff       	jmp    c0008540 <VgaText::updateCursor()>

c000878f <setActiveTerminal(VgaText*)>:
c000878f:	53                   	push   ebx
c0008790:	83 ec 08             	sub    esp,0x8
c0008793:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008797:	85 db                	test   ebx,ebx
c0008799:	75 11                	jne    c00087ac <setActiveTerminal(VgaText*)+0x1d>
c000879b:	c7 44 24 10 0c 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f0c
c00087a3:	83 c4 08             	add    esp,0x8
c00087a6:	5b                   	pop    ebx
c00087a7:	e9 33 8e 00 00       	jmp    c00115df <KePanic(char const*)>
c00087ac:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00087b1:	85 c0                	test   eax,eax
c00087b3:	74 0c                	je     c00087c1 <setActiveTerminal(VgaText*)+0x32>
c00087b5:	83 ec 0c             	sub    esp,0xc
c00087b8:	50                   	push   eax
c00087b9:	e8 82 fd ff ff       	call   c0008540 <VgaText::updateCursor()>
c00087be:	83 c4 10             	add    esp,0x10
c00087c1:	50                   	push   eax
c00087c2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087c5:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087cb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ce:	53                   	push   ebx
c00087cf:	e8 a4 ff ff ff       	call   c0008778 <VgaText::setCursor(int, int)>
c00087d4:	83 c4 18             	add    esp,0x18
c00087d7:	5b                   	pop    ebx
c00087d8:	c3                   	ret    
c00087d9:	90                   	nop

c00087da <VgaText::clearScreen()>:
c00087da:	57                   	push   edi
c00087db:	56                   	push   esi
c00087dc:	31 f6                	xor    esi,esi
c00087de:	53                   	push   ebx
c00087df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087e3:	52                   	push   edx
c00087e4:	6a 00                	push   0x0
c00087e6:	6a 00                	push   0x0
c00087e8:	53                   	push   ebx
c00087e9:	e8 8a ff ff ff       	call   c0008778 <VgaText::setCursor(int, int)>
c00087ee:	83 c4 10             	add    esp,0x10
c00087f1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087f8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087fb:	7e 20                	jle    c000881d <VgaText::clearScreen()+0x43>
c00087fd:	31 ff                	xor    edi,edi
c00087ff:	50                   	push   eax
c0008800:	50                   	push   eax
c0008801:	56                   	push   esi
c0008802:	57                   	push   edi
c0008803:	47                   	inc    edi
c0008804:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008807:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000880a:	6a 20                	push   0x20
c000880c:	53                   	push   ebx
c000880d:	e8 c6 fe ff ff       	call   c00086d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008812:	83 c4 20             	add    esp,0x20
c0008815:	83 ff 50             	cmp    edi,0x50
c0008818:	75 e5                	jne    c00087ff <VgaText::clearScreen()+0x25>
c000881a:	46                   	inc    esi
c000881b:	eb db                	jmp    c00087f8 <VgaText::clearScreen()+0x1e>
c000881d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008824:	5b                   	pop    ebx
c0008825:	5e                   	pop    esi
c0008826:	5f                   	pop    edi
c0008827:	c3                   	ret    

c0008828 <VgaText::setCursorX(int)>:
c0008828:	83 ec 10             	sub    esp,0x10
c000882b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000882f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008836:	50                   	push   eax
c0008837:	e8 3c ff ff ff       	call   c0008778 <VgaText::setCursor(int, int)>
c000883c:	83 c4 1c             	add    esp,0x1c
c000883f:	c3                   	ret    

c0008840 <VgaText::setCursorY(int)>:
c0008840:	83 ec 10             	sub    esp,0x10
c0008843:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008847:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000884b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000884e:	50                   	push   eax
c000884f:	e8 24 ff ff ff       	call   c0008778 <VgaText::setCursor(int, int)>
c0008854:	83 c4 1c             	add    esp,0x1c
c0008857:	c3                   	ret    

c0008858 <VgaText::incrementCursor(bool)>:
c0008858:	56                   	push   esi
c0008859:	53                   	push   ebx
c000885a:	51                   	push   ecx
c000885b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000885f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008863:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008866:	40                   	inc    eax
c0008867:	83 f8 50             	cmp    eax,0x50
c000886a:	74 05                	je     c0008871 <VgaText::incrementCursor(bool)+0x19>
c000886c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000886f:	eb 24                	jmp    c0008895 <VgaText::incrementCursor(bool)+0x3d>
c0008871:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008878:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000887b:	8d 50 01             	lea    edx,[eax+0x1]
c000887e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008881:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008884:	75 0f                	jne    c0008895 <VgaText::incrementCursor(bool)+0x3d>
c0008886:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008889:	83 ec 0c             	sub    esp,0xc
c000888c:	53                   	push   ebx
c000888d:	e8 a4 fd ff ff       	call   c0008636 <VgaText::scrollScreen()>
c0008892:	83 c4 10             	add    esp,0x10
c0008895:	89 f0                	mov    eax,esi
c0008897:	84 c0                	test   al,al
c0008899:	74 0c                	je     c00088a7 <VgaText::incrementCursor(bool)+0x4f>
c000889b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000889f:	5a                   	pop    edx
c00088a0:	5b                   	pop    ebx
c00088a1:	5e                   	pop    esi
c00088a2:	e9 99 fc ff ff       	jmp    c0008540 <VgaText::updateCursor()>
c00088a7:	58                   	pop    eax
c00088a8:	5b                   	pop    ebx
c00088a9:	5e                   	pop    esi
c00088aa:	c3                   	ret    
c00088ab:	90                   	nop

c00088ac <VgaText::decrementCursor(bool)>:
c00088ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00088b4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088b7:	85 c0                	test   eax,eax
c00088b9:	74 04                	je     c00088bf <VgaText::decrementCursor(bool)+0x13>
c00088bb:	48                   	dec    eax
c00088bc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00088bf:	84 c9                	test   cl,cl
c00088c1:	74 09                	je     c00088cc <VgaText::decrementCursor(bool)+0x20>
c00088c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088c7:	e9 74 fc ff ff       	jmp    c0008540 <VgaText::updateCursor()>
c00088cc:	c3                   	ret    
c00088cd:	90                   	nop

c00088ce <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ce:	53                   	push   ebx
c00088cf:	83 ec 08             	sub    esp,0x8
c00088d2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088df:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088e3:	83 f8 07             	cmp    eax,0x7
c00088e6:	75 21                	jne    c0008909 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088f0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088f8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008900:	83 c4 08             	add    esp,0x8
c0008903:	5b                   	pop    ebx
c0008904:	e9 d6 3a 00 00       	jmp    c000c3df <Krnl::beep(int, int, bool)>
c0008909:	83 f8 0d             	cmp    eax,0xd
c000890c:	75 09                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c000890e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008915:	eb 2d                	jmp    c0008944 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0008917:	83 f8 0a             	cmp    eax,0xa
c000891a:	75 31                	jne    c000894d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c000891c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008923:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008926:	8d 50 01             	lea    edx,[eax+0x1]
c0008929:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000892c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000892f:	75 0f                	jne    c0008940 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008931:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008934:	83 ec 0c             	sub    esp,0xc
c0008937:	53                   	push   ebx
c0008938:	e8 f9 fc ff ff       	call   c0008636 <VgaText::scrollScreen()>
c000893d:	83 c4 10             	add    esp,0x10
c0008940:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008944:	83 c4 08             	add    esp,0x8
c0008947:	5b                   	pop    ebx
c0008948:	e9 f3 fb ff ff       	jmp    c0008540 <VgaText::updateCursor()>
c000894d:	83 f8 08             	cmp    eax,0x8
c0008950:	75 25                	jne    c0008977 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008952:	50                   	push   eax
c0008953:	50                   	push   eax
c0008954:	6a 01                	push   0x1
c0008956:	53                   	push   ebx
c0008957:	e8 50 ff ff ff       	call   c00088ac <VgaText::decrementCursor(bool)>
c000895c:	5a                   	pop    edx
c000895d:	59                   	pop    ecx
c000895e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008961:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008964:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008967:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000896a:	6a 20                	push   0x20
c000896c:	53                   	push   ebx
c000896d:	e8 66 fd ff ff       	call   c00086d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008972:	83 c4 28             	add    esp,0x28
c0008975:	5b                   	pop    ebx
c0008976:	c3                   	ret    
c0008977:	83 ec 08             	sub    esp,0x8
c000897a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000897d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008980:	51                   	push   ecx
c0008981:	52                   	push   edx
c0008982:	50                   	push   eax
c0008983:	53                   	push   ebx
c0008984:	e8 4f fd ff ff       	call   c00086d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008989:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000898d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008995:	83 c4 28             	add    esp,0x28
c0008998:	5b                   	pop    ebx
c0008999:	e9 ba fe ff ff       	jmp    c0008858 <VgaText::incrementCursor(bool)>

c000899e <VgaText::putchar(char)>:
c000899e:	57                   	push   edi
c000899f:	56                   	push   esi
c00089a0:	53                   	push   ebx
c00089a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00089a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00089a9:	0f be c2             	movsx  eax,dl
c00089ac:	83 f8 5b             	cmp    eax,0x5b
c00089af:	75 18                	jne    c00089c9 <VgaText::putchar(char)+0x2b>
c00089b1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00089b5:	74 20                	je     c00089d7 <VgaText::putchar(char)+0x39>
c00089b7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00089bd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089c4:	e9 b8 00 00 00       	jmp    c0008a81 <VgaText::putchar(char)+0xe3>
c00089c9:	83 f8 1b             	cmp    eax,0x1b
c00089cc:	75 09                	jne    c00089d7 <VgaText::putchar(char)+0x39>
c00089ce:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089d2:	e9 aa 00 00 00       	jmp    c0008a81 <VgaText::putchar(char)+0xe3>
c00089d7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089db:	89 f9                	mov    ecx,edi
c00089dd:	84 c9                	test   cl,cl
c00089df:	0f 84 8c 00 00 00    	je     c0008a71 <VgaText::putchar(char)+0xd3>
c00089e5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089e8:	80 f9 3e             	cmp    cl,0x3e
c00089eb:	77 70                	ja     c0008a5d <VgaText::putchar(char)+0xbf>
c00089ed:	83 f8 6d             	cmp    eax,0x6d
c00089f0:	75 3f                	jne    c0008a31 <VgaText::putchar(char)+0x93>
c00089f2:	31 f6                	xor    esi,esi
c00089f4:	31 d2                	xor    edx,edx
c00089f6:	31 c0                	xor    eax,eax
c00089f8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089fb:	7e 25                	jle    c0008a22 <VgaText::putchar(char)+0x84>
c00089fd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008a02:	83 fa 3b             	cmp    edx,0x3b
c0008a05:	75 0f                	jne    c0008a16 <VgaText::putchar(char)+0x78>
c0008a07:	50                   	push   eax
c0008a08:	53                   	push   ebx
c0008a09:	e8 48 fb ff ff       	call   c0008556 <VgaText::doANSI_SGR(int)>
c0008a0e:	31 d2                	xor    edx,edx
c0008a10:	59                   	pop    ecx
c0008a11:	58                   	pop    eax
c0008a12:	31 c0                	xor    eax,eax
c0008a14:	eb 09                	jmp    c0008a1f <VgaText::putchar(char)+0x81>
c0008a16:	6b c0 0a             	imul   eax,eax,0xa
c0008a19:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008a1d:	89 fa                	mov    edx,edi
c0008a1f:	46                   	inc    esi
c0008a20:	eb d6                	jmp    c00089f8 <VgaText::putchar(char)+0x5a>
c0008a22:	84 d2                	test   dl,dl
c0008a24:	74 2f                	je     c0008a55 <VgaText::putchar(char)+0xb7>
c0008a26:	50                   	push   eax
c0008a27:	53                   	push   ebx
c0008a28:	e8 29 fb ff ff       	call   c0008556 <VgaText::doANSI_SGR(int)>
c0008a2d:	58                   	pop    eax
c0008a2e:	5a                   	pop    edx
c0008a2f:	eb 24                	jmp    c0008a55 <VgaText::putchar(char)+0xb7>
c0008a31:	83 f8 4a             	cmp    eax,0x4a
c0008a34:	75 1f                	jne    c0008a55 <VgaText::putchar(char)+0xb7>
c0008a36:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a3a:	75 19                	jne    c0008a55 <VgaText::putchar(char)+0xb7>
c0008a3c:	83 ec 0c             	sub    esp,0xc
c0008a3f:	53                   	push   ebx
c0008a40:	e8 95 fd ff ff       	call   c00087da <VgaText::clearScreen()>
c0008a45:	83 c4 0c             	add    esp,0xc
c0008a48:	6a 00                	push   0x0
c0008a4a:	6a 00                	push   0x0
c0008a4c:	53                   	push   ebx
c0008a4d:	e8 26 fd ff ff       	call   c0008778 <VgaText::setCursor(int, int)>
c0008a52:	83 c4 10             	add    esp,0x10
c0008a55:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a5b:	eb 24                	jmp    c0008a81 <VgaText::putchar(char)+0xe3>
c0008a5d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a60:	83 f8 0e             	cmp    eax,0xe
c0008a63:	7f 1c                	jg     c0008a81 <VgaText::putchar(char)+0xe3>
c0008a65:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a68:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a6b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a6f:	eb 10                	jmp    c0008a81 <VgaText::putchar(char)+0xe3>
c0008a71:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a74:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a77:	50                   	push   eax
c0008a78:	53                   	push   ebx
c0008a79:	e8 50 fe ff ff       	call   c00088ce <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a7e:	83 c4 10             	add    esp,0x10
c0008a81:	5b                   	pop    ebx
c0008a82:	5e                   	pop    esi
c0008a83:	5f                   	pop    edi
c0008a84:	c3                   	ret    
c0008a85:	90                   	nop

c0008a86 <VgaText::putx(unsigned int)>:
c0008a86:	57                   	push   edi
c0008a87:	b9 11 00 00 00       	mov    ecx,0x11
c0008a8c:	56                   	push   esi
c0008a8d:	be 1a 0f 02 c0       	mov    esi,0xc0020f1a
c0008a92:	53                   	push   ebx
c0008a93:	83 ec 20             	sub    esp,0x20
c0008a96:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a9a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a9e:	fc                   	cld    
c0008a9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008aa1:	be 08 00 00 00       	mov    esi,0x8
c0008aa6:	50                   	push   eax
c0008aa7:	50                   	push   eax
c0008aa8:	89 d8                	mov    eax,ebx
c0008aaa:	c1 e8 1c             	shr    eax,0x1c
c0008aad:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008ab2:	c1 e3 04             	shl    ebx,0x4
c0008ab5:	50                   	push   eax
c0008ab6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008aba:	e8 df fe ff ff       	call   c000899e <VgaText::putchar(char)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	4e                   	dec    esi
c0008ac3:	75 e1                	jne    c0008aa6 <VgaText::putx(unsigned int)+0x20>
c0008ac5:	83 c4 20             	add    esp,0x20
c0008ac8:	5b                   	pop    ebx
c0008ac9:	5e                   	pop    esi
c0008aca:	5f                   	pop    edi
c0008acb:	c3                   	ret    

c0008acc <VgaText::puts(char const*)>:
c0008acc:	53                   	push   ebx
c0008acd:	83 ec 08             	sub    esp,0x8
c0008ad0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ad4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ad7:	85 c0                	test   eax,eax
c0008ad9:	74 12                	je     c0008aed <VgaText::puts(char const*)+0x21>
c0008adb:	51                   	push   ecx
c0008adc:	43                   	inc    ebx
c0008add:	51                   	push   ecx
c0008ade:	50                   	push   eax
c0008adf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ae3:	e8 b6 fe ff ff       	call   c000899e <VgaText::putchar(char)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	eb e7                	jmp    c0008ad4 <VgaText::puts(char const*)+0x8>
c0008aed:	83 c4 08             	add    esp,0x8
c0008af0:	5b                   	pop    ebx
c0008af1:	c3                   	ret    

c0008af2 <VgaText::write(unsigned long long, void*, int*)>:
c0008af2:	55                   	push   ebp
c0008af3:	57                   	push   edi
c0008af4:	56                   	push   esi
c0008af5:	53                   	push   ebx
c0008af6:	83 ec 0c             	sub    esp,0xc
c0008af9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008afd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b01:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008b05:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008b0c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008b0f:	39 eb                	cmp    ebx,ebp
c0008b11:	74 13                	je     c0008b26 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008b13:	50                   	push   eax
c0008b14:	43                   	inc    ebx
c0008b15:	50                   	push   eax
c0008b16:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008b1a:	50                   	push   eax
c0008b1b:	56                   	push   esi
c0008b1c:	e8 7d fe ff ff       	call   c000899e <VgaText::putchar(char)>
c0008b21:	83 c4 10             	add    esp,0x10
c0008b24:	eb e9                	jmp    c0008b0f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b26:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b31:	89 38                	mov    DWORD PTR [eax],edi
c0008b33:	83 c4 0c             	add    esp,0xc
c0008b36:	31 c0                	xor    eax,eax
c0008b38:	5b                   	pop    ebx
c0008b39:	5e                   	pop    esi
c0008b3a:	5f                   	pop    edi
c0008b3b:	5d                   	pop    ebp
c0008b3c:	c3                   	ret    
c0008b3d:	90                   	nop

c0008b3e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b3e:	55                   	push   ebp
c0008b3f:	57                   	push   edi
c0008b40:	56                   	push   esi
c0008b41:	53                   	push   ebx
c0008b42:	83 ec 0c             	sub    esp,0xc
c0008b45:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b4e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b55:	50                   	push   eax
c0008b56:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b5b:	50                   	push   eax
c0008b5c:	e8 c3 fa ff ff       	call   c0008624 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b61:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b65:	5a                   	pop    edx
c0008b66:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b69:	59                   	pop    ecx
c0008b6a:	0f b6 f8             	movzx  edi,al
c0008b6d:	0f b7 db             	movzx  ebx,bx
c0008b70:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b74:	01 db                	add    ebx,ebx
c0008b76:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b79:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b7c:	85 c0                	test   eax,eax
c0008b7e:	0f 84 ef 00 00 00    	je     c0008c73 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b84:	83 f8 0d             	cmp    eax,0xd
c0008b87:	75 0c                	jne    c0008b95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b89:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b90:	e9 d8 00 00 00       	jmp    c0008c6d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b95:	83 f8 0a             	cmp    eax,0xa
c0008b98:	75 44                	jne    c0008bde <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b9a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008ba1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008ba4:	8d 48 01             	lea    ecx,[eax+0x1]
c0008ba7:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008baa:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008bad:	75 0f                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008baf:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008bb2:	83 ec 0c             	sub    esp,0xc
c0008bb5:	55                   	push   ebp
c0008bb6:	e8 7b fa ff ff       	call   c0008636 <VgaText::scrollScreen()>
c0008bbb:	83 c4 10             	add    esp,0x10
c0008bbe:	83 ec 0c             	sub    esp,0xc
c0008bc1:	55                   	push   ebp
c0008bc2:	e8 79 f9 ff ff       	call   c0008540 <VgaText::updateCursor()>
c0008bc7:	83 c4 10             	add    esp,0x10
c0008bca:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bce:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bd1:	0f b7 db             	movzx  ebx,bx
c0008bd4:	01 db                	add    ebx,ebx
c0008bd6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bd9:	e9 8f 00 00 00       	jmp    c0008c6d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bde:	83 f8 08             	cmp    eax,0x8
c0008be1:	75 34                	jne    c0008c17 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008be3:	51                   	push   ecx
c0008be4:	51                   	push   ecx
c0008be5:	6a 01                	push   0x1
c0008be7:	55                   	push   ebp
c0008be8:	e8 bf fc ff ff       	call   c00088ac <VgaText::decrementCursor(bool)>
c0008bed:	5b                   	pop    ebx
c0008bee:	58                   	pop    eax
c0008bef:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bf2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bf5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bf8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bfb:	6a 20                	push   0x20
c0008bfd:	55                   	push   ebp
c0008bfe:	e8 d5 fa ff ff       	call   c00086d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c03:	83 c4 20             	add    esp,0x20
c0008c06:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c0a:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008c0d:	0f b7 db             	movzx  ebx,bx
c0008c10:	01 db                	add    ebx,ebx
c0008c12:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c15:	eb 56                	jmp    c0008c6d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c17:	52                   	push   edx
c0008c18:	52                   	push   edx
c0008c19:	57                   	push   edi
c0008c1a:	50                   	push   eax
c0008c1b:	e8 a8 fa ff ff       	call   c00086c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c20:	83 c4 10             	add    esp,0x10
c0008c23:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c26:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008c2c:	75 1d                	jne    c0008c4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c2e:	83 ec 0c             	sub    esp,0xc
c0008c31:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c34:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c37:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c3b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c3f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c42:	50                   	push   eax
c0008c43:	e8 00 02 01 00       	call   c0018e48 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c48:	83 c4 20             	add    esp,0x20
c0008c4b:	50                   	push   eax
c0008c4c:	83 c3 02             	add    ebx,0x2
c0008c4f:	50                   	push   eax
c0008c50:	6a 00                	push   0x0
c0008c52:	55                   	push   ebp
c0008c53:	e8 00 fc ff ff       	call   c0008858 <VgaText::incrementCursor(bool)>
c0008c58:	83 c4 10             	add    esp,0x10
c0008c5b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c5f:	75 0c                	jne    c0008c6d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c61:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c65:	0f b7 db             	movzx  ebx,bx
c0008c68:	01 db                	add    ebx,ebx
c0008c6a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c6d:	46                   	inc    esi
c0008c6e:	e9 06 ff ff ff       	jmp    c0008b79 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c73:	83 ec 0c             	sub    esp,0xc
c0008c76:	55                   	push   ebp
c0008c77:	e8 c4 f8 ff ff       	call   c0008540 <VgaText::updateCursor()>
c0008c7c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c83:	83 c4 1c             	add    esp,0x1c
c0008c86:	5b                   	pop    ebx
c0008c87:	5e                   	pop    esi
c0008c88:	5f                   	pop    edi
c0008c89:	5d                   	pop    ebp
c0008c8a:	c3                   	ret    
c0008c8b:	90                   	nop

c0008c8c <VgaText::VgaText(char const*)>:
c0008c8c:	56                   	push   esi
c0008c8d:	53                   	push   ebx
c0008c8e:	83 ec 04             	sub    esp,0x4
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	83 ec 08             	sub    esp,0x8
c0008c98:	6a 00                	push   0x0
c0008c9a:	50                   	push   eax
c0008c9b:	e8 26 05 00 00       	call   c00091c6 <UnixFile::UnixFile(int)>
c0008ca0:	83 c4 10             	add    esp,0x10
c0008ca3:	ba 40 0f 02 c0       	mov    edx,0xc0020f40
c0008ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cac:	89 10                	mov    DWORD PTR [eax],edx
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cee:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d04:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008d0b:	83 ec 0c             	sub    esp,0xc
c0008d0e:	6a 01                	push   0x1
c0008d10:	e8 00 09 00 00       	call   c0009615 <Virt::allocateKernelVirtualPages(int)>
c0008d15:	83 c4 10             	add    esp,0x10
c0008d18:	89 c2                	mov    edx,eax
c0008d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d1e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d21:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d2b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2e:	89 c6                	mov    esi,eax
c0008d30:	e8 cd f0 ff ff       	call   c0007e02 <Phys::allocatePage()>
c0008d35:	68 05 0c 00 00       	push   0xc05
c0008d3a:	56                   	push   esi
c0008d3b:	50                   	push   eax
c0008d3c:	53                   	push   ebx
c0008d3d:	e8 dc 0f 00 00       	call   c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d42:	83 c4 10             	add    esp,0x10
c0008d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d49:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	68 a0 0f 00 00       	push   0xfa0
c0008d54:	6a 00                	push   0x0
c0008d56:	50                   	push   eax
c0008d57:	e8 94 77 ff ff       	call   c00004f0 <memset>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 04             	sub    esp,0x4
c0008d62:	6a 00                	push   0x0
c0008d64:	6a 07                	push   0x7
c0008d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6a:	e8 7b f8 ff ff       	call   c00085ea <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d6f:	83 c4 10             	add    esp,0x10
c0008d72:	83 ec 04             	sub    esp,0x4
c0008d75:	6a 00                	push   0x0
c0008d77:	6a 00                	push   0x0
c0008d79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d7d:	e8 f6 f9 ff ff       	call   c0008778 <VgaText::setCursor(int, int)>
c0008d82:	83 c4 10             	add    esp,0x10
c0008d85:	83 ec 0c             	sub    esp,0xc
c0008d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d8c:	e8 49 fa ff ff       	call   c00087da <VgaText::clearScreen()>
c0008d91:	83 c4 10             	add    esp,0x10
c0008d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d98:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008da0:	05 82 00 00 00       	add    eax,0x82
c0008da5:	83 ec 04             	sub    esp,0x4
c0008da8:	68 80 00 00 00       	push   0x80
c0008dad:	6a 00                	push   0x0
c0008daf:	50                   	push   eax
c0008db0:	e8 3b 77 ff ff       	call   c00004f0 <memset>
c0008db5:	83 c4 10             	add    esp,0x10
c0008db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dbc:	05 02 01 00 00       	add    eax,0x102
c0008dc1:	83 ec 04             	sub    esp,0x4
c0008dc4:	68 80 00 00 00       	push   0x80
c0008dc9:	6a 00                	push   0x0
c0008dcb:	50                   	push   eax
c0008dcc:	e8 1f 77 ff ff       	call   c00004f0 <memset>
c0008dd1:	83 c4 10             	add    esp,0x10
c0008dd4:	90                   	nop
c0008dd5:	83 c4 04             	add    esp,0x4
c0008dd8:	5b                   	pop    ebx
c0008dd9:	5e                   	pop    esi
c0008dda:	c3                   	ret    
c0008ddb:	90                   	nop

c0008ddc <VgaText::receiveKey(unsigned char)>:
c0008ddc:	55                   	push   ebp
c0008ddd:	57                   	push   edi
c0008dde:	56                   	push   esi
c0008ddf:	53                   	push   ebx
c0008de0:	83 ec 2c             	sub    esp,0x2c
c0008de3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008de7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008deb:	89 fd                	mov    ebp,edi
c0008ded:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008df3:	0f 84 48 01 00 00    	je     c0008f41 <VgaText::receiveKey(unsigned char)+0x165>
c0008df9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dff:	83 fd 08             	cmp    ebp,0x8
c0008e02:	75 6a                	jne    c0008e6e <VgaText::receiveKey(unsigned char)+0x92>
c0008e04:	83 ec 0c             	sub    esp,0xc
c0008e07:	56                   	push   esi
c0008e08:	e8 73 77 ff ff       	call   c0000580 <strlen>
c0008e0d:	83 c4 10             	add    esp,0x10
c0008e10:	85 c0                	test   eax,eax
c0008e12:	0f 84 ef 00 00 00    	je     c0008f07 <VgaText::receiveKey(unsigned char)+0x12b>
c0008e18:	50                   	push   eax
c0008e19:	50                   	push   eax
c0008e1a:	6a 08                	push   0x8
c0008e1c:	53                   	push   ebx
c0008e1d:	e8 7c fb ff ff       	call   c000899e <VgaText::putchar(char)>
c0008e22:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e25:	e8 56 77 ff ff       	call   c0000580 <strlen>
c0008e2a:	83 c4 10             	add    esp,0x10
c0008e2d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e35:	83 fa 1f             	cmp    edx,0x1f
c0008e38:	89 d0                	mov    eax,edx
c0008e3a:	7f 1c                	jg     c0008e58 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e3c:	83 e8 08             	sub    eax,0x8
c0008e3f:	3c 02                	cmp    al,0x2
c0008e41:	76 15                	jbe    c0008e58 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e43:	83 fa 0d             	cmp    edx,0xd
c0008e46:	74 10                	je     c0008e58 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e48:	57                   	push   edi
c0008e49:	57                   	push   edi
c0008e4a:	68 2b 0f 02 c0       	push   0xc0020f2b
c0008e4f:	53                   	push   ebx
c0008e50:	e8 77 fc ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	83 ec 0c             	sub    esp,0xc
c0008e5b:	56                   	push   esi
c0008e5c:	e8 1f 77 ff ff       	call   c0000580 <strlen>
c0008e61:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e69:	e9 96 00 00 00       	jmp    c0008f04 <VgaText::receiveKey(unsigned char)+0x128>
c0008e6e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e74:	83 ec 0c             	sub    esp,0xc
c0008e77:	50                   	push   eax
c0008e78:	e8 03 77 ff ff       	call   c0000580 <strlen>
c0008e7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e84:	e8 f7 76 ff ff       	call   c0000580 <strlen>
c0008e89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e8d:	83 c4 10             	add    esp,0x10
c0008e90:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e94:	3d 80 00 00 00       	cmp    eax,0x80
c0008e99:	0f 87 a2 00 00 00    	ja     c0008f41 <VgaText::receiveKey(unsigned char)+0x165>
c0008e9f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008ea2:	3c 1e                	cmp    al,0x1e
c0008ea4:	77 35                	ja     c0008edb <VgaText::receiveKey(unsigned char)+0xff>
c0008ea6:	8d 47 f7             	lea    eax,[edi-0x9]
c0008ea9:	3c 01                	cmp    al,0x1
c0008eab:	76 2e                	jbe    c0008edb <VgaText::receiveKey(unsigned char)+0xff>
c0008ead:	83 fd 0d             	cmp    ebp,0xd
c0008eb0:	74 29                	je     c0008edb <VgaText::receiveKey(unsigned char)+0xff>
c0008eb2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb8:	68 31 0f 02 c0       	push   0xc0020f31
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 7b fc ff ff       	call   c0008b3e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ec3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ec6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ec9:	0f b6 c0             	movzx  eax,al
c0008ecc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 f8 f9 ff ff       	call   c00088ce <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ed6:	83 c4 20             	add    esp,0x20
c0008ed9:	eb 11                	jmp    c0008eec <VgaText::receiveKey(unsigned char)+0x110>
c0008edb:	51                   	push   ecx
c0008edc:	89 f8                	mov    eax,edi
c0008ede:	51                   	push   ecx
c0008edf:	0f be c0             	movsx  eax,al
c0008ee2:	50                   	push   eax
c0008ee3:	53                   	push   ebx
c0008ee4:	e8 b5 fa ff ff       	call   c000899e <VgaText::putchar(char)>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ef1:	89 f8                	mov    eax,edi
c0008ef3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ef7:	52                   	push   edx
c0008ef8:	52                   	push   edx
c0008ef9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008efd:	50                   	push   eax
c0008efe:	56                   	push   esi
c0008eff:	e8 6c 79 ff ff       	call   c0000870 <strcat>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008f0e:	75 0f                	jne    c0008f1f <VgaText::receiveKey(unsigned char)+0x143>
c0008f10:	83 fd 1c             	cmp    ebp,0x1c
c0008f13:	77 2c                	ja     c0008f41 <VgaText::receiveKey(unsigned char)+0x165>
c0008f15:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f1a:	0f a3 e8             	bt     eax,ebp
c0008f1d:	73 22                	jae    c0008f41 <VgaText::receiveKey(unsigned char)+0x165>
c0008f1f:	50                   	push   eax
c0008f20:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f26:	50                   	push   eax
c0008f27:	56                   	push   esi
c0008f28:	53                   	push   ebx
c0008f29:	e8 42 79 ff ff       	call   c0000870 <strcat>
c0008f2e:	83 c4 0c             	add    esp,0xc
c0008f31:	68 80 00 00 00       	push   0x80
c0008f36:	6a 00                	push   0x0
c0008f38:	56                   	push   esi
c0008f39:	e8 b2 75 ff ff       	call   c00004f0 <memset>
c0008f3e:	83 c4 10             	add    esp,0x10
c0008f41:	83 c4 2c             	add    esp,0x2c
c0008f44:	5b                   	pop    ebx
c0008f45:	5e                   	pop    esi
c0008f46:	5f                   	pop    edi
c0008f47:	5d                   	pop    ebp
c0008f48:	c3                   	ret    
c0008f49:	90                   	nop

c0008f4a <VgaText::doUpdate()>:
c0008f4a:	c3                   	ret    
c0008f4b:	90                   	nop

c0008f4c <TSS::TSS()>:
c0008f4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f57:	90                   	nop
c0008f58:	c3                   	ret    
c0008f59:	90                   	nop
c0008f5a:	66 90                	xchg   ax,ax

c0008f5c <TSS::setESP(unsigned long)>:
c0008f5c:	55                   	push   ebp
c0008f5d:	89 e5                	mov    ebp,esp
c0008f5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f65:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f68:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f6b:	90                   	nop
c0008f6c:	5d                   	pop    ebp
c0008f6d:	c3                   	ret    
c0008f6e:	66 90                	xchg   ax,ax

c0008f70 <TSS::flush()>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 10             	sub    esp,0x10
c0008f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f79:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f7b:	83 c8 03             	or     eax,0x3
c0008f7e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f82:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f86:	66 89 d0             	mov    ax,dx
c0008f89:	0f 00 d8             	ltr    ax
c0008f8c:	90                   	nop
c0008f8d:	c9                   	leave  
c0008f8e:	c3                   	ret    
c0008f8f:	90                   	nop

c0008f90 <TSS::setup(unsigned long, unsigned long)>:
c0008f90:	55                   	push   ebp
c0008f91:	89 e5                	mov    ebp,esp
c0008f93:	83 ec 18             	sub    esp,0x18
c0008f96:	83 ec 0c             	sub    esp,0xc
c0008f99:	6a 68                	push   0x68
c0008f9b:	e8 53 eb ff ff       	call   c0007af3 <malloc>
c0008fa0:	83 c4 10             	add    esp,0x10
c0008fa3:	89 c2                	mov    edx,eax
c0008fa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb1:	83 ec 04             	sub    esp,0x4
c0008fb4:	6a 68                	push   0x68
c0008fb6:	6a 00                	push   0x0
c0008fb8:	50                   	push   eax
c0008fb9:	e8 32 75 ff ff       	call   c00004f0 <memset>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fe2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008feb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009000:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009003:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000900c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009018:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009024:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009027:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000902d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009030:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009033:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009036:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000903c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009042:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009048:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009055:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009058:	0f 20 da             	mov    edx,cr3
c000905b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000905e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009061:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009067:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000906a:	83 ec 08             	sub    esp,0x8
c000906d:	50                   	push   eax
c000906e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009071:	50                   	push   eax
c0009072:	e8 ed e2 ff ff       	call   c0007364 <GDTEntry::setBase(unsigned int)>
c0009077:	83 c4 10             	add    esp,0x10
c000907a:	83 ec 08             	sub    esp,0x8
c000907d:	6a 68                	push   0x68
c000907f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009082:	50                   	push   eax
c0009083:	e8 f8 e2 ff ff       	call   c0007380 <GDTEntry::setLimit(unsigned int)>
c0009088:	83 c4 10             	add    esp,0x10
c000908b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000908f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009092:	83 e0 0f             	and    eax,0xf
c0009095:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009098:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000909b:	83 c8 40             	or     eax,0x40
c000909e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090a1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090ac:	05 78 01 00 00       	add    eax,0x178
c00090b1:	83 ec 04             	sub    esp,0x4
c00090b4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090b7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090ba:	50                   	push   eax
c00090bb:	e8 f4 e2 ff ff       	call   c00073b4 <GDT::addEntry(GDTEntry)>
c00090c0:	83 c4 10             	add    esp,0x10
c00090c3:	89 c2                	mov    edx,eax
c00090c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c8:	89 10                	mov    DWORD PTR [eax],edx
c00090ca:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090d5:	05 78 01 00 00       	add    eax,0x178
c00090da:	83 ec 0c             	sub    esp,0xc
c00090dd:	50                   	push   eax
c00090de:	e8 fb e2 ff ff       	call   c00073de <GDT::flush()>
c00090e3:	83 c4 10             	add    esp,0x10
c00090e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090eb:	c9                   	leave  
c00090ec:	c3                   	ret    
c00090ed:	90                   	nop

c00090ee <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090fe:	75 08                	jne    c0009108 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009100:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009106:	eb 38                	jmp    c0009140 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009108:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000910d:	75 17                	jne    c0009126 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000910f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009114:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009117:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000911d:	8b 10                	mov    edx,DWORD PTR [eax]
c000911f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009123:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009126:	89 c1                	mov    ecx,eax
c0009128:	83 e1 fd             	and    ecx,0xfffffffd
c000912b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009131:	74 cd                	je     c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009133:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009138:	83 e0 ef             	and    eax,0xffffffef
c000913b:	83 f8 08             	cmp    eax,0x8
c000913e:	76 c0                	jbe    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009140:	31 c0                	xor    eax,eax
c0009142:	c3                   	ret    
c0009143:	90                   	nop

c0009144 <ReservedFilename::isAtty()>:
c0009144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009148:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000914b:	31 c0                	xor    eax,eax
c000914d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009153:	74 09                	je     c000915e <ReservedFilename::isAtty()+0x1a>
c0009155:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000915b:	0f 94 c0             	sete   al
c000915e:	c3                   	ret    
c000915f:	90                   	nop

c0009160 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009164:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009168:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000916c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000916f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009174:	75 08                	jne    c000917e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009176:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000917c:	eb 3d                	jmp    c00091bb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000917e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009183:	75 17                	jne    c000919c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009185:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000918a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000918d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009193:	8b 10                	mov    edx,DWORD PTR [eax]
c0009195:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009199:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000919c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091a1:	75 04                	jne    c00091a7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091a3:	89 0a                	mov    DWORD PTR [edx],ecx
c00091a5:	eb 14                	jmp    c00091bb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091a7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091ac:	74 c8                	je     c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091ae:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091b3:	83 e0 ef             	and    eax,0xffffffef
c00091b6:	83 f8 08             	cmp    eax,0x8
c00091b9:	76 bb                	jbe    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091bb:	31 c0                	xor    eax,eax
c00091bd:	c3                   	ret    

c00091be <UnixFile::getFileDescriptor()>:
c00091be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091c5:	c3                   	ret    

c00091c6 <UnixFile::UnixFile(int)>:
c00091c6:	53                   	push   ebx
c00091c7:	83 ec 28             	sub    esp,0x28
c00091ca:	ba 08 10 02 c0       	mov    edx,0xc0021008
c00091cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091d3:	89 10                	mov    DWORD PTR [eax],edx
c00091d5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091dd:	0f 8f 90 01 00 00    	jg     c0009373 <UnixFile::UnixFile(int)+0x1ad>
c00091e3:	a1 c0 37 02 c0       	mov    eax,ds:0xc00237c0
c00091e8:	8d 50 01             	lea    edx,[eax+0x1]
c00091eb:	89 15 c0 37 02 c0    	mov    DWORD PTR ds:0xc00237c0,edx
c00091f1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091f5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f8:	83 ec 08             	sub    esp,0x8
c00091fb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091ff:	68 98 6f 02 c0       	push   0xc0026f98
c0009204:	e8 af 68 01 00       	call   c001fab8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009209:	83 c4 10             	add    esp,0x10
c000920c:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009211:	83 f0 01             	xor    eax,0x1
c0009214:	0f b6 c0             	movzx  eax,al
c0009217:	85 c0                	test   eax,eax
c0009219:	0f 84 55 01 00 00    	je     c0009374 <UnixFile::UnixFile(int)+0x1ae>
c000921f:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c0009226:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000922e:	83 ec 0c             	sub    esp,0xc
c0009231:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009235:	e8 b9 e8 ff ff       	call   c0007af3 <malloc>
c000923a:	83 c4 10             	add    esp,0x10
c000923d:	89 c3                	mov    ebx,eax
c000923f:	83 ec 08             	sub    esp,0x8
c0009242:	68 03 ff ff 0f       	push   0xfffff03
c0009247:	53                   	push   ebx
c0009248:	e8 2d 01 00 00       	call   c000937a <ReservedFilename::ReservedFilename(int)>
c000924d:	83 c4 10             	add    esp,0x10
c0009250:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c0009256:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000925e:	83 ec 0c             	sub    esp,0xc
c0009261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009265:	e8 89 e8 ff ff       	call   c0007af3 <malloc>
c000926a:	83 c4 10             	add    esp,0x10
c000926d:	89 c3                	mov    ebx,eax
c000926f:	83 ec 08             	sub    esp,0x8
c0009272:	68 01 ff ff 0f       	push   0xfffff01
c0009277:	53                   	push   ebx
c0009278:	e8 fd 00 00 00       	call   c000937a <ReservedFilename::ReservedFilename(int)>
c000927d:	83 c4 10             	add    esp,0x10
c0009280:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c0009286:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000928e:	83 ec 0c             	sub    esp,0xc
c0009291:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009295:	e8 59 e8 ff ff       	call   c0007af3 <malloc>
c000929a:	83 c4 10             	add    esp,0x10
c000929d:	89 c3                	mov    ebx,eax
c000929f:	83 ec 08             	sub    esp,0x8
c00092a2:	68 00 ff ff 0f       	push   0xfffff00
c00092a7:	53                   	push   ebx
c00092a8:	e8 cd 00 00 00       	call   c000937a <ReservedFilename::ReservedFilename(int)>
c00092ad:	83 c4 10             	add    esp,0x10
c00092b0:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092b6:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092be:	83 ec 0c             	sub    esp,0xc
c00092c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c5:	e8 29 e8 ff ff       	call   c0007af3 <malloc>
c00092ca:	83 c4 10             	add    esp,0x10
c00092cd:	89 c3                	mov    ebx,eax
c00092cf:	83 ec 08             	sub    esp,0x8
c00092d2:	68 02 ff ff 0f       	push   0xfffff02
c00092d7:	53                   	push   ebx
c00092d8:	e8 9d 00 00 00       	call   c000937a <ReservedFilename::ReservedFilename(int)>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092e6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ee:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092f3:	7f 7f                	jg     c0009374 <UnixFile::UnixFile(int)+0x1ae>
c00092f5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092fd:	83 ec 0c             	sub    esp,0xc
c0009300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009304:	e8 ea e7 ff ff       	call   c0007af3 <malloc>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	89 c3                	mov    ebx,eax
c000930e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009312:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009317:	83 ec 08             	sub    esp,0x8
c000931a:	50                   	push   eax
c000931b:	53                   	push   ebx
c000931c:	e8 59 00 00 00       	call   c000937a <ReservedFilename::ReservedFilename(int)>
c0009321:	83 c4 10             	add    esp,0x10
c0009324:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009328:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c000932f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009337:	83 ec 0c             	sub    esp,0xc
c000933a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000933e:	e8 b0 e7 ff ff       	call   c0007af3 <malloc>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	89 c3                	mov    ebx,eax
c0009348:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000934c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009351:	83 ec 08             	sub    esp,0x8
c0009354:	50                   	push   eax
c0009355:	53                   	push   ebx
c0009356:	e8 1f 00 00 00       	call   c000937a <ReservedFilename::ReservedFilename(int)>
c000935b:	83 c4 10             	add    esp,0x10
c000935e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009362:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009369:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000936e:	e9 7b ff ff ff       	jmp    c00092ee <UnixFile::UnixFile(int)+0x128>
c0009373:	90                   	nop
c0009374:	83 c4 28             	add    esp,0x28
c0009377:	5b                   	pop    ebx
c0009378:	c3                   	ret    
c0009379:	90                   	nop

c000937a <ReservedFilename::ReservedFilename(int)>:
c000937a:	83 ec 0c             	sub    esp,0xc
c000937d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009381:	83 ec 08             	sub    esp,0x8
c0009384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009388:	50                   	push   eax
c0009389:	e8 38 fe ff ff       	call   c00091c6 <UnixFile::UnixFile(int)>
c000938e:	83 c4 10             	add    esp,0x10
c0009391:	ba 24 10 02 c0       	mov    edx,0xc0021024
c0009396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000939a:	89 10                	mov    DWORD PTR [eax],edx
c000939c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00093a4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093a7:	90                   	nop
c00093a8:	83 c4 0c             	add    esp,0xc
c00093ab:	c3                   	ret    

c00093ac <UnixFile::~UnixFile()>:
c00093ac:	83 ec 1c             	sub    esp,0x1c
c00093af:	ba 08 10 02 c0       	mov    edx,0xc0021008
c00093b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b8:	89 10                	mov    DWORD PTR [eax],edx
c00093ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093c1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093c6:	7f 76                	jg     c000943e <UnixFile::~UnixFile()+0x92>
c00093c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093d0:	83 ec 0c             	sub    esp,0xc
c00093d3:	68 98 6f 02 c0       	push   0xc0026f98
c00093d8:	e8 af 67 01 00       	call   c001fb8c <LinkedList<UnixFile>::getFirstElement()>
c00093dd:	83 c4 10             	add    esp,0x10
c00093e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093e4:	83 ec 0c             	sub    esp,0xc
c00093e7:	68 98 6f 02 c0       	push   0xc0026f98
c00093ec:	e8 a3 67 01 00       	call   c001fb94 <LinkedList<UnixFile>::removeFirst()>
c00093f1:	83 c4 10             	add    esp,0x10
c00093f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093fc:	74 43                	je     c0009441 <UnixFile::~UnixFile()+0x95>
c00093fe:	83 ec 08             	sub    esp,0x8
c0009401:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009405:	68 98 6f 02 c0       	push   0xc0026f98
c000940a:	e8 a9 66 01 00       	call   c001fab8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000940f:	83 c4 10             	add    esp,0x10
c0009412:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009416:	8d 50 01             	lea    edx,[eax+0x1]
c0009419:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000941d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009422:	0f 94 c0             	sete   al
c0009425:	0f b6 c0             	movzx  eax,al
c0009428:	85 c0                	test   eax,eax
c000942a:	74 a4                	je     c00093d0 <UnixFile::~UnixFile()+0x24>
c000942c:	83 ec 0c             	sub    esp,0xc
c000942f:	68 e0 0f 02 c0       	push   0xc0020fe0
c0009434:	e8 a6 81 00 00       	call   c00115df <KePanic(char const*)>
c0009439:	83 c4 10             	add    esp,0x10
c000943c:	eb 92                	jmp    c00093d0 <UnixFile::~UnixFile()+0x24>
c000943e:	90                   	nop
c000943f:	eb 01                	jmp    c0009442 <UnixFile::~UnixFile()+0x96>
c0009441:	90                   	nop
c0009442:	90                   	nop
c0009443:	83 c4 1c             	add    esp,0x1c
c0009446:	c3                   	ret    
c0009447:	90                   	nop

c0009448 <UnixFile::~UnixFile()>:
c0009448:	83 ec 0c             	sub    esp,0xc
c000944b:	83 ec 0c             	sub    esp,0xc
c000944e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009452:	e8 55 ff ff ff       	call   c00093ac <UnixFile::~UnixFile()>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	83 ec 08             	sub    esp,0x8
c000945d:	6a 0c                	push   0xc
c000945f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009463:	e8 c4 13 00 00       	call   c000a82c <operator delete(void*, unsigned long)>
c0009468:	83 c4 10             	add    esp,0x10
c000946b:	83 c4 0c             	add    esp,0xc
c000946e:	c3                   	ret    
c000946f:	90                   	nop

c0009470 <ReservedFilename::~ReservedFilename()>:
c0009470:	83 ec 0c             	sub    esp,0xc
c0009473:	ba 24 10 02 c0       	mov    edx,0xc0021024
c0009478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947c:	89 10                	mov    DWORD PTR [eax],edx
c000947e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009482:	83 ec 0c             	sub    esp,0xc
c0009485:	50                   	push   eax
c0009486:	e8 21 ff ff ff       	call   c00093ac <UnixFile::~UnixFile()>
c000948b:	83 c4 10             	add    esp,0x10
c000948e:	90                   	nop
c000948f:	83 c4 0c             	add    esp,0xc
c0009492:	c3                   	ret    
c0009493:	90                   	nop

c0009494 <ReservedFilename::~ReservedFilename()>:
c0009494:	83 ec 0c             	sub    esp,0xc
c0009497:	83 ec 0c             	sub    esp,0xc
c000949a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949e:	e8 cd ff ff ff       	call   c0009470 <ReservedFilename::~ReservedFilename()>
c00094a3:	83 c4 10             	add    esp,0x10
c00094a6:	83 ec 08             	sub    esp,0x8
c00094a9:	6a 0c                	push   0xc
c00094ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094af:	e8 78 13 00 00       	call   c000a82c <operator delete(void*, unsigned long)>
c00094b4:	83 c4 10             	add    esp,0x10
c00094b7:	83 c4 0c             	add    esp,0xc
c00094ba:	c3                   	ret    

c00094bb <KeGetFileFromDescriptor(int)>:
c00094bb:	53                   	push   ebx
c00094bc:	83 ec 08             	sub    esp,0x8
c00094bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094c3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094cf:	7f 2c                	jg     c00094fd <KeGetFileFromDescriptor(int)+0x42>
c00094d1:	83 ec 0c             	sub    esp,0xc
c00094d4:	68 98 6f 02 c0       	push   0xc0026f98
c00094d9:	e8 ae 66 01 00       	call   c001fb8c <LinkedList<UnixFile>::getFirstElement()>
c00094de:	83 c4 10             	add    esp,0x10
c00094e1:	85 c0                	test   eax,eax
c00094e3:	75 04                	jne    c00094e9 <KeGetFileFromDescriptor(int)+0x2e>
c00094e5:	31 c0                	xor    eax,eax
c00094e7:	eb 6e                	jmp    c0009557 <KeGetFileFromDescriptor(int)+0x9c>
c00094e9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094ec:	74 69                	je     c0009557 <KeGetFileFromDescriptor(int)+0x9c>
c00094ee:	52                   	push   edx
c00094ef:	52                   	push   edx
c00094f0:	50                   	push   eax
c00094f1:	68 98 6f 02 c0       	push   0xc0026f98
c00094f6:	e8 3b 67 01 00       	call   c001fc36 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094fb:	eb e1                	jmp    c00094de <KeGetFileFromDescriptor(int)+0x23>
c00094fd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009503:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c0009508:	74 4d                	je     c0009557 <KeGetFileFromDescriptor(int)+0x9c>
c000950a:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009510:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009515:	74 40                	je     c0009557 <KeGetFileFromDescriptor(int)+0x9c>
c0009517:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951d:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009522:	74 33                	je     c0009557 <KeGetFileFromDescriptor(int)+0x9c>
c0009524:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000952a:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c000952f:	74 26                	je     c0009557 <KeGetFileFromDescriptor(int)+0x9c>
c0009531:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009537:	83 f8 08             	cmp    eax,0x8
c000953a:	77 09                	ja     c0009545 <KeGetFileFromDescriptor(int)+0x8a>
c000953c:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c0009543:	eb 12                	jmp    c0009557 <KeGetFileFromDescriptor(int)+0x9c>
c0009545:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000954b:	83 fb 08             	cmp    ebx,0x8
c000954e:	77 95                	ja     c00094e5 <KeGetFileFromDescriptor(int)+0x2a>
c0009550:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c0009557:	83 c4 08             	add    esp,0x8
c000955a:	5b                   	pop    ebx
c000955b:	c3                   	ret    

c000955c <__static_initialization_and_destruction_0(int, int)>:
c000955c:	83 ec 0c             	sub    esp,0xc
c000955f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009564:	75 34                	jne    c000959a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009566:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000956e:	75 2a                	jne    c000959a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009570:	83 ec 0c             	sub    esp,0xc
c0009573:	68 98 6f 02 c0       	push   0xc0026f98
c0009578:	e8 f9 64 01 00       	call   c001fa76 <LinkedList<UnixFile>::LinkedList()>
c000957d:	83 c4 10             	add    esp,0x10
c0009580:	83 ec 04             	sub    esp,0x4
c0009583:	68 44 37 02 c0       	push   0xc0023744
c0009588:	68 98 6f 02 c0       	push   0xc0026f98
c000958d:	68 74 fa 01 c0       	push   0xc001fa74
c0009592:	e8 45 12 00 00       	call   c000a7dc <__cxa_atexit>
c0009597:	83 c4 10             	add    esp,0x10
c000959a:	90                   	nop
c000959b:	83 c4 0c             	add    esp,0xc
c000959e:	c3                   	ret    

c000959f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000959f:	83 ec 0c             	sub    esp,0xc
c00095a2:	83 ec 08             	sub    esp,0x8
c00095a5:	68 ff ff 00 00       	push   0xffff
c00095aa:	6a 01                	push   0x1
c00095ac:	e8 ab ff ff ff       	call   c000955c <__static_initialization_and_destruction_0(int, int)>
c00095b1:	83 c4 10             	add    esp,0x10
c00095b4:	83 c4 0c             	add    esp,0xc
c00095b7:	c3                   	ret    

c00095b8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b8:	53                   	push   ebx
c00095b9:	8b 15 c8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237c8
c00095bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095c7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095cd:	89 d8                	mov    eax,ebx
c00095cf:	d1 e8                	shr    eax,1
c00095d1:	01 d0                	add    eax,edx
c00095d3:	80 e3 01             	and    bl,0x1
c00095d6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d8:	75 09                	jne    c00095e3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095da:	83 e2 f0             	and    edx,0xfffffff0
c00095dd:	09 ca                	or     edx,ecx
c00095df:	88 10                	mov    BYTE PTR [eax],dl
c00095e1:	5b                   	pop    ebx
c00095e2:	c3                   	ret    
c00095e3:	0f b6 c9             	movzx  ecx,cl
c00095e6:	83 e2 0f             	and    edx,0xf
c00095e9:	c1 e1 04             	shl    ecx,0x4
c00095ec:	09 ca                	or     edx,ecx
c00095ee:	88 10                	mov    BYTE PTR [eax],dl
c00095f0:	5b                   	pop    ebx
c00095f1:	c3                   	ret    

c00095f2 <Virt::getPageState(unsigned long)>:
c00095f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095f6:	8b 0d c8 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237c8
c00095fc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009602:	89 d0                	mov    eax,edx
c0009604:	d1 e8                	shr    eax,1
c0009606:	80 e2 01             	and    dl,0x1
c0009609:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000960c:	74 03                	je     c0009611 <Virt::getPageState(unsigned long)+0x1f>
c000960e:	c1 e8 04             	shr    eax,0x4
c0009611:	83 e0 0f             	and    eax,0xf
c0009614:	c3                   	ret    

c0009615 <Virt::allocateKernelVirtualPages(int)>:
c0009615:	55                   	push   ebp
c0009616:	57                   	push   edi
c0009617:	56                   	push   esi
c0009618:	31 f6                	xor    esi,esi
c000961a:	53                   	push   ebx
c000961b:	31 db                	xor    ebx,ebx
c000961d:	83 ec 1c             	sub    esp,0x1c
c0009620:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009625:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009629:	8b 2d c4 37 02 c0    	mov    ebp,DWORD PTR ds:0xc00237c4
c000962f:	55                   	push   ebp
c0009630:	e8 bd ff ff ff       	call   c00095f2 <Virt::getPageState(unsigned long)>
c0009635:	5a                   	pop    edx
c0009636:	84 c0                	test   al,al
c0009638:	75 3d                	jne    c0009677 <Virt::allocateKernelVirtualPages(int)+0x62>
c000963a:	85 db                	test   ebx,ebx
c000963c:	0f 44 f5             	cmove  esi,ebp
c000963f:	83 c3 01             	add    ebx,0x1
c0009642:	39 fb                	cmp    ebx,edi
c0009644:	74 5e                	je     c00096a4 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009646:	83 c5 01             	add    ebp,0x1
c0009649:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000964f:	76 33                	jbe    c0009684 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009651:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009656:	c7 05 c4 37 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00237c4,0xc8000
c0009660:	75 2a                	jne    c000968c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009662:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009667:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000966c:	55                   	push   ebp
c000966d:	e8 80 ff ff ff       	call   c00095f2 <Virt::getPageState(unsigned long)>
c0009672:	5a                   	pop    edx
c0009673:	84 c0                	test   al,al
c0009675:	74 c3                	je     c000963a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009677:	83 c5 01             	add    ebp,0x1
c000967a:	31 db                	xor    ebx,ebx
c000967c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009682:	77 cd                	ja     c0009651 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009684:	89 2d c4 37 02 c0    	mov    DWORD PTR ds:0xc00237c4,ebp
c000968a:	eb a3                	jmp    c000962f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000968c:	83 ec 0c             	sub    esp,0xc
c000968f:	68 38 10 02 c0       	push   0xc0021038
c0009694:	e8 46 7f 00 00       	call   c00115df <KePanic(char const*)>
c0009699:	8b 2d c4 37 02 c0    	mov    ebp,DWORD PTR ds:0xc00237c4
c000969f:	83 c4 10             	add    esp,0x10
c00096a2:	eb 8b                	jmp    c000962f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00096a4:	89 35 c4 37 02 c0    	mov    DWORD PTR ds:0xc00237c4,esi
c00096aa:	83 fb 01             	cmp    ebx,0x1
c00096ad:	74 63                	je     c0009712 <Virt::allocateKernelVirtualPages(int)+0xfd>
c00096af:	85 ff                	test   edi,edi
c00096b1:	74 41                	je     c00096f4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096b3:	89 f0                	mov    eax,esi
c00096b5:	31 db                	xor    ebx,ebx
c00096b7:	8d 6f ff             	lea    ebp,[edi-0x1]
c00096ba:	eb 16                	jmp    c00096d2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00096bc:	6a 01                	push   0x1
c00096be:	83 c3 01             	add    ebx,0x1
c00096c1:	50                   	push   eax
c00096c2:	e8 f1 fe ff ff       	call   c00095b8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c7:	39 fb                	cmp    ebx,edi
c00096c9:	58                   	pop    eax
c00096ca:	5a                   	pop    edx
c00096cb:	74 27                	je     c00096f4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096cd:	a1 c4 37 02 c0       	mov    eax,ds:0xc00237c4
c00096d2:	8d 50 01             	lea    edx,[eax+0x1]
c00096d5:	85 db                	test   ebx,ebx
c00096d7:	89 15 c4 37 02 c0    	mov    DWORD PTR ds:0xc00237c4,edx
c00096dd:	74 22                	je     c0009701 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096df:	39 dd                	cmp    ebp,ebx
c00096e1:	75 d9                	jne    c00096bc <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096e3:	6a 03                	push   0x3
c00096e5:	83 c3 01             	add    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 ca fe ff ff       	call   c00095b8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	39 fb                	cmp    ebx,edi
c00096f0:	59                   	pop    ecx
c00096f1:	58                   	pop    eax
c00096f2:	75 d9                	jne    c00096cd <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f4:	83 c4 1c             	add    esp,0x1c
c00096f7:	89 f0                	mov    eax,esi
c00096f9:	5b                   	pop    ebx
c00096fa:	c1 e0 0c             	shl    eax,0xc
c00096fd:	5e                   	pop    esi
c00096fe:	5f                   	pop    edi
c00096ff:	5d                   	pop    ebp
c0009700:	c3                   	ret    
c0009701:	6a 02                	push   0x2
c0009703:	bb 01 00 00 00       	mov    ebx,0x1
c0009708:	50                   	push   eax
c0009709:	e8 aa fe ff ff       	call   c00095b8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970e:	58                   	pop    eax
c000970f:	5a                   	pop    edx
c0009710:	eb bb                	jmp    c00096cd <Virt::allocateKernelVirtualPages(int)+0xb8>
c0009712:	6a 04                	push   0x4
c0009714:	56                   	push   esi
c0009715:	8d 46 01             	lea    eax,[esi+0x1]
c0009718:	a3 c4 37 02 c0       	mov    ds:0xc00237c4,eax
c000971d:	e8 96 fe ff ff       	call   c00095b8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009722:	89 f0                	mov    eax,esi
c0009724:	59                   	pop    ecx
c0009725:	c1 e0 0c             	shl    eax,0xc
c0009728:	5b                   	pop    ebx
c0009729:	83 c4 1c             	add    esp,0x1c
c000972c:	5b                   	pop    ebx
c000972d:	5e                   	pop    esi
c000972e:	5f                   	pop    edi
c000972f:	5d                   	pop    ebp
c0009730:	c3                   	ret    

c0009731 <Virt::freeSwapfilePage(unsigned long)>:
c0009731:	53                   	push   ebx
c0009732:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009738:	b8 01 00 00 00       	mov    eax,0x1
c000973d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009741:	d3 e0                	shl    eax,cl
c0009743:	89 cb                	mov    ebx,ecx
c0009745:	c1 eb 05             	shr    ebx,0x5
c0009748:	f7 d0                	not    eax
c000974a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974d:	21 c1                	and    ecx,eax
c000974f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009752:	5b                   	pop    ebx
c0009753:	c3                   	ret    

c0009754 <Virt::swapIDToSector(unsigned long)>:
c0009754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009758:	8b 15 cc 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237cc
c000975e:	8b 0d d4 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237d4
c0009764:	0f af c2             	imul   eax,edx
c0009767:	01 c8                	add    eax,ecx
c0009769:	c3                   	ret    

c000976a <Virt::allocateSwapfilePage()>:
c000976a:	55                   	push   ebp
c000976b:	31 d2                	xor    edx,edx
c000976d:	57                   	push   edi
c000976e:	56                   	push   esi
c000976f:	53                   	push   ebx
c0009770:	83 ec 0c             	sub    esp,0xc
c0009773:	8b 1d d0 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237d0
c0009779:	8b 0d cc 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237cc
c000977f:	89 d8                	mov    eax,ebx
c0009781:	f7 f1                	div    ecx
c0009783:	39 cb                	cmp    ebx,ecx
c0009785:	72 2f                	jb     c00097b6 <Virt::allocateSwapfilePage()+0x4c>
c0009787:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000978d:	8b 16                	mov    edx,DWORD PTR [esi]
c000978f:	f6 c2 01             	test   dl,0x1
c0009792:	74 3e                	je     c00097d2 <Virt::allocateSwapfilePage()+0x68>
c0009794:	31 c9                	xor    ecx,ecx
c0009796:	bf 01 00 00 00       	mov    edi,0x1
c000979b:	eb 12                	jmp    c00097af <Virt::allocateSwapfilePage()+0x45>
c000979d:	89 ca                	mov    edx,ecx
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	c1 ea 05             	shr    edx,0x5
c00097a4:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097a7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097a9:	d3 e5                	shl    ebp,cl
c00097ab:	85 ea                	test   edx,ebp
c00097ad:	74 2c                	je     c00097db <Virt::allocateSwapfilePage()+0x71>
c00097af:	83 c1 01             	add    ecx,0x1
c00097b2:	39 c8                	cmp    eax,ecx
c00097b4:	77 e7                	ja     c000979d <Virt::allocateSwapfilePage()+0x33>
c00097b6:	83 ec 0c             	sub    esp,0xc
c00097b9:	68 cc 12 02 c0       	push   0xc00212cc
c00097be:	e8 1c 7e 00 00       	call   c00115df <KePanic(char const*)>
c00097c3:	83 c4 10             	add    esp,0x10
c00097c6:	31 c9                	xor    ecx,ecx
c00097c8:	83 c4 0c             	add    esp,0xc
c00097cb:	89 c8                	mov    eax,ecx
c00097cd:	5b                   	pop    ebx
c00097ce:	5e                   	pop    esi
c00097cf:	5f                   	pop    edi
c00097d0:	5d                   	pop    ebp
c00097d1:	c3                   	ret    
c00097d2:	89 f3                	mov    ebx,esi
c00097d4:	bd 01 00 00 00       	mov    ebp,0x1
c00097d9:	31 c9                	xor    ecx,ecx
c00097db:	09 ea                	or     edx,ebp
c00097dd:	89 c8                	mov    eax,ecx
c00097df:	89 13                	mov    DWORD PTR [ebx],edx
c00097e1:	83 c4 0c             	add    esp,0xc
c00097e4:	5b                   	pop    ebx
c00097e5:	5e                   	pop    esi
c00097e6:	5f                   	pop    edi
c00097e7:	5d                   	pop    ebp
c00097e8:	c3                   	ret    

c00097e9 <Virt::virtualMemorySetup()>:
c00097e9:	53                   	push   ebx
c00097ea:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097ef:	6a 0f                	push   0xf
c00097f1:	53                   	push   ebx
c00097f2:	83 c3 01             	add    ebx,0x1
c00097f5:	e8 be fd ff ff       	call   c00095b8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fa:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009800:	58                   	pop    eax
c0009801:	5a                   	pop    edx
c0009802:	75 eb                	jne    c00097ef <Virt::virtualMemorySetup()+0x6>
c0009804:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009809:	6a 00                	push   0x0
c000980b:	53                   	push   ebx
c000980c:	83 c3 01             	add    ebx,0x1
c000980f:	e8 a4 fd ff ff       	call   c00095b8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009814:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981a:	59                   	pop    ecx
c000981b:	58                   	pop    eax
c000981c:	75 eb                	jne    c0009809 <Virt::virtualMemorySetup()+0x20>
c000981e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009823:	6a 0f                	push   0xf
c0009825:	53                   	push   ebx
c0009826:	83 c3 01             	add    ebx,0x1
c0009829:	e8 8a fd ff ff       	call   c00095b8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000982e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009834:	58                   	pop    eax
c0009835:	5a                   	pop    edx
c0009836:	75 eb                	jne    c0009823 <Virt::virtualMemorySetup()+0x3a>
c0009838:	5b                   	pop    ebx
c0009839:	c3                   	ret    

c000983a <Virt::setupPageSwapping(int)>:
c000983a:	53                   	push   ebx
c000983b:	83 ec 0c             	sub    esp,0xc
c000983e:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009843:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009847:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984d:	8b 10                	mov    edx,DWORD PTR [eax]
c000984f:	53                   	push   ebx
c0009850:	68 e3 12 02 c0       	push   0xc00212e3
c0009855:	50                   	push   eax
c0009856:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009859:	c1 e3 0b             	shl    ebx,0xb
c000985c:	89 1d d0 37 02 c0    	mov    DWORD PTR ds:0xc00237d0,ebx
c0009862:	c1 eb 08             	shr    ebx,0x8
c0009865:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009868:	c6 05 d8 37 02 c0 43 	mov    BYTE PTR ds:0xc00237d8,0x43
c000986f:	c7 05 cc 37 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00237cc,0x8
c0009879:	a3 d4 37 02 c0       	mov    ds:0xc00237d4,eax
c000987e:	e8 70 e2 ff ff       	call   c0007af3 <malloc>
c0009883:	31 d2                	xor    edx,edx
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000988d:	89 c1                	mov    ecx,eax
c000988f:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0009894:	f7 35 cc 37 02 c0    	div    DWORD PTR ds:0xc00237cc
c000989a:	c1 e8 05             	shr    eax,0x5
c000989d:	50                   	push   eax
c000989e:	6a 00                	push   0x0
c00098a0:	51                   	push   ecx
c00098a1:	e8 4a 6c ff ff       	call   c00004f0 <memset>
c00098a6:	83 c4 18             	add    esp,0x18
c00098a9:	5b                   	pop    ebx
c00098aa:	c3                   	ret    
c00098ab:	90                   	nop

c00098ac <VAS::setCPUSpecific(unsigned long)>:
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::VAS(VAS*)>:
c00098ae:	83 ec 0c             	sub    esp,0xc
c00098b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c7:	83 ec 0c             	sub    esp,0xc
c00098ca:	68 58 10 02 c0       	push   0xc0021058
c00098cf:	e8 0b 7d 00 00       	call   c00115df <KePanic(char const*)>
c00098d4:	83 c4 10             	add    esp,0x10
c00098d7:	90                   	nop
c00098d8:	83 c4 0c             	add    esp,0xc
c00098db:	c3                   	ret    

c00098dc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e5:	89 c2                	mov    edx,eax
c00098e7:	c1 ea 16             	shr    edx,0x16
c00098ea:	c1 e8 0a             	shr    eax,0xa
c00098ed:	83 f9 01             	cmp    ecx,0x1
c00098f0:	19 c9                	sbb    ecx,ecx
c00098f2:	25 fc 0f 00 00       	and    eax,0xffc
c00098f7:	c1 e2 0c             	shl    edx,0xc
c00098fa:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009900:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009907:	01 d0                	add    eax,edx
c0009909:	c3                   	ret    

c000990a <VAS::getPageTableEntry(unsigned long)>:
c000990a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000990e:	89 ca                	mov    edx,ecx
c0009910:	c1 ea 16             	shr    edx,0x16
c0009913:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009919:	c1 e9 0a             	shr    ecx,0xa
c000991c:	c1 e0 0c             	shl    eax,0xc
c000991f:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009925:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009928:	c3                   	ret    

c0009929 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009929:	55                   	push   ebp
c000992a:	57                   	push   edi
c000992b:	bf 01 00 00 00       	mov    edi,0x1
c0009930:	56                   	push   esi
c0009931:	53                   	push   ebx
c0009932:	83 ec 1c             	sub    esp,0x1c
c0009935:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009939:	c1 ee 0c             	shr    esi,0xc
c000993c:	eb 48                	jmp    c0009986 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000993e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009943:	83 ec 08             	sub    esp,0x8
c0009946:	55                   	push   ebp
c0009947:	50                   	push   eax
c0009948:	e8 bd ff ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c000994d:	83 c4 10             	add    esp,0x10
c0009950:	8b 10                	mov    edx,DWORD PTR [eax]
c0009952:	f6 c6 04             	test   dh,0x4
c0009955:	75 70                	jne    c00099c7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009957:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995d:	83 fb 04             	cmp    ebx,0x4
c0009960:	0f 84 8a 00 00 00    	je     c00099f0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009966:	83 fb 02             	cmp    ebx,0x2
c0009969:	0f 84 9a 00 00 00    	je     c0009a09 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000996f:	83 fb 03             	cmp    ebx,0x3
c0009972:	0f 84 be 00 00 00    	je     c0009a36 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009978:	83 fb 01             	cmp    ebx,0x1
c000997b:	0f 84 a2 00 00 00    	je     c0009a23 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009981:	83 c6 01             	add    esi,0x1
c0009984:	31 ff                	xor    edi,edi
c0009986:	56                   	push   esi
c0009987:	89 f5                	mov    ebp,esi
c0009989:	e8 64 fc ff ff       	call   c00095f2 <Virt::getPageState(unsigned long)>
c000998e:	c1 e5 0c             	shl    ebp,0xc
c0009991:	5a                   	pop    edx
c0009992:	0f b6 d8             	movzx  ebx,al
c0009995:	85 db                	test   ebx,ebx
c0009997:	75 a5                	jne    c000993e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009999:	83 ec 0c             	sub    esp,0xc
c000999c:	68 fa 12 02 c0       	push   0xc00212fa
c00099a1:	e8 39 7c 00 00       	call   c00115df <KePanic(char const*)>
c00099a6:	5a                   	pop    edx
c00099a7:	59                   	pop    ecx
c00099a8:	55                   	push   ebp
c00099a9:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099af:	55                   	push   ebp
c00099b0:	e8 55 ff ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c00099b5:	83 c4 10             	add    esp,0x10
c00099b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00099ba:	f6 c6 04             	test   dh,0x4
c00099bd:	75 08                	jne    c00099c7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c5:	eb ba                	jmp    c0009981 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d1:	83 ec 0c             	sub    esp,0xc
c00099d4:	52                   	push   edx
c00099d5:	e8 bf e3 ff ff       	call   c0007d99 <Phys::freePage(unsigned long)>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	83 fb 04             	cmp    ebx,0x4
c00099e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ea:	0f 85 76 ff ff ff    	jne    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f0:	83 e7 01             	and    edi,0x1
c00099f3:	75 46                	jne    c0009a3b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f5:	c7 44 24 30 7c 10 02 c0 	mov    DWORD PTR [esp+0x30],0xc002107c
c00099fd:	83 c4 1c             	add    esp,0x1c
c0009a00:	5b                   	pop    ebx
c0009a01:	5e                   	pop    esi
c0009a02:	5f                   	pop    edi
c0009a03:	5d                   	pop    ebp
c0009a04:	e9 d6 7b 00 00       	jmp    c00115df <KePanic(char const*)>
c0009a09:	83 e7 01             	and    edi,0x1
c0009a0c:	75 15                	jne    c0009a23 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a0e:	83 ec 0c             	sub    esp,0xc
c0009a11:	68 16 13 02 c0       	push   0xc0021316
c0009a16:	e8 c4 7b 00 00       	call   c00115df <KePanic(char const*)>
c0009a1b:	83 c4 10             	add    esp,0x10
c0009a1e:	e9 5e ff ff ff       	jmp    c0009981 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a23:	83 ec 08             	sub    esp,0x8
c0009a26:	6a 00                	push   0x0
c0009a28:	56                   	push   esi
c0009a29:	e8 8a fb ff ff       	call   c00095b8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a2e:	83 c4 10             	add    esp,0x10
c0009a31:	e9 4b ff ff ff       	jmp    c0009981 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a36:	83 e7 01             	and    edi,0x1
c0009a39:	75 16                	jne    c0009a51 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3b:	83 ec 08             	sub    esp,0x8
c0009a3e:	6a 00                	push   0x0
c0009a40:	56                   	push   esi
c0009a41:	e8 72 fb ff ff       	call   c00095b8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a46:	83 c4 10             	add    esp,0x10
c0009a49:	83 c4 1c             	add    esp,0x1c
c0009a4c:	5b                   	pop    ebx
c0009a4d:	5e                   	pop    esi
c0009a4e:	5f                   	pop    edi
c0009a4f:	5d                   	pop    ebp
c0009a50:	c3                   	ret    
c0009a51:	c7 44 24 30 32 13 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021332
c0009a59:	83 c4 1c             	add    esp,0x1c
c0009a5c:	5b                   	pop    ebx
c0009a5d:	5e                   	pop    esi
c0009a5e:	5f                   	pop    edi
c0009a5f:	5d                   	pop    ebp
c0009a60:	e9 7a 7b 00 00       	jmp    c00115df <KePanic(char const*)>
c0009a65:	90                   	nop

c0009a66 <VAS::freeAllocatedPages(unsigned long)>:
c0009a66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a6e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a72:	74 09                	je     c0009a7d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a74:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a78:	e9 ac fe ff ff       	jmp    c0009929 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7d:	c7 44 24 04 a0 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc00210a0
c0009a85:	e9 a0 0e 00 00       	jmp    c000a92a <Dbg::kprintf(char const*, ...)>

c0009a8a <VAS::virtualToPhysical(unsigned long)>:
c0009a8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a8e:	50                   	push   eax
c0009a8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a93:	52                   	push   edx
c0009a94:	e8 71 fe ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c0009a99:	59                   	pop    ecx
c0009a9a:	5a                   	pop    edx
c0009a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa2:	c3                   	ret    
c0009aa3:	90                   	nop

c0009aa4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa4:	55                   	push   ebp
c0009aa5:	57                   	push   edi
c0009aa6:	56                   	push   esi
c0009aa7:	53                   	push   ebx
c0009aa8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aac:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009ab8:	85 db                	test   ebx,ebx
c0009aba:	7e 24                	jle    c0009ae0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abc:	c1 e3 0c             	shl    ebx,0xc
c0009abf:	01 f3                	add    ebx,esi
c0009ac1:	56                   	push   esi
c0009ac2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009ac8:	55                   	push   ebp
c0009ac9:	e8 3c fe ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c0009ace:	5a                   	pop    edx
c0009acf:	59                   	pop    ecx
c0009ad0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad6:	21 f9                	and    ecx,edi
c0009ad8:	09 d1                	or     ecx,edx
c0009ada:	39 f3                	cmp    ebx,esi
c0009adc:	89 08                	mov    DWORD PTR [eax],ecx
c0009ade:	75 e1                	jne    c0009ac1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae0:	5b                   	pop    ebx
c0009ae1:	5e                   	pop    esi
c0009ae2:	5f                   	pop    edi
c0009ae3:	5d                   	pop    ebp
c0009ae4:	c3                   	ret    
c0009ae5:	90                   	nop

c0009ae6 <VAS::VAS()>:
c0009ae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b00:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b09:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b11:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b18:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b1f:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b24:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b29:	29 c2                	sub    edx,eax
c0009b2b:	89 d0                	mov    eax,edx
c0009b2d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b32:	c1 e8 0c             	shr    eax,0xc
c0009b35:	89 c2                	mov    edx,eax
c0009b37:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b3c:	6a 04                	push   0x4
c0009b3e:	6a ff                	push   0xffffffff
c0009b40:	52                   	push   edx
c0009b41:	50                   	push   eax
c0009b42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b46:	e8 59 ff ff ff       	call   c0009aa4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4b:	83 c4 14             	add    esp,0x14
c0009b4e:	90                   	nop
c0009b4f:	c3                   	ret    

c0009b50 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b50:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b55:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b62:	75 01                	jne    c0009b65 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b64:	c3                   	ret    
c0009b65:	68 80 00 00 00       	push   0x80
c0009b6a:	6a ff                	push   0xffffffff
c0009b6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b70:	50                   	push   eax
c0009b71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b75:	52                   	push   edx
c0009b76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7a:	51                   	push   ecx
c0009b7b:	e8 24 ff ff ff       	call   c0009aa4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b80:	83 c4 14             	add    esp,0x14
c0009b83:	c3                   	ret    

c0009b84 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b88:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b8f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b92:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b97:	83 f8 01             	cmp    eax,0x1
c0009b9a:	19 c0                	sbb    eax,eax
c0009b9c:	83 ca 03             	or     edx,0x3
c0009b9f:	83 e0 fc             	and    eax,0xfffffffc
c0009ba2:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009ba9:	0f 20 d8             	mov    eax,cr3
c0009bac:	0f 22 d8             	mov    cr3,eax
c0009baf:	c3                   	ret    

c0009bb0 <VAS::~VAS()>:
c0009bb0:	83 ec 2c             	sub    esp,0x2c
c0009bb3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbb:	fa                   	cli    
c0009bbc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bc1:	83 c0 01             	add    eax,0x1
c0009bc4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bc9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bd9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdd:	6a 01                	push   0x1
c0009bdf:	50                   	push   eax
c0009be0:	e8 9f ff ff ff       	call   c0009b84 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be5:	83 c4 0c             	add    esp,0xc
c0009be8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bf8:	0f 8f d8 00 00 00    	jg     c0009cd6 <VAS::~VAS()+0x126>
c0009bfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c02:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c05:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c09:	c1 e2 02             	shl    edx,0x2
c0009c0c:	01 d0                	add    eax,edx
c0009c0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c18:	83 e0 01             	and    eax,0x1
c0009c1b:	0f 84 ab 00 00 00    	je     c0009ccc <VAS::~VAS()+0x11c>
c0009c21:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c29:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c31:	7f 74                	jg     c0009ca7 <VAS::~VAS()+0xf7>
c0009c33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c37:	c1 e0 0a             	shl    eax,0xa
c0009c3a:	89 c2                	mov    edx,eax
c0009c3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c40:	01 d0                	add    eax,edx
c0009c42:	c1 e0 0c             	shl    eax,0xc
c0009c45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c49:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c50:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c53:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c59:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5d:	6a 01                	push   0x1
c0009c5f:	50                   	push   eax
c0009c60:	e8 77 fc ff ff       	call   c00098dc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c65:	83 c4 0c             	add    esp,0xc
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7a:	25 01 04 00 00       	and    eax,0x401
c0009c7f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c84:	75 1a                	jne    c0009ca0 <VAS::~VAS()+0xf0>
c0009c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c8f:	83 ec 0c             	sub    esp,0xc
c0009c92:	50                   	push   eax
c0009c93:	e8 01 e1 ff ff       	call   c0007d99 <Phys::freePage(unsigned long)>
c0009c98:	83 c4 10             	add    esp,0x10
c0009c9b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca0:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca5:	eb 82                	jmp    c0009c29 <VAS::~VAS()+0x79>
c0009ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cab:	25 00 04 00 00       	and    eax,0x400
c0009cb0:	74 1a                	je     c0009ccc <VAS::~VAS()+0x11c>
c0009cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbb:	83 ec 0c             	sub    esp,0xc
c0009cbe:	50                   	push   eax
c0009cbf:	e8 d5 e0 ff ff       	call   c0007d99 <Phys::freePage(unsigned long)>
c0009cc4:	83 c4 10             	add    esp,0x10
c0009cc7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ccc:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd1:	e9 1a ff ff ff       	jmp    c0009bf0 <VAS::~VAS()+0x40>
c0009cd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdd:	83 ec 0c             	sub    esp,0xc
c0009ce0:	50                   	push   eax
c0009ce1:	e8 43 fc ff ff       	call   c0009929 <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce6:	83 c4 10             	add    esp,0x10
c0009ce9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ced:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf0:	83 ec 0c             	sub    esp,0xc
c0009cf3:	50                   	push   eax
c0009cf4:	e8 a0 e0 ff ff       	call   c0007d99 <Phys::freePage(unsigned long)>
c0009cf9:	83 c4 10             	add    esp,0x10
c0009cfc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d01:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d06:	83 e8 01             	sub    eax,0x1
c0009d09:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d0e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d13:	85 c0                	test   eax,eax
c0009d15:	75 01                	jne    c0009d18 <VAS::~VAS()+0x168>
c0009d17:	fb                   	sti    
c0009d18:	90                   	nop
c0009d19:	83 c4 2c             	add    esp,0x2c
c0009d1c:	c3                   	ret    
c0009d1d:	90                   	nop

c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d1e:	55                   	push   ebp
c0009d1f:	57                   	push   edi
c0009d20:	56                   	push   esi
c0009d21:	53                   	push   ebx
c0009d22:	83 ec 1c             	sub    esp,0x1c
c0009d25:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d2d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d31:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d37:	77 08                	ja     c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d39:	0f 20 d8             	mov    eax,cr3
c0009d3c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d3f:	75 43                	jne    c0009d84 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d41:	89 d8                	mov    eax,ebx
c0009d43:	09 f8                	or     eax,edi
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 53                	jne    c0009d9f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d4f:	89 de                	mov    esi,ebx
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 50                	je     c0009db1 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	c1 eb 0a             	shr    ebx,0xa
c0009d68:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6e:	c1 e6 0c             	shl    esi,0xc
c0009d71:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d77:	09 c7                	or     edi,eax
c0009d79:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d7c:	83 c4 1c             	add    esp,0x1c
c0009d7f:	5b                   	pop    ebx
c0009d80:	5e                   	pop    esi
c0009d81:	5f                   	pop    edi
c0009d82:	5d                   	pop    ebp
c0009d83:	c3                   	ret    
c0009d84:	83 ec 0c             	sub    esp,0xc
c0009d87:	68 c4 10 02 c0       	push   0xc00210c4
c0009d8c:	e8 99 0b 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0009d91:	89 d8                	mov    eax,ebx
c0009d93:	83 c4 10             	add    esp,0x10
c0009d96:	09 f8                	or     eax,edi
c0009d98:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d9d:	74 ad                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d9f:	83 ec 0c             	sub    esp,0xc
c0009da2:	68 2c 11 02 c0       	push   0xc002112c
c0009da7:	e8 33 78 00 00       	call   c00115df <KePanic(char const*)>
c0009dac:	83 c4 10             	add    esp,0x10
c0009daf:	eb 9b                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009db1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009db5:	e8 48 e0 ff ff       	call   c0007e02 <Phys::allocatePage()>
c0009dba:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dcb:	6a 01                	push   0x1
c0009dcd:	e8 43 f8 ff ff       	call   c0009615 <Virt::allocateKernelVirtualPages(int)>
c0009dd2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dd9:	6a 01                	push   0x1
c0009ddb:	50                   	push   eax
c0009ddc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009de0:	52                   	push   edx
c0009de1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009de5:	51                   	push   ecx
c0009de6:	e8 3d 01 00 00       	call   c0009f28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009deb:	83 c4 1c             	add    esp,0x1c
c0009dee:	68 00 10 00 00       	push   0x1000
c0009df3:	6a 00                	push   0x0
c0009df5:	50                   	push   eax
c0009df6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dfa:	e8 f1 66 ff ff       	call   c00004f0 <memset>
c0009dff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e03:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e06:	e8 1e fb ff ff       	call   c0009929 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e0f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e13:	83 c4 10             	add    esp,0x10
c0009e16:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009e19:	0d 07 04 00 00       	or     eax,0x407
c0009e1e:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e21:	e9 3b ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e26 <VAS::allocatePages(int, int)>:
c0009e26:	55                   	push   ebp
c0009e27:	57                   	push   edi
c0009e28:	56                   	push   esi
c0009e29:	53                   	push   ebx
c0009e2a:	83 ec 1c             	sub    esp,0x1c
c0009e2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e31:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e35:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e39:	75 75                	jne    c0009eb0 <VAS::allocatePages(int, int)+0x8a>
c0009e3b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e42:	85 c0                	test   eax,eax
c0009e44:	74 49                	je     c0009e8f <VAS::allocatePages(int, int)+0x69>
c0009e46:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e4a:	89 d5                	mov    ebp,edx
c0009e4c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e50:	c1 e5 0c             	shl    ebp,0xc
c0009e53:	01 dd                	add    ebp,ebx
c0009e55:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e58:	81 cf 00 04 00 00    	or     edi,0x400
c0009e5e:	85 d2                	test   edx,edx
c0009e60:	7e 1b                	jle    c0009e7d <VAS::allocatePages(int, int)+0x57>
c0009e62:	e8 9b df ff ff       	call   c0007e02 <Phys::allocatePage()>
c0009e67:	57                   	push   edi
c0009e68:	53                   	push   ebx
c0009e69:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e6f:	50                   	push   eax
c0009e70:	56                   	push   esi
c0009e71:	e8 a8 fe ff ff       	call   c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e76:	83 c4 10             	add    esp,0x10
c0009e79:	39 dd                	cmp    ebp,ebx
c0009e7b:	75 e5                	jne    c0009e62 <VAS::allocatePages(int, int)+0x3c>
c0009e7d:	0f 20 d8             	mov    eax,cr3
c0009e80:	0f 22 d8             	mov    cr3,eax
c0009e83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e87:	83 c4 1c             	add    esp,0x1c
c0009e8a:	5b                   	pop    ebx
c0009e8b:	5e                   	pop    esi
c0009e8c:	5f                   	pop    edi
c0009e8d:	5d                   	pop    ebp
c0009e8e:	c3                   	ret    
c0009e8f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e93:	83 ec 0c             	sub    esp,0xc
c0009e96:	68 50 11 02 c0       	push   0xc0021150
c0009e9b:	e8 3f 77 00 00       	call   c00115df <KePanic(char const*)>
c0009ea0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea7:	83 c4 10             	add    esp,0x10
c0009eaa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009eae:	eb 96                	jmp    c0009e46 <VAS::allocatePages(int, int)+0x20>
c0009eb0:	83 ec 0c             	sub    esp,0xc
c0009eb3:	52                   	push   edx
c0009eb4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009eb8:	e8 58 f7 ff ff       	call   c0009615 <Virt::allocateKernelVirtualPages(int)>
c0009ebd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ec1:	83 c4 10             	add    esp,0x10
c0009ec4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ec9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ecd:	77 38                	ja     c0009f07 <VAS::allocatePages(int, int)+0xe1>
c0009ecf:	85 d2                	test   edx,edx
c0009ed1:	7e aa                	jle    c0009e7d <VAS::allocatePages(int, int)+0x57>
c0009ed3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed7:	c1 e2 0c             	shl    edx,0xc
c0009eda:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ede:	81 cf 00 04 00 00    	or     edi,0x400
c0009ee4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ee7:	e8 16 df ff ff       	call   c0007e02 <Phys::allocatePage()>
c0009eec:	57                   	push   edi
c0009eed:	53                   	push   ebx
c0009eee:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ef4:	50                   	push   eax
c0009ef5:	56                   	push   esi
c0009ef6:	e8 23 fe ff ff       	call   c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009efb:	83 c4 10             	add    esp,0x10
c0009efe:	39 dd                	cmp    ebp,ebx
c0009f00:	75 e5                	jne    c0009ee7 <VAS::allocatePages(int, int)+0xc1>
c0009f02:	e9 76 ff ff ff       	jmp    c0009e7d <VAS::allocatePages(int, int)+0x57>
c0009f07:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009f0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f12:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f19:	74 b4                	je     c0009ecf <VAS::allocatePages(int, int)+0xa9>
c0009f1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f1f:	80 cc 01             	or     ah,0x1
c0009f22:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f26:	eb a7                	jmp    c0009ecf <VAS::allocatePages(int, int)+0xa9>

c0009f28 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f28:	55                   	push   ebp
c0009f29:	57                   	push   edi
c0009f2a:	56                   	push   esi
c0009f2b:	53                   	push   ebx
c0009f2c:	83 ec 1c             	sub    esp,0x1c
c0009f2f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f33:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f37:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f3b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f3f:	85 db                	test   ebx,ebx
c0009f41:	7e 2c                	jle    c0009f6f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f43:	c1 e3 0c             	shl    ebx,0xc
c0009f46:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f49:	89 f3                	mov    ebx,esi
c0009f4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f4f:	55                   	push   ebp
c0009f50:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f54:	29 f2                	sub    edx,esi
c0009f56:	01 da                	add    edx,ebx
c0009f58:	52                   	push   edx
c0009f59:	53                   	push   ebx
c0009f5a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f60:	57                   	push   edi
c0009f61:	e8 b8 fd ff ff       	call   c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f66:	83 c4 10             	add    esp,0x10
c0009f69:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f6d:	75 e0                	jne    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f6f:	0f 20 d8             	mov    eax,cr3
c0009f72:	0f 22 d8             	mov    cr3,eax
c0009f75:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f79:	83 c4 1c             	add    esp,0x1c
c0009f7c:	5b                   	pop    ebx
c0009f7d:	5e                   	pop    esi
c0009f7e:	5f                   	pop    edi
c0009f7f:	5d                   	pop    ebp
c0009f80:	c3                   	ret    
c0009f81:	90                   	nop

c0009f82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f82:	55                   	push   ebp
c0009f83:	57                   	push   edi
c0009f84:	56                   	push   esi
c0009f85:	53                   	push   ebx
c0009f86:	83 ec 1c             	sub    esp,0x1c
c0009f89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f8d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f91:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f99:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f9d:	09 d8                	or     eax,ebx
c0009f9f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009fa4:	75 4b                	jne    c0009ff1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009fa6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009fa9:	89 de                	mov    esi,ebx
c0009fab:	c1 ee 16             	shr    esi,0x16
c0009fae:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009fb5:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009fb9:	74 48                	je     c000a003 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009fbb:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fc0:	c1 eb 0a             	shr    ebx,0xa
c0009fc3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fc7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fcb:	83 ff 01             	cmp    edi,0x1
c0009fce:	19 c0                	sbb    eax,eax
c0009fd0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fd6:	c1 e6 0c             	shl    esi,0xc
c0009fd9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fde:	01 f3                	add    ebx,esi
c0009fe0:	09 ca                	or     edx,ecx
c0009fe2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fe9:	83 c4 1c             	add    esp,0x1c
c0009fec:	5b                   	pop    ebx
c0009fed:	5e                   	pop    esi
c0009fee:	5f                   	pop    edi
c0009fef:	5d                   	pop    ebp
c0009ff0:	c3                   	ret    
c0009ff1:	83 ec 0c             	sub    esp,0xc
c0009ff4:	68 7c 11 02 c0       	push   0xc002117c
c0009ff9:	e8 e1 75 00 00       	call   c00115df <KePanic(char const*)>
c0009ffe:	83 c4 10             	add    esp,0x10
c000a001:	eb a3                	jmp    c0009fa6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c000a003:	e8 fa dd ff ff       	call   c0007e02 <Phys::allocatePage()>
c000a008:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a00e:	83 ec 0c             	sub    esp,0xc
c000a011:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000a015:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a019:	6a 01                	push   0x1
c000a01b:	e8 f5 f5 ff ff       	call   c0009615 <Virt::allocateKernelVirtualPages(int)>
c000a020:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a027:	6a 01                	push   0x1
c000a029:	50                   	push   eax
c000a02a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a02e:	50                   	push   eax
c000a02f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a033:	51                   	push   ecx
c000a034:	e8 ef fe ff ff       	call   c0009f28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a039:	83 c4 1c             	add    esp,0x1c
c000a03c:	68 00 10 00 00       	push   0x1000
c000a041:	6a 00                	push   0x0
c000a043:	50                   	push   eax
c000a044:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a048:	e8 a3 64 ff ff       	call   c00004f0 <memset>
c000a04d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a051:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a054:	e8 d0 f8 ff ff       	call   c0009929 <Virt::freeKernelVirtualPages(unsigned long)>
c000a059:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a05d:	83 c4 10             	add    esp,0x10
c000a060:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a063:	81 ca 07 04 00 00    	or     edx,0x407
c000a069:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a06c:	e9 4a ff ff ff       	jmp    c0009fbb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a071:	90                   	nop

c000a072 <VAS::VAS(bool)>:
c000a072:	53                   	push   ebx
c000a073:	83 ec 28             	sub    esp,0x28
c000a076:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a07a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a07e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a082:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a089:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a094:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a098:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a09c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a09f:	e8 5e dd ff ff       	call   c0007e02 <Phys::allocatePage()>
c000a0a4:	89 c2                	mov    edx,eax
c000a0a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0aa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0ad:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0b3:	83 ec 0c             	sub    esp,0xc
c000a0b6:	6a 01                	push   0x1
c000a0b8:	e8 58 f5 ff ff       	call   c0009615 <Virt::allocateKernelVirtualPages(int)>
c000a0bd:	83 c4 10             	add    esp,0x10
c000a0c0:	89 c2                	mov    edx,eax
c000a0c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0c9:	83 ec 0c             	sub    esp,0xc
c000a0cc:	6a 03                	push   0x3
c000a0ce:	6a 01                	push   0x1
c000a0d0:	52                   	push   edx
c000a0d1:	50                   	push   eax
c000a0d2:	53                   	push   ebx
c000a0d3:	e8 50 fe ff ff       	call   c0009f28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0d8:	83 c4 20             	add    esp,0x20
c000a0db:	89 c2                	mov    edx,eax
c000a0dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0e4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0ec:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0f4:	7f 1d                	jg     c000a113 <VAS::VAS(bool)+0xa1>
c000a0f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a101:	c1 e2 02             	shl    edx,0x2
c000a104:	01 d0                	add    eax,edx
c000a106:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a10c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a111:	eb d9                	jmp    c000a0ec <VAS::VAS(bool)+0x7a>
c000a113:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a11b:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a123:	7f 7e                	jg     c000a1a3 <VAS::VAS(bool)+0x131>
c000a125:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a129:	2d 00 02 00 00       	sub    eax,0x200
c000a12e:	c1 e0 0c             	shl    eax,0xc
c000a131:	83 c8 05             	or     eax,0x5
c000a134:	89 c2                	mov    edx,eax
c000a136:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a13b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a141:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a147:	83 e0 10             	and    eax,0x10
c000a14a:	0f b6 c0             	movzx  eax,al
c000a14d:	85 c0                	test   eax,eax
c000a14f:	74 07                	je     c000a158 <VAS::VAS(bool)+0xe6>
c000a151:	b8 00 01 00 00       	mov    eax,0x100
c000a156:	eb 05                	jmp    c000a15d <VAS::VAS(bool)+0xeb>
c000a158:	b8 00 00 00 00       	mov    eax,0x0
c000a15d:	09 d0                	or     eax,edx
c000a15f:	89 c1                	mov    ecx,eax
c000a161:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a165:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a168:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16c:	c1 e2 02             	shl    edx,0x2
c000a16f:	01 d0                	add    eax,edx
c000a171:	89 ca                	mov    edx,ecx
c000a173:	89 10                	mov    DWORD PTR [eax],edx
c000a175:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a179:	2d 40 03 00 00       	sub    eax,0x340
c000a17e:	83 f8 7f             	cmp    eax,0x7f
c000a181:	77 16                	ja     c000a199 <VAS::VAS(bool)+0x127>
c000a183:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a187:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a18a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a18e:	c1 e2 02             	shl    edx,0x2
c000a191:	01 d0                	add    eax,edx
c000a193:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a199:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a19e:	e9 78 ff ff ff       	jmp    c000a11b <VAS::VAS(bool)+0xa9>
c000a1a3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1ae:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1b4:	83 e0 10             	and    eax,0x10
c000a1b7:	0f b6 c0             	movzx  eax,al
c000a1ba:	85 c0                	test   eax,eax
c000a1bc:	74 07                	je     c000a1c5 <VAS::VAS(bool)+0x153>
c000a1be:	b8 03 41 00 00       	mov    eax,0x4103
c000a1c3:	eb 05                	jmp    c000a1ca <VAS::VAS(bool)+0x158>
c000a1c5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1ca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ce:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1d1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1d7:	89 02                	mov    DWORD PTR [edx],eax
c000a1d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1e0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1e5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1eb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1f1:	83 e0 10             	and    eax,0x10
c000a1f4:	0f b6 c0             	movzx  eax,al
c000a1f7:	85 c0                	test   eax,eax
c000a1f9:	74 07                	je     c000a202 <VAS::VAS(bool)+0x190>
c000a1fb:	b8 00 01 00 00       	mov    eax,0x100
c000a200:	eb 05                	jmp    c000a207 <VAS::VAS(bool)+0x195>
c000a202:	b8 00 00 00 00       	mov    eax,0x0
c000a207:	09 c2                	or     edx,eax
c000a209:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a20d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a210:	05 fc 0f 00 00       	add    eax,0xffc
c000a215:	83 ca 03             	or     edx,0x3
c000a218:	89 10                	mov    DWORD PTR [eax],edx
c000a21a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a21f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a225:	83 ec 0c             	sub    esp,0xc
c000a228:	50                   	push   eax
c000a229:	e8 26 2a 00 00       	call   c000cc54 <Device::getName()>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	83 ec 08             	sub    esp,0x8
c000a234:	68 4c 13 02 c0       	push   0xc002134c
c000a239:	50                   	push   eax
c000a23a:	e8 41 65 ff ff       	call   c0000780 <strcmp>
c000a23f:	83 c4 10             	add    esp,0x10
c000a242:	85 c0                	test   eax,eax
c000a244:	0f 94 c0             	sete   al
c000a247:	0f b6 c0             	movzx  eax,al
c000a24a:	85 c0                	test   eax,eax
c000a24c:	74 68                	je     c000a2b6 <VAS::VAS(bool)+0x244>
c000a24e:	fa                   	cli    
c000a24f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a254:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25a:	05 7c 09 00 00       	add    eax,0x97c
c000a25f:	83 ec 0c             	sub    esp,0xc
c000a262:	50                   	push   eax
c000a263:	e8 86 d3 ff ff       	call   c00075ee <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a270:	89 c3                	mov    ebx,eax
c000a272:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a277:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a27d:	05 7c 09 00 00       	add    eax,0x97c
c000a282:	83 ec 0c             	sub    esp,0xc
c000a285:	50                   	push   eax
c000a286:	e8 63 d3 ff ff       	call   c00075ee <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a28b:	83 c4 10             	add    esp,0x10
c000a28e:	83 ec 08             	sub    esp,0x8
c000a291:	50                   	push   eax
c000a292:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a296:	e8 6f f6 ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c000a29b:	83 c4 10             	add    esp,0x10
c000a29e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a2a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2a5:	6a 11                	push   0x11
c000a2a7:	53                   	push   ebx
c000a2a8:	50                   	push   eax
c000a2a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2ad:	e8 6c fa ff ff       	call   c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2b2:	83 c4 10             	add    esp,0x10
c000a2b5:	fb                   	sti    
c000a2b6:	90                   	nop
c000a2b7:	83 c4 28             	add    esp,0x28
c000a2ba:	5b                   	pop    ebx
c000a2bb:	c3                   	ret    

c000a2bc <VAS::evict(unsigned long)>:
c000a2bc:	55                   	push   ebp
c000a2bd:	57                   	push   edi
c000a2be:	56                   	push   esi
c000a2bf:	53                   	push   ebx
c000a2c0:	83 ec 1c             	sub    esp,0x1c
c000a2c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2c7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2cf:	e8 96 f4 ff ff       	call   c000976a <Virt::allocateSwapfilePage()>
c000a2d4:	89 c7                	mov    edi,eax
c000a2d6:	a1 cc 37 02 c0       	mov    eax,ds:0xc00237cc
c000a2db:	85 c0                	test   eax,eax
c000a2dd:	7e 40                	jle    c000a31f <VAS::evict(unsigned long)+0x63>
c000a2df:	89 ee                	mov    esi,ebp
c000a2e1:	31 db                	xor    ebx,ebx
c000a2e3:	83 ec 0c             	sub    esp,0xc
c000a2e6:	57                   	push   edi
c000a2e7:	e8 68 f4 ff ff       	call   c0009754 <Virt::swapIDToSector(unsigned long)>
c000a2ec:	31 d2                	xor    edx,edx
c000a2ee:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2f1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f7:	6a 01                	push   0x1
c000a2f9:	52                   	push   edx
c000a2fa:	01 d8                	add    eax,ebx
c000a2fc:	83 c3 01             	add    ebx,0x1
c000a2ff:	50                   	push   eax
c000a300:	0f be 05 d8 37 02 c0 	movsx  eax,BYTE PTR ds:0xc00237d8
c000a307:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a30e:	50                   	push   eax
c000a30f:	e8 02 3b 00 00       	call   c000de16 <LogicalDisk::write(unsigned long long, int, void*)>
c000a314:	83 c4 20             	add    esp,0x20
c000a317:	39 1d cc 37 02 c0    	cmp    DWORD PTR ds:0xc00237cc,ebx
c000a31d:	7f c4                	jg     c000a2e3 <VAS::evict(unsigned long)+0x27>
c000a31f:	c1 e7 0c             	shl    edi,0xc
c000a322:	83 ec 08             	sub    esp,0x8
c000a325:	55                   	push   ebp
c000a326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a32a:	50                   	push   eax
c000a32b:	e8 da f5 ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c000a330:	8b 10                	mov    edx,DWORD PTR [eax]
c000a332:	89 d3                	mov    ebx,edx
c000a334:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a33a:	09 d7                	or     edi,edx
c000a33c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a342:	89 38                	mov    DWORD PTR [eax],edi
c000a344:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a347:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a34d:	83 c2 01             	add    edx,0x1
c000a350:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a356:	e8 3e da ff ff       	call   c0007d99 <Phys::freePage(unsigned long)>
c000a35b:	0f 20 d8             	mov    eax,cr3
c000a35e:	0f 22 d8             	mov    cr3,eax
c000a361:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a367:	51                   	push   ecx
c000a368:	55                   	push   ebp
c000a369:	53                   	push   ebx
c000a36a:	68 a0 11 02 c0       	push   0xc00211a0
c000a36f:	e8 b6 05 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000a374:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a379:	c7 44 24 50 5a 13 02 c0 	mov    DWORD PTR [esp+0x50],0xc002135a
c000a381:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a385:	8d 50 01             	lea    edx,[eax+0x1]
c000a388:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a38e:	83 c4 3c             	add    esp,0x3c
c000a391:	5b                   	pop    ebx
c000a392:	5e                   	pop    esi
c000a393:	5f                   	pop    edi
c000a394:	5d                   	pop    ebp
c000a395:	e9 90 05 00 00       	jmp    c000a92a <Dbg::kprintf(char const*, ...)>

c000a39a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a39a:	55                   	push   ebp
c000a39b:	57                   	push   edi
c000a39c:	56                   	push   esi
c000a39d:	53                   	push   ebx
c000a39e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a3a4:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a3ab:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a3b1:	77 78                	ja     c000a42b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a3b3:	83 ec 08             	sub    esp,0x8
c000a3b6:	53                   	push   ebx
c000a3b7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3bd:	68 7d 13 02 c0       	push   0xc002137d
c000a3c2:	e8 63 05 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000a3c7:	58                   	pop    eax
c000a3c8:	5a                   	pop    edx
c000a3c9:	53                   	push   ebx
c000a3ca:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3d1:	51                   	push   ecx
c000a3d2:	e8 33 f5 ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c000a3d7:	83 c4 10             	add    esp,0x10
c000a3da:	85 c0                	test   eax,eax
c000a3dc:	89 c5                	mov    ebp,eax
c000a3de:	0f 95 c0             	setne  al
c000a3e1:	85 db                	test   ebx,ebx
c000a3e3:	0f 95 c2             	setne  dl
c000a3e6:	21 d0                	and    eax,edx
c000a3e8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3ec:	a8 01                	test   al,0x1
c000a3ee:	75 0f                	jne    c000a3ff <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3f0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3f4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3fa:	5b                   	pop    ebx
c000a3fb:	5e                   	pop    esi
c000a3fc:	5f                   	pop    edi
c000a3fd:	5d                   	pop    ebp
c000a3fe:	c3                   	ret    
c000a3ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a402:	f6 c4 02             	test   ah,0x2
c000a405:	75 39                	jne    c000a440 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a407:	89 c2                	mov    edx,eax
c000a409:	81 e2 01 04 00 00    	and    edx,0x401
c000a40f:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a415:	74 73                	je     c000a48a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a417:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a41c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a420:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a426:	5b                   	pop    ebx
c000a427:	5e                   	pop    esi
c000a428:	5f                   	pop    edi
c000a429:	5d                   	pop    ebp
c000a42a:	c3                   	ret    
c000a42b:	83 ec 0c             	sub    esp,0xc
c000a42e:	68 6b 13 02 c0       	push   0xc002136b
c000a433:	e8 a7 71 00 00       	call   c00115df <KePanic(char const*)>
c000a438:	83 c4 10             	add    esp,0x10
c000a43b:	e9 73 ff ff ff       	jmp    c000a3b3 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a440:	83 ec 0c             	sub    esp,0xc
c000a443:	89 de                	mov    esi,ebx
c000a445:	68 d0 11 02 c0       	push   0xc00211d0
c000a44a:	e8 db 04 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000a44f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a453:	e8 aa d9 ff ff       	call   c0007e02 <Phys::allocatePage()>
c000a458:	ba 00 10 00 00       	mov    edx,0x1000
c000a45d:	89 d1                	mov    ecx,edx
c000a45f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a461:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a464:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a46a:	09 c8                	or     eax,ecx
c000a46c:	83 c8 02             	or     eax,0x2
c000a46f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a472:	0f 20 d8             	mov    eax,cr3
c000a475:	0f 22 d8             	mov    cr3,eax
c000a478:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a47c:	89 df                	mov    edi,ebx
c000a47e:	89 d1                	mov    ecx,edx
c000a480:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a482:	83 c4 10             	add    esp,0x10
c000a485:	e9 66 ff ff ff       	jmp    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a48a:	c1 e8 0c             	shr    eax,0xc
c000a48d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a491:	e8 6c d9 ff ff       	call   c0007e02 <Phys::allocatePage()>
c000a496:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a499:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a49f:	09 c2                	or     edx,eax
c000a4a1:	81 ca 01 08 00 00    	or     edx,0x801
c000a4a7:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a4aa:	a1 cc 37 02 c0       	mov    eax,ds:0xc00237cc
c000a4af:	85 c0                	test   eax,eax
c000a4b1:	7e 44                	jle    c000a4f7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a4b3:	89 df                	mov    edi,ebx
c000a4b5:	31 f6                	xor    esi,esi
c000a4b7:	83 ec 0c             	sub    esp,0xc
c000a4ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a4be:	51                   	push   ecx
c000a4bf:	e8 90 f2 ff ff       	call   c0009754 <Virt::swapIDToSector(unsigned long)>
c000a4c4:	31 d2                	xor    edx,edx
c000a4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4c9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4cf:	6a 01                	push   0x1
c000a4d1:	52                   	push   edx
c000a4d2:	01 f0                	add    eax,esi
c000a4d4:	83 c6 01             	add    esi,0x1
c000a4d7:	50                   	push   eax
c000a4d8:	0f be 05 d8 37 02 c0 	movsx  eax,BYTE PTR ds:0xc00237d8
c000a4df:	8b 2c 85 7c b7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4884]
c000a4e6:	55                   	push   ebp
c000a4e7:	e8 be 38 00 00       	call   c000ddaa <LogicalDisk::read(unsigned long long, int, void*)>
c000a4ec:	83 c4 20             	add    esp,0x20
c000a4ef:	39 35 cc 37 02 c0    	cmp    DWORD PTR ds:0xc00237cc,esi
c000a4f5:	7f c0                	jg     c000a4b7 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4f7:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a4fc:	83 ec 04             	sub    esp,0x4
c000a4ff:	83 e8 01             	sub    eax,0x1
c000a502:	50                   	push   eax
c000a503:	53                   	push   ebx
c000a504:	68 90 13 02 c0       	push   0xc0021390
c000a509:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a50e:	e8 17 04 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000a513:	58                   	pop    eax
c000a514:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a518:	52                   	push   edx
c000a519:	e8 13 f2 ff ff       	call   c0009731 <Virt::freeSwapfilePage(unsigned long)>
c000a51e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a523:	83 c4 10             	add    esp,0x10
c000a526:	83 e8 01             	sub    eax,0x1
c000a529:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a52e:	85 c0                	test   eax,eax
c000a530:	75 01                	jne    c000a533 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a532:	fb                   	sti    
c000a533:	0f 20 d8             	mov    eax,cr3
c000a536:	0f 22 d8             	mov    cr3,eax
c000a539:	e9 b2 fe ff ff       	jmp    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a53e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a53e:	55                   	push   ebp
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	83 ec 28             	sub    esp,0x28
c000a545:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a549:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a54d:	50                   	push   eax
c000a54e:	e8 c2 f0 ff ff       	call   c0009615 <Virt::allocateKernelVirtualPages(int)>
c000a553:	83 c4 0c             	add    esp,0xc
c000a556:	6a 07                	push   0x7
c000a558:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a55c:	52                   	push   edx
c000a55d:	89 c5                	mov    ebp,eax
c000a55f:	53                   	push   ebx
c000a560:	e8 c1 f8 ff ff       	call   c0009e26 <VAS::allocatePages(int, int)>
c000a565:	83 c4 10             	add    esp,0x10
c000a568:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a56c:	89 c7                	mov    edi,eax
c000a56e:	85 c9                	test   ecx,ecx
c000a570:	74 2f                	je     c000a5a1 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a572:	31 f6                	xor    esi,esi
c000a574:	e8 89 d8 ff ff       	call   c0007e02 <Phys::allocatePage()>
c000a579:	83 c6 01             	add    esi,0x1
c000a57c:	6a 03                	push   0x3
c000a57e:	55                   	push   ebp
c000a57f:	50                   	push   eax
c000a580:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a584:	53                   	push   ebx
c000a585:	e8 94 f7 ff ff       	call   c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a58a:	6a 07                	push   0x7
c000a58c:	57                   	push   edi
c000a58d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a591:	50                   	push   eax
c000a592:	53                   	push   ebx
c000a593:	e8 86 f7 ff ff       	call   c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a598:	83 c4 20             	add    esp,0x20
c000a59b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a59f:	75 d3                	jne    c000a574 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a5a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a5a5:	89 28                	mov    DWORD PTR [eax],ebp
c000a5a7:	83 c4 1c             	add    esp,0x1c
c000a5aa:	89 f8                	mov    eax,edi
c000a5ac:	5b                   	pop    ebx
c000a5ad:	5e                   	pop    esi
c000a5ae:	5f                   	pop    edi
c000a5af:	5d                   	pop    ebp
c000a5b0:	c3                   	ret    
c000a5b1:	90                   	nop

c000a5b2 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a5b2:	53                   	push   ebx
c000a5b3:	83 ec 14             	sub    esp,0x14
c000a5b6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5ba:	68 f0 11 02 c0       	push   0xc00211f0
c000a5bf:	e8 66 03 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000a5c4:	c7 04 24 50 12 02 c0 	mov    DWORD PTR [esp],0xc0021250
c000a5cb:	e8 5a 03 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000a5d0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5d4:	83 c4 18             	add    esp,0x18
c000a5d7:	5b                   	pop    ebx
c000a5d8:	e9 4c f3 ff ff       	jmp    c0009929 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5dd:	90                   	nop

c000a5de <VAS::scanForEviction()>:
c000a5de:	57                   	push   edi
c000a5df:	56                   	push   esi
c000a5e0:	31 f6                	xor    esi,esi
c000a5e2:	53                   	push   ebx
c000a5e3:	83 ec 10             	sub    esp,0x10
c000a5e6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ea:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5ed:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5f3:	75 0e                	jne    c000a603 <VAS::scanForEviction()+0x25>
c000a5f5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5f8:	89 da                	mov    edx,ebx
c000a5fa:	c1 ea 16             	shr    edx,0x16
c000a5fd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a601:	74 57                	je     c000a65a <VAS::scanForEviction()+0x7c>
c000a603:	53                   	push   ebx
c000a604:	57                   	push   edi
c000a605:	e8 00 f3 ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c000a60a:	5a                   	pop    edx
c000a60b:	59                   	pop    ecx
c000a60c:	8b 10                	mov    edx,DWORD PTR [eax]
c000a60e:	89 d1                	mov    ecx,edx
c000a610:	c1 e9 0c             	shr    ecx,0xc
c000a613:	74 10                	je     c000a625 <VAS::scanForEviction()+0x47>
c000a615:	89 d1                	mov    ecx,edx
c000a617:	81 e1 01 08 00 00    	and    ecx,0x801
c000a61d:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a623:	74 40                	je     c000a665 <VAS::scanForEviction()+0x87>
c000a625:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a62b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a631:	76 2d                	jbe    c000a660 <VAS::scanForEviction()+0x82>
c000a633:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a63a:	83 c6 01             	add    esi,0x1
c000a63d:	83 fe 03             	cmp    esi,0x3
c000a640:	74 32                	je     c000a674 <VAS::scanForEviction()+0x96>
c000a642:	31 db                	xor    ebx,ebx
c000a644:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a64a:	75 b7                	jne    c000a603 <VAS::scanForEviction()+0x25>
c000a64c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a64f:	89 da                	mov    edx,ebx
c000a651:	c1 ea 16             	shr    edx,0x16
c000a654:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a658:	75 a9                	jne    c000a603 <VAS::scanForEviction()+0x25>
c000a65a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a660:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a663:	eb 88                	jmp    c000a5ed <VAS::scanForEviction()+0xf>
c000a665:	f6 c2 20             	test   dl,0x20
c000a668:	74 13                	je     c000a67d <VAS::scanForEviction()+0x9f>
c000a66a:	83 e2 df             	and    edx,0xffffffdf
c000a66d:	89 10                	mov    DWORD PTR [eax],edx
c000a66f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a672:	eb b1                	jmp    c000a625 <VAS::scanForEviction()+0x47>
c000a674:	83 c4 10             	add    esp,0x10
c000a677:	31 c0                	xor    eax,eax
c000a679:	5b                   	pop    ebx
c000a67a:	5e                   	pop    esi
c000a67b:	5f                   	pop    edi
c000a67c:	c3                   	ret    
c000a67d:	89 d0                	mov    eax,edx
c000a67f:	83 ec 08             	sub    esp,0x8
c000a682:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a687:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a68b:	53                   	push   ebx
c000a68c:	68 a5 13 02 c0       	push   0xc00213a5
c000a691:	e8 94 02 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000a696:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a699:	58                   	pop    eax
c000a69a:	5a                   	pop    edx
c000a69b:	51                   	push   ecx
c000a69c:	57                   	push   edi
c000a69d:	e8 1a fc ff ff       	call   c000a2bc <VAS::evict(unsigned long)>
c000a6a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a6a5:	5b                   	pop    ebx
c000a6a6:	5e                   	pop    esi
c000a6a7:	50                   	push   eax
c000a6a8:	68 b9 13 02 c0       	push   0xc00213b9
c000a6ad:	e8 78 02 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000a6b2:	58                   	pop    eax
c000a6b3:	5a                   	pop    edx
c000a6b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6b8:	50                   	push   eax
c000a6b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6bd:	68 cc 13 02 c0       	push   0xc00213cc
c000a6c2:	e8 63 02 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000a6c7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6ca:	83 c4 10             	add    esp,0x10
c000a6cd:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6d3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	5b                   	pop    ebx
c000a6de:	5e                   	pop    esi
c000a6df:	5f                   	pop    edi
c000a6e0:	c3                   	ret    

c000a6e1 <mapVASFirstTime>:
c000a6e1:	55                   	push   ebp
c000a6e2:	57                   	push   edi
c000a6e3:	56                   	push   esi
c000a6e4:	53                   	push   ebx
c000a6e5:	83 ec 0c             	sub    esp,0xc
c000a6e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6ed:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6f0:	83 fa 01             	cmp    edx,0x1
c000a6f3:	0f 84 cb 00 00 00    	je     c000a7c4 <mapVASFirstTime+0xe3>
c000a6f9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6fc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a701:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a706:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a709:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a70f:	c1 e5 15             	shl    ebp,0x15
c000a712:	29 eb                	sub    ebx,ebp
c000a714:	29 ef                	sub    edi,ebp
c000a716:	e8 e7 d6 ff ff       	call   c0007e02 <Phys::allocatePage()>
c000a71b:	83 ec 0c             	sub    esp,0xc
c000a71e:	68 03 04 00 00       	push   0x403
c000a723:	6a 01                	push   0x1
c000a725:	53                   	push   ebx
c000a726:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a72c:	50                   	push   eax
c000a72d:	56                   	push   esi
c000a72e:	e8 f5 f7 ff ff       	call   c0009f28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a733:	83 c4 20             	add    esp,0x20
c000a736:	39 fb                	cmp    ebx,edi
c000a738:	75 dc                	jne    c000a716 <mapVASFirstTime+0x35>
c000a73a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a73f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a744:	29 eb                	sub    ebx,ebp
c000a746:	29 ef                	sub    edi,ebp
c000a748:	e8 b5 d6 ff ff       	call   c0007e02 <Phys::allocatePage()>
c000a74d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a751:	83 fa 01             	cmp    edx,0x1
c000a754:	19 d2                	sbb    edx,edx
c000a756:	83 ec 0c             	sub    esp,0xc
c000a759:	83 e2 04             	and    edx,0x4
c000a75c:	81 c2 03 04 00 00    	add    edx,0x403
c000a762:	52                   	push   edx
c000a763:	6a 01                	push   0x1
c000a765:	53                   	push   ebx
c000a766:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a76c:	50                   	push   eax
c000a76d:	56                   	push   esi
c000a76e:	e8 b5 f7 ff ff       	call   c0009f28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a773:	83 c4 20             	add    esp,0x20
c000a776:	39 df                	cmp    edi,ebx
c000a778:	75 ce                	jne    c000a748 <mapVASFirstTime+0x67>
c000a77a:	83 ec 0c             	sub    esp,0xc
c000a77d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a782:	6a 04                	push   0x4
c000a784:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a78a:	6a ff                	push   0xffffffff
c000a78c:	c1 eb 0c             	shr    ebx,0xc
c000a78f:	53                   	push   ebx
c000a790:	68 00 50 02 c0       	push   0xc0025000
c000a795:	56                   	push   esi
c000a796:	e8 09 f3 ff ff       	call   c0009aa4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79b:	83 c4 14             	add    esp,0x14
c000a79e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a7a3:	6a 04                	push   0x4
c000a7a5:	6a ff                	push   0xffffffff
c000a7a7:	53                   	push   ebx
c000a7a8:	68 00 50 02 c0       	push   0xc0025000
c000a7ad:	50                   	push   eax
c000a7ae:	e8 f1 f2 ff ff       	call   c0009aa4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7b3:	0f 20 d8             	mov    eax,cr3
c000a7b6:	0f 22 d8             	mov    cr3,eax
c000a7b9:	83 c4 20             	add    esp,0x20
c000a7bc:	83 c4 0c             	add    esp,0xc
c000a7bf:	5b                   	pop    ebx
c000a7c0:	5e                   	pop    esi
c000a7c1:	5f                   	pop    edi
c000a7c2:	5d                   	pop    ebp
c000a7c3:	c3                   	ret    
c000a7c4:	83 ec 0c             	sub    esp,0xc
c000a7c7:	68 d9 13 02 c0       	push   0xc00213d9
c000a7cc:	e8 59 01 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000a7d1:	83 c4 10             	add    esp,0x10
c000a7d4:	83 c4 0c             	add    esp,0xc
c000a7d7:	5b                   	pop    ebx
c000a7d8:	5e                   	pop    esi
c000a7d9:	5f                   	pop    edi
c000a7da:	5d                   	pop    ebp
c000a7db:	c3                   	ret    

c000a7dc <__cxa_atexit>:
c000a7dc:	31 c0                	xor    eax,eax
c000a7de:	c3                   	ret    

c000a7df <__cxa_finalize>:
c000a7df:	c3                   	ret    

c000a7e0 <__stack_chk_fail>:
c000a7e0:	55                   	push   ebp
c000a7e1:	89 e5                	mov    ebp,esp
c000a7e3:	83 ec 10             	sub    esp,0x10
c000a7e6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7e9:	68 f2 13 02 c0       	push   0xc00213f2
c000a7ee:	e8 37 01 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000a7f3:	58                   	pop    eax
c000a7f4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7f7:	5a                   	pop    edx
c000a7f8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7fb:	68 f2 13 02 c0       	push   0xc00213f2
c000a800:	e8 25 01 00 00       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000a805:	c7 04 24 fa 13 02 c0 	mov    DWORD PTR [esp],0xc00213fa
c000a80c:	e8 ce 6d 00 00       	call   c00115df <KePanic(char const*)>
c000a811:	83 c4 10             	add    esp,0x10
c000a814:	c9                   	leave  
c000a815:	c3                   	ret    

c000a816 <__cxa_pure_virtual>:
c000a816:	83 ec 18             	sub    esp,0x18
c000a819:	68 12 14 02 c0       	push   0xc0021412
c000a81e:	e8 bc 6d 00 00       	call   c00115df <KePanic(char const*)>
c000a823:	83 c4 1c             	add    esp,0x1c
c000a826:	c3                   	ret    

c000a827 <operator new[](unsigned long)>:
c000a827:	e9 c7 d2 ff ff       	jmp    c0007af3 <malloc>

c000a82c <operator delete(void*, unsigned long)>:
c000a82c:	e9 e2 d2 ff ff       	jmp    c0007b13 <rfree>

c000a831 <operator delete[](void*)>:
c000a831:	e9 dd d2 ff ff       	jmp    c0007b13 <rfree>

c000a836 <operator delete[](void*, unsigned long)>:
c000a836:	e9 d8 d2 ff ff       	jmp    c0007b13 <rfree>

c000a83b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a83b:	55                   	push   ebp
c000a83c:	57                   	push   edi
c000a83d:	56                   	push   esi
c000a83e:	53                   	push   ebx
c000a83f:	83 ec 20             	sub    esp,0x20
c000a842:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a846:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a84e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a852:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a85a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a85e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a866:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a86e:	89 f7                	mov    edi,esi
c000a870:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a875:	89 eb                	mov    ebx,ebp
c000a877:	eb 02                	jmp    c000a87b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a879:	89 c7                	mov    edi,eax
c000a87b:	31 d2                	xor    edx,edx
c000a87d:	89 f8                	mov    eax,edi
c000a87f:	f7 f1                	div    ecx
c000a881:	83 c3 01             	add    ebx,0x1
c000a884:	39 cf                	cmp    edi,ecx
c000a886:	73 f1                	jae    c000a879 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a888:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a88b:	eb 02                	jmp    c000a88f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a88d:	89 c6                	mov    esi,eax
c000a88f:	31 d2                	xor    edx,edx
c000a891:	89 f0                	mov    eax,esi
c000a893:	f7 f1                	div    ecx
c000a895:	83 eb 01             	sub    ebx,0x1
c000a898:	39 ce                	cmp    esi,ecx
c000a89a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a89e:	88 13                	mov    BYTE PTR [ebx],dl
c000a8a0:	73 eb                	jae    c000a88d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a8a2:	83 c4 20             	add    esp,0x20
c000a8a5:	89 e8                	mov    eax,ebp
c000a8a7:	5b                   	pop    ebx
c000a8a8:	5e                   	pop    esi
c000a8a9:	5f                   	pop    edi
c000a8aa:	5d                   	pop    ebp
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logc(char)>:
c000a8ac:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8b7:	75 12                	jne    c000a8cb <Dbg::logc(char)+0x1f>
c000a8b9:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8be:	ec                   	in     al,dx
c000a8bf:	a8 20                	test   al,0x20
c000a8c1:	74 fb                	je     c000a8be <Dbg::logc(char)+0x12>
c000a8c3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8c8:	88 c8                	mov    al,cl
c000a8ca:	ee                   	out    dx,al
c000a8cb:	c3                   	ret    

c000a8cc <Dbg::logs(char*)>:
c000a8cc:	53                   	push   ebx
c000a8cd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8d1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8d4:	85 c0                	test   eax,eax
c000a8d6:	74 11                	je     c000a8e9 <Dbg::logs(char*)+0x1d>
c000a8d8:	50                   	push   eax
c000a8d9:	83 c3 01             	add    ebx,0x1
c000a8dc:	e8 cb ff ff ff       	call   c000a8ac <Dbg::logc(char)>
c000a8e1:	58                   	pop    eax
c000a8e2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8e5:	85 c0                	test   eax,eax
c000a8e7:	75 ef                	jne    c000a8d8 <Dbg::logs(char*)+0xc>
c000a8e9:	5b                   	pop    ebx
c000a8ea:	c3                   	ret    

c000a8eb <Dbg::logWriteInt(unsigned int)>:
c000a8eb:	83 ec 10             	sub    esp,0x10
c000a8ee:	6a 0a                	push   0xa
c000a8f0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f4:	50                   	push   eax
c000a8f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8f9:	50                   	push   eax
c000a8fa:	e8 3c ff ff ff       	call   c000a83b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8ff:	50                   	push   eax
c000a900:	e8 c7 ff ff ff       	call   c000a8cc <Dbg::logs(char*)>
c000a905:	83 c4 20             	add    esp,0x20
c000a908:	c3                   	ret    

c000a909 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a909:	83 ec 10             	sub    esp,0x10
c000a90c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a910:	50                   	push   eax
c000a911:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a915:	50                   	push   eax
c000a916:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a91a:	52                   	push   edx
c000a91b:	e8 1b ff ff ff       	call   c000a83b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a920:	50                   	push   eax
c000a921:	e8 a6 ff ff ff       	call   c000a8cc <Dbg::logs(char*)>
c000a926:	83 c4 20             	add    esp,0x20
c000a929:	c3                   	ret    

c000a92a <Dbg::kprintf(char const*, ...)>:
c000a92a:	55                   	push   ebp
c000a92b:	57                   	push   edi
c000a92c:	56                   	push   esi
c000a92d:	53                   	push   ebx
c000a92e:	83 ec 0c             	sub    esp,0xc
c000a931:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a938:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a93c:	74 08                	je     c000a946 <Dbg::kprintf(char const*, ...)+0x1c>
c000a93e:	83 c4 0c             	add    esp,0xc
c000a941:	5b                   	pop    ebx
c000a942:	5e                   	pop    esi
c000a943:	5f                   	pop    edi
c000a944:	5d                   	pop    ebp
c000a945:	c3                   	ret    
c000a946:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a94a:	31 ff                	xor    edi,edi
c000a94c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a950:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a953:	85 c0                	test   eax,eax
c000a955:	74 e7                	je     c000a93e <Dbg::kprintf(char const*, ...)+0x14>
c000a957:	8d 77 01             	lea    esi,[edi+0x1]
c000a95a:	83 f8 25             	cmp    eax,0x25
c000a95d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a960:	75 47                	jne    c000a9a9 <Dbg::kprintf(char const*, ...)+0x7f>
c000a962:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a965:	83 c7 02             	add    edi,0x2
c000a968:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a96b:	83 e8 25             	sub    eax,0x25
c000a96e:	0f b6 c0             	movzx  eax,al
c000a971:	83 f8 53             	cmp    eax,0x53
c000a974:	0f 87 ce 00 00 00    	ja     c000aa48 <Dbg::kprintf(char const*, ...)+0x11e>
c000a97a:	ff 24 85 28 14 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdebd8]
c000a981:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a985:	89 c8                	mov    eax,ecx
c000a987:	83 c1 04             	add    ecx,0x4
c000a98a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a98e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a990:	55                   	push   ebp
c000a991:	e8 55 ff ff ff       	call   c000a8eb <Dbg::logWriteInt(unsigned int)>
c000a996:	58                   	pop    eax
c000a997:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a99a:	85 c0                	test   eax,eax
c000a99c:	74 a0                	je     c000a93e <Dbg::kprintf(char const*, ...)+0x14>
c000a99e:	8d 77 01             	lea    esi,[edi+0x1]
c000a9a1:	83 f8 25             	cmp    eax,0x25
c000a9a4:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9a7:	74 b9                	je     c000a962 <Dbg::kprintf(char const*, ...)+0x38>
c000a9a9:	50                   	push   eax
c000a9aa:	89 f7                	mov    edi,esi
c000a9ac:	e8 fb fe ff ff       	call   c000a8ac <Dbg::logc(char)>
c000a9b1:	89 ee                	mov    esi,ebp
c000a9b3:	58                   	pop    eax
c000a9b4:	eb e1                	jmp    c000a997 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9b6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9ba:	89 c8                	mov    eax,ecx
c000a9bc:	83 c1 04             	add    ecx,0x4
c000a9bf:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9c5:	50                   	push   eax
c000a9c6:	e8 01 ff ff ff       	call   c000a8cc <Dbg::logs(char*)>
c000a9cb:	58                   	pop    eax
c000a9cc:	eb c9                	jmp    c000a997 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9d2:	89 d0                	mov    eax,edx
c000a9d4:	83 c2 04             	add    edx,0x4
c000a9d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9db:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dd:	50                   	push   eax
c000a9de:	e8 08 ff ff ff       	call   c000a8eb <Dbg::logWriteInt(unsigned int)>
c000a9e3:	58                   	pop    eax
c000a9e4:	eb b1                	jmp    c000a997 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ea:	89 d0                	mov    eax,edx
c000a9ec:	83 c2 04             	add    edx,0x4
c000a9ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9f6:	50                   	push   eax
c000a9f7:	e8 b0 fe ff ff       	call   c000a8ac <Dbg::logc(char)>
c000a9fc:	58                   	pop    eax
c000a9fd:	eb 98                	jmp    c000a997 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa03:	89 c8                	mov    eax,ecx
c000aa05:	83 c1 04             	add    ecx,0x4
c000aa08:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa0c:	6a 10                	push   0x10
c000aa0e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa10:	51                   	push   ecx
c000aa11:	e8 f3 fe ff ff       	call   c000a909 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa16:	5d                   	pop    ebp
c000aa17:	58                   	pop    eax
c000aa18:	e9 7a ff ff ff       	jmp    c000a997 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa21:	89 d0                	mov    eax,edx
c000aa23:	83 c2 08             	add    edx,0x8
c000aa26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa2a:	6a 10                	push   0x10
c000aa2c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa2e:	50                   	push   eax
c000aa2f:	e8 d5 fe ff ff       	call   c000a909 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa34:	58                   	pop    eax
c000aa35:	5a                   	pop    edx
c000aa36:	e9 5c ff ff ff       	jmp    c000a997 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa3b:	6a 25                	push   0x25
c000aa3d:	e8 6a fe ff ff       	call   c000a8ac <Dbg::logc(char)>
c000aa42:	5a                   	pop    edx
c000aa43:	e9 4f ff ff ff       	jmp    c000a997 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa48:	6a 25                	push   0x25
c000aa4a:	e8 5d fe ff ff       	call   c000a8ac <Dbg::logc(char)>
c000aa4f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa53:	50                   	push   eax
c000aa54:	e8 53 fe ff ff       	call   c000a8ac <Dbg::logc(char)>
c000aa59:	5a                   	pop    edx
c000aa5a:	59                   	pop    ecx
c000aa5b:	e9 37 ff ff ff       	jmp    c000a997 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa60 <KiUbsanPrintDetails(char const*, void*)>:
c000aa60:	83 ec 1c             	sub    esp,0x1c
c000aa63:	83 ec 08             	sub    esp,0x8
c000aa66:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa6a:	68 78 15 02 c0       	push   0xc0021578
c000aa6f:	e8 b6 fe ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000aa74:	83 c4 10             	add    esp,0x10
c000aa77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa83:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa85:	83 ec 08             	sub    esp,0x8
c000aa88:	50                   	push   eax
c000aa89:	68 8c 15 02 c0       	push   0xc002158c
c000aa8e:	e8 97 fe ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000aa93:	83 c4 10             	add    esp,0x10
c000aa96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa9d:	83 ec 08             	sub    esp,0x8
c000aaa0:	50                   	push   eax
c000aaa1:	68 96 15 02 c0       	push   0xc0021596
c000aaa6:	e8 7f fe ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000aaab:	83 c4 10             	add    esp,0x10
c000aaae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aab5:	83 ec 08             	sub    esp,0x8
c000aab8:	50                   	push   eax
c000aab9:	68 a0 15 02 c0       	push   0xc00215a0
c000aabe:	e8 67 fe ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000aac3:	83 c4 10             	add    esp,0x10
c000aac6:	90                   	nop
c000aac7:	83 c4 1c             	add    esp,0x1c
c000aaca:	c3                   	ret    
c000aacb:	90                   	nop

c000aacc <__ubsan_handle_type_mismatch_v1>:
c000aacc:	83 ec 0c             	sub    esp,0xc
c000aacf:	83 ec 08             	sub    esp,0x8
c000aad2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aad6:	68 e4 16 02 c0       	push   0xc00216e4
c000aadb:	e8 80 ff ff ff       	call   c000aa60 <KiUbsanPrintDetails(char const*, void*)>
c000aae0:	83 c4 10             	add    esp,0x10
c000aae3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aae8:	75 16                	jne    c000ab00 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaea:	83 ec 0c             	sub    esp,0xc
c000aaed:	68 aa 15 02 c0       	push   0xc00215aa
c000aaf2:	e8 33 fe ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000aaf7:	83 c4 10             	add    esp,0x10
c000aafa:	e9 91 00 00 00       	jmp    c000ab90 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aaff:	90                   	nop
c000ab00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab04:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab07:	85 c0                	test   eax,eax
c000ab09:	74 29                	je     c000ab34 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab12:	83 e8 01             	sub    eax,0x1
c000ab15:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab19:	75 19                	jne    c000ab34 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab1b:	83 ec 08             	sub    esp,0x8
c000ab1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab22:	68 04 17 02 c0       	push   0xc0021704
c000ab27:	e8 fe fd ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000ab2c:	83 c4 10             	add    esp,0x10
c000ab2f:	eb 5f                	jmp    c000ab90 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab31:	8d 76 00             	lea    esi,[esi+0x0]
c000ab34:	83 ec 0c             	sub    esp,0xc
c000ab37:	68 bf 15 02 c0       	push   0xc00215bf
c000ab3c:	e8 e9 fd ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000ab41:	83 c4 10             	add    esp,0x10
c000ab44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab48:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab4b:	0f b6 c0             	movzx  eax,al
c000ab4e:	83 ec 08             	sub    esp,0x8
c000ab51:	50                   	push   eax
c000ab52:	68 d9 15 02 c0       	push   0xc00215d9
c000ab57:	e8 ce fd ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000ab5c:	83 c4 10             	add    esp,0x10
c000ab5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab63:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab66:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab71:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab74:	0f b6 c0             	movzx  eax,al
c000ab77:	8b 04 85 e0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc820]
c000ab7e:	51                   	push   ecx
c000ab7f:	52                   	push   edx
c000ab80:	50                   	push   eax
c000ab81:	68 2c 17 02 c0       	push   0xc002172c
c000ab86:	e8 9f fd ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000ab8b:	83 c4 10             	add    esp,0x10
c000ab8e:	66 90                	xchg   ax,ax
c000ab90:	83 ec 0c             	sub    esp,0xc
c000ab93:	68 e4 16 02 c0       	push   0xc00216e4
c000ab98:	e8 42 6a 00 00       	call   c00115df <KePanic(char const*)>
c000ab9d:	83 c4 10             	add    esp,0x10
c000aba0:	90                   	nop
c000aba1:	83 c4 0c             	add    esp,0xc
c000aba4:	c3                   	ret    
c000aba5:	8d 76 00             	lea    esi,[esi+0x0]

c000aba8 <__ubsan_handle_pointer_overflow>:
c000aba8:	83 ec 0c             	sub    esp,0xc
c000abab:	83 ec 08             	sub    esp,0x8
c000abae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abb2:	68 74 17 02 c0       	push   0xc0021774
c000abb7:	e8 a4 fe ff ff       	call   c000aa60 <KiUbsanPrintDetails(char const*, void*)>
c000abbc:	83 c4 10             	add    esp,0x10
c000abbf:	83 ec 0c             	sub    esp,0xc
c000abc2:	68 74 17 02 c0       	push   0xc0021774
c000abc7:	e8 13 6a 00 00       	call   c00115df <KePanic(char const*)>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	90                   	nop
c000abd0:	83 c4 0c             	add    esp,0xc
c000abd3:	c3                   	ret    

c000abd4 <__ubsan_handle_out_of_bounds>:
c000abd4:	83 ec 0c             	sub    esp,0xc
c000abd7:	83 ec 08             	sub    esp,0x8
c000abda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abde:	68 e4 15 02 c0       	push   0xc00215e4
c000abe3:	e8 78 fe ff ff       	call   c000aa60 <KiUbsanPrintDetails(char const*, void*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	83 ec 0c             	sub    esp,0xc
c000abee:	68 e4 15 02 c0       	push   0xc00215e4
c000abf3:	e8 e7 69 00 00       	call   c00115df <KePanic(char const*)>
c000abf8:	83 c4 10             	add    esp,0x10
c000abfb:	90                   	nop
c000abfc:	83 c4 0c             	add    esp,0xc
c000abff:	c3                   	ret    

c000ac00 <__ubsan_handle_add_overflow>:
c000ac00:	83 ec 0c             	sub    esp,0xc
c000ac03:	83 ec 08             	sub    esp,0x8
c000ac06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac0a:	68 01 16 02 c0       	push   0xc0021601
c000ac0f:	e8 4c fe ff ff       	call   c000aa60 <KiUbsanPrintDetails(char const*, void*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	83 ec 0c             	sub    esp,0xc
c000ac1a:	68 01 16 02 c0       	push   0xc0021601
c000ac1f:	e8 bb 69 00 00       	call   c00115df <KePanic(char const*)>
c000ac24:	83 c4 10             	add    esp,0x10
c000ac27:	90                   	nop
c000ac28:	83 c4 0c             	add    esp,0xc
c000ac2b:	c3                   	ret    

c000ac2c <__ubsan_handle_load_invalid_value>:
c000ac2c:	83 ec 0c             	sub    esp,0xc
c000ac2f:	83 ec 08             	sub    esp,0x8
c000ac32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac36:	68 94 17 02 c0       	push   0xc0021794
c000ac3b:	e8 20 fe ff ff       	call   c000aa60 <KiUbsanPrintDetails(char const*, void*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	83 ec 0c             	sub    esp,0xc
c000ac46:	68 94 17 02 c0       	push   0xc0021794
c000ac4b:	e8 8f 69 00 00       	call   c00115df <KePanic(char const*)>
c000ac50:	83 c4 10             	add    esp,0x10
c000ac53:	90                   	nop
c000ac54:	83 c4 0c             	add    esp,0xc
c000ac57:	c3                   	ret    

c000ac58 <__ubsan_handle_divrem_overflow>:
c000ac58:	83 ec 0c             	sub    esp,0xc
c000ac5b:	83 ec 08             	sub    esp,0x8
c000ac5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac62:	68 b8 17 02 c0       	push   0xc00217b8
c000ac67:	e8 f4 fd ff ff       	call   c000aa60 <KiUbsanPrintDetails(char const*, void*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	83 ec 0c             	sub    esp,0xc
c000ac72:	68 b8 17 02 c0       	push   0xc00217b8
c000ac77:	e8 63 69 00 00       	call   c00115df <KePanic(char const*)>
c000ac7c:	83 c4 10             	add    esp,0x10
c000ac7f:	90                   	nop
c000ac80:	83 c4 0c             	add    esp,0xc
c000ac83:	c3                   	ret    

c000ac84 <__ubsan_handle_mul_overflow>:
c000ac84:	83 ec 0c             	sub    esp,0xc
c000ac87:	83 ec 08             	sub    esp,0x8
c000ac8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac8e:	68 1d 16 02 c0       	push   0xc002161d
c000ac93:	e8 c8 fd ff ff       	call   c000aa60 <KiUbsanPrintDetails(char const*, void*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	83 ec 0c             	sub    esp,0xc
c000ac9e:	68 1d 16 02 c0       	push   0xc002161d
c000aca3:	e8 37 69 00 00       	call   c00115df <KePanic(char const*)>
c000aca8:	83 c4 10             	add    esp,0x10
c000acab:	90                   	nop
c000acac:	83 c4 0c             	add    esp,0xc
c000acaf:	c3                   	ret    

c000acb0 <__ubsan_handle_sub_overflow>:
c000acb0:	83 ec 0c             	sub    esp,0xc
c000acb3:	83 ec 08             	sub    esp,0x8
c000acb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acba:	68 39 16 02 c0       	push   0xc0021639
c000acbf:	e8 9c fd ff ff       	call   c000aa60 <KiUbsanPrintDetails(char const*, void*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	83 ec 0c             	sub    esp,0xc
c000acca:	68 39 16 02 c0       	push   0xc0021639
c000accf:	e8 0b 69 00 00       	call   c00115df <KePanic(char const*)>
c000acd4:	83 c4 10             	add    esp,0x10
c000acd7:	90                   	nop
c000acd8:	83 c4 0c             	add    esp,0xc
c000acdb:	c3                   	ret    

c000acdc <__ubsan_handle_shift_out_of_bounds>:
c000acdc:	83 ec 0c             	sub    esp,0xc
c000acdf:	83 ec 08             	sub    esp,0x8
c000ace2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ace6:	68 d8 17 02 c0       	push   0xc00217d8
c000aceb:	e8 70 fd ff ff       	call   c000aa60 <KiUbsanPrintDetails(char const*, void*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	83 ec 0c             	sub    esp,0xc
c000acf6:	68 d8 17 02 c0       	push   0xc00217d8
c000acfb:	e8 df 68 00 00       	call   c00115df <KePanic(char const*)>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	90                   	nop
c000ad04:	83 c4 0c             	add    esp,0xc
c000ad07:	c3                   	ret    

c000ad08 <__ubsan_handle_negate_overflow>:
c000ad08:	83 ec 0c             	sub    esp,0xc
c000ad0b:	83 ec 08             	sub    esp,0x8
c000ad0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad12:	68 fc 17 02 c0       	push   0xc00217fc
c000ad17:	e8 44 fd ff ff       	call   c000aa60 <KiUbsanPrintDetails(char const*, void*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	83 ec 0c             	sub    esp,0xc
c000ad22:	68 fc 17 02 c0       	push   0xc00217fc
c000ad27:	e8 b3 68 00 00       	call   c00115df <KePanic(char const*)>
c000ad2c:	83 c4 10             	add    esp,0x10
c000ad2f:	90                   	nop
c000ad30:	83 c4 0c             	add    esp,0xc
c000ad33:	c3                   	ret    

c000ad34 <KiIsHashInTable(unsigned short)>:
c000ad34:	0f b7 d0             	movzx  edx,ax
c000ad37:	83 e0 07             	and    eax,0x7
c000ad3a:	c1 fa 03             	sar    edx,0x3
c000ad3d:	88 c1                	mov    cl,al
c000ad3f:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad46:	d3 fa                	sar    edx,cl
c000ad48:	89 d0                	mov    eax,edx
c000ad4a:	83 e0 01             	and    eax,0x1
c000ad4d:	c3                   	ret    

c000ad4e <KiSetHashInTable(unsigned short, bool)>:
c000ad4e:	56                   	push   esi
c000ad4f:	53                   	push   ebx
c000ad50:	0f b7 d8             	movzx  ebx,ax
c000ad53:	c1 fb 03             	sar    ebx,0x3
c000ad56:	83 e0 07             	and    eax,0x7
c000ad59:	89 c1                	mov    ecx,eax
c000ad5b:	b8 01 00 00 00       	mov    eax,0x1
c000ad60:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad67:	d3 e0                	shl    eax,cl
c000ad69:	84 d2                	test   dl,dl
c000ad6b:	74 04                	je     c000ad71 <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad6d:	09 f0                	or     eax,esi
c000ad6f:	eb 04                	jmp    c000ad75 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad71:	f7 d0                	not    eax
c000ad73:	21 f0                	and    eax,esi
c000ad75:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad7b:	5b                   	pop    ebx
c000ad7c:	5e                   	pop    esi
c000ad7d:	c3                   	ret    

c000ad7e <KiFlushSymlinkChanges()>:
c000ad7e:	57                   	push   edi
c000ad7f:	56                   	push   esi
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 1c             	sub    esp,0x1c
c000ad84:	68 14 01 00 00       	push   0x114
c000ad89:	e8 65 cd ff ff       	call   c0007af3 <malloc>
c000ad8e:	83 c4 0c             	add    esp,0xc
c000ad91:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ad97:	68 1b 18 02 c0       	push   0xc002181b
c000ad9c:	50                   	push   eax
c000ad9d:	89 c3                	mov    ebx,eax
c000ad9f:	e8 9e 0d 00 00       	call   c000bb42 <File::File(char const*, Process*)>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	85 db                	test   ebx,ebx
c000ada9:	75 10                	jne    c000adbb <KiFlushSymlinkChanges()+0x3d>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	68 39 18 02 c0       	push   0xc0021839
c000adb3:	e8 27 68 00 00       	call   c00115df <KePanic(char const*)>
c000adb8:	83 c4 10             	add    esp,0x10
c000adbb:	50                   	push   eax
c000adbc:	50                   	push   eax
c000adbd:	6a 06                	push   0x6
c000adbf:	53                   	push   ebx
c000adc0:	e8 9b 0d 00 00       	call   c000bb60 <File::open(FileOpenMode)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	85 c0                	test   eax,eax
c000adca:	74 10                	je     c000addc <KiFlushSymlinkChanges()+0x5e>
c000adcc:	83 ec 0c             	sub    esp,0xc
c000adcf:	68 53 18 02 c0       	push   0xc0021853
c000add4:	e8 06 68 00 00       	call   c00115df <KePanic(char const*)>
c000add9:	83 c4 10             	add    esp,0x10
c000addc:	31 f6                	xor    esi,esi
c000adde:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ade4:	7e 70                	jle    c000ae56 <KiFlushSymlinkChanges()+0xd8>
c000ade6:	83 ec 0c             	sub    esp,0xc
c000ade9:	89 f0                	mov    eax,esi
c000adeb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000aded:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000adf1:	c1 e0 08             	shl    eax,0x8
c000adf4:	57                   	push   edi
c000adf5:	05 00 70 02 c0       	add    eax,0xc0027000
c000adfa:	50                   	push   eax
c000adfb:	6a 00                	push   0x0
c000adfd:	68 00 01 00 00       	push   0x100
c000ae02:	53                   	push   ebx
c000ae03:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae06:	83 c4 20             	add    esp,0x20
c000ae09:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae11:	74 10                	je     c000ae23 <KiFlushSymlinkChanges()+0xa5>
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	68 6d 18 02 c0       	push   0xc002186d
c000ae1b:	e8 bf 67 00 00       	call   c00115df <KePanic(char const*)>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae25:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae2c:	83 ec 0c             	sub    esp,0xc
c000ae2f:	57                   	push   edi
c000ae30:	52                   	push   edx
c000ae31:	6a 00                	push   0x0
c000ae33:	6a 08                	push   0x8
c000ae35:	53                   	push   ebx
c000ae36:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae39:	83 c4 20             	add    esp,0x20
c000ae3c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae41:	74 10                	je     c000ae53 <KiFlushSymlinkChanges()+0xd5>
c000ae43:	83 ec 0c             	sub    esp,0xc
c000ae46:	68 87 18 02 c0       	push   0xc0021887
c000ae4b:	e8 8f 67 00 00       	call   c00115df <KePanic(char const*)>
c000ae50:	83 c4 10             	add    esp,0x10
c000ae53:	46                   	inc    esi
c000ae54:	eb 88                	jmp    c000adde <KiFlushSymlinkChanges()+0x60>
c000ae56:	83 ec 0c             	sub    esp,0xc
c000ae59:	53                   	push   ebx
c000ae5a:	e8 5f 0d 00 00       	call   c000bbbe <File::close()>
c000ae5f:	83 c4 10             	add    esp,0x10
c000ae62:	85 db                	test   ebx,ebx
c000ae64:	74 0c                	je     c000ae72 <KiFlushSymlinkChanges()+0xf4>
c000ae66:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae68:	83 ec 0c             	sub    esp,0xc
c000ae6b:	53                   	push   ebx
c000ae6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae6f:	83 c4 10             	add    esp,0x10
c000ae72:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	5b                   	pop    ebx
c000ae80:	5e                   	pop    esi
c000ae81:	5f                   	pop    edi
c000ae82:	c3                   	ret    

c000ae83 <KiDeinitialiseSymlinks(void*)>:
c000ae83:	e9 f6 fe ff ff       	jmp    c000ad7e <KiFlushSymlinkChanges()>

c000ae88 <KiGetSymlinkHash(char const*)>:
c000ae88:	53                   	push   ebx
c000ae89:	89 c3                	mov    ebx,eax
c000ae8b:	83 ec 14             	sub    esp,0x14
c000ae8e:	50                   	push   eax
c000ae8f:	e8 ec 56 ff ff       	call   c0000580 <strlen>
c000ae94:	5a                   	pop    edx
c000ae95:	59                   	pop    ecx
c000ae96:	50                   	push   eax
c000ae97:	53                   	push   ebx
c000ae98:	e8 c4 60 00 00       	call   c0010f61 <KeCalculateCRC32(unsigned char*, int)>
c000ae9d:	83 c4 18             	add    esp,0x18
c000aea0:	5b                   	pop    ebx
c000aea1:	89 c2                	mov    edx,eax
c000aea3:	c1 ea 10             	shr    edx,0x10
c000aea6:	31 d0                	xor    eax,edx
c000aea8:	c3                   	ret    

c000aea9 <KiCreateSymlinkID()>:
c000aea9:	55                   	push   ebp
c000aeaa:	57                   	push   edi
c000aeab:	56                   	push   esi
c000aeac:	53                   	push   ebx
c000aead:	31 db                	xor    ebx,ebx
c000aeaf:	83 ec 1c             	sub    esp,0x1c
c000aeb2:	e8 76 68 00 00       	call   c001172d <KeRand()>
c000aeb7:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aebd:	31 d2                	xor    edx,edx
c000aebf:	43                   	inc    ebx
c000aec0:	31 ff                	xor    edi,edi
c000aec2:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aec5:	89 ee                	mov    esi,ebp
c000aec7:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aecd:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000aed1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aed5:	c1 e0 1f             	shl    eax,0x1f
c000aed8:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000aede:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aee2:	75 10                	jne    c000aef4 <KiCreateSymlinkID()+0x4b>
c000aee4:	83 ec 0c             	sub    esp,0xc
c000aee7:	68 a1 18 02 c0       	push   0xc00218a1
c000aeec:	e8 ee 66 00 00       	call   c00115df <KePanic(char const*)>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000aef8:	75 06                	jne    c000af00 <KiCreateSymlinkID()+0x57>
c000aefa:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000aefe:	74 b2                	je     c000aeb2 <KiCreateSymlinkID()+0x9>
c000af00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af08:	83 c4 1c             	add    esp,0x1c
c000af0b:	5b                   	pop    ebx
c000af0c:	31 f0                	xor    eax,esi
c000af0e:	5e                   	pop    esi
c000af0f:	31 fa                	xor    edx,edi
c000af11:	5f                   	pop    edi
c000af12:	5d                   	pop    ebp
c000af13:	c3                   	ret    

c000af14 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af14:	53                   	push   ebx
c000af15:	83 ec 0c             	sub    esp,0xc
c000af18:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af20:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af25:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af29:	68 00 01 00 00       	push   0x100
c000af2e:	6a 00                	push   0x0
c000af30:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af37:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af3e:	c1 e0 08             	shl    eax,0x8
c000af41:	05 00 70 02 c0       	add    eax,0xc0027000
c000af46:	50                   	push   eax
c000af47:	e8 a4 55 ff ff       	call   c00004f0 <memset>
c000af4c:	58                   	pop    eax
c000af4d:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af52:	5a                   	pop    edx
c000af53:	c1 e0 08             	shl    eax,0x8
c000af56:	53                   	push   ebx
c000af57:	05 00 70 02 c0       	add    eax,0xc0027000
c000af5c:	50                   	push   eax
c000af5d:	e8 ee 56 ff ff       	call   c0000650 <strcpy>
c000af62:	89 d8                	mov    eax,ebx
c000af64:	e8 1f ff ff ff       	call   c000ae88 <KiGetSymlinkHash(char const*)>
c000af69:	59                   	pop    ecx
c000af6a:	0f b7 d8             	movzx  ebx,ax
c000af6d:	58                   	pop    eax
c000af6e:	53                   	push   ebx
c000af6f:	68 aa 18 02 c0       	push   0xc00218aa
c000af74:	e8 b1 f9 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000af79:	89 d8                	mov    eax,ebx
c000af7b:	ba 01 00 00 00       	mov    edx,0x1
c000af80:	e8 c9 fd ff ff       	call   c000ad4e <KiSetHashInTable(unsigned short, bool)>
c000af85:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af8a:	83 c4 10             	add    esp,0x10
c000af8d:	40                   	inc    eax
c000af8e:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000af93:	83 f8 03             	cmp    eax,0x3
c000af96:	7e 09                	jle    c000afa1 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c000af98:	83 c4 08             	add    esp,0x8
c000af9b:	5b                   	pop    ebx
c000af9c:	e9 dd fd ff ff       	jmp    c000ad7e <KiFlushSymlinkChanges()>
c000afa1:	83 c4 08             	add    esp,0x8
c000afa4:	5b                   	pop    ebx
c000afa5:	c3                   	ret    

c000afa6 <KeInitialiseSymlinks()>:
c000afa6:	57                   	push   edi
c000afa7:	56                   	push   esi
c000afa8:	53                   	push   ebx
c000afa9:	81 ec 14 01 00 00    	sub    esp,0x114
c000afaf:	68 00 20 00 00       	push   0x2000
c000afb4:	6a 00                	push   0x0
c000afb6:	68 00 74 02 c0       	push   0xc0027400
c000afbb:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000afc5:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000afcf:	e8 1c 55 ff ff       	call   c00004f0 <memset>
c000afd4:	59                   	pop    ecx
c000afd5:	5b                   	pop    ebx
c000afd6:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000afdc:	68 be 18 02 c0       	push   0xc00218be
c000afe1:	e8 44 f9 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000afe6:	5e                   	pop    esi
c000afe7:	5f                   	pop    edi
c000afe8:	6a 00                	push   0x0
c000afea:	68 83 ae 00 c0       	push   0xc000ae83
c000afef:	e8 da 5d 00 00       	call   c0010dce <KeRegisterAtexit(void (*)(void*), void*)>
c000aff4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000affb:	e8 f3 ca ff ff       	call   c0007af3 <malloc>
c000b000:	83 c4 0c             	add    esp,0xc
c000b003:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b009:	68 1b 18 02 c0       	push   0xc002181b
c000b00e:	50                   	push   eax
c000b00f:	89 c3                	mov    ebx,eax
c000b011:	e8 2c 0b 00 00       	call   c000bb42 <File::File(char const*, Process*)>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	85 db                	test   ebx,ebx
c000b01b:	75 10                	jne    c000b02d <KeInitialiseSymlinks()+0x87>
c000b01d:	83 ec 0c             	sub    esp,0xc
c000b020:	68 db 18 02 c0       	push   0xc00218db
c000b025:	e8 b5 65 00 00       	call   c00115df <KePanic(char const*)>
c000b02a:	83 c4 10             	add    esp,0x10
c000b02d:	83 ec 0c             	sub    esp,0xc
c000b030:	53                   	push   ebx
c000b031:	e8 ee 0d 00 00       	call   c000be24 <File::exists()>
c000b036:	83 c4 10             	add    esp,0x10
c000b039:	84 c0                	test   al,al
c000b03b:	75 3a                	jne    c000b077 <KeInitialiseSymlinks()+0xd1>
c000b03d:	52                   	push   edx
c000b03e:	52                   	push   edx
c000b03f:	6a 12                	push   0x12
c000b041:	53                   	push   ebx
c000b042:	e8 19 0b 00 00       	call   c000bb60 <File::open(FileOpenMode)>
c000b047:	83 c4 10             	add    esp,0x10
c000b04a:	85 c0                	test   eax,eax
c000b04c:	74 10                	je     c000b05e <KeInitialiseSymlinks()+0xb8>
c000b04e:	83 ec 0c             	sub    esp,0xc
c000b051:	68 f8 18 02 c0       	push   0xc00218f8
c000b056:	e8 84 65 00 00       	call   c00115df <KePanic(char const*)>
c000b05b:	83 c4 10             	add    esp,0x10
c000b05e:	83 ec 0c             	sub    esp,0xc
c000b061:	53                   	push   ebx
c000b062:	e8 57 0b 00 00       	call   c000bbbe <File::close()>
c000b067:	83 c4 10             	add    esp,0x10
c000b06a:	85 db                	test   ebx,ebx
c000b06c:	0f 84 9e 00 00 00    	je     c000b110 <KeInitialiseSymlinks()+0x16a>
c000b072:	e9 8d 00 00 00       	jmp    c000b104 <KeInitialiseSymlinks()+0x15e>
c000b077:	50                   	push   eax
c000b078:	50                   	push   eax
c000b079:	6a 01                	push   0x1
c000b07b:	53                   	push   ebx
c000b07c:	e8 df 0a 00 00       	call   c000bb60 <File::open(FileOpenMode)>
c000b081:	83 c4 10             	add    esp,0x10
c000b084:	85 c0                	test   eax,eax
c000b086:	74 10                	je     c000b098 <KeInitialiseSymlinks()+0xf2>
c000b088:	83 ec 0c             	sub    esp,0xc
c000b08b:	68 15 19 02 c0       	push   0xc0021915
c000b090:	e8 4a 65 00 00       	call   c00115df <KePanic(char const*)>
c000b095:	83 c4 10             	add    esp,0x10
c000b098:	ff 05 00 94 02 c0    	inc    DWORD PTR ds:0xc0029400
c000b09e:	83 ec 0c             	sub    esp,0xc
c000b0a1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b0a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0a7:	57                   	push   edi
c000b0a8:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b0ac:	56                   	push   esi
c000b0ad:	6a 00                	push   0x0
c000b0af:	68 00 01 00 00       	push   0x100
c000b0b4:	53                   	push   ebx
c000b0b5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0b8:	83 c4 20             	add    esp,0x20
c000b0bb:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0c3:	75 33                	jne    c000b0f8 <KeInitialiseSymlinks()+0x152>
c000b0c5:	83 ec 0c             	sub    esp,0xc
c000b0c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0ca:	57                   	push   edi
c000b0cb:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b0cf:	52                   	push   edx
c000b0d0:	6a 00                	push   0x0
c000b0d2:	6a 08                	push   0x8
c000b0d4:	53                   	push   ebx
c000b0d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0d8:	83 c4 20             	add    esp,0x20
c000b0db:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b0e0:	75 16                	jne    c000b0f8 <KeInitialiseSymlinks()+0x152>
c000b0e2:	89 f0                	mov    eax,esi
c000b0e4:	e8 9f fd ff ff       	call   c000ae88 <KiGetSymlinkHash(char const*)>
c000b0e9:	ba 01 00 00 00       	mov    edx,0x1
c000b0ee:	0f b7 c0             	movzx  eax,ax
c000b0f1:	e8 58 fc ff ff       	call   c000ad4e <KiSetHashInTable(unsigned short, bool)>
c000b0f6:	eb a0                	jmp    c000b098 <KeInitialiseSymlinks()+0xf2>
c000b0f8:	83 ec 0c             	sub    esp,0xc
c000b0fb:	53                   	push   ebx
c000b0fc:	e8 bd 0a 00 00       	call   c000bbbe <File::close()>
c000b101:	83 c4 10             	add    esp,0x10
c000b104:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b106:	83 ec 0c             	sub    esp,0xc
c000b109:	53                   	push   ebx
c000b10a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b10d:	83 c4 10             	add    esp,0x10
c000b110:	81 c4 10 01 00 00    	add    esp,0x110
c000b116:	5b                   	pop    ebx
c000b117:	5e                   	pop    esi
c000b118:	5f                   	pop    edi
c000b119:	c3                   	ret    

c000b11a <KiIsSymlinkRegistered(char const*)>:
c000b11a:	55                   	push   ebp
c000b11b:	57                   	push   edi
c000b11c:	56                   	push   esi
c000b11d:	53                   	push   ebx
c000b11e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b124:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b12b:	89 f0                	mov    eax,esi
c000b12d:	e8 56 fd ff ff       	call   c000ae88 <KiGetSymlinkHash(char const*)>
c000b132:	53                   	push   ebx
c000b133:	56                   	push   esi
c000b134:	0f b7 c0             	movzx  eax,ax
c000b137:	50                   	push   eax
c000b138:	68 30 19 02 c0       	push   0xc0021930
c000b13d:	e8 e8 f7 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000b142:	89 f0                	mov    eax,esi
c000b144:	e8 3f fd ff ff       	call   c000ae88 <KiGetSymlinkHash(char const*)>
c000b149:	0f b7 c0             	movzx  eax,ax
c000b14c:	e8 e3 fb ff ff       	call   c000ad34 <KiIsHashInTable(unsigned short)>
c000b151:	83 c4 10             	add    esp,0x10
c000b154:	31 d2                	xor    edx,edx
c000b156:	88 c1                	mov    cl,al
c000b158:	31 c0                	xor    eax,eax
c000b15a:	84 c9                	test   cl,cl
c000b15c:	0f 84 31 01 00 00    	je     c000b293 <KiIsSymlinkRegistered(char const*)+0x179>
c000b162:	31 db                	xor    ebx,ebx
c000b164:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b16a:	7e 30                	jle    c000b19c <KiIsSymlinkRegistered(char const*)+0x82>
c000b16c:	89 d8                	mov    eax,ebx
c000b16e:	c1 e0 08             	shl    eax,0x8
c000b171:	51                   	push   ecx
c000b172:	05 00 70 02 c0       	add    eax,0xc0027000
c000b177:	51                   	push   ecx
c000b178:	50                   	push   eax
c000b179:	56                   	push   esi
c000b17a:	e8 01 56 ff ff       	call   c0000780 <strcmp>
c000b17f:	83 c4 10             	add    esp,0x10
c000b182:	85 c0                	test   eax,eax
c000b184:	75 13                	jne    c000b199 <KiIsSymlinkRegistered(char const*)+0x7f>
c000b186:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b18d:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b194:	e9 fa 00 00 00       	jmp    c000b293 <KiIsSymlinkRegistered(char const*)+0x179>
c000b199:	43                   	inc    ebx
c000b19a:	eb c8                	jmp    c000b164 <KiIsSymlinkRegistered(char const*)+0x4a>
c000b19c:	83 ec 0c             	sub    esp,0xc
c000b19f:	68 14 01 00 00       	push   0x114
c000b1a4:	e8 4a c9 ff ff       	call   c0007af3 <malloc>
c000b1a9:	83 c4 0c             	add    esp,0xc
c000b1ac:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b1b2:	68 1b 18 02 c0       	push   0xc002181b
c000b1b7:	50                   	push   eax
c000b1b8:	89 c3                	mov    ebx,eax
c000b1ba:	e8 83 09 00 00       	call   c000bb42 <File::File(char const*, Process*)>
c000b1bf:	83 c4 10             	add    esp,0x10
c000b1c2:	85 db                	test   ebx,ebx
c000b1c4:	75 12                	jne    c000b1d8 <KiIsSymlinkRegistered(char const*)+0xbe>
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	68 45 19 02 c0       	push   0xc0021945
c000b1ce:	e8 0c 64 00 00       	call   c00115df <KePanic(char const*)>
c000b1d3:	83 c4 10             	add    esp,0x10
c000b1d6:	eb 10                	jmp    c000b1e8 <KiIsSymlinkRegistered(char const*)+0xce>
c000b1d8:	83 ec 0c             	sub    esp,0xc
c000b1db:	53                   	push   ebx
c000b1dc:	e8 43 0c 00 00       	call   c000be24 <File::exists()>
c000b1e1:	83 c4 10             	add    esp,0x10
c000b1e4:	84 c0                	test   al,al
c000b1e6:	74 de                	je     c000b1c6 <KiIsSymlinkRegistered(char const*)+0xac>
c000b1e8:	52                   	push   edx
c000b1e9:	52                   	push   edx
c000b1ea:	6a 01                	push   0x1
c000b1ec:	53                   	push   ebx
c000b1ed:	e8 6e 09 00 00       	call   c000bb60 <File::open(FileOpenMode)>
c000b1f2:	83 c4 10             	add    esp,0x10
c000b1f5:	85 c0                	test   eax,eax
c000b1f7:	74 10                	je     c000b209 <KiIsSymlinkRegistered(char const*)+0xef>
c000b1f9:	83 ec 0c             	sub    esp,0xc
c000b1fc:	68 60 19 02 c0       	push   0xc0021960
c000b201:	e8 d9 63 00 00       	call   c00115df <KePanic(char const*)>
c000b206:	83 c4 10             	add    esp,0x10
c000b209:	83 ec 0c             	sub    esp,0xc
c000b20c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b20e:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b212:	55                   	push   ebp
c000b213:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b217:	57                   	push   edi
c000b218:	6a 00                	push   0x0
c000b21a:	68 00 01 00 00       	push   0x100
c000b21f:	53                   	push   ebx
c000b220:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b223:	83 c4 20             	add    esp,0x20
c000b226:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b22e:	75 4b                	jne    c000b27b <KiIsSymlinkRegistered(char const*)+0x161>
c000b230:	83 ec 0c             	sub    esp,0xc
c000b233:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b235:	55                   	push   ebp
c000b236:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b23a:	52                   	push   edx
c000b23b:	6a 00                	push   0x0
c000b23d:	6a 08                	push   0x8
c000b23f:	53                   	push   ebx
c000b240:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b243:	83 c4 20             	add    esp,0x20
c000b246:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b24b:	75 2e                	jne    c000b27b <KiIsSymlinkRegistered(char const*)+0x161>
c000b24d:	50                   	push   eax
c000b24e:	50                   	push   eax
c000b24f:	57                   	push   edi
c000b250:	56                   	push   esi
c000b251:	e8 2a 55 ff ff       	call   c0000780 <strcmp>
c000b256:	83 c4 10             	add    esp,0x10
c000b259:	85 c0                	test   eax,eax
c000b25b:	75 ac                	jne    c000b209 <KiIsSymlinkRegistered(char const*)+0xef>
c000b25d:	83 ec 0c             	sub    esp,0xc
c000b260:	53                   	push   ebx
c000b261:	e8 58 09 00 00       	call   c000bbbe <File::close()>
c000b266:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b268:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b26b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b26e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b272:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b276:	83 c4 10             	add    esp,0x10
c000b279:	eb 18                	jmp    c000b293 <KiIsSymlinkRegistered(char const*)+0x179>
c000b27b:	83 ec 0c             	sub    esp,0xc
c000b27e:	53                   	push   ebx
c000b27f:	e8 3a 09 00 00       	call   c000bbbe <File::close()>
c000b284:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b289:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b28c:	83 c4 10             	add    esp,0x10
c000b28f:	31 c0                	xor    eax,eax
c000b291:	31 d2                	xor    edx,edx
c000b293:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b299:	5b                   	pop    ebx
c000b29a:	5e                   	pop    esi
c000b29b:	5f                   	pop    edi
c000b29c:	5d                   	pop    ebp
c000b29d:	c3                   	ret    

c000b29e <KeDereferenceSymlink(char const*, char*)>:
c000b29e:	55                   	push   ebp
c000b29f:	57                   	push   edi
c000b2a0:	56                   	push   esi
c000b2a1:	53                   	push   ebx
c000b2a2:	83 ec 48             	sub    esp,0x48
c000b2a5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b2a9:	56                   	push   esi
c000b2aa:	e8 6b fe ff ff       	call   c000b11a <KiIsSymlinkRegistered(char const*)>
c000b2af:	83 c4 10             	add    esp,0x10
c000b2b2:	89 c7                	mov    edi,eax
c000b2b4:	89 d0                	mov    eax,edx
c000b2b6:	09 f8                	or     eax,edi
c000b2b8:	75 07                	jne    c000b2c1 <KeDereferenceSymlink(char const*, char*)+0x23>
c000b2ba:	31 c0                	xor    eax,eax
c000b2bc:	e9 7c 01 00 00       	jmp    c000b43d <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b2c1:	83 ec 0c             	sub    esp,0xc
c000b2c4:	89 d5                	mov    ebp,edx
c000b2c6:	68 14 01 00 00       	push   0x114
c000b2cb:	e8 23 c8 ff ff       	call   c0007af3 <malloc>
c000b2d0:	83 c4 0c             	add    esp,0xc
c000b2d3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b2d9:	56                   	push   esi
c000b2da:	50                   	push   eax
c000b2db:	89 c3                	mov    ebx,eax
c000b2dd:	e8 60 08 00 00       	call   c000bb42 <File::File(char const*, Process*)>
c000b2e2:	83 c4 10             	add    esp,0x10
c000b2e5:	85 db                	test   ebx,ebx
c000b2e7:	0f 84 32 01 00 00    	je     c000b41f <KeDereferenceSymlink(char const*, char*)+0x181>
c000b2ed:	56                   	push   esi
c000b2ee:	56                   	push   esi
c000b2ef:	6a 01                	push   0x1
c000b2f1:	53                   	push   ebx
c000b2f2:	e8 69 08 00 00       	call   c000bb60 <File::open(FileOpenMode)>
c000b2f7:	83 c4 10             	add    esp,0x10
c000b2fa:	85 c0                	test   eax,eax
c000b2fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2fe:	74 09                	je     c000b309 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b300:	83 ec 0c             	sub    esp,0xc
c000b303:	53                   	push   ebx
c000b304:	e9 10 01 00 00       	jmp    c000b419 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b309:	83 ec 0c             	sub    esp,0xc
c000b30c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b310:	56                   	push   esi
c000b311:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b315:	52                   	push   edx
c000b316:	6a 00                	push   0x0
c000b318:	6a 08                	push   0x8
c000b31a:	53                   	push   ebx
c000b31b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b31e:	83 c4 20             	add    esp,0x20
c000b321:	85 c0                	test   eax,eax
c000b323:	0f 85 e2 00 00 00    	jne    c000b40b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b329:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b32e:	0f 85 d7 00 00 00    	jne    c000b40b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b334:	83 ec 0c             	sub    esp,0xc
c000b337:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b339:	56                   	push   esi
c000b33a:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b33e:	52                   	push   edx
c000b33f:	6a 00                	push   0x0
c000b341:	6a 08                	push   0x8
c000b343:	53                   	push   ebx
c000b344:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b347:	83 c4 20             	add    esp,0x20
c000b34a:	85 c0                	test   eax,eax
c000b34c:	0f 85 b9 00 00 00    	jne    c000b40b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b352:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b357:	0f 85 ae 00 00 00    	jne    c000b40b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b35d:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b361:	0f 85 53 ff ff ff    	jne    c000b2ba <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b367:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b36b:	0f 85 49 ff ff ff    	jne    c000b2ba <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b371:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b379:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b381:	51                   	push   ecx
c000b382:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b386:	50                   	push   eax
c000b387:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b38b:	50                   	push   eax
c000b38c:	53                   	push   ebx
c000b38d:	e8 d0 0a 00 00       	call   c000be62 <File::stat(unsigned long long*, bool*)>
c000b392:	83 c4 10             	add    esp,0x10
c000b395:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b39a:	75 6f                	jne    c000b40b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b39c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b3a0:	31 c9                	xor    ecx,ecx
c000b3a2:	bf 0f 00 00 00       	mov    edi,0xf
c000b3a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b3ab:	39 c7                	cmp    edi,eax
c000b3ad:	89 cf                	mov    edi,ecx
c000b3af:	19 d7                	sbb    edi,edx
c000b3b1:	73 58                	jae    c000b40b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3b3:	83 c0 f0             	add    eax,0xfffffff0
c000b3b6:	bf ff 00 00 00       	mov    edi,0xff
c000b3bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b3bf:	83 d2 ff             	adc    edx,0xffffffff
c000b3c2:	39 c7                	cmp    edi,eax
c000b3c4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b3c8:	19 d1                	sbb    ecx,edx
c000b3ca:	72 53                	jb     c000b41f <KeDereferenceSymlink(char const*, char*)+0x181>
c000b3cc:	40                   	inc    eax
c000b3cd:	52                   	push   edx
c000b3ce:	50                   	push   eax
c000b3cf:	6a 00                	push   0x0
c000b3d1:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b3d5:	e8 16 51 ff ff       	call   c00004f0 <memset>
c000b3da:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3dc:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3df:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b3e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b3e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b3eb:	53                   	push   ebx
c000b3ec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b3ef:	83 c4 20             	add    esp,0x20
c000b3f2:	85 c0                	test   eax,eax
c000b3f4:	75 15                	jne    c000b40b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3fa:	89 c7                	mov    edi,eax
c000b3fc:	c1 ff 1f             	sar    edi,0x1f
c000b3ff:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b403:	75 06                	jne    c000b40b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b405:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b409:	74 19                	je     c000b424 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b40b:	83 ec 0c             	sub    esp,0xc
c000b40e:	53                   	push   ebx
c000b40f:	e8 aa 07 00 00       	call   c000bbbe <File::close()>
c000b414:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b416:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b419:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b41c:	83 c4 10             	add    esp,0x10
c000b41f:	83 c8 ff             	or     eax,0xffffffff
c000b422:	eb 19                	jmp    c000b43d <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b424:	83 ec 0c             	sub    esp,0xc
c000b427:	53                   	push   ebx
c000b428:	e8 91 07 00 00       	call   c000bbbe <File::close()>
c000b42d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b42f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b432:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b435:	83 c4 10             	add    esp,0x10
c000b438:	b8 01 00 00 00       	mov    eax,0x1
c000b43d:	83 c4 3c             	add    esp,0x3c
c000b440:	5b                   	pop    ebx
c000b441:	5e                   	pop    esi
c000b442:	5f                   	pop    edi
c000b443:	5d                   	pop    ebp
c000b444:	c3                   	ret    

c000b445 <KeCreateSymlink(char const*, char const*)>:
c000b445:	55                   	push   ebp
c000b446:	57                   	push   edi
c000b447:	56                   	push   esi
c000b448:	53                   	push   ebx
c000b449:	83 ec 38             	sub    esp,0x38
c000b44c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b450:	68 14 01 00 00       	push   0x114
c000b455:	e8 99 c6 ff ff       	call   c0007af3 <malloc>
c000b45a:	6a 00                	push   0x0
c000b45c:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b462:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b466:	89 c3                	mov    ebx,eax
c000b468:	50                   	push   eax
c000b469:	e8 f6 05 00 00       	call   c000ba64 <File::File(char const*, Process*, bool)>
c000b46e:	83 c4 20             	add    esp,0x20
c000b471:	85 db                	test   ebx,ebx
c000b473:	b8 01 00 00 00       	mov    eax,0x1
c000b478:	0f 84 19 01 00 00    	je     c000b597 <KeCreateSymlink(char const*, char const*)+0x152>
c000b47e:	52                   	push   edx
c000b47f:	52                   	push   edx
c000b480:	6a 12                	push   0x12
c000b482:	53                   	push   ebx
c000b483:	e8 d8 06 00 00       	call   c000bb60 <File::open(FileOpenMode)>
c000b488:	83 c4 10             	add    esp,0x10
c000b48b:	85 c0                	test   eax,eax
c000b48d:	74 0b                	je     c000b49a <KeCreateSymlink(char const*, char const*)+0x55>
c000b48f:	83 ec 0c             	sub    esp,0xc
c000b492:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b494:	53                   	push   ebx
c000b495:	e9 f2 00 00 00       	jmp    c000b58c <KeCreateSymlink(char const*, char const*)+0x147>
c000b49a:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b49e:	be ad 19 02 c0       	mov    esi,0xc00219ad
c000b4a3:	b9 09 00 00 00       	mov    ecx,0x9
c000b4a8:	fc                   	cld    
c000b4a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b4ab:	83 ec 0c             	sub    esp,0xc
c000b4ae:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b4b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4b4:	56                   	push   esi
c000b4b5:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b4b9:	52                   	push   edx
c000b4ba:	6a 00                	push   0x0
c000b4bc:	6a 08                	push   0x8
c000b4be:	53                   	push   ebx
c000b4bf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b4c2:	83 c4 20             	add    esp,0x20
c000b4c5:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b4ca:	0f 85 ae 00 00 00    	jne    c000b57e <KeCreateSymlink(char const*, char const*)+0x139>
c000b4d0:	85 c0                	test   eax,eax
c000b4d2:	0f 85 a6 00 00 00    	jne    c000b57e <KeCreateSymlink(char const*, char const*)+0x139>
c000b4d8:	e8 cc f9 ff ff       	call   c000aea9 <KiCreateSymlinkID()>
c000b4dd:	83 ec 0c             	sub    esp,0xc
c000b4e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4e4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b4e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4ea:	56                   	push   esi
c000b4eb:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b4ef:	52                   	push   edx
c000b4f0:	6a 00                	push   0x0
c000b4f2:	6a 08                	push   0x8
c000b4f4:	53                   	push   ebx
c000b4f5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b4f8:	83 c4 20             	add    esp,0x20
c000b4fb:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b500:	75 7c                	jne    c000b57e <KeCreateSymlink(char const*, char const*)+0x139>
c000b502:	85 c0                	test   eax,eax
c000b504:	75 78                	jne    c000b57e <KeCreateSymlink(char const*, char const*)+0x139>
c000b506:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b508:	83 ec 0c             	sub    esp,0xc
c000b50b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b50e:	55                   	push   ebp
c000b50f:	e8 6c 50 ff ff       	call   c0000580 <strlen>
c000b514:	31 d2                	xor    edx,edx
c000b516:	89 34 24             	mov    DWORD PTR [esp],esi
c000b519:	55                   	push   ebp
c000b51a:	52                   	push   edx
c000b51b:	50                   	push   eax
c000b51c:	53                   	push   ebx
c000b51d:	ff d7                	call   edi
c000b51f:	83 c4 14             	add    esp,0x14
c000b522:	55                   	push   ebp
c000b523:	89 c6                	mov    esi,eax
c000b525:	e8 56 50 ff ff       	call   c0000580 <strlen>
c000b52a:	83 c4 10             	add    esp,0x10
c000b52d:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b531:	75 4b                	jne    c000b57e <KeCreateSymlink(char const*, char const*)+0x139>
c000b533:	85 f6                	test   esi,esi
c000b535:	75 47                	jne    c000b57e <KeCreateSymlink(char const*, char const*)+0x139>
c000b537:	50                   	push   eax
c000b538:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b53c:	55                   	push   ebp
c000b53d:	68 7b 19 02 c0       	push   0xc002197b
c000b542:	e8 e3 f3 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000b547:	83 c4 0c             	add    esp,0xc
c000b54a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b54e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b552:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b556:	e8 b9 f9 ff ff       	call   c000af14 <KeRegisterSymlink(char const*, unsigned long long)>
c000b55b:	c7 04 24 a0 19 02 c0 	mov    DWORD PTR [esp],0xc00219a0
c000b562:	e8 c3 f3 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000b567:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b56a:	e8 4f 06 00 00       	call   c000bbbe <File::close()>
c000b56f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b571:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b574:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b577:	83 c4 10             	add    esp,0x10
c000b57a:	31 c0                	xor    eax,eax
c000b57c:	eb 19                	jmp    c000b597 <KeCreateSymlink(char const*, char const*)+0x152>
c000b57e:	83 ec 0c             	sub    esp,0xc
c000b581:	53                   	push   ebx
c000b582:	e8 37 06 00 00       	call   c000bbbe <File::close()>
c000b587:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b589:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b58c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b58f:	83 c4 10             	add    esp,0x10
c000b592:	b8 01 00 00 00       	mov    eax,0x1
c000b597:	83 c4 2c             	add    esp,0x2c
c000b59a:	5b                   	pop    ebx
c000b59b:	5e                   	pop    esi
c000b59c:	5f                   	pop    edi
c000b59d:	5d                   	pop    ebp
c000b59e:	c3                   	ret    
c000b59f:	90                   	nop

c000b5a0 <File::read(unsigned long long, void*, int*)>:
c000b5a0:	53                   	push   ebx
c000b5a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5a9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5b0:	83 f8 19             	cmp    eax,0x19
c000b5b3:	77 35                	ja     c000b5ea <File::read(unsigned long long, void*, int*)+0x4a>
c000b5b5:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5bc:	85 c0                	test   eax,eax
c000b5be:	74 2a                	je     c000b5ea <File::read(unsigned long long, void*, int*)+0x4a>
c000b5c0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5c6:	85 c0                	test   eax,eax
c000b5c8:	74 20                	je     c000b5ea <File::read(unsigned long long, void*, int*)+0x4a>
c000b5ca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5ce:	74 21                	je     c000b5f1 <File::read(unsigned long long, void*, int*)+0x51>
c000b5d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5d2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5d6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b5dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5e4:	5b                   	pop    ebx
c000b5e5:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b5e8:	ff e0                	jmp    eax
c000b5ea:	b8 0b 00 00 00       	mov    eax,0xb
c000b5ef:	eb 05                	jmp    c000b5f6 <File::read(unsigned long long, void*, int*)+0x56>
c000b5f1:	b8 05 00 00 00       	mov    eax,0x5
c000b5f6:	5b                   	pop    ebx
c000b5f7:	c3                   	ret    

c000b5f8 <File::write(unsigned long long, void*, int*)>:
c000b5f8:	53                   	push   ebx
c000b5f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b601:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b608:	83 f8 19             	cmp    eax,0x19
c000b60b:	77 35                	ja     c000b642 <File::write(unsigned long long, void*, int*)+0x4a>
c000b60d:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b614:	85 c0                	test   eax,eax
c000b616:	74 2a                	je     c000b642 <File::write(unsigned long long, void*, int*)+0x4a>
c000b618:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b61e:	85 c0                	test   eax,eax
c000b620:	74 20                	je     c000b642 <File::write(unsigned long long, void*, int*)+0x4a>
c000b622:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b626:	74 21                	je     c000b649 <File::write(unsigned long long, void*, int*)+0x51>
c000b628:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b62a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b62e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b634:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b638:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b63c:	5b                   	pop    ebx
c000b63d:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b640:	ff e0                	jmp    eax
c000b642:	b8 0b 00 00 00       	mov    eax,0xb
c000b647:	eb 05                	jmp    c000b64e <File::write(unsigned long long, void*, int*)+0x56>
c000b649:	b8 05 00 00 00       	mov    eax,0x5
c000b64e:	5b                   	pop    ebx
c000b64f:	c3                   	ret    

c000b650 <Directory::read(unsigned long long, void*, int*)>:
c000b650:	53                   	push   ebx
c000b651:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b655:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b659:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b660:	83 f8 19             	cmp    eax,0x19
c000b663:	77 35                	ja     c000b69a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b665:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b66c:	85 c0                	test   eax,eax
c000b66e:	74 2a                	je     c000b69a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b670:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b676:	85 c0                	test   eax,eax
c000b678:	74 20                	je     c000b69a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b67a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b67e:	74 21                	je     c000b6a1 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b680:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b682:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b686:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b68c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b694:	5b                   	pop    ebx
c000b695:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b698:	ff e0                	jmp    eax
c000b69a:	b8 0b 00 00 00       	mov    eax,0xb
c000b69f:	eb 05                	jmp    c000b6a6 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b6a1:	b8 05 00 00 00       	mov    eax,0x5
c000b6a6:	5b                   	pop    ebx
c000b6a7:	c3                   	ret    

c000b6a8 <Directory::write(unsigned long long, void*, int*)>:
c000b6a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6ac:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b6b3:	b8 0b 00 00 00       	mov    eax,0xb
c000b6b8:	83 fa 19             	cmp    edx,0x19
c000b6bb:	77 18                	ja     c000b6d5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6bd:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b6c4:	85 d2                	test   edx,edx
c000b6c6:	74 0d                	je     c000b6d5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6c8:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b6cf:	19 c0                	sbb    eax,eax
c000b6d1:	83 e0 0a             	and    eax,0xa
c000b6d4:	40                   	inc    eax
c000b6d5:	c3                   	ret    

c000b6d6 <File::isAtty()>:
c000b6d6:	31 c0                	xor    eax,eax
c000b6d8:	c3                   	ret    
c000b6d9:	90                   	nop

c000b6da <Directory::isAtty()>:
c000b6da:	31 c0                	xor    eax,eax
c000b6dc:	c3                   	ret    
c000b6dd:	90                   	nop

c000b6de <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b6de:	b8 0a 00 00 00       	mov    eax,0xa
c000b6e3:	c3                   	ret    

c000b6e4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b6e4:	b8 0a 00 00 00       	mov    eax,0xa
c000b6e9:	c3                   	ret    

c000b6ea <Filesystem::allocateSwapfile(char const*, int)>:
c000b6ea:	31 c0                	xor    eax,eax
c000b6ec:	31 d2                	xor    edx,edx
c000b6ee:	c3                   	ret    
c000b6ef:	90                   	nop

c000b6f0 <File::~File()>:
c000b6f0:	83 ec 0c             	sub    esp,0xc
c000b6f3:	ba 6c 1a 02 c0       	mov    edx,0xc0021a6c
c000b6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6fc:	89 10                	mov    DWORD PTR [eax],edx
c000b6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b702:	83 ec 0c             	sub    esp,0xc
c000b705:	50                   	push   eax
c000b706:	e8 a1 dc ff ff       	call   c00093ac <UnixFile::~UnixFile()>
c000b70b:	83 c4 10             	add    esp,0x10
c000b70e:	90                   	nop
c000b70f:	83 c4 0c             	add    esp,0xc
c000b712:	c3                   	ret    
c000b713:	90                   	nop

c000b714 <File::~File()>:
c000b714:	83 ec 0c             	sub    esp,0xc
c000b717:	83 ec 0c             	sub    esp,0xc
c000b71a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71e:	e8 cd ff ff ff       	call   c000b6f0 <File::~File()>
c000b723:	83 c4 10             	add    esp,0x10
c000b726:	83 ec 08             	sub    esp,0x8
c000b729:	68 14 01 00 00       	push   0x114
c000b72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b732:	e8 f5 f0 ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000b737:	83 c4 10             	add    esp,0x10
c000b73a:	83 c4 0c             	add    esp,0xc
c000b73d:	c3                   	ret    

c000b73e <Directory::~Directory()>:
c000b73e:	83 ec 0c             	sub    esp,0xc
c000b741:	ba 88 1a 02 c0       	mov    edx,0xc0021a88
c000b746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b74a:	89 10                	mov    DWORD PTR [eax],edx
c000b74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b750:	83 ec 0c             	sub    esp,0xc
c000b753:	50                   	push   eax
c000b754:	e8 53 dc ff ff       	call   c00093ac <UnixFile::~UnixFile()>
c000b759:	83 c4 10             	add    esp,0x10
c000b75c:	90                   	nop
c000b75d:	83 c4 0c             	add    esp,0xc
c000b760:	c3                   	ret    
c000b761:	90                   	nop

c000b762 <Directory::~Directory()>:
c000b762:	83 ec 0c             	sub    esp,0xc
c000b765:	83 ec 0c             	sub    esp,0xc
c000b768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b76c:	e8 cd ff ff ff       	call   c000b73e <Directory::~Directory()>
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	83 ec 08             	sub    esp,0x8
c000b777:	68 14 01 00 00       	push   0x114
c000b77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b780:	e8 a7 f0 ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000b785:	83 c4 10             	add    esp,0x10
c000b788:	83 c4 0c             	add    esp,0xc
c000b78b:	c3                   	ret    

c000b78c <Filesystem::Filesystem()>:
c000b78c:	ba 00 1a 02 c0       	mov    edx,0xc0021a00
c000b791:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b795:	89 10                	mov    DWORD PTR [eax],edx
c000b797:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b79d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7a1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b7a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7a8:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b7ad:	90                   	nop
c000b7ae:	c3                   	ret    
c000b7af:	90                   	nop

c000b7b0 <Filesystem::~Filesystem()>:
c000b7b0:	ba 00 1a 02 c0       	mov    edx,0xc0021a00
c000b7b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b9:	89 10                	mov    DWORD PTR [eax],edx
c000b7bb:	90                   	nop
c000b7bc:	c3                   	ret    
c000b7bd:	90                   	nop

c000b7be <Filesystem::~Filesystem()>:
c000b7be:	83 ec 0c             	sub    esp,0xc
c000b7c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7c5:	e8 e6 ff ff ff       	call   c000b7b0 <Filesystem::~Filesystem()>
c000b7ca:	83 c4 04             	add    esp,0x4
c000b7cd:	83 ec 08             	sub    esp,0x8
c000b7d0:	6a 08                	push   0x8
c000b7d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d6:	e8 51 f0 ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000b7db:	83 c4 10             	add    esp,0x10
c000b7de:	83 c4 0c             	add    esp,0xc
c000b7e1:	c3                   	ret    

c000b7e2 <Fs::getcwd(Process*, char*, int)>:
c000b7e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b7e6:	31 c0                	xor    eax,eax
c000b7e8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b7ec:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b7ef:	7d 15                	jge    c000b806 <Fs::getcwd(Process*, char*, int)+0x24>
c000b7f1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7f5:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b7fc:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b7ff:	84 c9                	test   cl,cl
c000b801:	74 06                	je     c000b809 <Fs::getcwd(Process*, char*, int)+0x27>
c000b803:	40                   	inc    eax
c000b804:	eb e2                	jmp    c000b7e8 <Fs::getcwd(Process*, char*, int)+0x6>
c000b806:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b809:	31 c0                	xor    eax,eax
c000b80b:	c3                   	ret    

c000b80c <Fs::initVFS()>:
c000b80c:	83 ec 18             	sub    esp,0x18
c000b80f:	6a 08                	push   0x8
c000b811:	e8 dd c2 ff ff       	call   c0007af3 <malloc>
c000b816:	89 04 24             	mov    DWORD PTR [esp],eax
c000b819:	e8 62 e4 00 00       	call   c0019c80 <FAT::FAT()>
c000b81e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b825:	e8 c9 c2 ff ff       	call   c0007af3 <malloc>
c000b82a:	89 04 24             	mov    DWORD PTR [esp],eax
c000b82d:	e8 7c f3 00 00       	call   c001abae <ISO9660::ISO9660()>
c000b832:	83 c4 1c             	add    esp,0x1c
c000b835:	c3                   	ret    

c000b836 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b836:	55                   	push   ebp
c000b837:	57                   	push   edi
c000b838:	56                   	push   esi
c000b839:	53                   	push   ebx
c000b83a:	81 ec 20 04 00 00    	sub    esp,0x420
c000b840:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b847:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b84e:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b855:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b85c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b860:	68 00 04 00 00       	push   0x400
c000b865:	6a 00                	push   0x0
c000b867:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b86b:	57                   	push   edi
c000b86c:	e8 7f 4c ff ff       	call   c00004f0 <memset>
c000b871:	83 c4 10             	add    esp,0x10
c000b874:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b878:	75 0b                	jne    c000b885 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b87a:	50                   	push   eax
c000b87b:	50                   	push   eax
c000b87c:	56                   	push   esi
c000b87d:	57                   	push   edi
c000b87e:	e8 cd 4d ff ff       	call   c0000650 <strcpy>
c000b883:	eb 45                	jmp    c000b8ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b885:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b888:	83 f8 2f             	cmp    eax,0x2f
c000b88b:	74 05                	je     c000b892 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b88d:	83 f8 5c             	cmp    eax,0x5c
c000b890:	75 19                	jne    c000b8ab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b892:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b895:	3c 60                	cmp    al,0x60
c000b897:	7e 03                	jle    c000b89c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b899:	83 e8 20             	sub    eax,0x20
c000b89c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b8a0:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b8a7:	50                   	push   eax
c000b8a8:	50                   	push   eax
c000b8a9:	eb 18                	jmp    c000b8c3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b8ab:	50                   	push   eax
c000b8ac:	50                   	push   eax
c000b8ad:	55                   	push   ebp
c000b8ae:	57                   	push   edi
c000b8af:	e8 9c 4d ff ff       	call   c0000650 <strcpy>
c000b8b4:	58                   	pop    eax
c000b8b5:	5a                   	pop    edx
c000b8b6:	68 37 2a 02 c0       	push   0xc0022a37
c000b8bb:	57                   	push   edi
c000b8bc:	e8 af 4f ff ff       	call   c0000870 <strcat>
c000b8c1:	59                   	pop    ecx
c000b8c2:	5d                   	pop    ebp
c000b8c3:	56                   	push   esi
c000b8c4:	57                   	push   edi
c000b8c5:	e8 a6 4f ff ff       	call   c0000870 <strcat>
c000b8ca:	83 c4 10             	add    esp,0x10
c000b8cd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b8d1:	3c 60                	cmp    al,0x60
c000b8d3:	7e 03                	jle    c000b8d8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b8d5:	83 e8 20             	sub    eax,0x20
c000b8d8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b8dc:	be 03 00 00 00       	mov    esi,0x3
c000b8e1:	88 03                	mov    BYTE PTR [ebx],al
c000b8e3:	b8 03 00 00 00       	mov    eax,0x3
c000b8e8:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b8ef:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b8f5:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b8f9:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b8fe:	89 fa                	mov    edx,edi
c000b900:	0f be ea             	movsx  ebp,dl
c000b903:	85 ed                	test   ebp,ebp
c000b905:	0f 84 a1 00 00 00    	je     c000b9ac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b90b:	8d 56 01             	lea    edx,[esi+0x1]
c000b90e:	83 fd 2f             	cmp    ebp,0x2f
c000b911:	74 05                	je     c000b918 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b913:	83 fd 5c             	cmp    ebp,0x5c
c000b916:	75 12                	jne    c000b92a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b918:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b91d:	89 c5                	mov    ebp,eax
c000b91f:	74 09                	je     c000b92a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b921:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b925:	40                   	inc    eax
c000b926:	89 d6                	mov    esi,edx
c000b928:	eb cf                	jmp    c000b8f9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b92a:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b92f:	89 f9                	mov    ecx,edi
c000b931:	0f be e9             	movsx  ebp,cl
c000b934:	75 61                	jne    c000b997 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b936:	83 fd 2e             	cmp    ebp,0x2e
c000b939:	75 5c                	jne    c000b997 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b93b:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b940:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b945:	74 19                	je     c000b960 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b947:	83 fd 2e             	cmp    ebp,0x2e
c000b94a:	74 55                	je     c000b9a1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b94c:	89 f2                	mov    edx,esi
c000b94e:	42                   	inc    edx
c000b94f:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b954:	83 f9 2f             	cmp    ecx,0x2f
c000b957:	74 f5                	je     c000b94e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b959:	83 f9 5c             	cmp    ecx,0x5c
c000b95c:	74 f0                	je     c000b94e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b95e:	eb c6                	jmp    c000b926 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b960:	83 fd 2e             	cmp    ebp,0x2e
c000b963:	74 3c                	je     c000b9a1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b965:	83 f8 03             	cmp    eax,0x3
c000b968:	74 bc                	je     c000b926 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b96a:	42                   	inc    edx
c000b96b:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b970:	83 f9 2f             	cmp    ecx,0x2f
c000b973:	74 f5                	je     c000b96a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b975:	83 f9 5c             	cmp    ecx,0x5c
c000b978:	74 f0                	je     c000b96a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b97a:	48                   	dec    eax
c000b97b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b97f:	75 06                	jne    c000b987 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b981:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b985:	eb f3                	jmp    c000b97a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b987:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b98b:	74 07                	je     c000b994 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b98d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b991:	48                   	dec    eax
c000b992:	eb f3                	jmp    c000b987 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b994:	40                   	inc    eax
c000b995:	eb 8f                	jmp    c000b926 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b997:	83 fd 2f             	cmp    ebp,0x2f
c000b99a:	74 8a                	je     c000b926 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b99c:	83 fd 5c             	cmp    ebp,0x5c
c000b99f:	74 85                	je     c000b926 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9a1:	89 f9                	mov    ecx,edi
c000b9a3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b9a6:	40                   	inc    eax
c000b9a7:	e9 7a ff ff ff       	jmp    c000b926 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9ac:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b9b0:	83 ec 0c             	sub    esp,0xc
c000b9b3:	53                   	push   ebx
c000b9b4:	e8 c7 4b ff ff       	call   c0000580 <strlen>
c000b9b9:	83 c4 10             	add    esp,0x10
c000b9bc:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b9c1:	74 1c                	je     c000b9df <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b9c3:	83 ec 0c             	sub    esp,0xc
c000b9c6:	53                   	push   ebx
c000b9c7:	e8 b4 4b ff ff       	call   c0000580 <strlen>
c000b9cc:	83 c4 10             	add    esp,0x10
c000b9cf:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b9d4:	74 09                	je     c000b9df <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b9d6:	31 ff                	xor    edi,edi
c000b9d8:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b9dd:	eb 5c                	jmp    c000ba3b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000b9df:	83 ec 0c             	sub    esp,0xc
c000b9e2:	53                   	push   ebx
c000b9e3:	e8 98 4b ff ff       	call   c0000580 <strlen>
c000b9e8:	83 c4 10             	add    esp,0x10
c000b9eb:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b9f0:	74 e4                	je     c000b9d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000b9f2:	83 ec 0c             	sub    esp,0xc
c000b9f5:	53                   	push   ebx
c000b9f6:	e8 85 4b ff ff       	call   c0000580 <strlen>
c000b9fb:	83 c4 10             	add    esp,0x10
c000b9fe:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ba03:	eb ab                	jmp    c000b9b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000ba05:	52                   	push   edx
c000ba06:	52                   	push   edx
c000ba07:	53                   	push   ebx
c000ba08:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ba0c:	55                   	push   ebp
c000ba0d:	e8 3e 4c ff ff       	call   c0000650 <strcpy>
c000ba12:	59                   	pop    ecx
c000ba13:	58                   	pop    eax
c000ba14:	53                   	push   ebx
c000ba15:	55                   	push   ebp
c000ba16:	e8 83 f8 ff ff       	call   c000b29e <KeDereferenceSymlink(char const*, char*)>
c000ba1b:	83 c4 10             	add    esp,0x10
c000ba1e:	48                   	dec    eax
c000ba1f:	75 37                	jne    c000ba58 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000ba21:	50                   	push   eax
c000ba22:	53                   	push   ebx
c000ba23:	55                   	push   ebp
c000ba24:	68 b6 19 02 c0       	push   0xc00219b6
c000ba29:	e8 fc ee ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000ba2e:	8d 47 01             	lea    eax,[edi+0x1]
c000ba31:	83 c4 10             	add    esp,0x10
c000ba34:	83 ff 14             	cmp    edi,0x14
c000ba37:	74 08                	je     c000ba41 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000ba39:	89 c7                	mov    edi,eax
c000ba3b:	85 f6                	test   esi,esi
c000ba3d:	75 c6                	jne    c000ba05 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000ba3f:	eb 17                	jmp    c000ba58 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000ba41:	83 ec 0c             	sub    esp,0xc
c000ba44:	bf 15 00 00 00       	mov    edi,0x15
c000ba49:	68 d1 19 02 c0       	push   0xc00219d1
c000ba4e:	e8 8c 5b 00 00       	call   c00115df <KePanic(char const*)>
c000ba53:	83 c4 10             	add    esp,0x10
c000ba56:	eb e3                	jmp    c000ba3b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000ba58:	81 c4 1c 04 00 00    	add    esp,0x41c
c000ba5e:	5b                   	pop    ebx
c000ba5f:	5e                   	pop    esi
c000ba60:	5f                   	pop    edi
c000ba61:	5d                   	pop    ebp
c000ba62:	c3                   	ret    
c000ba63:	90                   	nop

c000ba64 <File::File(char const*, Process*, bool)>:
c000ba64:	83 ec 1c             	sub    esp,0x1c
c000ba67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba6b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba73:	83 ec 08             	sub    esp,0x8
c000ba76:	6a 00                	push   0x0
c000ba78:	50                   	push   eax
c000ba79:	e8 48 d7 ff ff       	call   c00091c6 <UnixFile::UnixFile(int)>
c000ba7e:	83 c4 10             	add    esp,0x10
c000ba81:	ba 6c 1a 02 c0       	mov    edx,0xc0021a6c
c000ba86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba8a:	89 10                	mov    DWORD PTR [eax],edx
c000ba8c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ba91:	85 c0                	test   eax,eax
c000ba93:	74 0f                	je     c000baa4 <File::File(char const*, Process*, bool)+0x40>
c000ba95:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ba9a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000ba9e:	74 04                	je     c000baa4 <File::File(char const*, Process*, bool)+0x40>
c000baa0:	b0 01                	mov    al,0x1
c000baa2:	eb 02                	jmp    c000baa6 <File::File(char const*, Process*, bool)+0x42>
c000baa4:	b0 00                	mov    al,0x0
c000baa6:	0f b6 c0             	movzx  eax,al
c000baa9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baad:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bab3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bab7:	83 c2 0d             	add    edx,0xd
c000baba:	50                   	push   eax
c000babb:	51                   	push   ecx
c000babc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bac0:	52                   	push   edx
c000bac1:	e8 70 fd ff ff       	call   c000b836 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bac6:	83 c4 10             	add    esp,0x10
c000bac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bacd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bad0:	83 e8 41             	sub    eax,0x41
c000bad3:	88 c2                	mov    dl,al
c000bad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000badf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baeb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000baf1:	0f b6 c0             	movzx  eax,al
c000baf4:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bafb:	85 c0                	test   eax,eax
c000bafd:	74 3e                	je     c000bb3d <File::File(char const*, Process*, bool)+0xd9>
c000baff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb03:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb09:	0f b6 c0             	movzx  eax,al
c000bb0c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb13:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb19:	85 c0                	test   eax,eax
c000bb1b:	75 20                	jne    c000bb3d <File::File(char const*, Process*, bool)+0xd9>
c000bb1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb21:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb27:	0f b6 c0             	movzx  eax,al
c000bb2a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb31:	83 ec 0c             	sub    esp,0xc
c000bb34:	50                   	push   eax
c000bb35:	e8 ae 21 00 00       	call   c000dce8 <LogicalDisk::mount()>
c000bb3a:	83 c4 10             	add    esp,0x10
c000bb3d:	90                   	nop
c000bb3e:	83 c4 1c             	add    esp,0x1c
c000bb41:	c3                   	ret    

c000bb42 <File::File(char const*, Process*)>:
c000bb42:	83 ec 0c             	sub    esp,0xc
c000bb45:	6a 01                	push   0x1
c000bb47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb53:	e8 0c ff ff ff       	call   c000ba64 <File::File(char const*, Process*, bool)>
c000bb58:	83 c4 10             	add    esp,0x10
c000bb5b:	90                   	nop
c000bb5c:	83 c4 0c             	add    esp,0xc
c000bb5f:	c3                   	ret    

c000bb60 <File::open(FileOpenMode)>:
c000bb60:	53                   	push   ebx
c000bb61:	b8 0b 00 00 00       	mov    eax,0xb
c000bb66:	83 ec 08             	sub    esp,0x8
c000bb69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb6d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb74:	83 fa 19             	cmp    edx,0x19
c000bb77:	77 40                	ja     c000bbb9 <File::open(FileOpenMode)+0x59>
c000bb79:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb80:	85 d2                	test   edx,edx
c000bb82:	74 35                	je     c000bbb9 <File::open(FileOpenMode)+0x59>
c000bb84:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb8a:	85 d2                	test   edx,edx
c000bb8c:	74 2b                	je     c000bbb9 <File::open(FileOpenMode)+0x59>
c000bb8e:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bb92:	b8 06 00 00 00       	mov    eax,0x6
c000bb97:	75 20                	jne    c000bbb9 <File::open(FileOpenMode)+0x59>
c000bb99:	8b 02                	mov    eax,DWORD PTR [edx]
c000bb9b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bba1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bba5:	51                   	push   ecx
c000bba6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bba9:	51                   	push   ecx
c000bbaa:	52                   	push   edx
c000bbab:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bbae:	83 c4 10             	add    esp,0x10
c000bbb1:	85 c0                	test   eax,eax
c000bbb3:	75 04                	jne    c000bbb9 <File::open(FileOpenMode)+0x59>
c000bbb5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bbb9:	83 c4 08             	add    esp,0x8
c000bbbc:	5b                   	pop    ebx
c000bbbd:	c3                   	ret    

c000bbbe <File::close()>:
c000bbbe:	53                   	push   ebx
c000bbbf:	b8 0b 00 00 00       	mov    eax,0xb
c000bbc4:	83 ec 08             	sub    esp,0x8
c000bbc7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbcb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbd2:	83 f9 19             	cmp    ecx,0x19
c000bbd5:	77 41                	ja     c000bc18 <File::close()+0x5a>
c000bbd7:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bbde:	85 db                	test   ebx,ebx
c000bbe0:	74 36                	je     c000bc18 <File::close()+0x5a>
c000bbe2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bbe9:	74 2d                	je     c000bc18 <File::close()+0x5a>
c000bbeb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbef:	b8 05 00 00 00       	mov    eax,0x5
c000bbf4:	74 22                	je     c000bc18 <File::close()+0x5a>
c000bbf6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bbfa:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc01:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc07:	53                   	push   ebx
c000bc08:	53                   	push   ebx
c000bc09:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc0b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc11:	50                   	push   eax
c000bc12:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc15:	83 c4 10             	add    esp,0x10
c000bc18:	83 c4 08             	add    esp,0x8
c000bc1b:	5b                   	pop    ebx
c000bc1c:	c3                   	ret    
c000bc1d:	90                   	nop

c000bc1e <File::seek(unsigned long long)>:
c000bc1e:	56                   	push   esi
c000bc1f:	b8 0b 00 00 00       	mov    eax,0xb
c000bc24:	53                   	push   ebx
c000bc25:	51                   	push   ecx
c000bc26:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc2a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc2e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc32:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc39:	83 fa 19             	cmp    edx,0x19
c000bc3c:	77 31                	ja     c000bc6f <File::seek(unsigned long long)+0x51>
c000bc3e:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc45:	85 d2                	test   edx,edx
c000bc47:	74 26                	je     c000bc6f <File::seek(unsigned long long)+0x51>
c000bc49:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc4f:	85 d2                	test   edx,edx
c000bc51:	74 1c                	je     c000bc6f <File::seek(unsigned long long)+0x51>
c000bc53:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc57:	b8 05 00 00 00       	mov    eax,0x5
c000bc5c:	74 11                	je     c000bc6f <File::seek(unsigned long long)+0x51>
c000bc5e:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc60:	53                   	push   ebx
c000bc61:	51                   	push   ecx
c000bc62:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc68:	52                   	push   edx
c000bc69:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	5a                   	pop    edx
c000bc70:	5b                   	pop    ebx
c000bc71:	5e                   	pop    esi
c000bc72:	c3                   	ret    
c000bc73:	90                   	nop

c000bc74 <File::truncate(unsigned long long)>:
c000bc74:	56                   	push   esi
c000bc75:	b8 0b 00 00 00       	mov    eax,0xb
c000bc7a:	53                   	push   ebx
c000bc7b:	51                   	push   ecx
c000bc7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc80:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc84:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc88:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc8f:	83 fa 19             	cmp    edx,0x19
c000bc92:	77 31                	ja     c000bcc5 <File::truncate(unsigned long long)+0x51>
c000bc94:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc9b:	85 d2                	test   edx,edx
c000bc9d:	74 26                	je     c000bcc5 <File::truncate(unsigned long long)+0x51>
c000bc9f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bca5:	85 d2                	test   edx,edx
c000bca7:	74 1c                	je     c000bcc5 <File::truncate(unsigned long long)+0x51>
c000bca9:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcad:	b8 05 00 00 00       	mov    eax,0x5
c000bcb2:	74 11                	je     c000bcc5 <File::truncate(unsigned long long)+0x51>
c000bcb4:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcb6:	53                   	push   ebx
c000bcb7:	51                   	push   ecx
c000bcb8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcbe:	52                   	push   edx
c000bcbf:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bcc2:	83 c4 10             	add    esp,0x10
c000bcc5:	5a                   	pop    edx
c000bcc6:	5b                   	pop    ebx
c000bcc7:	5e                   	pop    esi
c000bcc8:	c3                   	ret    
c000bcc9:	90                   	nop

c000bcca <File::tell(unsigned long long*)>:
c000bcca:	83 ec 0c             	sub    esp,0xc
c000bccd:	b8 0b 00 00 00       	mov    eax,0xb
c000bcd2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bcd6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bcdd:	83 fa 19             	cmp    edx,0x19
c000bce0:	77 34                	ja     c000bd16 <File::tell(unsigned long long*)+0x4c>
c000bce2:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bce9:	85 d2                	test   edx,edx
c000bceb:	74 29                	je     c000bd16 <File::tell(unsigned long long*)+0x4c>
c000bced:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcf3:	85 d2                	test   edx,edx
c000bcf5:	74 1f                	je     c000bd16 <File::tell(unsigned long long*)+0x4c>
c000bcf7:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bcfb:	b8 05 00 00 00       	mov    eax,0x5
c000bd00:	74 14                	je     c000bd16 <File::tell(unsigned long long*)+0x4c>
c000bd02:	50                   	push   eax
c000bd03:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd09:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd0f:	52                   	push   edx
c000bd10:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd13:	83 c4 10             	add    esp,0x10
c000bd16:	83 c4 0c             	add    esp,0xc
c000bd19:	c3                   	ret    

c000bd1a <File::rewind()>:
c000bd1a:	83 ec 10             	sub    esp,0x10
c000bd1d:	6a 00                	push   0x0
c000bd1f:	6a 00                	push   0x0
c000bd21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd25:	e8 f4 fe ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c000bd2a:	83 c4 1c             	add    esp,0x1c
c000bd2d:	c3                   	ret    

c000bd2e <File::unlink()>:
c000bd2e:	83 ec 0c             	sub    esp,0xc
c000bd31:	b8 0b 00 00 00       	mov    eax,0xb
c000bd36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd3a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd41:	83 f9 19             	cmp    ecx,0x19
c000bd44:	77 2f                	ja     c000bd75 <File::unlink()+0x47>
c000bd46:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd4d:	85 c9                	test   ecx,ecx
c000bd4f:	74 24                	je     c000bd75 <File::unlink()+0x47>
c000bd51:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd57:	85 c9                	test   ecx,ecx
c000bd59:	74 1a                	je     c000bd75 <File::unlink()+0x47>
c000bd5b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd5f:	b8 06 00 00 00       	mov    eax,0x6
c000bd64:	75 0f                	jne    c000bd75 <File::unlink()+0x47>
c000bd66:	50                   	push   eax
c000bd67:	83 c2 0d             	add    edx,0xd
c000bd6a:	50                   	push   eax
c000bd6b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd6d:	52                   	push   edx
c000bd6e:	51                   	push   ecx
c000bd6f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd72:	83 c4 10             	add    esp,0x10
c000bd75:	83 c4 0c             	add    esp,0xc
c000bd78:	c3                   	ret    
c000bd79:	90                   	nop

c000bd7a <File::rename(char const*)>:
c000bd7a:	83 ec 0c             	sub    esp,0xc
c000bd7d:	b8 0b 00 00 00       	mov    eax,0xb
c000bd82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd86:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd8d:	83 f9 19             	cmp    ecx,0x19
c000bd90:	77 32                	ja     c000bdc4 <File::rename(char const*)+0x4a>
c000bd92:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd99:	85 c9                	test   ecx,ecx
c000bd9b:	74 27                	je     c000bdc4 <File::rename(char const*)+0x4a>
c000bd9d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bda3:	85 c9                	test   ecx,ecx
c000bda5:	74 1d                	je     c000bdc4 <File::rename(char const*)+0x4a>
c000bda7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdab:	b8 06 00 00 00       	mov    eax,0x6
c000bdb0:	75 12                	jne    c000bdc4 <File::rename(char const*)+0x4a>
c000bdb2:	50                   	push   eax
c000bdb3:	83 c2 0d             	add    edx,0xd
c000bdb6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdbc:	52                   	push   edx
c000bdbd:	51                   	push   ecx
c000bdbe:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bdc1:	83 c4 10             	add    esp,0x10
c000bdc4:	83 c4 0c             	add    esp,0xc
c000bdc7:	c3                   	ret    

c000bdc8 <File::chfatattr(unsigned char, unsigned char)>:
c000bdc8:	57                   	push   edi
c000bdc9:	b8 0b 00 00 00       	mov    eax,0xb
c000bdce:	56                   	push   esi
c000bdcf:	53                   	push   ebx
c000bdd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdd4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bdd8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bddc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bde3:	83 f9 19             	cmp    ecx,0x19
c000bde6:	77 37                	ja     c000be1f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bde8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdef:	85 c9                	test   ecx,ecx
c000bdf1:	74 2c                	je     c000be1f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdf3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdf9:	85 c9                	test   ecx,ecx
c000bdfb:	74 22                	je     c000be1f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdfd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be01:	b8 06 00 00 00       	mov    eax,0x6
c000be06:	75 17                	jne    c000be1f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be08:	89 f0                	mov    eax,esi
c000be0a:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be0c:	0f b6 db             	movzx  ebx,bl
c000be0f:	0f b6 f0             	movzx  esi,al
c000be12:	83 c2 0d             	add    edx,0xd
c000be15:	56                   	push   esi
c000be16:	53                   	push   ebx
c000be17:	52                   	push   edx
c000be18:	51                   	push   ecx
c000be19:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be1c:	83 c4 10             	add    esp,0x10
c000be1f:	5b                   	pop    ebx
c000be20:	5e                   	pop    esi
c000be21:	5f                   	pop    edi
c000be22:	c3                   	ret    
c000be23:	90                   	nop

c000be24 <File::exists()>:
c000be24:	83 ec 0c             	sub    esp,0xc
c000be27:	31 c0                	xor    eax,eax
c000be29:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be2d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be34:	83 f9 19             	cmp    ecx,0x19
c000be37:	77 24                	ja     c000be5d <File::exists()+0x39>
c000be39:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be40:	85 c9                	test   ecx,ecx
c000be42:	74 19                	je     c000be5d <File::exists()+0x39>
c000be44:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be4a:	85 c9                	test   ecx,ecx
c000be4c:	74 0f                	je     c000be5d <File::exists()+0x39>
c000be4e:	50                   	push   eax
c000be4f:	83 c2 0d             	add    edx,0xd
c000be52:	50                   	push   eax
c000be53:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be55:	52                   	push   edx
c000be56:	51                   	push   ecx
c000be57:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be5a:	83 c4 10             	add    esp,0x10
c000be5d:	83 c4 0c             	add    esp,0xc
c000be60:	c3                   	ret    
c000be61:	90                   	nop

c000be62 <File::stat(unsigned long long*, bool*)>:
c000be62:	56                   	push   esi
c000be63:	53                   	push   ebx
c000be64:	50                   	push   eax
c000be65:	b8 0b 00 00 00       	mov    eax,0xb
c000be6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be6e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be72:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be76:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be7d:	83 f9 19             	cmp    ecx,0x19
c000be80:	77 3d                	ja     c000bebf <File::stat(unsigned long long*, bool*)+0x5d>
c000be82:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be89:	85 c9                	test   ecx,ecx
c000be8b:	74 32                	je     c000bebf <File::stat(unsigned long long*, bool*)+0x5d>
c000be8d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be93:	85 c9                	test   ecx,ecx
c000be95:	74 28                	je     c000bebf <File::stat(unsigned long long*, bool*)+0x5d>
c000be97:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be9b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be9d:	74 13                	je     c000beb2 <File::stat(unsigned long long*, bool*)+0x50>
c000be9f:	83 ec 04             	sub    esp,0x4
c000bea2:	56                   	push   esi
c000bea3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bea9:	51                   	push   ecx
c000beaa:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bead:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000beb0:	eb 0a                	jmp    c000bebc <File::stat(unsigned long long*, bool*)+0x5a>
c000beb2:	53                   	push   ebx
c000beb3:	83 c2 0d             	add    edx,0xd
c000beb6:	56                   	push   esi
c000beb7:	52                   	push   edx
c000beb8:	51                   	push   ecx
c000beb9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	5a                   	pop    edx
c000bec0:	5b                   	pop    ebx
c000bec1:	5e                   	pop    esi
c000bec2:	c3                   	ret    

c000bec3 <Fs::setcwd(Process*, char*)>:
c000bec3:	55                   	push   ebp
c000bec4:	57                   	push   edi
c000bec5:	56                   	push   esi
c000bec6:	53                   	push   ebx
c000bec7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000becd:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bed4:	6a 00                	push   0x0
c000bed6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bedc:	57                   	push   edi
c000bedd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bee4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bee8:	56                   	push   esi
c000bee9:	e8 48 f9 ff ff       	call   c000b836 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000beee:	89 34 24             	mov    DWORD PTR [esp],esi
c000bef1:	e8 8a 46 ff ff       	call   c0000580 <strlen>
c000bef6:	83 c4 10             	add    esp,0x10
c000bef9:	83 f8 02             	cmp    eax,0x2
c000befc:	77 15                	ja     c000bf13 <Fs::setcwd(Process*, char*)+0x50>
c000befe:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf03:	83 eb 41             	sub    ebx,0x41
c000bf06:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf0d:	85 c0                	test   eax,eax
c000bf0f:	75 1c                	jne    c000bf2d <Fs::setcwd(Process*, char*)+0x6a>
c000bf11:	eb 2f                	jmp    c000bf42 <Fs::setcwd(Process*, char*)+0x7f>
c000bf13:	83 ec 0c             	sub    esp,0xc
c000bf16:	56                   	push   esi
c000bf17:	e8 64 46 ff ff       	call   c0000580 <strlen>
c000bf1c:	83 c4 10             	add    esp,0x10
c000bf1f:	83 f8 03             	cmp    eax,0x3
c000bf22:	75 57                	jne    c000bf7b <Fs::setcwd(Process*, char*)+0xb8>
c000bf24:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf29:	75 50                	jne    c000bf7b <Fs::setcwd(Process*, char*)+0xb8>
c000bf2b:	eb d1                	jmp    c000befe <Fs::setcwd(Process*, char*)+0x3b>
c000bf2d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf34:	75 0c                	jne    c000bf42 <Fs::setcwd(Process*, char*)+0x7f>
c000bf36:	83 ec 0c             	sub    esp,0xc
c000bf39:	50                   	push   eax
c000bf3a:	e8 a9 1d 00 00       	call   c000dce8 <LogicalDisk::mount()>
c000bf3f:	83 c4 10             	add    esp,0x10
c000bf42:	83 fb 19             	cmp    ebx,0x19
c000bf45:	b8 03 00 00 00       	mov    eax,0x3
c000bf4a:	0f 87 c6 00 00 00    	ja     c000c016 <Fs::setcwd(Process*, char*)+0x153>
c000bf50:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf57:	b8 05 00 00 00       	mov    eax,0x5
c000bf5c:	85 d2                	test   edx,edx
c000bf5e:	0f 84 b2 00 00 00    	je     c000c016 <Fs::setcwd(Process*, char*)+0x153>
c000bf64:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf6b:	b8 06 00 00 00       	mov    eax,0x6
c000bf70:	0f 85 92 00 00 00    	jne    c000c008 <Fs::setcwd(Process*, char*)+0x145>
c000bf76:	e9 9b 00 00 00       	jmp    c000c016 <Fs::setcwd(Process*, char*)+0x153>
c000bf7b:	83 ec 0c             	sub    esp,0xc
c000bf7e:	68 14 01 00 00       	push   0x114
c000bf83:	e8 6b bb ff ff       	call   c0007af3 <malloc>
c000bf88:	83 c4 0c             	add    esp,0xc
c000bf8b:	55                   	push   ebp
c000bf8c:	56                   	push   esi
c000bf8d:	50                   	push   eax
c000bf8e:	89 c3                	mov    ebx,eax
c000bf90:	e8 ad fb ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c000bf95:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bf9a:	83 c4 0c             	add    esp,0xc
c000bf9d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bfa1:	50                   	push   eax
c000bfa2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bfa6:	50                   	push   eax
c000bfa7:	53                   	push   ebx
c000bfa8:	e8 b5 fe ff ff       	call   c000be62 <File::stat(unsigned long long*, bool*)>
c000bfad:	83 c4 10             	add    esp,0x10
c000bfb0:	83 f8 02             	cmp    eax,0x2
c000bfb3:	74 27                	je     c000bfdc <Fs::setcwd(Process*, char*)+0x119>
c000bfb5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bfba:	75 1c                	jne    c000bfd8 <Fs::setcwd(Process*, char*)+0x115>
c000bfbc:	85 db                	test   ebx,ebx
c000bfbe:	b8 02 00 00 00       	mov    eax,0x2
c000bfc3:	74 51                	je     c000c016 <Fs::setcwd(Process*, char*)+0x153>
c000bfc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfc7:	83 ec 0c             	sub    esp,0xc
c000bfca:	53                   	push   ebx
c000bfcb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfce:	83 c4 10             	add    esp,0x10
c000bfd1:	b8 02 00 00 00       	mov    eax,0x2
c000bfd6:	eb 3e                	jmp    c000c016 <Fs::setcwd(Process*, char*)+0x153>
c000bfd8:	85 c0                	test   eax,eax
c000bfda:	74 1c                	je     c000bff8 <Fs::setcwd(Process*, char*)+0x135>
c000bfdc:	85 db                	test   ebx,ebx
c000bfde:	b8 01 00 00 00       	mov    eax,0x1
c000bfe3:	74 31                	je     c000c016 <Fs::setcwd(Process*, char*)+0x153>
c000bfe5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfe7:	83 ec 0c             	sub    esp,0xc
c000bfea:	53                   	push   ebx
c000bfeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfee:	83 c4 10             	add    esp,0x10
c000bff1:	b8 01 00 00 00       	mov    eax,0x1
c000bff6:	eb 1e                	jmp    c000c016 <Fs::setcwd(Process*, char*)+0x153>
c000bff8:	85 db                	test   ebx,ebx
c000bffa:	74 0c                	je     c000c008 <Fs::setcwd(Process*, char*)+0x145>
c000bffc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bffe:	83 ec 0c             	sub    esp,0xc
c000c001:	53                   	push   ebx
c000c002:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c005:	83 c4 10             	add    esp,0x10
c000c008:	50                   	push   eax
c000c009:	50                   	push   eax
c000c00a:	56                   	push   esi
c000c00b:	57                   	push   edi
c000c00c:	e8 3f 46 ff ff       	call   c0000650 <strcpy>
c000c011:	83 c4 10             	add    esp,0x10
c000c014:	31 c0                	xor    eax,eax
c000c016:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c01c:	5b                   	pop    ebx
c000c01d:	5e                   	pop    esi
c000c01e:	5f                   	pop    edi
c000c01f:	5d                   	pop    ebp
c000c020:	c3                   	ret    
c000c021:	90                   	nop

c000c022 <Directory::Directory(char const*, Process*)>:
c000c022:	83 ec 0c             	sub    esp,0xc
c000c025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c029:	83 ec 08             	sub    esp,0x8
c000c02c:	6a 00                	push   0x0
c000c02e:	50                   	push   eax
c000c02f:	e8 92 d1 ff ff       	call   c00091c6 <UnixFile::UnixFile(int)>
c000c034:	83 c4 10             	add    esp,0x10
c000c037:	ba 88 1a 02 c0       	mov    edx,0xc0021a88
c000c03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c040:	89 10                	mov    DWORD PTR [eax],edx
c000c042:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c047:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c04b:	0f 95 c0             	setne  al
c000c04e:	0f b6 c0             	movzx  eax,al
c000c051:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c055:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c05b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c05f:	83 c2 0d             	add    edx,0xd
c000c062:	50                   	push   eax
c000c063:	51                   	push   ecx
c000c064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c068:	52                   	push   edx
c000c069:	e8 c8 f7 ff ff       	call   c000b836 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c06e:	83 c4 10             	add    esp,0x10
c000c071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c075:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c078:	83 e8 41             	sub    eax,0x41
c000c07b:	88 c2                	mov    dl,al
c000c07d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c081:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c08b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c093:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c099:	0f b6 c0             	movzx  eax,al
c000c09c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0a3:	85 c0                	test   eax,eax
c000c0a5:	74 3e                	je     c000c0e5 <Directory::Directory(char const*, Process*)+0xc3>
c000c0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ab:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0b1:	0f b6 c0             	movzx  eax,al
c000c0b4:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0bb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c0c1:	85 c0                	test   eax,eax
c000c0c3:	75 20                	jne    c000c0e5 <Directory::Directory(char const*, Process*)+0xc3>
c000c0c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0cf:	0f b6 c0             	movzx  eax,al
c000c0d2:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0d9:	83 ec 0c             	sub    esp,0xc
c000c0dc:	50                   	push   eax
c000c0dd:	e8 06 1c 00 00       	call   c000dce8 <LogicalDisk::mount()>
c000c0e2:	83 c4 10             	add    esp,0x10
c000c0e5:	90                   	nop
c000c0e6:	83 c4 0c             	add    esp,0xc
c000c0e9:	c3                   	ret    

c000c0ea <Directory::open()>:
c000c0ea:	53                   	push   ebx
c000c0eb:	b8 0b 00 00 00       	mov    eax,0xb
c000c0f0:	83 ec 08             	sub    esp,0x8
c000c0f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0f7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c0fe:	83 fa 19             	cmp    edx,0x19
c000c101:	77 3d                	ja     c000c140 <Directory::open()+0x56>
c000c103:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c10a:	85 d2                	test   edx,edx
c000c10c:	74 32                	je     c000c140 <Directory::open()+0x56>
c000c10e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c114:	85 d2                	test   edx,edx
c000c116:	74 28                	je     c000c140 <Directory::open()+0x56>
c000c118:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c11c:	b8 06 00 00 00       	mov    eax,0x6
c000c121:	75 1d                	jne    c000c140 <Directory::open()+0x56>
c000c123:	50                   	push   eax
c000c124:	8b 02                	mov    eax,DWORD PTR [edx]
c000c126:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c12c:	51                   	push   ecx
c000c12d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c130:	51                   	push   ecx
c000c131:	52                   	push   edx
c000c132:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c135:	83 c4 10             	add    esp,0x10
c000c138:	85 c0                	test   eax,eax
c000c13a:	75 04                	jne    c000c140 <Directory::open()+0x56>
c000c13c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c140:	83 c4 08             	add    esp,0x8
c000c143:	5b                   	pop    ebx
c000c144:	c3                   	ret    
c000c145:	90                   	nop

c000c146 <Directory::close()>:
c000c146:	53                   	push   ebx
c000c147:	b8 0b 00 00 00       	mov    eax,0xb
c000c14c:	83 ec 08             	sub    esp,0x8
c000c14f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c153:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c15a:	83 f9 19             	cmp    ecx,0x19
c000c15d:	77 41                	ja     c000c1a0 <Directory::close()+0x5a>
c000c15f:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c166:	85 db                	test   ebx,ebx
c000c168:	74 36                	je     c000c1a0 <Directory::close()+0x5a>
c000c16a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c171:	74 2d                	je     c000c1a0 <Directory::close()+0x5a>
c000c173:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c177:	b8 05 00 00 00       	mov    eax,0x5
c000c17c:	74 22                	je     c000c1a0 <Directory::close()+0x5a>
c000c17e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c182:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c189:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c18f:	53                   	push   ebx
c000c190:	53                   	push   ebx
c000c191:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c193:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c199:	50                   	push   eax
c000c19a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	83 c4 08             	add    esp,0x8
c000c1a3:	5b                   	pop    ebx
c000c1a4:	c3                   	ret    
c000c1a5:	90                   	nop

c000c1a6 <Directory::unlink()>:
c000c1a6:	83 ec 0c             	sub    esp,0xc
c000c1a9:	b8 0b 00 00 00       	mov    eax,0xb
c000c1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1b9:	83 f9 19             	cmp    ecx,0x19
c000c1bc:	77 2f                	ja     c000c1ed <Directory::unlink()+0x47>
c000c1be:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1c5:	85 c9                	test   ecx,ecx
c000c1c7:	74 24                	je     c000c1ed <Directory::unlink()+0x47>
c000c1c9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1cf:	85 c9                	test   ecx,ecx
c000c1d1:	74 1a                	je     c000c1ed <Directory::unlink()+0x47>
c000c1d3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1d7:	b8 06 00 00 00       	mov    eax,0x6
c000c1dc:	75 0f                	jne    c000c1ed <Directory::unlink()+0x47>
c000c1de:	50                   	push   eax
c000c1df:	83 c2 0d             	add    edx,0xd
c000c1e2:	50                   	push   eax
c000c1e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1e5:	52                   	push   edx
c000c1e6:	51                   	push   ecx
c000c1e7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c1ea:	83 c4 10             	add    esp,0x10
c000c1ed:	83 c4 0c             	add    esp,0xc
c000c1f0:	c3                   	ret    
c000c1f1:	90                   	nop

c000c1f2 <Directory::rename(char const*)>:
c000c1f2:	83 ec 0c             	sub    esp,0xc
c000c1f5:	b8 0b 00 00 00       	mov    eax,0xb
c000c1fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1fe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c205:	83 f9 19             	cmp    ecx,0x19
c000c208:	77 32                	ja     c000c23c <Directory::rename(char const*)+0x4a>
c000c20a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c211:	85 c9                	test   ecx,ecx
c000c213:	74 27                	je     c000c23c <Directory::rename(char const*)+0x4a>
c000c215:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c21b:	85 c9                	test   ecx,ecx
c000c21d:	74 1d                	je     c000c23c <Directory::rename(char const*)+0x4a>
c000c21f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c223:	b8 06 00 00 00       	mov    eax,0x6
c000c228:	75 12                	jne    c000c23c <Directory::rename(char const*)+0x4a>
c000c22a:	50                   	push   eax
c000c22b:	83 c2 0d             	add    edx,0xd
c000c22e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c230:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c234:	52                   	push   edx
c000c235:	51                   	push   ecx
c000c236:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c239:	83 c4 10             	add    esp,0x10
c000c23c:	83 c4 0c             	add    esp,0xc
c000c23f:	c3                   	ret    

c000c240 <Directory::exists()>:
c000c240:	83 ec 0c             	sub    esp,0xc
c000c243:	31 c0                	xor    eax,eax
c000c245:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c249:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c250:	83 f9 19             	cmp    ecx,0x19
c000c253:	77 24                	ja     c000c279 <Directory::exists()+0x39>
c000c255:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c25c:	85 c9                	test   ecx,ecx
c000c25e:	74 19                	je     c000c279 <Directory::exists()+0x39>
c000c260:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c266:	85 c9                	test   ecx,ecx
c000c268:	74 0f                	je     c000c279 <Directory::exists()+0x39>
c000c26a:	50                   	push   eax
c000c26b:	83 c2 0d             	add    edx,0xd
c000c26e:	50                   	push   eax
c000c26f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c271:	52                   	push   edx
c000c272:	51                   	push   ecx
c000c273:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c276:	83 c4 10             	add    esp,0x10
c000c279:	83 c4 0c             	add    esp,0xc
c000c27c:	c3                   	ret    
c000c27d:	90                   	nop

c000c27e <Directory::read(dirent*)>:
c000c27e:	83 ec 1c             	sub    esp,0x1c
c000c281:	b8 0b 00 00 00       	mov    eax,0xb
c000c286:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c28a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c291:	83 f9 19             	cmp    ecx,0x19
c000c294:	77 30                	ja     c000c2c6 <Directory::read(dirent*)+0x48>
c000c296:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c29d:	85 c9                	test   ecx,ecx
c000c29f:	74 25                	je     c000c2c6 <Directory::read(dirent*)+0x48>
c000c2a1:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c2a8:	74 1c                	je     c000c2c6 <Directory::read(dirent*)+0x48>
c000c2aa:	83 ec 0c             	sub    esp,0xc
c000c2ad:	8b 02                	mov    eax,DWORD PTR [edx]
c000c2af:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c2b3:	51                   	push   ecx
c000c2b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2b8:	6a 00                	push   0x0
c000c2ba:	68 10 01 00 00       	push   0x110
c000c2bf:	52                   	push   edx
c000c2c0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c2c3:	83 c4 20             	add    esp,0x20
c000c2c6:	83 c4 1c             	add    esp,0x1c
c000c2c9:	c3                   	ret    

c000c2ca <Directory::create()>:
c000c2ca:	83 ec 0c             	sub    esp,0xc
c000c2cd:	b8 0b 00 00 00       	mov    eax,0xb
c000c2d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2dd:	83 f9 19             	cmp    ecx,0x19
c000c2e0:	77 2f                	ja     c000c311 <Directory::create()+0x47>
c000c2e2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2e9:	85 c9                	test   ecx,ecx
c000c2eb:	74 24                	je     c000c311 <Directory::create()+0x47>
c000c2ed:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2f3:	85 c9                	test   ecx,ecx
c000c2f5:	74 1a                	je     c000c311 <Directory::create()+0x47>
c000c2f7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c2fb:	b8 06 00 00 00       	mov    eax,0x6
c000c300:	75 0f                	jne    c000c311 <Directory::create()+0x47>
c000c302:	50                   	push   eax
c000c303:	83 c2 0d             	add    edx,0xd
c000c306:	50                   	push   eax
c000c307:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c309:	52                   	push   edx
c000c30a:	51                   	push   ecx
c000c30b:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c30e:	83 c4 10             	add    esp,0x10
c000c311:	83 c4 0c             	add    esp,0xc
c000c314:	c3                   	ret    
c000c315:	90                   	nop

c000c316 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c316:	b8 0a 00 00 00       	mov    eax,0xa
c000c31b:	c3                   	ret    

c000c31c <Bus::Bus(char const*)>:
c000c31c:	83 ec 0c             	sub    esp,0xc
c000c31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c323:	83 ec 08             	sub    esp,0x8
c000c326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32a:	50                   	push   eax
c000c32b:	e8 28 08 00 00       	call   c000cb58 <Device::Device(char const*)>
c000c330:	83 c4 10             	add    esp,0x10
c000c333:	ba a4 1a 02 c0       	mov    edx,0xc0021aa4
c000c338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c33c:	89 10                	mov    DWORD PTR [eax],edx
c000c33e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c342:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c34c:	90                   	nop
c000c34d:	83 c4 0c             	add    esp,0xc
c000c350:	c3                   	ret    
c000c351:	90                   	nop
c000c352:	66 90                	xchg   ax,ax

c000c354 <Bus::~Bus()>:
c000c354:	83 ec 0c             	sub    esp,0xc
c000c357:	ba a4 1a 02 c0       	mov    edx,0xc0021aa4
c000c35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c360:	89 10                	mov    DWORD PTR [eax],edx
c000c362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c366:	83 ec 0c             	sub    esp,0xc
c000c369:	50                   	push   eax
c000c36a:	e8 53 05 00 00       	call   c000c8c2 <Device::~Device()>
c000c36f:	83 c4 10             	add    esp,0x10
c000c372:	90                   	nop
c000c373:	83 c4 0c             	add    esp,0xc
c000c376:	c3                   	ret    
c000c377:	90                   	nop

c000c378 <Bus::~Bus()>:
c000c378:	83 ec 0c             	sub    esp,0xc
c000c37b:	83 ec 0c             	sub    esp,0xc
c000c37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c382:	e8 cd ff ff ff       	call   c000c354 <Bus::~Bus()>
c000c387:	83 c4 10             	add    esp,0x10
c000c38a:	83 ec 08             	sub    esp,0x8
c000c38d:	68 58 01 00 00       	push   0x158
c000c392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c396:	e8 91 e4 ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000c39b:	83 c4 10             	add    esp,0x10
c000c39e:	83 c4 0c             	add    esp,0xc
c000c3a1:	c3                   	ret    

c000c3a2 <beepThread(void*)>:
c000c3a2:	83 ec 0c             	sub    esp,0xc
c000c3a5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c3aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3ae:	48                   	dec    eax
c000c3af:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c3b4:	75 01                	jne    c000c3b7 <beepThread(void*)+0x15>
c000c3b6:	fb                   	sti    
c000c3b7:	6b c2 0a             	imul   eax,edx,0xa
c000c3ba:	83 ec 0c             	sub    esp,0xc
c000c3bd:	50                   	push   eax
c000c3be:	e8 65 a0 00 00       	call   c0016428 <milliTenthSleep(unsigned int)>
c000c3c3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c3ca:	e8 b2 bf 00 00       	call   c0018381 <HalMakeBeep(int)>
c000c3cf:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c3d7:	83 c4 1c             	add    esp,0x1c
c000c3da:	e9 2d 9f 00 00       	jmp    c001630c <blockTask(TaskState)>

c000c3df <Krnl::beep(int, int, bool)>:
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	83 ec 10             	sub    esp,0x10
c000c3e4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c3e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c3ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f0:	e8 8c bf 00 00       	call   c0018381 <HalMakeBeep(int)>
c000c3f5:	89 f0                	mov    eax,esi
c000c3f7:	83 c4 10             	add    esp,0x10
c000c3fa:	84 c0                	test   al,al
c000c3fc:	74 1e                	je     c000c41c <Krnl::beep(int, int, bool)+0x3d>
c000c3fe:	6b db 0a             	imul   ebx,ebx,0xa
c000c401:	83 ec 0c             	sub    esp,0xc
c000c404:	53                   	push   ebx
c000c405:	e8 1e a0 00 00       	call   c0016428 <milliTenthSleep(unsigned int)>
c000c40a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c412:	83 c4 14             	add    esp,0x14
c000c415:	5b                   	pop    ebx
c000c416:	5e                   	pop    esi
c000c417:	e9 65 bf 00 00       	jmp    c0018381 <HalMakeBeep(int)>
c000c41c:	68 e6 00 00 00       	push   0xe6
c000c421:	53                   	push   ebx
c000c422:	68 a2 c3 00 c0       	push   0xc000c3a2
c000c427:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c42d:	e8 8e 9a 00 00       	call   c0015ec0 <Process::createThread(void (*)(void*), void*, int)>
c000c432:	83 c4 14             	add    esp,0x14
c000c435:	5b                   	pop    ebx
c000c436:	5e                   	pop    esi
c000c437:	c3                   	ret    

c000c438 <User::loadClockSettings(int)>:
c000c438:	53                   	push   ebx
c000c439:	83 ec 14             	sub    esp,0x14
c000c43c:	68 14 01 00 00       	push   0x114
c000c441:	e8 ad b6 ff ff       	call   c0007af3 <malloc>
c000c446:	83 c4 0c             	add    esp,0xc
c000c449:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c44f:	68 c8 1a 02 c0       	push   0xc0021ac8
c000c454:	50                   	push   eax
c000c455:	89 c3                	mov    ebx,eax
c000c457:	e8 e6 f6 ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c000c45c:	58                   	pop    eax
c000c45d:	5a                   	pop    edx
c000c45e:	6a 01                	push   0x1
c000c460:	53                   	push   ebx
c000c461:	e8 fa f6 ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c000c466:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c469:	e8 50 f7 ff ff       	call   c000bbbe <File::close()>
c000c46e:	83 c4 10             	add    esp,0x10
c000c471:	85 db                	test   ebx,ebx
c000c473:	74 0f                	je     c000c484 <User::loadClockSettings(int)+0x4c>
c000c475:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c477:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c47b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c47e:	83 c4 08             	add    esp,0x8
c000c481:	5b                   	pop    ebx
c000c482:	ff e0                	jmp    eax
c000c484:	83 c4 08             	add    esp,0x8
c000c487:	5b                   	pop    ebx
c000c488:	c3                   	ret    
c000c489:	90                   	nop

c000c48a <Clock::Clock(char const*)>:
c000c48a:	83 ec 0c             	sub    esp,0xc
c000c48d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c491:	83 ec 08             	sub    esp,0x8
c000c494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c498:	50                   	push   eax
c000c499:	e8 ba 06 00 00       	call   c000cb58 <Device::Device(char const*)>
c000c49e:	83 c4 10             	add    esp,0x10
c000c4a1:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c000c4a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4aa:	89 10                	mov    DWORD PTR [eax],edx
c000c4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c4ba:	90                   	nop
c000c4bb:	83 c4 0c             	add    esp,0xc
c000c4be:	c3                   	ret    
c000c4bf:	90                   	nop

c000c4c0 <Clock::~Clock()>:
c000c4c0:	83 ec 0c             	sub    esp,0xc
c000c4c3:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c000c4c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4cc:	89 10                	mov    DWORD PTR [eax],edx
c000c4ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4d2:	83 ec 0c             	sub    esp,0xc
c000c4d5:	50                   	push   eax
c000c4d6:	e8 e7 03 00 00       	call   c000c8c2 <Device::~Device()>
c000c4db:	83 c4 10             	add    esp,0x10
c000c4de:	90                   	nop
c000c4df:	83 c4 0c             	add    esp,0xc
c000c4e2:	c3                   	ret    
c000c4e3:	90                   	nop

c000c4e4 <Clock::~Clock()>:
c000c4e4:	83 ec 0c             	sub    esp,0xc
c000c4e7:	83 ec 0c             	sub    esp,0xc
c000c4ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ee:	e8 cd ff ff ff       	call   c000c4c0 <Clock::~Clock()>
c000c4f3:	83 c4 10             	add    esp,0x10
c000c4f6:	83 ec 08             	sub    esp,0x8
c000c4f9:	68 58 01 00 00       	push   0x158
c000c4fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c502:	e8 25 e3 ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000c507:	83 c4 10             	add    esp,0x10
c000c50a:	83 c4 0c             	add    esp,0xc
c000c50d:	c3                   	ret    

c000c50e <Clock::timeInSecondsLocal()>:
c000c50e:	53                   	push   ebx
c000c50f:	83 ec 14             	sub    esp,0x14
c000c512:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c516:	8b 10                	mov    edx,DWORD PTR [eax]
c000c518:	50                   	push   eax
c000c519:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c51c:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c523:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c529:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c52f:	89 cb                	mov    ebx,ecx
c000c531:	c1 fb 1f             	sar    ebx,0x1f
c000c534:	01 c8                	add    eax,ecx
c000c536:	11 da                	adc    edx,ebx
c000c538:	83 c4 10             	add    esp,0x10
c000c53b:	31 c9                	xor    ecx,ecx
c000c53d:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c544:	74 05                	je     c000c54b <Clock::timeInSecondsLocal()+0x3d>
c000c546:	b9 08 07 00 00       	mov    ecx,0x708
c000c54b:	31 db                	xor    ebx,ebx
c000c54d:	01 c8                	add    eax,ecx
c000c54f:	11 da                	adc    edx,ebx
c000c551:	83 c4 08             	add    esp,0x8
c000c554:	5b                   	pop    ebx
c000c555:	c3                   	ret    

c000c556 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c556:	57                   	push   edi
c000c557:	56                   	push   esi
c000c558:	53                   	push   ebx
c000c559:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c55d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c561:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c565:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c567:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c56a:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c571:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c577:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c57d:	99                   	cdq    
c000c57e:	29 c6                	sub    esi,eax
c000c580:	19 d7                	sbb    edi,edx
c000c582:	89 f0                	mov    eax,esi
c000c584:	31 f6                	xor    esi,esi
c000c586:	89 fa                	mov    edx,edi
c000c588:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c58f:	74 05                	je     c000c596 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c591:	be 08 07 00 00       	mov    esi,0x708
c000c596:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c59a:	31 ff                	xor    edi,edi
c000c59c:	29 f0                	sub    eax,esi
c000c59e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c5a2:	19 fa                	sbb    edx,edi
c000c5a4:	89 d8                	mov    eax,ebx
c000c5a6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c5aa:	5b                   	pop    ebx
c000c5ab:	5e                   	pop    esi
c000c5ac:	5f                   	pop    edi
c000c5ad:	ff e0                	jmp    eax

c000c5af <datetimeToSeconds(datetime_t)>:
c000c5af:	55                   	push   ebp
c000c5b0:	57                   	push   edi
c000c5b1:	56                   	push   esi
c000c5b2:	53                   	push   ebx
c000c5b3:	83 ec 0c             	sub    esp,0xc
c000c5b6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c5ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c5be:	89 f7                	mov    edi,esi
c000c5c0:	89 f0                	mov    eax,esi
c000c5c2:	0f b6 cf             	movzx  ecx,bh
c000c5c5:	0f b6 c4             	movzx  eax,ah
c000c5c8:	c1 ef 10             	shr    edi,0x10
c000c5cb:	89 da                	mov    edx,ebx
c000c5cd:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c5d0:	89 f9                	mov    ecx,edi
c000c5d2:	0f b6 f9             	movzx  edi,cl
c000c5d5:	89 f1                	mov    ecx,esi
c000c5d7:	6b c0 3c             	imul   eax,eax,0x3c
c000c5da:	0f b6 f1             	movzx  esi,cl
c000c5dd:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c5e3:	0f b6 db             	movzx  ebx,bl
c000c5e6:	c1 ea 10             	shr    edx,0x10
c000c5e9:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c5ef:	01 f8                	add    eax,edi
c000c5f1:	01 f0                	add    eax,esi
c000c5f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5f6:	c1 f8 1f             	sar    eax,0x1f
c000c5f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c5fd:	89 e8                	mov    eax,ebp
c000c5ff:	0f b6 c0             	movzx  eax,al
c000c602:	8b 0c 85 40 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde4c0]
c000c609:	83 f8 01             	cmp    eax,0x1
c000c60c:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c610:	0f b7 da             	movzx  ebx,dx
c000c613:	76 27                	jbe    c000c63c <datetimeToSeconds(datetime_t)+0x8d>
c000c615:	80 e2 03             	and    dl,0x3
c000c618:	75 22                	jne    c000c63c <datetimeToSeconds(datetime_t)+0x8d>
c000c61a:	31 d2                	xor    edx,edx
c000c61c:	be 64 00 00 00       	mov    esi,0x64
c000c621:	89 d8                	mov    eax,ebx
c000c623:	f7 f6                	div    esi
c000c625:	85 d2                	test   edx,edx
c000c627:	75 12                	jne    c000c63b <datetimeToSeconds(datetime_t)+0x8c>
c000c629:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c62f:	be 90 01 00 00       	mov    esi,0x190
c000c634:	99                   	cdq    
c000c635:	f7 fe                	idiv   esi
c000c637:	85 d2                	test   edx,edx
c000c639:	75 01                	jne    c000c63c <datetimeToSeconds(datetime_t)+0x8d>
c000c63b:	41                   	inc    ecx
c000c63c:	83 fb 46             	cmp    ebx,0x46
c000c63f:	76 48                	jbe    c000c689 <datetimeToSeconds(datetime_t)+0xda>
c000c641:	be 46 00 00 00       	mov    esi,0x46
c000c646:	bf 64 00 00 00       	mov    edi,0x64
c000c64b:	bd 90 01 00 00       	mov    ebp,0x190
c000c650:	f7 c6 03 00 00 00    	test   esi,0x3
c000c656:	b8 6d 01 00 00       	mov    eax,0x16d
c000c65b:	75 23                	jne    c000c680 <datetimeToSeconds(datetime_t)+0xd1>
c000c65d:	89 f0                	mov    eax,esi
c000c65f:	99                   	cdq    
c000c660:	f7 ff                	idiv   edi
c000c662:	b8 6e 01 00 00       	mov    eax,0x16e
c000c667:	85 d2                	test   edx,edx
c000c669:	75 15                	jne    c000c680 <datetimeToSeconds(datetime_t)+0xd1>
c000c66b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c671:	99                   	cdq    
c000c672:	f7 fd                	idiv   ebp
c000c674:	83 fa 01             	cmp    edx,0x1
c000c677:	19 c0                	sbb    eax,eax
c000c679:	f7 d0                	not    eax
c000c67b:	05 6e 01 00 00       	add    eax,0x16e
c000c680:	46                   	inc    esi
c000c681:	01 c1                	add    ecx,eax
c000c683:	39 de                	cmp    esi,ebx
c000c685:	7c c9                	jl     c000c650 <datetimeToSeconds(datetime_t)+0xa1>
c000c687:	eb 34                	jmp    c000c6bd <datetimeToSeconds(datetime_t)+0x10e>
c000c689:	74 32                	je     c000c6bd <datetimeToSeconds(datetime_t)+0x10e>
c000c68b:	b8 45 00 00 00       	mov    eax,0x45
c000c690:	89 c2                	mov    edx,eax
c000c692:	83 e2 03             	and    edx,0x3
c000c695:	39 d8                	cmp    eax,ebx
c000c697:	7e 0f                	jle    c000c6a8 <datetimeToSeconds(datetime_t)+0xf9>
c000c699:	83 fa 01             	cmp    edx,0x1
c000c69c:	19 d2                	sbb    edx,edx
c000c69e:	48                   	dec    eax
c000c69f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c6a6:	eb e8                	jmp    c000c690 <datetimeToSeconds(datetime_t)+0xe1>
c000c6a8:	85 d2                	test   edx,edx
c000c6aa:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6af:	75 0a                	jne    c000c6bb <datetimeToSeconds(datetime_t)+0x10c>
c000c6b1:	83 fb 01             	cmp    ebx,0x1
c000c6b4:	19 c0                	sbb    eax,eax
c000c6b6:	05 6e 01 00 00       	add    eax,0x16e
c000c6bb:	29 c1                	sub    ecx,eax
c000c6bd:	b8 80 51 01 00       	mov    eax,0x15180
c000c6c2:	f7 e9                	imul   ecx
c000c6c4:	03 04 24             	add    eax,DWORD PTR [esp]
c000c6c7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c6cb:	83 c4 0c             	add    esp,0xc
c000c6ce:	5b                   	pop    ebx
c000c6cf:	5e                   	pop    esi
c000c6d0:	5f                   	pop    edi
c000c6d1:	5d                   	pop    ebp
c000c6d2:	c3                   	ret    
c000c6d3:	90                   	nop

c000c6d4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c6d4:	57                   	push   edi
c000c6d5:	56                   	push   esi
c000c6d6:	53                   	push   ebx
c000c6d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c6db:	8b 06                	mov    eax,DWORD PTR [esi]
c000c6dd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c6e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6e8:	e8 c2 fe ff ff       	call   c000c5af <datetimeToSeconds(datetime_t)>
c000c6ed:	59                   	pop    ecx
c000c6ee:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c6f5:	5b                   	pop    ebx
c000c6f6:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c6fc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c702:	89 cb                	mov    ebx,ecx
c000c704:	c1 fb 1f             	sar    ebx,0x1f
c000c707:	29 c8                	sub    eax,ecx
c000c709:	19 da                	sbb    edx,ebx
c000c70b:	31 c9                	xor    ecx,ecx
c000c70d:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c714:	74 05                	je     c000c71b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c716:	b9 08 07 00 00       	mov    ecx,0x708
c000c71b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c71f:	31 db                	xor    ebx,ebx
c000c721:	29 c8                	sub    eax,ecx
c000c723:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c727:	19 da                	sbb    edx,ebx
c000c729:	89 f8                	mov    eax,edi
c000c72b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c72f:	5b                   	pop    ebx
c000c730:	5e                   	pop    esi
c000c731:	5f                   	pop    edi
c000c732:	ff e0                	jmp    eax

c000c734 <secondsToDatetime(unsigned long long)>:
c000c734:	55                   	push   ebp
c000c735:	57                   	push   edi
c000c736:	56                   	push   esi
c000c737:	53                   	push   ebx
c000c738:	83 ec 1c             	sub    esp,0x1c
c000c73b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c73f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c743:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c747:	6a 00                	push   0x0
c000c749:	68 80 51 01 00       	push   0x15180
c000c74e:	55                   	push   ebp
c000c74f:	57                   	push   edi
c000c750:	e8 7b 30 01 00       	call   c001f7d0 <__udivdi3>
c000c755:	83 c4 10             	add    esp,0x10
c000c758:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c75c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c762:	6a 00                	push   0x0
c000c764:	68 80 51 01 00       	push   0x15180
c000c769:	55                   	push   ebp
c000c76a:	57                   	push   edi
c000c76b:	bf 10 0e 00 00       	mov    edi,0xe10
c000c770:	e8 5b 31 01 00       	call   c001f8d0 <__umoddi3>
c000c775:	83 c4 10             	add    esp,0x10
c000c778:	99                   	cdq    
c000c779:	f7 ff                	idiv   edi
c000c77b:	bf 3c 00 00 00       	mov    edi,0x3c
c000c780:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c783:	89 d0                	mov    eax,edx
c000c785:	99                   	cdq    
c000c786:	f7 ff                	idiv   edi
c000c788:	85 db                	test   ebx,ebx
c000c78a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c78d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c790:	79 11                	jns    c000c7a3 <secondsToDatetime(unsigned long long)+0x6f>
c000c792:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c796:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c79c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7a1:	eb 07                	jmp    c000c7aa <secondsToDatetime(unsigned long long)+0x76>
c000c7a3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7a8:	89 d8                	mov    eax,ebx
c000c7aa:	99                   	cdq    
c000c7ab:	bf b4 05 00 00       	mov    edi,0x5b4
c000c7b0:	f7 f9                	idiv   ecx
c000c7b2:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c7b7:	31 d2                	xor    edx,edx
c000c7b9:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c7be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c7ca:	01 c3                	add    ebx,eax
c000c7cc:	89 d8                	mov    eax,ebx
c000c7ce:	f7 f1                	div    ecx
c000c7d0:	31 d2                	xor    edx,edx
c000c7d2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c7d5:	89 d8                	mov    eax,ebx
c000c7d7:	f7 f7                	div    edi
c000c7d9:	31 d2                	xor    edx,edx
c000c7db:	29 c1                	sub    ecx,eax
c000c7dd:	89 d8                	mov    eax,ebx
c000c7df:	f7 f5                	div    ebp
c000c7e1:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c7e6:	31 d2                	xor    edx,edx
c000c7e8:	29 c1                	sub    ecx,eax
c000c7ea:	89 c8                	mov    eax,ecx
c000c7ec:	f7 f5                	div    ebp
c000c7ee:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c7f3:	31 d2                	xor    edx,edx
c000c7f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7f9:	89 c8                	mov    eax,ecx
c000c7fb:	f7 f5                	div    ebp
c000c7fd:	31 d2                	xor    edx,edx
c000c7ff:	01 c3                	add    ebx,eax
c000c801:	89 c8                	mov    eax,ecx
c000c803:	f7 f7                	div    edi
c000c805:	bf 99 00 00 00       	mov    edi,0x99
c000c80a:	31 d2                	xor    edx,edx
c000c80c:	29 c3                	sub    ebx,eax
c000c80e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c816:	29 c3                	sub    ebx,eax
c000c818:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c81b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c81e:	83 c1 02             	add    ecx,0x2
c000c821:	89 c8                	mov    eax,ecx
c000c823:	bb 05 00 00 00       	mov    ebx,0x5
c000c828:	f7 f7                	div    edi
c000c82a:	31 d2                	xor    edx,edx
c000c82c:	89 c7                	mov    edi,eax
c000c82e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c834:	83 c0 02             	add    eax,0x2
c000c837:	f7 f3                	div    ebx
c000c839:	89 eb                	mov    ebx,ebp
c000c83b:	29 c3                	sub    ebx,eax
c000c83d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c843:	88 1e                	mov    BYTE PTR [esi],bl
c000c845:	19 c0                	sbb    eax,eax
c000c847:	31 d2                	xor    edx,edx
c000c849:	83 e0 0c             	and    eax,0xc
c000c84c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c850:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c858:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c85c:	83 f9 01             	cmp    ecx,0x1
c000c85f:	0f 96 c2             	setbe  dl
c000c862:	41                   	inc    ecx
c000c863:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c866:	01 d0                	add    eax,edx
c000c868:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c86c:	83 c4 1c             	add    esp,0x1c
c000c86f:	89 f0                	mov    eax,esi
c000c871:	5b                   	pop    ebx
c000c872:	5e                   	pop    esi
c000c873:	5f                   	pop    edi
c000c874:	5d                   	pop    ebp
c000c875:	c2 04 00             	ret    0x4

c000c878 <Clock::timeInDatetimeLocal()>:
c000c878:	53                   	push   ebx
c000c879:	83 ec 14             	sub    esp,0x14
c000c87c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c880:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c884:	e8 85 fc ff ff       	call   c000c50e <Clock::timeInSecondsLocal()>
c000c889:	83 c4 0c             	add    esp,0xc
c000c88c:	52                   	push   edx
c000c88d:	50                   	push   eax
c000c88e:	53                   	push   ebx
c000c88f:	e8 a0 fe ff ff       	call   c000c734 <secondsToDatetime(unsigned long long)>
c000c894:	89 d8                	mov    eax,ebx
c000c896:	83 c4 14             	add    esp,0x14
c000c899:	5b                   	pop    ebx
c000c89a:	c2 04 00             	ret    0x4
c000c89d:	90                   	nop

c000c89e <Device::hibernate()>:
c000c89e:	c3                   	ret    
c000c89f:	90                   	nop

c000c8a0 <Device::wake()>:
c000c8a0:	c3                   	ret    
c000c8a1:	90                   	nop

c000c8a2 <Device::detect()>:
c000c8a2:	c3                   	ret    
c000c8a3:	90                   	nop

c000c8a4 <Device::disableLegacy()>:
c000c8a4:	c3                   	ret    
c000c8a5:	90                   	nop

c000c8a6 <Device::powerSaving(PowerSavingLevel)>:
c000c8a6:	c3                   	ret    
c000c8a7:	90                   	nop

c000c8a8 <DriverlessDevice::close(int, int, void*)>:
c000c8a8:	31 c0                	xor    eax,eax
c000c8aa:	c3                   	ret    
c000c8ab:	90                   	nop

c000c8ac <DriverlessDevice::detect()>:
c000c8ac:	c3                   	ret    
c000c8ad:	90                   	nop

c000c8ae <DriverlessDevice::open(int, int, void*)>:
c000c8ae:	83 ec 18             	sub    esp,0x18
c000c8b1:	68 70 1b 02 c0       	push   0xc0021b70
c000c8b6:	e8 24 4d 00 00       	call   c00115df <KePanic(char const*)>
c000c8bb:	83 c8 ff             	or     eax,0xffffffff
c000c8be:	83 c4 1c             	add    esp,0x1c
c000c8c1:	c3                   	ret    

c000c8c2 <Device::~Device()>:
c000c8c2:	ba d0 1b 02 c0       	mov    edx,0xc0021bd0
c000c8c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8cb:	89 10                	mov    DWORD PTR [eax],edx
c000c8cd:	90                   	nop
c000c8ce:	c3                   	ret    
c000c8cf:	90                   	nop

c000c8d0 <Device::~Device()>:
c000c8d0:	83 ec 0c             	sub    esp,0xc
c000c8d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c8d7:	e8 e6 ff ff ff       	call   c000c8c2 <Device::~Device()>
c000c8dc:	83 c4 04             	add    esp,0x4
c000c8df:	83 ec 08             	sub    esp,0x8
c000c8e2:	68 58 01 00 00       	push   0x158
c000c8e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8eb:	e8 3c df ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000c8f0:	83 c4 10             	add    esp,0x10
c000c8f3:	83 c4 0c             	add    esp,0xc
c000c8f6:	c3                   	ret    
c000c8f7:	90                   	nop

c000c8f8 <Device::findAndLoadDriver()>:
c000c8f8:	c7 44 24 04 8e 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b8e
c000c900:	e9 25 e0 ff ff       	jmp    c000a92a <Dbg::kprintf(char const*, ...)>
c000c905:	90                   	nop

c000c906 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c906:	57                   	push   edi
c000c907:	b9 09 00 00 00       	mov    ecx,0x9
c000c90c:	56                   	push   esi
c000c90d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c911:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c915:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c91f:	81 c7 18 01 00 00    	add    edi,0x118
c000c925:	fc                   	cld    
c000c926:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c928:	5e                   	pop    esi
c000c929:	5f                   	pop    edi
c000c92a:	c3                   	ret    
c000c92b:	90                   	nop

c000c92c <Device::preOpenACPI(void*, char*, char*)>:
c000c92c:	57                   	push   edi
c000c92d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c932:	56                   	push   esi
c000c933:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c937:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c93b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c93f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c949:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c94f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c955:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c957:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c95d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c961:	b9 0e 00 00 00       	mov    ecx,0xe
c000c966:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c968:	5e                   	pop    esi
c000c969:	5f                   	pop    edi
c000c96a:	c3                   	ret    
c000c96b:	90                   	nop

c000c96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c96c:	53                   	push   ebx
c000c96d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c971:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c979:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c97d:	0f b6 c0             	movzx  eax,al
c000c980:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c984:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c988:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c98c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c990:	5b                   	pop    ebx
c000c991:	e9 aa 05 00 00       	jmp    c000cf40 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c996 <Device::getParent()>:
c000c996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c99a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c9a0:	c3                   	ret    
c000c9a1:	90                   	nop

c000c9a2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c9a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9aa:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c9af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9b7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9bb:	e9 f7 06 00 00       	jmp    c000d0b7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c9c0 <Device::addChild(Device*)>:
c000c9c0:	53                   	push   ebx
c000c9c1:	83 ec 08             	sub    esp,0x8
c000c9c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9cc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c9d2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c9d8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c9da:	85 d2                	test   edx,edx
c000c9dc:	74 04                	je     c000c9e2 <Device::addChild(Device*)+0x22>
c000c9de:	89 d3                	mov    ebx,edx
c000c9e0:	eb f6                	jmp    c000c9d8 <Device::addChild(Device*)+0x18>
c000c9e2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c9e5:	83 ec 0c             	sub    esp,0xc
c000c9e8:	6a 08                	push   0x8
c000c9ea:	e8 04 b1 ff ff       	call   c0007af3 <malloc>
c000c9ef:	89 03                	mov    DWORD PTR [ebx],eax
c000c9f1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9fe:	83 c4 18             	add    esp,0x18
c000ca01:	5b                   	pop    ebx
c000ca02:	c3                   	ret    
c000ca03:	90                   	nop

c000ca04 <Device::removeAllChildren()>:
c000ca04:	56                   	push   esi
c000ca05:	53                   	push   ebx
c000ca06:	52                   	push   edx
c000ca07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca0b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca11:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca14:	74 17                	je     c000ca2d <Device::removeAllChildren()+0x29>
c000ca16:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca19:	85 c0                	test   eax,eax
c000ca1b:	74 0c                	je     c000ca29 <Device::removeAllChildren()+0x25>
c000ca1d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca1f:	83 ec 0c             	sub    esp,0xc
c000ca22:	50                   	push   eax
c000ca23:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca26:	83 c4 10             	add    esp,0x10
c000ca29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca2b:	eb e4                	jmp    c000ca11 <Device::removeAllChildren()+0xd>
c000ca2d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca39:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca46:	58                   	pop    eax
c000ca47:	5b                   	pop    ebx
c000ca48:	5e                   	pop    esi
c000ca49:	c3                   	ret    

c000ca4a <Device::hibernateAll()>:
c000ca4a:	53                   	push   ebx
c000ca4b:	83 ec 14             	sub    esp,0x14
c000ca4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca52:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca54:	53                   	push   ebx
c000ca55:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca58:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca64:	74 0f                	je     c000ca75 <Device::hibernateAll()+0x2b>
c000ca66:	83 ec 0c             	sub    esp,0xc
c000ca69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca6c:	e8 d9 ff ff ff       	call   c000ca4a <Device::hibernateAll()>
c000ca71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca73:	eb e9                	jmp    c000ca5e <Device::hibernateAll()+0x14>
c000ca75:	83 c4 08             	add    esp,0x8
c000ca78:	5b                   	pop    ebx
c000ca79:	c3                   	ret    

c000ca7a <Device::wakeAll()>:
c000ca7a:	53                   	push   ebx
c000ca7b:	83 ec 14             	sub    esp,0x14
c000ca7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca82:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca84:	53                   	push   ebx
c000ca85:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca88:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca8e:	83 c4 10             	add    esp,0x10
c000ca91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca94:	74 0f                	je     c000caa5 <Device::wakeAll()+0x2b>
c000ca96:	83 ec 0c             	sub    esp,0xc
c000ca99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca9c:	e8 d9 ff ff ff       	call   c000ca7a <Device::wakeAll()>
c000caa1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caa3:	eb e9                	jmp    c000ca8e <Device::wakeAll()+0x14>
c000caa5:	83 c4 08             	add    esp,0x8
c000caa8:	5b                   	pop    ebx
c000caa9:	c3                   	ret    

c000caaa <Device::detectAll()>:
c000caaa:	53                   	push   ebx
c000caab:	83 ec 14             	sub    esp,0x14
c000caae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cab2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cab4:	53                   	push   ebx
c000cab5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000cab8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cabe:	83 c4 10             	add    esp,0x10
c000cac1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cac4:	74 0f                	je     c000cad5 <Device::detectAll()+0x2b>
c000cac6:	83 ec 0c             	sub    esp,0xc
c000cac9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cacc:	e8 d9 ff ff ff       	call   c000caaa <Device::detectAll()>
c000cad1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cad3:	eb e9                	jmp    c000cabe <Device::detectAll()+0x14>
c000cad5:	83 c4 08             	add    esp,0x8
c000cad8:	5b                   	pop    ebx
c000cad9:	c3                   	ret    

c000cada <Device::disableLegacyAll()>:
c000cada:	c3                   	ret    
c000cadb:	90                   	nop

c000cadc <Device::loadDriversForAll()>:
c000cadc:	c3                   	ret    
c000cadd:	90                   	nop

c000cade <Device::closeAll()>:
c000cade:	53                   	push   ebx
c000cadf:	83 ec 08             	sub    esp,0x8
c000cae2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cae8:	6a 00                	push   0x0
c000caea:	6a 00                	push   0x0
c000caec:	6a 00                	push   0x0
c000caee:	53                   	push   ebx
c000caef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000caf2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000caf8:	83 c4 10             	add    esp,0x10
c000cafb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cafe:	74 0f                	je     c000cb0f <Device::closeAll()+0x31>
c000cb00:	83 ec 0c             	sub    esp,0xc
c000cb03:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb06:	e8 d3 ff ff ff       	call   c000cade <Device::closeAll()>
c000cb0b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb0d:	eb e9                	jmp    c000caf8 <Device::closeAll()+0x1a>
c000cb0f:	83 c4 08             	add    esp,0x8
c000cb12:	5b                   	pop    ebx
c000cb13:	c3                   	ret    

c000cb14 <Device::powerSavingAll(PowerSavingLevel)>:
c000cb14:	56                   	push   esi
c000cb15:	53                   	push   ebx
c000cb16:	83 ec 0c             	sub    esp,0xc
c000cb19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb21:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb23:	56                   	push   esi
c000cb24:	53                   	push   ebx
c000cb25:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb2e:	83 c4 10             	add    esp,0x10
c000cb31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb34:	74 0f                	je     c000cb45 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb36:	52                   	push   edx
c000cb37:	52                   	push   edx
c000cb38:	56                   	push   esi
c000cb39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb3c:	e8 d3 ff ff ff       	call   c000cb14 <Device::powerSavingAll(PowerSavingLevel)>
c000cb41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb43:	eb e9                	jmp    c000cb2e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb45:	58                   	pop    eax
c000cb46:	5b                   	pop    ebx
c000cb47:	5e                   	pop    esi
c000cb48:	c3                   	ret    
c000cb49:	90                   	nop

c000cb4a <Device::setName(char const*)>:
c000cb4a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb52:	e9 f9 3a ff ff       	jmp    c0000650 <strcpy>
c000cb57:	90                   	nop

c000cb58 <Device::Device(char const*)>:
c000cb58:	83 ec 1c             	sub    esp,0x1c
c000cb5b:	ba d0 1b 02 c0       	mov    edx,0xc0021bd0
c000cb60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb64:	89 10                	mov    DWORD PTR [eax],edx
c000cb66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb6a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb78:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb86:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cb90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb94:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cb9e:	83 ec 08             	sub    esp,0x8
c000cba1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	e8 9c ff ff ff       	call   c000cb4a <Device::setName(char const*)>
c000cbae:	83 c4 10             	add    esp,0x10
c000cbb1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cbb9:	83 ec 0c             	sub    esp,0xc
c000cbbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbc0:	e8 2e af ff ff       	call   c0007af3 <malloc>
c000cbc5:	83 c4 10             	add    esp,0x10
c000cbc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbd5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cbd9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cbdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbe9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbf3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbf9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc04:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc0f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc1a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc28:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc36:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc44:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc4e:	90                   	nop
c000cc4f:	83 c4 1c             	add    esp,0x1c
c000cc52:	c3                   	ret    
c000cc53:	90                   	nop

c000cc54 <Device::getName()>:
c000cc54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc58:	05 d0 00 00 00       	add    eax,0xd0
c000cc5d:	c3                   	ret    

c000cc5e <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc5e:	83 ec 0c             	sub    esp,0xc
c000cc61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc65:	83 ec 08             	sub    esp,0x8
c000cc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc6c:	50                   	push   eax
c000cc6d:	e8 e6 fe ff ff       	call   c000cb58 <Device::Device(char const*)>
c000cc72:	83 c4 10             	add    esp,0x10
c000cc75:	ba fc 1b 02 c0       	mov    edx,0xc0021bfc
c000cc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc7e:	89 10                	mov    DWORD PTR [eax],edx
c000cc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc84:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cc8e:	90                   	nop
c000cc8f:	83 c4 0c             	add    esp,0xc
c000cc92:	c3                   	ret    
c000cc93:	90                   	nop

c000cc94 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cc94:	57                   	push   edi
c000cc95:	56                   	push   esi
c000cc96:	53                   	push   ebx
c000cc97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc9b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cc9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cca3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cca9:	75 0c                	jne    c000ccb7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ccab:	52                   	push   edx
c000ccac:	52                   	push   edx
c000ccad:	53                   	push   ebx
c000ccae:	56                   	push   esi
c000ccaf:	e8 ce 2f 01 00       	call   c001fc82 <LinkedList<Device>::addElement(Device*)>
c000ccb4:	83 c4 10             	add    esp,0x10
c000ccb7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ccbd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ccc0:	74 12                	je     c000ccd4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ccc2:	50                   	push   eax
c000ccc3:	57                   	push   edi
c000ccc4:	56                   	push   esi
c000ccc5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ccc8:	e8 c7 ff ff ff       	call   c000cc94 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cccd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cccf:	83 c4 10             	add    esp,0x10
c000ccd2:	eb e9                	jmp    c000ccbd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ccd4:	5b                   	pop    ebx
c000ccd5:	5e                   	pop    esi
c000ccd6:	5f                   	pop    edi
c000ccd7:	c3                   	ret    

c000ccd8 <getDevicesOfType(DeviceType)>:
c000ccd8:	53                   	push   ebx
c000ccd9:	83 ec 14             	sub    esp,0x14
c000ccdc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cce0:	53                   	push   ebx
c000cce1:	e8 78 30 01 00       	call   c001fd5e <LinkedList<Device>::LinkedList()>
c000cce6:	83 c4 0c             	add    esp,0xc
c000cce9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cced:	53                   	push   ebx
c000ccee:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000ccf4:	e8 9b ff ff ff       	call   c000cc94 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ccf9:	83 c4 18             	add    esp,0x18
c000ccfc:	89 d8                	mov    eax,ebx
c000ccfe:	5b                   	pop    ebx
c000ccff:	c2 04 00             	ret    0x4
c000cd02:	66 90                	xchg   ax,ax

c000cd04 <HardDiskController::HardDiskController(char const*)>:
c000cd04:	83 ec 0c             	sub    esp,0xc
c000cd07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd0b:	83 ec 08             	sub    esp,0x8
c000cd0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd12:	50                   	push   eax
c000cd13:	e8 40 fe ff ff       	call   c000cb58 <Device::Device(char const*)>
c000cd18:	83 c4 10             	add    esp,0x10
c000cd1b:	ba 28 1c 02 c0       	mov    edx,0xc0021c28
c000cd20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd24:	89 10                	mov    DWORD PTR [eax],edx
c000cd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd2a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd34:	90                   	nop
c000cd35:	83 c4 0c             	add    esp,0xc
c000cd38:	c3                   	ret    
c000cd39:	90                   	nop
c000cd3a:	66 90                	xchg   ax,ax

c000cd3c <HardDiskController::~HardDiskController()>:
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	ba 28 1c 02 c0       	mov    edx,0xc0021c28
c000cd44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd48:	89 10                	mov    DWORD PTR [eax],edx
c000cd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4e:	83 ec 0c             	sub    esp,0xc
c000cd51:	50                   	push   eax
c000cd52:	e8 6b fb ff ff       	call   c000c8c2 <Device::~Device()>
c000cd57:	83 c4 10             	add    esp,0x10
c000cd5a:	90                   	nop
c000cd5b:	83 c4 0c             	add    esp,0xc
c000cd5e:	c3                   	ret    
c000cd5f:	90                   	nop

c000cd60 <HardDiskController::~HardDiskController()>:
c000cd60:	83 ec 0c             	sub    esp,0xc
c000cd63:	83 ec 0c             	sub    esp,0xc
c000cd66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd6a:	e8 cd ff ff ff       	call   c000cd3c <HardDiskController::~HardDiskController()>
c000cd6f:	83 c4 10             	add    esp,0x10
c000cd72:	83 ec 08             	sub    esp,0x8
c000cd75:	68 58 01 00 00       	push   0x158
c000cd7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd7e:	e8 a9 da ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000cd83:	83 c4 10             	add    esp,0x10
c000cd86:	83 c4 0c             	add    esp,0xc
c000cd89:	c3                   	ret    

c000cd8a <PhysicalDisk::eject()>:
c000cd8a:	83 c8 ff             	or     eax,0xffffffff
c000cd8d:	c3                   	ret    

c000cd8e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cd8e:	83 ec 0c             	sub    esp,0xc
c000cd91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd95:	83 ec 08             	sub    esp,0x8
c000cd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9c:	50                   	push   eax
c000cd9d:	e8 b6 fd ff ff       	call   c000cb58 <Device::Device(char const*)>
c000cda2:	83 c4 10             	add    esp,0x10
c000cda5:	ba 54 1c 02 c0       	mov    edx,0xc0021c54
c000cdaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdae:	89 10                	mov    DWORD PTR [eax],edx
c000cdb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cdbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdbf:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdca:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cdd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cddc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cdf0:	90                   	nop
c000cdf1:	83 c4 0c             	add    esp,0xc
c000cdf4:	c3                   	ret    
c000cdf5:	90                   	nop

c000cdf6 <PhysicalDisk::startCache()>:
c000cdf6:	56                   	push   esi
c000cdf7:	53                   	push   ebx
c000cdf8:	83 ec 10             	sub    esp,0x10
c000cdfb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cdff:	6a 44                	push   0x44
c000ce01:	e8 ed ac ff ff       	call   c0007af3 <malloc>
c000ce06:	89 c6                	mov    esi,eax
c000ce08:	58                   	pop    eax
c000ce09:	5a                   	pop    edx
c000ce0a:	53                   	push   ebx
c000ce0b:	56                   	push   esi
c000ce0c:	e8 83 17 00 00       	call   c000e594 <VCache::VCache(PhysicalDisk*)>
c000ce11:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce17:	83 c4 14             	add    esp,0x14
c000ce1a:	5b                   	pop    ebx
c000ce1b:	5e                   	pop    esi
c000ce1c:	c3                   	ret    
c000ce1d:	90                   	nop

c000ce1e <PhysicalDisk::~PhysicalDisk()>:
c000ce1e:	83 ec 0c             	sub    esp,0xc
c000ce21:	ba 54 1c 02 c0       	mov    edx,0xc0021c54
c000ce26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2a:	89 10                	mov    DWORD PTR [eax],edx
c000ce2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce30:	83 ec 0c             	sub    esp,0xc
c000ce33:	50                   	push   eax
c000ce34:	e8 89 fa ff ff       	call   c000c8c2 <Device::~Device()>
c000ce39:	83 c4 10             	add    esp,0x10
c000ce3c:	90                   	nop
c000ce3d:	83 c4 0c             	add    esp,0xc
c000ce40:	c3                   	ret    
c000ce41:	90                   	nop

c000ce42 <PhysicalDisk::~PhysicalDisk()>:
c000ce42:	83 ec 0c             	sub    esp,0xc
c000ce45:	83 ec 0c             	sub    esp,0xc
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	e8 cd ff ff ff       	call   c000ce1e <PhysicalDisk::~PhysicalDisk()>
c000ce51:	83 c4 10             	add    esp,0x10
c000ce54:	83 ec 08             	sub    esp,0x8
c000ce57:	68 6c 01 00 00       	push   0x16c
c000ce5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce60:	e8 c7 d9 ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	83 c4 0c             	add    esp,0xc
c000ce6b:	c3                   	ret    

c000ce6c <int_handler>:
c000ce6c:	55                   	push   ebp
c000ce6d:	57                   	push   edi
c000ce6e:	56                   	push   esi
c000ce6f:	53                   	push   ebx
c000ce70:	83 ec 0c             	sub    esp,0xc
c000ce73:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce7a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce7e:	74 0b                	je     c000ce8b <int_handler+0x1f>
c000ce80:	fa                   	cli    
c000ce81:	f4                   	hlt    
c000ce82:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce89:	75 f5                	jne    c000ce80 <int_handler+0x14>
c000ce8b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ce8e:	8d 46 e0             	lea    eax,[esi-0x20]
c000ce91:	83 f8 17             	cmp    eax,0x17
c000ce94:	76 40                	jbe    c000ced6 <int_handler+0x6a>
c000ce96:	c1 e6 04             	shl    esi,0x4
c000ce99:	31 db                	xor    ebx,ebx
c000ce9b:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000cea1:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cea7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ceab:	85 c0                	test   eax,eax
c000cead:	74 13                	je     c000cec2 <int_handler+0x56>
c000ceaf:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ceb3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000ceb6:	74 2c                	je     c000cee4 <int_handler+0x78>
c000ceb8:	83 ec 08             	sub    esp,0x8
c000cebb:	52                   	push   edx
c000cebc:	57                   	push   edi
c000cebd:	ff d0                	call   eax
c000cebf:	83 c4 10             	add    esp,0x10
c000cec2:	83 c3 01             	add    ebx,0x1
c000cec5:	83 fb 04             	cmp    ebx,0x4
c000cec8:	75 dd                	jne    c000cea7 <int_handler+0x3b>
c000ceca:	83 c4 0c             	add    esp,0xc
c000cecd:	31 c0                	xor    eax,eax
c000cecf:	5b                   	pop    ebx
c000ced0:	31 d2                	xor    edx,edx
c000ced2:	5e                   	pop    esi
c000ced3:	5f                   	pop    edi
c000ced4:	5d                   	pop    ebp
c000ced5:	c3                   	ret    
c000ced6:	83 ec 0c             	sub    esp,0xc
c000ced9:	50                   	push   eax
c000ceda:	e8 df b4 00 00       	call   c00183be <HalEndOfInterrupt(int)>
c000cedf:	83 c4 10             	add    esp,0x10
c000cee2:	eb b2                	jmp    c000ce96 <int_handler+0x2a>
c000cee4:	83 ec 08             	sub    esp,0x8
c000cee7:	52                   	push   edx
c000cee8:	57                   	push   edi
c000cee9:	ff d0                	call   eax
c000ceeb:	83 c4 10             	add    esp,0x10
c000ceee:	83 c4 0c             	add    esp,0xc
c000cef1:	5b                   	pop    ebx
c000cef2:	5e                   	pop    esi
c000cef3:	5f                   	pop    edi
c000cef4:	5d                   	pop    ebp
c000cef5:	c3                   	ret    

c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cef6:	56                   	push   esi
c000cef7:	31 c0                	xor    eax,eax
c000cef9:	53                   	push   ebx
c000cefa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cefe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf02:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf06:	89 ca                	mov    edx,ecx
c000cf08:	c1 e2 04             	shl    edx,0x4
c000cf0b:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf13:	74 17                	je     c000cf2c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf15:	83 c0 01             	add    eax,0x1
c000cf18:	83 f8 04             	cmp    eax,0x4
c000cf1b:	75 ee                	jne    c000cf0b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf1d:	c7 44 24 0c 84 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c84
c000cf25:	5b                   	pop    ebx
c000cf26:	5e                   	pop    esi
c000cf27:	e9 b3 46 00 00       	jmp    c00115df <KePanic(char const*)>
c000cf2c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf2f:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf36:	5b                   	pop    ebx
c000cf37:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf3e:	5e                   	pop    esi
c000cf3f:	c3                   	ret    

c000cf40 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf40:	55                   	push   ebp
c000cf41:	57                   	push   edi
c000cf42:	56                   	push   esi
c000cf43:	53                   	push   ebx
c000cf44:	83 ec 0c             	sub    esp,0xc
c000cf47:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf4d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cf51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf55:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf5c:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cf5f:	74 57                	je     c000cfb8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cf61:	84 c0                	test   al,al
c000cf63:	89 c7                	mov    edi,eax
c000cf65:	74 1d                	je     c000cf84 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cf67:	83 fe 0f             	cmp    esi,0xf
c000cf6a:	0f 8f d9 00 00 00    	jg     c000d049 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cf70:	0f b6 b6 08 38 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc7f8]
c000cf77:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf7f:	d1 ef                	shr    edi,1
c000cf81:	83 e7 01             	and    edi,0x1
c000cf84:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf89:	83 ec 08             	sub    esp,0x8
c000cf8c:	31 db                	xor    ebx,ebx
c000cf8e:	50                   	push   eax
c000cf8f:	68 91 1c 02 c0       	push   0xc0021c91
c000cf94:	e8 91 d9 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000cf99:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf9e:	83 c4 10             	add    esp,0x10
c000cfa1:	85 c0                	test   eax,eax
c000cfa3:	7f 59                	jg     c000cffe <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cfa5:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cfa8:	83 ec 0c             	sub    esp,0xc
c000cfab:	68 a8 1c 02 c0       	push   0xc0021ca8
c000cfb0:	e8 2a 46 00 00       	call   c00115df <KePanic(char const*)>
c000cfb5:	83 c4 10             	add    esp,0x10
c000cfb8:	89 e8                	mov    eax,ebp
c000cfba:	31 d2                	xor    edx,edx
c000cfbc:	c1 e0 04             	shl    eax,0x4
c000cfbf:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cfc6:	85 c9                	test   ecx,ecx
c000cfc8:	0f 84 92 00 00 00    	je     c000d060 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cfce:	83 c2 01             	add    edx,0x1
c000cfd1:	83 fa 04             	cmp    edx,0x4
c000cfd4:	75 e9                	jne    c000cfbf <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cfd6:	83 ec 0c             	sub    esp,0xc
c000cfd9:	68 fc 1c 02 c0       	push   0xc0021cfc
c000cfde:	e8 fc 45 00 00       	call   c00115df <KePanic(char const*)>
c000cfe3:	83 c4 10             	add    esp,0x10
c000cfe6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cfeb:	83 c4 0c             	add    esp,0xc
c000cfee:	5b                   	pop    ebx
c000cfef:	5e                   	pop    esi
c000cff0:	5f                   	pop    edi
c000cff1:	5d                   	pop    ebp
c000cff2:	c3                   	ret    
c000cff3:	83 c3 01             	add    ebx,0x1
c000cff6:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000cffc:	7e a7                	jle    c000cfa5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cffe:	8b 2c 9d e0 d0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f20]
c000d005:	83 ec 08             	sub    esp,0x8
c000d008:	56                   	push   esi
c000d009:	55                   	push   ebp
c000d00a:	e8 99 1b 01 00       	call   c001eba8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d00f:	83 c4 10             	add    esp,0x10
c000d012:	84 c0                	test   al,al
c000d014:	74 dd                	je     c000cff3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000d016:	89 f8                	mov    eax,edi
c000d018:	83 ec 04             	sub    esp,0x4
c000d01b:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d022:	8d 6e 20             	lea    ebp,[esi+0x20]
c000d025:	0f b6 f8             	movzx  edi,al
c000d028:	57                   	push   edi
c000d029:	89 e8                	mov    eax,ebp
c000d02b:	6a 00                	push   0x0
c000d02d:	0f b6 c0             	movzx  eax,al
c000d030:	50                   	push   eax
c000d031:	89 f0                	mov    eax,esi
c000d033:	6a 00                	push   0x0
c000d035:	0f b6 c0             	movzx  eax,al
c000d038:	6a 00                	push   0x0
c000d03a:	50                   	push   eax
c000d03b:	53                   	push   ebx
c000d03c:	e8 d3 1c 01 00       	call   c001ed14 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d041:	83 c4 20             	add    esp,0x20
c000d044:	e9 6f ff ff ff       	jmp    c000cfb8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d049:	83 ec 0c             	sub    esp,0xc
c000d04c:	31 ff                	xor    edi,edi
c000d04e:	68 c4 1c 02 c0       	push   0xc0021cc4
c000d053:	e8 87 45 00 00       	call   c00115df <KePanic(char const*)>
c000d058:	83 c4 10             	add    esp,0x10
c000d05b:	e9 24 ff ff ff       	jmp    c000cf84 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000d060:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000d063:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d067:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d06e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d072:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d079:	83 c4 0c             	add    esp,0xc
c000d07c:	89 f0                	mov    eax,esi
c000d07e:	5b                   	pop    ebx
c000d07f:	5e                   	pop    esi
c000d080:	5f                   	pop    edi
c000d081:	5d                   	pop    ebp
c000d082:	c3                   	ret    

c000d083 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d083:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d087:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d08b:	c1 e0 04             	shl    eax,0x4
c000d08e:	8d 50 10             	lea    edx,[eax+0x10]
c000d091:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d097:	74 08                	je     c000d0a1 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d099:	83 c0 04             	add    eax,0x4
c000d09c:	39 d0                	cmp    eax,edx
c000d09e:	75 f1                	jne    c000d091 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d0a0:	c3                   	ret    
c000d0a1:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0ab:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0b5:	eb e2                	jmp    c000d099 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d0b7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d0b7:	56                   	push   esi
c000d0b8:	53                   	push   ebx
c000d0b9:	83 ec 04             	sub    esp,0x4
c000d0bc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d0c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d0c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d0c9:	74 0e                	je     c000d0d9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d0cb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d0d0:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d0d7:	75 34                	jne    c000d10d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000d0d9:	8d 43 20             	lea    eax,[ebx+0x20]
c000d0dc:	c1 e0 04             	shl    eax,0x4
c000d0df:	8d 50 10             	lea    edx,[eax+0x10]
c000d0e2:	39 b0 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],esi
c000d0e8:	74 0d                	je     c000d0f7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000d0ea:	83 c0 04             	add    eax,0x4
c000d0ed:	39 d0                	cmp    eax,edx
c000d0ef:	75 f1                	jne    c000d0e2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000d0f1:	83 c4 04             	add    esp,0x4
c000d0f4:	5b                   	pop    ebx
c000d0f5:	5e                   	pop    esi
c000d0f6:	c3                   	ret    
c000d0f7:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d101:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d10b:	eb dd                	jmp    c000d0ea <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000d10d:	83 fb 0f             	cmp    ebx,0xf
c000d110:	7f 09                	jg     c000d11b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000d112:	0f b6 9b 08 38 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc7f8]
c000d119:	eb be                	jmp    c000d0d9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d11b:	83 ec 0c             	sub    esp,0xc
c000d11e:	68 b5 1c 02 c0       	push   0xc0021cb5
c000d123:	e8 b7 44 00 00       	call   c00115df <KePanic(char const*)>
c000d128:	83 c4 10             	add    esp,0x10
c000d12b:	eb ac                	jmp    c000d0d9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000d12d <setupINTS()>:
c000d12d:	31 c0                	xor    eax,eax
c000d12f:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d139:	83 c0 10             	add    eax,0x10
c000d13c:	c7 80 10 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bf0],0x0
c000d146:	c7 80 14 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bec],0x0
c000d150:	c7 80 14 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bec],0x0
c000d15a:	c7 80 18 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be8],0x0
c000d164:	c7 80 18 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be8],0x0
c000d16e:	c7 80 1c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be4],0x0
c000d178:	c7 80 1c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be4],0x0
c000d182:	3d 00 10 00 00       	cmp    eax,0x1000
c000d187:	75 a6                	jne    c000d12f <setupINTS()+0x2>
c000d189:	c3                   	ret    

c000d18a <convertLegacyIRQNumber(int)>:
c000d18a:	83 ec 0c             	sub    esp,0xc
c000d18d:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d197:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d19e:	74 0c                	je     c000d1ac <convertLegacyIRQNumber(int)+0x22>
c000d1a0:	83 f8 0f             	cmp    eax,0xf
c000d1a3:	7f 0b                	jg     c000d1b0 <convertLegacyIRQNumber(int)+0x26>
c000d1a5:	0f b6 80 08 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc7f8]
c000d1ac:	83 c4 0c             	add    esp,0xc
c000d1af:	c3                   	ret    
c000d1b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1b4:	83 ec 0c             	sub    esp,0xc
c000d1b7:	68 c4 1c 02 c0       	push   0xc0021cc4
c000d1bc:	e8 1e 44 00 00       	call   c00115df <KePanic(char const*)>
c000d1c1:	83 c4 10             	add    esp,0x10
c000d1c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c8:	83 c4 0c             	add    esp,0xc
c000d1cb:	c3                   	ret    

c000d1cc <startGUI(void*)>:
c000d1cc:	55                   	push   ebp
c000d1cd:	89 e5                	mov    ebp,esp
c000d1cf:	53                   	push   ebx
c000d1d0:	83 ec 04             	sub    esp,0x4
c000d1d3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1d8:	83 e8 01             	sub    eax,0x1
c000d1db:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1e0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1e5:	85 c0                	test   eax,eax
c000d1e7:	75 01                	jne    c000d1ea <startGUI(void*)+0x1e>
c000d1e9:	fb                   	sti    
c000d1ea:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1f0:	83 ec 08             	sub    esp,0x8
c000d1f3:	6a 01                	push   0x1
c000d1f5:	68 21 1d 02 c0       	push   0xc0021d21
c000d1fa:	e8 a4 84 00 00       	call   c00156a3 <Thr::loadDLL(char const*, bool)>
c000d1ff:	83 c4 10             	add    esp,0x10
c000d202:	83 ec 08             	sub    esp,0x8
c000d205:	53                   	push   ebx
c000d206:	50                   	push   eax
c000d207:	e8 d7 86 00 00       	call   c00158e3 <Thr::executeDLL(unsigned long, void*)>
c000d20c:	83 c4 10             	add    esp,0x10
c000d20f:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d215:	83 ec 08             	sub    esp,0x8
c000d218:	6a 01                	push   0x1
c000d21a:	68 3b 1d 02 c0       	push   0xc0021d3b
c000d21f:	e8 7f 84 00 00       	call   c00156a3 <Thr::loadDLL(char const*, bool)>
c000d224:	83 c4 10             	add    esp,0x10
c000d227:	83 ec 08             	sub    esp,0x8
c000d22a:	53                   	push   ebx
c000d22b:	50                   	push   eax
c000d22c:	e8 b2 86 00 00       	call   c00158e3 <Thr::executeDLL(unsigned long, void*)>
c000d231:	83 c4 10             	add    esp,0x10
c000d234:	90                   	nop
c000d235:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d238:	c9                   	leave  
c000d239:	c3                   	ret    

c000d23a <startGUIVESA(void*)>:
c000d23a:	55                   	push   ebp
c000d23b:	89 e5                	mov    ebp,esp
c000d23d:	53                   	push   ebx
c000d23e:	83 ec 04             	sub    esp,0x4
c000d241:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d246:	83 e8 01             	sub    eax,0x1
c000d249:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d24e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d253:	85 c0                	test   eax,eax
c000d255:	75 01                	jne    c000d258 <startGUIVESA(void*)+0x1e>
c000d257:	fb                   	sti    
c000d258:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d25e:	83 ec 08             	sub    esp,0x8
c000d261:	6a 01                	push   0x1
c000d263:	68 59 1d 02 c0       	push   0xc0021d59
c000d268:	e8 36 84 00 00       	call   c00156a3 <Thr::loadDLL(char const*, bool)>
c000d26d:	83 c4 10             	add    esp,0x10
c000d270:	83 ec 08             	sub    esp,0x8
c000d273:	53                   	push   ebx
c000d274:	50                   	push   eax
c000d275:	e8 69 86 00 00       	call   c00158e3 <Thr::executeDLL(unsigned long, void*)>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d283:	83 ec 08             	sub    esp,0x8
c000d286:	6a 01                	push   0x1
c000d288:	68 3b 1d 02 c0       	push   0xc0021d3b
c000d28d:	e8 11 84 00 00       	call   c00156a3 <Thr::loadDLL(char const*, bool)>
c000d292:	83 c4 10             	add    esp,0x10
c000d295:	83 ec 08             	sub    esp,0x8
c000d298:	53                   	push   ebx
c000d299:	50                   	push   eax
c000d29a:	e8 44 86 00 00       	call   c00158e3 <Thr::executeDLL(unsigned long, void*)>
c000d29f:	83 c4 10             	add    esp,0x10
c000d2a2:	90                   	nop
c000d2a3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2a6:	c9                   	leave  
c000d2a7:	c3                   	ret    

c000d2a8 <sendKeyToTerminal(unsigned char)>:
c000d2a8:	55                   	push   ebp
c000d2a9:	89 e5                	mov    ebp,esp
c000d2ab:	83 ec 28             	sub    esp,0x28
c000d2ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2b1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d2b4:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d2b9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d2bd:	83 ec 08             	sub    esp,0x8
c000d2c0:	52                   	push   edx
c000d2c1:	50                   	push   eax
c000d2c2:	e8 15 bb ff ff       	call   c0008ddc <VgaText::receiveKey(unsigned char)>
c000d2c7:	83 c4 10             	add    esp,0x10
c000d2ca:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2ce:	83 f8 0a             	cmp    eax,0xa
c000d2d1:	74 16                	je     c000d2e9 <sendKeyToTerminal(unsigned char)+0x41>
c000d2d3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2d7:	83 f8 03             	cmp    eax,0x3
c000d2da:	74 0d                	je     c000d2e9 <sendKeyToTerminal(unsigned char)+0x41>
c000d2dc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2e0:	83 f8 1c             	cmp    eax,0x1c
c000d2e3:	0f 85 97 00 00 00    	jne    c000d380 <sendKeyToTerminal(unsigned char)+0xd8>
c000d2e9:	fa                   	cli    
c000d2ea:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2ef:	83 c0 01             	add    eax,0x1
c000d2f2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2f7:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2fc:	83 c0 01             	add    eax,0x1
c000d2ff:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d304:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d309:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d30c:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d316:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d31a:	74 1f                	je     c000d33b <sendKeyToTerminal(unsigned char)+0x93>
c000d31c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d31f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d322:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d325:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d328:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d32b:	83 ec 0c             	sub    esp,0xc
c000d32e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d331:	e8 ce 92 00 00       	call   c0016604 <unblockTask(ThreadControlBlock*)>
c000d336:	83 c4 10             	add    esp,0x10
c000d339:	eb db                	jmp    c000d316 <sendKeyToTerminal(unsigned char)+0x6e>
c000d33b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d340:	83 e8 01             	sub    eax,0x1
c000d343:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d348:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d34d:	85 c0                	test   eax,eax
c000d34f:	75 18                	jne    c000d369 <sendKeyToTerminal(unsigned char)+0xc1>
c000d351:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d356:	85 c0                	test   eax,eax
c000d358:	74 0f                	je     c000d369 <sendKeyToTerminal(unsigned char)+0xc1>
c000d35a:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d364:	e8 a3 8d 00 00       	call   c001610c <schedule()>
c000d369:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d36e:	83 e8 01             	sub    eax,0x1
c000d371:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d376:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d37b:	85 c0                	test   eax,eax
c000d37d:	75 01                	jne    c000d380 <sendKeyToTerminal(unsigned char)+0xd8>
c000d37f:	fb                   	sti    
c000d380:	90                   	nop
c000d381:	c9                   	leave  
c000d382:	c3                   	ret    

c000d383 <sendKeyboardToken(KeyboardToken)>:
c000d383:	55                   	push   ebp
c000d384:	89 e5                	mov    ebp,esp
c000d386:	83 ec 18             	sub    esp,0x18
c000d389:	e8 a1 42 00 00       	call   c001162f <KeUserIOReceived()>
c000d38e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d394:	0f b7 c0             	movzx  eax,ax
c000d397:	83 f2 01             	xor    edx,0x1
c000d39a:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d3a0:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d3a5:	85 c0                	test   eax,eax
c000d3a7:	74 24                	je     c000d3cd <sendKeyboardToken(KeyboardToken)+0x4a>
c000d3a9:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d3af:	83 ec 04             	sub    esp,0x4
c000d3b2:	68 40 b4 02 c0       	push   0xc002b440
c000d3b7:	83 ec 08             	sub    esp,0x8
c000d3ba:	89 e0                	mov    eax,esp
c000d3bc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d3bf:	89 08                	mov    DWORD PTR [eax],ecx
c000d3c1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d3c4:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d3c8:	ff d2                	call   edx
c000d3ca:	83 c4 10             	add    esp,0x10
c000d3cd:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d3d1:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d3d4:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3d9:	0f b6 d2             	movzx  edx,dl
c000d3dc:	0f b6 c0             	movzx  eax,al
c000d3df:	39 c2                	cmp    edx,eax
c000d3e1:	74 1c                	je     c000d3ff <sendKeyboardToken(KeyboardToken)+0x7c>
c000d3e3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d3e6:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d3eb:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3f0:	0f b6 c0             	movzx  eax,al
c000d3f3:	83 ec 0c             	sub    esp,0xc
c000d3f6:	50                   	push   eax
c000d3f7:	e8 3c b1 ff ff       	call   c0008538 <setTerminalScrollLock(bool)>
c000d3fc:	83 c4 10             	add    esp,0x10
c000d3ff:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d402:	0f b6 c0             	movzx  eax,al
c000d405:	85 c0                	test   eax,eax
c000d407:	0f 84 da 00 00 00    	je     c000d4e7 <sendKeyboardToken(KeyboardToken)+0x164>
c000d40d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d410:	0f b7 c0             	movzx  eax,ax
c000d413:	3d 18 03 00 00       	cmp    eax,0x318
c000d418:	75 06                	jne    c000d420 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d41a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d420:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d423:	0f b7 c0             	movzx  eax,ax
c000d426:	3d 19 03 00 00       	cmp    eax,0x319
c000d42b:	75 06                	jne    c000d433 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d42d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d436:	0f b7 c0             	movzx  eax,ax
c000d439:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d43e:	75 06                	jne    c000d446 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d440:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d449:	0f b7 c0             	movzx  eax,ax
c000d44c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d451:	75 06                	jne    c000d459 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d453:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d45c:	0f b7 c0             	movzx  eax,ax
c000d45f:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d464:	75 06                	jne    c000d46c <sendKeyboardToken(KeyboardToken)+0xe9>
c000d466:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d46c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d46f:	0f b7 c0             	movzx  eax,ax
c000d472:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d477:	75 06                	jne    c000d47f <sendKeyboardToken(KeyboardToken)+0xfc>
c000d479:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d47f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d482:	0f b7 c0             	movzx  eax,ax
c000d485:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d48a:	75 06                	jne    c000d492 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d48c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d495:	0f b7 c0             	movzx  eax,ax
c000d498:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d49d:	75 06                	jne    c000d4a5 <sendKeyboardToken(KeyboardToken)+0x122>
c000d49f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d4a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a8:	0f b7 c0             	movzx  eax,ax
c000d4ab:	3d 20 03 00 00       	cmp    eax,0x320
c000d4b0:	75 06                	jne    c000d4b8 <sendKeyboardToken(KeyboardToken)+0x135>
c000d4b2:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d4b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4bb:	0f b7 c0             	movzx  eax,ax
c000d4be:	3d 21 03 00 00       	cmp    eax,0x321
c000d4c3:	75 06                	jne    c000d4cb <sendKeyboardToken(KeyboardToken)+0x148>
c000d4c5:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d4cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ce:	0f b7 c0             	movzx  eax,ax
c000d4d1:	3d 22 03 00 00       	cmp    eax,0x322
c000d4d6:	0f 85 f1 00 00 00    	jne    c000d5cd <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4dc:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d4e2:	e9 e6 00 00 00       	jmp    c000d5cd <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ea:	0f b7 c0             	movzx  eax,ax
c000d4ed:	3d 18 03 00 00       	cmp    eax,0x318
c000d4f2:	75 0a                	jne    c000d4fe <sendKeyboardToken(KeyboardToken)+0x17b>
c000d4f4:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d4fa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d501:	0f b7 c0             	movzx  eax,ax
c000d504:	3d 19 03 00 00       	cmp    eax,0x319
c000d509:	75 0a                	jne    c000d515 <sendKeyboardToken(KeyboardToken)+0x192>
c000d50b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d511:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d518:	0f b7 c0             	movzx  eax,ax
c000d51b:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d520:	75 0a                	jne    c000d52c <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d522:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d528:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d52c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d52f:	0f b7 c0             	movzx  eax,ax
c000d532:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d537:	75 0a                	jne    c000d543 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d539:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d53f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d546:	0f b7 c0             	movzx  eax,ax
c000d549:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d54e:	75 0a                	jne    c000d55a <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d550:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d556:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d55a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d55d:	0f b7 c0             	movzx  eax,ax
c000d560:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d565:	75 0a                	jne    c000d571 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d567:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d56d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d574:	0f b7 c0             	movzx  eax,ax
c000d577:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d57c:	75 0a                	jne    c000d588 <sendKeyboardToken(KeyboardToken)+0x205>
c000d57e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d584:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58b:	0f b7 c0             	movzx  eax,ax
c000d58e:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d593:	75 0a                	jne    c000d59f <sendKeyboardToken(KeyboardToken)+0x21c>
c000d595:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d59b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d59f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a2:	0f b7 c0             	movzx  eax,ax
c000d5a5:	3d 20 03 00 00       	cmp    eax,0x320
c000d5aa:	75 0a                	jne    c000d5b6 <sendKeyboardToken(KeyboardToken)+0x233>
c000d5ac:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d5b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b9:	0f b7 c0             	movzx  eax,ax
c000d5bc:	3d 21 03 00 00       	cmp    eax,0x321
c000d5c1:	75 0a                	jne    c000d5cd <sendKeyboardToken(KeyboardToken)+0x24a>
c000d5c3:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d5c9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d0:	0f b7 c0             	movzx  eax,ax
c000d5d3:	3d 00 02 00 00       	cmp    eax,0x200
c000d5d8:	75 2f                	jne    c000d609 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5da:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5df:	83 f0 01             	xor    eax,0x1
c000d5e2:	0f b6 c0             	movzx  eax,al
c000d5e5:	85 c0                	test   eax,eax
c000d5e7:	74 20                	je     c000d609 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5e9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5ee:	6a 01                	push   0x1
c000d5f0:	6a 00                	push   0x0
c000d5f2:	68 cc d1 00 c0       	push   0xc000d1cc
c000d5f7:	50                   	push   eax
c000d5f8:	e8 c3 88 00 00       	call   c0015ec0 <Process::createThread(void (*)(void*), void*, int)>
c000d5fd:	83 c4 10             	add    esp,0x10
c000d600:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d607:	eb 3a                	jmp    c000d643 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d60c:	0f b7 c0             	movzx  eax,ax
c000d60f:	3d 01 02 00 00       	cmp    eax,0x201
c000d614:	75 2d                	jne    c000d643 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d616:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d61b:	83 f0 01             	xor    eax,0x1
c000d61e:	0f b6 c0             	movzx  eax,al
c000d621:	85 c0                	test   eax,eax
c000d623:	74 1e                	je     c000d643 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d625:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d62a:	6a 01                	push   0x1
c000d62c:	6a 00                	push   0x0
c000d62e:	68 3a d2 00 c0       	push   0xc000d23a
c000d633:	50                   	push   eax
c000d634:	e8 87 88 00 00       	call   c0015ec0 <Process::createThread(void (*)(void*), void*, int)>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d646:	0f b7 c0             	movzx  eax,ax
c000d649:	3d 25 03 00 00       	cmp    eax,0x325
c000d64e:	75 06                	jne    c000d656 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d650:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d659:	0f b7 c0             	movzx  eax,ax
c000d65c:	3d 24 03 00 00       	cmp    eax,0x324
c000d661:	75 06                	jne    c000d669 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d663:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d66c:	0f b7 c0             	movzx  eax,ax
c000d66f:	3d 23 03 00 00       	cmp    eax,0x323
c000d674:	75 06                	jne    c000d67c <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d676:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d67c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d67f:	0f b7 c0             	movzx  eax,ax
c000d682:	3d 26 03 00 00       	cmp    eax,0x326
c000d687:	75 06                	jne    c000d68f <sendKeyboardToken(KeyboardToken)+0x30c>
c000d689:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d68f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d692:	0f b7 c0             	movzx  eax,ax
c000d695:	3d 27 03 00 00       	cmp    eax,0x327
c000d69a:	75 06                	jne    c000d6a2 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d69c:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d6a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6a5:	0f b7 c0             	movzx  eax,ax
c000d6a8:	3d 22 03 00 00       	cmp    eax,0x322
c000d6ad:	75 06                	jne    c000d6b5 <sendKeyboardToken(KeyboardToken)+0x332>
c000d6af:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d6b5:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d6b9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d6bc:	83 f0 01             	xor    eax,0x1
c000d6bf:	0f b6 c0             	movzx  eax,al
c000d6c2:	85 c0                	test   eax,eax
c000d6c4:	74 7c                	je     c000d742 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d6c6:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d6cb:	0f b6 c0             	movzx  eax,al
c000d6ce:	85 c0                	test   eax,eax
c000d6d0:	74 43                	je     c000d715 <sendKeyboardToken(KeyboardToken)+0x392>
c000d6d2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6d6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d6da:	85 c0                	test   eax,eax
c000d6dc:	74 2b                	je     c000d709 <sendKeyboardToken(KeyboardToken)+0x386>
c000d6de:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d6e4:	89 d0                	mov    eax,edx
c000d6e6:	c1 e0 02             	shl    eax,0x2
c000d6e9:	01 d0                	add    eax,edx
c000d6eb:	d1 e0                	shl    eax,1
c000d6ed:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f5:	0f b7 c0             	movzx  eax,ax
c000d6f8:	8d 50 d0             	lea    edx,[eax-0x30]
c000d6fb:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d700:	01 d0                	add    eax,edx
c000d702:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d707:	eb 71                	jmp    c000d77a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d709:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d713:	eb 65                	jmp    c000d77a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d715:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d71a:	85 c0                	test   eax,eax
c000d71c:	74 18                	je     c000d736 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d71e:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d723:	0f b6 c0             	movzx  eax,al
c000d726:	83 ec 0c             	sub    esp,0xc
c000d729:	50                   	push   eax
c000d72a:	e8 79 fb ff ff       	call   c000d2a8 <sendKeyToTerminal(unsigned char)>
c000d72f:	83 c4 10             	add    esp,0x10
c000d732:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d736:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d740:	eb 38                	jmp    c000d77a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d745:	0f b7 c0             	movzx  eax,ax
c000d748:	3d 01 01 00 00       	cmp    eax,0x101
c000d74d:	75 2b                	jne    c000d77a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d74f:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d754:	85 c0                	test   eax,eax
c000d756:	74 18                	je     c000d770 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d758:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d75d:	0f b6 c0             	movzx  eax,al
c000d760:	83 ec 0c             	sub    esp,0xc
c000d763:	50                   	push   eax
c000d764:	e8 3f fb ff ff       	call   c000d2a8 <sendKeyToTerminal(unsigned char)>
c000d769:	83 c4 10             	add    esp,0x10
c000d76c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d770:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d77a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d77d:	83 f0 01             	xor    eax,0x1
c000d780:	0f b6 c0             	movzx  eax,al
c000d783:	85 c0                	test   eax,eax
c000d785:	74 5a                	je     c000d7e1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d787:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d78a:	83 f0 01             	xor    eax,0x1
c000d78d:	0f b6 c0             	movzx  eax,al
c000d790:	85 c0                	test   eax,eax
c000d792:	74 4d                	je     c000d7e1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d794:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d799:	83 f0 01             	xor    eax,0x1
c000d79c:	0f b6 c0             	movzx  eax,al
c000d79f:	85 c0                	test   eax,eax
c000d7a1:	74 3e                	je     c000d7e1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a6:	0f b7 c0             	movzx  eax,ax
c000d7a9:	83 f8 1f             	cmp    eax,0x1f
c000d7ac:	76 0b                	jbe    c000d7b9 <sendKeyboardToken(KeyboardToken)+0x436>
c000d7ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b1:	0f b7 c0             	movzx  eax,ax
c000d7b4:	83 f8 7e             	cmp    eax,0x7e
c000d7b7:	76 16                	jbe    c000d7cf <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7bc:	0f b7 c0             	movzx  eax,ax
c000d7bf:	83 f8 0a             	cmp    eax,0xa
c000d7c2:	74 0b                	je     c000d7cf <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c7:	0f b7 c0             	movzx  eax,ax
c000d7ca:	83 f8 08             	cmp    eax,0x8
c000d7cd:	75 12                	jne    c000d7e1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d2:	0f b6 c0             	movzx  eax,al
c000d7d5:	83 ec 0c             	sub    esp,0xc
c000d7d8:	50                   	push   eax
c000d7d9:	e8 ca fa ff ff       	call   c000d2a8 <sendKeyToTerminal(unsigned char)>
c000d7de:	83 c4 10             	add    esp,0x10
c000d7e1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7e4:	83 f0 01             	xor    eax,0x1
c000d7e7:	0f b6 c0             	movzx  eax,al
c000d7ea:	85 c0                	test   eax,eax
c000d7ec:	74 5d                	je     c000d84b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7ee:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7f1:	83 f0 01             	xor    eax,0x1
c000d7f4:	0f b6 c0             	movzx  eax,al
c000d7f7:	85 c0                	test   eax,eax
c000d7f9:	74 50                	je     c000d84b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7fb:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d800:	0f b6 c0             	movzx  eax,al
c000d803:	85 c0                	test   eax,eax
c000d805:	74 44                	je     c000d84b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d80a:	0f b7 c0             	movzx  eax,ax
c000d80d:	83 f8 3f             	cmp    eax,0x3f
c000d810:	76 39                	jbe    c000d84b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d815:	0f b7 c0             	movzx  eax,ax
c000d818:	83 f8 7f             	cmp    eax,0x7f
c000d81b:	77 2e                	ja     c000d84b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d81d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d820:	88 c2                	mov    dl,al
c000d822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d825:	0f b7 c0             	movzx  eax,ax
c000d828:	83 f8 5f             	cmp    eax,0x5f
c000d82b:	76 04                	jbe    c000d831 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d82d:	b0 20                	mov    al,0x20
c000d82f:	eb 02                	jmp    c000d833 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d831:	b0 00                	mov    al,0x0
c000d833:	89 d1                	mov    ecx,edx
c000d835:	29 c1                	sub    ecx,eax
c000d837:	89 c8                	mov    eax,ecx
c000d839:	83 e8 40             	sub    eax,0x40
c000d83c:	0f b6 c0             	movzx  eax,al
c000d83f:	83 ec 0c             	sub    esp,0xc
c000d842:	50                   	push   eax
c000d843:	e8 60 fa ff ff       	call   c000d2a8 <sendKeyToTerminal(unsigned char)>
c000d848:	83 c4 10             	add    esp,0x10
c000d84b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d84e:	0f b7 c0             	movzx  eax,ax
c000d851:	3d 00 03 00 00       	cmp    eax,0x300
c000d856:	75 12                	jne    c000d86a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d858:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d85b:	83 f0 01             	xor    eax,0x1
c000d85e:	0f b6 c0             	movzx  eax,al
c000d861:	85 c0                	test   eax,eax
c000d863:	74 05                	je     c000d86a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d865:	e8 cf ac ff ff       	call   c0008539 <doTerminalCycle()>
c000d86a:	90                   	nop
c000d86b:	c9                   	leave  
c000d86c:	c3                   	ret    

c000d86d <clearInternalKeybuffer(VgaText*)>:
c000d86d:	55                   	push   ebp
c000d86e:	89 e5                	mov    ebp,esp
c000d870:	83 ec 08             	sub    esp,0x8
c000d873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d876:	05 02 01 00 00       	add    eax,0x102
c000d87b:	83 ec 0c             	sub    esp,0xc
c000d87e:	50                   	push   eax
c000d87f:	e8 fc 2c ff ff       	call   c0000580 <strlen>
c000d884:	83 c4 10             	add    esp,0x10
c000d887:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d88a:	81 c2 02 01 00 00    	add    edx,0x102
c000d890:	83 ec 04             	sub    esp,0x4
c000d893:	50                   	push   eax
c000d894:	6a 00                	push   0x0
c000d896:	52                   	push   edx
c000d897:	e8 54 2c ff ff       	call   c00004f0 <memset>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	90                   	nop
c000d8a0:	c9                   	leave  
c000d8a1:	c3                   	ret    

c000d8a2 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d8a2:	55                   	push   ebp
c000d8a3:	89 e5                	mov    ebp,esp
c000d8a5:	83 ec 18             	sub    esp,0x18
c000d8a8:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d8ad:	85 c0                	test   eax,eax
c000d8af:	74 2a                	je     c000d8db <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d8b1:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d8b7:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d8bd:	83 ec 04             	sub    esp,0x4
c000d8c0:	68 40 b4 02 c0       	push   0xc002b440
c000d8c5:	83 ec 08             	sub    esp,0x8
c000d8c8:	89 e0                	mov    eax,esp
c000d8ca:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d8cd:	89 08                	mov    DWORD PTR [eax],ecx
c000d8cf:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d8d2:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d8d6:	ff d2                	call   edx
c000d8d8:	83 c4 10             	add    esp,0x10
c000d8db:	fb                   	sti    
c000d8dc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d8e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d8e7:	0f 84 0d 01 00 00    	je     c000d9fa <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d8ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8f0:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d8f6:	0f be c0             	movsx  eax,al
c000d8f9:	85 c0                	test   eax,eax
c000d8fb:	75 2c                	jne    c000d929 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d8fd:	fa                   	cli    
c000d8fe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d903:	83 c0 01             	add    eax,0x1
c000d906:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d90b:	e8 fc 87 00 00       	call   c001610c <schedule()>
c000d910:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d915:	83 e8 01             	sub    eax,0x1
c000d918:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d91d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d922:	85 c0                	test   eax,eax
c000d924:	75 c7                	jne    c000d8ed <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d926:	fb                   	sti    
c000d927:	eb c4                	jmp    c000d8ed <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d929:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d92c:	8d 50 01             	lea    edx,[eax+0x1]
c000d92f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d932:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d935:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d93b:	88 10                	mov    BYTE PTR [eax],dl
c000d93d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d940:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d946:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d949:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d94d:	83 f8 03             	cmp    eax,0x3
c000d950:	75 1e                	jne    c000d970 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d952:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d957:	8b 00                	mov    eax,DWORD PTR [eax]
c000d959:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d95c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d962:	83 ec 08             	sub    esp,0x8
c000d965:	6a 02                	push   0x2
c000d967:	50                   	push   eax
c000d968:	e8 0e 41 00 00       	call   c0011a7b <KeRaiseSignal(SigHandlerBlock*, int)>
c000d96d:	83 c4 10             	add    esp,0x10
c000d970:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d974:	83 f8 1c             	cmp    eax,0x1c
c000d977:	75 1e                	jne    c000d997 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d979:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d97e:	8b 00                	mov    eax,DWORD PTR [eax]
c000d980:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d983:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d989:	83 ec 08             	sub    esp,0x8
c000d98c:	6a 09                	push   0x9
c000d98e:	50                   	push   eax
c000d98f:	e8 e7 40 00 00       	call   c0011a7b <KeRaiseSignal(SigHandlerBlock*, int)>
c000d994:	83 c4 10             	add    esp,0x10
c000d997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d99a:	05 02 01 00 00       	add    eax,0x102
c000d99f:	83 ec 0c             	sub    esp,0xc
c000d9a2:	50                   	push   eax
c000d9a3:	e8 d8 2b ff ff       	call   c0000580 <strlen>
c000d9a8:	83 c4 10             	add    esp,0x10
c000d9ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9ae:	81 c2 02 01 00 00    	add    edx,0x102
c000d9b4:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d9b7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9ba:	81 c2 02 01 00 00    	add    edx,0x102
c000d9c0:	83 ec 04             	sub    esp,0x4
c000d9c3:	50                   	push   eax
c000d9c4:	51                   	push   ecx
c000d9c5:	52                   	push   edx
c000d9c6:	e8 05 2a ff ff       	call   c00003d0 <memmove>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d9d2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d9d6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9da:	83 f8 0a             	cmp    eax,0xa
c000d9dd:	74 16                	je     c000d9f5 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9df:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9e3:	83 f8 03             	cmp    eax,0x3
c000d9e6:	74 0d                	je     c000d9f5 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9e8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9ec:	83 f8 1c             	cmp    eax,0x1c
c000d9ef:	0f 85 ee fe ff ff    	jne    c000d8e3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d9f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9f8:	eb 03                	jmp    c000d9fd <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d9fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9fd:	c9                   	leave  
c000d9fe:	c3                   	ret    
c000d9ff:	90                   	nop

c000da00 <Keyboard::Keyboard(char const*)>:
c000da00:	83 ec 0c             	sub    esp,0xc
c000da03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da07:	83 ec 08             	sub    esp,0x8
c000da0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da0e:	50                   	push   eax
c000da0f:	e8 44 f1 ff ff       	call   c000cb58 <Device::Device(char const*)>
c000da14:	83 c4 10             	add    esp,0x10
c000da17:	ba 7c 1d 02 c0       	mov    edx,0xc0021d7c
c000da1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da20:	89 10                	mov    DWORD PTR [eax],edx
c000da22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da26:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da30:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da37:	90                   	nop
c000da38:	83 c4 0c             	add    esp,0xc
c000da3b:	c3                   	ret    

c000da3c <Keyboard::~Keyboard()>:
c000da3c:	83 ec 0c             	sub    esp,0xc
c000da3f:	ba 7c 1d 02 c0       	mov    edx,0xc0021d7c
c000da44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da48:	89 10                	mov    DWORD PTR [eax],edx
c000da4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da4e:	83 ec 0c             	sub    esp,0xc
c000da51:	50                   	push   eax
c000da52:	e8 6b ee ff ff       	call   c000c8c2 <Device::~Device()>
c000da57:	83 c4 10             	add    esp,0x10
c000da5a:	90                   	nop
c000da5b:	83 c4 0c             	add    esp,0xc
c000da5e:	c3                   	ret    
c000da5f:	90                   	nop

c000da60 <Keyboard::~Keyboard()>:
c000da60:	83 ec 0c             	sub    esp,0xc
c000da63:	83 ec 0c             	sub    esp,0xc
c000da66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6a:	e8 cd ff ff ff       	call   c000da3c <Keyboard::~Keyboard()>
c000da6f:	83 c4 10             	add    esp,0x10
c000da72:	83 ec 08             	sub    esp,0x8
c000da75:	68 5c 01 00 00       	push   0x15c
c000da7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da7e:	e8 a9 cd ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000da83:	83 c4 10             	add    esp,0x10
c000da86:	83 c4 0c             	add    esp,0xc
c000da89:	c3                   	ret    

c000da8a <LogicalDisk::close(int, int, void*)>:
c000da8a:	83 c8 ff             	or     eax,0xffffffff
c000da8d:	c3                   	ret    

c000da8e <LogicalDisk::~LogicalDisk()>:
c000da8e:	83 ec 0c             	sub    esp,0xc
c000da91:	ba f4 1d 02 c0       	mov    edx,0xc0021df4
c000da96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da9a:	89 10                	mov    DWORD PTR [eax],edx
c000da9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa0:	83 ec 0c             	sub    esp,0xc
c000daa3:	50                   	push   eax
c000daa4:	e8 19 ee ff ff       	call   c000c8c2 <Device::~Device()>
c000daa9:	83 c4 10             	add    esp,0x10
c000daac:	90                   	nop
c000daad:	83 c4 0c             	add    esp,0xc
c000dab0:	c3                   	ret    
c000dab1:	90                   	nop

c000dab2 <LogicalDisk::~LogicalDisk()>:
c000dab2:	83 ec 0c             	sub    esp,0xc
c000dab5:	83 ec 0c             	sub    esp,0xc
c000dab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dabc:	e8 cd ff ff ff       	call   c000da8e <LogicalDisk::~LogicalDisk()>
c000dac1:	83 c4 10             	add    esp,0x10
c000dac4:	83 ec 08             	sub    esp,0x8
c000dac7:	68 78 01 00 00       	push   0x178
c000dacc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dad0:	e8 57 cd ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000dad5:	83 c4 10             	add    esp,0x10
c000dad8:	83 c4 0c             	add    esp,0xc
c000dadb:	c3                   	ret    

c000dadc <LogicalDisk::open(int, int, void*)>:
c000dadc:	83 ec 18             	sub    esp,0x18
c000dadf:	68 a8 1d 02 c0       	push   0xc0021da8
c000dae4:	e8 f6 3a 00 00       	call   c00115df <KePanic(char const*)>
c000dae9:	83 c8 ff             	or     eax,0xffffffff
c000daec:	83 c4 1c             	add    esp,0x1c
c000daef:	c3                   	ret    

c000daf0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000daf0:	53                   	push   ebx
c000daf1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000daf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000daf9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dafd:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db03:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db09:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db0f:	77 10                	ja     c000db21 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db11:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db17:	89 d3                	mov    ebx,edx
c000db19:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db1f:	72 05                	jb     c000db26 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db21:	83 c8 ff             	or     eax,0xffffffff
c000db24:	89 c2                	mov    edx,eax
c000db26:	5b                   	pop    ebx
c000db27:	c3                   	ret    

c000db28 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db28:	56                   	push   esi
c000db29:	83 c8 ff             	or     eax,0xffffffff
c000db2c:	53                   	push   ebx
c000db2d:	89 c2                	mov    edx,eax
c000db2f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db33:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db37:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db3b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db41:	77 27                	ja     c000db6a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db43:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db49:	89 d8                	mov    eax,ebx
c000db4b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db51:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db56:	89 c2                	mov    edx,eax
c000db58:	73 10                	jae    c000db6a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db5a:	89 c8                	mov    eax,ecx
c000db5c:	89 da                	mov    edx,ebx
c000db5e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db64:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db6a:	5b                   	pop    ebx
c000db6b:	5e                   	pop    esi
c000db6c:	c3                   	ret    
c000db6d:	90                   	nop

c000db6e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db6e:	83 ec 1c             	sub    esp,0x1c
c000db71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db81:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db85:	89 04 24             	mov    DWORD PTR [esp],eax
c000db88:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db94:	83 ec 08             	sub    esp,0x8
c000db97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db9b:	50                   	push   eax
c000db9c:	e8 b7 ef ff ff       	call   c000cb58 <Device::Device(char const*)>
c000dba1:	83 c4 10             	add    esp,0x10
c000dba4:	ba f4 1d 02 c0       	mov    edx,0xc0021df4
c000dba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbad:	89 10                	mov    DWORD PTR [eax],edx
c000dbaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbb3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbbe:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dbc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd4:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dbde:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbe2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbe6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dbea:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dbf0:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dbf6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbfa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dbfd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc01:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc07:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc15:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc1f:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc29:	90                   	nop
c000dc2a:	83 c4 1c             	add    esp,0x1c
c000dc2d:	c3                   	ret    

c000dc2e <LogicalDisk::assignDriveLetter()>:
c000dc2e:	55                   	push   ebp
c000dc2f:	57                   	push   edi
c000dc30:	56                   	push   esi
c000dc31:	53                   	push   ebx
c000dc32:	83 ec 14             	sub    esp,0x14
c000dc35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc39:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc3f:	b0 41                	mov    al,0x41
c000dc41:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc47:	84 d2                	test   dl,dl
c000dc49:	75 02                	jne    c000dc4d <LogicalDisk::assignDriveLetter()+0x1f>
c000dc4b:	b0 43                	mov    al,0x43
c000dc4d:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc53:	0f b6 ca             	movzx  ecx,dl
c000dc56:	0f be e8             	movsx  ebp,al
c000dc59:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc61:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc67:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc6b:	3c 43                	cmp    al,0x43
c000dc6d:	75 10                	jne    c000dc7f <LogicalDisk::assignDriveLetter()+0x51>
c000dc6f:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc76:	75 5a                	jne    c000dcd2 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc78:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc7d:	75 53                	jne    c000dcd2 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc7f:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc82:	ba 01 00 00 00       	mov    edx,0x1
c000dc87:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc8a:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dc8d:	d3 e2                	shl    edx,cl
c000dc8f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc93:	89 d7                	mov    edi,edx
c000dc95:	89 d6                	mov    esi,edx
c000dc97:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dc9b:	c1 ff 1f             	sar    edi,0x1f
c000dc9e:	21 f9                	and    ecx,edi
c000dca0:	09 d1                	or     ecx,edx
c000dca2:	75 2e                	jne    c000dcd2 <LogicalDisk::assignDriveLetter()+0xa4>
c000dca4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dca8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dcac:	09 f2                	or     edx,esi
c000dcae:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dcb1:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dcb7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcbb:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dcc1:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dcc8:	09 fa                	or     edx,edi
c000dcca:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dcd0:	eb 0d                	jmp    c000dcdf <LogicalDisk::assignDriveLetter()+0xb1>
c000dcd2:	8d 50 01             	lea    edx,[eax+0x1]
c000dcd5:	45                   	inc    ebp
c000dcd6:	80 fa 5b             	cmp    dl,0x5b
c000dcd9:	88 d0                	mov    al,dl
c000dcdb:	75 8e                	jne    c000dc6b <LogicalDisk::assignDriveLetter()+0x3d>
c000dcdd:	31 c0                	xor    eax,eax
c000dcdf:	83 c4 14             	add    esp,0x14
c000dce2:	5b                   	pop    ebx
c000dce3:	5e                   	pop    esi
c000dce4:	5f                   	pop    edi
c000dce5:	5d                   	pop    ebp
c000dce6:	c3                   	ret    
c000dce7:	90                   	nop

c000dce8 <LogicalDisk::mount()>:
c000dce8:	56                   	push   esi
c000dce9:	53                   	push   ebx
c000dcea:	53                   	push   ebx
c000dceb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dcef:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dcf5:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dcff:	85 db                	test   ebx,ebx
c000dd01:	74 27                	je     c000dd2a <LogicalDisk::mount()+0x42>
c000dd03:	51                   	push   ecx
c000dd04:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd0b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd0d:	83 e8 41             	sub    eax,0x41
c000dd10:	50                   	push   eax
c000dd11:	56                   	push   esi
c000dd12:	53                   	push   ebx
c000dd13:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd16:	83 c4 10             	add    esp,0x10
c000dd19:	84 c0                	test   al,al
c000dd1b:	74 08                	je     c000dd25 <LogicalDisk::mount()+0x3d>
c000dd1d:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd23:	eb 07                	jmp    c000dd2c <LogicalDisk::mount()+0x44>
c000dd25:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd28:	eb d5                	jmp    c000dcff <LogicalDisk::mount()+0x17>
c000dd2a:	31 c0                	xor    eax,eax
c000dd2c:	5a                   	pop    edx
c000dd2d:	5b                   	pop    ebx
c000dd2e:	5e                   	pop    esi
c000dd2f:	c3                   	ret    

c000dd30 <LogicalDisk::unmount()>:
c000dd30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd34:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd3e:	c3                   	ret    
c000dd3f:	90                   	nop

c000dd40 <LogicalDisk::eject()>:
c000dd40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd44:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd4a:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd50:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd53:	90                   	nop

c000dd54 <LogicalDisk::unassignDriveLetter()>:
c000dd54:	57                   	push   edi
c000dd55:	56                   	push   esi
c000dd56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd5a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd61:	85 c9                	test   ecx,ecx
c000dd63:	75 0f                	jne    c000dd74 <LogicalDisk::unassignDriveLetter()+0x20>
c000dd65:	c7 44 24 0c cc 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021dcc
c000dd6d:	5e                   	pop    esi
c000dd6e:	5f                   	pop    edi
c000dd6f:	e9 6b 38 00 00       	jmp    c00115df <KePanic(char const*)>
c000dd74:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd7b:	83 e9 41             	sub    ecx,0x41
c000dd7e:	b8 01 00 00 00       	mov    eax,0x1
c000dd83:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dd8e:	d3 e0                	shl    eax,cl
c000dd90:	89 c7                	mov    edi,eax
c000dd92:	f7 d0                	not    eax
c000dd94:	c1 ff 1f             	sar    edi,0x1f
c000dd97:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dd9d:	89 fe                	mov    esi,edi
c000dd9f:	f7 d6                	not    esi
c000dda1:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000dda7:	5e                   	pop    esi
c000dda8:	5f                   	pop    edi
c000dda9:	c3                   	ret    

c000ddaa <LogicalDisk::read(unsigned long long, int, void*)>:
c000ddaa:	57                   	push   edi
c000ddab:	56                   	push   esi
c000ddac:	53                   	push   ebx
c000ddad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ddb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ddb5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddbd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ddc3:	77 41                	ja     c000de06 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ddc5:	99                   	cdq    
c000ddc6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddcc:	01 c8                	add    eax,ecx
c000ddce:	11 da                	adc    edx,ebx
c000ddd0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ddd6:	19 d7                	sbb    edi,edx
c000ddd8:	72 33                	jb     c000de0d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ddda:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dde0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dde6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ddea:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ddee:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ddf4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ddfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddfe:	5b                   	pop    ebx
c000ddff:	5e                   	pop    esi
c000de00:	5f                   	pop    edi
c000de01:	e9 d4 0a 00 00       	jmp    c000e8da <VCache::read(unsigned long long, int, void*)>
c000de06:	b8 05 00 00 00       	mov    eax,0x5
c000de0b:	eb 05                	jmp    c000de12 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de0d:	b8 07 00 00 00       	mov    eax,0x7
c000de12:	5b                   	pop    ebx
c000de13:	5e                   	pop    esi
c000de14:	5f                   	pop    edi
c000de15:	c3                   	ret    

c000de16 <LogicalDisk::write(unsigned long long, int, void*)>:
c000de16:	57                   	push   edi
c000de17:	56                   	push   esi
c000de18:	53                   	push   ebx
c000de19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de21:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de29:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de2f:	77 41                	ja     c000de72 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de31:	99                   	cdq    
c000de32:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de38:	01 c8                	add    eax,ecx
c000de3a:	11 da                	adc    edx,ebx
c000de3c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de42:	19 d7                	sbb    edi,edx
c000de44:	72 33                	jb     c000de79 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de46:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de4c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de52:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de56:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de5a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de60:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de6a:	5b                   	pop    ebx
c000de6b:	5e                   	pop    esi
c000de6c:	5f                   	pop    edi
c000de6d:	e9 6e 09 00 00       	jmp    c000e7e0 <VCache::write(unsigned long long, int, void*)>
c000de72:	b8 05 00 00 00       	mov    eax,0x5
c000de77:	eb 05                	jmp    c000de7e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de79:	b8 07 00 00 00       	mov    eax,0x7
c000de7e:	5b                   	pop    ebx
c000de7f:	5e                   	pop    esi
c000de80:	5f                   	pop    edi
c000de81:	c3                   	ret    
c000de82:	66 90                	xchg   ax,ax

c000de84 <Mouse::Mouse(char const*)>:
c000de84:	83 ec 0c             	sub    esp,0xc
c000de87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de8b:	83 ec 08             	sub    esp,0x8
c000de8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de92:	50                   	push   eax
c000de93:	e8 c0 ec ff ff       	call   c000cb58 <Device::Device(char const*)>
c000de98:	83 c4 10             	add    esp,0x10
c000de9b:	ba 20 1e 02 c0       	mov    edx,0xc0021e20
c000dea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dea4:	89 10                	mov    DWORD PTR [eax],edx
c000dea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deaa:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000deb4:	90                   	nop
c000deb5:	83 c4 0c             	add    esp,0xc
c000deb8:	c3                   	ret    
c000deb9:	90                   	nop
c000deba:	66 90                	xchg   ax,ax

c000debc <Mouse::~Mouse()>:
c000debc:	83 ec 0c             	sub    esp,0xc
c000debf:	ba 20 1e 02 c0       	mov    edx,0xc0021e20
c000dec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec8:	89 10                	mov    DWORD PTR [eax],edx
c000deca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dece:	83 ec 0c             	sub    esp,0xc
c000ded1:	50                   	push   eax
c000ded2:	e8 eb e9 ff ff       	call   c000c8c2 <Device::~Device()>
c000ded7:	83 c4 10             	add    esp,0x10
c000deda:	90                   	nop
c000dedb:	83 c4 0c             	add    esp,0xc
c000dede:	c3                   	ret    
c000dedf:	90                   	nop

c000dee0 <Mouse::~Mouse()>:
c000dee0:	83 ec 0c             	sub    esp,0xc
c000dee3:	83 ec 0c             	sub    esp,0xc
c000dee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deea:	e8 cd ff ff ff       	call   c000debc <Mouse::~Mouse()>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	83 ec 08             	sub    esp,0x8
c000def5:	68 58 01 00 00       	push   0x158
c000defa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000defe:	e8 29 c9 ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000df03:	83 c4 10             	add    esp,0x10
c000df06:	83 c4 0c             	add    esp,0xc
c000df09:	c3                   	ret    

c000df0a <NIC::getMAC()>:
c000df0a:	31 c0                	xor    eax,eax
c000df0c:	31 d2                	xor    edx,edx
c000df0e:	c3                   	ret    
c000df0f:	90                   	nop

c000df10 <NIC::write(int, unsigned char*, int*)>:
c000df10:	b8 01 00 00 00       	mov    eax,0x1
c000df15:	c3                   	ret    

c000df16 <NIC::NIC(char const*)>:
c000df16:	83 ec 0c             	sub    esp,0xc
c000df19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df1d:	83 ec 08             	sub    esp,0x8
c000df20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df24:	50                   	push   eax
c000df25:	e8 2e ec ff ff       	call   c000cb58 <Device::Device(char const*)>
c000df2a:	83 c4 10             	add    esp,0x10
c000df2d:	ba 4c 1e 02 c0       	mov    edx,0xc0021e4c
c000df32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df36:	89 10                	mov    DWORD PTR [eax],edx
c000df38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df3c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df46:	90                   	nop
c000df47:	83 c4 0c             	add    esp,0xc
c000df4a:	c3                   	ret    
c000df4b:	90                   	nop

c000df4c <NIC::~NIC()>:
c000df4c:	83 ec 0c             	sub    esp,0xc
c000df4f:	ba 4c 1e 02 c0       	mov    edx,0xc0021e4c
c000df54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df58:	89 10                	mov    DWORD PTR [eax],edx
c000df5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5e:	83 ec 0c             	sub    esp,0xc
c000df61:	50                   	push   eax
c000df62:	e8 5b e9 ff ff       	call   c000c8c2 <Device::~Device()>
c000df67:	83 c4 10             	add    esp,0x10
c000df6a:	90                   	nop
c000df6b:	83 c4 0c             	add    esp,0xc
c000df6e:	c3                   	ret    
c000df6f:	90                   	nop

c000df70 <NIC::~NIC()>:
c000df70:	83 ec 0c             	sub    esp,0xc
c000df73:	83 ec 0c             	sub    esp,0xc
c000df76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df7a:	e8 cd ff ff ff       	call   c000df4c <NIC::~NIC()>
c000df7f:	83 c4 10             	add    esp,0x10
c000df82:	83 ec 08             	sub    esp,0x8
c000df85:	68 58 01 00 00       	push   0x158
c000df8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df8e:	e8 99 c8 ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000df93:	83 c4 10             	add    esp,0x10
c000df96:	83 c4 0c             	add    esp,0xc
c000df99:	c3                   	ret    

c000df9a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000df9a:	55                   	push   ebp
c000df9b:	57                   	push   edi
c000df9c:	56                   	push   esi
c000df9d:	53                   	push   ebx
c000df9e:	81 ec 28 01 00 00    	sub    esp,0x128
c000dfa4:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dfab:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dfb2:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dfb9:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dfc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfc4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfc8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfcf:	e8 80 ec ff ff       	call   c000cc54 <Device::getName()>
c000dfd4:	5a                   	pop    edx
c000dfd5:	59                   	pop    ecx
c000dfd6:	50                   	push   eax
c000dfd7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dfdb:	55                   	push   ebp
c000dfdc:	e8 6f 26 ff ff       	call   c0000650 <strcpy>
c000dfe1:	5b                   	pop    ebx
c000dfe2:	58                   	pop    eax
c000dfe3:	68 78 1e 02 c0       	push   0xc0021e78
c000dfe8:	55                   	push   ebp
c000dfe9:	e8 82 28 ff ff       	call   c0000870 <strcat>
c000dfee:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dff5:	e8 f9 9a ff ff       	call   c0007af3 <malloc>
c000dffa:	83 c4 0c             	add    esp,0xc
c000dffd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e001:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e005:	89 c3                	mov    ebx,eax
c000e007:	57                   	push   edi
c000e008:	56                   	push   esi
c000e009:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e010:	55                   	push   ebp
c000e011:	50                   	push   eax
c000e012:	e8 57 fb ff ff       	call   c000db6e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e017:	83 c4 14             	add    esp,0x14
c000e01a:	53                   	push   ebx
c000e01b:	e8 0e fc ff ff       	call   c000dc2e <LogicalDisk::assignDriveLetter()>
c000e020:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e023:	e8 c0 fc ff ff       	call   c000dce8 <LogicalDisk::mount()>
c000e028:	58                   	pop    eax
c000e029:	5a                   	pop    edx
c000e02a:	53                   	push   ebx
c000e02b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e032:	e8 89 e9 ff ff       	call   c000c9c0 <Device::addChild(Device*)>
c000e037:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e03d:	5b                   	pop    ebx
c000e03e:	5e                   	pop    esi
c000e03f:	5f                   	pop    edi
c000e040:	5d                   	pop    ebp
c000e041:	c3                   	ret    

c000e042 <createPartitionsForDisk(PhysicalDisk*)>:
c000e042:	55                   	push   ebp
c000e043:	57                   	push   edi
c000e044:	56                   	push   esi
c000e045:	53                   	push   ebx
c000e046:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e04c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e053:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e059:	3d 00 02 00 00       	cmp    eax,0x200
c000e05e:	74 27                	je     c000e087 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e060:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e066:	83 ec 10             	sub    esp,0x10
c000e069:	99                   	cdq    
c000e06a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e070:	52                   	push   edx
c000e071:	50                   	push   eax
c000e072:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e076:	c1 e6 0a             	shl    esi,0xa
c000e079:	89 fd                	mov    ebp,edi
c000e07b:	55                   	push   ebp
c000e07c:	56                   	push   esi
c000e07d:	e8 4e 17 01 00       	call   c001f7d0 <__udivdi3>
c000e082:	e9 b9 00 00 00       	jmp    c000e140 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e087:	83 ec 0c             	sub    esp,0xc
c000e08a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e08c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e090:	56                   	push   esi
c000e091:	6a 01                	push   0x1
c000e093:	6a 00                	push   0x0
c000e095:	6a 00                	push   0x0
c000e097:	53                   	push   ebx
c000e098:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e09b:	83 c4 20             	add    esp,0x20
c000e09e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e0a6:	75 0a                	jne    c000e0b2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e0a8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e0b0:	74 2c                	je     c000e0de <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e0b2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0b8:	83 ec 10             	sub    esp,0x10
c000e0bb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0c1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0c7:	89 f7                	mov    edi,esi
c000e0c9:	c1 ff 1f             	sar    edi,0x1f
c000e0cc:	57                   	push   edi
c000e0cd:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0d1:	56                   	push   esi
c000e0d2:	c1 e0 0a             	shl    eax,0xa
c000e0d5:	52                   	push   edx
c000e0d6:	50                   	push   eax
c000e0d7:	e8 f4 16 01 00       	call   c001f7d0 <__udivdi3>
c000e0dc:	eb 62                	jmp    c000e140 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0de:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e0e5:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e0ec:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e0f3:	89 cf                	mov    edi,ecx
c000e0f5:	83 e2 7f             	and    edx,0x7f
c000e0f8:	83 e7 7f             	and    edi,0x7f
c000e0fb:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e0fe:	83 e0 7f             	and    eax,0x7f
c000e101:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e104:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e10b:	83 e0 7f             	and    eax,0x7f
c000e10e:	01 d0                	add    eax,edx
c000e110:	84 c0                	test   al,al
c000e112:	89 c5                	mov    ebp,eax
c000e114:	74 41                	je     c000e157 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e116:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e11c:	83 ec 10             	sub    esp,0x10
c000e11f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e125:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e12b:	89 f7                	mov    edi,esi
c000e12d:	c1 ff 1f             	sar    edi,0x1f
c000e130:	57                   	push   edi
c000e131:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e135:	56                   	push   esi
c000e136:	c1 e0 0a             	shl    eax,0xa
c000e139:	52                   	push   edx
c000e13a:	50                   	push   eax
c000e13b:	e8 90 16 01 00       	call   c001f7d0 <__udivdi3>
c000e140:	83 c4 14             	add    esp,0x14
c000e143:	52                   	push   edx
c000e144:	50                   	push   eax
c000e145:	6a 00                	push   0x0
c000e147:	6a 00                	push   0x0
c000e149:	53                   	push   ebx
c000e14a:	e8 4b fe ff ff       	call   c000df9a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e14f:	83 c4 20             	add    esp,0x20
c000e152:	e9 73 01 00 00       	jmp    c000e2ca <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e157:	89 f0                	mov    eax,esi
c000e159:	31 c9                	xor    ecx,ecx
c000e15b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e162:	75 02                	jne    c000e166 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e164:	89 cd                	mov    ebp,ecx
c000e166:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e16e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e175:	83 c0 10             	add    eax,0x10
c000e178:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e180:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000e187:	c1 e2 08             	shl    edx,0x8
c000e18a:	c1 e6 10             	shl    esi,0x10
c000e18d:	09 f2                	or     edx,esi
c000e18f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000e196:	09 f2                	or     edx,esi
c000e198:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e19f:	c1 e6 18             	shl    esi,0x18
c000e1a2:	09 f2                	or     edx,esi
c000e1a4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e1ab:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e1af:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e1b6:	c1 e6 10             	shl    esi,0x10
c000e1b9:	c1 e2 08             	shl    edx,0x8
c000e1bc:	09 f2                	or     edx,esi
c000e1be:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e1c5:	09 f2                	or     edx,esi
c000e1c7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e1ce:	c1 e6 18             	shl    esi,0x18
c000e1d1:	09 f2                	or     edx,esi
c000e1d3:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e1d7:	41                   	inc    ecx
c000e1d8:	83 f9 04             	cmp    ecx,0x4
c000e1db:	0f 85 7a ff ff ff    	jne    c000e15b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e1e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1e5:	83 f0 01             	xor    eax,0x1
c000e1e8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e1ec:	75 4f                	jne    c000e23d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1f2:	83 f0 01             	xor    eax,0x1
c000e1f5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e1f9:	75 42                	jne    c000e23d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1fb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e201:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e209:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e20f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e217:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e21d:	89 f7                	mov    edi,esi
c000e21f:	c1 ff 1f             	sar    edi,0x1f
c000e222:	57                   	push   edi
c000e223:	56                   	push   esi
c000e224:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e228:	52                   	push   edx
c000e229:	c1 e0 0a             	shl    eax,0xa
c000e22c:	50                   	push   eax
c000e22d:	e8 9e 15 01 00       	call   c001f7d0 <__udivdi3>
c000e232:	83 c4 10             	add    esp,0x10
c000e235:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e239:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e23d:	89 e8                	mov    eax,ebp
c000e23f:	0f b6 e8             	movzx  ebp,al
c000e242:	85 ed                	test   ebp,ebp
c000e244:	74 50                	je     c000e296 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e246:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e24a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e24e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e252:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e256:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e25a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e25e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e262:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e266:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e26e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e272:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e276:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e27a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e27e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e282:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e286:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e28a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e28e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e292:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e296:	31 ed                	xor    ebp,ebp
c000e298:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e29c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2a0:	89 f8                	mov    eax,edi
c000e2a2:	09 f0                	or     eax,esi
c000e2a4:	74 1e                	je     c000e2c4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2a6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2aa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2ae:	89 d1                	mov    ecx,edx
c000e2b0:	09 c1                	or     ecx,eax
c000e2b2:	74 10                	je     c000e2c4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2b4:	83 ec 0c             	sub    esp,0xc
c000e2b7:	57                   	push   edi
c000e2b8:	56                   	push   esi
c000e2b9:	52                   	push   edx
c000e2ba:	50                   	push   eax
c000e2bb:	53                   	push   ebx
c000e2bc:	e8 d9 fc ff ff       	call   c000df9a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e2c1:	83 c4 20             	add    esp,0x20
c000e2c4:	45                   	inc    ebp
c000e2c5:	83 fd 04             	cmp    ebp,0x4
c000e2c8:	75 ce                	jne    c000e298 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e2ca:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e2d0:	5b                   	pop    ebx
c000e2d1:	5e                   	pop    esi
c000e2d2:	5f                   	pop    edi
c000e2d3:	5d                   	pop    ebp
c000e2d4:	c3                   	ret    
c000e2d5:	66 90                	xchg   ax,ax
c000e2d7:	90                   	nop

c000e2d8 <Serial::Serial(char const*)>:
c000e2d8:	83 ec 0c             	sub    esp,0xc
c000e2db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2df:	83 ec 08             	sub    esp,0x8
c000e2e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2e6:	50                   	push   eax
c000e2e7:	e8 6c e8 ff ff       	call   c000cb58 <Device::Device(char const*)>
c000e2ec:	83 c4 10             	add    esp,0x10
c000e2ef:	ba 8c 1e 02 c0       	mov    edx,0xc0021e8c
c000e2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f8:	89 10                	mov    DWORD PTR [eax],edx
c000e2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fe:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e308:	90                   	nop
c000e309:	83 c4 0c             	add    esp,0xc
c000e30c:	c3                   	ret    
c000e30d:	90                   	nop
c000e30e:	66 90                	xchg   ax,ax

c000e310 <Serial::~Serial()>:
c000e310:	83 ec 0c             	sub    esp,0xc
c000e313:	ba 8c 1e 02 c0       	mov    edx,0xc0021e8c
c000e318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31c:	89 10                	mov    DWORD PTR [eax],edx
c000e31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e322:	83 ec 0c             	sub    esp,0xc
c000e325:	50                   	push   eax
c000e326:	e8 97 e5 ff ff       	call   c000c8c2 <Device::~Device()>
c000e32b:	83 c4 10             	add    esp,0x10
c000e32e:	90                   	nop
c000e32f:	83 c4 0c             	add    esp,0xc
c000e332:	c3                   	ret    
c000e333:	90                   	nop

c000e334 <Serial::~Serial()>:
c000e334:	83 ec 0c             	sub    esp,0xc
c000e337:	83 ec 0c             	sub    esp,0xc
c000e33a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e33e:	e8 cd ff ff ff       	call   c000e310 <Serial::~Serial()>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	83 ec 08             	sub    esp,0x8
c000e349:	68 58 01 00 00       	push   0x158
c000e34e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e352:	e8 d5 c4 ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000e357:	83 c4 10             	add    esp,0x10
c000e35a:	83 c4 0c             	add    esp,0xc
c000e35d:	c3                   	ret    
c000e35e:	66 90                	xchg   ax,ax

c000e360 <Timer::Timer(char const*)>:
c000e360:	83 ec 0c             	sub    esp,0xc
c000e363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e367:	83 ec 08             	sub    esp,0x8
c000e36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36e:	50                   	push   eax
c000e36f:	e8 e4 e7 ff ff       	call   c000cb58 <Device::Device(char const*)>
c000e374:	83 c4 10             	add    esp,0x10
c000e377:	ba d0 1e 02 c0       	mov    edx,0xc0021ed0
c000e37c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e380:	89 10                	mov    DWORD PTR [eax],edx
c000e382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e386:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e390:	90                   	nop
c000e391:	83 c4 0c             	add    esp,0xc
c000e394:	c3                   	ret    
c000e395:	90                   	nop
c000e396:	66 90                	xchg   ax,ax

c000e398 <Timer::~Timer()>:
c000e398:	83 ec 0c             	sub    esp,0xc
c000e39b:	ba d0 1e 02 c0       	mov    edx,0xc0021ed0
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	89 10                	mov    DWORD PTR [eax],edx
c000e3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3aa:	83 ec 0c             	sub    esp,0xc
c000e3ad:	50                   	push   eax
c000e3ae:	e8 0f e5 ff ff       	call   c000c8c2 <Device::~Device()>
c000e3b3:	83 c4 10             	add    esp,0x10
c000e3b6:	90                   	nop
c000e3b7:	83 c4 0c             	add    esp,0xc
c000e3ba:	c3                   	ret    
c000e3bb:	90                   	nop

c000e3bc <Timer::~Timer()>:
c000e3bc:	83 ec 0c             	sub    esp,0xc
c000e3bf:	83 ec 0c             	sub    esp,0xc
c000e3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3c6:	e8 cd ff ff ff       	call   c000e398 <Timer::~Timer()>
c000e3cb:	83 c4 10             	add    esp,0x10
c000e3ce:	83 ec 08             	sub    esp,0x8
c000e3d1:	68 5c 01 00 00       	push   0x15c
c000e3d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3da:	e8 4d c4 ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000e3df:	83 c4 10             	add    esp,0x10
c000e3e2:	83 c4 0c             	add    esp,0xc
c000e3e5:	c3                   	ret    

c000e3e6 <Timer::read()>:
c000e3e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3ea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e3f0:	c3                   	ret    

c000e3f1 <setupTimer(int)>:
c000e3f1:	53                   	push   ebx
c000e3f2:	83 ec 14             	sub    esp,0x14
c000e3f5:	68 5c 01 00 00       	push   0x15c
c000e3fa:	e8 f4 96 ff ff       	call   c0007af3 <malloc>
c000e3ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e402:	89 c3                	mov    ebx,eax
c000e404:	e8 27 0c 01 00       	call   c001f030 <PIT::PIT()>
c000e409:	58                   	pop    eax
c000e40a:	5a                   	pop    edx
c000e40b:	53                   	push   ebx
c000e40c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e412:	e8 a9 e5 ff ff       	call   c000c9c0 <Device::addChild(Device*)>
c000e417:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e419:	6a 00                	push   0x0
c000e41b:	6a 00                	push   0x0
c000e41d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e421:	53                   	push   ebx
c000e422:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e425:	83 c4 28             	add    esp,0x28
c000e428:	89 d8                	mov    eax,ebx
c000e42a:	5b                   	pop    ebx
c000e42b:	c3                   	ret    

c000e42c <timerHandler(unsigned int)>:
c000e42c:	56                   	push   esi
c000e42d:	53                   	push   ebx
c000e42e:	51                   	push   ecx
c000e42f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e433:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e439:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e440:	0f 84 4a 01 00 00    	je     c000e590 <timerHandler(unsigned int)+0x164>
c000e446:	fa                   	cli    
c000e447:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e44d:	83 ec 0c             	sub    esp,0xc
c000e450:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e455:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e45b:	e8 40 19 01 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e460:	83 c4 10             	add    esp,0x10
c000e463:	84 c0                	test   al,al
c000e465:	0f 85 a1 00 00 00    	jne    c000e50c <timerHandler(unsigned int)+0xe0>
c000e46b:	83 ec 0c             	sub    esp,0xc
c000e46e:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e473:	e8 44 19 01 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e478:	83 c4 10             	add    esp,0x10
c000e47b:	89 c6                	mov    esi,eax
c000e47d:	8d 76 00             	lea    esi,[esi+0x0]
c000e480:	83 ec 0c             	sub    esp,0xc
c000e483:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e488:	e8 2f 19 01 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e48d:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e494:	89 c3                	mov    ebx,eax
c000e496:	e8 29 19 01 00       	call   c001fdc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e49b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e49e:	83 c4 10             	add    esp,0x10
c000e4a1:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e4a7:	77 23                	ja     c000e4cc <timerHandler(unsigned int)+0xa0>
c000e4a9:	83 ec 0c             	sub    esp,0xc
c000e4ac:	53                   	push   ebx
c000e4ad:	e8 52 81 00 00       	call   c0016604 <unblockTask(ThreadControlBlock*)>
c000e4b2:	83 c4 10             	add    esp,0x10
c000e4b5:	39 de                	cmp    esi,ebx
c000e4b7:	75 27                	jne    c000e4e0 <timerHandler(unsigned int)+0xb4>
c000e4b9:	83 ec 0c             	sub    esp,0xc
c000e4bc:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4c1:	e8 f6 18 01 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4c6:	89 c6                	mov    esi,eax
c000e4c8:	eb 12                	jmp    c000e4dc <timerHandler(unsigned int)+0xb0>
c000e4ca:	66 90                	xchg   ax,ax
c000e4cc:	52                   	push   edx
c000e4cd:	52                   	push   edx
c000e4ce:	53                   	push   ebx
c000e4cf:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4d4:	e8 a7 19 01 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e4d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4dc:	83 c4 10             	add    esp,0x10
c000e4df:	90                   	nop
c000e4e0:	83 ec 0c             	sub    esp,0xc
c000e4e3:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4e8:	e8 b3 18 01 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4ed:	83 c4 10             	add    esp,0x10
c000e4f0:	84 c0                	test   al,al
c000e4f2:	75 18                	jne    c000e50c <timerHandler(unsigned int)+0xe0>
c000e4f4:	83 ec 0c             	sub    esp,0xc
c000e4f7:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4fc:	e8 bb 18 01 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e501:	83 c4 10             	add    esp,0x10
c000e504:	39 f0                	cmp    eax,esi
c000e506:	0f 85 74 ff ff ff    	jne    c000e480 <timerHandler(unsigned int)+0x54>
c000e50c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e511:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e515:	74 41                	je     c000e558 <timerHandler(unsigned int)+0x12c>
c000e517:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e51e:	74 38                	je     c000e558 <timerHandler(unsigned int)+0x12c>
c000e520:	fa                   	cli    
c000e521:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e527:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e52c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e532:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e535:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e53b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e53e:	72 08                	jb     c000e548 <timerHandler(unsigned int)+0x11c>
c000e540:	e8 c7 7b 00 00       	call   c001610c <schedule()>
c000e545:	8d 76 00             	lea    esi,[esi+0x0]
c000e548:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e54d:	48                   	dec    eax
c000e54e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e553:	75 03                	jne    c000e558 <timerHandler(unsigned int)+0x12c>
c000e555:	fb                   	sti    
c000e556:	66 90                	xchg   ax,ax
c000e558:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e55d:	48                   	dec    eax
c000e55e:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e563:	75 1b                	jne    c000e580 <timerHandler(unsigned int)+0x154>
c000e565:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e56c:	74 12                	je     c000e580 <timerHandler(unsigned int)+0x154>
c000e56e:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e578:	e8 8f 7b 00 00       	call   c001610c <schedule()>
c000e57d:	8d 76 00             	lea    esi,[esi+0x0]
c000e580:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e585:	48                   	dec    eax
c000e586:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e58b:	75 03                	jne    c000e590 <timerHandler(unsigned int)+0x164>
c000e58d:	fb                   	sti    
c000e58e:	66 90                	xchg   ax,ax
c000e590:	58                   	pop    eax
c000e591:	5b                   	pop    ebx
c000e592:	5e                   	pop    esi
c000e593:	c3                   	ret    

c000e594 <VCache::VCache(PhysicalDisk*)>:
c000e594:	53                   	push   ebx
c000e595:	83 ec 18             	sub    esp,0x18
c000e598:	ba 00 1f 02 c0       	mov    edx,0xc0021f00
c000e59d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5a1:	89 10                	mov    DWORD PTR [eax],edx
c000e5a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5a7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e5ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e5b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5bd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e5c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e5cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5cf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e5d6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e5dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e5e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ec:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e5f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5f4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e5fb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e606:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e60a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e60e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e616:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e61a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e61e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e625:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e62d:	83 ec 0c             	sub    esp,0xc
c000e630:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e634:	e8 ba 94 ff ff       	call   c0007af3 <malloc>
c000e639:	83 c4 10             	add    esp,0x10
c000e63c:	89 c3                	mov    ebx,eax
c000e63e:	83 ec 0c             	sub    esp,0xc
c000e641:	53                   	push   ebx
c000e642:	e8 65 78 00 00       	call   c0015eac <Mutex::Mutex()>
c000e647:	83 c4 10             	add    esp,0x10
c000e64a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e64e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e655:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e659:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e65c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e660:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e667:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e66b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e675:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e678:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e67c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e682:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e688:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e68c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e68f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e696:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e69a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e69e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e6a4:	05 00 02 00 00       	add    eax,0x200
c000e6a9:	c1 e0 03             	shl    eax,0x3
c000e6ac:	83 ec 0c             	sub    esp,0xc
c000e6af:	50                   	push   eax
c000e6b0:	e8 3e 94 ff ff       	call   c0007af3 <malloc>
c000e6b5:	83 c4 10             	add    esp,0x10
c000e6b8:	89 c2                	mov    edx,eax
c000e6ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6be:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e6c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6c5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e6d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6d8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6de:	89 d0                	mov    eax,edx
c000e6e0:	c1 e0 02             	shl    eax,0x2
c000e6e3:	01 d0                	add    eax,edx
c000e6e5:	c1 e0 04             	shl    eax,0x4
c000e6e8:	83 ec 0c             	sub    esp,0xc
c000e6eb:	50                   	push   eax
c000e6ec:	e8 02 94 ff ff       	call   c0007af3 <malloc>
c000e6f1:	83 c4 10             	add    esp,0x10
c000e6f4:	89 c2                	mov    edx,eax
c000e6f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6fa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e6fd:	90                   	nop
c000e6fe:	83 c4 18             	add    esp,0x18
c000e701:	5b                   	pop    ebx
c000e702:	c3                   	ret    
c000e703:	90                   	nop

c000e704 <VCache::invalidateReadBuffer()>:
c000e704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e708:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e70e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e712:	c3                   	ret    
c000e713:	90                   	nop

c000e714 <VCache::writeWriteBuffer()>:
c000e714:	53                   	push   ebx
c000e715:	83 ec 08             	sub    esp,0x8
c000e718:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e71c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e720:	74 1e                	je     c000e740 <VCache::writeWriteBuffer()+0x2c>
c000e722:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e725:	83 ec 0c             	sub    esp,0xc
c000e728:	8b 10                	mov    edx,DWORD PTR [eax]
c000e72a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e72d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e730:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e733:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e736:	50                   	push   eax
c000e737:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e73a:	83 c4 20             	add    esp,0x20
c000e73d:	8d 76 00             	lea    esi,[esi+0x0]
c000e740:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e747:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e74e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e752:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e759:	83 c4 08             	add    esp,0x8
c000e75c:	5b                   	pop    ebx
c000e75d:	c3                   	ret    
c000e75e:	66 90                	xchg   ax,ax

c000e760 <VCache::~VCache()>:
c000e760:	83 ec 0c             	sub    esp,0xc
c000e763:	ba 00 1f 02 c0       	mov    edx,0xc0021f00
c000e768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76c:	89 10                	mov    DWORD PTR [eax],edx
c000e76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e772:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e775:	0f b6 c0             	movzx  eax,al
c000e778:	85 c0                	test   eax,eax
c000e77a:	74 10                	je     c000e78c <VCache::~VCache()+0x2c>
c000e77c:	83 ec 0c             	sub    esp,0xc
c000e77f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e783:	e8 8c ff ff ff       	call   c000e714 <VCache::writeWriteBuffer()>
c000e788:	83 c4 10             	add    esp,0x10
c000e78b:	90                   	nop
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e793:	83 ec 0c             	sub    esp,0xc
c000e796:	50                   	push   eax
c000e797:	e8 67 93 ff ff       	call   c0007b03 <free>
c000e79c:	83 c4 10             	add    esp,0x10
c000e79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e7a6:	83 ec 0c             	sub    esp,0xc
c000e7a9:	50                   	push   eax
c000e7aa:	e8 54 93 ff ff       	call   c0007b03 <free>
c000e7af:	83 c4 10             	add    esp,0x10
c000e7b2:	90                   	nop
c000e7b3:	83 c4 0c             	add    esp,0xc
c000e7b6:	c3                   	ret    
c000e7b7:	90                   	nop

c000e7b8 <VCache::~VCache()>:
c000e7b8:	83 ec 0c             	sub    esp,0xc
c000e7bb:	83 ec 0c             	sub    esp,0xc
c000e7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7c2:	e8 99 ff ff ff       	call   c000e760 <VCache::~VCache()>
c000e7c7:	83 c4 10             	add    esp,0x10
c000e7ca:	83 ec 08             	sub    esp,0x8
c000e7cd:	6a 44                	push   0x44
c000e7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d3:	e8 54 c0 ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000e7d8:	83 c4 10             	add    esp,0x10
c000e7db:	83 c4 0c             	add    esp,0xc
c000e7de:	c3                   	ret    
c000e7df:	90                   	nop

c000e7e0 <VCache::write(unsigned long long, int, void*)>:
c000e7e0:	55                   	push   ebp
c000e7e1:	57                   	push   edi
c000e7e2:	56                   	push   esi
c000e7e3:	53                   	push   ebx
c000e7e4:	83 ec 1c             	sub    esp,0x1c
c000e7e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e7eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7ef:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e7f3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e7f7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e7fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7ff:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e803:	74 0f                	je     c000e814 <VCache::write(unsigned long long, int, void*)+0x34>
c000e805:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e809:	53                   	push   ebx
c000e80a:	e8 f5 fe ff ff       	call   c000e704 <VCache::invalidateReadBuffer()>
c000e80f:	58                   	pop    eax
c000e810:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e814:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e818:	74 66                	je     c000e880 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e81a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e81d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e821:	99                   	cdq    
c000e822:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e825:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e828:	89 c6                	mov    esi,eax
c000e82a:	31 ce                	xor    esi,ecx
c000e82c:	89 d0                	mov    eax,edx
c000e82e:	31 e8                	xor    eax,ebp
c000e830:	09 c6                	or     esi,eax
c000e832:	75 38                	jne    c000e86c <VCache::write(unsigned long long, int, void*)+0x8c>
c000e834:	83 ff 01             	cmp    edi,0x1
c000e837:	75 33                	jne    c000e86c <VCache::write(unsigned long long, int, void*)+0x8c>
c000e839:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e83c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e840:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e844:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e84a:	0f af f9             	imul   edi,ecx
c000e84d:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e850:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e852:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e855:	40                   	inc    eax
c000e856:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e859:	83 f8 50             	cmp    eax,0x50
c000e85c:	75 72                	jne    c000e8d0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e85e:	83 ec 0c             	sub    esp,0xc
c000e861:	53                   	push   ebx
c000e862:	e8 ad fe ff ff       	call   c000e714 <VCache::writeWriteBuffer()>
c000e867:	83 c4 10             	add    esp,0x10
c000e86a:	eb 64                	jmp    c000e8d0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e86c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e870:	83 ec 0c             	sub    esp,0xc
c000e873:	53                   	push   ebx
c000e874:	e8 9b fe ff ff       	call   c000e714 <VCache::writeWriteBuffer()>
c000e879:	83 c4 10             	add    esp,0x10
c000e87c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e880:	83 ff 4f             	cmp    edi,0x4f
c000e883:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e886:	7f 20                	jg     c000e8a8 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e888:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e88b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e88f:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e892:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e895:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e898:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e89c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8a4:	eb 2a                	jmp    c000e8d0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e8a6:	66 90                	xchg   ax,ax
c000e8a8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ae:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e8b2:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e8b6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e8ba:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e8be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8c2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e8c5:	83 c4 1c             	add    esp,0x1c
c000e8c8:	5b                   	pop    ebx
c000e8c9:	5e                   	pop    esi
c000e8ca:	5f                   	pop    edi
c000e8cb:	5d                   	pop    ebp
c000e8cc:	ff e0                	jmp    eax
c000e8ce:	66 90                	xchg   ax,ax
c000e8d0:	83 c4 1c             	add    esp,0x1c
c000e8d3:	31 c0                	xor    eax,eax
c000e8d5:	5b                   	pop    ebx
c000e8d6:	5e                   	pop    esi
c000e8d7:	5f                   	pop    edi
c000e8d8:	5d                   	pop    ebp
c000e8d9:	c3                   	ret    

c000e8da <VCache::read(unsigned long long, int, void*)>:
c000e8da:	55                   	push   ebp
c000e8db:	57                   	push   edi
c000e8dc:	56                   	push   esi
c000e8dd:	53                   	push   ebx
c000e8de:	83 ec 1c             	sub    esp,0x1c
c000e8e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8e9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e8ed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e8f1:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e8f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e8f9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e8fd:	74 0d                	je     c000e90c <VCache::read(unsigned long long, int, void*)+0x32>
c000e8ff:	83 ec 0c             	sub    esp,0xc
c000e902:	57                   	push   edi
c000e903:	e8 0c fe ff ff       	call   c000e714 <VCache::writeWriteBuffer()>
c000e908:	83 c4 10             	add    esp,0x10
c000e90b:	90                   	nop
c000e90c:	83 fd 01             	cmp    ebp,0x1
c000e90f:	0f 85 93 00 00 00    	jne    c000e9a8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e915:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e918:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e91f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e922:	0f 85 80 00 00 00    	jne    c000e9a8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e928:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e92b:	89 cd                	mov    ebp,ecx
c000e92d:	f7 dd                	neg    ebp
c000e92f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e933:	89 e8                	mov    eax,ebp
c000e935:	21 dd                	and    ebp,ebx
c000e937:	c1 f8 1f             	sar    eax,0x1f
c000e93a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e93e:	89 e8                	mov    eax,ebp
c000e940:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e944:	21 f5                	and    ebp,esi
c000e946:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e94a:	89 ea                	mov    edx,ebp
c000e94c:	74 2e                	je     c000e97c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e94e:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e951:	75 29                	jne    c000e97c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e953:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e956:	75 24                	jne    c000e97c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e958:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e95b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e961:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e964:	8d 70 ff             	lea    esi,[eax-0x1]
c000e967:	21 f3                	and    ebx,esi
c000e969:	0f af d9             	imul   ebx,ecx
c000e96c:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e96f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e973:	89 de                	mov    esi,ebx
c000e975:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e977:	31 c0                	xor    eax,eax
c000e979:	eb 61                	jmp    c000e9dc <VCache::read(unsigned long long, int, void*)+0x102>
c000e97b:	90                   	nop
c000e97c:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e980:	83 ec 0c             	sub    esp,0xc
c000e983:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e986:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e98a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e98d:	8b 36                	mov    esi,DWORD PTR [esi]
c000e98f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e992:	51                   	push   ecx
c000e993:	52                   	push   edx
c000e994:	50                   	push   eax
c000e995:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e999:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e99c:	83 c4 20             	add    esp,0x20
c000e99f:	85 c0                	test   eax,eax
c000e9a1:	75 39                	jne    c000e9dc <VCache::read(unsigned long long, int, void*)+0x102>
c000e9a3:	eb b3                	jmp    c000e958 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e9a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e9a8:	83 ec 0c             	sub    esp,0xc
c000e9ab:	57                   	push   edi
c000e9ac:	e8 53 fd ff ff       	call   c000e704 <VCache::invalidateReadBuffer()>
c000e9b1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e9b8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9ba:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e9be:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e9c2:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e9c6:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e9ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9ce:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e9d1:	83 c4 2c             	add    esp,0x2c
c000e9d4:	5b                   	pop    ebx
c000e9d5:	5e                   	pop    esi
c000e9d6:	5f                   	pop    edi
c000e9d7:	5d                   	pop    ebp
c000e9d8:	ff e0                	jmp    eax
c000e9da:	66 90                	xchg   ax,ax
c000e9dc:	83 c4 1c             	add    esp,0x1c
c000e9df:	5b                   	pop    ebx
c000e9e0:	5e                   	pop    esi
c000e9e1:	5f                   	pop    edi
c000e9e2:	5d                   	pop    ebp
c000e9e3:	c3                   	ret    

c000e9e4 <Video::putrect(int, int, int, int, unsigned int)>:
c000e9e4:	55                   	push   ebp
c000e9e5:	57                   	push   edi
c000e9e6:	56                   	push   esi
c000e9e7:	53                   	push   ebx
c000e9e8:	83 ec 1c             	sub    esp,0x1c
c000e9eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e9ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9f3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e9f7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e9fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e9ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea03:	01 df                	add    edi,ebx
c000ea05:	39 fb                	cmp    ebx,edi
c000ea07:	7d 1f                	jge    c000ea28 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea09:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea0d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea11:	7d 12                	jge    c000ea25 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea13:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea15:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea19:	53                   	push   ebx
c000ea1a:	55                   	push   ebp
c000ea1b:	45                   	inc    ebp
c000ea1c:	56                   	push   esi
c000ea1d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea20:	83 c4 10             	add    esp,0x10
c000ea23:	eb e8                	jmp    c000ea0d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea25:	43                   	inc    ebx
c000ea26:	eb dd                	jmp    c000ea05 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea28:	83 c4 1c             	add    esp,0x1c
c000ea2b:	5b                   	pop    ebx
c000ea2c:	5e                   	pop    esi
c000ea2d:	5f                   	pop    edi
c000ea2e:	5d                   	pop    ebp
c000ea2f:	c3                   	ret    

c000ea30 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea30:	55                   	push   ebp
c000ea31:	57                   	push   edi
c000ea32:	31 ff                	xor    edi,edi
c000ea34:	56                   	push   esi
c000ea35:	53                   	push   ebx
c000ea36:	83 ec 1c             	sub    esp,0x1c
c000ea39:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea3d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea41:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea48:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea51:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea55:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea59:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea5c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea60:	01 f9                	add    ecx,edi
c000ea62:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea66:	7d 2f                	jge    c000ea97 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea68:	31 f6                	xor    esi,esi
c000ea6a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea6e:	01 f2                	add    edx,esi
c000ea70:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea74:	7d 1a                	jge    c000ea90 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea76:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea79:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea7c:	46                   	inc    esi
c000ea7d:	51                   	push   ecx
c000ea7e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea82:	52                   	push   edx
c000ea83:	55                   	push   ebp
c000ea84:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea87:	83 c4 10             	add    esp,0x10
c000ea8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea8e:	eb da                	jmp    c000ea6a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ea90:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ea94:	47                   	inc    edi
c000ea95:	eb c5                	jmp    c000ea5c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ea97:	83 c4 1c             	add    esp,0x1c
c000ea9a:	5b                   	pop    ebx
c000ea9b:	5e                   	pop    esi
c000ea9c:	5f                   	pop    edi
c000ea9d:	5d                   	pop    ebp
c000ea9e:	c3                   	ret    
c000ea9f:	90                   	nop

c000eaa0 <Video::blit(unsigned int*, int, int, int, int)>:
c000eaa0:	55                   	push   ebp
c000eaa1:	ba 00 00 00 00       	mov    edx,0x0
c000eaa6:	57                   	push   edi
c000eaa7:	56                   	push   esi
c000eaa8:	53                   	push   ebx
c000eaa9:	83 ec 1c             	sub    esp,0x1c
c000eaac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eab0:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000eab4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eab8:	85 c0                	test   eax,eax
c000eaba:	0f 49 d0             	cmovns edx,eax
c000eabd:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000eac4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eac8:	89 eb                	mov    ebx,ebp
c000eaca:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000eace:	01 ea                	add    edx,ebp
c000ead0:	39 da                	cmp    edx,ebx
c000ead2:	7e 54                	jle    c000eb28 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ead4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eada:	7c 4c                	jl     c000eb28 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eadc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eae0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eae4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eae8:	01 c1                	add    ecx,eax
c000eaea:	39 f9                	cmp    ecx,edi
c000eaec:	7e 2f                	jle    c000eb1d <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000eaee:	83 c2 04             	add    edx,0x4
c000eaf1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eaf7:	7c 21                	jl     c000eb1a <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000eaf9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eafd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eaff:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000eb02:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000eb06:	55                   	push   ebp
c000eb07:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb0b:	56                   	push   esi
c000eb0c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb0f:	83 c4 10             	add    esp,0x10
c000eb12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb16:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb1a:	47                   	inc    edi
c000eb1b:	eb c7                	jmp    c000eae4 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000eb1d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000eb21:	43                   	inc    ebx
c000eb22:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000eb26:	eb a2                	jmp    c000eaca <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000eb28:	83 c4 1c             	add    esp,0x1c
c000eb2b:	5b                   	pop    ebx
c000eb2c:	5e                   	pop    esi
c000eb2d:	5f                   	pop    edi
c000eb2e:	5d                   	pop    ebp
c000eb2f:	c3                   	ret    

c000eb30 <Video::clearScreen(unsigned int)>:
c000eb30:	57                   	push   edi
c000eb31:	56                   	push   esi
c000eb32:	53                   	push   ebx
c000eb33:	31 db                	xor    ebx,ebx
c000eb35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb39:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb3f:	7e 1f                	jle    c000eb60 <Video::clearScreen(unsigned int)+0x30>
c000eb41:	31 ff                	xor    edi,edi
c000eb43:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb49:	7e 12                	jle    c000eb5d <Video::clearScreen(unsigned int)+0x2d>
c000eb4b:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb51:	53                   	push   ebx
c000eb52:	57                   	push   edi
c000eb53:	47                   	inc    edi
c000eb54:	56                   	push   esi
c000eb55:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb58:	83 c4 10             	add    esp,0x10
c000eb5b:	eb e6                	jmp    c000eb43 <Video::clearScreen(unsigned int)+0x13>
c000eb5d:	43                   	inc    ebx
c000eb5e:	eb d9                	jmp    c000eb39 <Video::clearScreen(unsigned int)+0x9>
c000eb60:	5b                   	pop    ebx
c000eb61:	5e                   	pop    esi
c000eb62:	5f                   	pop    edi
c000eb63:	c3                   	ret    

c000eb64 <Video::putpixel(int, int, unsigned int)>:
c000eb64:	c7 44 24 04 08 1f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021f08
c000eb6c:	e9 6e 2a 00 00       	jmp    c00115df <KePanic(char const*)>
c000eb71:	90                   	nop

c000eb72 <Video::readPixelApprox(int, int)>:
c000eb72:	83 ec 18             	sub    esp,0x18
c000eb75:	68 29 1f 02 c0       	push   0xc0021f29
c000eb7a:	e8 60 2a 00 00       	call   c00115df <KePanic(char const*)>
c000eb7f:	31 c0                	xor    eax,eax
c000eb81:	83 c4 1c             	add    esp,0x1c
c000eb84:	c3                   	ret    
c000eb85:	90                   	nop

c000eb86 <Video::Video(char const*)>:
c000eb86:	83 ec 0c             	sub    esp,0xc
c000eb89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb8d:	83 ec 08             	sub    esp,0x8
c000eb90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb94:	50                   	push   eax
c000eb95:	e8 be df ff ff       	call   c000cb58 <Device::Device(char const*)>
c000eb9a:	83 c4 10             	add    esp,0x10
c000eb9d:	ba a4 1f 02 c0       	mov    edx,0xc0021fa4
c000eba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba6:	89 10                	mov    DWORD PTR [eax],edx
c000eba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebac:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ebb6:	90                   	nop
c000ebb7:	83 c4 0c             	add    esp,0xc
c000ebba:	c3                   	ret    
c000ebbb:	90                   	nop

c000ebbc <Video::~Video()>:
c000ebbc:	83 ec 0c             	sub    esp,0xc
c000ebbf:	ba a4 1f 02 c0       	mov    edx,0xc0021fa4
c000ebc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebc8:	89 10                	mov    DWORD PTR [eax],edx
c000ebca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebce:	83 ec 0c             	sub    esp,0xc
c000ebd1:	50                   	push   eax
c000ebd2:	e8 eb dc ff ff       	call   c000c8c2 <Device::~Device()>
c000ebd7:	83 c4 10             	add    esp,0x10
c000ebda:	90                   	nop
c000ebdb:	83 c4 0c             	add    esp,0xc
c000ebde:	c3                   	ret    
c000ebdf:	90                   	nop

c000ebe0 <Video::~Video()>:
c000ebe0:	83 ec 0c             	sub    esp,0xc
c000ebe3:	83 ec 0c             	sub    esp,0xc
c000ebe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebea:	e8 cd ff ff ff       	call   c000ebbc <Video::~Video()>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	83 ec 08             	sub    esp,0x8
c000ebf5:	68 64 01 00 00       	push   0x164
c000ebfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebfe:	e8 29 bc ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c000ec03:	83 c4 10             	add    esp,0x10
c000ec06:	83 c4 0c             	add    esp,0xc
c000ec09:	c3                   	ret    

c000ec0a <Video::isMonochrome()>:
c000ec0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec0e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec14:	c3                   	ret    
c000ec15:	90                   	nop

c000ec16 <Video::getWidth()>:
c000ec16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec1a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec20:	c3                   	ret    
c000ec21:	90                   	nop

c000ec22 <Video::getHeight()>:
c000ec22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec26:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec2c:	c3                   	ret    
c000ec2d:	90                   	nop

c000ec2e <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec2e:	55                   	push   ebp
c000ec2f:	57                   	push   edi
c000ec30:	56                   	push   esi
c000ec31:	53                   	push   ebx
c000ec32:	83 ec 2c             	sub    esp,0x2c
c000ec35:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec39:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ec3d:	83 f8 01             	cmp    eax,0x1
c000ec40:	19 c9                	sbb    ecx,ecx
c000ec42:	31 db                	xor    ebx,ebx
c000ec44:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec48:	89 ce                	mov    esi,ecx
c000ec4a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec52:	f7 d6                	not    esi
c000ec54:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ec5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec5e:	01 d8                	add    eax,ebx
c000ec60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec64:	57                   	push   edi
c000ec65:	e8 b8 ff ff ff       	call   c000ec22 <Video::getHeight()>
c000ec6a:	59                   	pop    ecx
c000ec6b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec6f:	7e 70                	jle    c000ece1 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec71:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec75:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ec79:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec84:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec8f:	89 e8                	mov    eax,ebp
c000ec91:	83 c0 20             	add    eax,0x20
c000ec94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec98:	57                   	push   edi
c000ec99:	e8 78 ff ff ff       	call   c000ec16 <Video::getWidth()>
c000ec9e:	5a                   	pop    edx
c000ec9f:	39 c5                	cmp    ebp,eax
c000eca1:	7d 34                	jge    c000ecd7 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000eca3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000eca8:	74 05                	je     c000ecaf <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ecaa:	8b 07                	mov    eax,DWORD PTR [edi]
c000ecac:	56                   	push   esi
c000ecad:	eb 0d                	jmp    c000ecbc <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ecaf:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ecb4:	74 12                	je     c000ecc8 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ecb6:	8b 07                	mov    eax,DWORD PTR [edi]
c000ecb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ecbc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ecc0:	55                   	push   ebp
c000ecc1:	57                   	push   edi
c000ecc2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000eccc:	45                   	inc    ebp
c000eccd:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ecd1:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ecd5:	75 c1                	jne    c000ec98 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ecd7:	43                   	inc    ebx
c000ecd8:	83 fb 20             	cmp    ebx,0x20
c000ecdb:	0f 85 79 ff ff ff    	jne    c000ec5a <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ece1:	83 c4 2c             	add    esp,0x2c
c000ece4:	5b                   	pop    ebx
c000ece5:	5e                   	pop    esi
c000ece6:	5f                   	pop    edi
c000ece7:	5d                   	pop    ebp
c000ece8:	c3                   	ret    
c000ece9:	90                   	nop

c000ecea <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ecea:	55                   	push   ebp
c000eceb:	57                   	push   edi
c000ecec:	56                   	push   esi
c000eced:	53                   	push   ebx
c000ecee:	83 ec 28             	sub    esp,0x28
c000ecf1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ecf5:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ecf9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ecfd:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ed01:	c1 e7 08             	shl    edi,0x8
c000ed04:	01 c7                	add    edi,eax
c000ed06:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ed0a:	c1 e6 08             	shl    esi,0x8
c000ed0d:	01 f0                	add    eax,esi
c000ed0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed17:	0f af c7             	imul   eax,edi
c000ed1a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed21:	50                   	push   eax
c000ed22:	e8 cc 8d ff ff       	call   c0007af3 <malloc>
c000ed27:	83 c4 10             	add    esp,0x10
c000ed2a:	85 c0                	test   eax,eax
c000ed2c:	89 c5                	mov    ebp,eax
c000ed2e:	75 10                	jne    c000ed40 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed30:	83 ec 0c             	sub    esp,0xc
c000ed33:	68 54 1f 02 c0       	push   0xc0021f54
c000ed38:	e8 a2 28 00 00       	call   c00115df <KePanic(char const*)>
c000ed3d:	83 c4 10             	add    esp,0x10
c000ed40:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed44:	ba 12 00 00 00       	mov    edx,0x12
c000ed49:	85 c0                	test   eax,eax
c000ed4b:	74 11                	je     c000ed5e <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed4d:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed51:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed55:	c1 fa 03             	sar    edx,0x3
c000ed58:	0f af d1             	imul   edx,ecx
c000ed5b:	83 c2 12             	add    edx,0x12
c000ed5e:	85 ff                	test   edi,edi
c000ed60:	74 06                	je     c000ed68 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed62:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed66:	75 12                	jne    c000ed7a <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed68:	83 ec 0c             	sub    esp,0xc
c000ed6b:	68 64 1f 02 c0       	push   0xc0021f64
c000ed70:	e8 b5 bb ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000ed75:	e9 b8 00 00 00       	jmp    c000ee32 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed7a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed7e:	83 f9 02             	cmp    ecx,0x2
c000ed81:	0f 85 96 00 00 00    	jne    c000ee1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed87:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed8c:	75 0e                	jne    c000ed9c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed8e:	85 c0                	test   eax,eax
c000ed90:	75 0a                	jne    c000ed9c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed92:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ed95:	83 e8 18             	sub    eax,0x18
c000ed98:	a8 f7                	test   al,0xf7
c000ed9a:	74 0a                	je     c000eda6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 79 1f 02 c0       	push   0xc0021f79
c000eda4:	eb 7f                	jmp    c000ee25 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eda6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000edae:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000edb6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000edba:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000edbe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000edc6:	75 0c                	jne    c000edd4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000edc8:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000edcd:	c1 e1 18             	shl    ecx,0x18
c000edd0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000edd4:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000edd9:	46                   	inc    esi
c000edda:	89 c8                	mov    eax,ecx
c000eddc:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ede1:	c1 e0 10             	shl    eax,0x10
c000ede4:	c1 e1 08             	shl    ecx,0x8
c000ede7:	09 c1                	or     ecx,eax
c000ede9:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eded:	09 c1                	or     ecx,eax
c000edef:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000edf3:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000edf7:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000edfb:	c1 f8 03             	sar    eax,0x3
c000edfe:	01 c2                	add    edx,eax
c000ee00:	89 f0                	mov    eax,esi
c000ee02:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee06:	39 c7                	cmp    edi,eax
c000ee08:	7f b0                	jg     c000edba <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee0a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee12:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee15:	7e 22                	jle    c000ee39 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee17:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ee1b:	eb 99                	jmp    c000edb6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee1d:	50                   	push   eax
c000ee1e:	50                   	push   eax
c000ee1f:	51                   	push   ecx
c000ee20:	68 87 1f 02 c0       	push   0xc0021f87
c000ee25:	e8 00 bb ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000ee2a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee2d:	e8 d1 8c ff ff       	call   c0007b03 <free>
c000ee32:	83 c4 10             	add    esp,0x10
c000ee35:	31 ed                	xor    ebp,ebp
c000ee37:	eb 0f                	jmp    c000ee48 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee3d:	89 38                	mov    DWORD PTR [eax],edi
c000ee3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee43:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ee46:	89 38                	mov    DWORD PTR [eax],edi
c000ee48:	83 c4 1c             	add    esp,0x1c
c000ee4b:	89 e8                	mov    eax,ebp
c000ee4d:	5b                   	pop    ebx
c000ee4e:	5e                   	pop    esi
c000ee4f:	5f                   	pop    edi
c000ee50:	5d                   	pop    ebp
c000ee51:	c3                   	ret    

c000ee52 <Video::putTGA(int, int, unsigned char*, int)>:
c000ee52:	55                   	push   ebp
c000ee53:	57                   	push   edi
c000ee54:	56                   	push   esi
c000ee55:	53                   	push   ebx
c000ee56:	83 ec 28             	sub    esp,0x28
c000ee59:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee5d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ee61:	50                   	push   eax
c000ee62:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee66:	50                   	push   eax
c000ee67:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee6b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee6f:	57                   	push   edi
c000ee70:	e8 75 fe ff ff       	call   c000ecea <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee75:	83 c4 20             	add    esp,0x20
c000ee78:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee7c:	85 c0                	test   eax,eax
c000ee7e:	74 35                	je     c000eeb5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee80:	89 c6                	mov    esi,eax
c000ee82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee86:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee8a:	39 d8                	cmp    eax,ebx
c000ee8c:	7e 27                	jle    c000eeb5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee8e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ee92:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ee96:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ee9a:	39 e9                	cmp    ecx,ebp
c000ee9c:	7e 14                	jle    c000eeb2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ee9e:	83 c6 04             	add    esi,0x4
c000eea1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000eea3:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000eea6:	53                   	push   ebx
c000eea7:	55                   	push   ebp
c000eea8:	45                   	inc    ebp
c000eea9:	57                   	push   edi
c000eeaa:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eead:	83 c4 10             	add    esp,0x10
c000eeb0:	eb e0                	jmp    c000ee92 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eeb2:	43                   	inc    ebx
c000eeb3:	eb cd                	jmp    c000ee82 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eeb5:	83 c4 1c             	add    esp,0x1c
c000eeb8:	5b                   	pop    ebx
c000eeb9:	5e                   	pop    esi
c000eeba:	5f                   	pop    edi
c000eebb:	5d                   	pop    ebp
c000eebc:	c3                   	ret    
c000eebd:	66 90                	xchg   ax,ax
c000eebf:	90                   	nop

c000eec0 <ACPI::close(int, int, void*)>:
c000eec0:	83 ec 1c             	sub    esp,0x1c
c000eec3:	83 ec 0c             	sub    esp,0xc
c000eec6:	68 e8 1f 02 c0       	push   0xc0021fe8
c000eecb:	e8 5a ba ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000eed0:	83 c4 10             	add    esp,0x10
c000eed3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eedb:	74 0b                	je     c000eee8 <ACPI::close(int, int, void*)+0x28>
c000eedd:	b8 00 00 00 00       	mov    eax,0x0
c000eee2:	e9 e1 00 00 00       	jmp    c000efc8 <ACPI::close(int, int, void*)+0x108>
c000eee7:	90                   	nop
c000eee8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eeed:	75 45                	jne    c000ef34 <ACPI::close(int, int, void*)+0x74>
c000eeef:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000eef4:	83 ec 08             	sub    esp,0x8
c000eef7:	50                   	push   eax
c000eef8:	68 f5 1f 02 c0       	push   0xc0021ff5
c000eefd:	e8 28 ba ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000ef02:	83 c4 10             	add    esp,0x10
c000ef05:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef0a:	85 c0                	test   eax,eax
c000ef0c:	74 0a                	je     c000ef18 <ACPI::close(int, int, void*)+0x58>
c000ef0e:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef13:	ff d0                	call   eax
c000ef15:	8d 76 00             	lea    esi,[esi+0x0]
c000ef18:	83 ec 0c             	sub    esp,0xc
c000ef1b:	68 b4 21 02 c0       	push   0xc00221b4
c000ef20:	e8 ba 26 00 00       	call   c00115df <KePanic(char const*)>
c000ef25:	83 c4 10             	add    esp,0x10
c000ef28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef2d:	e9 96 00 00 00       	jmp    c000efc8 <ACPI::close(int, int, void*)+0x108>
c000ef32:	66 90                	xchg   ax,ax
c000ef34:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef39:	0f 85 81 00 00 00    	jne    c000efc0 <ACPI::close(int, int, void*)+0x100>
c000ef3f:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef44:	83 ec 08             	sub    esp,0x8
c000ef47:	50                   	push   eax
c000ef48:	68 13 20 02 c0       	push   0xc0022013
c000ef4d:	e8 d8 b9 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000ef52:	83 c4 10             	add    esp,0x10
c000ef55:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef5a:	85 c0                	test   eax,eax
c000ef5c:	74 0a                	je     c000ef68 <ACPI::close(int, int, void*)+0xa8>
c000ef5e:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef63:	ff d0                	call   eax
c000ef65:	8d 76 00             	lea    esi,[esi+0x0]
c000ef68:	83 ec 0c             	sub    esp,0xc
c000ef6b:	68 2e 20 02 c0       	push   0xc002202e
c000ef70:	e8 b5 b9 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c000ef75:	83 c4 10             	add    esp,0x10
c000ef78:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef80:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ef85:	83 e0 02             	and    eax,0x2
c000ef88:	74 1e                	je     c000efa8 <ACPI::close(int, int, void*)+0xe8>
c000ef8a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ef91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef95:	89 c2                	mov    edx,eax
c000ef97:	ec                   	in     al,dx
c000ef98:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ef9c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000efa0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000efa4:	eb da                	jmp    c000ef80 <ACPI::close(int, int, void*)+0xc0>
c000efa6:	66 90                	xchg   ax,ax
c000efa8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000efaf:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000efb4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000efb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efbc:	ee                   	out    dx,al
c000efbd:	8d 76 00             	lea    esi,[esi+0x0]
c000efc0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efc5:	8d 76 00             	lea    esi,[esi+0x0]
c000efc8:	83 c4 1c             	add    esp,0x1c
c000efcb:	c3                   	ret    

c000efcc <findRSDP()>:
c000efcc:	83 ec 1c             	sub    esp,0x1c
c000efcf:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000efd4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efda:	83 e0 04             	and    eax,0x4
c000efdd:	0f b6 c0             	movzx  eax,al
c000efe0:	85 c0                	test   eax,eax
c000efe2:	75 08                	jne    c000efec <findRSDP()+0x20>
c000efe4:	b8 00 00 00 00       	mov    eax,0x0
c000efe9:	eb 75                	jmp    c000f060 <findRSDP()+0x94>
c000efeb:	90                   	nop
c000efec:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000eff1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000eff6:	7f 1c                	jg     c000f014 <findRSDP()+0x48>
c000eff8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000effd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f003:	83 e2 fb             	and    edx,0xfffffffb
c000f006:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f00c:	b8 00 00 00 00       	mov    eax,0x0
c000f011:	eb 4d                	jmp    c000f060 <findRSDP()+0x94>
c000f013:	90                   	nop
c000f014:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f01c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f024:	77 32                	ja     c000f058 <findRSDP()+0x8c>
c000f026:	83 ec 04             	sub    esp,0x4
c000f029:	6a 08                	push   0x8
c000f02b:	68 40 20 02 c0       	push   0xc0022040
c000f030:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f034:	e8 47 13 ff ff       	call   c0000380 <memcmp>
c000f039:	83 c4 10             	add    esp,0x10
c000f03c:	85 c0                	test   eax,eax
c000f03e:	0f 94 c0             	sete   al
c000f041:	0f b6 c0             	movzx  eax,al
c000f044:	85 c0                	test   eax,eax
c000f046:	74 08                	je     c000f050 <findRSDP()+0x84>
c000f048:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f04c:	eb 12                	jmp    c000f060 <findRSDP()+0x94>
c000f04e:	66 90                	xchg   ax,ax
c000f050:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f055:	eb c5                	jmp    c000f01c <findRSDP()+0x50>
c000f057:	90                   	nop
c000f058:	b8 00 00 00 00       	mov    eax,0x0
c000f05d:	8d 76 00             	lea    esi,[esi+0x0]
c000f060:	83 c4 1c             	add    esp,0x1c
c000f063:	c3                   	ret    

c000f064 <loadACPITables(unsigned char*)>:
c000f064:	57                   	push   edi
c000f065:	56                   	push   esi
c000f066:	53                   	push   ebx
c000f067:	83 ec 60             	sub    esp,0x60
c000f06a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f06f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f075:	83 e0 04             	and    eax,0x4
c000f078:	0f b6 c0             	movzx  eax,al
c000f07b:	85 c0                	test   eax,eax
c000f07d:	0f 84 41 02 00 00    	je     c000f2c4 <loadACPITables(unsigned char*)+0x260>
c000f083:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f088:	0f b6 c0             	movzx  eax,al
c000f08b:	85 c0                	test   eax,eax
c000f08d:	74 79                	je     c000f108 <loadACPITables(unsigned char*)+0xa4>
c000f08f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f093:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f097:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f09b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f09e:	83 e8 24             	sub    eax,0x24
c000f0a1:	c1 e8 03             	shr    eax,0x3
c000f0a4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0a8:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f0b0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0b4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f0b8:	0f 8d ba 00 00 00    	jge    c000f178 <loadACPITables(unsigned char*)+0x114>
c000f0be:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0c2:	83 c0 24             	add    eax,0x24
c000f0c5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0c9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0cd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0d1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0d5:	c1 e0 03             	shl    eax,0x3
c000f0d8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f0dc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f0e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0e5:	89 c1                	mov    ecx,eax
c000f0e7:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0ec:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ef:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f0f5:	89 ca                	mov    edx,ecx
c000f0f7:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f0fe:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f103:	eb ab                	jmp    c000f0b0 <loadACPITables(unsigned char*)+0x4c>
c000f105:	8d 76 00             	lea    esi,[esi+0x0]
c000f108:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f10c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f110:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f114:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f117:	83 e8 24             	sub    eax,0x24
c000f11a:	c1 e8 02             	shr    eax,0x2
c000f11d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f121:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f129:	8d 76 00             	lea    esi,[esi+0x0]
c000f12c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f130:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f134:	7d 42                	jge    c000f178 <loadACPITables(unsigned char*)+0x114>
c000f136:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f13a:	83 c0 24             	add    eax,0x24
c000f13d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f141:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f145:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f149:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f14d:	c1 e0 02             	shl    eax,0x2
c000f150:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f154:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f158:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f15a:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f15f:	8d 50 01             	lea    edx,[eax+0x1]
c000f162:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f168:	89 ca                	mov    edx,ecx
c000f16a:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f171:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f176:	eb b4                	jmp    c000f12c <loadACPITables(unsigned char*)+0xc8>
c000f178:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f180:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f185:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f189:	0f 8d 39 01 00 00    	jge    c000f2c8 <loadACPITables(unsigned char*)+0x264>
c000f18f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f193:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f19a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f19e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f1a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1aa:	25 ff 0f 00 00       	and    eax,0xfff
c000f1af:	89 c6                	mov    esi,eax
c000f1b1:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1b7:	83 ec 0c             	sub    esp,0xc
c000f1ba:	6a 01                	push   0x1
c000f1bc:	e8 54 a4 ff ff       	call   c0009615 <Virt::allocateKernelVirtualPages(int)>
c000f1c1:	83 c4 10             	add    esp,0x10
c000f1c4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1c8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1ce:	83 ec 0c             	sub    esp,0xc
c000f1d1:	6a 01                	push   0x1
c000f1d3:	6a 01                	push   0x1
c000f1d5:	50                   	push   eax
c000f1d6:	52                   	push   edx
c000f1d7:	53                   	push   ebx
c000f1d8:	e8 4b ad ff ff       	call   c0009f28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f1dd:	83 c4 20             	add    esp,0x20
c000f1e0:	09 f0                	or     eax,esi
c000f1e2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1e6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1ea:	c1 e0 03             	shl    eax,0x3
c000f1ed:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f1f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f1fe:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f206:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f20a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f20e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f212:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f216:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f21a:	89 c6                	mov    esi,eax
c000f21c:	89 d7                	mov    edi,edx
c000f21e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f220:	89 c8                	mov    eax,ecx
c000f222:	89 fa                	mov    edx,edi
c000f224:	89 f3                	mov    ebx,esi
c000f226:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f22a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f22e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f232:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f236:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f239:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f23d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f241:	05 00 10 00 00       	add    eax,0x1000
c000f246:	c1 e8 0c             	shr    eax,0xc
c000f249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f24d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f251:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f255:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f259:	25 ff 0f 00 00       	and    eax,0xfff
c000f25e:	89 c6                	mov    esi,eax
c000f260:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f266:	83 ec 0c             	sub    esp,0xc
c000f269:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f26d:	e8 a3 a3 ff ff       	call   c0009615 <Virt::allocateKernelVirtualPages(int)>
c000f272:	83 c4 10             	add    esp,0x10
c000f275:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f279:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f27f:	83 ec 0c             	sub    esp,0xc
c000f282:	6a 01                	push   0x1
c000f284:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f288:	50                   	push   eax
c000f289:	52                   	push   edx
c000f28a:	53                   	push   ebx
c000f28b:	e8 98 ac ff ff       	call   c0009f28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f290:	83 c4 20             	add    esp,0x20
c000f293:	09 f0                	or     eax,esi
c000f295:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f299:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f29d:	83 ec 0c             	sub    esp,0xc
c000f2a0:	50                   	push   eax
c000f2a1:	e8 83 a6 ff ff       	call   c0009929 <Virt::freeKernelVirtualPages(unsigned long)>
c000f2a6:	83 c4 10             	add    esp,0x10
c000f2a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f2ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f2b1:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f2b8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f2bd:	e9 be fe ff ff       	jmp    c000f180 <loadACPITables(unsigned char*)+0x11c>
c000f2c2:	66 90                	xchg   ax,ax
c000f2c4:	90                   	nop
c000f2c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2c8:	83 c4 60             	add    esp,0x60
c000f2cb:	5b                   	pop    ebx
c000f2cc:	5e                   	pop    esi
c000f2cd:	5f                   	pop    edi
c000f2ce:	c3                   	ret    
c000f2cf:	90                   	nop

c000f2d0 <findRSDT(unsigned char*)>:
c000f2d0:	57                   	push   edi
c000f2d1:	56                   	push   esi
c000f2d2:	53                   	push   ebx
c000f2d3:	83 ec 50             	sub    esp,0x50
c000f2d6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f2db:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f2e1:	83 e0 04             	and    eax,0x4
c000f2e4:	0f b6 c0             	movzx  eax,al
c000f2e7:	85 c0                	test   eax,eax
c000f2e9:	75 0d                	jne    c000f2f8 <findRSDT(unsigned char*)+0x28>
c000f2eb:	b8 00 00 00 00       	mov    eax,0x0
c000f2f0:	e9 2b 01 00 00       	jmp    c000f420 <findRSDT(unsigned char*)+0x150>
c000f2f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f8:	89 e0                	mov    eax,esp
c000f2fa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f2fe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f302:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f306:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f30e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f312:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f316:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f31a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f31e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f322:	89 c6                	mov    esi,eax
c000f324:	89 d7                	mov    edi,edx
c000f326:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f328:	89 c8                	mov    eax,ecx
c000f32a:	89 fa                	mov    edx,edi
c000f32c:	89 f3                	mov    ebx,esi
c000f32e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f332:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f336:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f33a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f33e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f342:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f34a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f34e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f352:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f35a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f35e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f362:	25 ff 0f 00 00       	and    eax,0xfff
c000f367:	89 c6                	mov    esi,eax
c000f369:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f36f:	83 ec 0c             	sub    esp,0xc
c000f372:	6a 02                	push   0x2
c000f374:	e8 9c a2 ff ff       	call   c0009615 <Virt::allocateKernelVirtualPages(int)>
c000f379:	83 c4 10             	add    esp,0x10
c000f37c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f380:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f386:	83 ec 0c             	sub    esp,0xc
c000f389:	6a 01                	push   0x1
c000f38b:	6a 02                	push   0x2
c000f38d:	50                   	push   eax
c000f38e:	52                   	push   edx
c000f38f:	53                   	push   ebx
c000f390:	e8 93 ab ff ff       	call   c0009f28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f395:	83 c4 20             	add    esp,0x20
c000f398:	09 f0                	or     eax,esi
c000f39a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f39e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3a2:	25 ff 0f 00 00       	and    eax,0xfff
c000f3a7:	89 c6                	mov    esi,eax
c000f3a9:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3af:	83 ec 0c             	sub    esp,0xc
c000f3b2:	6a 02                	push   0x2
c000f3b4:	e8 5c a2 ff ff       	call   c0009615 <Virt::allocateKernelVirtualPages(int)>
c000f3b9:	83 c4 10             	add    esp,0x10
c000f3bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f3c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3c6:	83 ec 0c             	sub    esp,0xc
c000f3c9:	6a 01                	push   0x1
c000f3cb:	6a 02                	push   0x2
c000f3cd:	50                   	push   eax
c000f3ce:	52                   	push   edx
c000f3cf:	53                   	push   ebx
c000f3d0:	e8 53 ab ff ff       	call   c0009f28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3d5:	83 c4 20             	add    esp,0x20
c000f3d8:	09 f0                	or     eax,esi
c000f3da:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f3de:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f3e3:	85 c0                	test   eax,eax
c000f3e5:	75 11                	jne    c000f3f8 <findRSDT(unsigned char*)+0x128>
c000f3e7:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f3ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3f6:	eb 24                	jmp    c000f41c <findRSDT(unsigned char*)+0x14c>
c000f3f8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f3fd:	83 f8 02             	cmp    eax,0x2
c000f400:	75 12                	jne    c000f414 <findRSDT(unsigned char*)+0x144>
c000f402:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f40d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f411:	eb 09                	jmp    c000f41c <findRSDT(unsigned char*)+0x14c>
c000f413:	90                   	nop
c000f414:	b8 00 00 00 00       	mov    eax,0x0
c000f419:	eb 05                	jmp    c000f420 <findRSDT(unsigned char*)+0x150>
c000f41b:	90                   	nop
c000f41c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f420:	83 c4 50             	add    esp,0x50
c000f423:	5b                   	pop    ebx
c000f424:	5e                   	pop    esi
c000f425:	5f                   	pop    edi
c000f426:	c3                   	ret    
c000f427:	90                   	nop

c000f428 <findDataTable(unsigned char*, char*)>:
c000f428:	83 ec 1c             	sub    esp,0x1c
c000f42b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f430:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f436:	83 e0 04             	and    eax,0x4
c000f439:	0f b6 c0             	movzx  eax,al
c000f43c:	85 c0                	test   eax,eax
c000f43e:	75 08                	jne    c000f448 <findDataTable(unsigned char*, char*)+0x20>
c000f440:	b8 00 00 00 00       	mov    eax,0x0
c000f445:	eb 5d                	jmp    c000f4a4 <findDataTable(unsigned char*, char*)+0x7c>
c000f447:	90                   	nop
c000f448:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f450:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f455:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f459:	7d 41                	jge    c000f49c <findDataTable(unsigned char*, char*)+0x74>
c000f45b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f45f:	c1 e0 03             	shl    eax,0x3
c000f462:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f467:	83 ec 04             	sub    esp,0x4
c000f46a:	6a 04                	push   0x4
c000f46c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f470:	50                   	push   eax
c000f471:	e8 0a 0f ff ff       	call   c0000380 <memcmp>
c000f476:	83 c4 10             	add    esp,0x10
c000f479:	85 c0                	test   eax,eax
c000f47b:	0f 94 c0             	sete   al
c000f47e:	0f b6 c0             	movzx  eax,al
c000f481:	85 c0                	test   eax,eax
c000f483:	74 0f                	je     c000f494 <findDataTable(unsigned char*, char*)+0x6c>
c000f485:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f489:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f490:	eb 12                	jmp    c000f4a4 <findDataTable(unsigned char*, char*)+0x7c>
c000f492:	66 90                	xchg   ax,ax
c000f494:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f499:	eb b5                	jmp    c000f450 <findDataTable(unsigned char*, char*)+0x28>
c000f49b:	90                   	nop
c000f49c:	b8 00 00 00 00       	mov    eax,0x0
c000f4a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f4a4:	83 c4 1c             	add    esp,0x1c
c000f4a7:	c3                   	ret    

c000f4a8 <scanMADT()>:
c000f4a8:	53                   	push   ebx
c000f4a9:	83 ec 38             	sub    esp,0x38
c000f4ac:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f4b1:	25 00 04 00 00       	and    eax,0x400
c000f4b6:	74 14                	je     c000f4cc <scanMADT()+0x24>
c000f4b8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4bd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4c3:	83 e2 fb             	and    edx,0xfffffffb
c000f4c6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4cc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4d1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4d7:	83 e0 04             	and    eax,0x4
c000f4da:	0f b6 c0             	movzx  eax,al
c000f4dd:	85 c0                	test   eax,eax
c000f4df:	0f 84 6b 04 00 00    	je     c000f950 <scanMADT()+0x4a8>
c000f4e5:	e8 e2 fa ff ff       	call   c000efcc <findRSDP()>
c000f4ea:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f4ef:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f4f4:	85 c0                	test   eax,eax
c000f4f6:	75 1c                	jne    c000f514 <scanMADT()+0x6c>
c000f4f8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4fd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f503:	83 e2 fb             	and    edx,0xfffffffb
c000f506:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f50c:	e9 47 04 00 00       	jmp    c000f958 <scanMADT()+0x4b0>
c000f511:	8d 76 00             	lea    esi,[esi+0x0]
c000f514:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f519:	83 ec 0c             	sub    esp,0xc
c000f51c:	50                   	push   eax
c000f51d:	e8 ae fd ff ff       	call   c000f2d0 <findRSDT(unsigned char*)>
c000f522:	83 c4 10             	add    esp,0x10
c000f525:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f52a:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f52f:	85 c0                	test   eax,eax
c000f531:	75 19                	jne    c000f54c <scanMADT()+0xa4>
c000f533:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f538:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f53e:	83 e2 fb             	and    edx,0xfffffffb
c000f541:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f547:	e9 0c 04 00 00       	jmp    c000f958 <scanMADT()+0x4b0>
c000f54c:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f551:	83 ec 0c             	sub    esp,0xc
c000f554:	50                   	push   eax
c000f555:	e8 0a fb ff ff       	call   c000f064 <loadACPITables(unsigned char*)>
c000f55a:	83 c4 10             	add    esp,0x10
c000f55d:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f562:	83 ec 08             	sub    esp,0x8
c000f565:	68 49 20 02 c0       	push   0xc0022049
c000f56a:	50                   	push   eax
c000f56b:	e8 b8 fe ff ff       	call   c000f428 <findDataTable(unsigned char*, char*)>
c000f570:	83 c4 10             	add    esp,0x10
c000f573:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f577:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f57c:	75 1a                	jne    c000f598 <scanMADT()+0xf0>
c000f57e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f583:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f589:	83 e2 fe             	and    edx,0xfffffffe
c000f58c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f592:	e9 c1 03 00 00       	jmp    c000f958 <scanMADT()+0x4b0>
c000f597:	90                   	nop
c000f598:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f5a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5a7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f5ab:	0f 87 a7 03 00 00    	ja     c000f958 <scanMADT()+0x4b0>
c000f5b1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f5b9:	0f 87 99 03 00 00    	ja     c000f958 <scanMADT()+0x4b0>
c000f5bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f5c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5cb:	8d 50 01             	lea    edx,[eax+0x1]
c000f5ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5d6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5da:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f5de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5e2:	8d 50 01             	lea    edx,[eax+0x1]
c000f5e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5ed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5f1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f5f5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f5fa:	83 f8 02             	cmp    eax,0x2
c000f5fd:	0f 86 51 03 00 00    	jbe    c000f954 <scanMADT()+0x4ac>
c000f603:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f608:	85 c0                	test   eax,eax
c000f60a:	75 58                	jne    c000f664 <scanMADT()+0x1bc>
c000f60c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f610:	8d 50 01             	lea    edx,[eax+0x1]
c000f613:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f617:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f61d:	0f b6 d2             	movzx  edx,dl
c000f620:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f624:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f628:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f62e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f632:	8d 50 01             	lea    edx,[eax+0x1]
c000f635:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f639:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f63f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f642:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f648:	0f b6 d2             	movzx  edx,dl
c000f64b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f64f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f653:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f659:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f65e:	e9 d9 02 00 00       	jmp    c000f93c <scanMADT()+0x494>
c000f663:	90                   	nop
c000f664:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f669:	83 f8 01             	cmp    eax,0x1
c000f66c:	0f 85 1a 01 00 00    	jne    c000f78c <scanMADT()+0x2e4>
c000f672:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f676:	8d 50 01             	lea    edx,[eax+0x1]
c000f679:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f67d:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f683:	0f b6 d2             	movzx  edx,dl
c000f686:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f68a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f68e:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f694:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f699:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f69d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6a1:	01 d0                	add    eax,edx
c000f6a3:	83 c0 2c             	add    eax,0x2c
c000f6a6:	8a 00                	mov    al,BYTE PTR [eax]
c000f6a8:	0f b6 d0             	movzx  edx,al
c000f6ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6af:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6b6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6ba:	0f b6 c0             	movzx  eax,al
c000f6bd:	c1 e0 08             	shl    eax,0x8
c000f6c0:	89 d1                	mov    ecx,edx
c000f6c2:	09 c1                	or     ecx,eax
c000f6c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6c8:	8d 50 02             	lea    edx,[eax+0x2]
c000f6cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6cf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6d3:	0f b6 c0             	movzx  eax,al
c000f6d6:	c1 e0 10             	shl    eax,0x10
c000f6d9:	09 c1                	or     ecx,eax
c000f6db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6df:	8d 50 03             	lea    edx,[eax+0x3]
c000f6e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6e6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6ea:	0f b6 c0             	movzx  eax,al
c000f6ed:	c1 e0 18             	shl    eax,0x18
c000f6f0:	09 c1                	or     ecx,eax
c000f6f2:	89 ca                	mov    edx,ecx
c000f6f4:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6f9:	0f b6 c0             	movzx  eax,al
c000f6fc:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f703:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f708:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f70c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f710:	01 d0                	add    eax,edx
c000f712:	83 c0 2c             	add    eax,0x2c
c000f715:	8a 00                	mov    al,BYTE PTR [eax]
c000f717:	0f b6 d0             	movzx  edx,al
c000f71a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f71e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f721:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f725:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f729:	0f b6 c0             	movzx  eax,al
c000f72c:	c1 e0 08             	shl    eax,0x8
c000f72f:	89 d1                	mov    ecx,edx
c000f731:	09 c1                	or     ecx,eax
c000f733:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f737:	8d 50 02             	lea    edx,[eax+0x2]
c000f73a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f73e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f742:	0f b6 c0             	movzx  eax,al
c000f745:	c1 e0 10             	shl    eax,0x10
c000f748:	09 c1                	or     ecx,eax
c000f74a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f74e:	8d 50 03             	lea    edx,[eax+0x3]
c000f751:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f755:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f759:	0f b6 c0             	movzx  eax,al
c000f75c:	c1 e0 18             	shl    eax,0x18
c000f75f:	09 c1                	or     ecx,eax
c000f761:	89 ca                	mov    edx,ecx
c000f763:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f768:	0f b6 c0             	movzx  eax,al
c000f76b:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f772:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f777:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f77c:	83 c0 01             	add    eax,0x1
c000f77f:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f784:	e9 b3 01 00 00       	jmp    c000f93c <scanMADT()+0x494>
c000f789:	8d 76 00             	lea    esi,[esi+0x0]
c000f78c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f791:	83 f8 02             	cmp    eax,0x2
c000f794:	0f 85 ea 00 00 00    	jne    c000f884 <scanMADT()+0x3dc>
c000f79a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f79e:	8d 50 01             	lea    edx,[eax+0x1]
c000f7a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7ad:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f7b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7b5:	8d 50 01             	lea    edx,[eax+0x1]
c000f7b8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7c0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7c4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f7c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7d0:	01 d0                	add    eax,edx
c000f7d2:	83 c0 2c             	add    eax,0x2c
c000f7d5:	8a 00                	mov    al,BYTE PTR [eax]
c000f7d7:	0f b6 d0             	movzx  edx,al
c000f7da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7de:	8d 48 01             	lea    ecx,[eax+0x1]
c000f7e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7e5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f7e9:	0f b6 c0             	movzx  eax,al
c000f7ec:	c1 e0 08             	shl    eax,0x8
c000f7ef:	89 d1                	mov    ecx,edx
c000f7f1:	09 c1                	or     ecx,eax
c000f7f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7f7:	8d 50 02             	lea    edx,[eax+0x2]
c000f7fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7fe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f802:	0f b6 c0             	movzx  eax,al
c000f805:	c1 e0 10             	shl    eax,0x10
c000f808:	09 c1                	or     ecx,eax
c000f80a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f80e:	8d 50 03             	lea    edx,[eax+0x3]
c000f811:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f815:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f819:	0f b6 c0             	movzx  eax,al
c000f81c:	c1 e0 18             	shl    eax,0x18
c000f81f:	09 c8                	or     eax,ecx
c000f821:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f825:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f82a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f82e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f832:	01 d0                	add    eax,edx
c000f834:	83 c0 2c             	add    eax,0x2c
c000f837:	8a 00                	mov    al,BYTE PTR [eax]
c000f839:	0f b6 d0             	movzx  edx,al
c000f83c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f840:	8d 48 01             	lea    ecx,[eax+0x1]
c000f843:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f847:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f84b:	0f b6 c0             	movzx  eax,al
c000f84e:	c1 e0 08             	shl    eax,0x8
c000f851:	09 d0                	or     eax,edx
c000f853:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f858:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f85d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f862:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f866:	88 90 08 38 02 c0    	mov    BYTE PTR [eax-0x3ffdc7f8],dl
c000f86c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f871:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f876:	66 89 94 00 c0 bb 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd4440],dx
c000f87e:	e9 b9 00 00 00       	jmp    c000f93c <scanMADT()+0x494>
c000f883:	90                   	nop
c000f884:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f889:	83 f8 04             	cmp    eax,0x4
c000f88c:	0f 85 9a 00 00 00    	jne    c000f92c <scanMADT()+0x484>
c000f892:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f896:	8d 50 01             	lea    edx,[eax+0x1]
c000f899:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f89d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8a1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8a5:	0f b6 c0             	movzx  eax,al
c000f8a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8b4:	01 d0                	add    eax,edx
c000f8b6:	83 c0 2c             	add    eax,0x2c
c000f8b9:	8a 00                	mov    al,BYTE PTR [eax]
c000f8bb:	0f b6 d0             	movzx  edx,al
c000f8be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8c2:	8d 48 01             	lea    ecx,[eax+0x1]
c000f8c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8c9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f8cd:	0f b6 c0             	movzx  eax,al
c000f8d0:	c1 e0 08             	shl    eax,0x8
c000f8d3:	09 d0                	or     eax,edx
c000f8d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f8d9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f8de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8e2:	8d 50 01             	lea    edx,[eax+0x1]
c000f8e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8ed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8f1:	0f b6 c0             	movzx  eax,al
c000f8f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8fc:	c1 e0 08             	shl    eax,0x8
c000f8ff:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f903:	89 c1                	mov    ecx,eax
c000f905:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f909:	c1 e0 18             	shl    eax,0x18
c000f90c:	89 c3                	mov    ebx,eax
c000f90e:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f913:	8d 50 01             	lea    edx,[eax+0x1]
c000f916:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f91c:	09 d9                	or     ecx,ebx
c000f91e:	89 ca                	mov    edx,ecx
c000f920:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f927:	eb 13                	jmp    c000f93c <scanMADT()+0x494>
c000f929:	8d 76 00             	lea    esi,[esi+0x0]
c000f92c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f931:	83 f8 05             	cmp    eax,0x5
c000f934:	75 06                	jne    c000f93c <scanMADT()+0x494>
c000f936:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f93b:	90                   	nop
c000f93c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f941:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f945:	01 d0                	add    eax,edx
c000f947:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f94b:	e9 50 fc ff ff       	jmp    c000f5a0 <scanMADT()+0xf8>
c000f950:	90                   	nop
c000f951:	eb 05                	jmp    c000f958 <scanMADT()+0x4b0>
c000f953:	90                   	nop
c000f954:	90                   	nop
c000f955:	8d 76 00             	lea    esi,[esi+0x0]
c000f958:	83 c4 38             	add    esp,0x38
c000f95b:	5b                   	pop    ebx
c000f95c:	c3                   	ret    
c000f95d:	90                   	nop
c000f95e:	66 90                	xchg   ax,ax

c000f960 <ACPI::ACPI()>:
c000f960:	83 ec 0c             	sub    esp,0xc
c000f963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f967:	83 ec 08             	sub    esp,0x8
c000f96a:	68 4e 20 02 c0       	push   0xc002204e
c000f96f:	50                   	push   eax
c000f970:	e8 e3 d1 ff ff       	call   c000cb58 <Device::Device(char const*)>
c000f975:	83 c4 10             	add    esp,0x10
c000f978:	ba 58 22 02 c0       	mov    edx,0xc0022258
c000f97d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f981:	89 10                	mov    DWORD PTR [eax],edx
c000f983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f987:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f992:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9a0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f9aa:	e8 f9 fa ff ff       	call   c000f4a8 <scanMADT()>
c000f9af:	90                   	nop
c000f9b0:	83 c4 0c             	add    esp,0xc
c000f9b3:	c3                   	ret    

c000f9b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f9b4:	83 ec 2c             	sub    esp,0x2c
c000f9b7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f9bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f9bf:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f9c3:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f9c7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f9cc:	88 c8                	mov    al,cl
c000f9ce:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f9d2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f9d7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f9df:	90                   	nop
c000f9e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9e4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f9ea:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f9ee:	0f 8d b0 00 00 00    	jge    c000faa4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f9f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9fc:	83 c2 2a             	add    edx,0x2a
c000f9ff:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000fa03:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa08:	0f b7 c0             	movzx  eax,ax
c000fa0b:	39 c2                	cmp    edx,eax
c000fa0d:	0f 85 85 00 00 00    	jne    c000fa98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa1b:	83 c2 2a             	add    edx,0x2a
c000fa1e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa22:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa27:	0f b6 c0             	movzx  eax,al
c000fa2a:	39 c2                	cmp    edx,eax
c000fa2c:	75 6a                	jne    c000fa98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa2e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fa33:	85 c0                	test   eax,eax
c000fa35:	74 3d                	je     c000fa74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000fa37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa3f:	83 c2 2a             	add    edx,0x2a
c000fa42:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fa46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa4d:	39 c2                	cmp    edx,eax
c000fa4f:	74 13                	je     c000fa64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fa51:	83 ec 0c             	sub    esp,0xc
c000fa54:	68 d8 21 02 c0       	push   0xc00221d8
c000fa59:	e8 81 1b 00 00       	call   c00115df <KePanic(char const*)>
c000fa5e:	83 c4 10             	add    esp,0x10
c000fa61:	8d 76 00             	lea    esi,[esi+0x0]
c000fa64:	83 ec 0c             	sub    esp,0xc
c000fa67:	68 53 20 02 c0       	push   0xc0022053
c000fa6c:	e8 6e 1b 00 00       	call   c00115df <KePanic(char const*)>
c000fa71:	83 c4 10             	add    esp,0x10
c000fa74:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa80:	83 c2 2a             	add    edx,0x2a
c000fa83:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fa87:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa89:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fa8c:	89 01                	mov    DWORD PTR [ecx],eax
c000fa8e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fa91:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fa96:	66 90                	xchg   ax,ax
c000fa98:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fa9d:	e9 3e ff ff ff       	jmp    c000f9e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000faa2:	66 90                	xchg   ax,ax
c000faa4:	90                   	nop
c000faa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000faa9:	83 c4 2c             	add    esp,0x2c
c000faac:	c2 04 00             	ret    0x4
c000faaf:	90                   	nop

c000fab0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fab0:	83 ec 1c             	sub    esp,0x1c
c000fab3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fab7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fabb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fabf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fac4:	88 c8                	mov    al,cl
c000fac6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000faca:	88 d0                	mov    al,dl
c000facc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fad4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fade:	83 c2 2a             	add    edx,0x2a
c000fae1:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000fae5:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000fae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faed:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000faf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faf7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fafa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fafe:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000fb03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb07:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb0d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb11:	83 c0 01             	add    eax,0x1
c000fb14:	88 c1                	mov    cl,al
c000fb16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb1a:	83 c2 2a             	add    edx,0x2a
c000fb1d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb25:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb2f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb32:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fb36:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fb3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb3e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb44:	8d 50 01             	lea    edx,[eax+0x1]
c000fb47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb4b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fb51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb55:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb5b:	3d 00 02 00 00       	cmp    eax,0x200
c000fb60:	75 12                	jne    c000fb74 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fb62:	83 ec 0c             	sub    esp,0xc
c000fb65:	68 62 20 02 c0       	push   0xc0022062
c000fb6a:	e8 70 1a 00 00       	call   c00115df <KePanic(char const*)>
c000fb6f:	83 c4 10             	add    esp,0x10
c000fb72:	66 90                	xchg   ax,ax
c000fb74:	90                   	nop
c000fb75:	83 c4 1c             	add    esp,0x1c
c000fb78:	c3                   	ret    
c000fb79:	90                   	nop
c000fb7a:	66 90                	xchg   ax,ax

c000fb7c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fb7c:	b8 00 00 00 00       	mov    eax,0x0
c000fb81:	c3                   	ret    
c000fb82:	66 90                	xchg   ax,ax

c000fb84 <ACPI::detectPCI()>:
c000fb84:	53                   	push   ebx
c000fb85:	83 ec 28             	sub    esp,0x28
c000fb88:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fb8d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fb92:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fb97:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fb9d:	83 e0 04             	and    eax,0x4
c000fba0:	0f b6 c0             	movzx  eax,al
c000fba3:	85 c0                	test   eax,eax
c000fba5:	74 2d                	je     c000fbd4 <ACPI::detectPCI()+0x50>
c000fba7:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fbac:	83 ec 08             	sub    esp,0x8
c000fbaf:	68 7f 20 02 c0       	push   0xc002207f
c000fbb4:	50                   	push   eax
c000fbb5:	e8 6e f8 ff ff       	call   c000f428 <findDataTable(unsigned char*, char*)>
c000fbba:	83 c4 10             	add    esp,0x10
c000fbbd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbc1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fbc6:	74 0c                	je     c000fbd4 <ACPI::detectPCI()+0x50>
c000fbc8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbcd:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbd2:	66 90                	xchg   ax,ax
c000fbd4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fbdc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbe0:	8a 00                	mov    al,BYTE PTR [eax]
c000fbe2:	0f b6 c0             	movzx  eax,al
c000fbe5:	83 f8 01             	cmp    eax,0x1
c000fbe8:	75 0e                	jne    c000fbf8 <ACPI::detectPCI()+0x74>
c000fbea:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbef:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbf4:	eb 2e                	jmp    c000fc24 <ACPI::detectPCI()+0xa0>
c000fbf6:	66 90                	xchg   ax,ax
c000fbf8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbfc:	8a 00                	mov    al,BYTE PTR [eax]
c000fbfe:	0f b6 c0             	movzx  eax,al
c000fc01:	83 f8 02             	cmp    eax,0x2
c000fc04:	75 1e                	jne    c000fc24 <ACPI::detectPCI()+0xa0>
c000fc06:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc0b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc10:	85 c0                	test   eax,eax
c000fc12:	74 10                	je     c000fc24 <ACPI::detectPCI()+0xa0>
c000fc14:	83 ec 0c             	sub    esp,0xc
c000fc17:	68 08 22 02 c0       	push   0xc0022208
c000fc1c:	e8 be 19 00 00       	call   c00115df <KePanic(char const*)>
c000fc21:	83 c4 10             	add    esp,0x10
c000fc24:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fc28:	83 f0 01             	xor    eax,0x1
c000fc2b:	0f b6 c0             	movzx  eax,al
c000fc2e:	85 c0                	test   eax,eax
c000fc30:	74 46                	je     c000fc78 <ACPI::detectPCI()+0xf4>
c000fc32:	e8 f9 04 ff ff       	call   c0000130 <manualPCIProbe>
c000fc37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc3b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fc40:	75 0e                	jne    c000fc50 <ACPI::detectPCI()+0xcc>
c000fc42:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc47:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc4c:	eb 2a                	jmp    c000fc78 <ACPI::detectPCI()+0xf4>
c000fc4e:	66 90                	xchg   ax,ax
c000fc50:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fc55:	75 21                	jne    c000fc78 <ACPI::detectPCI()+0xf4>
c000fc57:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc5c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc61:	85 c0                	test   eax,eax
c000fc63:	74 13                	je     c000fc78 <ACPI::detectPCI()+0xf4>
c000fc65:	83 ec 0c             	sub    esp,0xc
c000fc68:	68 08 22 02 c0       	push   0xc0022208
c000fc6d:	e8 6d 19 00 00       	call   c00115df <KePanic(char const*)>
c000fc72:	83 c4 10             	add    esp,0x10
c000fc75:	8d 76 00             	lea    esi,[esi+0x0]
c000fc78:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fc7d:	85 c0                	test   eax,eax
c000fc7f:	0f 84 87 00 00 00    	je     c000fd0c <ACPI::detectPCI()+0x188>
c000fc85:	83 ec 0c             	sub    esp,0xc
c000fc88:	68 84 20 02 c0       	push   0xc0022084
c000fc8d:	e8 4f 12 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c000fc92:	83 c4 10             	add    esp,0x10
c000fc95:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fca4:	e8 4a 7e ff ff       	call   c0007af3 <malloc>
c000fca9:	83 c4 10             	add    esp,0x10
c000fcac:	89 c3                	mov    ebx,eax
c000fcae:	83 ec 0c             	sub    esp,0xc
c000fcb1:	53                   	push   ebx
c000fcb2:	e8 43 b5 00 00       	call   c001b1fa <PCI::PCI()>
c000fcb7:	83 c4 10             	add    esp,0x10
c000fcba:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fcbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcc2:	83 ec 08             	sub    esp,0x8
c000fcc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcc9:	50                   	push   eax
c000fcca:	e8 f1 cc ff ff       	call   c000c9c0 <Device::addChild(Device*)>
c000fccf:	83 c4 10             	add    esp,0x10
c000fcd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcd6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd8:	83 c0 08             	add    eax,0x8
c000fcdb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcdd:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fce2:	85 d2                	test   edx,edx
c000fce4:	74 0a                	je     c000fcf0 <ACPI::detectPCI()+0x16c>
c000fce6:	ba 01 00 00 00       	mov    edx,0x1
c000fceb:	eb 0b                	jmp    c000fcf8 <ACPI::detectPCI()+0x174>
c000fced:	8d 76 00             	lea    esi,[esi+0x0]
c000fcf0:	ba 02 00 00 00       	mov    edx,0x2
c000fcf5:	8d 76 00             	lea    esi,[esi+0x0]
c000fcf8:	6a 00                	push   0x0
c000fcfa:	6a 00                	push   0x0
c000fcfc:	52                   	push   edx
c000fcfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd01:	ff d0                	call   eax
c000fd03:	83 c4 10             	add    esp,0x10
c000fd06:	e9 91 00 00 00       	jmp    c000fd9c <ACPI::detectPCI()+0x218>
c000fd0b:	90                   	nop
c000fd0c:	83 ec 0c             	sub    esp,0xc
c000fd0f:	68 9c 20 02 c0       	push   0xc002209c
c000fd14:	e8 c8 11 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c000fd19:	83 c4 10             	add    esp,0x10
c000fd1c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd23:	83 ec 0c             	sub    esp,0xc
c000fd26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd2a:	e8 c4 7d ff ff       	call   c0007af3 <malloc>
c000fd2f:	83 c4 10             	add    esp,0x10
c000fd32:	89 c3                	mov    ebx,eax
c000fd34:	83 ec 0c             	sub    esp,0xc
c000fd37:	53                   	push   ebx
c000fd38:	e8 65 c0 00 00       	call   c001bda2 <IDE::IDE()>
c000fd3d:	83 c4 10             	add    esp,0x10
c000fd40:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd48:	83 ec 08             	sub    esp,0x8
c000fd4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd4f:	50                   	push   eax
c000fd50:	e8 6b cc ff ff       	call   c000c9c0 <Device::addChild(Device*)>
c000fd55:	83 c4 10             	add    esp,0x10
c000fd58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd5c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fd66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd6a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fd73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd77:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fd80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd84:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd86:	83 c0 08             	add    eax,0x8
c000fd89:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd8b:	6a 00                	push   0x0
c000fd8d:	6a 00                	push   0x0
c000fd8f:	6a 00                	push   0x0
c000fd91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd95:	ff d0                	call   eax
c000fd97:	83 c4 10             	add    esp,0x10
c000fd9a:	66 90                	xchg   ax,ax
c000fd9c:	90                   	nop
c000fd9d:	83 c4 28             	add    esp,0x28
c000fda0:	5b                   	pop    ebx
c000fda1:	c3                   	ret    
c000fda2:	66 90                	xchg   ax,ax

c000fda4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fda4:	83 ec 1c             	sub    esp,0x1c
c000fda7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdab:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fdae:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fdb2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdb7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdbc:	83 ec 08             	sub    esp,0x8
c000fdbf:	52                   	push   edx
c000fdc0:	50                   	push   eax
c000fdc1:	e8 f6 73 ff ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c000fdc6:	83 c4 10             	add    esp,0x10
c000fdc9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fdcd:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdd2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdd7:	83 ec 04             	sub    esp,0x4
c000fdda:	6a 01                	push   0x1
c000fddc:	52                   	push   edx
c000fddd:	50                   	push   eax
c000fdde:	e8 f1 74 ff ff       	call   c00072d4 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fde3:	83 c4 10             	add    esp,0x10
c000fde6:	90                   	nop
c000fde7:	83 c4 1c             	add    esp,0x1c
c000fdea:	c3                   	ret    
c000fdeb:	90                   	nop

c000fdec <ACPI::sleep()>:
c000fdec:	83 ec 0c             	sub    esp,0xc
c000fdef:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fdf4:	85 c0                	test   eax,eax
c000fdf6:	74 08                	je     c000fe00 <ACPI::sleep()+0x14>
c000fdf8:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fdfd:	ff d0                	call   eax
c000fdff:	90                   	nop
c000fe00:	90                   	nop
c000fe01:	83 c4 0c             	add    esp,0xc
c000fe04:	c3                   	ret    
c000fe05:	90                   	nop
c000fe06:	66 90                	xchg   ax,ax

c000fe08 <ACPI::open(int, int, void*)>:
c000fe08:	55                   	push   ebp
c000fe09:	89 e5                	mov    ebp,esp
c000fe0b:	53                   	push   ebx
c000fe0c:	81 ec 74 01 00 00    	sub    esp,0x174
c000fe12:	83 ec 0c             	sub    esp,0xc
c000fe15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe18:	e8 67 fd ff ff       	call   c000fb84 <ACPI::detectPCI()>
c000fe1d:	83 c4 10             	add    esp,0x10
c000fe20:	83 ec 0c             	sub    esp,0xc
c000fe23:	68 30 22 02 c0       	push   0xc0022230
c000fe28:	e8 b4 10 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c000fe2d:	83 c4 10             	add    esp,0x10
c000fe30:	b8 4c 05 00 00       	mov    eax,0x54c
c000fe35:	8a 00                	mov    al,BYTE PTR [eax]
c000fe37:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fe3a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fe3e:	83 f8 01             	cmp    eax,0x1
c000fe41:	75 15                	jne    c000fe58 <ACPI::open(int, int, void*)+0x50>
c000fe43:	83 ec 0c             	sub    esp,0xc
c000fe46:	68 b1 20 02 c0       	push   0xc00220b1
c000fe4b:	e8 d1 4d 00 00       	call   c0014c21 <Thr::loadKernelSymbolTable(char const*)>
c000fe50:	83 c4 10             	add    esp,0x10
c000fe53:	eb 33                	jmp    c000fe88 <ACPI::open(int, int, void*)+0x80>
c000fe55:	8d 76 00             	lea    esi,[esi+0x0]
c000fe58:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fe5c:	3d bb 00 00 00       	cmp    eax,0xbb
c000fe61:	75 15                	jne    c000fe78 <ACPI::open(int, int, void*)+0x70>
c000fe63:	83 ec 0c             	sub    esp,0xc
c000fe66:	68 cf 20 02 c0       	push   0xc00220cf
c000fe6b:	e8 b1 4d 00 00       	call   c0014c21 <Thr::loadKernelSymbolTable(char const*)>
c000fe70:	83 c4 10             	add    esp,0x10
c000fe73:	eb 13                	jmp    c000fe88 <ACPI::open(int, int, void*)+0x80>
c000fe75:	8d 76 00             	lea    esi,[esi+0x0]
c000fe78:	83 ec 0c             	sub    esp,0xc
c000fe7b:	68 ed 20 02 c0       	push   0xc00220ed
c000fe80:	e8 5a 17 00 00       	call   c00115df <KePanic(char const*)>
c000fe85:	83 c4 10             	add    esp,0x10
c000fe88:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fe8c:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fe93:	83 ec 0c             	sub    esp,0xc
c000fe96:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fe99:	e8 55 7c ff ff       	call   c0007af3 <malloc>
c000fe9e:	83 c4 10             	add    esp,0x10
c000fea1:	89 c3                	mov    ebx,eax
c000fea3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fea8:	83 ec 04             	sub    esp,0x4
c000feab:	50                   	push   eax
c000feac:	68 07 21 02 c0       	push   0xc0022107
c000feb1:	53                   	push   ebx
c000feb2:	e8 8b bc ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c000feb7:	83 c4 10             	add    esp,0x10
c000feba:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000febd:	83 ec 08             	sub    esp,0x8
c000fec0:	6a 01                	push   0x1
c000fec2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fec5:	e8 96 bc ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c000feca:	83 c4 10             	add    esp,0x10
c000fecd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fed0:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fed4:	75 12                	jne    c000fee8 <ACPI::open(int, int, void*)+0xe0>
c000fed6:	83 ec 0c             	sub    esp,0xc
c000fed9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fedc:	e8 dd bc ff ff       	call   c000bbbe <File::close()>
c000fee1:	83 c4 10             	add    esp,0x10
c000fee4:	eb 06                	jmp    c000feec <ACPI::open(int, int, void*)+0xe4>
c000fee6:	66 90                	xchg   ax,ax
c000fee8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000feec:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fef0:	74 16                	je     c000ff08 <ACPI::open(int, int, void*)+0x100>
c000fef2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fef5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fef7:	83 c0 08             	add    eax,0x8
c000fefa:	8b 00                	mov    eax,DWORD PTR [eax]
c000fefc:	83 ec 0c             	sub    esp,0xc
c000feff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff02:	ff d0                	call   eax
c000ff04:	83 c4 10             	add    esp,0x10
c000ff07:	90                   	nop
c000ff08:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000ff0b:	83 f0 01             	xor    eax,0x1
c000ff0e:	0f b6 c0             	movzx  eax,al
c000ff11:	85 c0                	test   eax,eax
c000ff13:	74 3b                	je     c000ff50 <ACPI::open(int, int, void*)+0x148>
c000ff15:	83 ec 0c             	sub    esp,0xc
c000ff18:	68 25 21 02 c0       	push   0xc0022125
c000ff1d:	e8 bf 0f 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c000ff22:	83 c4 10             	add    esp,0x10
c000ff25:	83 ec 04             	sub    esp,0x4
c000ff28:	6a 0c                	push   0xc
c000ff2a:	68 40 21 02 c0       	push   0xc0022140
c000ff2f:	68 51 21 02 c0       	push   0xc0022151
c000ff34:	e8 21 3f 00 00       	call   c0013e5a <Reg::readIntWithDefault(char*, char*, int)>
c000ff39:	83 c4 10             	add    esp,0x10
c000ff3c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000ff3f:	83 ec 0c             	sub    esp,0xc
c000ff42:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000ff45:	e8 f0 98 ff ff       	call   c000983a <Virt::setupPageSwapping(int)>
c000ff4a:	83 c4 10             	add    esp,0x10
c000ff4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff50:	83 ec 0c             	sub    esp,0xc
c000ff53:	68 df 0b 02 c0       	push   0xc0020bdf
c000ff58:	e8 84 0f 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c000ff5d:	83 c4 10             	add    esp,0x10
c000ff60:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff63:	83 ec 08             	sub    esp,0x8
c000ff66:	6a 13                	push   0x13
c000ff68:	50                   	push   eax
c000ff69:	e8 6a cd ff ff       	call   c000ccd8 <getDevicesOfType(DeviceType)>
c000ff6e:	83 c4 0c             	add    esp,0xc
c000ff71:	8d 76 00             	lea    esi,[esi+0x0]
c000ff74:	83 ec 0c             	sub    esp,0xc
c000ff77:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff7a:	50                   	push   eax
c000ff7b:	e8 30 00 01 00       	call   c001ffb0 <LinkedList<Device>::isEmpty()>
c000ff80:	83 c4 10             	add    esp,0x10
c000ff83:	83 f0 01             	xor    eax,0x1
c000ff86:	0f b6 c0             	movzx  eax,al
c000ff89:	85 c0                	test   eax,eax
c000ff8b:	0f 84 1f 01 00 00    	je     c00100b0 <ACPI::open(int, int, void*)+0x2a8>
c000ff91:	83 ec 0c             	sub    esp,0xc
c000ff94:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff97:	50                   	push   eax
c000ff98:	e8 2f 00 01 00       	call   c001ffcc <LinkedList<Device>::getFirstElement()>
c000ff9d:	83 c4 10             	add    esp,0x10
c000ffa0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000ffa3:	83 ec 0c             	sub    esp,0xc
c000ffa6:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffa9:	50                   	push   eax
c000ffaa:	e8 25 00 01 00       	call   c001ffd4 <LinkedList<Device>::removeFirst()>
c000ffaf:	83 c4 10             	add    esp,0x10
c000ffb2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000ffb5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000ffb8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000ffbb:	b8 24 00 00 00       	mov    eax,0x24
c000ffc0:	83 e0 fc             	and    eax,0xfffffffc
c000ffc3:	89 c3                	mov    ebx,eax
c000ffc5:	b8 00 00 00 00       	mov    eax,0x0
c000ffca:	66 90                	xchg   ax,ax
c000ffcc:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000ffd3:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000ffda:	83 c0 04             	add    eax,0x4
c000ffdd:	39 d8                	cmp    eax,ebx
c000ffdf:	72 eb                	jb     c000ffcc <ACPI::open(int, int, void*)+0x1c4>
c000ffe1:	83 ec 08             	sub    esp,0x8
c000ffe4:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000ffea:	50                   	push   eax
c000ffeb:	83 ec 24             	sub    esp,0x24
c000ffee:	89 e1                	mov    ecx,esp
c000fff0:	b8 24 00 00 00       	mov    eax,0x24
c000fff5:	83 e0 fc             	and    eax,0xfffffffc
c000fff8:	89 c3                	mov    ebx,eax
c000fffa:	b8 00 00 00 00       	mov    eax,0x0
c000ffff:	90                   	nop
c0010000:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c0010007:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c001000a:	83 c0 04             	add    eax,0x4
c001000d:	39 d8                	cmp    eax,ebx
c001000f:	72 ef                	jb     c0010000 <ACPI::open(int, int, void*)+0x1f8>
c0010011:	e8 cc b6 00 00       	call   c001b6e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0010016:	83 c4 30             	add    esp,0x30
c0010019:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001001c:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0010020:	0f 84 4e ff ff ff    	je     c000ff74 <ACPI::open(int, int, void*)+0x16c>
c0010026:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c001002d:	83 ec 0c             	sub    esp,0xc
c0010030:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c0010033:	e8 bb 7a ff ff       	call   c0007af3 <malloc>
c0010038:	83 c4 10             	add    esp,0x10
c001003b:	89 c3                	mov    ebx,eax
c001003d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010042:	83 ec 04             	sub    esp,0x4
c0010045:	50                   	push   eax
c0010046:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0010049:	53                   	push   ebx
c001004a:	e8 f3 ba ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c001004f:	83 c4 10             	add    esp,0x10
c0010052:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0010055:	83 ec 0c             	sub    esp,0xc
c0010058:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001005b:	e8 c4 bd ff ff       	call   c000be24 <File::exists()>
c0010060:	83 c4 10             	add    esp,0x10
c0010063:	0f b6 c0             	movzx  eax,al
c0010066:	85 c0                	test   eax,eax
c0010068:	74 22                	je     c001008c <ACPI::open(int, int, void*)+0x284>
c001006a:	83 ec 08             	sub    esp,0x8
c001006d:	6a 01                	push   0x1
c001006f:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0010072:	e8 2c 56 00 00       	call   c00156a3 <Thr::loadDLL(char const*, bool)>
c0010077:	83 c4 10             	add    esp,0x10
c001007a:	83 ec 08             	sub    esp,0x8
c001007d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0010080:	50                   	push   eax
c0010081:	e8 5d 58 00 00       	call   c00158e3 <Thr::executeDLL(unsigned long, void*)>
c0010086:	83 c4 10             	add    esp,0x10
c0010089:	8d 76 00             	lea    esi,[esi+0x0]
c001008c:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0010090:	0f 84 de fe ff ff    	je     c000ff74 <ACPI::open(int, int, void*)+0x16c>
c0010096:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0010099:	8b 00                	mov    eax,DWORD PTR [eax]
c001009b:	83 c0 08             	add    eax,0x8
c001009e:	8b 00                	mov    eax,DWORD PTR [eax]
c00100a0:	83 ec 0c             	sub    esp,0xc
c00100a3:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c00100a6:	ff d0                	call   eax
c00100a8:	83 c4 10             	add    esp,0x10
c00100ab:	e9 c4 fe ff ff       	jmp    c000ff74 <ACPI::open(int, int, void*)+0x16c>
c00100b0:	83 ec 0c             	sub    esp,0xc
c00100b3:	8d 45 b8             	lea    eax,[ebp-0x48]
c00100b6:	50                   	push   eax
c00100b7:	e8 f0 fe 00 00       	call   c001ffac <LinkedList<Device>::~LinkedList()>
c00100bc:	83 c4 10             	add    esp,0x10
c00100bf:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c00100c5:	83 ec 08             	sub    esp,0x8
c00100c8:	6a 01                	push   0x1
c00100ca:	68 58 21 02 c0       	push   0xc0022158
c00100cf:	e8 cf 55 00 00       	call   c00156a3 <Thr::loadDLL(char const*, bool)>
c00100d4:	83 c4 10             	add    esp,0x10
c00100d7:	83 ec 08             	sub    esp,0x8
c00100da:	53                   	push   ebx
c00100db:	50                   	push   eax
c00100dc:	e8 02 58 00 00       	call   c00158e3 <Thr::executeDLL(unsigned long, void*)>
c00100e1:	83 c4 10             	add    esp,0x10
c00100e4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00100e9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00100ef:	83 e0 04             	and    eax,0x4
c00100f2:	0f b6 c0             	movzx  eax,al
c00100f5:	85 c0                	test   eax,eax
c00100f7:	0f 84 e3 00 00 00    	je     c00101e0 <ACPI::open(int, int, void*)+0x3d8>
c00100fd:	83 ec 0c             	sub    esp,0xc
c0010100:	68 75 21 02 c0       	push   0xc0022175
c0010105:	e8 d7 0d 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c001010a:	83 c4 10             	add    esp,0x10
c001010d:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c0010114:	83 ec 0c             	sub    esp,0xc
c0010117:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c001011a:	e8 d4 79 ff ff       	call   c0007af3 <malloc>
c001011f:	83 c4 10             	add    esp,0x10
c0010122:	89 c3                	mov    ebx,eax
c0010124:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010129:	83 ec 04             	sub    esp,0x4
c001012c:	50                   	push   eax
c001012d:	68 92 21 02 c0       	push   0xc0022192
c0010132:	53                   	push   ebx
c0010133:	e8 0a ba ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c0010138:	83 c4 10             	add    esp,0x10
c001013b:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c001013e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0010142:	74 1c                	je     c0010160 <ACPI::open(int, int, void*)+0x358>
c0010144:	83 ec 0c             	sub    esp,0xc
c0010147:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001014a:	e8 d5 bc ff ff       	call   c000be24 <File::exists()>
c001014f:	83 c4 10             	add    esp,0x10
c0010152:	0f b6 c0             	movzx  eax,al
c0010155:	85 c0                	test   eax,eax
c0010157:	74 07                	je     c0010160 <ACPI::open(int, int, void*)+0x358>
c0010159:	b0 01                	mov    al,0x1
c001015b:	eb 07                	jmp    c0010164 <ACPI::open(int, int, void*)+0x35c>
c001015d:	8d 76 00             	lea    esi,[esi+0x0]
c0010160:	b0 00                	mov    al,0x0
c0010162:	66 90                	xchg   ax,ax
c0010164:	0f b6 c0             	movzx  eax,al
c0010167:	85 c0                	test   eax,eax
c0010169:	74 21                	je     c001018c <ACPI::open(int, int, void*)+0x384>
c001016b:	83 ec 08             	sub    esp,0x8
c001016e:	6a 01                	push   0x1
c0010170:	68 92 21 02 c0       	push   0xc0022192
c0010175:	e8 29 55 00 00       	call   c00156a3 <Thr::loadDLL(char const*, bool)>
c001017a:	83 c4 10             	add    esp,0x10
c001017d:	83 ec 08             	sub    esp,0x8
c0010180:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010183:	50                   	push   eax
c0010184:	e8 5a 57 00 00       	call   c00158e3 <Thr::executeDLL(unsigned long, void*)>
c0010189:	83 c4 10             	add    esp,0x10
c001018c:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0010190:	74 1e                	je     c00101b0 <ACPI::open(int, int, void*)+0x3a8>
c0010192:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0010196:	74 18                	je     c00101b0 <ACPI::open(int, int, void*)+0x3a8>
c0010198:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001019b:	8b 00                	mov    eax,DWORD PTR [eax]
c001019d:	83 c0 08             	add    eax,0x8
c00101a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00101a2:	83 ec 0c             	sub    esp,0xc
c00101a5:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c00101a8:	ff d0                	call   eax
c00101aa:	83 c4 10             	add    esp,0x10
c00101ad:	8d 76 00             	lea    esi,[esi+0x0]
c00101b0:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c00101b5:	83 ec 08             	sub    esp,0x8
c00101b8:	68 af 21 02 c0       	push   0xc00221af
c00101bd:	50                   	push   eax
c00101be:	e8 65 f2 ff ff       	call   c000f428 <findDataTable(unsigned char*, char*)>
c00101c3:	83 c4 10             	add    esp,0x10
c00101c6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00101c9:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00101cd:	74 11                	je     c00101e0 <ACPI::open(int, int, void*)+0x3d8>
c00101cf:	83 ec 08             	sub    esp,0x8
c00101d2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00101d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00101d8:	e8 c7 fb ff ff       	call   c000fda4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00101dd:	83 c4 10             	add    esp,0x10
c00101e0:	b8 00 00 00 00       	mov    eax,0x0
c00101e5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00101e8:	c9                   	leave  
c00101e9:	c3                   	ret    

c00101ea <CPU::close(int, int, void*)>:
c00101ea:	31 c0                	xor    eax,eax
c00101ec:	c3                   	ret    
c00101ed:	90                   	nop

c00101ee <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00101ee:	60                   	pusha  
c00101ef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00101f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101fb:	9c                   	pushf  
c00101fc:	fa                   	cli    
c00101fd:	0f 09                	wbinvd 
c00101ff:	0f 30                	wrmsr  
c0010201:	9d                   	popf   
c0010202:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010206:	89 02                	mov    DWORD PTR [edx],eax
c0010208:	61                   	popa   
c0010209:	c3                   	ret    

c001020a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001020a:	60                   	pusha  
c001020b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001020f:	9c                   	pushf  
c0010210:	fa                   	cli    
c0010211:	0f 09                	wbinvd 
c0010213:	31 c0                	xor    eax,eax
c0010215:	31 d2                	xor    edx,edx
c0010217:	0f 32                	rdmsr  
c0010219:	9d                   	popf   
c001021a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001021e:	89 02                	mov    DWORD PTR [edx],eax
c0010220:	61                   	popa   
c0010221:	c3                   	ret    

c0010222 <CPU::AMD_K6_writeback(int, int, int)>:
c0010222:	56                   	push   esi
c0010223:	53                   	push   ebx
c0010224:	83 ec 10             	sub    esp,0x10
c0010227:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001022c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010230:	75 5d                	jne    c001028f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010232:	83 f8 08             	cmp    eax,0x8
c0010235:	75 09                	jne    c0010240 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010237:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001023c:	7e 13                	jle    c0010251 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001023e:	eb 30                	jmp    c0010270 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010240:	83 f8 06             	cmp    eax,0x6
c0010243:	7c 4a                	jl     c001028f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010245:	83 f8 07             	cmp    eax,0x7
c0010248:	7e 07                	jle    c0010251 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001024a:	83 f8 09             	cmp    eax,0x9
c001024d:	74 21                	je     c0010270 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001024f:	eb 3e                	jmp    c001028f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010251:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c0010257:	89 e6                	mov    esi,esp
c0010259:	56                   	push   esi
c001025a:	68 82 00 00 c0       	push   0xc0000082
c001025f:	e8 a6 ff ff ff       	call   c001020a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010264:	c1 eb 15             	shr    ebx,0x15
c0010267:	56                   	push   esi
c0010268:	83 e3 7e             	and    ebx,0x7e
c001026b:	6a 00                	push   0x0
c001026d:	53                   	push   ebx
c001026e:	eb 12                	jmp    c0010282 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010270:	89 e3                	mov    ebx,esp
c0010272:	53                   	push   ebx
c0010273:	68 82 00 00 c0       	push   0xc0000082
c0010278:	e8 8d ff ff ff       	call   c001020a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001027d:	53                   	push   ebx
c001027e:	6a 00                	push   0x0
c0010280:	6a 00                	push   0x0
c0010282:	68 82 00 00 c0       	push   0xc0000082
c0010287:	e8 62 ff ff ff       	call   c00101ee <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001028c:	83 c4 18             	add    esp,0x18
c001028f:	83 c4 10             	add    esp,0x10
c0010292:	5b                   	pop    ebx
c0010293:	5e                   	pop    esi
c0010294:	c3                   	ret    
c0010295:	90                   	nop

c0010296 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010296:	55                   	push   ebp
c0010297:	57                   	push   edi
c0010298:	56                   	push   esi
c0010299:	53                   	push   ebx
c001029a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001029e:	39 05 18 38 02 c0    	cmp    DWORD PTR ds:0xc0023818,eax
c00102a4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00102a8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102ac:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00102b0:	75 23                	jne    c00102d5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00102b2:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00102b7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00102bb:	89 06                	mov    DWORD PTR [esi],eax
c00102bd:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00102c2:	89 07                	mov    DWORD PTR [edi],eax
c00102c4:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c00102c9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102cc:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c00102d1:	89 02                	mov    DWORD PTR [edx],eax
c00102d3:	eb 3f                	jmp    c0010314 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00102d5:	31 c9                	xor    ecx,ecx
c00102d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102db:	0f a2                	cpuid  
c00102dd:	89 06                	mov    DWORD PTR [esi],eax
c00102df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00102e3:	89 1f                	mov    DWORD PTR [edi],ebx
c00102e5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00102e8:	89 10                	mov    DWORD PTR [eax],edx
c00102ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102ee:	a3 18 38 02 c0       	mov    ds:0xc0023818,eax
c00102f3:	8b 06                	mov    eax,DWORD PTR [esi]
c00102f5:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c00102fa:	8b 07                	mov    eax,DWORD PTR [edi]
c00102fc:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c0010301:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010304:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010309:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001030d:	8b 00                	mov    eax,DWORD PTR [eax]
c001030f:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c0010314:	5b                   	pop    ebx
c0010315:	5e                   	pop    esi
c0010316:	5f                   	pop    edi
c0010317:	5d                   	pop    ebp
c0010318:	c3                   	ret    
c0010319:	90                   	nop

c001031a <CPU::cpuidCheckEDX(unsigned int)>:
c001031a:	83 ec 10             	sub    esp,0x10
c001031d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010321:	50                   	push   eax
c0010322:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010326:	50                   	push   eax
c0010327:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001032b:	50                   	push   eax
c001032c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010330:	50                   	push   eax
c0010331:	6a 01                	push   0x1
c0010333:	e8 5e ff ff ff       	call   c0010296 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010338:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001033c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010340:	0f 95 c0             	setne  al
c0010343:	83 c4 24             	add    esp,0x24
c0010346:	c3                   	ret    
c0010347:	90                   	nop

c0010348 <CPU::cpuidCheckECX(unsigned int)>:
c0010348:	83 ec 10             	sub    esp,0x10
c001034b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001034f:	50                   	push   eax
c0010350:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010354:	50                   	push   eax
c0010355:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010359:	50                   	push   eax
c001035a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001035e:	50                   	push   eax
c001035f:	6a 01                	push   0x1
c0010361:	e8 30 ff ff ff       	call   c0010296 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010366:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001036a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001036e:	0f 95 c0             	setne  al
c0010371:	83 c4 24             	add    esp,0x24
c0010374:	c3                   	ret    
c0010375:	90                   	nop

c0010376 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010376:	83 ec 10             	sub    esp,0x10
c0010379:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001037d:	50                   	push   eax
c001037e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010382:	50                   	push   eax
c0010383:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010387:	50                   	push   eax
c0010388:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001038c:	50                   	push   eax
c001038d:	6a 07                	push   0x7
c001038f:	e8 02 ff ff ff       	call   c0010296 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010394:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010398:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001039c:	0f 95 c0             	setne  al
c001039f:	83 c4 24             	add    esp,0x24
c00103a2:	c3                   	ret    
c00103a3:	90                   	nop

c00103a4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00103a4:	83 ec 10             	sub    esp,0x10
c00103a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ab:	50                   	push   eax
c00103ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b0:	50                   	push   eax
c00103b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b5:	50                   	push   eax
c00103b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ba:	50                   	push   eax
c00103bb:	6a 07                	push   0x7
c00103bd:	e8 d4 fe ff ff       	call   c0010296 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103c6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00103ca:	0f 95 c0             	setne  al
c00103cd:	83 c4 24             	add    esp,0x24
c00103d0:	c3                   	ret    
c00103d1:	90                   	nop

c00103d2 <CPU::CPU()>:
c00103d2:	83 ec 0c             	sub    esp,0xc
c00103d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103d9:	83 ec 08             	sub    esp,0x8
c00103dc:	68 6d 23 02 c0       	push   0xc002236d
c00103e1:	50                   	push   eax
c00103e2:	e8 71 c7 ff ff       	call   c000cb58 <Device::Device(char const*)>
c00103e7:	83 c4 10             	add    esp,0x10
c00103ea:	ba 00 24 02 c0       	mov    edx,0xc0022400
c00103ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103f3:	89 10                	mov    DWORD PTR [eax],edx
c00103f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103f9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010407:	05 78 01 00 00       	add    eax,0x178
c001040c:	83 ec 0c             	sub    esp,0xc
c001040f:	50                   	push   eax
c0010410:	e8 89 6f ff ff       	call   c000739e <GDT::GDT()>
c0010415:	83 c4 10             	add    esp,0x10
c0010418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001041c:	05 7c 09 00 00       	add    eax,0x97c
c0010421:	83 ec 0c             	sub    esp,0xc
c0010424:	50                   	push   eax
c0010425:	e8 c2 71 ff ff       	call   c00075ec <IDT::IDT()>
c001042a:	83 c4 10             	add    esp,0x10
c001042d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010431:	05 7c 11 00 00       	add    eax,0x117c
c0010436:	83 ec 0c             	sub    esp,0xc
c0010439:	50                   	push   eax
c001043a:	e8 0d 8b ff ff       	call   c0008f4c <TSS::TSS()>
c001043f:	83 c4 10             	add    esp,0x10
c0010442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010446:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001044d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010451:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001045b:	90                   	nop
c001045c:	83 c4 0c             	add    esp,0xc
c001045f:	c3                   	ret    

c0010460 <CPU::displayFeatures()>:
c0010460:	c3                   	ret    
c0010461:	90                   	nop

c0010462 <CPU::detectFeatures()>:
c0010462:	55                   	push   ebp
c0010463:	57                   	push   edi
c0010464:	56                   	push   esi
c0010465:	53                   	push   ebx
c0010466:	83 ec 30             	sub    esp,0x30
c0010469:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001046d:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010477:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001047d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010484:	6a 0d                	push   0xd
c0010486:	6a 00                	push   0x0
c0010488:	55                   	push   ebp
c0010489:	e8 62 00 ff ff       	call   c00004f0 <memset>
c001048e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010493:	83 c4 10             	add    esp,0x10
c0010496:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001049d:	0f 84 db 05 00 00    	je     c0010a7e <CPU::detectFeatures()+0x61c>
c00104a3:	83 ec 0c             	sub    esp,0xc
c00104a6:	89 ef                	mov    edi,ebp
c00104a8:	6a 10                	push   0x10
c00104aa:	e8 6b fe ff ff       	call   c001031a <CPU::cpuidCheckEDX(unsigned int)>
c00104af:	83 e0 01             	and    eax,0x1
c00104b2:	8d 14 00             	lea    edx,[eax+eax*1]
c00104b5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104bb:	83 e0 fd             	and    eax,0xfffffffd
c00104be:	09 d0                	or     eax,edx
c00104c0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104c6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00104cd:	e8 48 fe ff ff       	call   c001031a <CPU::cpuidCheckEDX(unsigned int)>
c00104d2:	83 e0 01             	and    eax,0x1
c00104d5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104dc:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104e2:	83 e0 fb             	and    eax,0xfffffffb
c00104e5:	09 d0                	or     eax,edx
c00104e7:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104ed:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00104f4:	e8 21 fe ff ff       	call   c001031a <CPU::cpuidCheckEDX(unsigned int)>
c00104f9:	83 e0 01             	and    eax,0x1
c00104fc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010503:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010509:	83 e0 f7             	and    eax,0xfffffff7
c001050c:	09 d0                	or     eax,edx
c001050e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010514:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001051b:	e8 fa fd ff ff       	call   c001031a <CPU::cpuidCheckEDX(unsigned int)>
c0010520:	83 e0 01             	and    eax,0x1
c0010523:	c1 e0 04             	shl    eax,0x4
c0010526:	89 c2                	mov    edx,eax
c0010528:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001052e:	83 e0 ef             	and    eax,0xffffffef
c0010531:	09 d0                	or     eax,edx
c0010533:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010539:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010540:	e8 d5 fd ff ff       	call   c001031a <CPU::cpuidCheckEDX(unsigned int)>
c0010545:	83 e0 01             	and    eax,0x1
c0010548:	c1 e0 05             	shl    eax,0x5
c001054b:	89 c2                	mov    edx,eax
c001054d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010553:	83 e0 df             	and    eax,0xffffffdf
c0010556:	09 d0                	or     eax,edx
c0010558:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001055e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010565:	e8 b0 fd ff ff       	call   c001031a <CPU::cpuidCheckEDX(unsigned int)>
c001056a:	83 e0 01             	and    eax,0x1
c001056d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010570:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010576:	83 e0 fd             	and    eax,0xfffffffd
c0010579:	09 d0                	or     eax,edx
c001057b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010581:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010588:	e8 8d fd ff ff       	call   c001031a <CPU::cpuidCheckEDX(unsigned int)>
c001058d:	83 e0 01             	and    eax,0x1
c0010590:	c1 e0 06             	shl    eax,0x6
c0010593:	89 c2                	mov    edx,eax
c0010595:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001059b:	83 e0 bf             	and    eax,0xffffffbf
c001059e:	09 d0                	or     eax,edx
c00105a0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105a6:	58                   	pop    eax
c00105a7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105ab:	50                   	push   eax
c00105ac:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105b0:	50                   	push   eax
c00105b1:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105b5:	56                   	push   esi
c00105b6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105ba:	50                   	push   eax
c00105bb:	6a 00                	push   0x0
c00105bd:	e8 d4 fc ff ff       	call   c0010296 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105c2:	b8 04 00 00 00       	mov    eax,0x4
c00105c7:	89 c1                	mov    ecx,eax
c00105c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105cb:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00105d1:	89 c1                	mov    ecx,eax
c00105d3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00105d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105d9:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00105df:	89 c1                	mov    ecx,eax
c00105e1:	8d 74 24 38          	lea    esi,[esp+0x38]
c00105e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105e7:	83 c4 18             	add    esp,0x18
c00105ea:	68 7c 22 02 c0       	push   0xc002227c
c00105ef:	55                   	push   ebp
c00105f0:	e8 8b 01 ff ff       	call   c0000780 <strcmp>
c00105f5:	83 c4 10             	add    esp,0x10
c00105f8:	85 c0                	test   eax,eax
c00105fa:	75 0f                	jne    c001060b <CPU::detectFeatures()+0x1a9>
c00105fc:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010606:	e9 22 02 00 00       	jmp    c001082d <CPU::detectFeatures()+0x3cb>
c001060b:	50                   	push   eax
c001060c:	50                   	push   eax
c001060d:	68 89 22 02 c0       	push   0xc0022289
c0010612:	55                   	push   ebp
c0010613:	e8 68 01 ff ff       	call   c0000780 <strcmp>
c0010618:	83 c4 10             	add    esp,0x10
c001061b:	85 c0                	test   eax,eax
c001061d:	74 dd                	je     c00105fc <CPU::detectFeatures()+0x19a>
c001061f:	50                   	push   eax
c0010620:	50                   	push   eax
c0010621:	68 96 22 02 c0       	push   0xc0022296
c0010626:	55                   	push   ebp
c0010627:	e8 54 01 ff ff       	call   c0000780 <strcmp>
c001062c:	83 c4 10             	add    esp,0x10
c001062f:	85 c0                	test   eax,eax
c0010631:	74 2a                	je     c001065d <CPU::detectFeatures()+0x1fb>
c0010633:	50                   	push   eax
c0010634:	50                   	push   eax
c0010635:	68 a3 22 02 c0       	push   0xc00222a3
c001063a:	55                   	push   ebp
c001063b:	e8 40 01 ff ff       	call   c0000780 <strcmp>
c0010640:	83 c4 10             	add    esp,0x10
c0010643:	85 c0                	test   eax,eax
c0010645:	74 16                	je     c001065d <CPU::detectFeatures()+0x1fb>
c0010647:	50                   	push   eax
c0010648:	50                   	push   eax
c0010649:	68 b0 22 02 c0       	push   0xc00222b0
c001064e:	55                   	push   ebp
c001064f:	e8 2c 01 ff ff       	call   c0000780 <strcmp>
c0010654:	83 c4 10             	add    esp,0x10
c0010657:	85 c0                	test   eax,eax
c0010659:	74 48                	je     c00106a3 <CPU::detectFeatures()+0x241>
c001065b:	eb 0f                	jmp    c001066c <CPU::detectFeatures()+0x20a>
c001065d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010667:	e9 c1 01 00 00       	jmp    c001082d <CPU::detectFeatures()+0x3cb>
c001066c:	50                   	push   eax
c001066d:	50                   	push   eax
c001066e:	68 bd 22 02 c0       	push   0xc00222bd
c0010673:	55                   	push   ebp
c0010674:	e8 07 01 ff ff       	call   c0000780 <strcmp>
c0010679:	83 c4 10             	add    esp,0x10
c001067c:	85 c0                	test   eax,eax
c001067e:	74 23                	je     c00106a3 <CPU::detectFeatures()+0x241>
c0010680:	57                   	push   edi
c0010681:	57                   	push   edi
c0010682:	68 ca 22 02 c0       	push   0xc00222ca
c0010687:	55                   	push   ebp
c0010688:	e8 f3 00 ff ff       	call   c0000780 <strcmp>
c001068d:	83 c4 10             	add    esp,0x10
c0010690:	85 c0                	test   eax,eax
c0010692:	75 1e                	jne    c00106b2 <CPU::detectFeatures()+0x250>
c0010694:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001069e:	e9 8a 01 00 00       	jmp    c001082d <CPU::detectFeatures()+0x3cb>
c00106a3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00106ad:	e9 7b 01 00 00       	jmp    c001082d <CPU::detectFeatures()+0x3cb>
c00106b2:	56                   	push   esi
c00106b3:	56                   	push   esi
c00106b4:	68 d7 22 02 c0       	push   0xc00222d7
c00106b9:	55                   	push   ebp
c00106ba:	e8 c1 00 ff ff       	call   c0000780 <strcmp>
c00106bf:	83 c4 10             	add    esp,0x10
c00106c2:	85 c0                	test   eax,eax
c00106c4:	75 0f                	jne    c00106d5 <CPU::detectFeatures()+0x273>
c00106c6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00106d0:	e9 58 01 00 00       	jmp    c001082d <CPU::detectFeatures()+0x3cb>
c00106d5:	51                   	push   ecx
c00106d6:	51                   	push   ecx
c00106d7:	68 96 22 02 c0       	push   0xc0022296
c00106dc:	55                   	push   ebp
c00106dd:	e8 9e 00 ff ff       	call   c0000780 <strcmp>
c00106e2:	83 c4 10             	add    esp,0x10
c00106e5:	85 c0                	test   eax,eax
c00106e7:	75 0f                	jne    c00106f8 <CPU::detectFeatures()+0x296>
c00106e9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00106f3:	e9 35 01 00 00       	jmp    c001082d <CPU::detectFeatures()+0x3cb>
c00106f8:	52                   	push   edx
c00106f9:	52                   	push   edx
c00106fa:	68 e4 22 02 c0       	push   0xc00222e4
c00106ff:	55                   	push   ebp
c0010700:	e8 7b 00 ff ff       	call   c0000780 <strcmp>
c0010705:	83 c4 10             	add    esp,0x10
c0010708:	85 c0                	test   eax,eax
c001070a:	75 0f                	jne    c001071b <CPU::detectFeatures()+0x2b9>
c001070c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010716:	e9 12 01 00 00       	jmp    c001082d <CPU::detectFeatures()+0x3cb>
c001071b:	50                   	push   eax
c001071c:	50                   	push   eax
c001071d:	68 f1 22 02 c0       	push   0xc00222f1
c0010722:	55                   	push   ebp
c0010723:	e8 58 00 ff ff       	call   c0000780 <strcmp>
c0010728:	83 c4 10             	add    esp,0x10
c001072b:	85 c0                	test   eax,eax
c001072d:	75 0f                	jne    c001073e <CPU::detectFeatures()+0x2dc>
c001072f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010739:	e9 ef 00 00 00       	jmp    c001082d <CPU::detectFeatures()+0x3cb>
c001073e:	50                   	push   eax
c001073f:	50                   	push   eax
c0010740:	68 fe 22 02 c0       	push   0xc00222fe
c0010745:	55                   	push   ebp
c0010746:	e8 35 00 ff ff       	call   c0000780 <strcmp>
c001074b:	83 c4 10             	add    esp,0x10
c001074e:	85 c0                	test   eax,eax
c0010750:	75 0f                	jne    c0010761 <CPU::detectFeatures()+0x2ff>
c0010752:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001075c:	e9 cc 00 00 00       	jmp    c001082d <CPU::detectFeatures()+0x3cb>
c0010761:	50                   	push   eax
c0010762:	50                   	push   eax
c0010763:	68 0b 23 02 c0       	push   0xc002230b
c0010768:	55                   	push   ebp
c0010769:	e8 12 00 ff ff       	call   c0000780 <strcmp>
c001076e:	83 c4 10             	add    esp,0x10
c0010771:	85 c0                	test   eax,eax
c0010773:	75 0f                	jne    c0010784 <CPU::detectFeatures()+0x322>
c0010775:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001077f:	e9 a9 00 00 00       	jmp    c001082d <CPU::detectFeatures()+0x3cb>
c0010784:	50                   	push   eax
c0010785:	50                   	push   eax
c0010786:	68 18 23 02 c0       	push   0xc0022318
c001078b:	55                   	push   ebp
c001078c:	e8 ef ff fe ff       	call   c0000780 <strcmp>
c0010791:	83 c4 10             	add    esp,0x10
c0010794:	85 c0                	test   eax,eax
c0010796:	75 0f                	jne    c00107a7 <CPU::detectFeatures()+0x345>
c0010798:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00107a2:	e9 86 00 00 00       	jmp    c001082d <CPU::detectFeatures()+0x3cb>
c00107a7:	50                   	push   eax
c00107a8:	50                   	push   eax
c00107a9:	68 25 23 02 c0       	push   0xc0022325
c00107ae:	55                   	push   ebp
c00107af:	e8 cc ff fe ff       	call   c0000780 <strcmp>
c00107b4:	83 c4 10             	add    esp,0x10
c00107b7:	85 c0                	test   eax,eax
c00107b9:	75 0c                	jne    c00107c7 <CPU::detectFeatures()+0x365>
c00107bb:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00107c5:	eb 66                	jmp    c001082d <CPU::detectFeatures()+0x3cb>
c00107c7:	50                   	push   eax
c00107c8:	50                   	push   eax
c00107c9:	68 32 23 02 c0       	push   0xc0022332
c00107ce:	55                   	push   ebp
c00107cf:	e8 ac ff fe ff       	call   c0000780 <strcmp>
c00107d4:	83 c4 10             	add    esp,0x10
c00107d7:	85 c0                	test   eax,eax
c00107d9:	75 0c                	jne    c00107e7 <CPU::detectFeatures()+0x385>
c00107db:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00107e5:	eb 46                	jmp    c001082d <CPU::detectFeatures()+0x3cb>
c00107e7:	57                   	push   edi
c00107e8:	57                   	push   edi
c00107e9:	68 3f 23 02 c0       	push   0xc002233f
c00107ee:	55                   	push   ebp
c00107ef:	e8 8c ff fe ff       	call   c0000780 <strcmp>
c00107f4:	83 c4 10             	add    esp,0x10
c00107f7:	85 c0                	test   eax,eax
c00107f9:	74 e0                	je     c00107db <CPU::detectFeatures()+0x379>
c00107fb:	56                   	push   esi
c00107fc:	56                   	push   esi
c00107fd:	68 4c 23 02 c0       	push   0xc002234c
c0010802:	55                   	push   ebp
c0010803:	e8 78 ff fe ff       	call   c0000780 <strcmp>
c0010808:	83 c4 10             	add    esp,0x10
c001080b:	85 c0                	test   eax,eax
c001080d:	74 cc                	je     c00107db <CPU::detectFeatures()+0x379>
c001080f:	51                   	push   ecx
c0010810:	51                   	push   ecx
c0010811:	68 59 23 02 c0       	push   0xc0022359
c0010816:	55                   	push   ebp
c0010817:	e8 64 ff fe ff       	call   c0000780 <strcmp>
c001081c:	83 c4 10             	add    esp,0x10
c001081f:	85 c0                	test   eax,eax
c0010821:	74 b8                	je     c00107db <CPU::detectFeatures()+0x379>
c0010823:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001082d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010832:	0f 86 be 00 00 00    	jbe    c00108f6 <CPU::detectFeatures()+0x494>
c0010838:	83 ec 0c             	sub    esp,0xc
c001083b:	68 80 00 00 00       	push   0x80
c0010840:	e8 31 fb ff ff       	call   c0010376 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010845:	83 e0 01             	and    eax,0x1
c0010848:	c1 e0 06             	shl    eax,0x6
c001084b:	89 c2                	mov    edx,eax
c001084d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010853:	83 e0 bf             	and    eax,0xffffffbf
c0010856:	09 d0                	or     eax,edx
c0010858:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001085e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010865:	e8 0c fb ff ff       	call   c0010376 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001086a:	83 e0 01             	and    eax,0x1
c001086d:	c1 e0 04             	shl    eax,0x4
c0010870:	89 c2                	mov    edx,eax
c0010872:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010878:	83 e0 ef             	and    eax,0xffffffef
c001087b:	09 d0                	or     eax,edx
c001087d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010883:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001088a:	e8 e7 fa ff ff       	call   c0010376 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001088f:	89 c2                	mov    edx,eax
c0010891:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010897:	c1 e2 07             	shl    edx,0x7
c001089a:	83 e0 7f             	and    eax,0x7f
c001089d:	09 d0                	or     eax,edx
c001089f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00108a5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00108ac:	e8 f3 fa ff ff       	call   c00103a4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108b1:	83 e0 01             	and    eax,0x1
c00108b4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00108bb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108c1:	83 e0 f7             	and    eax,0xfffffff7
c00108c4:	09 d0                	or     eax,edx
c00108c6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108cc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00108d3:	e8 cc fa ff ff       	call   c00103a4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108d8:	83 c4 10             	add    esp,0x10
c00108db:	83 e0 01             	and    eax,0x1
c00108de:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00108e5:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108eb:	83 e0 fb             	and    eax,0xfffffffb
c00108ee:	09 d0                	or     eax,edx
c00108f0:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00108f6:	83 ec 0c             	sub    esp,0xc
c00108f9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00108fd:	50                   	push   eax
c00108fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010902:	50                   	push   eax
c0010903:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010907:	57                   	push   edi
c0010908:	8d 74 24 28          	lea    esi,[esp+0x28]
c001090c:	56                   	push   esi
c001090d:	6a 01                	push   0x1
c001090f:	e8 82 f9 ff ff       	call   c0010296 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010914:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010918:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001091e:	89 c1                	mov    ecx,eax
c0010920:	83 e1 0f             	and    ecx,0xf
c0010923:	83 e2 f0             	and    edx,0xfffffff0
c0010926:	09 ca                	or     edx,ecx
c0010928:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001092e:	89 c2                	mov    edx,eax
c0010930:	c1 ea 04             	shr    edx,0x4
c0010933:	83 e2 0f             	and    edx,0xf
c0010936:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001093a:	89 d1                	mov    ecx,edx
c001093c:	83 c4 20             	add    esp,0x20
c001093f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010945:	c1 e1 06             	shl    ecx,0x6
c0010948:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001094e:	09 ca                	or     edx,ecx
c0010950:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010957:	89 c2                	mov    edx,eax
c0010959:	c1 ea 08             	shr    edx,0x8
c001095c:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010962:	83 e2 0f             	and    edx,0xf
c0010965:	89 d5                	mov    ebp,edx
c0010967:	83 e5 03             	and    ebp,0x3
c001096a:	c1 e5 06             	shl    ebp,0x6
c001096d:	83 e1 3f             	and    ecx,0x3f
c0010970:	09 e9                	or     ecx,ebp
c0010972:	89 d5                	mov    ebp,edx
c0010974:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001097a:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010980:	c1 ed 02             	shr    ebp,0x2
c0010983:	83 e1 c0             	and    ecx,0xffffffc0
c0010986:	09 e9                	or     ecx,ebp
c0010988:	89 c5                	mov    ebp,eax
c001098a:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010990:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010996:	c1 ed 08             	shr    ebp,0x8
c0010999:	83 e5 30             	and    ebp,0x30
c001099c:	83 e1 cf             	and    ecx,0xffffffcf
c001099f:	09 e9                	or     ecx,ebp
c00109a1:	83 fa 06             	cmp    edx,0x6
c00109a4:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00109aa:	74 05                	je     c00109b1 <CPU::detectFeatures()+0x54f>
c00109ac:	83 fa 0f             	cmp    edx,0xf
c00109af:	75 64                	jne    c0010a15 <CPU::detectFeatures()+0x5b3>
c00109b1:	89 c1                	mov    ecx,eax
c00109b3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00109b9:	c1 e9 10             	shr    ecx,0x10
c00109bc:	c1 e1 04             	shl    ecx,0x4
c00109bf:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00109c3:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00109c9:	0f b6 c9             	movzx  ecx,cl
c00109cc:	c1 e1 06             	shl    ecx,0x6
c00109cf:	09 e9                	or     ecx,ebp
c00109d1:	83 fa 0f             	cmp    edx,0xf
c00109d4:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00109db:	75 38                	jne    c0010a15 <CPU::detectFeatures()+0x5b3>
c00109dd:	c1 e8 14             	shr    eax,0x14
c00109e0:	83 c0 0f             	add    eax,0xf
c00109e3:	0f b6 c0             	movzx  eax,al
c00109e6:	89 c2                	mov    edx,eax
c00109e8:	c1 e8 02             	shr    eax,0x2
c00109eb:	83 e2 03             	and    edx,0x3
c00109ee:	89 d1                	mov    ecx,edx
c00109f0:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00109f6:	c1 e1 06             	shl    ecx,0x6
c00109f9:	83 e2 3f             	and    edx,0x3f
c00109fc:	09 ca                	or     edx,ecx
c00109fe:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010a04:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010a0a:	83 e2 c0             	and    edx,0xffffffc0
c0010a0d:	09 d0                	or     eax,edx
c0010a0f:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010a15:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a1b:	83 ec 0c             	sub    esp,0xc
c0010a1e:	83 c8 07             	or     eax,0x7
c0010a21:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a27:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a2b:	50                   	push   eax
c0010a2c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010a30:	55                   	push   ebp
c0010a31:	57                   	push   edi
c0010a32:	56                   	push   esi
c0010a33:	68 00 00 00 80       	push   0x80000000
c0010a38:	e8 59 f8 ff ff       	call   c0010296 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a3d:	83 c4 20             	add    esp,0x20
c0010a40:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010a48:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010a4c:	76 1e                	jbe    c0010a6c <CPU::detectFeatures()+0x60a>
c0010a4e:	83 ec 0c             	sub    esp,0xc
c0010a51:	50                   	push   eax
c0010a52:	55                   	push   ebp
c0010a53:	57                   	push   edi
c0010a54:	56                   	push   esi
c0010a55:	68 01 00 00 80       	push   0x80000001
c0010a5a:	e8 37 f8 ff ff       	call   c0010296 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a5f:	83 c4 20             	add    esp,0x20
c0010a62:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010a6c:	52                   	push   edx
c0010a6d:	52                   	push   edx
c0010a6e:	68 65 23 02 c0       	push   0xc0022365
c0010a73:	53                   	push   ebx
c0010a74:	e8 d1 c0 ff ff       	call   c000cb4a <Device::setName(char const*)>
c0010a79:	83 c4 10             	add    esp,0x10
c0010a7c:	eb 69                	jmp    c0010ae7 <CPU::detectFeatures()+0x685>
c0010a7e:	50                   	push   eax
c0010a7f:	50                   	push   eax
c0010a80:	68 ca 22 02 c0       	push   0xc00222ca
c0010a85:	55                   	push   ebp
c0010a86:	e8 c5 fb fe ff       	call   c0000650 <strcpy>
c0010a8b:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010a95:	e8 29 f7 fe ff       	call   c00001c3 <is486>
c0010a9a:	83 c4 10             	add    esp,0x10
c0010a9d:	85 c0                	test   eax,eax
c0010a9f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010aa5:	74 1f                	je     c0010ac6 <CPU::detectFeatures()+0x664>
c0010aa7:	83 c8 07             	or     eax,0x7
c0010aaa:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010ab0:	0f 20 c0             	mov    eax,cr0
c0010ab3:	83 e0 14             	and    eax,0x14
c0010ab6:	83 f8 04             	cmp    eax,0x4
c0010ab9:	75 10                	jne    c0010acb <CPU::detectFeatures()+0x669>
c0010abb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010ac1:	83 e0 fd             	and    eax,0xfffffffd
c0010ac4:	eb 1b                	jmp    c0010ae1 <CPU::detectFeatures()+0x67f>
c0010ac6:	83 e0 f8             	and    eax,0xfffffff8
c0010ac9:	eb df                	jmp    c0010aaa <CPU::detectFeatures()+0x648>
c0010acb:	e8 ce f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010ad0:	83 e0 01             	and    eax,0x1
c0010ad3:	8d 14 00             	lea    edx,[eax+eax*1]
c0010ad6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010adc:	83 e0 fd             	and    eax,0xfffffffd
c0010adf:	09 d0                	or     eax,edx
c0010ae1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010ae7:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010aee:	74 17                	je     c0010b07 <CPU::detectFeatures()+0x6a5>
c0010af0:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010af6:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010afc:	83 c8 10             	or     eax,0x10
c0010aff:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010b05:	eb 20                	jmp    c0010b27 <CPU::detectFeatures()+0x6c5>
c0010b07:	e8 92 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b0c:	83 e0 01             	and    eax,0x1
c0010b0f:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b12:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b18:	83 e0 fd             	and    eax,0xfffffffd
c0010b1b:	09 d0                	or     eax,edx
c0010b1d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b23:	a8 02                	test   al,0x2
c0010b25:	75 c9                	jne    c0010af0 <CPU::detectFeatures()+0x68e>
c0010b27:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010b2e:	83 c4 2c             	add    esp,0x2c
c0010b31:	5b                   	pop    ebx
c0010b32:	5e                   	pop    esi
c0010b33:	5f                   	pop    edi
c0010b34:	5d                   	pop    ebp
c0010b35:	c3                   	ret    

c0010b36 <CPU::setupSMEP()>:
c0010b36:	0f 20 e0             	mov    eax,cr4
c0010b39:	0d 00 00 10 00       	or     eax,0x100000
c0010b3e:	0f 22 e0             	mov    cr4,eax
c0010b41:	c3                   	ret    

c0010b42 <CPU::setupUMIP()>:
c0010b42:	0f 20 e0             	mov    eax,cr4
c0010b45:	80 cc 08             	or     ah,0x8
c0010b48:	0f 22 e0             	mov    cr4,eax
c0010b4b:	c3                   	ret    

c0010b4c <CPU::setupTSC()>:
c0010b4c:	0f 20 e0             	mov    eax,cr4
c0010b4f:	83 c8 04             	or     eax,0x4
c0010b52:	0f 22 e0             	mov    cr4,eax
c0010b55:	c3                   	ret    

c0010b56 <CPU::setupLargePages()>:
c0010b56:	0f 20 e0             	mov    eax,cr4
c0010b59:	83 c8 10             	or     eax,0x10
c0010b5c:	0f 22 e0             	mov    cr4,eax
c0010b5f:	c3                   	ret    

c0010b60 <CPU::setupPAT()>:
c0010b60:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010b65:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010b6c:	74 2c                	je     c0010b9a <CPU::setupPAT()+0x3a>
c0010b6e:	53                   	push   ebx
c0010b6f:	83 ec 10             	sub    esp,0x10
c0010b72:	68 77 02 00 00       	push   0x277
c0010b77:	50                   	push   eax
c0010b78:	e8 87 65 ff ff       	call   c0007104 <Computer::rdmsr(unsigned int)>
c0010b7d:	83 e2 f8             	and    edx,0xfffffff8
c0010b80:	83 ca 01             	or     edx,0x1
c0010b83:	52                   	push   edx
c0010b84:	50                   	push   eax
c0010b85:	68 77 02 00 00       	push   0x277
c0010b8a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010b90:	e8 9b 65 ff ff       	call   c0007130 <Computer::wrmsr(unsigned int, unsigned long long)>
c0010b95:	83 c4 28             	add    esp,0x28
c0010b98:	5b                   	pop    ebx
c0010b99:	c3                   	ret    
c0010b9a:	c3                   	ret    
c0010b9b:	90                   	nop

c0010b9c <CPU::setupMTRR()>:
c0010b9c:	c3                   	ret    
c0010b9d:	90                   	nop

c0010b9e <CPU::setupGlobalPages()>:
c0010b9e:	0f 20 e0             	mov    eax,cr4
c0010ba1:	0c 80                	or     al,0x80
c0010ba3:	0f 22 e0             	mov    cr4,eax
c0010ba6:	c3                   	ret    
c0010ba7:	90                   	nop

c0010ba8 <CPU::allowUsermodeDataAccess()>:
c0010ba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bac:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bb3:	74 03                	je     c0010bb8 <CPU::allowUsermodeDataAccess()+0x10>
c0010bb5:	0f 01 cb             	stac   
c0010bb8:	c3                   	ret    
c0010bb9:	90                   	nop

c0010bba <CPU::prohibitUsermodeDataAccess()>:
c0010bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bbe:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bc5:	74 03                	je     c0010bca <CPU::prohibitUsermodeDataAccess()+0x10>
c0010bc7:	0f 01 ca             	clac   
c0010bca:	c3                   	ret    
c0010bcb:	90                   	nop

c0010bcc <CPU::setupSMAP()>:
c0010bcc:	0f 20 e0             	mov    eax,cr4
c0010bcf:	0d 00 00 20 00       	or     eax,0x200000
c0010bd4:	0f 22 e0             	mov    cr4,eax
c0010bd7:	eb e1                	jmp    c0010bba <CPU::prohibitUsermodeDataAccess()>
c0010bd9:	90                   	nop

c0010bda <CPU::setupFeatures()>:
c0010bda:	53                   	push   ebx
c0010bdb:	83 ec 08             	sub    esp,0x8
c0010bde:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010be2:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010be9:	74 18                	je     c0010c03 <CPU::setupFeatures()+0x29>
c0010beb:	83 ec 0c             	sub    esp,0xc
c0010bee:	68 71 23 02 c0       	push   0xc0022371
c0010bf3:	e8 32 9d ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0010bf8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bfb:	e8 42 ff ff ff       	call   c0010b42 <CPU::setupUMIP()>
c0010c00:	83 c4 10             	add    esp,0x10
c0010c03:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010c0a:	74 18                	je     c0010c24 <CPU::setupFeatures()+0x4a>
c0010c0c:	83 ec 0c             	sub    esp,0xc
c0010c0f:	68 7b 23 02 c0       	push   0xc002237b
c0010c14:	e8 11 9d ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0010c19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c1c:	e8 2b ff ff ff       	call   c0010b4c <CPU::setupTSC()>
c0010c21:	83 c4 10             	add    esp,0x10
c0010c24:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010c2b:	74 18                	je     c0010c45 <CPU::setupFeatures()+0x6b>
c0010c2d:	83 ec 0c             	sub    esp,0xc
c0010c30:	68 84 23 02 c0       	push   0xc0022384
c0010c35:	e8 f0 9c ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0010c3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c3d:	e8 14 ff ff ff       	call   c0010b56 <CPU::setupLargePages()>
c0010c42:	83 c4 10             	add    esp,0x10
c0010c45:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010c4c:	74 18                	je     c0010c66 <CPU::setupFeatures()+0x8c>
c0010c4e:	83 ec 0c             	sub    esp,0xc
c0010c51:	68 8d 23 02 c0       	push   0xc002238d
c0010c56:	e8 cf 9c ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0010c5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c5e:	e8 3b ff ff ff       	call   c0010b9e <CPU::setupGlobalPages()>
c0010c63:	83 c4 10             	add    esp,0x10
c0010c66:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010c6d:	74 18                	je     c0010c87 <CPU::setupFeatures()+0xad>
c0010c6f:	83 ec 0c             	sub    esp,0xc
c0010c72:	68 9f 23 02 c0       	push   0xc002239f
c0010c77:	e8 ae 9c ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0010c7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c7f:	e8 dc fe ff ff       	call   c0010b60 <CPU::setupPAT()>
c0010c84:	83 c4 10             	add    esp,0x10
c0010c87:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010c8e:	74 11                	je     c0010ca1 <CPU::setupFeatures()+0xc7>
c0010c90:	c7 44 24 10 a8 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc00223a8
c0010c98:	83 c4 08             	add    esp,0x8
c0010c9b:	5b                   	pop    ebx
c0010c9c:	e9 89 9c ff ff       	jmp    c000a92a <Dbg::kprintf(char const*, ...)>
c0010ca1:	83 c4 08             	add    esp,0x8
c0010ca4:	5b                   	pop    ebx
c0010ca5:	c3                   	ret    

c0010ca6 <CPU::open(int, int, void*)>:
c0010ca6:	55                   	push   ebp
c0010ca7:	57                   	push   edi
c0010ca8:	56                   	push   esi
c0010ca9:	53                   	push   ebx
c0010caa:	83 ec 18             	sub    esp,0x18
c0010cad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010cb1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010cb5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010cb9:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010cbf:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010cc5:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010ccb:	50                   	push   eax
c0010ccc:	e8 2f 67 ff ff       	call   c0007400 <GDT::setup()>
c0010cd1:	83 c4 0c             	add    esp,0xc
c0010cd4:	6a 00                	push   0x0
c0010cd6:	68 ef be ad de       	push   0xdeadbeef
c0010cdb:	55                   	push   ebp
c0010cdc:	e8 af 82 ff ff       	call   c0008f90 <TSS::setup(unsigned long, unsigned long)>
c0010ce1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010ce4:	e8 87 82 ff ff       	call   c0008f70 <TSS::flush()>
c0010ce9:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010cef:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cf2:	e8 6b 69 ff ff       	call   c0007662 <IDT::setup()>
c0010cf7:	b8 00 04 00 00       	mov    eax,0x400
c0010cfc:	0f 23 f8             	mov    db7,eax
c0010cff:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010d09:	e8 f4 70 ff ff       	call   c0007e02 <Phys::allocatePage()>
c0010d0e:	83 c4 10             	add    esp,0x10
c0010d11:	85 f6                	test   esi,esi
c0010d13:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010d19:	89 38                	mov    DWORD PTR [eax],edi
c0010d1b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010d21:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d24:	74 10                	je     c0010d36 <CPU::open(int, int, void*)+0x90>
c0010d26:	50                   	push   eax
c0010d27:	50                   	push   eax
c0010d28:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010d2e:	56                   	push   esi
c0010d2f:	e8 78 8b ff ff       	call   c00098ac <VAS::setCPUSpecific(unsigned long)>
c0010d34:	eb 0d                	jmp    c0010d43 <CPU::open(int, int, void*)+0x9d>
c0010d36:	83 ec 0c             	sub    esp,0xc
c0010d39:	68 b2 23 02 c0       	push   0xc00223b2
c0010d3e:	e8 9c 08 00 00       	call   c00115df <KePanic(char const*)>
c0010d43:	83 c4 10             	add    esp,0x10
c0010d46:	83 ec 0c             	sub    esp,0xc
c0010d49:	68 c0 23 02 c0       	push   0xc00223c0
c0010d4e:	e8 8e 01 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c0010d53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d56:	e8 07 f7 ff ff       	call   c0010462 <CPU::detectFeatures()>
c0010d5b:	c7 04 24 e3 23 02 c0 	mov    DWORD PTR [esp],0xc00223e3
c0010d62:	e8 7a 01 00 00       	call   c0010ee1 <KeSetBootMessage(char const*)>
c0010d67:	e8 5f 74 00 00       	call   c00181cb <HalInitialise()>
c0010d6c:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010d71:	83 e0 10             	and    eax,0x10
c0010d74:	83 f8 01             	cmp    eax,0x1
c0010d77:	19 c0                	sbb    eax,eax
c0010d79:	83 e0 46             	and    eax,0x46
c0010d7c:	83 c0 1e             	add    eax,0x1e
c0010d7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d82:	e8 6a d6 ff ff       	call   c000e3f1 <setupTimer(int)>
c0010d87:	83 c4 10             	add    esp,0x10
c0010d8a:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010d91:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010d97:	74 0c                	je     c0010da5 <CPU::open(int, int, void*)+0xff>
c0010d99:	83 ec 0c             	sub    esp,0xc
c0010d9c:	53                   	push   ebx
c0010d9d:	e8 38 fe ff ff       	call   c0010bda <CPU::setupFeatures()>
c0010da2:	83 c4 10             	add    esp,0x10
c0010da5:	83 c4 0c             	add    esp,0xc
c0010da8:	31 c0                	xor    eax,eax
c0010daa:	5b                   	pop    ebx
c0010dab:	5e                   	pop    esi
c0010dac:	5f                   	pop    edi
c0010dad:	5d                   	pop    ebp
c0010dae:	c3                   	ret    

c0010daf <KeInitialiseAtexit()>:
c0010daf:	83 ec 10             	sub    esp,0x10
c0010db2:	6a 60                	push   0x60
c0010db4:	6a 00                	push   0x0
c0010db6:	68 20 be 02 c0       	push   0xc002be20
c0010dbb:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010dc5:	e8 26 f7 fe ff       	call   c00004f0 <memset>
c0010dca:	83 c4 1c             	add    esp,0x1c
c0010dcd:	c3                   	ret    

c0010dce <KeRegisterAtexit(void (*)(void*), void*)>:
c0010dce:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010dd3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010dd7:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010dde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010de2:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010de9:	40                   	inc    eax
c0010dea:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010def:	83 f8 17             	cmp    eax,0x17
c0010df2:	7e 0d                	jle    c0010e01 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010df4:	c7 44 24 04 24 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022424
c0010dfc:	e9 de 07 00 00       	jmp    c00115df <KePanic(char const*)>
c0010e01:	c3                   	ret    

c0010e02 <KeExecuteAtexit()>:
c0010e02:	53                   	push   ebx
c0010e03:	31 db                	xor    ebx,ebx
c0010e05:	83 ec 08             	sub    esp,0x8
c0010e08:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010e0e:	7e 50                	jle    c0010e60 <KeExecuteAtexit()+0x5e>
c0010e10:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010e17:	85 c0                	test   eax,eax
c0010e19:	74 42                	je     c0010e5d <KeExecuteAtexit()+0x5b>
c0010e1b:	51                   	push   ecx
c0010e1c:	50                   	push   eax
c0010e1d:	53                   	push   ebx
c0010e1e:	68 3d 24 02 c0       	push   0xc002243d
c0010e23:	e8 02 9b ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0010e28:	58                   	pop    eax
c0010e29:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010e30:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010e37:	c7 04 24 5f 24 02 c0 	mov    DWORD PTR [esp],0xc002245f
c0010e3e:	e8 e7 9a ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0010e43:	c7 04 24 bf 35 02 c0 	mov    DWORD PTR [esp],0xc00235bf
c0010e4a:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010e55:	e8 d0 9a ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0010e5a:	83 c4 10             	add    esp,0x10
c0010e5d:	43                   	inc    ebx
c0010e5e:	eb a8                	jmp    c0010e08 <KeExecuteAtexit()+0x6>
c0010e60:	83 c4 08             	add    esp,0x8
c0010e63:	5b                   	pop    ebx
c0010e64:	c3                   	ret    

c0010e65 <KeDisplaySplashScreen()>:
c0010e65:	55                   	push   ebp
c0010e66:	bd 05 00 00 00       	mov    ebp,0x5
c0010e6b:	57                   	push   edi
c0010e6c:	bf 0a 00 00 00       	mov    edi,0xa
c0010e71:	56                   	push   esi
c0010e72:	31 f6                	xor    esi,esi
c0010e74:	53                   	push   ebx
c0010e75:	31 db                	xor    ebx,ebx
c0010e77:	83 ec 0c             	sub    esp,0xc
c0010e7a:	0f b6 96 20 38 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc7e0]
c0010e81:	85 d2                	test   edx,edx
c0010e83:	89 d0                	mov    eax,edx
c0010e85:	74 52                	je     c0010ed9 <KeDisplaySplashScreen()+0x74>
c0010e87:	80 bb 56 38 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc7aa],0xdb
c0010e8e:	75 13                	jne    c0010ea3 <KeDisplaySplashScreen()+0x3e>
c0010e90:	0f b6 8b 55 38 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc7ab]
c0010e97:	83 e1 fe             	and    ecx,0xfffffffe
c0010e9a:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010ea0:	75 01                	jne    c0010ea3 <KeDisplaySplashScreen()+0x3e>
c0010ea2:	47                   	inc    edi
c0010ea3:	83 fa 0d             	cmp    edx,0xd
c0010ea6:	74 28                	je     c0010ed0 <KeDisplaySplashScreen()+0x6b>
c0010ea8:	83 fa 0a             	cmp    edx,0xa
c0010eab:	75 0a                	jne    c0010eb7 <KeDisplaySplashScreen()+0x52>
c0010ead:	45                   	inc    ebp
c0010eae:	bf 0a 00 00 00       	mov    edi,0xa
c0010eb3:	31 db                	xor    ebx,ebx
c0010eb5:	eb 19                	jmp    c0010ed0 <KeDisplaySplashScreen()+0x6b>
c0010eb7:	83 ec 0c             	sub    esp,0xc
c0010eba:	0f be c0             	movsx  eax,al
c0010ebd:	55                   	push   ebp
c0010ebe:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010ec1:	43                   	inc    ebx
c0010ec2:	52                   	push   edx
c0010ec3:	6a 00                	push   0x0
c0010ec5:	6a 0e                	push   0xe
c0010ec7:	50                   	push   eax
c0010ec8:	e8 7b 7f 00 00       	call   c0018e48 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010ecd:	83 c4 20             	add    esp,0x20
c0010ed0:	46                   	inc    esi
c0010ed1:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010ed7:	75 a1                	jne    c0010e7a <KeDisplaySplashScreen()+0x15>
c0010ed9:	83 c4 0c             	add    esp,0xc
c0010edc:	5b                   	pop    ebx
c0010edd:	5e                   	pop    esi
c0010ede:	5f                   	pop    edi
c0010edf:	5d                   	pop    ebp
c0010ee0:	c3                   	ret    

c0010ee1 <KeSetBootMessage(char const*)>:
c0010ee1:	57                   	push   edi
c0010ee2:	56                   	push   esi
c0010ee3:	53                   	push   ebx
c0010ee4:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010eea:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010ef1:	68 9e 00 00 00       	push   0x9e
c0010ef6:	6a 00                	push   0x0
c0010ef8:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010efc:	56                   	push   esi
c0010efd:	e8 ee f5 fe ff       	call   c00004f0 <memset>
c0010f02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f05:	e8 76 f6 fe ff       	call   c0000580 <strlen>
c0010f0a:	ba 50 00 00 00       	mov    edx,0x50
c0010f0f:	83 c4 10             	add    esp,0x10
c0010f12:	31 c9                	xor    ecx,ecx
c0010f14:	29 c2                	sub    edx,eax
c0010f16:	83 e2 fe             	and    edx,0xfffffffe
c0010f19:	01 f2                	add    edx,esi
c0010f1b:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010f20:	84 c0                	test   al,al
c0010f22:	74 0a                	je     c0010f2e <KeSetBootMessage(char const*)+0x4d>
c0010f24:	80 cc 0f             	or     ah,0xf
c0010f27:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010f2b:	41                   	inc    ecx
c0010f2c:	eb ed                	jmp    c0010f1b <KeSetBootMessage(char const*)+0x3a>
c0010f2e:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010f33:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010f38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f3a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010f40:	5b                   	pop    ebx
c0010f41:	5e                   	pop    esi
c0010f42:	5f                   	pop    edi
c0010f43:	c3                   	ret    

c0010f44 <Krnl::handlePowerButton()>:
c0010f44:	83 ec 0c             	sub    esp,0xc
c0010f47:	e8 ee 06 00 00       	call   c001163a <KeHandlePowerButton()>
c0010f4c:	90                   	nop
c0010f4d:	83 c4 0c             	add    esp,0xc
c0010f50:	c3                   	ret    
c0010f51:	8d 76 00             	lea    esi,[esi+0x0]

c0010f54 <Krnl::handleSleepButton()>:
c0010f54:	83 ec 0c             	sub    esp,0xc
c0010f57:	e8 13 07 00 00       	call   c001166f <KeHandleSleepButton()>
c0010f5c:	90                   	nop
c0010f5d:	83 c4 0c             	add    esp,0xc
c0010f60:	c3                   	ret    

c0010f61 <KeCalculateCRC32(unsigned char*, int)>:
c0010f61:	53                   	push   ebx
c0010f62:	83 c8 ff             	or     eax,0xffffffff
c0010f65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010f69:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f6d:	01 cb                	add    ebx,ecx
c0010f6f:	39 d9                	cmp    ecx,ebx
c0010f71:	74 15                	je     c0010f88 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010f73:	41                   	inc    ecx
c0010f74:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010f77:	31 c2                	xor    edx,eax
c0010f79:	c1 e8 08             	shr    eax,0x8
c0010f7c:	0f b6 d2             	movzx  edx,dl
c0010f7f:	33 04 95 80 39 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc680]
c0010f86:	eb e7                	jmp    c0010f6f <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010f88:	5b                   	pop    ebx
c0010f89:	f7 d0                	not    eax
c0010f8b:	c3                   	ret    

c0010f8c <EnvVarContainer::getEnv(char const*)>:
c0010f8c:	57                   	push   edi
c0010f8d:	56                   	push   esi
c0010f8e:	53                   	push   ebx
c0010f8f:	31 db                	xor    ebx,ebx
c0010f91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f95:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010f97:	7e 2b                	jle    c0010fc4 <EnvVarContainer::getEnv(char const*)+0x38>
c0010f99:	50                   	push   eax
c0010f9a:	50                   	push   eax
c0010f9b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010f9e:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010fa5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010fa8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010fac:	e8 cf f7 fe ff       	call   c0000780 <strcmp>
c0010fb1:	83 c4 10             	add    esp,0x10
c0010fb4:	85 c0                	test   eax,eax
c0010fb6:	75 09                	jne    c0010fc1 <EnvVarContainer::getEnv(char const*)+0x35>
c0010fb8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010fbb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010fbf:	eb 05                	jmp    c0010fc6 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010fc1:	43                   	inc    ebx
c0010fc2:	eb d1                	jmp    c0010f95 <EnvVarContainer::getEnv(char const*)+0x9>
c0010fc4:	31 c0                	xor    eax,eax
c0010fc6:	5b                   	pop    ebx
c0010fc7:	5e                   	pop    esi
c0010fc8:	5f                   	pop    edi
c0010fc9:	c3                   	ret    

c0010fca <EnvVarContainer::setEnv(char const*, char const*)>:
c0010fca:	55                   	push   ebp
c0010fcb:	57                   	push   edi
c0010fcc:	56                   	push   esi
c0010fcd:	53                   	push   ebx
c0010fce:	83 ec 28             	sub    esp,0x28
c0010fd1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010fd5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010fd9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010fdd:	56                   	push   esi
c0010fde:	e8 9d f5 fe ff       	call   c0000580 <strlen>
c0010fe3:	40                   	inc    eax
c0010fe4:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fe7:	e8 07 6b ff ff       	call   c0007af3 <malloc>
c0010fec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010ff3:	e8 88 f5 fe ff       	call   c0000580 <strlen>
c0010ff8:	40                   	inc    eax
c0010ff9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ffc:	e8 f2 6a ff ff       	call   c0007af3 <malloc>
c0011001:	89 34 24             	mov    DWORD PTR [esp],esi
c0011004:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011008:	e8 73 f5 fe ff       	call   c0000580 <strlen>
c001100d:	83 c4 0c             	add    esp,0xc
c0011010:	40                   	inc    eax
c0011011:	50                   	push   eax
c0011012:	6a 00                	push   0x0
c0011014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011018:	e8 d3 f4 fe ff       	call   c00004f0 <memset>
c001101d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011020:	e8 5b f5 fe ff       	call   c0000580 <strlen>
c0011025:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011029:	8d 48 01             	lea    ecx,[eax+0x1]
c001102c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001102e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011031:	89 de                	mov    esi,ebx
c0011033:	e8 48 f5 fe ff       	call   c0000580 <strlen>
c0011038:	83 c4 0c             	add    esp,0xc
c001103b:	40                   	inc    eax
c001103c:	50                   	push   eax
c001103d:	6a 00                	push   0x0
c001103f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011043:	e8 a8 f4 fe ff       	call   c00004f0 <memset>
c0011048:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001104b:	e8 30 f5 fe ff       	call   c0000580 <strlen>
c0011050:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011054:	8d 48 01             	lea    ecx,[eax+0x1]
c0011057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011059:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001105c:	40                   	inc    eax
c001105d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011060:	c1 e0 03             	shl    eax,0x3
c0011063:	5a                   	pop    edx
c0011064:	59                   	pop    ecx
c0011065:	50                   	push   eax
c0011066:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011069:	e8 71 6a ff ff       	call   c0007adf <realloc>
c001106e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011071:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011075:	b9 08 00 00 00       	mov    ecx,0x8
c001107a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001107d:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011081:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011083:	83 c4 2c             	add    esp,0x2c
c0011086:	5b                   	pop    ebx
c0011087:	5e                   	pop    esi
c0011088:	5f                   	pop    edi
c0011089:	5d                   	pop    ebp
c001108a:	c3                   	ret    
c001108b:	90                   	nop

c001108c <EnvVarContainer::deleteEnv(char const*)>:
c001108c:	c3                   	ret    
c001108d:	90                   	nop

c001108e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001108e:	55                   	push   ebp
c001108f:	57                   	push   edi
c0011090:	56                   	push   esi
c0011091:	53                   	push   ebx
c0011092:	81 ec 38 01 00 00    	sub    esp,0x138
c0011098:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001109f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00110a6:	68 14 01 00 00       	push   0x114
c00110ab:	e8 43 6a ff ff       	call   c0007af3 <malloc>
c00110b0:	83 c4 0c             	add    esp,0xc
c00110b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00110b6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00110bd:	89 c3                	mov    ebx,eax
c00110bf:	50                   	push   eax
c00110c0:	e8 7d aa ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c00110c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110c8:	e8 57 ad ff ff       	call   c000be24 <File::exists()>
c00110cd:	83 c4 10             	add    esp,0x10
c00110d0:	84 c0                	test   al,al
c00110d2:	75 31                	jne    c0011105 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00110d4:	50                   	push   eax
c00110d5:	50                   	push   eax
c00110d6:	6a 12                	push   0x12
c00110d8:	53                   	push   ebx
c00110d9:	e8 82 aa ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c00110de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110e0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00110e3:	89 34 24             	mov    DWORD PTR [esp],esi
c00110e6:	e8 95 f4 fe ff       	call   c0000580 <strlen>
c00110eb:	5a                   	pop    edx
c00110ec:	8d 54 24 20          	lea    edx,[esp+0x20]
c00110f0:	52                   	push   edx
c00110f1:	31 d2                	xor    edx,edx
c00110f3:	56                   	push   esi
c00110f4:	52                   	push   edx
c00110f5:	50                   	push   eax
c00110f6:	53                   	push   ebx
c00110f7:	ff d7                	call   edi
c00110f9:	83 c4 14             	add    esp,0x14
c00110fc:	53                   	push   ebx
c00110fd:	e8 bc aa ff ff       	call   c000bbbe <File::close()>
c0011102:	83 c4 10             	add    esp,0x10
c0011105:	56                   	push   esi
c0011106:	31 f6                	xor    esi,esi
c0011108:	68 00 01 00 00       	push   0x100
c001110d:	6a 00                	push   0x0
c001110f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011113:	50                   	push   eax
c0011114:	e8 d7 f3 fe ff       	call   c00004f0 <memset>
c0011119:	5f                   	pop    edi
c001111a:	58                   	pop    eax
c001111b:	6a 01                	push   0x1
c001111d:	53                   	push   ebx
c001111e:	e8 3d aa ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c0011123:	83 c4 10             	add    esp,0x10
c0011126:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001112e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011136:	83 ec 0c             	sub    esp,0xc
c0011139:	8d 54 24 20          	lea    edx,[esp+0x20]
c001113d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001113f:	52                   	push   edx
c0011140:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0011144:	51                   	push   ecx
c0011145:	6a 00                	push   0x0
c0011147:	6a 01                	push   0x1
c0011149:	53                   	push   ebx
c001114a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001114d:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0011152:	83 c4 20             	add    esp,0x20
c0011155:	85 c0                	test   eax,eax
c0011157:	89 c1                	mov    ecx,eax
c0011159:	0f 84 36 01 00 00    	je     c0011295 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001115f:	83 f8 0d             	cmp    eax,0xd
c0011162:	0f 84 22 01 00 00    	je     c001128a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011168:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001116d:	0f 84 f0 00 00 00    	je     c0011263 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0011173:	83 f8 0a             	cmp    eax,0xa
c0011176:	74 13                	je     c001118b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011178:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001117d:	74 0c                	je     c001118b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001117f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011185:	0f 8e f6 00 00 00    	jle    c0011281 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001118b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001118f:	83 ec 0c             	sub    esp,0xc
c0011192:	8d 78 01             	lea    edi,[eax+0x1]
c0011195:	57                   	push   edi
c0011196:	e8 58 69 ff ff       	call   c0007af3 <malloc>
c001119b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001119f:	8d 56 04             	lea    edx,[esi+0x4]
c00111a2:	89 14 24             	mov    DWORD PTR [esp],edx
c00111a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00111a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00111ad:	e8 41 69 ff ff       	call   c0007af3 <malloc>
c00111b2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00111b6:	83 c4 0c             	add    esp,0xc
c00111b9:	57                   	push   edi
c00111ba:	6a 00                	push   0x0
c00111bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00111c0:	e8 2b f3 fe ff       	call   c00004f0 <memset>
c00111c5:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111c9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00111cd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00111d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111d3:	83 c4 0c             	add    esp,0xc
c00111d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111da:	52                   	push   edx
c00111db:	6a 00                	push   0x0
c00111dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00111e1:	e8 0a f3 fe ff       	call   c00004f0 <memset>
c00111e6:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111ea:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00111ee:	89 34 24             	mov    DWORD PTR [esp],esi
c00111f1:	e8 8a f3 fe ff       	call   c0000580 <strlen>
c00111f6:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00111fa:	89 c1                	mov    ecx,eax
c00111fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011201:	83 c4 10             	add    esp,0x10
c0011204:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0011207:	40                   	inc    eax
c0011208:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001120b:	85 d2                	test   edx,edx
c001120d:	75 0c                	jne    c001121b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001120f:	83 ec 0c             	sub    esp,0xc
c0011212:	6a 08                	push   0x8
c0011214:	e8 da 68 ff ff       	call   c0007af3 <malloc>
c0011219:	eb 0c                	jmp    c0011227 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001121b:	51                   	push   ecx
c001121c:	51                   	push   ecx
c001121d:	c1 e0 03             	shl    eax,0x3
c0011220:	50                   	push   eax
c0011221:	52                   	push   edx
c0011222:	e8 b8 68 ff ff       	call   c0007adf <realloc>
c0011227:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001122a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001122d:	83 c4 10             	add    esp,0x10
c0011230:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0011233:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011237:	b9 08 00 00 00       	mov    ecx,0x8
c001123c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011240:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011242:	50                   	push   eax
c0011243:	31 f6                	xor    esi,esi
c0011245:	68 00 01 00 00       	push   0x100
c001124a:	6a 00                	push   0x0
c001124c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011250:	50                   	push   eax
c0011251:	e8 9a f2 fe ff       	call   c00004f0 <memset>
c0011256:	83 c4 10             	add    esp,0x10
c0011259:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011261:	eb 27                	jmp    c001128a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011263:	83 f8 3d             	cmp    eax,0x3d
c0011266:	74 1e                	je     c0011286 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011268:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001126e:	7f 07                	jg     c0011277 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011270:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0011274:	46                   	inc    esi
c0011275:	eb 13                	jmp    c001128a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011277:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001127f:	eb 09                	jmp    c001128a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011281:	83 f8 3d             	cmp    eax,0x3d
c0011284:	75 ea                	jne    c0011270 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0011286:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001128a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001128f:	0f 85 99 fe ff ff    	jne    c001112e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011295:	83 ec 0c             	sub    esp,0xc
c0011298:	53                   	push   ebx
c0011299:	e8 20 a9 ff ff       	call   c000bbbe <File::close()>
c001129e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112a6:	81 c4 3c 01 00 00    	add    esp,0x13c
c00112ac:	5b                   	pop    ebx
c00112ad:	5e                   	pop    esi
c00112ae:	5f                   	pop    edi
c00112af:	5d                   	pop    ebp
c00112b0:	c3                   	ret    
c00112b1:	90                   	nop

c00112b2 <EnvVarContainer::__loadSystem()>:
c00112b2:	83 ec 10             	sub    esp,0x10
c00112b5:	68 80 3d 02 c0       	push   0xc0023d80
c00112ba:	68 64 24 02 c0       	push   0xc0022464
c00112bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c3:	e8 c6 fd ff ff       	call   c001108e <EnvVarContainer::loadFrom(char const*, char const*)>
c00112c8:	83 c4 1c             	add    esp,0x1c
c00112cb:	c3                   	ret    

c00112cc <EnvVarContainer::__loadUser()>:
c00112cc:	c3                   	ret    
c00112cd:	90                   	nop

c00112ce <EnvVarContainer::EnvVarContainer(Process*)>:
c00112ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00112e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00112e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112ee:	90                   	nop
c00112ef:	c3                   	ret    

c00112f0 <EnvVarContainer::~EnvVarContainer()>:
c00112f0:	83 ec 0c             	sub    esp,0xc
c00112f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112fa:	85 c0                	test   eax,eax
c00112fc:	74 1d                	je     c001131b <EnvVarContainer::~EnvVarContainer()+0x2b>
c00112fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011302:	8b 00                	mov    eax,DWORD PTR [eax]
c0011304:	85 c0                	test   eax,eax
c0011306:	74 13                	je     c001131b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001130c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001130f:	83 ec 0c             	sub    esp,0xc
c0011312:	50                   	push   eax
c0011313:	e8 eb 67 ff ff       	call   c0007b03 <free>
c0011318:	83 c4 10             	add    esp,0x10
c001131b:	90                   	nop
c001131c:	83 c4 0c             	add    esp,0xc
c001131f:	c3                   	ret    

c0011320 <KeGetEnv(Process*, char const*)>:
c0011320:	53                   	push   ebx
c0011321:	83 ec 08             	sub    esp,0x8
c0011324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011328:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c001132e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011332:	74 04                	je     c0011338 <KeGetEnv(Process*, char const*)+0x18>
c0011334:	85 c0                	test   eax,eax
c0011336:	75 0b                	jne    c0011343 <KeGetEnv(Process*, char const*)+0x23>
c0011338:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c001133d:	85 c0                	test   eax,eax
c001133f:	75 19                	jne    c001135a <KeGetEnv(Process*, char const*)+0x3a>
c0011341:	eb 27                	jmp    c001136a <KeGetEnv(Process*, char const*)+0x4a>
c0011343:	52                   	push   edx
c0011344:	52                   	push   edx
c0011345:	53                   	push   ebx
c0011346:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001134c:	e8 3b fc ff ff       	call   c0010f8c <EnvVarContainer::getEnv(char const*)>
c0011351:	83 c4 10             	add    esp,0x10
c0011354:	85 c0                	test   eax,eax
c0011356:	75 28                	jne    c0011380 <KeGetEnv(Process*, char const*)+0x60>
c0011358:	eb de                	jmp    c0011338 <KeGetEnv(Process*, char const*)+0x18>
c001135a:	52                   	push   edx
c001135b:	52                   	push   edx
c001135c:	53                   	push   ebx
c001135d:	50                   	push   eax
c001135e:	e8 29 fc ff ff       	call   c0010f8c <EnvVarContainer::getEnv(char const*)>
c0011363:	83 c4 10             	add    esp,0x10
c0011366:	85 c0                	test   eax,eax
c0011368:	75 16                	jne    c0011380 <KeGetEnv(Process*, char const*)+0x60>
c001136a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001136e:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011373:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011377:	83 c4 08             	add    esp,0x8
c001137a:	5b                   	pop    ebx
c001137b:	e9 0c fc ff ff       	jmp    c0010f8c <EnvVarContainer::getEnv(char const*)>
c0011380:	83 c4 08             	add    esp,0x8
c0011383:	5b                   	pop    ebx
c0011384:	c3                   	ret    

c0011385 <KeSetEnvSystem(char const*, char const*)>:
c0011385:	83 ec 10             	sub    esp,0x10
c0011388:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001138c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011390:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c0011396:	e8 2f fc ff ff       	call   c0010fca <EnvVarContainer::setEnv(char const*, char const*)>
c001139b:	83 c4 1c             	add    esp,0x1c
c001139e:	c3                   	ret    

c001139f <KeSetEnvUser(char const*, char const*)>:
c001139f:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00113a4:	85 c0                	test   eax,eax
c00113a6:	74 15                	je     c00113bd <KeSetEnvUser(char const*, char const*)+0x1e>
c00113a8:	83 ec 10             	sub    esp,0x10
c00113ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113b3:	50                   	push   eax
c00113b4:	e8 11 fc ff ff       	call   c0010fca <EnvVarContainer::setEnv(char const*, char const*)>
c00113b9:	83 c4 1c             	add    esp,0x1c
c00113bc:	c3                   	ret    
c00113bd:	c3                   	ret    

c00113be <KeSetEnvProcess(Process*, char const*, char const*)>:
c00113be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113c2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00113c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113cc:	e9 f9 fb ff ff       	jmp    c0010fca <EnvVarContainer::setEnv(char const*, char const*)>

c00113d1 <KeDeleteEnvSystem(char const*)>:
c00113d1:	c3                   	ret    

c00113d2 <KeDeleteEnvUser(char const*)>:
c00113d2:	c3                   	ret    

c00113d3 <KeDeleteEnvProcess(Process*, char const*)>:
c00113d3:	c3                   	ret    

c00113d4 <KeNewProcessEnv(Process*)>:
c00113d4:	83 ec 28             	sub    esp,0x28
c00113d7:	6a 0c                	push   0xc
c00113d9:	e8 15 67 ff ff       	call   c0007af3 <malloc>
c00113de:	5a                   	pop    edx
c00113df:	59                   	pop    ecx
c00113e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00113e4:	50                   	push   eax
c00113e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113e9:	e8 e0 fe ff ff       	call   c00112ce <EnvVarContainer::EnvVarContainer(Process*)>
c00113ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113f2:	83 c4 2c             	add    esp,0x2c
c00113f5:	c3                   	ret    

c00113f6 <KeCopyProcessEnv(Process*, Process*)>:
c00113f6:	57                   	push   edi
c00113f7:	56                   	push   esi
c00113f8:	53                   	push   ebx
c00113f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113fd:	83 ec 0c             	sub    esp,0xc
c0011400:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011406:	6a 0c                	push   0xc
c0011408:	e8 e6 66 ff ff       	call   c0007af3 <malloc>
c001140d:	89 c3                	mov    ebx,eax
c001140f:	58                   	pop    eax
c0011410:	5a                   	pop    edx
c0011411:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011415:	53                   	push   ebx
c0011416:	e8 b3 fe ff ff       	call   c00112ce <EnvVarContainer::EnvVarContainer(Process*)>
c001141b:	8b 07                	mov    eax,DWORD PTR [edi]
c001141d:	89 03                	mov    DWORD PTR [ebx],eax
c001141f:	c1 e0 03             	shl    eax,0x3
c0011422:	89 04 24             	mov    DWORD PTR [esp],eax
c0011425:	e8 c9 66 ff ff       	call   c0007af3 <malloc>
c001142a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001142d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001142f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011432:	89 c7                	mov    edi,eax
c0011434:	c1 e1 03             	shl    ecx,0x3
c0011437:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011439:	83 c4 10             	add    esp,0x10
c001143c:	89 d8                	mov    eax,ebx
c001143e:	5b                   	pop    ebx
c001143f:	5e                   	pop    esi
c0011440:	5f                   	pop    edi
c0011441:	c3                   	ret    

c0011442 <KeLoadSystemEnv()>:
c0011442:	53                   	push   ebx
c0011443:	83 ec 14             	sub    esp,0x14
c0011446:	6a 0c                	push   0xc
c0011448:	e8 a6 66 ff ff       	call   c0007af3 <malloc>
c001144d:	89 c3                	mov    ebx,eax
c001144f:	58                   	pop    eax
c0011450:	5a                   	pop    edx
c0011451:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011457:	53                   	push   ebx
c0011458:	e8 71 fe ff ff       	call   c00112ce <EnvVarContainer::EnvVarContainer(Process*)>
c001145d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011460:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c0011466:	e8 47 fe ff ff       	call   c00112b2 <EnvVarContainer::__loadSystem()>
c001146b:	83 c4 18             	add    esp,0x18
c001146e:	5b                   	pop    ebx
c001146f:	c3                   	ret    

c0011470 <KeLoadUserEnv()>:
c0011470:	53                   	push   ebx
c0011471:	83 ec 14             	sub    esp,0x14
c0011474:	6a 0c                	push   0xc
c0011476:	e8 78 66 ff ff       	call   c0007af3 <malloc>
c001147b:	89 c3                	mov    ebx,eax
c001147d:	58                   	pop    eax
c001147e:	5a                   	pop    edx
c001147f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011485:	53                   	push   ebx
c0011486:	e8 43 fe ff ff       	call   c00112ce <EnvVarContainer::EnvVarContainer(Process*)>
c001148b:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c0011491:	83 c4 18             	add    esp,0x18
c0011494:	5b                   	pop    ebx
c0011495:	c3                   	ret    

c0011496 <KeFlushEnv()>:
c0011496:	c3                   	ret    

c0011497 <KeGetProcessTotalEnvCount(Process*)>:
c0011497:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001149b:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c00114a1:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114a7:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00114ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00114ae:	03 01                	add    eax,DWORD PTR [ecx]
c00114b0:	85 d2                	test   edx,edx
c00114b2:	74 02                	je     c00114b6 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00114b4:	03 02                	add    eax,DWORD PTR [edx]
c00114b6:	c3                   	ret    

c00114b7 <KeGetProcessEnvPair(Process*, int)>:
c00114b7:	57                   	push   edi
c00114b8:	56                   	push   esi
c00114b9:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00114bf:	53                   	push   ebx
c00114c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00114c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114c8:	85 f6                	test   esi,esi
c00114ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00114ce:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114d4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00114d6:	75 16                	jne    c00114ee <KeGetProcessEnvPair(Process*, int)+0x37>
c00114d8:	39 c2                	cmp    edx,eax
c00114da:	7c 16                	jl     c00114f2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00114dc:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c00114e2:	8b 31                	mov    esi,DWORD PTR [ecx]
c00114e4:	01 c6                	add    esi,eax
c00114e6:	39 d6                	cmp    esi,edx
c00114e8:	7e 3c                	jle    c0011526 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00114ea:	29 c2                	sub    edx,eax
c00114ec:	eb 04                	jmp    c00114f2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00114ee:	39 c2                	cmp    edx,eax
c00114f0:	7d 05                	jge    c00114f7 <KeGetProcessEnvPair(Process*, int)+0x40>
c00114f2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00114f5:	eb 20                	jmp    c0011517 <KeGetProcessEnvPair(Process*, int)+0x60>
c00114f7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00114f9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00114fc:	39 d1                	cmp    ecx,edx
c00114fe:	7e 04                	jle    c0011504 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011500:	29 c2                	sub    edx,eax
c0011502:	eb 10                	jmp    c0011514 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011504:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c001150a:	03 0e                	add    ecx,DWORD PTR [esi]
c001150c:	39 d1                	cmp    ecx,edx
c001150e:	7e 16                	jle    c0011526 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011510:	29 c2                	sub    edx,eax
c0011512:	29 fa                	sub    edx,edi
c0011514:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011517:	8d 14 d0             	lea    edx,[eax+edx*8]
c001151a:	8b 02                	mov    eax,DWORD PTR [edx]
c001151c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001151f:	89 03                	mov    DWORD PTR [ebx],eax
c0011521:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011524:	eb 1d                	jmp    c0011543 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011526:	83 ec 0c             	sub    esp,0xc
c0011529:	68 86 24 02 c0       	push   0xc0022486
c001152e:	e8 ac 00 00 00       	call   c00115df <KePanic(char const*)>
c0011533:	83 c4 10             	add    esp,0x10
c0011536:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001153c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011543:	89 d8                	mov    eax,ebx
c0011545:	5b                   	pop    ebx
c0011546:	5e                   	pop    esi
c0011547:	5f                   	pop    edi
c0011548:	c2 04 00             	ret    0x4

c001154b <CPU::current()>:
c001154b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011550:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011556:	c3                   	ret    

c0011557 <operator new(unsigned long)>:
c0011557:	e9 97 65 ff ff       	jmp    c0007af3 <malloc>

c001155c <operator delete(void*)>:
c001155c:	e9 b2 65 ff ff       	jmp    c0007b13 <rfree>

c0011561 <disableIRQs()>:
c0011561:	fa                   	cli    
c0011562:	c3                   	ret    

c0011563 <enableIRQs()>:
c0011563:	fb                   	sti    
c0011564:	c3                   	ret    

c0011565 <lockScheduler()>:
c0011565:	fa                   	cli    
c0011566:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001156c:	c3                   	ret    

c001156d <unlockScheduler()>:
c001156d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011572:	48                   	dec    eax
c0011573:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011578:	75 01                	jne    c001157b <unlockScheduler()+0xe>
c001157a:	fb                   	sti    
c001157b:	c3                   	ret    

c001157c <lockStuff()>:
c001157c:	fa                   	cli    
c001157d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011583:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c0011589:	c3                   	ret    

c001158a <unlockStuff()>:
c001158a:	83 ec 0c             	sub    esp,0xc
c001158d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0011592:	48                   	dec    eax
c0011593:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0011598:	75 18                	jne    c00115b2 <unlockStuff()+0x28>
c001159a:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00115a1:	74 0f                	je     c00115b2 <unlockStuff()+0x28>
c00115a3:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00115ad:	e8 5a 4b 00 00       	call   c001610c <schedule()>
c00115b2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115b7:	48                   	dec    eax
c00115b8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115bd:	75 01                	jne    c00115c0 <unlockStuff()+0x36>
c00115bf:	fb                   	sti    
c00115c0:	83 c4 0c             	add    esp,0xc
c00115c3:	c3                   	ret    

c00115c4 <Virt::getAKernelVAS()>:
c00115c4:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00115c9:	c3                   	ret    

c00115ca <__not_memcpy>:
c00115ca:	57                   	push   edi
c00115cb:	56                   	push   esi
c00115cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00115d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00115d8:	89 c7                	mov    edi,eax
c00115da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115dc:	5e                   	pop    esi
c00115dd:	5f                   	pop    edi
c00115de:	c3                   	ret    

c00115df <KePanic(char const*)>:
c00115df:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c00115e6:	e9 b1 6a 00 00       	jmp    c001809c <HalPanic(char const*)>

c00115eb <KePowerThread(void*)>:
c00115eb:	83 ec 0c             	sub    esp,0xc
c00115ee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115f3:	48                   	dec    eax
c00115f4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115f9:	75 01                	jne    c00115fc <KePowerThread(void*)+0x11>
c00115fb:	fb                   	sti    
c00115fc:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011603:	83 ec 0c             	sub    esp,0xc
c0011606:	6a 0a                	push   0xa
c0011608:	e8 2f 4e 00 00       	call   c001643c <sleep(unsigned int)>
c001160d:	83 c4 10             	add    esp,0x10
c0011610:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c0011617:	eb e3                	jmp    c00115fc <KePowerThread(void*)+0x11>

c0011619 <KeChangePowerSettings(PowerSettings)>:
c0011619:	57                   	push   edi
c001161a:	b9 09 00 00 00       	mov    ecx,0x9
c001161f:	56                   	push   esi
c0011620:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c0011625:	fc                   	cld    
c0011626:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001162a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001162c:	5e                   	pop    esi
c001162d:	5f                   	pop    edi
c001162e:	c3                   	ret    

c001162f <KeUserIOReceived()>:
c001162f:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011639:	c3                   	ret    

c001163a <KeHandlePowerButton()>:
c001163a:	83 ec 0c             	sub    esp,0xc
c001163d:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c0011642:	83 f8 02             	cmp    eax,0x2
c0011645:	75 10                	jne    c0011657 <KeHandlePowerButton()+0x1d>
c0011647:	83 ec 0c             	sub    esp,0xc
c001164a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011650:	e8 17 5b ff ff       	call   c000716c <Computer::shutdown()>
c0011655:	eb 11                	jmp    c0011668 <KeHandlePowerButton()+0x2e>
c0011657:	48                   	dec    eax
c0011658:	75 11                	jne    c001166b <KeHandlePowerButton()+0x31>
c001165a:	83 ec 0c             	sub    esp,0xc
c001165d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011663:	e8 34 5b ff ff       	call   c000719c <Computer::sleep()>
c0011668:	83 c4 10             	add    esp,0x10
c001166b:	83 c4 0c             	add    esp,0xc
c001166e:	c3                   	ret    

c001166f <KeHandleSleepButton()>:
c001166f:	83 ec 0c             	sub    esp,0xc
c0011672:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0011677:	83 f8 02             	cmp    eax,0x2
c001167a:	75 10                	jne    c001168c <KeHandleSleepButton()+0x1d>
c001167c:	83 ec 0c             	sub    esp,0xc
c001167f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011685:	e8 e2 5a ff ff       	call   c000716c <Computer::shutdown()>
c001168a:	eb 11                	jmp    c001169d <KeHandleSleepButton()+0x2e>
c001168c:	48                   	dec    eax
c001168d:	75 11                	jne    c00116a0 <KeHandleSleepButton()+0x31>
c001168f:	83 ec 0c             	sub    esp,0xc
c0011692:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011698:	e8 ff 5a ff ff       	call   c000719c <Computer::sleep()>
c001169d:	83 c4 10             	add    esp,0x10
c00116a0:	83 c4 0c             	add    esp,0xc
c00116a3:	c3                   	ret    

c00116a4 <KeSetupPowerManager()>:
c00116a4:	83 ec 0c             	sub    esp,0xc
c00116a7:	68 f0 00 00 00       	push   0xf0
c00116ac:	6a 00                	push   0x0
c00116ae:	68 eb 15 01 c0       	push   0xc00115eb
c00116b3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00116b9:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00116c3:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116ca:	e8 f1 47 00 00       	call   c0015ec0 <Process::createThread(void (*)(void*), void*, int)>
c00116cf:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c00116d9:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c00116e3:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c00116ed:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c00116f7:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011701:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c001170b:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c0011715:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c001171f:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011729:	83 c4 1c             	add    esp,0x1c
c001172c:	c3                   	ret    

c001172d <KeRand()>:
c001172d:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c0011737:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011741:	53                   	push   ebx
c0011742:	01 c1                	add    ecx,eax
c0011744:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011749:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c001174f:	01 ca                	add    edx,ecx
c0011751:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011756:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c001175b:	83 d2 00             	adc    edx,0x0
c001175e:	0f b7 da             	movzx  ebx,dx
c0011761:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c0011767:	0f ac d8 0e          	shrd   eax,ebx,0xe
c001176b:	5b                   	pop    ebx
c001176c:	c3                   	ret    

c001176d <KeSeedRand(unsigned int)>:
c001176d:	53                   	push   ebx
c001176e:	83 ec 08             	sub    esp,0x8
c0011771:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011775:	e8 41 6c 00 00       	call   c00183bb <HalGetRand()>
c001177a:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c0011784:	31 d8                	xor    eax,ebx
c0011786:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c001178b:	e8 9d ff ff ff       	call   c001172d <KeRand()>
c0011790:	83 c4 08             	add    esp,0x8
c0011793:	5b                   	pop    ebx
c0011794:	eb 97                	jmp    c001172d <KeRand()>

c0011796 <KeInitRand()>:
c0011796:	83 ec 0c             	sub    esp,0xc
c0011799:	e8 12 6a 00 00       	call   c00181b0 <HalQueryPerformanceCounter()>
c001179e:	0f 20 da             	mov    edx,cr3
c00117a1:	0f 22 da             	mov    cr3,edx
c00117a4:	0f 20 da             	mov    edx,cr3
c00117a7:	0f 22 da             	mov    cr3,edx
c00117aa:	0f 20 da             	mov    edx,cr3
c00117ad:	0f 22 da             	mov    cr3,edx
c00117b0:	0f 20 da             	mov    edx,cr3
c00117b3:	0f 22 da             	mov    cr3,edx
c00117b6:	83 ec 0c             	sub    esp,0xc
c00117b9:	35 03 8a 95 38       	xor    eax,0x38958a03
c00117be:	50                   	push   eax
c00117bf:	e8 a9 ff ff ff       	call   c001176d <KeSeedRand(unsigned int)>
c00117c4:	83 c4 1c             	add    esp,0x1c
c00117c7:	c3                   	ret    

c00117c8 <KeResolveCompatibilitySymbol(char*)>:
c00117c8:	83 ec 0c             	sub    esp,0xc
c00117cb:	83 ec 08             	sub    esp,0x8
c00117ce:	68 a0 24 02 c0       	push   0xc00224a0
c00117d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117d7:	e8 a4 ef fe ff       	call   c0000780 <strcmp>
c00117dc:	83 c4 10             	add    esp,0x10
c00117df:	85 c0                	test   eax,eax
c00117e1:	0f 94 c0             	sete   al
c00117e4:	0f b6 c0             	movzx  eax,al
c00117e7:	85 c0                	test   eax,eax
c00117e9:	74 0d                	je     c00117f8 <KeResolveCompatibilitySymbol(char*)+0x30>
c00117eb:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c00117f0:	e9 8b 01 00 00       	jmp    c0011980 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117f5:	8d 76 00             	lea    esi,[esi+0x0]
c00117f8:	83 ec 08             	sub    esp,0x8
c00117fb:	68 a9 24 02 c0       	push   0xc00224a9
c0011800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011804:	e8 77 ef fe ff       	call   c0000780 <strcmp>
c0011809:	83 c4 10             	add    esp,0x10
c001180c:	85 c0                	test   eax,eax
c001180e:	0f 94 c0             	sete   al
c0011811:	0f b6 c0             	movzx  eax,al
c0011814:	85 c0                	test   eax,eax
c0011816:	74 0c                	je     c0011824 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011818:	b8 d0 f7 01 c0       	mov    eax,0xc001f7d0
c001181d:	e9 5e 01 00 00       	jmp    c0011980 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011822:	66 90                	xchg   ax,ax
c0011824:	83 ec 08             	sub    esp,0x8
c0011827:	68 b3 24 02 c0       	push   0xc00224b3
c001182c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011830:	e8 4b ef fe ff       	call   c0000780 <strcmp>
c0011835:	83 c4 10             	add    esp,0x10
c0011838:	85 c0                	test   eax,eax
c001183a:	0f 94 c0             	sete   al
c001183d:	0f b6 c0             	movzx  eax,al
c0011840:	85 c0                	test   eax,eax
c0011842:	74 0c                	je     c0011850 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011844:	b8 04 f5 01 c0       	mov    eax,0xc001f504
c0011849:	e9 32 01 00 00       	jmp    c0011980 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001184e:	66 90                	xchg   ax,ax
c0011850:	83 ec 08             	sub    esp,0x8
c0011853:	68 bc 24 02 c0       	push   0xc00224bc
c0011858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001185c:	e8 1f ef fe ff       	call   c0000780 <strcmp>
c0011861:	83 c4 10             	add    esp,0x10
c0011864:	85 c0                	test   eax,eax
c0011866:	0f 94 c0             	sete   al
c0011869:	0f b6 c0             	movzx  eax,al
c001186c:	85 c0                	test   eax,eax
c001186e:	74 0c                	je     c001187c <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011870:	b8 df 15 01 c0       	mov    eax,0xc00115df
c0011875:	e9 06 01 00 00       	jmp    c0011980 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001187a:	66 90                	xchg   ax,ax
c001187c:	83 ec 08             	sub    esp,0x8
c001187f:	68 cf 24 02 c0       	push   0xc00224cf
c0011884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011888:	e8 f3 ee fe ff       	call   c0000780 <strcmp>
c001188d:	83 c4 10             	add    esp,0x10
c0011890:	85 c0                	test   eax,eax
c0011892:	0f 94 c0             	sete   al
c0011895:	0f b6 c0             	movzx  eax,al
c0011898:	85 c0                	test   eax,eax
c001189a:	74 0c                	je     c00118a8 <KeResolveCompatibilitySymbol(char*)+0xe0>
c001189c:	b8 e1 0e 01 c0       	mov    eax,0xc0010ee1
c00118a1:	e9 da 00 00 00       	jmp    c0011980 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118a6:	66 90                	xchg   ax,ax
c00118a8:	83 ec 08             	sub    esp,0x8
c00118ab:	68 ec 24 02 c0       	push   0xc00224ec
c00118b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118b4:	e8 c7 ee fe ff       	call   c0000780 <strcmp>
c00118b9:	83 c4 10             	add    esp,0x10
c00118bc:	85 c0                	test   eax,eax
c00118be:	0f 94 c0             	sete   al
c00118c1:	0f b6 c0             	movzx  eax,al
c00118c4:	85 c0                	test   eax,eax
c00118c6:	74 0c                	je     c00118d4 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00118c8:	b8 d0 f8 01 c0       	mov    eax,0xc001f8d0
c00118cd:	e9 ae 00 00 00       	jmp    c0011980 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118d2:	66 90                	xchg   ax,ax
c00118d4:	83 ec 08             	sub    esp,0x8
c00118d7:	68 f6 24 02 c0       	push   0xc00224f6
c00118dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118e0:	e8 9b ee fe ff       	call   c0000780 <strcmp>
c00118e5:	83 c4 10             	add    esp,0x10
c00118e8:	85 c0                	test   eax,eax
c00118ea:	0f 94 c0             	sete   al
c00118ed:	0f b6 c0             	movzx  eax,al
c00118f0:	85 c0                	test   eax,eax
c00118f2:	74 0c                	je     c0011900 <KeResolveCompatibilitySymbol(char*)+0x138>
c00118f4:	b8 50 f6 01 c0       	mov    eax,0xc001f650
c00118f9:	e9 82 00 00 00       	jmp    c0011980 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118fe:	66 90                	xchg   ax,ax
c0011900:	83 ec 08             	sub    esp,0x8
c0011903:	68 ff 24 02 c0       	push   0xc00224ff
c0011908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001190c:	e8 6f ee fe ff       	call   c0000780 <strcmp>
c0011911:	83 c4 10             	add    esp,0x10
c0011914:	85 c0                	test   eax,eax
c0011916:	0f 94 c0             	sete   al
c0011919:	0f b6 c0             	movzx  eax,al
c001191c:	85 c0                	test   eax,eax
c001191e:	74 08                	je     c0011928 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011920:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011925:	eb 59                	jmp    c0011980 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011927:	90                   	nop
c0011928:	83 ec 08             	sub    esp,0x8
c001192b:	68 17 25 02 c0       	push   0xc0022517
c0011930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011934:	e8 47 ee fe ff       	call   c0000780 <strcmp>
c0011939:	83 c4 10             	add    esp,0x10
c001193c:	85 c0                	test   eax,eax
c001193e:	0f 94 c0             	sete   al
c0011941:	0f b6 c0             	movzx  eax,al
c0011944:	85 c0                	test   eax,eax
c0011946:	74 08                	je     c0011950 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011948:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c001194d:	eb 31                	jmp    c0011980 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001194f:	90                   	nop
c0011950:	83 ec 08             	sub    esp,0x8
c0011953:	68 24 25 02 c0       	push   0xc0022524
c0011958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001195c:	e8 1f ee fe ff       	call   c0000780 <strcmp>
c0011961:	83 c4 10             	add    esp,0x10
c0011964:	85 c0                	test   eax,eax
c0011966:	0f 94 c0             	sete   al
c0011969:	0f b6 c0             	movzx  eax,al
c001196c:	85 c0                	test   eax,eax
c001196e:	74 08                	je     c0011978 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011970:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011975:	eb 09                	jmp    c0011980 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011977:	90                   	nop
c0011978:	b8 00 00 00 00       	mov    eax,0x0
c001197d:	8d 76 00             	lea    esi,[esi+0x0]
c0011980:	83 c4 0c             	add    esp,0xc
c0011983:	c3                   	ret    

c0011984 <KiSigKill(int)>:
c0011984:	83 ec 0c             	sub    esp,0xc
c0011987:	6a 00                	push   0x0
c0011989:	6a 00                	push   0x0
c001198b:	6a ff                	push   0xffffffff
c001198d:	6a 01                	push   0x1
c001198f:	e8 be 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011994:	83 c4 1c             	add    esp,0x1c
c0011997:	c3                   	ret    

c0011998 <KiDefaultSignalHandlerIgnore(int)>:
c0011998:	c3                   	ret    

c0011999 <KiDefaultSignalHandlerPause(int)>:
c0011999:	57                   	push   edi
c001199a:	b9 07 00 00 00       	mov    ecx,0x7
c001199f:	56                   	push   esi
c00119a0:	be 6d 25 02 c0       	mov    esi,0xc002256d
c00119a5:	83 ec 24             	sub    esp,0x24
c00119a8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00119ac:	fc                   	cld    
c00119ad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00119af:	8d 44 24 04          	lea    eax,[esp+0x4]
c00119b3:	50                   	push   eax
c00119b4:	6a 00                	push   0x0
c00119b6:	6a 00                	push   0x0
c00119b8:	6a 27                	push   0x27
c00119ba:	e8 93 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119bf:	83 c4 34             	add    esp,0x34
c00119c2:	5e                   	pop    esi
c00119c3:	5f                   	pop    edi
c00119c4:	c3                   	ret    

c00119c5 <KiDefaultSignalHandlerResume(int)>:
c00119c5:	57                   	push   edi
c00119c6:	b9 1d 00 00 00       	mov    ecx,0x1d
c00119cb:	56                   	push   esi
c00119cc:	be 89 25 02 c0       	mov    esi,0xc0022589
c00119d1:	83 ec 24             	sub    esp,0x24
c00119d4:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00119d8:	fc                   	cld    
c00119d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119db:	8d 44 24 03          	lea    eax,[esp+0x3]
c00119df:	50                   	push   eax
c00119e0:	6a 00                	push   0x0
c00119e2:	6a 00                	push   0x0
c00119e4:	6a 27                	push   0x27
c00119e6:	e8 67 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119eb:	83 c4 34             	add    esp,0x34
c00119ee:	5e                   	pop    esi
c00119ef:	5f                   	pop    edi
c00119f0:	c3                   	ret    

c00119f1 <KeDeinitSignals(SigHandlerBlock*)>:
c00119f1:	e9 0d 61 ff ff       	jmp    c0007b03 <free>

c00119f6 <KeInitSignals()>:
c00119f6:	53                   	push   ebx
c00119f7:	83 ec 14             	sub    esp,0x14
c00119fa:	68 c8 00 00 00       	push   0xc8
c00119ff:	e8 ef 60 ff ff       	call   c0007af3 <malloc>
c0011a04:	83 c4 0c             	add    esp,0xc
c0011a07:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011a11:	89 c3                	mov    ebx,eax
c0011a13:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011a1d:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011a23:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0011a27:	6a 20                	push   0x20
c0011a29:	6a 00                	push   0x0
c0011a2b:	50                   	push   eax
c0011a2c:	e8 bf ea fe ff       	call   c00004f0 <memset>
c0011a31:	83 c4 0c             	add    esp,0xc
c0011a34:	6a 44                	push   0x44
c0011a36:	6a 00                	push   0x0
c0011a38:	53                   	push   ebx
c0011a39:	e8 b2 ea fe ff       	call   c00004f0 <memset>
c0011a3e:	83 c4 18             	add    esp,0x18
c0011a41:	89 d8                	mov    eax,ebx
c0011a43:	5b                   	pop    ebx
c0011a44:	c3                   	ret    

c0011a45 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011a45:	53                   	push   ebx
c0011a46:	b8 01 00 00 00       	mov    eax,0x1
c0011a4b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a53:	83 f9 10             	cmp    ecx,0x10
c0011a56:	7f 21                	jg     c0011a79 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a5c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011a5f:	89 03                	mov    DWORD PTR [ebx],eax
c0011a61:	b8 01 00 00 00       	mov    eax,0x1
c0011a66:	d3 e0                	shl    eax,cl
c0011a68:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011a6c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011a6f:	31 c0                	xor    eax,eax
c0011a71:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011a79:	5b                   	pop    ebx
c0011a7a:	c3                   	ret    

c0011a7b <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011a7b:	55                   	push   ebp
c0011a7c:	57                   	push   edi
c0011a7d:	bf 08 00 00 00       	mov    edi,0x8
c0011a82:	56                   	push   esi
c0011a83:	53                   	push   ebx
c0011a84:	83 ec 18             	sub    esp,0x18
c0011a87:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a8b:	68 a6 25 02 c0       	push   0xc00225a6
c0011a90:	e8 95 8e ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0011a95:	83 c4 10             	add    esp,0x10
c0011a98:	31 c9                	xor    ecx,ecx
c0011a9a:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011aa1:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011aa7:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011aab:	99                   	cdq    
c0011aac:	f7 ff                	idiv   edi
c0011aae:	8d 42 24             	lea    eax,[edx+0x24]
c0011ab1:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011ab5:	85 f6                	test   esi,esi
c0011ab7:	75 1a                	jne    c0011ad3 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011ab9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011abd:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011ac1:	50                   	push   eax
c0011ac2:	50                   	push   eax
c0011ac3:	52                   	push   edx
c0011ac4:	68 b7 25 02 c0       	push   0xc00225b7
c0011ac9:	e8 5c 8e ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0011ace:	83 c4 10             	add    esp,0x10
c0011ad1:	eb 1b                	jmp    c0011aee <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011ad3:	41                   	inc    ecx
c0011ad4:	83 f9 08             	cmp    ecx,0x8
c0011ad7:	75 ce                	jne    c0011aa7 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011ad9:	83 ec 0c             	sub    esp,0xc
c0011adc:	be 01 00 00 00       	mov    esi,0x1
c0011ae1:	68 d8 25 02 c0       	push   0xc00225d8
c0011ae6:	e8 3f 8e ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0011aeb:	83 c4 10             	add    esp,0x10
c0011aee:	83 c4 0c             	add    esp,0xc
c0011af1:	89 f0                	mov    eax,esi
c0011af3:	5b                   	pop    ebx
c0011af4:	5e                   	pop    esi
c0011af5:	5f                   	pop    edi
c0011af6:	5d                   	pop    ebp
c0011af7:	c3                   	ret    

c0011af8 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011af8:	55                   	push   ebp
c0011af9:	57                   	push   edi
c0011afa:	56                   	push   esi
c0011afb:	53                   	push   ebx
c0011afc:	51                   	push   ecx
c0011afd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b01:	85 db                	test   ebx,ebx
c0011b03:	0f 84 bc 00 00 00    	je     c0011bc5 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b09:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011b10:	0f 84 af 00 00 00    	je     c0011bc5 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b16:	31 c9                	xor    ecx,ecx
c0011b18:	bf 08 00 00 00       	mov    edi,0x8
c0011b1d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b23:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011b26:	99                   	cdq    
c0011b27:	f7 ff                	idiv   edi
c0011b29:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011b30:	85 ed                	test   ebp,ebp
c0011b32:	0f 84 9e 00 00 00    	je     c0011bd6 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011b38:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011b3e:	89 e9                	mov    ecx,ebp
c0011b40:	bf 01 00 00 00       	mov    edi,0x1
c0011b45:	d3 e7                	shl    edi,cl
c0011b47:	31 c9                	xor    ecx,ecx
c0011b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b4c:	b8 01 00 00 00       	mov    eax,0x1
c0011b51:	d3 e0                	shl    eax,cl
c0011b53:	85 04 24             	test   DWORD PTR [esp],eax
c0011b56:	74 06                	je     c0011b5e <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011b58:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011b5c:	75 67                	jne    c0011bc5 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b5e:	41                   	inc    ecx
c0011b5f:	83 f9 11             	cmp    ecx,0x11
c0011b62:	75 e8                	jne    c0011b4c <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011b64:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011b67:	46                   	inc    esi
c0011b68:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b6e:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011b79:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011b80:	09 f8                	or     eax,edi
c0011b82:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011b88:	31 c0                	xor    eax,eax
c0011b8a:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011b92:	74 09                	je     c0011b9d <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011b94:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011b9b:	eb 06                	jmp    c0011ba3 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011b9d:	40                   	inc    eax
c0011b9e:	83 f8 08             	cmp    eax,0x8
c0011ba1:	75 e7                	jne    c0011b8a <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011ba3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ba7:	83 fd 09             	cmp    ebp,0x9
c0011baa:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011bad:	89 2a                	mov    DWORD PTR [edx],ebp
c0011baf:	75 07                	jne    c0011bb8 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011bb1:	b8 84 19 01 c0       	mov    eax,0xc0011984
c0011bb6:	eb 31                	jmp    c0011be9 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bb8:	83 f8 01             	cmp    eax,0x1
c0011bbb:	75 0c                	jne    c0011bc9 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011bbd:	f7 d7                	not    edi
c0011bbf:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011bc5:	31 c0                	xor    eax,eax
c0011bc7:	eb 20                	jmp    c0011be9 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bc9:	85 c0                	test   eax,eax
c0011bcb:	75 1c                	jne    c0011be9 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bcd:	8b 04 ad e0 3d 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc220]
c0011bd4:	eb 13                	jmp    c0011be9 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bd6:	41                   	inc    ecx
c0011bd7:	46                   	inc    esi
c0011bd8:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011bde:	83 f9 08             	cmp    ecx,0x8
c0011be1:	0f 85 36 ff ff ff    	jne    c0011b1d <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011be7:	eb dc                	jmp    c0011bc5 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011be9:	5a                   	pop    edx
c0011bea:	5b                   	pop    ebx
c0011beb:	5e                   	pop    esi
c0011bec:	5f                   	pop    edi
c0011bed:	5d                   	pop    ebp
c0011bee:	c3                   	ret    

c0011bef <KiCheckSignalZ>:
c0011bef:	83 ec 10             	sub    esp,0x10
c0011bf2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011bf6:	50                   	push   eax
c0011bf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bfc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bff:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c05:	e8 ee fe ff ff       	call   c0011af8 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011c0a:	5a                   	pop    edx
c0011c0b:	31 d2                	xor    edx,edx
c0011c0d:	59                   	pop    ecx
c0011c0e:	85 c0                	test   eax,eax
c0011c10:	74 19                	je     c0011c2b <KiCheckSignalZ+0x3c>
c0011c12:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c18:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011c1b:	89 02                	mov    DWORD PTR [edx],eax
c0011c1d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c28:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011c2b:	89 d0                	mov    eax,edx
c0011c2d:	83 c4 10             	add    esp,0x10
c0011c30:	c3                   	ret    

c0011c31 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011c31:	56                   	push   esi
c0011c32:	53                   	push   ebx
c0011c33:	bb 01 00 00 00       	mov    ebx,0x1
c0011c38:	52                   	push   edx
c0011c39:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011c3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c41:	d3 e3                	shl    ebx,cl
c0011c43:	83 f9 10             	cmp    ecx,0x10
c0011c46:	7f 08                	jg     c0011c50 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011c48:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011c4e:	75 10                	jne    c0011c60 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011c50:	83 ec 0c             	sub    esp,0xc
c0011c53:	68 e9 25 02 c0       	push   0xc00225e9
c0011c58:	e8 82 f9 ff ff       	call   c00115df <KePanic(char const*)>
c0011c5d:	83 c4 10             	add    esp,0x10
c0011c60:	f7 d3                	not    ebx
c0011c62:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011c68:	58                   	pop    eax
c0011c69:	5b                   	pop    ebx
c0011c6a:	5e                   	pop    esi
c0011c6b:	c3                   	ret    

c0011c6c <KiFinishSignalZ>:
c0011c6c:	53                   	push   ebx
c0011c6d:	83 ec 10             	sub    esp,0x10
c0011c70:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c74:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011c77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c7f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c85:	e8 a7 ff ff ff       	call   c0011c31 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011c8a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011c90:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011c97:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011c9e:	83 c4 18             	add    esp,0x18
c0011ca1:	5b                   	pop    ebx
c0011ca2:	c3                   	ret    

c0011ca3 <SysSeekDir(regs*)>:
c0011ca3:	31 c0                	xor    eax,eax
c0011ca5:	31 d2                	xor    edx,edx
c0011ca7:	c3                   	ret    

c0011ca8 <SysTellDir(regs*)>:
c0011ca8:	31 c0                	xor    eax,eax
c0011caa:	31 d2                	xor    edx,edx
c0011cac:	c3                   	ret    

c0011cad <SysVerify(regs*)>:
c0011cad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cb1:	31 d2                	xor    edx,edx
c0011cb3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011cb6:	c3                   	ret    

c0011cb7 <SysGetArgc(regs*)>:
c0011cb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cbf:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011cc5:	89 c2                	mov    edx,eax
c0011cc7:	c1 fa 1f             	sar    edx,0x1f
c0011cca:	c3                   	ret    

c0011ccb <SysTTYName(regs*)>:
c0011ccb:	b8 01 00 00 00       	mov    eax,0x1
c0011cd0:	31 d2                	xor    edx,edx
c0011cd2:	c3                   	ret    

c0011cd3 <SysFormatDisk(regs*)>:
c0011cd3:	56                   	push   esi
c0011cd4:	53                   	push   ebx
c0011cd5:	83 ec 04             	sub    esp,0x4
c0011cd8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011cdc:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011ce2:	eb 2a                	jmp    c0011d0e <SysFormatDisk(regs*)+0x3b>
c0011ce4:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011ce7:	83 ec 0c             	sub    esp,0xc
c0011cea:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011ced:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cef:	51                   	push   ecx
c0011cf0:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011cf3:	51                   	push   ecx
c0011cf4:	50                   	push   eax
c0011cf5:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011cfc:	50                   	push   eax
c0011cfd:	53                   	push   ebx
c0011cfe:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011d01:	83 c4 20             	add    esp,0x20
c0011d04:	83 f8 08             	cmp    eax,0x8
c0011d07:	89 c1                	mov    ecx,eax
c0011d09:	75 14                	jne    c0011d1f <SysFormatDisk(regs*)+0x4c>
c0011d0b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011d0e:	85 db                	test   ebx,ebx
c0011d10:	75 d2                	jne    c0011ce4 <SysFormatDisk(regs*)+0x11>
c0011d12:	b8 03 00 00 00       	mov    eax,0x3
c0011d17:	31 d2                	xor    edx,edx
c0011d19:	83 c4 04             	add    esp,0x4
c0011d1c:	5b                   	pop    ebx
c0011d1d:	5e                   	pop    esi
c0011d1e:	c3                   	ret    
c0011d1f:	85 c0                	test   eax,eax
c0011d21:	74 13                	je     c0011d36 <SysFormatDisk(regs*)+0x63>
c0011d23:	31 d2                	xor    edx,edx
c0011d25:	83 f9 09             	cmp    ecx,0x9
c0011d28:	b8 01 00 00 00       	mov    eax,0x1
c0011d2d:	74 ea                	je     c0011d19 <SysFormatDisk(regs*)+0x46>
c0011d2f:	b8 02 00 00 00       	mov    eax,0x2
c0011d34:	eb e1                	jmp    c0011d17 <SysFormatDisk(regs*)+0x44>
c0011d36:	31 c0                	xor    eax,eax
c0011d38:	eb dd                	jmp    c0011d17 <SysFormatDisk(regs*)+0x44>

c0011d3a <SysSetDiskVolumeLabel(regs*)>:
c0011d3a:	56                   	push   esi
c0011d3b:	53                   	push   ebx
c0011d3c:	83 ec 04             	sub    esp,0x4
c0011d3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d43:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d46:	83 f8 19             	cmp    eax,0x19
c0011d49:	77 33                	ja     c0011d7e <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d4b:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011d52:	85 c9                	test   ecx,ecx
c0011d54:	74 28                	je     c0011d7e <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d56:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011d59:	85 db                	test   ebx,ebx
c0011d5b:	74 21                	je     c0011d7e <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d5d:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011d63:	85 d2                	test   edx,edx
c0011d65:	74 17                	je     c0011d7e <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d67:	8b 32                	mov    esi,DWORD PTR [edx]
c0011d69:	53                   	push   ebx
c0011d6a:	50                   	push   eax
c0011d6b:	51                   	push   ecx
c0011d6c:	52                   	push   edx
c0011d6d:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011d70:	83 c4 10             	add    esp,0x10
c0011d73:	83 c4 04             	add    esp,0x4
c0011d76:	5b                   	pop    ebx
c0011d77:	5e                   	pop    esi
c0011d78:	89 c2                	mov    edx,eax
c0011d7a:	c1 fa 1f             	sar    edx,0x1f
c0011d7d:	c3                   	ret    
c0011d7e:	83 c4 04             	add    esp,0x4
c0011d81:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011d86:	5b                   	pop    ebx
c0011d87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d8c:	5e                   	pop    esi
c0011d8d:	c3                   	ret    

c0011d8e <SysGetDiskVolumeLabel(regs*)>:
c0011d8e:	57                   	push   edi
c0011d8f:	56                   	push   esi
c0011d90:	53                   	push   ebx
c0011d91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d95:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011d98:	83 fa 19             	cmp    edx,0x19
c0011d9b:	77 3c                	ja     c0011dd9 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d9d:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011da4:	85 c9                	test   ecx,ecx
c0011da6:	74 31                	je     c0011dd9 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011da8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011dab:	85 db                	test   ebx,ebx
c0011dad:	74 2a                	je     c0011dd9 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011daf:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011db2:	85 f6                	test   esi,esi
c0011db4:	74 23                	je     c0011dd9 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011db6:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011dbc:	85 c0                	test   eax,eax
c0011dbe:	74 19                	je     c0011dd9 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dc0:	83 ec 0c             	sub    esp,0xc
c0011dc3:	8b 38                	mov    edi,DWORD PTR [eax]
c0011dc5:	56                   	push   esi
c0011dc6:	53                   	push   ebx
c0011dc7:	52                   	push   edx
c0011dc8:	51                   	push   ecx
c0011dc9:	50                   	push   eax
c0011dca:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011dcd:	83 c4 20             	add    esp,0x20
c0011dd0:	5b                   	pop    ebx
c0011dd1:	5e                   	pop    esi
c0011dd2:	89 c2                	mov    edx,eax
c0011dd4:	c1 fa 1f             	sar    edx,0x1f
c0011dd7:	5f                   	pop    edi
c0011dd8:	c3                   	ret    
c0011dd9:	5b                   	pop    ebx
c0011dda:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011ddf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011de4:	5e                   	pop    esi
c0011de5:	5f                   	pop    edi
c0011de6:	c3                   	ret    

c0011de7 <SysShutdown(regs*)>:
c0011de7:	57                   	push   edi
c0011de8:	56                   	push   esi
c0011de9:	83 ec 04             	sub    esp,0x4
c0011dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011df0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011df3:	85 c0                	test   eax,eax
c0011df5:	74 1e                	je     c0011e15 <SysShutdown(regs*)+0x2e>
c0011df7:	83 f8 01             	cmp    eax,0x1
c0011dfa:	74 5f                	je     c0011e5b <SysShutdown(regs*)+0x74>
c0011dfc:	83 f8 02             	cmp    eax,0x2
c0011dff:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e04:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e09:	74 32                	je     c0011e3d <SysShutdown(regs*)+0x56>
c0011e0b:	83 c4 04             	add    esp,0x4
c0011e0e:	89 f0                	mov    eax,esi
c0011e10:	5e                   	pop    esi
c0011e11:	89 fa                	mov    edx,edi
c0011e13:	5f                   	pop    edi
c0011e14:	c3                   	ret    
c0011e15:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e1a:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e1f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e24:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e26:	6a 00                	push   0x0
c0011e28:	6a 00                	push   0x0
c0011e2a:	6a 00                	push   0x0
c0011e2c:	50                   	push   eax
c0011e2d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e30:	83 c4 10             	add    esp,0x10
c0011e33:	89 f0                	mov    eax,esi
c0011e35:	83 c4 04             	add    esp,0x4
c0011e38:	89 fa                	mov    edx,edi
c0011e3a:	5e                   	pop    esi
c0011e3b:	5f                   	pop    edi
c0011e3c:	c3                   	ret    
c0011e3d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e42:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e44:	6a 00                	push   0x0
c0011e46:	6a 00                	push   0x0
c0011e48:	6a 01                	push   0x1
c0011e4a:	50                   	push   eax
c0011e4b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e4e:	83 c4 10             	add    esp,0x10
c0011e51:	89 f0                	mov    eax,esi
c0011e53:	83 c4 04             	add    esp,0x4
c0011e56:	89 fa                	mov    edx,edi
c0011e58:	5e                   	pop    esi
c0011e59:	5f                   	pop    edi
c0011e5a:	c3                   	ret    
c0011e5b:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011e60:	85 c0                	test   eax,eax
c0011e62:	74 02                	je     c0011e66 <SysShutdown(regs*)+0x7f>
c0011e64:	ff d0                	call   eax
c0011e66:	31 f6                	xor    esi,esi
c0011e68:	83 c4 04             	add    esp,0x4
c0011e6b:	89 f0                	mov    eax,esi
c0011e6d:	31 ff                	xor    edi,edi
c0011e6f:	5e                   	pop    esi
c0011e70:	89 fa                	mov    edx,edi
c0011e72:	5f                   	pop    edi
c0011e73:	c3                   	ret    

c0011e74 <SysRealpath(regs*)>:
c0011e74:	53                   	push   ebx
c0011e75:	83 ec 08             	sub    esp,0x8
c0011e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e7c:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011e7f:	85 c9                	test   ecx,ecx
c0011e81:	74 36                	je     c0011eb9 <SysRealpath(regs*)+0x45>
c0011e83:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e86:	31 d2                	xor    edx,edx
c0011e88:	b8 01 00 00 00       	mov    eax,0x1
c0011e8d:	85 db                	test   ebx,ebx
c0011e8f:	75 05                	jne    c0011e96 <SysRealpath(regs*)+0x22>
c0011e91:	83 c4 08             	add    esp,0x8
c0011e94:	5b                   	pop    ebx
c0011e95:	c3                   	ret    
c0011e96:	6a 00                	push   0x0
c0011e98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ea0:	05 0c 01 00 00       	add    eax,0x10c
c0011ea5:	50                   	push   eax
c0011ea6:	51                   	push   ecx
c0011ea7:	53                   	push   ebx
c0011ea8:	e8 89 99 ff ff       	call   c000b836 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011ead:	83 c4 10             	add    esp,0x10
c0011eb0:	31 c0                	xor    eax,eax
c0011eb2:	31 d2                	xor    edx,edx
c0011eb4:	83 c4 08             	add    esp,0x8
c0011eb7:	5b                   	pop    ebx
c0011eb8:	c3                   	ret    
c0011eb9:	b8 01 00 00 00       	mov    eax,0x1
c0011ebe:	31 d2                	xor    edx,edx
c0011ec0:	eb f2                	jmp    c0011eb4 <SysRealpath(regs*)+0x40>

c0011ec2 <SysReadDir(regs*)>:
c0011ec2:	53                   	push   ebx
c0011ec3:	83 ec 18             	sub    esp,0x18
c0011ec6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011eca:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ecd:	83 f8 02             	cmp    eax,0x2
c0011ed0:	76 4f                	jbe    c0011f21 <SysReadDir(regs*)+0x5f>
c0011ed2:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011ed9:	77 52                	ja     c0011f2d <SysReadDir(regs*)+0x6b>
c0011edb:	83 ec 0c             	sub    esp,0xc
c0011ede:	50                   	push   eax
c0011edf:	e8 d7 75 ff ff       	call   c00094bb <KeGetFileFromDescriptor(int)>
c0011ee4:	83 c4 10             	add    esp,0x10
c0011ee7:	85 c0                	test   eax,eax
c0011ee9:	74 42                	je     c0011f2d <SysReadDir(regs*)+0x6b>
c0011eeb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ef3:	83 ec 0c             	sub    esp,0xc
c0011ef6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011efa:	8b 10                	mov    edx,DWORD PTR [eax]
c0011efc:	51                   	push   ecx
c0011efd:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f00:	51                   	push   ecx
c0011f01:	6a 00                	push   0x0
c0011f03:	68 10 01 00 00       	push   0x110
c0011f08:	50                   	push   eax
c0011f09:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f0c:	83 c4 20             	add    esp,0x20
c0011f0f:	85 c0                	test   eax,eax
c0011f11:	89 c1                	mov    ecx,eax
c0011f13:	74 27                	je     c0011f3c <SysReadDir(regs*)+0x7a>
c0011f15:	31 d2                	xor    edx,edx
c0011f17:	83 f9 07             	cmp    ecx,0x7
c0011f1a:	b8 02 00 00 00       	mov    eax,0x2
c0011f1f:	75 16                	jne    c0011f37 <SysReadDir(regs*)+0x75>
c0011f21:	b8 01 00 00 00       	mov    eax,0x1
c0011f26:	31 d2                	xor    edx,edx
c0011f28:	83 c4 18             	add    esp,0x18
c0011f2b:	5b                   	pop    ebx
c0011f2c:	c3                   	ret    
c0011f2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f32:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f37:	83 c4 18             	add    esp,0x18
c0011f3a:	5b                   	pop    ebx
c0011f3b:	c3                   	ret    
c0011f3c:	31 c0                	xor    eax,eax
c0011f3e:	31 d2                	xor    edx,edx
c0011f40:	eb e6                	jmp    c0011f28 <SysReadDir(regs*)+0x66>

c0011f42 <SysIsATTY(regs*)>:
c0011f42:	83 ec 0c             	sub    esp,0xc
c0011f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f49:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f4c:	83 f8 02             	cmp    eax,0x2
c0011f4f:	76 07                	jbe    c0011f58 <SysIsATTY(regs*)+0x16>
c0011f51:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011f56:	75 26                	jne    c0011f7e <SysIsATTY(regs*)+0x3c>
c0011f58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f5d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f60:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011f66:	85 c0                	test   eax,eax
c0011f68:	74 24                	je     c0011f8e <SysIsATTY(regs*)+0x4c>
c0011f6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f6c:	83 ec 0c             	sub    esp,0xc
c0011f6f:	50                   	push   eax
c0011f70:	ff 12                	call   DWORD PTR [edx]
c0011f72:	83 c4 10             	add    esp,0x10
c0011f75:	31 d2                	xor    edx,edx
c0011f77:	83 c4 0c             	add    esp,0xc
c0011f7a:	0f b6 c0             	movzx  eax,al
c0011f7d:	c3                   	ret    
c0011f7e:	83 ec 0c             	sub    esp,0xc
c0011f81:	50                   	push   eax
c0011f82:	e8 34 75 ff ff       	call   c00094bb <KeGetFileFromDescriptor(int)>
c0011f87:	83 c4 10             	add    esp,0x10
c0011f8a:	85 c0                	test   eax,eax
c0011f8c:	75 dc                	jne    c0011f6a <SysIsATTY(regs*)+0x28>
c0011f8e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f93:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f98:	83 c4 0c             	add    esp,0xc
c0011f9b:	c3                   	ret    

c0011f9c <SysSeek(regs*)>:
c0011f9c:	56                   	push   esi
c0011f9d:	53                   	push   ebx
c0011f9e:	83 ec 04             	sub    esp,0x4
c0011fa1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fa5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011fa8:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011fab:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011fb1:	77 33                	ja     c0011fe6 <SysSeek(regs*)+0x4a>
c0011fb3:	83 ec 0c             	sub    esp,0xc
c0011fb6:	51                   	push   ecx
c0011fb7:	e8 ff 74 ff ff       	call   c00094bb <KeGetFileFromDescriptor(int)>
c0011fbc:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011fbf:	83 c4 0c             	add    esp,0xc
c0011fc2:	31 db                	xor    ebx,ebx
c0011fc4:	53                   	push   ebx
c0011fc5:	51                   	push   ecx
c0011fc6:	50                   	push   eax
c0011fc7:	e8 52 9c ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0011fcc:	83 c4 10             	add    esp,0x10
c0011fcf:	85 c0                	test   eax,eax
c0011fd1:	0f 95 c0             	setne  al
c0011fd4:	31 d2                	xor    edx,edx
c0011fd6:	0f b6 c0             	movzx  eax,al
c0011fd9:	f7 d8                	neg    eax
c0011fdb:	83 d2 00             	adc    edx,0x0
c0011fde:	83 c4 04             	add    esp,0x4
c0011fe1:	5b                   	pop    ebx
c0011fe2:	f7 da                	neg    edx
c0011fe4:	5e                   	pop    esi
c0011fe5:	c3                   	ret    
c0011fe6:	83 c4 04             	add    esp,0x4
c0011fe9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fee:	5b                   	pop    ebx
c0011fef:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ff4:	5e                   	pop    esi
c0011ff5:	c3                   	ret    

c0011ff6 <SysTell(regs*)>:
c0011ff6:	53                   	push   ebx
c0011ff7:	83 ec 08             	sub    esp,0x8
c0011ffa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ffe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012001:	83 f8 02             	cmp    eax,0x2
c0012004:	76 4e                	jbe    c0012054 <SysTell(regs*)+0x5e>
c0012006:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001200b:	76 19                	jbe    c0012026 <SysTell(regs*)+0x30>
c001200d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012010:	31 d2                	xor    edx,edx
c0012012:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012018:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001201f:	83 c4 08             	add    esp,0x8
c0012022:	31 c0                	xor    eax,eax
c0012024:	5b                   	pop    ebx
c0012025:	c3                   	ret    
c0012026:	83 ec 0c             	sub    esp,0xc
c0012029:	50                   	push   eax
c001202a:	e8 8c 74 ff ff       	call   c00094bb <KeGetFileFromDescriptor(int)>
c001202f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012032:	5a                   	pop    edx
c0012033:	59                   	pop    ecx
c0012034:	53                   	push   ebx
c0012035:	50                   	push   eax
c0012036:	e8 8f 9c ff ff       	call   c000bcca <File::tell(unsigned long long*)>
c001203b:	83 c4 10             	add    esp,0x10
c001203e:	85 c0                	test   eax,eax
c0012040:	0f 95 c0             	setne  al
c0012043:	31 d2                	xor    edx,edx
c0012045:	0f b6 c0             	movzx  eax,al
c0012048:	f7 d8                	neg    eax
c001204a:	83 d2 00             	adc    edx,0x0
c001204d:	83 c4 08             	add    esp,0x8
c0012050:	5b                   	pop    ebx
c0012051:	f7 da                	neg    edx
c0012053:	c3                   	ret    
c0012054:	83 c4 08             	add    esp,0x8
c0012057:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001205c:	5b                   	pop    ebx
c001205d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012062:	c3                   	ret    

c0012063 <SysSize(regs*)>:
c0012063:	53                   	push   ebx
c0012064:	83 ec 18             	sub    esp,0x18
c0012067:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001206b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001206e:	83 f8 02             	cmp    eax,0x2
c0012071:	76 54                	jbe    c00120c7 <SysSize(regs*)+0x64>
c0012073:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012078:	76 19                	jbe    c0012093 <SysSize(regs*)+0x30>
c001207a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001207d:	31 d2                	xor    edx,edx
c001207f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012085:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001208c:	83 c4 18             	add    esp,0x18
c001208f:	31 c0                	xor    eax,eax
c0012091:	5b                   	pop    ebx
c0012092:	c3                   	ret    
c0012093:	83 ec 0c             	sub    esp,0xc
c0012096:	50                   	push   eax
c0012097:	e8 1f 74 ff ff       	call   c00094bb <KeGetFileFromDescriptor(int)>
c001209c:	83 c4 0c             	add    esp,0xc
c001209f:	8d 54 24 13          	lea    edx,[esp+0x13]
c00120a3:	52                   	push   edx
c00120a4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120a7:	52                   	push   edx
c00120a8:	50                   	push   eax
c00120a9:	e8 b4 9d ff ff       	call   c000be62 <File::stat(unsigned long long*, bool*)>
c00120ae:	83 c4 10             	add    esp,0x10
c00120b1:	85 c0                	test   eax,eax
c00120b3:	0f 95 c0             	setne  al
c00120b6:	31 d2                	xor    edx,edx
c00120b8:	0f b6 c0             	movzx  eax,al
c00120bb:	f7 d8                	neg    eax
c00120bd:	83 d2 00             	adc    edx,0x0
c00120c0:	83 c4 18             	add    esp,0x18
c00120c3:	5b                   	pop    ebx
c00120c4:	f7 da                	neg    edx
c00120c6:	c3                   	ret    
c00120c7:	83 c4 18             	add    esp,0x18
c00120ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120cf:	5b                   	pop    ebx
c00120d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120d5:	c3                   	ret    

c00120d6 <SysSizeFromFilename(regs*)>:
c00120d6:	55                   	push   ebp
c00120d7:	57                   	push   edi
c00120d8:	56                   	push   esi
c00120d9:	53                   	push   ebx
c00120da:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00120e0:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00120e7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00120ea:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00120ed:	85 f6                	test   esi,esi
c00120ef:	89 f8                	mov    eax,edi
c00120f1:	74 09                	je     c00120fc <SysSizeFromFilename(regs*)+0x26>
c00120f3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00120f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120fc:	83 f8 02             	cmp    eax,0x2
c00120ff:	0f 86 ca 00 00 00    	jbe    c00121cf <SysSizeFromFilename(regs*)+0xf9>
c0012105:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001210a:	76 1f                	jbe    c001212b <SysSizeFromFilename(regs*)+0x55>
c001210c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001210f:	31 d2                	xor    edx,edx
c0012111:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012117:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001211e:	31 c0                	xor    eax,eax
c0012120:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012126:	5b                   	pop    ebx
c0012127:	5e                   	pop    esi
c0012128:	5f                   	pop    edi
c0012129:	5d                   	pop    ebp
c001212a:	c3                   	ret    
c001212b:	83 ec 0c             	sub    esp,0xc
c001212e:	68 14 01 00 00       	push   0x114
c0012133:	e8 bb 59 ff ff       	call   c0007af3 <malloc>
c0012138:	6a 01                	push   0x1
c001213a:	89 c5                	mov    ebp,eax
c001213c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012141:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012144:	51                   	push   ecx
c0012145:	57                   	push   edi
c0012146:	55                   	push   ebp
c0012147:	e8 18 99 ff ff       	call   c000ba64 <File::File(char const*, Process*, bool)>
c001214c:	83 c4 1c             	add    esp,0x1c
c001214f:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012153:	50                   	push   eax
c0012154:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012157:	53                   	push   ebx
c0012158:	55                   	push   ebp
c0012159:	e8 04 9d ff ff       	call   c000be62 <File::stat(unsigned long long*, bool*)>
c001215e:	83 c4 10             	add    esp,0x10
c0012161:	85 ed                	test   ebp,ebp
c0012163:	89 c3                	mov    ebx,eax
c0012165:	74 0d                	je     c0012174 <SysSizeFromFilename(regs*)+0x9e>
c0012167:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001216a:	83 ec 0c             	sub    esp,0xc
c001216d:	55                   	push   ebp
c001216e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012171:	83 c4 10             	add    esp,0x10
c0012174:	85 db                	test   ebx,ebx
c0012176:	75 57                	jne    c00121cf <SysSizeFromFilename(regs*)+0xf9>
c0012178:	6a 00                	push   0x0
c001217a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001217f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012182:	05 0c 01 00 00       	add    eax,0x10c
c0012187:	50                   	push   eax
c0012188:	57                   	push   edi
c0012189:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0012190:	53                   	push   ebx
c0012191:	e8 a0 96 ff ff       	call   c000b836 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012196:	58                   	pop    eax
c0012197:	5a                   	pop    edx
c0012198:	8d 44 24 18          	lea    eax,[esp+0x18]
c001219c:	50                   	push   eax
c001219d:	53                   	push   ebx
c001219e:	e8 fb 90 ff ff       	call   c000b29e <KeDereferenceSymlink(char const*, char*)>
c00121a3:	83 c4 10             	add    esp,0x10
c00121a6:	ba 00 00 00 00       	mov    edx,0x0
c00121ab:	83 f8 01             	cmp    eax,0x1
c00121ae:	b8 00 00 00 00       	mov    eax,0x0
c00121b3:	74 2f                	je     c00121e4 <SysSizeFromFilename(regs*)+0x10e>
c00121b5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00121ba:	74 3b                	je     c00121f7 <SysSizeFromFilename(regs*)+0x121>
c00121bc:	85 f6                	test   esi,esi
c00121be:	0f 84 5c ff ff ff    	je     c0012120 <SysSizeFromFilename(regs*)+0x4a>
c00121c4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00121ca:	e9 51 ff ff ff       	jmp    c0012120 <SysSizeFromFilename(regs*)+0x4a>
c00121cf:	81 c4 4c 02 00 00    	add    esp,0x24c
c00121d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121da:	5b                   	pop    ebx
c00121db:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121e0:	5e                   	pop    esi
c00121e1:	5f                   	pop    edi
c00121e2:	5d                   	pop    ebp
c00121e3:	c3                   	ret    
c00121e4:	85 f6                	test   esi,esi
c00121e6:	0f 84 34 ff ff ff    	je     c0012120 <SysSizeFromFilename(regs*)+0x4a>
c00121ec:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00121f2:	e9 29 ff ff ff       	jmp    c0012120 <SysSizeFromFilename(regs*)+0x4a>
c00121f7:	85 f6                	test   esi,esi
c00121f9:	0f 84 21 ff ff ff    	je     c0012120 <SysSizeFromFilename(regs*)+0x4a>
c00121ff:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012205:	e9 16 ff ff ff       	jmp    c0012120 <SysSizeFromFilename(regs*)+0x4a>

c001220a <SysSizeFromFilenameNoSymlink(regs*)>:
c001220a:	55                   	push   ebp
c001220b:	57                   	push   edi
c001220c:	56                   	push   esi
c001220d:	53                   	push   ebx
c001220e:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0012214:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001221b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001221e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012221:	85 f6                	test   esi,esi
c0012223:	89 f8                	mov    eax,edi
c0012225:	74 09                	je     c0012230 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0012227:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001222d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012230:	83 f8 02             	cmp    eax,0x2
c0012233:	0f 86 ca 00 00 00    	jbe    c0012303 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0012239:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001223e:	76 1f                	jbe    c001225f <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0012240:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012243:	31 d2                	xor    edx,edx
c0012245:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001224b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012252:	31 c0                	xor    eax,eax
c0012254:	81 c4 4c 02 00 00    	add    esp,0x24c
c001225a:	5b                   	pop    ebx
c001225b:	5e                   	pop    esi
c001225c:	5f                   	pop    edi
c001225d:	5d                   	pop    ebp
c001225e:	c3                   	ret    
c001225f:	83 ec 0c             	sub    esp,0xc
c0012262:	68 14 01 00 00       	push   0x114
c0012267:	e8 87 58 ff ff       	call   c0007af3 <malloc>
c001226c:	6a 00                	push   0x0
c001226e:	89 c5                	mov    ebp,eax
c0012270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012275:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012278:	51                   	push   ecx
c0012279:	57                   	push   edi
c001227a:	55                   	push   ebp
c001227b:	e8 e4 97 ff ff       	call   c000ba64 <File::File(char const*, Process*, bool)>
c0012280:	83 c4 1c             	add    esp,0x1c
c0012283:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012287:	50                   	push   eax
c0012288:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001228b:	53                   	push   ebx
c001228c:	55                   	push   ebp
c001228d:	e8 d0 9b ff ff       	call   c000be62 <File::stat(unsigned long long*, bool*)>
c0012292:	83 c4 10             	add    esp,0x10
c0012295:	85 ed                	test   ebp,ebp
c0012297:	89 c3                	mov    ebx,eax
c0012299:	74 0d                	je     c00122a8 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c001229b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001229e:	83 ec 0c             	sub    esp,0xc
c00122a1:	55                   	push   ebp
c00122a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00122a5:	83 c4 10             	add    esp,0x10
c00122a8:	85 db                	test   ebx,ebx
c00122aa:	75 57                	jne    c0012303 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00122ac:	6a 00                	push   0x0
c00122ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122b6:	05 0c 01 00 00       	add    eax,0x10c
c00122bb:	50                   	push   eax
c00122bc:	57                   	push   edi
c00122bd:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00122c4:	53                   	push   ebx
c00122c5:	e8 6c 95 ff ff       	call   c000b836 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00122ca:	58                   	pop    eax
c00122cb:	5a                   	pop    edx
c00122cc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00122d0:	50                   	push   eax
c00122d1:	53                   	push   ebx
c00122d2:	e8 c7 8f ff ff       	call   c000b29e <KeDereferenceSymlink(char const*, char*)>
c00122d7:	83 c4 10             	add    esp,0x10
c00122da:	ba 00 00 00 00       	mov    edx,0x0
c00122df:	83 f8 01             	cmp    eax,0x1
c00122e2:	b8 00 00 00 00       	mov    eax,0x0
c00122e7:	74 2f                	je     c0012318 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c00122e9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00122ee:	74 3b                	je     c001232b <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c00122f0:	85 f6                	test   esi,esi
c00122f2:	0f 84 5c ff ff ff    	je     c0012254 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00122f8:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00122fe:	e9 51 ff ff ff       	jmp    c0012254 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012303:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012309:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001230e:	5b                   	pop    ebx
c001230f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012314:	5e                   	pop    esi
c0012315:	5f                   	pop    edi
c0012316:	5d                   	pop    ebp
c0012317:	c3                   	ret    
c0012318:	85 f6                	test   esi,esi
c001231a:	0f 84 34 ff ff ff    	je     c0012254 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012320:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012326:	e9 29 ff ff ff       	jmp    c0012254 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001232b:	85 f6                	test   esi,esi
c001232d:	0f 84 21 ff ff ff    	je     c0012254 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012333:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012339:	e9 16 ff ff ff       	jmp    c0012254 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c001233e <SysClose(regs*)>:
c001233e:	53                   	push   ebx
c001233f:	83 ec 08             	sub    esp,0x8
c0012342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012346:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012349:	83 f8 02             	cmp    eax,0x2
c001234c:	76 41                	jbe    c001238f <SysClose(regs*)+0x51>
c001234e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012354:	83 fa 01             	cmp    edx,0x1
c0012357:	76 2d                	jbe    c0012386 <SysClose(regs*)+0x48>
c0012359:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001235e:	77 2f                	ja     c001238f <SysClose(regs*)+0x51>
c0012360:	83 ec 0c             	sub    esp,0xc
c0012363:	50                   	push   eax
c0012364:	e8 52 71 ff ff       	call   c00094bb <KeGetFileFromDescriptor(int)>
c0012369:	89 04 24             	mov    DWORD PTR [esp],eax
c001236c:	89 c3                	mov    ebx,eax
c001236e:	e8 4b 98 ff ff       	call   c000bbbe <File::close()>
c0012373:	83 c4 10             	add    esp,0x10
c0012376:	85 db                	test   ebx,ebx
c0012378:	74 0c                	je     c0012386 <SysClose(regs*)+0x48>
c001237a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001237c:	83 ec 0c             	sub    esp,0xc
c001237f:	53                   	push   ebx
c0012380:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012383:	83 c4 10             	add    esp,0x10
c0012386:	83 c4 08             	add    esp,0x8
c0012389:	31 c0                	xor    eax,eax
c001238b:	5b                   	pop    ebx
c001238c:	31 d2                	xor    edx,edx
c001238e:	c3                   	ret    
c001238f:	83 c4 08             	add    esp,0x8
c0012392:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012397:	5b                   	pop    ebx
c0012398:	ba ff ff ff ff       	mov    edx,0xffffffff
c001239d:	c3                   	ret    

c001239e <SysOpenDir(regs*)>:
c001239e:	56                   	push   esi
c001239f:	53                   	push   ebx
c00123a0:	83 ec 04             	sub    esp,0x4
c00123a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123a7:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00123aa:	85 c9                	test   ecx,ecx
c00123ac:	74 5d                	je     c001240b <SysOpenDir(regs*)+0x6d>
c00123ae:	83 ec 0c             	sub    esp,0xc
c00123b1:	68 14 01 00 00       	push   0x114
c00123b6:	e8 38 57 ff ff       	call   c0007af3 <malloc>
c00123bb:	83 c4 0c             	add    esp,0xc
c00123be:	89 c6                	mov    esi,eax
c00123c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123c8:	50                   	push   eax
c00123c9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123cc:	52                   	push   edx
c00123cd:	56                   	push   esi
c00123ce:	e8 4f 9c ff ff       	call   c000c022 <Directory::Directory(char const*, Process*)>
c00123d3:	83 c4 10             	add    esp,0x10
c00123d6:	85 f6                	test   esi,esi
c00123d8:	74 31                	je     c001240b <SysOpenDir(regs*)+0x6d>
c00123da:	83 ec 0c             	sub    esp,0xc
c00123dd:	56                   	push   esi
c00123de:	e8 07 9d ff ff       	call   c000c0ea <Directory::open()>
c00123e3:	83 c4 10             	add    esp,0x10
c00123e6:	85 c0                	test   eax,eax
c00123e8:	75 21                	jne    c001240b <SysOpenDir(regs*)+0x6d>
c00123ea:	83 ec 0c             	sub    esp,0xc
c00123ed:	56                   	push   esi
c00123ee:	e8 cb 6d ff ff       	call   c00091be <UnixFile::getFileDescriptor()>
c00123f3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00123f6:	83 c4 10             	add    esp,0x10
c00123f9:	89 02                	mov    DWORD PTR [edx],eax
c00123fb:	c1 f8 1f             	sar    eax,0x1f
c00123fe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012401:	83 c4 04             	add    esp,0x4
c0012404:	31 c0                	xor    eax,eax
c0012406:	5b                   	pop    ebx
c0012407:	31 d2                	xor    edx,edx
c0012409:	5e                   	pop    esi
c001240a:	c3                   	ret    
c001240b:	83 c4 04             	add    esp,0x4
c001240e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012413:	5b                   	pop    ebx
c0012414:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012419:	5e                   	pop    esi
c001241a:	c3                   	ret    

c001241b <SysMakeDir(regs*)>:
c001241b:	56                   	push   esi
c001241c:	53                   	push   ebx
c001241d:	83 ec 10             	sub    esp,0x10
c0012420:	68 14 01 00 00       	push   0x114
c0012425:	e8 c9 56 ff ff       	call   c0007af3 <malloc>
c001242a:	83 c4 0c             	add    esp,0xc
c001242d:	89 c3                	mov    ebx,eax
c001242f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012434:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012437:	50                   	push   eax
c0012438:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001243c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001243f:	52                   	push   edx
c0012440:	53                   	push   ebx
c0012441:	e8 dc 9b ff ff       	call   c000c022 <Directory::Directory(char const*, Process*)>
c0012446:	83 c4 10             	add    esp,0x10
c0012449:	85 db                	test   ebx,ebx
c001244b:	74 2c                	je     c0012479 <SysMakeDir(regs*)+0x5e>
c001244d:	83 ec 0c             	sub    esp,0xc
c0012450:	53                   	push   ebx
c0012451:	e8 74 9e ff ff       	call   c000c2ca <Directory::create()>
c0012456:	89 c6                	mov    esi,eax
c0012458:	8b 03                	mov    eax,DWORD PTR [ebx]
c001245a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001245d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012460:	83 c4 10             	add    esp,0x10
c0012463:	31 c0                	xor    eax,eax
c0012465:	85 f6                	test   esi,esi
c0012467:	0f 95 c0             	setne  al
c001246a:	31 d2                	xor    edx,edx
c001246c:	f7 d8                	neg    eax
c001246e:	83 d2 00             	adc    edx,0x0
c0012471:	83 c4 04             	add    esp,0x4
c0012474:	5b                   	pop    ebx
c0012475:	f7 da                	neg    edx
c0012477:	5e                   	pop    esi
c0012478:	c3                   	ret    
c0012479:	83 c4 04             	add    esp,0x4
c001247c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012481:	5b                   	pop    ebx
c0012482:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012487:	5e                   	pop    esi
c0012488:	c3                   	ret    

c0012489 <SysCloseDir(regs*)>:
c0012489:	53                   	push   ebx
c001248a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001248f:	83 ec 08             	sub    esp,0x8
c0012492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012496:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012499:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001249e:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00124a1:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00124a7:	77 2a                	ja     c00124d3 <SysCloseDir(regs*)+0x4a>
c00124a9:	83 ec 0c             	sub    esp,0xc
c00124ac:	51                   	push   ecx
c00124ad:	e8 09 70 ff ff       	call   c00094bb <KeGetFileFromDescriptor(int)>
c00124b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00124b5:	89 c3                	mov    ebx,eax
c00124b7:	e8 8a 9c ff ff       	call   c000c146 <Directory::close()>
c00124bc:	83 c4 10             	add    esp,0x10
c00124bf:	85 db                	test   ebx,ebx
c00124c1:	74 0c                	je     c00124cf <SysCloseDir(regs*)+0x46>
c00124c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124c5:	83 ec 0c             	sub    esp,0xc
c00124c8:	53                   	push   ebx
c00124c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124cc:	83 c4 10             	add    esp,0x10
c00124cf:	31 c0                	xor    eax,eax
c00124d1:	31 d2                	xor    edx,edx
c00124d3:	83 c4 08             	add    esp,0x8
c00124d6:	5b                   	pop    ebx
c00124d7:	c3                   	ret    

c00124d8 <SysWait(regs*)>:
c00124d8:	83 ec 10             	sub    esp,0x10
c00124db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124df:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00124e2:	52                   	push   edx
c00124e3:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00124e6:	51                   	push   ecx
c00124e7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00124ea:	50                   	push   eax
c00124eb:	e8 54 3e 00 00       	call   c0016344 <waitTask(int, int*, int)>
c00124f0:	83 c4 1c             	add    esp,0x1c
c00124f3:	89 c2                	mov    edx,eax
c00124f5:	c1 fa 1f             	sar    edx,0x1f
c00124f8:	c3                   	ret    

c00124f9 <SysNotImpl(regs*)>:
c00124f9:	83 ec 18             	sub    esp,0x18
c00124fc:	68 fa 25 02 c0       	push   0xc00225fa
c0012501:	e8 d9 f0 ff ff       	call   c00115df <KePanic(char const*)>
c0012506:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001250b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012510:	83 c4 1c             	add    esp,0x1c
c0012513:	c3                   	ret    

c0012514 <SysPanic(regs*)>:
c0012514:	83 ec 18             	sub    esp,0x18
c0012517:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001251b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001251e:	50                   	push   eax
c001251f:	e8 bb f0 ff ff       	call   c00115df <KePanic(char const*)>
c0012524:	b8 01 00 00 00       	mov    eax,0x1
c0012529:	31 d2                	xor    edx,edx
c001252b:	83 c4 1c             	add    esp,0x1c
c001252e:	c3                   	ret    

c001252f <SysRmdir(regs*)>:
c001252f:	56                   	push   esi
c0012530:	53                   	push   ebx
c0012531:	83 ec 10             	sub    esp,0x10
c0012534:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012538:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001253b:	68 14 01 00 00       	push   0x114
c0012540:	e8 ae 55 ff ff       	call   c0007af3 <malloc>
c0012545:	6a 00                	push   0x0
c0012547:	89 c3                	mov    ebx,eax
c0012549:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001254e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012551:	50                   	push   eax
c0012552:	56                   	push   esi
c0012553:	53                   	push   ebx
c0012554:	e8 0b 95 ff ff       	call   c000ba64 <File::File(char const*, Process*, bool)>
c0012559:	83 c4 14             	add    esp,0x14
c001255c:	53                   	push   ebx
c001255d:	e8 cc 97 ff ff       	call   c000bd2e <File::unlink()>
c0012562:	83 c4 10             	add    esp,0x10
c0012565:	85 db                	test   ebx,ebx
c0012567:	89 c6                	mov    esi,eax
c0012569:	74 0c                	je     c0012577 <SysRmdir(regs*)+0x48>
c001256b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001256d:	83 ec 0c             	sub    esp,0xc
c0012570:	53                   	push   ebx
c0012571:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012574:	83 c4 10             	add    esp,0x10
c0012577:	31 c0                	xor    eax,eax
c0012579:	85 f6                	test   esi,esi
c001257b:	0f 95 c0             	setne  al
c001257e:	31 d2                	xor    edx,edx
c0012580:	f7 d8                	neg    eax
c0012582:	83 d2 00             	adc    edx,0x0
c0012585:	83 c4 04             	add    esp,0x4
c0012588:	5b                   	pop    ebx
c0012589:	f7 da                	neg    edx
c001258b:	5e                   	pop    esi
c001258c:	c3                   	ret    

c001258d <SysUnlink(regs*)>:
c001258d:	56                   	push   esi
c001258e:	53                   	push   ebx
c001258f:	83 ec 10             	sub    esp,0x10
c0012592:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012596:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012599:	68 14 01 00 00       	push   0x114
c001259e:	e8 50 55 ff ff       	call   c0007af3 <malloc>
c00125a3:	6a 00                	push   0x0
c00125a5:	89 c3                	mov    ebx,eax
c00125a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125af:	50                   	push   eax
c00125b0:	56                   	push   esi
c00125b1:	53                   	push   ebx
c00125b2:	e8 ad 94 ff ff       	call   c000ba64 <File::File(char const*, Process*, bool)>
c00125b7:	83 c4 14             	add    esp,0x14
c00125ba:	53                   	push   ebx
c00125bb:	e8 6e 97 ff ff       	call   c000bd2e <File::unlink()>
c00125c0:	83 c4 10             	add    esp,0x10
c00125c3:	85 db                	test   ebx,ebx
c00125c5:	89 c6                	mov    esi,eax
c00125c7:	74 0c                	je     c00125d5 <SysUnlink(regs*)+0x48>
c00125c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125cb:	83 ec 0c             	sub    esp,0xc
c00125ce:	53                   	push   ebx
c00125cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00125d2:	83 c4 10             	add    esp,0x10
c00125d5:	31 c0                	xor    eax,eax
c00125d7:	85 f6                	test   esi,esi
c00125d9:	0f 95 c0             	setne  al
c00125dc:	31 d2                	xor    edx,edx
c00125de:	f7 d8                	neg    eax
c00125e0:	83 d2 00             	adc    edx,0x0
c00125e3:	83 c4 04             	add    esp,0x4
c00125e6:	5b                   	pop    ebx
c00125e7:	f7 da                	neg    edx
c00125e9:	5e                   	pop    esi
c00125ea:	c3                   	ret    

c00125eb <SysGetArgv(regs*)>:
c00125eb:	83 ec 0c             	sub    esp,0xc
c00125ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00125f2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00125f5:	85 c0                	test   eax,eax
c00125f7:	78 2c                	js     c0012625 <SysGetArgv(regs*)+0x3a>
c00125f9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00125ff:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012602:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012608:	7d 1b                	jge    c0012625 <SysGetArgv(regs*)+0x3a>
c001260a:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012611:	85 c0                	test   eax,eax
c0012613:	74 18                	je     c001262d <SysGetArgv(regs*)+0x42>
c0012615:	83 ec 08             	sub    esp,0x8
c0012618:	50                   	push   eax
c0012619:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001261c:	50                   	push   eax
c001261d:	e8 2e e0 fe ff       	call   c0000650 <strcpy>
c0012622:	83 c4 10             	add    esp,0x10
c0012625:	31 c0                	xor    eax,eax
c0012627:	31 d2                	xor    edx,edx
c0012629:	83 c4 0c             	add    esp,0xc
c001262c:	c3                   	ret    
c001262d:	b8 01 00 00 00       	mov    eax,0x1
c0012632:	31 d2                	xor    edx,edx
c0012634:	83 c4 0c             	add    esp,0xc
c0012637:	c3                   	ret    

c0012638 <SysUSleep(regs*)>:
c0012638:	83 ec 1c             	sub    esp,0x1c
c001263b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001263f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012642:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012645:	6a 00                	push   0x0
c0012647:	6a 64                	push   0x64
c0012649:	52                   	push   edx
c001264a:	50                   	push   eax
c001264b:	e8 80 d1 00 00       	call   c001f7d0 <__udivdi3>
c0012650:	83 c4 14             	add    esp,0x14
c0012653:	50                   	push   eax
c0012654:	e8 cf 3d 00 00       	call   c0016428 <milliTenthSleep(unsigned int)>
c0012659:	31 c0                	xor    eax,eax
c001265b:	31 d2                	xor    edx,edx
c001265d:	83 c4 1c             	add    esp,0x1c
c0012660:	c3                   	ret    

c0012661 <SysSpawn(regs*)>:
c0012661:	56                   	push   esi
c0012662:	53                   	push   ebx
c0012663:	83 ec 04             	sub    esp,0x4
c0012666:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001266a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001266d:	85 f6                	test   esi,esi
c001266f:	75 0a                	jne    c001267b <SysSpawn(regs*)+0x1a>
c0012671:	83 c4 04             	add    esp,0x4
c0012674:	31 c0                	xor    eax,eax
c0012676:	5b                   	pop    ebx
c0012677:	31 d2                	xor    edx,edx
c0012679:	5e                   	pop    esi
c001267a:	c3                   	ret    
c001267b:	83 ec 0c             	sub    esp,0xc
c001267e:	68 24 07 00 00       	push   0x724
c0012683:	e8 6b 54 ff ff       	call   c0007af3 <malloc>
c0012688:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001268b:	83 c4 10             	add    esp,0x10
c001268e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012691:	89 c6                	mov    esi,eax
c0012693:	31 c0                	xor    eax,eax
c0012695:	85 c9                	test   ecx,ecx
c0012697:	75 08                	jne    c00126a1 <SysSpawn(regs*)+0x40>
c0012699:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001269e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126a1:	52                   	push   edx
c00126a2:	50                   	push   eax
c00126a3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126a6:	50                   	push   eax
c00126a7:	56                   	push   esi
c00126a8:	e8 e3 33 00 00       	call   c0015a90 <Process::Process(char const*, Process*, char**)>
c00126ad:	83 c4 10             	add    esp,0x10
c00126b0:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00126b7:	75 b8                	jne    c0012671 <SysSpawn(regs*)+0x10>
c00126b9:	83 ec 0c             	sub    esp,0xc
c00126bc:	56                   	push   esi
c00126bd:	e8 06 39 00 00       	call   c0015fc8 <Process::createUserThread()>
c00126c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00126c4:	83 c4 10             	add    esp,0x10
c00126c7:	83 c4 04             	add    esp,0x4
c00126ca:	5b                   	pop    ebx
c00126cb:	89 c2                	mov    edx,eax
c00126cd:	c1 fa 1f             	sar    edx,0x1f
c00126d0:	5e                   	pop    esi
c00126d1:	c3                   	ret    

c00126d2 <SysGetEnv(regs*)>:
c00126d2:	57                   	push   edi
c00126d3:	56                   	push   esi
c00126d4:	53                   	push   ebx
c00126d5:	83 ec 1c             	sub    esp,0x1c
c00126d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126dd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00126e1:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00126e4:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00126e7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00126ea:	51                   	push   ecx
c00126eb:	e8 a7 ed ff ff       	call   c0011497 <KeGetProcessTotalEnvCount(Process*)>
c00126f0:	83 c4 10             	add    esp,0x10
c00126f3:	39 c7                	cmp    edi,eax
c00126f5:	7c 12                	jl     c0012709 <SysGetEnv(regs*)+0x37>
c00126f7:	31 c0                	xor    eax,eax
c00126f9:	31 d2                	xor    edx,edx
c00126fb:	85 f6                	test   esi,esi
c00126fd:	74 03                	je     c0012702 <SysGetEnv(regs*)+0x30>
c00126ff:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012702:	83 c4 10             	add    esp,0x10
c0012705:	5b                   	pop    ebx
c0012706:	5e                   	pop    esi
c0012707:	5f                   	pop    edi
c0012708:	c3                   	ret    
c0012709:	8d 44 24 08          	lea    eax,[esp+0x8]
c001270d:	83 ec 04             	sub    esp,0x4
c0012710:	57                   	push   edi
c0012711:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012717:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001271a:	57                   	push   edi
c001271b:	50                   	push   eax
c001271c:	e8 96 ed ff ff       	call   c00114b7 <KeGetProcessEnvPair(Process*, int)>
c0012721:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012724:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012728:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001272c:	83 c4 0c             	add    esp,0xc
c001272f:	85 d2                	test   edx,edx
c0012731:	75 23                	jne    c0012756 <SysGetEnv(regs*)+0x84>
c0012733:	83 ec 0c             	sub    esp,0xc
c0012736:	50                   	push   eax
c0012737:	e8 44 de fe ff       	call   c0000580 <strlen>
c001273c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001273f:	89 c3                	mov    ebx,eax
c0012741:	e8 3a de fe ff       	call   c0000580 <strlen>
c0012746:	83 c4 10             	add    esp,0x10
c0012749:	31 d2                	xor    edx,edx
c001274b:	83 c4 10             	add    esp,0x10
c001274e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012752:	5b                   	pop    ebx
c0012753:	5e                   	pop    esi
c0012754:	5f                   	pop    edi
c0012755:	c3                   	ret    
c0012756:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012759:	83 ec 08             	sub    esp,0x8
c001275c:	50                   	push   eax
c001275d:	56                   	push   esi
c001275e:	e8 ed de fe ff       	call   c0000650 <strcpy>
c0012763:	58                   	pop    eax
c0012764:	5a                   	pop    edx
c0012765:	68 14 26 02 c0       	push   0xc0022614
c001276a:	56                   	push   esi
c001276b:	e8 00 e1 fe ff       	call   c0000870 <strcat>
c0012770:	59                   	pop    ecx
c0012771:	5b                   	pop    ebx
c0012772:	57                   	push   edi
c0012773:	56                   	push   esi
c0012774:	e8 f7 e0 fe ff       	call   c0000870 <strcat>
c0012779:	83 c4 10             	add    esp,0x10
c001277c:	31 c0                	xor    eax,eax
c001277e:	83 c4 10             	add    esp,0x10
c0012781:	31 d2                	xor    edx,edx
c0012783:	5b                   	pop    ebx
c0012784:	5e                   	pop    esi
c0012785:	5f                   	pop    edi
c0012786:	c3                   	ret    

c0012787 <SysSetFatAttrib(regs*)>:
c0012787:	57                   	push   edi
c0012788:	56                   	push   esi
c0012789:	53                   	push   ebx
c001278a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001278e:	83 ec 0c             	sub    esp,0xc
c0012791:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012794:	68 14 01 00 00       	push   0x114
c0012799:	e8 55 53 ff ff       	call   c0007af3 <malloc>
c001279e:	83 c4 0c             	add    esp,0xc
c00127a1:	89 c3                	mov    ebx,eax
c00127a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00127ab:	50                   	push   eax
c00127ac:	57                   	push   edi
c00127ad:	53                   	push   ebx
c00127ae:	e8 8f 93 ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c00127b3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00127b6:	83 c4 0c             	add    esp,0xc
c00127b9:	0f b6 d4             	movzx  edx,ah
c00127bc:	0f b6 c0             	movzx  eax,al
c00127bf:	52                   	push   edx
c00127c0:	50                   	push   eax
c00127c1:	53                   	push   ebx
c00127c2:	e8 01 96 ff ff       	call   c000bdc8 <File::chfatattr(unsigned char, unsigned char)>
c00127c7:	83 c4 10             	add    esp,0x10
c00127ca:	85 db                	test   ebx,ebx
c00127cc:	89 c6                	mov    esi,eax
c00127ce:	74 0c                	je     c00127dc <SysSetFatAttrib(regs*)+0x55>
c00127d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127d2:	83 ec 0c             	sub    esp,0xc
c00127d5:	53                   	push   ebx
c00127d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00127d9:	83 c4 10             	add    esp,0x10
c00127dc:	5b                   	pop    ebx
c00127dd:	31 c0                	xor    eax,eax
c00127df:	85 f6                	test   esi,esi
c00127e1:	0f 95 c0             	setne  al
c00127e4:	31 d2                	xor    edx,edx
c00127e6:	5e                   	pop    esi
c00127e7:	f7 d8                	neg    eax
c00127e9:	83 d2 00             	adc    edx,0x0
c00127ec:	f7 da                	neg    edx
c00127ee:	5f                   	pop    edi
c00127ef:	c3                   	ret    

c00127f0 <SysPipe(regs*)>:
c00127f0:	57                   	push   edi
c00127f1:	56                   	push   esi
c00127f2:	53                   	push   ebx
c00127f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127f7:	83 ec 0c             	sub    esp,0xc
c00127fa:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00127fd:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012800:	6a 20                	push   0x20
c0012802:	e8 ec 52 ff ff       	call   c0007af3 <malloc>
c0012807:	89 c3                	mov    ebx,eax
c0012809:	58                   	pop    eax
c001280a:	5a                   	pop    edx
c001280b:	68 00 50 00 00       	push   0x5000
c0012810:	53                   	push   ebx
c0012811:	e8 48 5c ff ff       	call   c000845e <Pipe::Pipe(int)>
c0012816:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012819:	e8 a0 69 ff ff       	call   c00091be <UnixFile::getFileDescriptor()>
c001281e:	89 07                	mov    DWORD PTR [edi],eax
c0012820:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012823:	e8 96 69 ff ff       	call   c00091be <UnixFile::getFileDescriptor()>
c0012828:	83 c4 10             	add    esp,0x10
c001282b:	31 d2                	xor    edx,edx
c001282d:	89 06                	mov    DWORD PTR [esi],eax
c001282f:	31 c0                	xor    eax,eax
c0012831:	5b                   	pop    ebx
c0012832:	5e                   	pop    esi
c0012833:	5f                   	pop    edi
c0012834:	c3                   	ret    

c0012835 <SysGetUnixTime(regs*)>:
c0012835:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001283a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012840:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012844:	e9 c5 9c ff ff       	jmp    c000c50e <Clock::timeInSecondsLocal()>

c0012849 <string_ends_with(char const*, char const*)>:
c0012849:	57                   	push   edi
c001284a:	56                   	push   esi
c001284b:	53                   	push   ebx
c001284c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012850:	83 ec 0c             	sub    esp,0xc
c0012853:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012857:	53                   	push   ebx
c0012858:	e8 23 dd fe ff       	call   c0000580 <strlen>
c001285d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012860:	89 c6                	mov    esi,eax
c0012862:	e8 19 dd fe ff       	call   c0000580 <strlen>
c0012867:	83 c4 10             	add    esp,0x10
c001286a:	31 d2                	xor    edx,edx
c001286c:	39 c6                	cmp    esi,eax
c001286e:	7d 06                	jge    c0012876 <string_ends_with(char const*, char const*)+0x2d>
c0012870:	5b                   	pop    ebx
c0012871:	89 d0                	mov    eax,edx
c0012873:	5e                   	pop    esi
c0012874:	5f                   	pop    edi
c0012875:	c3                   	ret    
c0012876:	83 ec 08             	sub    esp,0x8
c0012879:	29 c6                	sub    esi,eax
c001287b:	57                   	push   edi
c001287c:	01 f3                	add    ebx,esi
c001287e:	53                   	push   ebx
c001287f:	e8 fc de fe ff       	call   c0000780 <strcmp>
c0012884:	83 c4 10             	add    esp,0x10
c0012887:	31 d2                	xor    edx,edx
c0012889:	5b                   	pop    ebx
c001288a:	5e                   	pop    esi
c001288b:	85 c0                	test   eax,eax
c001288d:	5f                   	pop    edi
c001288e:	0f 94 c2             	sete   dl
c0012891:	89 d0                	mov    eax,edx
c0012893:	c3                   	ret    

c0012894 <SysOpen(regs*)>:
c0012894:	56                   	push   esi
c0012895:	53                   	push   ebx
c0012896:	81 ec 04 01 00 00    	sub    esp,0x104
c001289c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00128a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128a6:	85 c0                	test   eax,eax
c00128a8:	0f 84 c4 01 00 00    	je     c0012a72 <SysOpen(regs*)+0x1de>
c00128ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128b1:	85 c0                	test   eax,eax
c00128b3:	0f 84 b9 01 00 00    	je     c0012a72 <SysOpen(regs*)+0x1de>
c00128b9:	6a 00                	push   0x0
c00128bb:	68 16 26 02 c0       	push   0xc0022616
c00128c0:	50                   	push   eax
c00128c1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00128c5:	56                   	push   esi
c00128c6:	e8 6b 8f ff ff       	call   c000b836 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00128cb:	89 34 24             	mov    DWORD PTR [esp],esi
c00128ce:	e8 ad dc fe ff       	call   c0000580 <strlen>
c00128d3:	83 c4 10             	add    esp,0x10
c00128d6:	83 e8 01             	sub    eax,0x1
c00128d9:	74 29                	je     c0012904 <SysOpen(regs*)+0x70>
c00128db:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00128df:	83 fa 2e             	cmp    edx,0x2e
c00128e2:	74 1c                	je     c0012900 <SysOpen(regs*)+0x6c>
c00128e4:	83 fa 3a             	cmp    edx,0x3a
c00128e7:	74 17                	je     c0012900 <SysOpen(regs*)+0x6c>
c00128e9:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00128ed:	83 e8 01             	sub    eax,0x1
c00128f0:	74 12                	je     c0012904 <SysOpen(regs*)+0x70>
c00128f2:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00128f6:	83 fa 3a             	cmp    edx,0x3a
c00128f9:	74 05                	je     c0012900 <SysOpen(regs*)+0x6c>
c00128fb:	83 fa 2e             	cmp    edx,0x2e
c00128fe:	75 e9                	jne    c00128e9 <SysOpen(regs*)+0x55>
c0012900:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012904:	83 ec 08             	sub    esp,0x8
c0012907:	68 1a 26 02 c0       	push   0xc002261a
c001290c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001290f:	50                   	push   eax
c0012910:	e8 34 ff ff ff       	call   c0012849 <string_ends_with(char const*, char const*)>
c0012915:	83 c4 10             	add    esp,0x10
c0012918:	85 c0                	test   eax,eax
c001291a:	74 1d                	je     c0012939 <SysOpen(regs*)+0xa5>
c001291c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001291f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012925:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001292c:	81 c4 04 01 00 00    	add    esp,0x104
c0012932:	31 c0                	xor    eax,eax
c0012934:	5b                   	pop    ebx
c0012935:	31 d2                	xor    edx,edx
c0012937:	5e                   	pop    esi
c0012938:	c3                   	ret    
c0012939:	83 ec 08             	sub    esp,0x8
c001293c:	68 1f 26 02 c0       	push   0xc002261f
c0012941:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012944:	50                   	push   eax
c0012945:	e8 ff fe ff ff       	call   c0012849 <string_ends_with(char const*, char const*)>
c001294a:	83 c4 10             	add    esp,0x10
c001294d:	85 c0                	test   eax,eax
c001294f:	75 cb                	jne    c001291c <SysOpen(regs*)+0x88>
c0012951:	83 ec 08             	sub    esp,0x8
c0012954:	68 1b 26 02 c0       	push   0xc002261b
c0012959:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001295c:	50                   	push   eax
c001295d:	e8 1e de fe ff       	call   c0000780 <strcmp>
c0012962:	83 c4 10             	add    esp,0x10
c0012965:	85 c0                	test   eax,eax
c0012967:	74 b3                	je     c001291c <SysOpen(regs*)+0x88>
c0012969:	83 ec 08             	sub    esp,0x8
c001296c:	68 1a 26 02 c0       	push   0xc002261a
c0012971:	56                   	push   esi
c0012972:	e8 d2 fe ff ff       	call   c0012849 <string_ends_with(char const*, char const*)>
c0012977:	83 c4 10             	add    esp,0x10
c001297a:	85 c0                	test   eax,eax
c001297c:	75 9e                	jne    c001291c <SysOpen(regs*)+0x88>
c001297e:	83 ec 08             	sub    esp,0x8
c0012981:	68 24 26 02 c0       	push   0xc0022624
c0012986:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012989:	50                   	push   eax
c001298a:	e8 ba fe ff ff       	call   c0012849 <string_ends_with(char const*, char const*)>
c001298f:	83 c4 10             	add    esp,0x10
c0012992:	85 c0                	test   eax,eax
c0012994:	0f 85 eb 00 00 00    	jne    c0012a85 <SysOpen(regs*)+0x1f1>
c001299a:	83 ec 08             	sub    esp,0x8
c001299d:	68 29 26 02 c0       	push   0xc0022629
c00129a2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129a5:	50                   	push   eax
c00129a6:	e8 9e fe ff ff       	call   c0012849 <string_ends_with(char const*, char const*)>
c00129ab:	83 c4 10             	add    esp,0x10
c00129ae:	85 c0                	test   eax,eax
c00129b0:	0f 85 cf 00 00 00    	jne    c0012a85 <SysOpen(regs*)+0x1f1>
c00129b6:	83 ec 08             	sub    esp,0x8
c00129b9:	68 25 26 02 c0       	push   0xc0022625
c00129be:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00129c1:	51                   	push   ecx
c00129c2:	e8 b9 dd fe ff       	call   c0000780 <strcmp>
c00129c7:	83 c4 10             	add    esp,0x10
c00129ca:	85 c0                	test   eax,eax
c00129cc:	0f 84 b3 00 00 00    	je     c0012a85 <SysOpen(regs*)+0x1f1>
c00129d2:	83 ec 08             	sub    esp,0x8
c00129d5:	68 24 26 02 c0       	push   0xc0022624
c00129da:	56                   	push   esi
c00129db:	e8 69 fe ff ff       	call   c0012849 <string_ends_with(char const*, char const*)>
c00129e0:	83 c4 10             	add    esp,0x10
c00129e3:	85 c0                	test   eax,eax
c00129e5:	0f 85 9a 00 00 00    	jne    c0012a85 <SysOpen(regs*)+0x1f1>
c00129eb:	83 ec 0c             	sub    esp,0xc
c00129ee:	68 14 01 00 00       	push   0x114
c00129f3:	e8 fb 50 ff ff       	call   c0007af3 <malloc>
c00129f8:	83 c4 0c             	add    esp,0xc
c00129fb:	89 c6                	mov    esi,eax
c00129fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a05:	50                   	push   eax
c0012a06:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012a09:	52                   	push   edx
c0012a0a:	56                   	push   esi
c0012a0b:	e8 32 91 ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c0012a10:	83 c4 10             	add    esp,0x10
c0012a13:	85 f6                	test   esi,esi
c0012a15:	74 5b                	je     c0012a72 <SysOpen(regs*)+0x1de>
c0012a17:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012a1a:	0f b6 c2             	movzx  eax,dl
c0012a1d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012a20:	89 d0                	mov    eax,edx
c0012a22:	83 e0 01             	and    eax,0x1
c0012a25:	f6 c2 02             	test   dl,0x2
c0012a28:	74 03                	je     c0012a2d <SysOpen(regs*)+0x199>
c0012a2a:	83 c8 02             	or     eax,0x2
c0012a2d:	f6 c2 04             	test   dl,0x4
c0012a30:	74 03                	je     c0012a35 <SysOpen(regs*)+0x1a1>
c0012a32:	83 c8 04             	or     eax,0x4
c0012a35:	f6 c2 08             	test   dl,0x8
c0012a38:	74 03                	je     c0012a3d <SysOpen(regs*)+0x1a9>
c0012a3a:	83 c8 0a             	or     eax,0xa
c0012a3d:	80 e2 10             	and    dl,0x10
c0012a40:	74 03                	je     c0012a45 <SysOpen(regs*)+0x1b1>
c0012a42:	83 c8 12             	or     eax,0x12
c0012a45:	83 ec 08             	sub    esp,0x8
c0012a48:	50                   	push   eax
c0012a49:	56                   	push   esi
c0012a4a:	e8 11 91 ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c0012a4f:	83 c4 10             	add    esp,0x10
c0012a52:	85 c0                	test   eax,eax
c0012a54:	75 1c                	jne    c0012a72 <SysOpen(regs*)+0x1de>
c0012a56:	83 ec 0c             	sub    esp,0xc
c0012a59:	56                   	push   esi
c0012a5a:	e8 5f 67 ff ff       	call   c00091be <UnixFile::getFileDescriptor()>
c0012a5f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012a62:	83 c4 10             	add    esp,0x10
c0012a65:	89 02                	mov    DWORD PTR [edx],eax
c0012a67:	c1 f8 1f             	sar    eax,0x1f
c0012a6a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012a6d:	e9 ba fe ff ff       	jmp    c001292c <SysOpen(regs*)+0x98>
c0012a72:	81 c4 04 01 00 00    	add    esp,0x104
c0012a78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a7d:	5b                   	pop    ebx
c0012a7e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012a83:	5e                   	pop    esi
c0012a84:	c3                   	ret    
c0012a85:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a88:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012a8e:	e9 92 fe ff ff       	jmp    c0012925 <SysOpen(regs*)+0x91>

c0012a93 <KeSystemCall(regs*, void*)>:
c0012a93:	53                   	push   ebx
c0012a94:	83 ec 08             	sub    esp,0x8
c0012a97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a9b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012a9e:	83 f8 3e             	cmp    eax,0x3e
c0012aa1:	77 16                	ja     c0012ab9 <KeSystemCall(regs*, void*)+0x26>
c0012aa3:	8b 14 85 40 3e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc1c0]
c0012aaa:	85 d2                	test   edx,edx
c0012aac:	74 0b                	je     c0012ab9 <KeSystemCall(regs*, void*)+0x26>
c0012aae:	83 ec 0c             	sub    esp,0xc
c0012ab1:	53                   	push   ebx
c0012ab2:	ff d2                	call   edx
c0012ab4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012ab7:	eb 0d                	jmp    c0012ac6 <KeSystemCall(regs*, void*)+0x33>
c0012ab9:	52                   	push   edx
c0012aba:	52                   	push   edx
c0012abb:	50                   	push   eax
c0012abc:	68 2e 26 02 c0       	push   0xc002262e
c0012ac1:	e8 64 7e ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0012ac6:	83 c4 10             	add    esp,0x10
c0012ac9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012ace:	83 c4 08             	add    esp,0x8
c0012ad1:	31 d2                	xor    edx,edx
c0012ad3:	5b                   	pop    ebx
c0012ad4:	c3                   	ret    
c0012ad5:	66 90                	xchg   ax,ax
c0012ad7:	90                   	nop

c0012ad8 <KeSwitchEndian16(unsigned short)>:
c0012ad8:	83 ec 04             	sub    esp,0x4
c0012adb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012adf:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012ae3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012ae7:	c1 f8 08             	sar    eax,0x8
c0012aea:	89 c2                	mov    edx,eax
c0012aec:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012af0:	c1 e0 08             	shl    eax,0x8
c0012af3:	09 d0                	or     eax,edx
c0012af5:	83 c4 04             	add    esp,0x4
c0012af8:	c3                   	ret    
c0012af9:	8d 76 00             	lea    esi,[esi+0x0]

c0012afc <KeSwitchEndian32(unsigned int)>:
c0012afc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b00:	c1 e8 18             	shr    eax,0x18
c0012b03:	89 c2                	mov    edx,eax
c0012b05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b09:	c1 e0 08             	shl    eax,0x8
c0012b0c:	25 00 00 ff 00       	and    eax,0xff0000
c0012b11:	09 c2                	or     edx,eax
c0012b13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b17:	c1 e8 08             	shr    eax,0x8
c0012b1a:	25 00 ff 00 00       	and    eax,0xff00
c0012b1f:	09 c2                	or     edx,eax
c0012b21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b25:	c1 e0 18             	shl    eax,0x18
c0012b28:	09 d0                	or     eax,edx
c0012b2a:	c3                   	ret    
c0012b2b:	90                   	nop

c0012b2c <EthernetCRC32(unsigned char*, int)>:
c0012b2c:	83 ec 10             	sub    esp,0x10
c0012b2f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012b34:	75 0a                	jne    c0012b40 <EthernetCRC32(unsigned char*, int)+0x14>
c0012b36:	b8 00 00 00 00       	mov    eax,0x0
c0012b3b:	e9 8c 00 00 00       	jmp    c0012bcc <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b40:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b45:	7f 09                	jg     c0012b50 <EthernetCRC32(unsigned char*, int)+0x24>
c0012b47:	b8 00 00 00 00       	mov    eax,0x0
c0012b4c:	eb 7e                	jmp    c0012bcc <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b4e:	66 90                	xchg   ax,ax
c0012b50:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012b58:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012b60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b64:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012b68:	7d 5a                	jge    c0012bc4 <EthernetCRC32(unsigned char*, int)+0x98>
c0012b6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b72:	01 d0                	add    eax,edx
c0012b74:	8a 00                	mov    al,BYTE PTR [eax]
c0012b76:	0f b6 c0             	movzx  eax,al
c0012b79:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012b7d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b85:	8d 76 00             	lea    esi,[esi+0x0]
c0012b88:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012b8d:	7f 2d                	jg     c0012bbc <EthernetCRC32(unsigned char*, int)+0x90>
c0012b8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b93:	83 e0 01             	and    eax,0x1
c0012b96:	74 10                	je     c0012ba8 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012b98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b9c:	d1 e8                	shr    eax,1
c0012b9e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012ba3:	eb 0b                	jmp    c0012bb0 <EthernetCRC32(unsigned char*, int)+0x84>
c0012ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bac:	d1 e8                	shr    eax,1
c0012bae:	66 90                	xchg   ax,ax
c0012bb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bb4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012bb9:	eb cd                	jmp    c0012b88 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012bbb:	90                   	nop
c0012bbc:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012bc1:	eb 9d                	jmp    c0012b60 <EthernetCRC32(unsigned char*, int)+0x34>
c0012bc3:	90                   	nop
c0012bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc8:	f7 d0                	not    eax
c0012bca:	66 90                	xchg   ax,ax
c0012bcc:	83 c4 10             	add    esp,0x10
c0012bcf:	c3                   	ret    

c0012bd0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012bd0:	83 ec 2c             	sub    esp,0x2c
c0012bd3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bd7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012bdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012be0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012be4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012be8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012beb:	0f b7 c0             	movzx  eax,ax
c0012bee:	3d 06 08 00 00       	cmp    eax,0x806
c0012bf3:	75 13                	jne    c0012c08 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012bf5:	83 ec 0c             	sub    esp,0xc
c0012bf8:	68 42 26 02 c0       	push   0xc0022642
c0012bfd:	e8 28 7d ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0012c02:	83 c4 10             	add    esp,0x10
c0012c05:	eb 25                	jmp    c0012c2c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c07:	90                   	nop
c0012c08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c0f:	0f b7 c0             	movzx  eax,ax
c0012c12:	3d 00 08 00 00       	cmp    eax,0x800
c0012c17:	75 13                	jne    c0012c2c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c19:	83 ec 0c             	sub    esp,0xc
c0012c1c:	68 58 26 02 c0       	push   0xc0022658
c0012c21:	e8 04 7d ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0012c26:	83 c4 10             	add    esp,0x10
c0012c29:	8d 76 00             	lea    esi,[esi+0x0]
c0012c2c:	90                   	nop
c0012c2d:	83 c4 2c             	add    esp,0x2c
c0012c30:	c3                   	ret    

c0012c31 <CmOpen(char const*)>:
c0012c31:	57                   	push   edi
c0012c32:	56                   	push   esi
c0012c33:	53                   	push   ebx
c0012c34:	83 ec 1c             	sub    esp,0x1c
c0012c37:	6a 30                	push   0x30
c0012c39:	e8 b5 4e ff ff       	call   c0007af3 <malloc>
c0012c3e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c45:	89 c3                	mov    ebx,eax
c0012c47:	e8 a7 4e ff ff       	call   c0007af3 <malloc>
c0012c4c:	83 c4 0c             	add    esp,0xc
c0012c4f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012c55:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c59:	89 c6                	mov    esi,eax
c0012c5b:	50                   	push   eax
c0012c5c:	e8 e1 8e ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c0012c61:	83 c4 0c             	add    esp,0xc
c0012c64:	89 33                	mov    DWORD PTR [ebx],esi
c0012c66:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012c6a:	50                   	push   eax
c0012c6b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c6f:	50                   	push   eax
c0012c70:	56                   	push   esi
c0012c71:	e8 ec 91 ff ff       	call   c000be62 <File::stat(unsigned long long*, bool*)>
c0012c76:	5a                   	pop    edx
c0012c77:	59                   	pop    ecx
c0012c78:	6a 01                	push   0x1
c0012c7a:	ff 33                	push   DWORD PTR [ebx]
c0012c7c:	e8 df 8e ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c0012c81:	5e                   	pop    esi
c0012c82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c86:	e8 68 4e ff ff       	call   c0007af3 <malloc>
c0012c8b:	5a                   	pop    edx
c0012c8c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012c90:	89 c7                	mov    edi,eax
c0012c92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c94:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c96:	56                   	push   esi
c0012c97:	57                   	push   edi
c0012c98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c9c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ca0:	50                   	push   eax
c0012ca1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012ca4:	83 c4 14             	add    esp,0x14
c0012ca7:	ff 33                	push   DWORD PTR [ebx]
c0012ca9:	e8 10 8f ff ff       	call   c000bbbe <File::close()>
c0012cae:	59                   	pop    ecx
c0012caf:	58                   	pop    eax
c0012cb0:	6a 13                	push   0x13
c0012cb2:	ff 33                	push   DWORD PTR [ebx]
c0012cb4:	e8 a7 8e ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c0012cb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cbb:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cbd:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cc0:	57                   	push   edi
c0012cc1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cc5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cc9:	50                   	push   eax
c0012cca:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ccd:	83 c4 14             	add    esp,0x14
c0012cd0:	57                   	push   edi
c0012cd1:	e8 2d 4e ff ff       	call   c0007b03 <free>
c0012cd6:	83 c4 10             	add    esp,0x10
c0012cd9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012cdc:	75 10                	jne    c0012cee <CmOpen(char const*)+0xbd>
c0012cde:	83 ec 0c             	sub    esp,0xc
c0012ce1:	68 6d 26 02 c0       	push   0xc002266d
c0012ce6:	e8 f4 e8 ff ff       	call   c00115df <KePanic(char const*)>
c0012ceb:	83 c4 10             	add    esp,0x10
c0012cee:	50                   	push   eax
c0012cef:	6a 00                	push   0x0
c0012cf1:	6a 00                	push   0x0
c0012cf3:	ff 33                	push   DWORD PTR [ebx]
c0012cf5:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012cf8:	e8 21 8f ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0012cfd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cff:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d01:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d04:	57                   	push   edi
c0012d05:	6a 00                	push   0x0
c0012d07:	6a 2b                	push   0x2b
c0012d09:	50                   	push   eax
c0012d0a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d0d:	83 c4 1c             	add    esp,0x1c
c0012d10:	6a 00                	push   0x0
c0012d12:	6a 00                	push   0x0
c0012d14:	ff 33                	push   DWORD PTR [ebx]
c0012d16:	e8 03 8f ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0012d1b:	83 c4 0c             	add    esp,0xc
c0012d1e:	6a 08                	push   0x8
c0012d20:	68 7e 26 02 c0       	push   0xc002267e
c0012d25:	57                   	push   edi
c0012d26:	e8 55 d6 fe ff       	call   c0000380 <memcmp>
c0012d2b:	83 c4 10             	add    esp,0x10
c0012d2e:	85 c0                	test   eax,eax
c0012d30:	74 10                	je     c0012d42 <CmOpen(char const*)+0x111>
c0012d32:	83 ec 0c             	sub    esp,0xc
c0012d35:	68 87 26 02 c0       	push   0xc0022687
c0012d3a:	e8 a0 e8 ff ff       	call   c00115df <KePanic(char const*)>
c0012d3f:	83 c4 10             	add    esp,0x10
c0012d42:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012d46:	83 c4 10             	add    esp,0x10
c0012d49:	89 d8                	mov    eax,ebx
c0012d4b:	5b                   	pop    ebx
c0012d4c:	5e                   	pop    esi
c0012d4d:	5f                   	pop    edi
c0012d4e:	c3                   	ret    

c0012d4f <CmClose(Reghive_Tag*)>:
c0012d4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d53:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012d57:	74 0b                	je     c0012d64 <CmClose(Reghive_Tag*)+0x15>
c0012d59:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d5f:	e9 5a 8e ff ff       	jmp    c000bbbe <File::close()>
c0012d64:	c3                   	ret    

c0012d65 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012d65:	53                   	push   ebx
c0012d66:	83 ec 18             	sub    esp,0x18
c0012d69:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d6d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012d71:	74 29                	je     c0012d9c <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012d73:	50                   	push   eax
c0012d74:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012d79:	99                   	cdq    
c0012d7a:	52                   	push   edx
c0012d7b:	50                   	push   eax
c0012d7c:	ff 33                	push   DWORD PTR [ebx]
c0012d7e:	e8 9b 8e ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0012d83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d85:	5a                   	pop    edx
c0012d86:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012d8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d8c:	51                   	push   ecx
c0012d8d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012d91:	6a 00                	push   0x0
c0012d93:	6a 2b                	push   0x2b
c0012d95:	50                   	push   eax
c0012d96:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d99:	83 c4 20             	add    esp,0x20
c0012d9c:	83 c4 18             	add    esp,0x18
c0012d9f:	5b                   	pop    ebx
c0012da0:	c3                   	ret    

c0012da1 <CmGetString(Reghive_Tag*, int, char*)>:
c0012da1:	55                   	push   ebp
c0012da2:	57                   	push   edi
c0012da3:	56                   	push   esi
c0012da4:	53                   	push   ebx
c0012da5:	31 db                	xor    ebx,ebx
c0012da7:	83 ec 70             	sub    esp,0x70
c0012daa:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012dae:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012db5:	50                   	push   eax
c0012db6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012dbd:	55                   	push   ebp
c0012dbe:	e8 a2 ff ff ff       	call   c0012d65 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012dc3:	83 c4 10             	add    esp,0x10
c0012dc6:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012dcb:	c1 e0 08             	shl    eax,0x8
c0012dce:	89 c2                	mov    edx,eax
c0012dd0:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012dd5:	09 d0                	or     eax,edx
c0012dd7:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012ddc:	c1 e0 08             	shl    eax,0x8
c0012ddf:	09 d0                	or     eax,edx
c0012de1:	74 25                	je     c0012e08 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012de3:	52                   	push   edx
c0012de4:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012de8:	52                   	push   edx
c0012de9:	6b fb 0d             	imul   edi,ebx,0xd
c0012dec:	50                   	push   eax
c0012ded:	55                   	push   ebp
c0012dee:	e8 72 ff ff ff       	call   c0012d65 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012df3:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012df7:	b9 27 00 00 00       	mov    ecx,0x27
c0012dfc:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012e03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e05:	83 c4 10             	add    esp,0x10
c0012e08:	83 c3 03             	add    ebx,0x3
c0012e0b:	83 fb 15             	cmp    ebx,0x15
c0012e0e:	75 b6                	jne    c0012dc6 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012e10:	83 c4 6c             	add    esp,0x6c
c0012e13:	5b                   	pop    ebx
c0012e14:	5e                   	pop    esi
c0012e15:	5f                   	pop    edi
c0012e16:	5d                   	pop    ebp
c0012e17:	c3                   	ret    

c0012e18 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012e18:	83 ec 40             	sub    esp,0x40
c0012e1b:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e1f:	50                   	push   eax
c0012e20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e24:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e28:	e8 38 ff ff ff       	call   c0012d65 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e2d:	83 c4 10             	add    esp,0x10
c0012e30:	83 c8 ff             	or     eax,0xffffffff
c0012e33:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012e38:	75 19                	jne    c0012e53 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012e3a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012e3f:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012e44:	c1 e0 08             	shl    eax,0x8
c0012e47:	09 c2                	or     edx,eax
c0012e49:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012e4e:	c1 e0 10             	shl    eax,0x10
c0012e51:	09 d0                	or     eax,edx
c0012e53:	83 c4 3c             	add    esp,0x3c
c0012e56:	c3                   	ret    

c0012e57 <CmGetNext(Reghive_Tag*, int)>:
c0012e57:	83 ec 40             	sub    esp,0x40
c0012e5a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e5e:	50                   	push   eax
c0012e5f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e67:	e8 f9 fe ff ff       	call   c0012d65 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e6c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012e71:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012e76:	c1 e0 08             	shl    eax,0x8
c0012e79:	09 c2                	or     edx,eax
c0012e7b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012e80:	83 c4 4c             	add    esp,0x4c
c0012e83:	c1 e0 10             	shl    eax,0x10
c0012e86:	09 d0                	or     eax,edx
c0012e88:	c3                   	ret    

c0012e89 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012e89:	53                   	push   ebx
c0012e8a:	83 ec 18             	sub    esp,0x18
c0012e8d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e91:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e95:	74 29                	je     c0012ec0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012e97:	50                   	push   eax
c0012e98:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012e9d:	99                   	cdq    
c0012e9e:	52                   	push   edx
c0012e9f:	50                   	push   eax
c0012ea0:	ff 33                	push   DWORD PTR [ebx]
c0012ea2:	e8 77 8d ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0012ea7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ea9:	5a                   	pop    edx
c0012eaa:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012eae:	8b 10                	mov    edx,DWORD PTR [eax]
c0012eb0:	51                   	push   ecx
c0012eb1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012eb5:	6a 00                	push   0x0
c0012eb7:	6a 2b                	push   0x2b
c0012eb9:	50                   	push   eax
c0012eba:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ebd:	83 c4 20             	add    esp,0x20
c0012ec0:	83 c4 18             	add    esp,0x18
c0012ec3:	5b                   	pop    ebx
c0012ec4:	c3                   	ret    

c0012ec5 <CmFreeExtent(Reghive_Tag*, int)>:
c0012ec5:	53                   	push   ebx
c0012ec6:	83 ec 3c             	sub    esp,0x3c
c0012ec9:	6a 2b                	push   0x2b
c0012ecb:	6a 00                	push   0x0
c0012ecd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012ed1:	53                   	push   ebx
c0012ed2:	e8 19 d6 fe ff       	call   c00004f0 <memset>
c0012ed7:	83 c4 0c             	add    esp,0xc
c0012eda:	53                   	push   ebx
c0012edb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012edf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ee3:	e8 a1 ff ff ff       	call   c0012e89 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ee8:	83 c4 48             	add    esp,0x48
c0012eeb:	5b                   	pop    ebx
c0012eec:	c3                   	ret    

c0012eed <CmUpdateHeader(Reghive_Tag*)>:
c0012eed:	83 ec 0c             	sub    esp,0xc
c0012ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef4:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012ef8:	74 10                	je     c0012f0a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012efa:	52                   	push   edx
c0012efb:	8d 50 05             	lea    edx,[eax+0x5]
c0012efe:	52                   	push   edx
c0012eff:	6a 00                	push   0x0
c0012f01:	50                   	push   eax
c0012f02:	e8 82 ff ff ff       	call   c0012e89 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f07:	83 c4 10             	add    esp,0x10
c0012f0a:	83 c4 0c             	add    esp,0xc
c0012f0d:	c3                   	ret    

c0012f0e <CmExpand(Reghive_Tag*, int)>:
c0012f0e:	55                   	push   ebp
c0012f0f:	57                   	push   edi
c0012f10:	83 cf ff             	or     edi,0xffffffff
c0012f13:	56                   	push   esi
c0012f14:	53                   	push   ebx
c0012f15:	83 ec 3c             	sub    esp,0x3c
c0012f18:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f1c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f20:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f24:	74 59                	je     c0012f7f <CmExpand(Reghive_Tag*, int)+0x71>
c0012f26:	50                   	push   eax
c0012f27:	31 d2                	xor    edx,edx
c0012f29:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012f2d:	31 ff                	xor    edi,edi
c0012f2f:	52                   	push   edx
c0012f30:	50                   	push   eax
c0012f31:	ff 33                	push   DWORD PTR [ebx]
c0012f33:	e8 e6 8c ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0012f38:	83 c4 0c             	add    esp,0xc
c0012f3b:	6a 2b                	push   0x2b
c0012f3d:	6a 00                	push   0x0
c0012f3f:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012f43:	55                   	push   ebp
c0012f44:	e8 a7 d5 fe ff       	call   c00004f0 <memset>
c0012f49:	83 c4 10             	add    esp,0x10
c0012f4c:	39 f7                	cmp    edi,esi
c0012f4e:	7d 1b                	jge    c0012f6b <CmExpand(Reghive_Tag*, int)+0x5d>
c0012f50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f52:	83 ec 0c             	sub    esp,0xc
c0012f55:	47                   	inc    edi
c0012f56:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012f5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f5c:	51                   	push   ecx
c0012f5d:	55                   	push   ebp
c0012f5e:	6a 00                	push   0x0
c0012f60:	6a 2b                	push   0x2b
c0012f62:	50                   	push   eax
c0012f63:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f66:	83 c4 20             	add    esp,0x20
c0012f69:	eb e1                	jmp    c0012f4c <CmExpand(Reghive_Tag*, int)+0x3e>
c0012f6b:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012f6e:	83 ec 0c             	sub    esp,0xc
c0012f71:	01 fe                	add    esi,edi
c0012f73:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012f76:	53                   	push   ebx
c0012f77:	e8 71 ff ff ff       	call   c0012eed <CmUpdateHeader(Reghive_Tag*)>
c0012f7c:	83 c4 10             	add    esp,0x10
c0012f7f:	83 c4 3c             	add    esp,0x3c
c0012f82:	89 f8                	mov    eax,edi
c0012f84:	5b                   	pop    ebx
c0012f85:	5e                   	pop    esi
c0012f86:	5f                   	pop    edi
c0012f87:	5d                   	pop    ebp
c0012f88:	c3                   	ret    

c0012f89 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012f89:	55                   	push   ebp
c0012f8a:	57                   	push   edi
c0012f8b:	56                   	push   esi
c0012f8c:	53                   	push   ebx
c0012f8d:	83 cb ff             	or     ebx,0xffffffff
c0012f90:	83 ec 1c             	sub    esp,0x1c
c0012f93:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012f97:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012f9b:	74 68                	je     c0013005 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012f9d:	51                   	push   ecx
c0012f9e:	be 2b 00 00 00       	mov    esi,0x2b
c0012fa3:	6a 00                	push   0x0
c0012fa5:	31 ff                	xor    edi,edi
c0012fa7:	6a 00                	push   0x0
c0012fa9:	31 db                	xor    ebx,ebx
c0012fab:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012fae:	e8 6b 8c ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0012fb3:	83 c4 10             	add    esp,0x10
c0012fb6:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012fb9:	76 3b                	jbe    c0012ff6 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012fbb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fbe:	83 ec 0c             	sub    esp,0xc
c0012fc1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012fc5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fc7:	51                   	push   ecx
c0012fc8:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012fcc:	51                   	push   ecx
c0012fcd:	6a 00                	push   0x0
c0012fcf:	6a 01                	push   0x1
c0012fd1:	50                   	push   eax
c0012fd2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012fd5:	83 c4 20             	add    esp,0x20
c0012fd8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012fdd:	74 26                	je     c0013005 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012fdf:	52                   	push   edx
c0012fe0:	43                   	inc    ebx
c0012fe1:	57                   	push   edi
c0012fe2:	56                   	push   esi
c0012fe3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012fe6:	e8 33 8c ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0012feb:	83 c6 2b             	add    esi,0x2b
c0012fee:	83 d7 00             	adc    edi,0x0
c0012ff1:	83 c4 10             	add    esp,0x10
c0012ff4:	eb c0                	jmp    c0012fb6 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012ff6:	50                   	push   eax
c0012ff7:	50                   	push   eax
c0012ff8:	6a 40                	push   0x40
c0012ffa:	55                   	push   ebp
c0012ffb:	e8 0e ff ff ff       	call   c0012f0e <CmExpand(Reghive_Tag*, int)>
c0013000:	83 c4 10             	add    esp,0x10
c0013003:	89 c3                	mov    ebx,eax
c0013005:	83 c4 1c             	add    esp,0x1c
c0013008:	89 d8                	mov    eax,ebx
c001300a:	5b                   	pop    ebx
c001300b:	5e                   	pop    esi
c001300c:	5f                   	pop    edi
c001300d:	5d                   	pop    ebp
c001300e:	c3                   	ret    

c001300f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001300f:	55                   	push   ebp
c0013010:	57                   	push   edi
c0013011:	56                   	push   esi
c0013012:	53                   	push   ebx
c0013013:	81 ec 88 00 00 00    	sub    esp,0x88
c0013019:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0013020:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013027:	e8 5d ff ff ff       	call   c0012f89 <CmFindUnusedExtent(Reghive_Tag*)>
c001302c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013030:	83 c4 0c             	add    esp,0xc
c0013033:	6a 2b                	push   0x2b
c0013035:	6a 00                	push   0x0
c0013037:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001303b:	55                   	push   ebp
c001303c:	e8 af d4 fe ff       	call   c00004f0 <memset>
c0013041:	83 c4 10             	add    esp,0x10
c0013044:	85 db                	test   ebx,ebx
c0013046:	74 12                	je     c001305a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0013048:	51                   	push   ecx
c0013049:	55                   	push   ebp
c001304a:	53                   	push   ebx
c001304b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013052:	e8 0e fd ff ff       	call   c0012d65 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013057:	83 c4 10             	add    esp,0x10
c001305a:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001305e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013065:	b9 2b 00 00 00       	mov    ecx,0x2b
c001306a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001306c:	85 db                	test   ebx,ebx
c001306e:	74 49                	je     c00130b9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0013070:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0013075:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c001307a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001307e:	c1 e0 08             	shl    eax,0x8
c0013081:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013087:	09 c8                	or     eax,ecx
c0013089:	74 11                	je     c001309c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c001308b:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001308f:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0013093:	c1 e8 10             	shr    eax,0x10
c0013096:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001309a:	eb 0f                	jmp    c00130ab <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c001309c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130a1:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130a6:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130ab:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00130af:	c1 ea 08             	shr    edx,0x8
c00130b2:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00130b7:	eb 0f                	jmp    c00130c8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00130b9:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130be:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130c3:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130c8:	52                   	push   edx
c00130c9:	8d 44 24 49          	lea    eax,[esp+0x49]
c00130cd:	50                   	push   eax
c00130ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00130d2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130d9:	e8 ab fd ff ff       	call   c0012e89 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00130de:	83 c4 10             	add    esp,0x10
c00130e1:	85 db                	test   ebx,ebx
c00130e3:	74 12                	je     c00130f7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00130e5:	50                   	push   eax
c00130e6:	55                   	push   ebp
c00130e7:	53                   	push   ebx
c00130e8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130ef:	e8 95 fd ff ff       	call   c0012e89 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00130f4:	83 c4 10             	add    esp,0x10
c00130f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00130fb:	83 c4 7c             	add    esp,0x7c
c00130fe:	5b                   	pop    ebx
c00130ff:	5e                   	pop    esi
c0013100:	5f                   	pop    edi
c0013101:	5d                   	pop    ebp
c0013102:	c3                   	ret    

c0013103 <CmSetString(Reghive_Tag*, int, char const*)>:
c0013103:	55                   	push   ebp
c0013104:	57                   	push   edi
c0013105:	56                   	push   esi
c0013106:	53                   	push   ebx
c0013107:	bb 27 00 00 00       	mov    ebx,0x27
c001310c:	81 ec 88 00 00 00    	sub    esp,0x88
c0013112:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0013119:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0013120:	e8 5b d4 fe ff       	call   c0000580 <strlen>
c0013125:	8d 48 26             	lea    ecx,[eax+0x26]
c0013128:	89 c8                	mov    eax,ecx
c001312a:	99                   	cdq    
c001312b:	f7 fb                	idiv   ebx
c001312d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013131:	83 c4 10             	add    esp,0x10
c0013134:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001313a:	7e 10                	jle    c001314c <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c001313c:	83 ec 0c             	sub    esp,0xc
c001313f:	68 98 26 02 c0       	push   0xc0022698
c0013144:	e8 96 e4 ff ff       	call   c00115df <KePanic(char const*)>
c0013149:	83 c4 10             	add    esp,0x10
c001314c:	53                   	push   ebx
c001314d:	31 ed                	xor    ebp,ebp
c001314f:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0013153:	53                   	push   ebx
c0013154:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001315b:	57                   	push   edi
c001315c:	e8 04 fc ff ff       	call   c0012d65 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013161:	83 c4 10             	add    esp,0x10
c0013164:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0013168:	89 f0                	mov    eax,esi
c001316a:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c001316e:	c1 e0 08             	shl    eax,0x8
c0013171:	09 c6                	or     esi,eax
c0013173:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0013177:	c1 e6 08             	shl    esi,0x8
c001317a:	09 c6                	or     esi,eax
c001317c:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0013180:	7e 72                	jle    c00131f4 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0013182:	85 f6                	test   esi,esi
c0013184:	75 25                	jne    c00131ab <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0013186:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001318b:	8d 44 24 45          	lea    eax,[esp+0x45]
c001318f:	50                   	push   eax
c0013190:	6a 00                	push   0x0
c0013192:	6a 00                	push   0x0
c0013194:	57                   	push   edi
c0013195:	e8 75 fe ff ff       	call   c001300f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001319a:	83 c4 10             	add    esp,0x10
c001319d:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00131a0:	89 c6                	mov    esi,eax
c00131a2:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00131a5:	c1 f8 10             	sar    eax,0x10
c00131a8:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00131ab:	51                   	push   ecx
c00131ac:	8d 54 24 49          	lea    edx,[esp+0x49]
c00131b0:	52                   	push   edx
c00131b1:	56                   	push   esi
c00131b2:	57                   	push   edi
c00131b3:	e8 ad fb ff ff       	call   c0012d65 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131b8:	83 c4 0c             	add    esp,0xc
c00131bb:	6a 27                	push   0x27
c00131bd:	6a 00                	push   0x0
c00131bf:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131c3:	51                   	push   ecx
c00131c4:	e8 27 d3 fe ff       	call   c00004f0 <memset>
c00131c9:	6b c5 27             	imul   eax,ebp,0x27
c00131cc:	83 c4 0c             	add    esp,0xc
c00131cf:	6a 27                	push   0x27
c00131d1:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00131d8:	50                   	push   eax
c00131d9:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131dd:	51                   	push   ecx
c00131de:	e8 ad d4 fe ff       	call   c0000690 <strncpy>
c00131e3:	83 c4 0c             	add    esp,0xc
c00131e6:	8d 54 24 49          	lea    edx,[esp+0x49]
c00131ea:	52                   	push   edx
c00131eb:	56                   	push   esi
c00131ec:	57                   	push   edi
c00131ed:	e8 97 fc ff ff       	call   c0012e89 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131f2:	eb 19                	jmp    c001320d <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c00131f4:	85 f6                	test   esi,esi
c00131f6:	74 18                	je     c0013210 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c00131f8:	52                   	push   edx
c00131f9:	52                   	push   edx
c00131fa:	56                   	push   esi
c00131fb:	57                   	push   edi
c00131fc:	e8 c4 fc ff ff       	call   c0012ec5 <CmFreeExtent(Reghive_Tag*, int)>
c0013201:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0013205:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013209:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001320d:	83 c4 10             	add    esp,0x10
c0013210:	45                   	inc    ebp
c0013211:	83 c3 03             	add    ebx,0x3
c0013214:	83 fd 07             	cmp    ebp,0x7
c0013217:	0f 85 47 ff ff ff    	jne    c0013164 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c001321d:	50                   	push   eax
c001321e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0013222:	50                   	push   eax
c0013223:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001322a:	57                   	push   edi
c001322b:	e8 59 fc ff ff       	call   c0012e89 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013230:	81 c4 8c 00 00 00    	add    esp,0x8c
c0013236:	5b                   	pop    ebx
c0013237:	5e                   	pop    esi
c0013238:	5f                   	pop    edi
c0013239:	5d                   	pop    ebp
c001323a:	c3                   	ret    

c001323b <CmGetMatch(char*, char*, bool, bool*)>:
c001323b:	56                   	push   esi
c001323c:	53                   	push   ebx
c001323d:	50                   	push   eax
c001323e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013243:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013247:	74 25                	je     c001326e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013249:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001324c:	31 db                	xor    ebx,ebx
c001324e:	50                   	push   eax
c001324f:	50                   	push   eax
c0013250:	8d 04 9d 40 3f 02 c0 	lea    eax,[ebx*4-0x3ffdc0c0]
c0013257:	50                   	push   eax
c0013258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001325c:	e8 1f d5 fe ff       	call   c0000780 <strcmp>
c0013261:	83 c4 10             	add    esp,0x10
c0013264:	85 c0                	test   eax,eax
c0013266:	74 2e                	je     c0013296 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013268:	43                   	inc    ebx
c0013269:	83 fb 3f             	cmp    ebx,0x3f
c001326c:	75 e0                	jne    c001324e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001326e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013271:	31 db                	xor    ebx,ebx
c0013273:	51                   	push   ecx
c0013274:	51                   	push   ecx
c0013275:	8d 04 9d 40 3f 02 c0 	lea    eax,[ebx*4-0x3ffdc0c0]
c001327c:	50                   	push   eax
c001327d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013281:	e8 fa d4 fe ff       	call   c0000780 <strcmp>
c0013286:	83 c4 10             	add    esp,0x10
c0013289:	85 c0                	test   eax,eax
c001328b:	74 09                	je     c0013296 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c001328d:	43                   	inc    ebx
c001328e:	83 fb 3f             	cmp    ebx,0x3f
c0013291:	75 e0                	jne    c0013273 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0013293:	83 cb ff             	or     ebx,0xffffffff
c0013296:	5a                   	pop    edx
c0013297:	89 d8                	mov    eax,ebx
c0013299:	5b                   	pop    ebx
c001329a:	5e                   	pop    esi
c001329b:	c3                   	ret    

c001329c <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c001329c:	55                   	push   ebp
c001329d:	31 c0                	xor    eax,eax
c001329f:	57                   	push   edi
c00132a0:	56                   	push   esi
c00132a1:	53                   	push   ebx
c00132a2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132a6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00132aa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00132ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132b2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00132b4:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00132b7:	83 fd 1f             	cmp    ebp,0x1f
c00132ba:	7f 0b                	jg     c00132c7 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00132bc:	0f b6 c2             	movzx  eax,dl
c00132bf:	d3 e0                	shl    eax,cl
c00132c1:	09 07                	or     DWORD PTR [edi],eax
c00132c3:	b0 01                	mov    al,0x1
c00132c5:	01 33                	add    DWORD PTR [ebx],esi
c00132c7:	5b                   	pop    ebx
c00132c8:	5e                   	pop    esi
c00132c9:	5f                   	pop    edi
c00132ca:	5d                   	pop    ebp
c00132cb:	c3                   	ret    

c00132cc <CmGetShift(unsigned int*, int*, int, bool*)>:
c00132cc:	57                   	push   edi
c00132cd:	56                   	push   esi
c00132ce:	53                   	push   ebx
c00132cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132d7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00132db:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00132df:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00132e1:	7c 17                	jl     c00132fa <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00132e3:	8b 17                	mov    edx,DWORD PTR [edi]
c00132e5:	b8 01 00 00 00       	mov    eax,0x1
c00132ea:	d3 e0                	shl    eax,cl
c00132ec:	48                   	dec    eax
c00132ed:	21 d0                	and    eax,edx
c00132ef:	d3 ea                	shr    edx,cl
c00132f1:	89 17                	mov    DWORD PTR [edi],edx
c00132f3:	29 0b                	sub    DWORD PTR [ebx],ecx
c00132f5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00132f8:	eb 05                	jmp    c00132ff <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00132fa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00132fd:	31 c0                	xor    eax,eax
c00132ff:	5b                   	pop    ebx
c0013300:	5e                   	pop    esi
c0013301:	5f                   	pop    edi
c0013302:	c3                   	ret    

c0013303 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0013303:	83 ec 40             	sub    esp,0x40
c0013306:	8d 44 24 09          	lea    eax,[esp+0x9]
c001330a:	50                   	push   eax
c001330b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001330f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013313:	e8 4d fa ff ff       	call   c0012d65 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013318:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001331c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013320:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0013324:	89 10                	mov    DWORD PTR [eax],edx
c0013326:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013329:	83 c4 4c             	add    esp,0x4c
c001332c:	c3                   	ret    

c001332d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c001332d:	55                   	push   ebp
c001332e:	57                   	push   edi
c001332f:	56                   	push   esi
c0013330:	53                   	push   ebx
c0013331:	83 ec 40             	sub    esp,0x40
c0013334:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013338:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c001333c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013340:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0013344:	53                   	push   ebx
c0013345:	56                   	push   esi
c0013346:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001334a:	e8 16 fa ff ff       	call   c0012d65 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001334f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0013353:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0013357:	83 c4 0c             	add    esp,0xc
c001335a:	53                   	push   ebx
c001335b:	56                   	push   esi
c001335c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013360:	e8 24 fb ff ff       	call   c0012e89 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013365:	83 c4 4c             	add    esp,0x4c
c0013368:	5b                   	pop    ebx
c0013369:	5e                   	pop    esi
c001336a:	5f                   	pop    edi
c001336b:	5d                   	pop    ebp
c001336c:	c3                   	ret    

c001336d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c001336d:	55                   	push   ebp
c001336e:	57                   	push   edi
c001336f:	56                   	push   esi
c0013370:	31 f6                	xor    esi,esi
c0013372:	53                   	push   ebx
c0013373:	31 db                	xor    ebx,ebx
c0013375:	83 ec 40             	sub    esp,0x40
c0013378:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013380:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013388:	6a 12                	push   0x12
c001338a:	68 ee 00 00 00       	push   0xee
c001338f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013393:	e8 58 d1 fe ff       	call   c00004f0 <memset>
c0013398:	83 c4 10             	add    esp,0x10
c001339b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001339f:	6a 08                	push   0x8
c00133a1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00133a5:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00133a9:	50                   	push   eax
c00133aa:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00133ae:	55                   	push   ebp
c00133af:	57                   	push   edi
c00133b0:	e8 e7 fe ff ff       	call   c001329c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00133b5:	83 c4 10             	add    esp,0x10
c00133b8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00133bc:	50                   	push   eax
c00133bd:	6a 06                	push   0x6
c00133bf:	55                   	push   ebp
c00133c0:	57                   	push   edi
c00133c1:	e8 06 ff ff ff       	call   c00132cc <CmGetShift(unsigned int*, int*, int, bool*)>
c00133c6:	83 c4 10             	add    esp,0x10
c00133c9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00133ce:	74 07                	je     c00133d7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00133d0:	46                   	inc    esi
c00133d1:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00133d5:	eb e1                	jmp    c00133b8 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00133d7:	43                   	inc    ebx
c00133d8:	83 fb 12             	cmp    ebx,0x12
c00133db:	75 c2                	jne    c001339f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00133dd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00133e1:	31 f6                	xor    esi,esi
c00133e3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00133e6:	50                   	push   eax
c00133e7:	50                   	push   eax
c00133e8:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c00133ed:	46                   	inc    esi
c00133ee:	8d 04 85 40 3f 02 c0 	lea    eax,[eax*4-0x3ffdc0c0]
c00133f5:	50                   	push   eax
c00133f6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00133fa:	e8 71 d4 fe ff       	call   c0000870 <strcat>
c00133ff:	83 c4 10             	add    esp,0x10
c0013402:	83 fe 18             	cmp    esi,0x18
c0013405:	75 df                	jne    c00133e6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0013407:	83 c4 3c             	add    esp,0x3c
c001340a:	31 c0                	xor    eax,eax
c001340c:	5b                   	pop    ebx
c001340d:	5e                   	pop    esi
c001340e:	5f                   	pop    edi
c001340f:	5d                   	pop    ebp
c0013410:	c3                   	ret    

c0013411 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013411:	83 ec 40             	sub    esp,0x40
c0013414:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013418:	50                   	push   eax
c0013419:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001341d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013421:	e8 3f f9 ff ff       	call   c0012d65 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013426:	58                   	pop    eax
c0013427:	5a                   	pop    edx
c0013428:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001342c:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013430:	50                   	push   eax
c0013431:	e8 37 ff ff ff       	call   c001336d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0013436:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001343b:	83 c4 4c             	add    esp,0x4c
c001343e:	c3                   	ret    

c001343f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001343f:	55                   	push   ebp
c0013440:	57                   	push   edi
c0013441:	56                   	push   esi
c0013442:	53                   	push   ebx
c0013443:	31 db                	xor    ebx,ebx
c0013445:	83 ec 70             	sub    esp,0x70
c0013448:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001344f:	6a 30                	push   0x30
c0013451:	6a 00                	push   0x0
c0013453:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013457:	56                   	push   esi
c0013458:	e8 93 d0 fe ff       	call   c00004f0 <memset>
c001345d:	83 c4 10             	add    esp,0x10
c0013460:	83 ec 0c             	sub    esp,0xc
c0013463:	57                   	push   edi
c0013464:	e8 17 d1 fe ff       	call   c0000580 <strlen>
c0013469:	83 c4 10             	add    esp,0x10
c001346c:	39 d8                	cmp    eax,ebx
c001346e:	76 16                	jbe    c0013486 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013470:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0013474:	83 ec 0c             	sub    esp,0xc
c0013477:	50                   	push   eax
c0013478:	e8 e3 d4 fe ff       	call   c0000960 <toupper>
c001347d:	83 c4 10             	add    esp,0x10
c0013480:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0013483:	43                   	inc    ebx
c0013484:	eb da                	jmp    c0013460 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0013486:	52                   	push   edx
c0013487:	31 db                	xor    ebx,ebx
c0013489:	6a 18                	push   0x18
c001348b:	31 ff                	xor    edi,edi
c001348d:	6a 3f                	push   0x3f
c001348f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013493:	50                   	push   eax
c0013494:	e8 57 d0 fe ff       	call   c00004f0 <memset>
c0013499:	83 c4 10             	add    esp,0x10
c001349c:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c00134a0:	8d 74 24 10          	lea    esi,[esp+0x10]
c00134a4:	84 c0                	test   al,al
c00134a6:	0f 84 af 00 00 00    	je     c001355b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00134ac:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00134b0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00134b3:	83 ec 0c             	sub    esp,0xc
c00134b6:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c00134bb:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00134bf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00134c3:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c00134c8:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00134cc:	56                   	push   esi
c00134cd:	e8 ae d0 fe ff       	call   c0000580 <strlen>
c00134d2:	83 c4 10             	add    esp,0x10
c00134d5:	85 c0                	test   eax,eax
c00134d7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00134db:	74 0b                	je     c00134e8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00134dd:	50                   	push   eax
c00134de:	6a 01                	push   0x1
c00134e0:	56                   	push   esi
c00134e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00134e5:	50                   	push   eax
c00134e6:	eb 0a                	jmp    c00134f2 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00134e8:	50                   	push   eax
c00134e9:	6a 00                	push   0x0
c00134eb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00134ef:	50                   	push   eax
c00134f0:	6a 00                	push   0x0
c00134f2:	e8 44 fd ff ff       	call   c001323b <CmGetMatch(char*, char*, bool, bool*)>
c00134f7:	83 c4 10             	add    esp,0x10
c00134fa:	83 f8 ff             	cmp    eax,0xffffffff
c00134fd:	75 1a                	jne    c0013519 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00134ff:	83 ec 0c             	sub    esp,0xc
c0013502:	68 ad 26 02 c0       	push   0xc00226ad
c0013507:	e8 d3 e0 ff ff       	call   c00115df <KePanic(char const*)>
c001350c:	83 c4 10             	add    esp,0x10
c001350f:	b8 02 00 00 00       	mov    eax,0x2
c0013514:	e9 bb 00 00 00       	jmp    c00135d4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013519:	83 ff 18             	cmp    edi,0x18
c001351c:	75 1a                	jne    c0013538 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001351e:	83 ec 0c             	sub    esp,0xc
c0013521:	68 c2 26 02 c0       	push   0xc00226c2
c0013526:	e8 b4 e0 ff ff       	call   c00115df <KePanic(char const*)>
c001352b:	83 c4 10             	add    esp,0x10
c001352e:	b8 01 00 00 00       	mov    eax,0x1
c0013533:	e9 9c 00 00 00       	jmp    c00135d4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013538:	47                   	inc    edi
c0013539:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001353e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0013542:	0f 45 dd             	cmovne ebx,ebp
c0013545:	83 ec 0c             	sub    esp,0xc
c0013548:	56                   	push   esi
c0013549:	e8 32 d0 fe ff       	call   c0000580 <strlen>
c001354e:	83 c4 10             	add    esp,0x10
c0013551:	85 c0                	test   eax,eax
c0013553:	74 06                	je     c001355b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0013555:	43                   	inc    ebx
c0013556:	e9 41 ff ff ff       	jmp    c001349c <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001355b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013563:	31 db                	xor    ebx,ebx
c0013565:	31 ff                	xor    edi,edi
c0013567:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001356f:	50                   	push   eax
c0013570:	6a 12                	push   0x12
c0013572:	68 ee 00 00 00       	push   0xee
c0013577:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001357e:	e8 6d cf fe ff       	call   c00004f0 <memset>
c0013583:	83 c4 10             	add    esp,0x10
c0013586:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001358a:	83 fb 17             	cmp    ebx,0x17
c001358d:	7e 26                	jle    c00135b5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c001358f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013593:	50                   	push   eax
c0013594:	6a 08                	push   0x8
c0013596:	55                   	push   ebp
c0013597:	56                   	push   esi
c0013598:	e8 2f fd ff ff       	call   c00132cc <CmGetShift(unsigned int*, int*, int, bool*)>
c001359d:	83 c4 10             	add    esp,0x10
c00135a0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00135a5:	74 26                	je     c00135cd <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00135a7:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00135ae:	4b                   	dec    ebx
c00135af:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00135b2:	47                   	inc    edi
c00135b3:	eb 1c                	jmp    c00135d1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00135b5:	6a 06                	push   0x6
c00135b7:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c00135bc:	50                   	push   eax
c00135bd:	55                   	push   ebp
c00135be:	56                   	push   esi
c00135bf:	e8 d8 fc ff ff       	call   c001329c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00135c4:	83 c4 10             	add    esp,0x10
c00135c7:	84 c0                	test   al,al
c00135c9:	75 06                	jne    c00135d1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00135cb:	eb c2                	jmp    c001358f <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c00135cd:	31 c0                	xor    eax,eax
c00135cf:	eb 03                	jmp    c00135d4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00135d1:	43                   	inc    ebx
c00135d2:	eb b2                	jmp    c0013586 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c00135d4:	83 c4 6c             	add    esp,0x6c
c00135d7:	5b                   	pop    ebx
c00135d8:	5e                   	pop    esi
c00135d9:	5f                   	pop    edi
c00135da:	5d                   	pop    ebp
c00135db:	c3                   	ret    

c00135dc <CmCreateString(Reghive_Tag*, int, char const*)>:
c00135dc:	53                   	push   ebx
c00135dd:	83 ec 3c             	sub    esp,0x3c
c00135e0:	6a 2b                	push   0x2b
c00135e2:	6a 00                	push   0x0
c00135e4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00135e8:	53                   	push   ebx
c00135e9:	e8 02 cf fe ff       	call   c00004f0 <memset>
c00135ee:	58                   	pop    eax
c00135ef:	5a                   	pop    edx
c00135f0:	8d 44 24 11          	lea    eax,[esp+0x11]
c00135f4:	50                   	push   eax
c00135f5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00135f9:	e8 41 fe ff ff       	call   c001343f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00135fe:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0013603:	83 c4 0c             	add    esp,0xc
c0013606:	6a 15                	push   0x15
c0013608:	6a 00                	push   0x0
c001360a:	8d 44 24 27          	lea    eax,[esp+0x27]
c001360e:	50                   	push   eax
c001360f:	e8 dc ce fe ff       	call   c00004f0 <memset>
c0013614:	53                   	push   ebx
c0013615:	6a 00                	push   0x0
c0013617:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001361b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001361f:	e8 eb f9 ff ff       	call   c001300f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013624:	83 c4 58             	add    esp,0x58
c0013627:	5b                   	pop    ebx
c0013628:	c3                   	ret    

c0013629 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013629:	56                   	push   esi
c001362a:	53                   	push   ebx
c001362b:	83 ec 48             	sub    esp,0x48
c001362e:	6a 12                	push   0x12
c0013630:	68 ff 00 00 00       	push   0xff
c0013635:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013639:	56                   	push   esi
c001363a:	e8 b1 ce fe ff       	call   c00004f0 <memset>
c001363f:	5a                   	pop    edx
c0013640:	59                   	pop    ecx
c0013641:	56                   	push   esi
c0013642:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013646:	e8 f4 fd ff ff       	call   c001343f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001364b:	83 c4 10             	add    esp,0x10
c001364e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013652:	85 db                	test   ebx,ebx
c0013654:	74 42                	je     c0013698 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013656:	50                   	push   eax
c0013657:	8d 44 24 19          	lea    eax,[esp+0x19]
c001365b:	50                   	push   eax
c001365c:	53                   	push   ebx
c001365d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013661:	e8 ff f6 ff ff       	call   c0012d65 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013666:	83 c4 0c             	add    esp,0xc
c0013669:	6a 12                	push   0x12
c001366b:	8d 44 24 21          	lea    eax,[esp+0x21]
c001366f:	50                   	push   eax
c0013670:	56                   	push   esi
c0013671:	e8 0a cd fe ff       	call   c0000380 <memcmp>
c0013676:	83 c4 10             	add    esp,0x10
c0013679:	85 c0                	test   eax,eax
c001367b:	74 1e                	je     c001369b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001367d:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013682:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0013687:	c1 e3 08             	shl    ebx,0x8
c001368a:	09 d8                	or     eax,ebx
c001368c:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013691:	c1 e3 10             	shl    ebx,0x10
c0013694:	09 c3                	or     ebx,eax
c0013696:	eb ba                	jmp    c0013652 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013698:	83 cb ff             	or     ebx,0xffffffff
c001369b:	83 c4 44             	add    esp,0x44
c001369e:	89 d8                	mov    eax,ebx
c00136a0:	5b                   	pop    ebx
c00136a1:	5e                   	pop    esi
c00136a2:	c3                   	ret    

c00136a3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00136a3:	57                   	push   edi
c00136a4:	56                   	push   esi
c00136a5:	53                   	push   ebx
c00136a6:	83 ec 34             	sub    esp,0x34
c00136a9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00136ad:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00136b1:	6a 2b                	push   0x2b
c00136b3:	6a 00                	push   0x0
c00136b5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136b9:	53                   	push   ebx
c00136ba:	e8 31 ce fe ff       	call   c00004f0 <memset>
c00136bf:	58                   	pop    eax
c00136c0:	5a                   	pop    edx
c00136c1:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136c5:	50                   	push   eax
c00136c6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136ca:	e8 70 fd ff ff       	call   c001343f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136cf:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c00136d3:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00136d7:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00136db:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00136df:	53                   	push   ebx
c00136e0:	6a 00                	push   0x0
c00136e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136e6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136ea:	e8 20 f9 ff ff       	call   c001300f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00136ef:	83 c4 50             	add    esp,0x50
c00136f2:	5b                   	pop    ebx
c00136f3:	5e                   	pop    esi
c00136f4:	5f                   	pop    edi
c00136f5:	c3                   	ret    

c00136f6 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00136f6:	55                   	push   ebp
c00136f7:	57                   	push   edi
c00136f8:	56                   	push   esi
c00136f9:	53                   	push   ebx
c00136fa:	83 ec 40             	sub    esp,0x40
c00136fd:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013701:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013705:	6a 2b                	push   0x2b
c0013707:	6a 00                	push   0x0
c0013709:	8d 74 24 11          	lea    esi,[esp+0x11]
c001370d:	56                   	push   esi
c001370e:	e8 dd cd fe ff       	call   c00004f0 <memset>
c0013713:	5f                   	pop    edi
c0013714:	89 ef                	mov    edi,ebp
c0013716:	58                   	pop    eax
c0013717:	8d 44 24 11          	lea    eax,[esp+0x11]
c001371b:	50                   	push   eax
c001371c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013720:	e8 1a fd ff ff       	call   c001343f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013725:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001372a:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c001372f:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013734:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013739:	83 c4 10             	add    esp,0x10
c001373c:	85 ed                	test   ebp,ebp
c001373e:	74 14                	je     c0013754 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013740:	51                   	push   ecx
c0013741:	51                   	push   ecx
c0013742:	57                   	push   edi
c0013743:	53                   	push   ebx
c0013744:	e8 0e f7 ff ff       	call   c0012e57 <CmGetNext(Reghive_Tag*, int)>
c0013749:	83 c4 10             	add    esp,0x10
c001374c:	85 c0                	test   eax,eax
c001374e:	74 04                	je     c0013754 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013750:	89 c7                	mov    edi,eax
c0013752:	eb e8                	jmp    c001373c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013754:	56                   	push   esi
c0013755:	6a 00                	push   0x0
c0013757:	57                   	push   edi
c0013758:	53                   	push   ebx
c0013759:	e8 b1 f8 ff ff       	call   c001300f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001375e:	83 c4 0c             	add    esp,0xc
c0013761:	56                   	push   esi
c0013762:	50                   	push   eax
c0013763:	89 c7                	mov    edi,eax
c0013765:	53                   	push   ebx
c0013766:	e8 fa f5 ff ff       	call   c0012d65 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001376b:	58                   	pop    eax
c001376c:	5a                   	pop    edx
c001376d:	6a 6c                	push   0x6c
c001376f:	6a 00                	push   0x0
c0013771:	6a 00                	push   0x0
c0013773:	68 d3 26 02 c0       	push   0xc00226d3
c0013778:	57                   	push   edi
c0013779:	53                   	push   ebx
c001377a:	e8 24 ff ff ff       	call   c00136a3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c001377f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013783:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013787:	c1 e8 10             	shr    eax,0x10
c001378a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001378e:	83 c4 1c             	add    esp,0x1c
c0013791:	56                   	push   esi
c0013792:	57                   	push   edi
c0013793:	53                   	push   ebx
c0013794:	e8 f0 f6 ff ff       	call   c0012e89 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013799:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001379e:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00137a3:	c1 e0 08             	shl    eax,0x8
c00137a6:	09 c2                	or     edx,eax
c00137a8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00137ad:	83 c4 4c             	add    esp,0x4c
c00137b0:	5b                   	pop    ebx
c00137b1:	5e                   	pop    esi
c00137b2:	c1 e0 10             	shl    eax,0x10
c00137b5:	09 d0                	or     eax,edx
c00137b7:	5f                   	pop    edi
c00137b8:	5d                   	pop    ebp
c00137b9:	c3                   	ret    

c00137ba <zStrtok(char*, char const*)>:
c00137ba:	55                   	push   ebp
c00137bb:	57                   	push   edi
c00137bc:	56                   	push   esi
c00137bd:	53                   	push   ebx
c00137be:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137c6:	85 db                	test   ebx,ebx
c00137c8:	74 2f                	je     c00137f9 <zStrtok(char*, char const*)+0x3f>
c00137ca:	85 c0                	test   eax,eax
c00137cc:	75 09                	jne    c00137d7 <zStrtok(char*, char const*)+0x1d>
c00137ce:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00137d3:	85 c0                	test   eax,eax
c00137d5:	74 50                	je     c0013827 <zStrtok(char*, char const*)+0x6d>
c00137d7:	31 c9                	xor    ecx,ecx
c00137d9:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00137dd:	74 03                	je     c00137e2 <zStrtok(char*, char const*)+0x28>
c00137df:	41                   	inc    ecx
c00137e0:	eb f7                	jmp    c00137d9 <zStrtok(char*, char const*)+0x1f>
c00137e2:	31 d2                	xor    edx,edx
c00137e4:	39 ca                	cmp    edx,ecx
c00137e6:	74 15                	je     c00137fd <zStrtok(char*, char const*)+0x43>
c00137e8:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00137ec:	8d 3c 10             	lea    edi,[eax+edx*1]
c00137ef:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00137f2:	39 ee                	cmp    esi,ebp
c00137f4:	74 13                	je     c0013809 <zStrtok(char*, char const*)+0x4f>
c00137f6:	42                   	inc    edx
c00137f7:	eb eb                	jmp    c00137e4 <zStrtok(char*, char const*)+0x2a>
c00137f9:	31 c0                	xor    eax,eax
c00137fb:	eb 2a                	jmp    c0013827 <zStrtok(char*, char const*)+0x6d>
c00137fd:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c0013807:	eb 1e                	jmp    c0013827 <zStrtok(char*, char const*)+0x6d>
c0013809:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c001380c:	39 ce                	cmp    esi,ecx
c001380e:	75 0a                	jne    c001381a <zStrtok(char*, char const*)+0x60>
c0013810:	40                   	inc    eax
c0013811:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c0013816:	89 d8                	mov    eax,ebx
c0013818:	eb 0d                	jmp    c0013827 <zStrtok(char*, char const*)+0x6d>
c001381a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001381d:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013821:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c0013827:	5b                   	pop    ebx
c0013828:	5e                   	pop    esi
c0013829:	5f                   	pop    edi
c001382a:	5d                   	pop    ebp
c001382b:	c3                   	ret    

c001382c <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c001382c:	57                   	push   edi
c001382d:	56                   	push   esi
c001382e:	53                   	push   ebx
c001382f:	81 ec 08 01 00 00    	sub    esp,0x108
c0013835:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c001383c:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013843:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013847:	53                   	push   ebx
c0013848:	e8 03 ce fe ff       	call   c0000650 <strcpy>
c001384d:	59                   	pop    ecx
c001384e:	5e                   	pop    esi
c001384f:	68 37 2a 02 c0       	push   0xc0022a37
c0013854:	53                   	push   ebx
c0013855:	bb 01 00 00 00       	mov    ebx,0x1
c001385a:	e8 5b ff ff ff       	call   c00137ba <zStrtok(char*, char const*)>
c001385f:	83 c4 10             	add    esp,0x10
c0013862:	85 c0                	test   eax,eax
c0013864:	74 3b                	je     c00138a1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013866:	52                   	push   edx
c0013867:	50                   	push   eax
c0013868:	6a 01                	push   0x1
c001386a:	57                   	push   edi
c001386b:	e8 b9 fd ff ff       	call   c0013629 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013870:	59                   	pop    ecx
c0013871:	5e                   	pop    esi
c0013872:	89 c3                	mov    ebx,eax
c0013874:	68 37 2a 02 c0       	push   0xc0022a37
c0013879:	6a 00                	push   0x0
c001387b:	e8 3a ff ff ff       	call   c00137ba <zStrtok(char*, char const*)>
c0013880:	83 c4 10             	add    esp,0x10
c0013883:	85 c0                	test   eax,eax
c0013885:	89 c6                	mov    esi,eax
c0013887:	74 18                	je     c00138a1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013889:	52                   	push   edx
c001388a:	52                   	push   edx
c001388b:	53                   	push   ebx
c001388c:	57                   	push   edi
c001388d:	e8 86 f5 ff ff       	call   c0012e18 <CmEnterDirectory(Reghive_Tag*, int)>
c0013892:	83 c4 10             	add    esp,0x10
c0013895:	83 f8 ff             	cmp    eax,0xffffffff
c0013898:	89 c3                	mov    ebx,eax
c001389a:	74 05                	je     c00138a1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001389c:	50                   	push   eax
c001389d:	56                   	push   esi
c001389e:	53                   	push   ebx
c001389f:	eb c9                	jmp    c001386a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00138a1:	81 c4 00 01 00 00    	add    esp,0x100
c00138a7:	89 d8                	mov    eax,ebx
c00138a9:	5b                   	pop    ebx
c00138aa:	5e                   	pop    esi
c00138ab:	5f                   	pop    edi
c00138ac:	c3                   	ret    

c00138ad <CmDisplayTree(Reghive_Tag*, int, int)>:
c00138ad:	55                   	push   ebp
c00138ae:	57                   	push   edi
c00138af:	56                   	push   esi
c00138b0:	53                   	push   ebx
c00138b1:	83 ec 5c             	sub    esp,0x5c
c00138b4:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00138b8:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00138bc:	85 db                	test   ebx,ebx
c00138be:	0f 8e 84 00 00 00    	jle    c0013948 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00138c4:	57                   	push   edi
c00138c5:	31 ed                	xor    ebp,ebp
c00138c7:	6a 32                	push   0x32
c00138c9:	6a 00                	push   0x0
c00138cb:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00138cf:	57                   	push   edi
c00138d0:	e8 1b cc fe ff       	call   c00004f0 <memset>
c00138d5:	83 c4 0c             	add    esp,0xc
c00138d8:	57                   	push   edi
c00138d9:	53                   	push   ebx
c00138da:	56                   	push   esi
c00138db:	e8 31 fb ff ff       	call   c0013411 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00138e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00138e4:	83 c4 10             	add    esp,0x10
c00138e7:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00138eb:	7d 13                	jge    c0013900 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00138ed:	83 ec 0c             	sub    esp,0xc
c00138f0:	45                   	inc    ebp
c00138f1:	68 db 2d 02 c0       	push   0xc0022ddb
c00138f6:	e8 2f 70 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00138fb:	83 c4 10             	add    esp,0x10
c00138fe:	eb e7                	jmp    c00138e7 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013900:	51                   	push   ecx
c0013901:	57                   	push   edi
c0013902:	53                   	push   ebx
c0013903:	68 d9 26 02 c0       	push   0xc00226d9
c0013908:	e8 1d 70 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001390d:	83 c4 10             	add    esp,0x10
c0013910:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013915:	75 1e                	jne    c0013935 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013917:	52                   	push   edx
c0013918:	52                   	push   edx
c0013919:	53                   	push   ebx
c001391a:	56                   	push   esi
c001391b:	e8 f8 f4 ff ff       	call   c0012e18 <CmEnterDirectory(Reghive_Tag*, int)>
c0013920:	83 c4 0c             	add    esp,0xc
c0013923:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013927:	8d 51 04             	lea    edx,[ecx+0x4]
c001392a:	52                   	push   edx
c001392b:	50                   	push   eax
c001392c:	56                   	push   esi
c001392d:	e8 7b ff ff ff       	call   c00138ad <CmDisplayTree(Reghive_Tag*, int, int)>
c0013932:	83 c4 10             	add    esp,0x10
c0013935:	50                   	push   eax
c0013936:	50                   	push   eax
c0013937:	53                   	push   ebx
c0013938:	56                   	push   esi
c0013939:	e8 19 f5 ff ff       	call   c0012e57 <CmGetNext(Reghive_Tag*, int)>
c001393e:	83 c4 10             	add    esp,0x10
c0013941:	89 c3                	mov    ebx,eax
c0013943:	e9 74 ff ff ff       	jmp    c00138bc <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013948:	83 c4 5c             	add    esp,0x5c
c001394b:	5b                   	pop    ebx
c001394c:	5e                   	pop    esi
c001394d:	5f                   	pop    edi
c001394e:	5d                   	pop    ebp
c001394f:	c3                   	ret    

c0013950 <CmSplitFinalSlashInPlace(char*)>:
c0013950:	53                   	push   ebx
c0013951:	83 ec 14             	sub    esp,0x14
c0013954:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013958:	53                   	push   ebx
c0013959:	e8 22 cc fe ff       	call   c0000580 <strlen>
c001395e:	83 c4 10             	add    esp,0x10
c0013961:	48                   	dec    eax
c0013962:	85 c0                	test   eax,eax
c0013964:	74 15                	je     c001397b <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013966:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001396a:	8d 14 03             	lea    edx,[ebx+eax*1]
c001396d:	75 09                	jne    c0013978 <CmSplitFinalSlashInPlace(char*)+0x28>
c001396f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013972:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013976:	eb 05                	jmp    c001397d <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013978:	48                   	dec    eax
c0013979:	eb e7                	jmp    c0013962 <CmSplitFinalSlashInPlace(char*)+0x12>
c001397b:	31 c0                	xor    eax,eax
c001397d:	83 c4 08             	add    esp,0x8
c0013980:	5b                   	pop    ebx
c0013981:	c3                   	ret    

c0013982 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013982:	55                   	push   ebp
c0013983:	57                   	push   edi
c0013984:	56                   	push   esi
c0013985:	53                   	push   ebx
c0013986:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001398c:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013993:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0013996:	8d 43 01             	lea    eax,[ebx+0x1]
c0013999:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001399d:	89 f0                	mov    eax,esi
c001399f:	3c 40                	cmp    al,0x40
c00139a1:	75 1b                	jne    c00139be <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00139a3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00139a6:	85 c0                	test   eax,eax
c00139a8:	74 08                	je     c00139b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00139aa:	83 f8 3a             	cmp    eax,0x3a
c00139ad:	74 03                	je     c00139b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00139af:	43                   	inc    ebx
c00139b0:	eb f1                	jmp    c00139a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00139b2:	85 c0                	test   eax,eax
c00139b4:	0f 84 45 01 00 00    	je     c0013aff <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00139ba:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00139bd:	43                   	inc    ebx
c00139be:	50                   	push   eax
c00139bf:	6a 40                	push   0x40
c00139c1:	6a 00                	push   0x0
c00139c3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00139c7:	50                   	push   eax
c00139c8:	e8 23 cb fe ff       	call   c00004f0 <memset>
c00139cd:	89 f1                	mov    ecx,esi
c00139cf:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00139d6:	31 c0                	xor    eax,eax
c00139d8:	83 c4 10             	add    esp,0x10
c00139db:	0f be f1             	movsx  esi,cl
c00139de:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00139e1:	85 d2                	test   edx,edx
c00139e3:	89 d1                	mov    ecx,edx
c00139e5:	0f 84 14 01 00 00    	je     c0013aff <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00139eb:	3d c7 00 00 00       	cmp    eax,0xc7
c00139f0:	0f 8f 09 01 00 00    	jg     c0013aff <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00139f6:	83 fa 0a             	cmp    edx,0xa
c00139f9:	0f 85 f1 00 00 00    	jne    c0013af0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c00139ff:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013a04:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013a09:	89 c8                	mov    eax,ecx
c0013a0b:	a8 df                	test   al,0xdf
c0013a0d:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a12:	83 f9 23             	cmp    ecx,0x23
c0013a15:	0f 94 c2             	sete   dl
c0013a18:	89 d5                	mov    ebp,edx
c0013a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a1e:	09 ea                	or     edx,ebp
c0013a20:	80 e2 01             	and    dl,0x1
c0013a23:	75 47                	jne    c0013a6c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a25:	83 e8 09             	sub    eax,0x9
c0013a28:	3c 01                	cmp    al,0x1
c0013a2a:	76 40                	jbe    c0013a6c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a2c:	83 f9 5b             	cmp    ecx,0x5b
c0013a2f:	75 42                	jne    c0013a73 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013a31:	83 fe 40             	cmp    esi,0x40
c0013a34:	75 36                	jne    c0013a6c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a36:	83 ec 0c             	sub    esp,0xc
c0013a39:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013a3d:	55                   	push   ebp
c0013a3e:	e8 3d cb fe ff       	call   c0000580 <strlen>
c0013a43:	83 c4 10             	add    esp,0x10
c0013a46:	83 f8 3f             	cmp    eax,0x3f
c0013a49:	0f 87 b0 00 00 00    	ja     c0013aff <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a4f:	50                   	push   eax
c0013a50:	50                   	push   eax
c0013a51:	55                   	push   ebp
c0013a52:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0013a56:	55                   	push   ebp
c0013a57:	e8 f4 cb fe ff       	call   c0000650 <strcpy>
c0013a5c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013a5f:	e8 1c cb fe ff       	call   c0000580 <strlen>
c0013a64:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013a69:	83 c4 10             	add    esp,0x10
c0013a6c:	31 d2                	xor    edx,edx
c0013a6e:	e9 84 00 00 00       	jmp    c0013af7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0013a73:	83 fe 40             	cmp    esi,0x40
c0013a76:	74 06                	je     c0013a7e <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0013a78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013a7c:	eb 19                	jmp    c0013a97 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013a7e:	51                   	push   ecx
c0013a7f:	51                   	push   ecx
c0013a80:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a84:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a88:	50                   	push   eax
c0013a89:	e8 f2 cc fe ff       	call   c0000780 <strcmp>
c0013a8e:	83 c4 10             	add    esp,0x10
c0013a91:	85 c0                	test   eax,eax
c0013a93:	75 d7                	jne    c0013a6c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a95:	eb e1                	jmp    c0013a78 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0013a97:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0013a9a:	85 c9                	test   ecx,ecx
c0013a9c:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013aa1:	83 f9 3d             	cmp    ecx,0x3d
c0013aa4:	0f 94 c0             	sete   al
c0013aa7:	89 c5                	mov    ebp,eax
c0013aa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013aad:	09 e8                	or     eax,ebp
c0013aaf:	a8 01                	test   al,0x1
c0013ab1:	89 c5                	mov    ebp,eax
c0013ab3:	75 03                	jne    c0013ab8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013ab5:	42                   	inc    edx
c0013ab6:	eb df                	jmp    c0013a97 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013ab8:	85 c9                	test   ecx,ecx
c0013aba:	74 43                	je     c0013aff <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013abc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013ac0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013ac3:	52                   	push   edx
c0013ac4:	52                   	push   edx
c0013ac5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013ac9:	50                   	push   eax
c0013aca:	53                   	push   ebx
c0013acb:	e8 b0 cc fe ff       	call   c0000780 <strcmp>
c0013ad0:	83 c4 10             	add    esp,0x10
c0013ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ad7:	85 c0                	test   eax,eax
c0013ad9:	75 91                	jne    c0013a6c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013adb:	50                   	push   eax
c0013adc:	42                   	inc    edx
c0013add:	50                   	push   eax
c0013ade:	52                   	push   edx
c0013adf:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013ae6:	e8 65 cb fe ff       	call   c0000650 <strcpy>
c0013aeb:	83 c4 10             	add    esp,0x10
c0013aee:	eb 11                	jmp    c0013b01 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013af0:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013af4:	8d 50 01             	lea    edx,[eax+0x1]
c0013af7:	47                   	inc    edi
c0013af8:	89 d0                	mov    eax,edx
c0013afa:	e9 df fe ff ff       	jmp    c00139de <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013aff:	31 ed                	xor    ebp,ebp
c0013b01:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013b07:	89 e8                	mov    eax,ebp
c0013b09:	5b                   	pop    ebx
c0013b0a:	5e                   	pop    esi
c0013b0b:	5f                   	pop    edi
c0013b0c:	5d                   	pop    ebp
c0013b0d:	c3                   	ret    

c0013b0e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013b0e:	57                   	push   edi
c0013b0f:	56                   	push   esi
c0013b10:	53                   	push   ebx
c0013b11:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013b17:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013b1e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013b25:	53                   	push   ebx
c0013b26:	e8 55 ca fe ff       	call   c0000580 <strlen>
c0013b2b:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b2e:	89 c7                	mov    edi,eax
c0013b30:	e8 4b ca fe ff       	call   c0000580 <strlen>
c0013b35:	83 c4 10             	add    esp,0x10
c0013b38:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013b3c:	3d ff 00 00 00       	cmp    eax,0xff
c0013b41:	0f 87 d3 00 00 00    	ja     c0013c1a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b47:	57                   	push   edi
c0013b48:	57                   	push   edi
c0013b49:	56                   	push   esi
c0013b4a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013b4e:	56                   	push   esi
c0013b4f:	e8 fc ca fe ff       	call   c0000650 <strcpy>
c0013b54:	58                   	pop    eax
c0013b55:	5a                   	pop    edx
c0013b56:	68 37 2a 02 c0       	push   0xc0022a37
c0013b5b:	56                   	push   esi
c0013b5c:	e8 0f cd fe ff       	call   c0000870 <strcat>
c0013b61:	59                   	pop    ecx
c0013b62:	5f                   	pop    edi
c0013b63:	53                   	push   ebx
c0013b64:	56                   	push   esi
c0013b65:	e8 06 cd fe ff       	call   c0000870 <strcat>
c0013b6a:	58                   	pop    eax
c0013b6b:	5a                   	pop    edx
c0013b6c:	68 e3 26 02 c0       	push   0xc00226e3
c0013b71:	56                   	push   esi
c0013b72:	e8 f9 cc fe ff       	call   c0000870 <strcat>
c0013b77:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013b7e:	e8 70 3f ff ff       	call   c0007af3 <malloc>
c0013b83:	83 c4 0c             	add    esp,0xc
c0013b86:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013b8c:	56                   	push   esi
c0013b8d:	50                   	push   eax
c0013b8e:	89 c3                	mov    ebx,eax
c0013b90:	e8 ad 7f ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c0013b95:	83 c4 10             	add    esp,0x10
c0013b98:	85 db                	test   ebx,ebx
c0013b9a:	74 7e                	je     c0013c1a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b9c:	51                   	push   ecx
c0013b9d:	51                   	push   ecx
c0013b9e:	6a 01                	push   0x1
c0013ba0:	53                   	push   ebx
c0013ba1:	e8 ba 7f ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c0013ba6:	83 c4 10             	add    esp,0x10
c0013ba9:	85 c0                	test   eax,eax
c0013bab:	74 08                	je     c0013bb5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013bad:	83 ec 0c             	sub    esp,0xc
c0013bb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bb2:	53                   	push   ebx
c0013bb3:	eb 5f                	jmp    c0013c14 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013bb5:	52                   	push   edx
c0013bb6:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013bba:	50                   	push   eax
c0013bbb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013bbf:	50                   	push   eax
c0013bc0:	53                   	push   ebx
c0013bc1:	e8 9c 82 ff ff       	call   c000be62 <File::stat(unsigned long long*, bool*)>
c0013bc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013bca:	83 c4 10             	add    esp,0x10
c0013bcd:	89 c1                	mov    ecx,eax
c0013bcf:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013bd3:	74 31                	je     c0013c06 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013bd5:	83 ec 0c             	sub    esp,0xc
c0013bd8:	50                   	push   eax
c0013bd9:	e8 15 3f ff ff       	call   c0007af3 <malloc>
c0013bde:	89 c6                	mov    esi,eax
c0013be0:	58                   	pop    eax
c0013be1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013be3:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013be7:	52                   	push   edx
c0013be8:	56                   	push   esi
c0013be9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bf1:	53                   	push   ebx
c0013bf2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bf5:	83 c4 20             	add    esp,0x20
c0013bf8:	85 c0                	test   eax,eax
c0013bfa:	75 0a                	jne    c0013c06 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013bfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c00:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013c04:	74 18                	je     c0013c1e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013c06:	83 ec 0c             	sub    esp,0xc
c0013c09:	53                   	push   ebx
c0013c0a:	e8 af 7f ff ff       	call   c000bbbe <File::close()>
c0013c0f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c17:	83 c4 10             	add    esp,0x10
c0013c1a:	31 c0                	xor    eax,eax
c0013c1c:	eb 3b                	jmp    c0013c59 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013c1e:	83 ec 0c             	sub    esp,0xc
c0013c21:	53                   	push   ebx
c0013c22:	e8 97 7f ff ff       	call   c000bbbe <File::close()>
c0013c27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c2c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c2f:	83 c4 0c             	add    esp,0xc
c0013c32:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c39:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c40:	56                   	push   esi
c0013c41:	e8 3c fd ff ff       	call   c0013982 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013c46:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c49:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013c4d:	e8 b1 3e ff ff       	call   c0007b03 <free>
c0013c52:	83 c4 10             	add    esp,0x10
c0013c55:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013c59:	81 c4 20 01 00 00    	add    esp,0x120
c0013c5f:	5b                   	pop    ebx
c0013c60:	5e                   	pop    esi
c0013c61:	5f                   	pop    edi
c0013c62:	c3                   	ret    

c0013c63 <Reg::getLine(char*, char*, char*)>:
c0013c63:	57                   	push   edi
c0013c64:	56                   	push   esi
c0013c65:	53                   	push   ebx
c0013c66:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c6a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c72:	57                   	push   edi
c0013c73:	56                   	push   esi
c0013c74:	53                   	push   ebx
c0013c75:	68 e8 26 02 c0       	push   0xc00226e8
c0013c7a:	e8 8f fe ff ff       	call   c0013b0e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c7f:	83 c4 10             	add    esp,0x10
c0013c82:	84 c0                	test   al,al
c0013c84:	75 10                	jne    c0013c96 <Reg::getLine(char*, char*, char*)+0x33>
c0013c86:	57                   	push   edi
c0013c87:	56                   	push   esi
c0013c88:	53                   	push   ebx
c0013c89:	68 0d 27 02 c0       	push   0xc002270d
c0013c8e:	e8 7b fe ff ff       	call   c0013b0e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c93:	83 c4 10             	add    esp,0x10
c0013c96:	5b                   	pop    ebx
c0013c97:	5e                   	pop    esi
c0013c98:	5f                   	pop    edi
c0013c99:	c3                   	ret    

c0013c9a <Reg::readInt(char*, char*, int*)>:
c0013c9a:	55                   	push   ebp
c0013c9b:	57                   	push   edi
c0013c9c:	56                   	push   esi
c0013c9d:	53                   	push   ebx
c0013c9e:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013ca4:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013ca8:	55                   	push   ebp
c0013ca9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013cb0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013cb7:	e8 a7 ff ff ff       	call   c0013c63 <Reg::getLine(char*, char*, char*)>
c0013cbc:	83 c4 10             	add    esp,0x10
c0013cbf:	84 c0                	test   al,al
c0013cc1:	0f 84 b6 00 00 00    	je     c0013d7d <Reg::readInt(char*, char*, int*)+0xe3>
c0013cc7:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013ccc:	83 fa 2b             	cmp    edx,0x2b
c0013ccf:	74 0c                	je     c0013cdd <Reg::readInt(char*, char*, int*)+0x43>
c0013cd1:	83 fa 2d             	cmp    edx,0x2d
c0013cd4:	75 0e                	jne    c0013ce4 <Reg::readInt(char*, char*, int*)+0x4a>
c0013cd6:	ba 01 00 00 00       	mov    edx,0x1
c0013cdb:	eb 0b                	jmp    c0013ce8 <Reg::readInt(char*, char*, int*)+0x4e>
c0013cdd:	ba 01 00 00 00       	mov    edx,0x1
c0013ce2:	eb 02                	jmp    c0013ce6 <Reg::readInt(char*, char*, int*)+0x4c>
c0013ce4:	31 d2                	xor    edx,edx
c0013ce6:	31 c0                	xor    eax,eax
c0013ce8:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013ced:	be 0a 00 00 00       	mov    esi,0xa
c0013cf2:	75 21                	jne    c0013d15 <Reg::readInt(char*, char*, int*)+0x7b>
c0013cf4:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013cf9:	83 f9 78             	cmp    ecx,0x78
c0013cfc:	75 0a                	jne    c0013d08 <Reg::readInt(char*, char*, int*)+0x6e>
c0013cfe:	83 c2 02             	add    edx,0x2
c0013d01:	be 10 00 00 00       	mov    esi,0x10
c0013d06:	eb 0d                	jmp    c0013d15 <Reg::readInt(char*, char*, int*)+0x7b>
c0013d08:	83 f9 62             	cmp    ecx,0x62
c0013d0b:	75 08                	jne    c0013d15 <Reg::readInt(char*, char*, int*)+0x7b>
c0013d0d:	83 c2 02             	add    edx,0x2
c0013d10:	be 02 00 00 00       	mov    esi,0x2
c0013d15:	01 d5                	add    ebp,edx
c0013d17:	31 d2                	xor    edx,edx
c0013d19:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013d1d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d21:	85 c9                	test   ecx,ecx
c0013d23:	0f 94 c3             	sete   bl
c0013d26:	83 f9 0d             	cmp    ecx,0xd
c0013d29:	89 df                	mov    edi,ebx
c0013d2b:	0f 94 c3             	sete   bl
c0013d2e:	09 df                	or     edi,ebx
c0013d30:	89 fb                	mov    ebx,edi
c0013d32:	83 e7 01             	and    edi,0x1
c0013d35:	75 35                	jne    c0013d6c <Reg::readInt(char*, char*, int*)+0xd2>
c0013d37:	0f af d6             	imul   edx,esi
c0013d3a:	83 fe 10             	cmp    esi,0x10
c0013d3d:	75 26                	jne    c0013d65 <Reg::readInt(char*, char*, int*)+0xcb>
c0013d3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d43:	83 ef 41             	sub    edi,0x41
c0013d46:	89 fb                	mov    ebx,edi
c0013d48:	80 fb 05             	cmp    bl,0x5
c0013d4b:	77 06                	ja     c0013d53 <Reg::readInt(char*, char*, int*)+0xb9>
c0013d4d:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013d51:	eb 16                	jmp    c0013d69 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d53:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d57:	83 eb 61             	sub    ebx,0x61
c0013d5a:	80 fb 05             	cmp    bl,0x5
c0013d5d:	77 06                	ja     c0013d65 <Reg::readInt(char*, char*, int*)+0xcb>
c0013d5f:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013d63:	eb 04                	jmp    c0013d69 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d65:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013d69:	45                   	inc    ebp
c0013d6a:	eb ad                	jmp    c0013d19 <Reg::readInt(char*, char*, int*)+0x7f>
c0013d6c:	84 c0                	test   al,al
c0013d6e:	74 02                	je     c0013d72 <Reg::readInt(char*, char*, int*)+0xd8>
c0013d70:	f7 da                	neg    edx
c0013d72:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013d79:	89 10                	mov    DWORD PTR [eax],edx
c0013d7b:	88 d8                	mov    al,bl
c0013d7d:	81 c4 ec 00 00 00    	add    esp,0xec
c0013d83:	5b                   	pop    ebx
c0013d84:	5e                   	pop    esi
c0013d85:	5f                   	pop    edi
c0013d86:	5d                   	pop    ebp
c0013d87:	c3                   	ret    

c0013d88 <Reg::readString(char*, char*, char*, int)>:
c0013d88:	57                   	push   edi
c0013d89:	56                   	push   esi
c0013d8a:	53                   	push   ebx
c0013d8b:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013d91:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013d95:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013d9c:	57                   	push   edi
c0013d9d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013da4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013dab:	e8 b3 fe ff ff       	call   c0013c63 <Reg::getLine(char*, char*, char*)>
c0013db0:	83 c4 10             	add    esp,0x10
c0013db3:	84 c0                	test   al,al
c0013db5:	89 c6                	mov    esi,eax
c0013db7:	74 44                	je     c0013dfd <Reg::readString(char*, char*, char*, int)+0x75>
c0013db9:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013dc0:	31 c0                	xor    eax,eax
c0013dc2:	4a                   	dec    edx
c0013dc3:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013dc6:	84 c9                	test   cl,cl
c0013dc8:	74 0f                	je     c0013dd9 <Reg::readString(char*, char*, char*, int)+0x51>
c0013dca:	39 c2                	cmp    edx,eax
c0013dcc:	7e 0b                	jle    c0013dd9 <Reg::readString(char*, char*, char*, int)+0x51>
c0013dce:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013dd1:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013dd6:	40                   	inc    eax
c0013dd7:	eb ea                	jmp    c0013dc3 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013dd9:	83 ec 0c             	sub    esp,0xc
c0013ddc:	53                   	push   ebx
c0013ddd:	e8 9e c7 fe ff       	call   c0000580 <strlen>
c0013de2:	83 c4 10             	add    esp,0x10
c0013de5:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013dea:	75 11                	jne    c0013dfd <Reg::readString(char*, char*, char*, int)+0x75>
c0013dec:	83 ec 0c             	sub    esp,0xc
c0013def:	53                   	push   ebx
c0013df0:	e8 8b c7 fe ff       	call   c0000580 <strlen>
c0013df5:	83 c4 10             	add    esp,0x10
c0013df8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013dfd:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013e03:	89 f0                	mov    eax,esi
c0013e05:	5b                   	pop    ebx
c0013e06:	5e                   	pop    esi
c0013e07:	5f                   	pop    edi
c0013e08:	c3                   	ret    

c0013e09 <Reg::readBool(char*, char*, bool*)>:
c0013e09:	83 ec 20             	sub    esp,0x20
c0013e0c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e10:	50                   	push   eax
c0013e11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e19:	e8 7c fe ff ff       	call   c0013c9a <Reg::readInt(char*, char*, int*)>
c0013e1e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013e22:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e27:	0f 95 02             	setne  BYTE PTR [edx]
c0013e2a:	83 c4 2c             	add    esp,0x2c
c0013e2d:	c3                   	ret    

c0013e2e <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013e2e:	53                   	push   ebx
c0013e2f:	83 ec 1c             	sub    esp,0x1c
c0013e32:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013e36:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013e3a:	50                   	push   eax
c0013e3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e43:	e8 c1 ff ff ff       	call   c0013e09 <Reg::readBool(char*, char*, bool*)>
c0013e48:	83 c4 10             	add    esp,0x10
c0013e4b:	84 c0                	test   al,al
c0013e4d:	74 04                	je     c0013e53 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013e4f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013e53:	83 c4 18             	add    esp,0x18
c0013e56:	88 d8                	mov    al,bl
c0013e58:	5b                   	pop    ebx
c0013e59:	c3                   	ret    

c0013e5a <Reg::readIntWithDefault(char*, char*, int)>:
c0013e5a:	53                   	push   ebx
c0013e5b:	83 ec 1c             	sub    esp,0x1c
c0013e5e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e62:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e66:	50                   	push   eax
c0013e67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e6f:	e8 26 fe ff ff       	call   c0013c9a <Reg::readInt(char*, char*, int*)>
c0013e74:	83 c4 10             	add    esp,0x10
c0013e77:	84 c0                	test   al,al
c0013e79:	74 04                	je     c0013e7f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013e7b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e7f:	83 c4 18             	add    esp,0x18
c0013e82:	89 d8                	mov    eax,ebx
c0013e84:	5b                   	pop    ebx
c0013e85:	c3                   	ret    

c0013e86 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013e86:	57                   	push   edi
c0013e87:	56                   	push   esi
c0013e88:	53                   	push   ebx
c0013e89:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e8d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e91:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013e95:	56                   	push   esi
c0013e96:	57                   	push   edi
c0013e97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e9f:	e8 e4 fe ff ff       	call   c0013d88 <Reg::readString(char*, char*, char*, int)>
c0013ea4:	83 c4 10             	add    esp,0x10
c0013ea7:	84 c0                	test   al,al
c0013ea9:	75 16                	jne    c0013ec1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013eab:	50                   	push   eax
c0013eac:	56                   	push   esi
c0013ead:	6a 00                	push   0x0
c0013eaf:	57                   	push   edi
c0013eb0:	e8 3b c6 fe ff       	call   c00004f0 <memset>
c0013eb5:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013eb8:	89 de                	mov    esi,ebx
c0013eba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ebc:	83 c4 10             	add    esp,0x10
c0013ebf:	89 df                	mov    edi,ebx
c0013ec1:	5b                   	pop    ebx
c0013ec2:	89 f8                	mov    eax,edi
c0013ec4:	5e                   	pop    esi
c0013ec5:	5f                   	pop    edi
c0013ec6:	c3                   	ret    

c0013ec7 <SysEject(regs*)>:
c0013ec7:	83 ec 0c             	sub    esp,0xc
c0013eca:	83 ca ff             	or     edx,0xffffffff
c0013ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed1:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013ed4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013ed9:	83 e9 41             	sub    ecx,0x41
c0013edc:	83 f9 19             	cmp    ecx,0x19
c0013edf:	77 18                	ja     c0013ef9 <SysEject(regs*)+0x32>
c0013ee1:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013ee8:	85 c9                	test   ecx,ecx
c0013eea:	74 0d                	je     c0013ef9 <SysEject(regs*)+0x32>
c0013eec:	83 ec 0c             	sub    esp,0xc
c0013eef:	51                   	push   ecx
c0013ef0:	e8 4b 9e ff ff       	call   c000dd40 <LogicalDisk::eject()>
c0013ef5:	83 c4 10             	add    esp,0x10
c0013ef8:	99                   	cdq    
c0013ef9:	83 c4 0c             	add    esp,0xc
c0013efc:	c3                   	ret    

c0013efd <SysExit(regs*)>:
c0013efd:	83 ec 18             	sub    esp,0x18
c0013f00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f04:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f07:	e8 80 2b 00 00       	call   c0016a8c <terminateTask(int)>
c0013f0c:	83 c8 ff             	or     eax,0xffffffff
c0013f0f:	83 c4 1c             	add    esp,0x1c
c0013f12:	89 c2                	mov    edx,eax
c0013f14:	c3                   	ret    

c0013f15 <SysGetCwd(regs*)>:
c0013f15:	83 ec 10             	sub    esp,0x10
c0013f18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f1c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013f1f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f27:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f2a:	e8 b3 78 ff ff       	call   c000b7e2 <Fs::getcwd(Process*, char*, int)>
c0013f2f:	83 c4 1c             	add    esp,0x1c
c0013f32:	99                   	cdq    
c0013f33:	c3                   	ret    

c0013f34 <SysGetPID(regs*)>:
c0013f34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f3e:	99                   	cdq    
c0013f3f:	c3                   	ret    

c0013f40 <SysGetRAMData(regs*)>:
c0013f40:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013f4a:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013f50:	99                   	cdq    
c0013f51:	f7 f9                	idiv   ecx
c0013f53:	c1 e0 18             	shl    eax,0x18
c0013f56:	09 c8                	or     eax,ecx
c0013f58:	99                   	cdq    
c0013f59:	c3                   	ret    

c0013f5a <SysGetVGAPtr(regs*)>:
c0013f5a:	55                   	push   ebp
c0013f5b:	57                   	push   edi
c0013f5c:	56                   	push   esi
c0013f5d:	53                   	push   ebx
c0013f5e:	83 ec 18             	sub    esp,0x18
c0013f61:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f65:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f68:	e8 eb 25 00 00       	call   c0016558 <Thr::processFromPID(int)>
c0013f6d:	83 c4 10             	add    esp,0x10
c0013f70:	89 c1                	mov    ecx,eax
c0013f72:	b8 01 00 00 00       	mov    eax,0x1
c0013f77:	85 c9                	test   ecx,ecx
c0013f79:	74 57                	je     c0013fd2 <SysGetVGAPtr(regs*)+0x78>
c0013f7b:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013f7f:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013f85:	74 0c                	je     c0013f93 <SysGetVGAPtr(regs*)+0x39>
c0013f87:	83 ec 0c             	sub    esp,0xc
c0013f8a:	55                   	push   ebp
c0013f8b:	e8 ff 47 ff ff       	call   c000878f <setActiveTerminal(VgaText*)>
c0013f90:	83 c4 10             	add    esp,0x10
c0013f93:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013f96:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013f9b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013f9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fa0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013fa3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fa6:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013fac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013faf:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013fb2:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013fb8:	50                   	push   eax
c0013fb9:	50                   	push   eax
c0013fba:	68 28 27 02 c0       	push   0xc0022728
c0013fbf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fc2:	05 a8 0f 00 00       	add    eax,0xfa8
c0013fc7:	50                   	push   eax
c0013fc8:	e8 83 c6 fe ff       	call   c0000650 <strcpy>
c0013fcd:	83 c4 10             	add    esp,0x10
c0013fd0:	31 c0                	xor    eax,eax
c0013fd2:	83 c4 0c             	add    esp,0xc
c0013fd5:	31 d2                	xor    edx,edx
c0013fd7:	5b                   	pop    ebx
c0013fd8:	5e                   	pop    esi
c0013fd9:	5f                   	pop    edi
c0013fda:	5d                   	pop    ebp
c0013fdb:	c3                   	ret    

c0013fdc <SysKill(regs*)>:
c0013fdc:	53                   	push   ebx
c0013fdd:	83 ec 08             	sub    esp,0x8
c0013fe0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fe4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013fe8:	75 16                	jne    c0014000 <SysKill(regs*)+0x24>
c0013fea:	83 ec 0c             	sub    esp,0xc
c0013fed:	68 32 27 02 c0       	push   0xc0022732
c0013ff2:	e8 e8 d5 ff ff       	call   c00115df <KePanic(char const*)>
c0013ff7:	83 c4 10             	add    esp,0x10
c0013ffa:	e9 89 00 00 00       	jmp    c0014088 <SysKill(regs*)+0xac>
c0013fff:	90                   	nop
c0014000:	83 ec 0c             	sub    esp,0xc
c0014003:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014008:	e8 af bd 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001400d:	8d 76 00             	lea    esi,[esi+0x0]
c0014010:	83 c4 10             	add    esp,0x10
c0014013:	85 c0                	test   eax,eax
c0014015:	74 19                	je     c0014030 <SysKill(regs*)+0x54>
c0014017:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001401a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001401d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001401f:	74 33                	je     c0014054 <SysKill(regs*)+0x78>
c0014021:	52                   	push   edx
c0014022:	52                   	push   edx
c0014023:	50                   	push   eax
c0014024:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014029:	e8 ae c0 00 00       	call   c00200dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001402e:	eb e0                	jmp    c0014010 <SysKill(regs*)+0x34>
c0014030:	83 ec 0c             	sub    esp,0xc
c0014033:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014038:	e8 7f bd 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001403d:	8d 76 00             	lea    esi,[esi+0x0]
c0014040:	83 c4 10             	add    esp,0x10
c0014043:	85 c0                	test   eax,eax
c0014045:	74 41                	je     c0014088 <SysKill(regs*)+0xac>
c0014047:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001404a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001404d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001404f:	75 27                	jne    c0014078 <SysKill(regs*)+0x9c>
c0014051:	8d 76 00             	lea    esi,[esi+0x0]
c0014054:	51                   	push   ecx
c0014055:	51                   	push   ecx
c0014056:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014059:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001405e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014061:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014067:	e8 0f da ff ff       	call   c0011a7b <KeRaiseSignal(SigHandlerBlock*, int)>
c001406c:	83 c4 10             	add    esp,0x10
c001406f:	31 c0                	xor    eax,eax
c0014071:	31 d2                	xor    edx,edx
c0014073:	eb 1b                	jmp    c0014090 <SysKill(regs*)+0xb4>
c0014075:	8d 76 00             	lea    esi,[esi+0x0]
c0014078:	52                   	push   edx
c0014079:	52                   	push   edx
c001407a:	50                   	push   eax
c001407b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014080:	e8 57 c0 00 00       	call   c00200dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014085:	eb b9                	jmp    c0014040 <SysKill(regs*)+0x64>
c0014087:	90                   	nop
c0014088:	83 c8 ff             	or     eax,0xffffffff
c001408b:	89 c2                	mov    edx,eax
c001408d:	8d 76 00             	lea    esi,[esi+0x0]
c0014090:	83 c4 08             	add    esp,0x8
c0014093:	5b                   	pop    ebx
c0014094:	c3                   	ret    

c0014095 <SysLoadDLL(regs*)>:
c0014095:	56                   	push   esi
c0014096:	31 d2                	xor    edx,edx
c0014098:	53                   	push   ebx
c0014099:	b8 01 00 00 00       	mov    eax,0x1
c001409e:	51                   	push   ecx
c001409f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140a3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00140a7:	0f 84 8c 00 00 00    	je     c0014139 <SysLoadDLL(regs*)+0xa4>
c00140ad:	83 ec 0c             	sub    esp,0xc
c00140b0:	68 14 01 00 00       	push   0x114
c00140b5:	e8 39 3a ff ff       	call   c0007af3 <malloc>
c00140ba:	83 c4 0c             	add    esp,0xc
c00140bd:	89 c3                	mov    ebx,eax
c00140bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140c4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140ca:	53                   	push   ebx
c00140cb:	e8 72 7a ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c00140d0:	83 c4 10             	add    esp,0x10
c00140d3:	31 d2                	xor    edx,edx
c00140d5:	85 db                	test   ebx,ebx
c00140d7:	b8 02 00 00 00       	mov    eax,0x2
c00140dc:	74 5b                	je     c0014139 <SysLoadDLL(regs*)+0xa4>
c00140de:	83 ec 0c             	sub    esp,0xc
c00140e1:	53                   	push   ebx
c00140e2:	e8 3d 7d ff ff       	call   c000be24 <File::exists()>
c00140e7:	83 c4 10             	add    esp,0x10
c00140ea:	84 c0                	test   al,al
c00140ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140ee:	75 11                	jne    c0014101 <SysLoadDLL(regs*)+0x6c>
c00140f0:	83 ec 0c             	sub    esp,0xc
c00140f3:	53                   	push   ebx
c00140f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140f7:	83 c4 10             	add    esp,0x10
c00140fa:	b8 03 00 00 00       	mov    eax,0x3
c00140ff:	eb 36                	jmp    c0014137 <SysLoadDLL(regs*)+0xa2>
c0014101:	83 ec 0c             	sub    esp,0xc
c0014104:	53                   	push   ebx
c0014105:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014108:	58                   	pop    eax
c0014109:	5a                   	pop    edx
c001410a:	6a 00                	push   0x0
c001410c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001410f:	e8 8f 15 00 00       	call   c00156a3 <Thr::loadDLL(char const*, bool)>
c0014114:	83 c4 10             	add    esp,0x10
c0014117:	31 d2                	xor    edx,edx
c0014119:	89 c1                	mov    ecx,eax
c001411b:	b8 04 00 00 00       	mov    eax,0x4
c0014120:	85 c9                	test   ecx,ecx
c0014122:	74 15                	je     c0014139 <SysLoadDLL(regs*)+0xa4>
c0014124:	53                   	push   ebx
c0014125:	53                   	push   ebx
c0014126:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001412c:	51                   	push   ecx
c001412d:	e8 b1 17 00 00       	call   c00158e3 <Thr::executeDLL(unsigned long, void*)>
c0014132:	83 c4 10             	add    esp,0x10
c0014135:	31 c0                	xor    eax,eax
c0014137:	31 d2                	xor    edx,edx
c0014139:	59                   	pop    ecx
c001413a:	5b                   	pop    ebx
c001413b:	5e                   	pop    esi
c001413c:	c3                   	ret    

c001413d <SysRead(regs*)>:
c001413d:	57                   	push   edi
c001413e:	56                   	push   esi
c001413f:	53                   	push   ebx
c0014140:	83 ec 10             	sub    esp,0x10
c0014143:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014147:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001414a:	83 f8 02             	cmp    eax,0x2
c001414d:	77 10                	ja     c001415f <SysRead(regs*)+0x22>
c001414f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014154:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014157:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001415d:	eb 0e                	jmp    c001416d <SysRead(regs*)+0x30>
c001415f:	83 ec 0c             	sub    esp,0xc
c0014162:	50                   	push   eax
c0014163:	e8 53 53 ff ff       	call   c00094bb <KeGetFileFromDescriptor(int)>
c0014168:	83 c4 10             	add    esp,0x10
c001416b:	89 c1                	mov    ecx,eax
c001416d:	83 c8 ff             	or     eax,0xffffffff
c0014170:	85 c9                	test   ecx,ecx
c0014172:	89 c2                	mov    edx,eax
c0014174:	74 28                	je     c001419e <SysRead(regs*)+0x61>
c0014176:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001417e:	83 ec 0c             	sub    esp,0xc
c0014181:	31 ff                	xor    edi,edi
c0014183:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014187:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014189:	52                   	push   edx
c001418a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001418d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014190:	57                   	push   edi
c0014191:	56                   	push   esi
c0014192:	51                   	push   ecx
c0014193:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014196:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001419a:	83 c4 20             	add    esp,0x20
c001419d:	99                   	cdq    
c001419e:	83 c4 10             	add    esp,0x10
c00141a1:	5b                   	pop    ebx
c00141a2:	5e                   	pop    esi
c00141a3:	5f                   	pop    edi
c00141a4:	c3                   	ret    

c00141a5 <SysRegisterSignal(regs*)>:
c00141a5:	83 ec 18             	sub    esp,0x18
c00141a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141ac:	6a 00                	push   0x0
c00141ae:	6a 00                	push   0x0
c00141b0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00141b3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00141b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141be:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00141c4:	e8 7c d8 ff ff       	call   c0011a45 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00141c9:	83 c4 2c             	add    esp,0x2c
c00141cc:	99                   	cdq    
c00141cd:	c3                   	ret    

c00141ce <SysRegistryGetTypeFromPath(regs*)>:
c00141ce:	57                   	push   edi
c00141cf:	56                   	push   esi
c00141d0:	53                   	push   ebx
c00141d1:	81 ec 38 01 00 00    	sub    esp,0x138
c00141d7:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00141de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141e1:	68 53 27 02 c0       	push   0xc0022753
c00141e6:	e8 3f 67 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00141eb:	5a                   	pop    edx
c00141ec:	59                   	pop    ecx
c00141ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141f0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141f3:	e8 34 f6 ff ff       	call   c001382c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00141f8:	5f                   	pop    edi
c00141f9:	5a                   	pop    edx
c00141fa:	89 c6                	mov    esi,eax
c00141fc:	50                   	push   eax
c00141fd:	68 73 27 02 c0       	push   0xc0022773
c0014202:	e8 23 67 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0014207:	83 c4 10             	add    esp,0x10
c001420a:	85 f6                	test   esi,esi
c001420c:	74 28                	je     c0014236 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001420e:	50                   	push   eax
c001420f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014213:	57                   	push   edi
c0014214:	56                   	push   esi
c0014215:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014218:	e8 f4 f1 ff ff       	call   c0013411 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001421d:	83 c4 0c             	add    esp,0xc
c0014220:	57                   	push   edi
c0014221:	50                   	push   eax
c0014222:	89 c3                	mov    ebx,eax
c0014224:	68 7b 27 02 c0       	push   0xc002277b
c0014229:	e8 fc 66 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001422e:	89 d8                	mov    eax,ebx
c0014230:	83 c4 10             	add    esp,0x10
c0014233:	99                   	cdq    
c0014234:	eb 05                	jmp    c001423b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0014236:	83 c8 ff             	or     eax,0xffffffff
c0014239:	89 c2                	mov    edx,eax
c001423b:	81 c4 30 01 00 00    	add    esp,0x130
c0014241:	5b                   	pop    ebx
c0014242:	5e                   	pop    esi
c0014243:	5f                   	pop    edi
c0014244:	c3                   	ret    

c0014245 <SysRegistryReadExtent(regs*)>:
c0014245:	83 ec 1c             	sub    esp,0x1c
c0014248:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001424c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001424f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014252:	85 c0                	test   eax,eax
c0014254:	79 1f                	jns    c0014275 <SysRegistryReadExtent(regs*)+0x30>
c0014256:	52                   	push   edx
c0014257:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001425c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014260:	52                   	push   edx
c0014261:	50                   	push   eax
c0014262:	51                   	push   ecx
c0014263:	e8 9b f0 ff ff       	call   c0013303 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014268:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001426c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014270:	83 c4 10             	add    esp,0x10
c0014273:	eb 14                	jmp    c0014289 <SysRegistryReadExtent(regs*)+0x44>
c0014275:	83 ec 04             	sub    esp,0x4
c0014278:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001427b:	50                   	push   eax
c001427c:	51                   	push   ecx
c001427d:	e8 1f eb ff ff       	call   c0012da1 <CmGetString(Reghive_Tag*, int, char*)>
c0014282:	83 c4 10             	add    esp,0x10
c0014285:	31 c0                	xor    eax,eax
c0014287:	31 d2                	xor    edx,edx
c0014289:	83 c4 1c             	add    esp,0x1c
c001428c:	c3                   	ret    

c001428d <SysRegistryPathToExtentLookup(regs*)>:
c001428d:	53                   	push   ebx
c001428e:	83 ec 10             	sub    esp,0x10
c0014291:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014295:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014298:	68 91 27 02 c0       	push   0xc0022791
c001429d:	e8 88 66 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00142a2:	58                   	pop    eax
c00142a3:	5a                   	pop    edx
c00142a4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142a7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142aa:	e8 7d f5 ff ff       	call   c001382c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00142af:	83 c4 18             	add    esp,0x18
c00142b2:	5b                   	pop    ebx
c00142b3:	99                   	cdq    
c00142b4:	c3                   	ret    

c00142b5 <SysRegistryEnterDirectory(regs*)>:
c00142b5:	53                   	push   ebx
c00142b6:	83 ec 10             	sub    esp,0x10
c00142b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142bd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142c0:	68 b4 27 02 c0       	push   0xc00227b4
c00142c5:	e8 60 66 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00142ca:	58                   	pop    eax
c00142cb:	5a                   	pop    edx
c00142cc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142cf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142d2:	e8 41 eb ff ff       	call   c0012e18 <CmEnterDirectory(Reghive_Tag*, int)>
c00142d7:	83 c4 18             	add    esp,0x18
c00142da:	5b                   	pop    ebx
c00142db:	99                   	cdq    
c00142dc:	c3                   	ret    

c00142dd <SysRegistryGetNext(regs*)>:
c00142dd:	53                   	push   ebx
c00142de:	83 ec 10             	sub    esp,0x10
c00142e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142e5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142e8:	68 d2 27 02 c0       	push   0xc00227d2
c00142ed:	e8 38 66 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00142f2:	58                   	pop    eax
c00142f3:	5a                   	pop    edx
c00142f4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142f7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142fa:	e8 58 eb ff ff       	call   c0012e57 <CmGetNext(Reghive_Tag*, int)>
c00142ff:	83 c4 18             	add    esp,0x18
c0014302:	5b                   	pop    ebx
c0014303:	99                   	cdq    
c0014304:	c3                   	ret    

c0014305 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014305:	57                   	push   edi
c0014306:	56                   	push   esi
c0014307:	53                   	push   ebx
c0014308:	81 ec 34 01 00 00    	sub    esp,0x134
c001430e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014315:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014319:	57                   	push   edi
c001431a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001431d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014320:	e8 ec f0 ff ff       	call   c0013411 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014325:	89 c3                	mov    ebx,eax
c0014327:	58                   	pop    eax
c0014328:	5a                   	pop    edx
c0014329:	57                   	push   edi
c001432a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001432d:	e8 1e c3 fe ff       	call   c0000650 <strcpy>
c0014332:	81 c4 40 01 00 00    	add    esp,0x140
c0014338:	89 d8                	mov    eax,ebx
c001433a:	5b                   	pop    ebx
c001433b:	99                   	cdq    
c001433c:	5e                   	pop    esi
c001433d:	5f                   	pop    edi
c001433e:	c3                   	ret    

c001433f <SysRegistryOpen(regs*)>:
c001433f:	83 ec 18             	sub    esp,0x18
c0014342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014346:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014349:	e8 e3 e8 ff ff       	call   c0012c31 <CmOpen(char const*)>
c001434e:	83 c4 1c             	add    esp,0x1c
c0014351:	99                   	cdq    
c0014352:	c3                   	ret    

c0014353 <SysRegistryClose(regs*)>:
c0014353:	83 ec 18             	sub    esp,0x18
c0014356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001435a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001435d:	e8 ed e9 ff ff       	call   c0012d4f <CmClose(Reghive_Tag*)>
c0014362:	31 c0                	xor    eax,eax
c0014364:	31 d2                	xor    edx,edx
c0014366:	83 c4 1c             	add    esp,0x1c
c0014369:	c3                   	ret    

c001436a <SysSbrk(regs*)>:
c001436a:	56                   	push   esi
c001436b:	53                   	push   ebx
c001436c:	50                   	push   eax
c001436d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014372:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014376:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014379:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001437c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014382:	85 db                	test   ebx,ebx
c0014384:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014387:	74 02                	je     c001438b <SysSbrk(regs*)+0x21>
c0014389:	79 06                	jns    c0014391 <SysSbrk(regs*)+0x27>
c001438b:	89 f0                	mov    eax,esi
c001438d:	31 d2                	xor    edx,edx
c001438f:	eb 2a                	jmp    c00143bb <SysSbrk(regs*)+0x51>
c0014391:	83 c8 ff             	or     eax,0xffffffff
c0014394:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001439a:	89 c2                	mov    edx,eax
c001439c:	77 1d                	ja     c00143bb <SysSbrk(regs*)+0x51>
c001439e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00143a4:	50                   	push   eax
c00143a5:	68 07 0c 00 00       	push   0xc07
c00143aa:	c1 ea 0c             	shr    edx,0xc
c00143ad:	52                   	push   edx
c00143ae:	51                   	push   ecx
c00143af:	e8 72 5a ff ff       	call   c0009e26 <VAS::allocatePages(int, int)>
c00143b4:	89 f0                	mov    eax,esi
c00143b6:	31 d2                	xor    edx,edx
c00143b8:	83 c4 10             	add    esp,0x10
c00143bb:	59                   	pop    ecx
c00143bc:	5b                   	pop    ebx
c00143bd:	5e                   	pop    esi
c00143be:	c3                   	ret    

c00143bf <SysSetCwd(regs*)>:
c00143bf:	83 ec 14             	sub    esp,0x14
c00143c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143c6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143ce:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00143d1:	e8 ed 7a ff ff       	call   c000bec3 <Fs::setcwd(Process*, char*)>
c00143d6:	83 c4 1c             	add    esp,0x1c
c00143d9:	99                   	cdq    
c00143da:	c3                   	ret    

c00143db <SysSetTime(regs*)>:
c00143db:	55                   	push   ebp
c00143dc:	31 c9                	xor    ecx,ecx
c00143de:	57                   	push   edi
c00143df:	bd 0c 00 00 00       	mov    ebp,0xc
c00143e4:	56                   	push   esi
c00143e5:	53                   	push   ebx
c00143e6:	31 db                	xor    ebx,ebx
c00143e8:	83 ec 10             	sub    esp,0x10
c00143eb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00143ef:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00143f2:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00143f5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00143f8:	89 c2                	mov    edx,eax
c00143fa:	c1 e8 05             	shr    eax,0x5
c00143fd:	83 e2 1f             	and    edx,0x1f
c0014400:	42                   	inc    edx
c0014401:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0014407:	c1 e7 10             	shl    edi,0x10
c001440a:	88 d1                	mov    cl,dl
c001440c:	31 d2                	xor    edx,edx
c001440e:	f7 f5                	div    ebp
c0014410:	89 dd                	mov    ebp,ebx
c0014412:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014418:	88 d5                	mov    ch,dl
c001441a:	31 d2                	xor    edx,edx
c001441c:	0f b7 c1             	movzx  eax,cx
c001441f:	09 f8                	or     eax,edi
c0014421:	bf 3c 00 00 00       	mov    edi,0x3c
c0014426:	89 c1                	mov    ecx,eax
c0014428:	89 f0                	mov    eax,esi
c001442a:	f7 f7                	div    edi
c001442c:	c1 e2 10             	shl    edx,0x10
c001442f:	09 d5                	or     ebp,edx
c0014431:	31 d2                	xor    edx,edx
c0014433:	f7 f7                	div    edi
c0014435:	89 eb                	mov    ebx,ebp
c0014437:	bf 10 0e 00 00       	mov    edi,0xe10
c001443c:	89 f0                	mov    eax,esi
c001443e:	88 d7                	mov    bh,dl
c0014440:	31 d2                	xor    edx,edx
c0014442:	f7 f7                	div    edi
c0014444:	bf 18 00 00 00       	mov    edi,0x18
c0014449:	31 d2                	xor    edx,edx
c001444b:	f7 f7                	div    edi
c001444d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0014452:	88 d3                	mov    bl,dl
c0014454:	53                   	push   ebx
c0014455:	51                   	push   ecx
c0014456:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001445c:	e8 73 82 ff ff       	call   c000c6d4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014461:	83 c4 1c             	add    esp,0x1c
c0014464:	31 d2                	xor    edx,edx
c0014466:	5b                   	pop    ebx
c0014467:	5e                   	pop    esi
c0014468:	83 f0 01             	xor    eax,0x1
c001446b:	5f                   	pop    edi
c001446c:	0f b6 c0             	movzx  eax,al
c001446f:	5d                   	pop    ebp
c0014470:	c3                   	ret    

c0014471 <SysSymlink(regs*)>:
c0014471:	56                   	push   esi
c0014472:	83 c8 ff             	or     eax,0xffffffff
c0014475:	53                   	push   ebx
c0014476:	89 c2                	mov    edx,eax
c0014478:	81 ec 34 02 00 00    	sub    esp,0x234
c001447e:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014485:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014489:	74 50                	je     c00144db <SysSymlink(regs*)+0x6a>
c001448b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001448e:	85 c9                	test   ecx,ecx
c0014490:	74 49                	je     c00144db <SysSymlink(regs*)+0x6a>
c0014492:	6a 01                	push   0x1
c0014494:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014499:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001449c:	05 0c 01 00 00       	add    eax,0x10c
c00144a1:	50                   	push   eax
c00144a2:	51                   	push   ecx
c00144a3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00144a7:	56                   	push   esi
c00144a8:	e8 89 73 ff ff       	call   c000b836 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00144ad:	6a 01                	push   0x1
c00144af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144b7:	05 0c 01 00 00       	add    eax,0x10c
c00144bc:	50                   	push   eax
c00144bd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00144c0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00144c7:	53                   	push   ebx
c00144c8:	e8 69 73 ff ff       	call   c000b836 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00144cd:	83 c4 18             	add    esp,0x18
c00144d0:	56                   	push   esi
c00144d1:	53                   	push   ebx
c00144d2:	e8 6e 6f ff ff       	call   c000b445 <KeCreateSymlink(char const*, char const*)>
c00144d7:	83 c4 10             	add    esp,0x10
c00144da:	99                   	cdq    
c00144db:	81 c4 34 02 00 00    	add    esp,0x234
c00144e1:	5b                   	pop    ebx
c00144e2:	5e                   	pop    esi
c00144e3:	c3                   	ret    

c00144e4 <SysTimezone(regs*)>:
c00144e4:	53                   	push   ebx
c00144e5:	83 ec 08             	sub    esp,0x8
c00144e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144ec:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00144f0:	75 17                	jne    c0014509 <SysTimezone(regs*)+0x25>
c00144f2:	83 ec 0c             	sub    esp,0xc
c00144f5:	68 e9 27 02 c0       	push   0xc00227e9
c00144fa:	e8 2b 64 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00144ff:	83 c8 ff             	or     eax,0xffffffff
c0014502:	83 c4 10             	add    esp,0x10
c0014505:	89 c2                	mov    edx,eax
c0014507:	eb 20                	jmp    c0014529 <SysTimezone(regs*)+0x45>
c0014509:	83 ec 0c             	sub    esp,0xc
c001450c:	68 fe 27 02 c0       	push   0xc00227fe
c0014511:	e8 14 64 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0014516:	58                   	pop    eax
c0014517:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001451a:	e8 19 7f ff ff       	call   c000c438 <User::loadClockSettings(int)>
c001451f:	83 c4 10             	add    esp,0x10
c0014522:	b8 01 00 00 00       	mov    eax,0x1
c0014527:	31 d2                	xor    edx,edx
c0014529:	83 c4 08             	add    esp,0x8
c001452c:	5b                   	pop    ebx
c001452d:	c3                   	ret    

c001452e <SysTruncate(regs*)>:
c001452e:	55                   	push   ebp
c001452f:	57                   	push   edi
c0014530:	31 ff                	xor    edi,edi
c0014532:	56                   	push   esi
c0014533:	53                   	push   ebx
c0014534:	83 ec 0c             	sub    esp,0xc
c0014537:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001453b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001453e:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014542:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014545:	89 ce                	mov    esi,ecx
c0014547:	0f 84 9a 00 00 00    	je     c00145e7 <SysTruncate(regs*)+0xb9>
c001454d:	83 ec 0c             	sub    esp,0xc
c0014550:	68 14 01 00 00       	push   0x114
c0014555:	e8 99 35 ff ff       	call   c0007af3 <malloc>
c001455a:	83 c4 0c             	add    esp,0xc
c001455d:	89 c3                	mov    ebx,eax
c001455f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014564:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014567:	55                   	push   ebp
c0014568:	53                   	push   ebx
c0014569:	e8 d4 75 ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c001456e:	83 c4 10             	add    esp,0x10
c0014571:	31 d2                	xor    edx,edx
c0014573:	85 db                	test   ebx,ebx
c0014575:	b8 03 00 00 00       	mov    eax,0x3
c001457a:	0f 84 a2 00 00 00    	je     c0014622 <SysTruncate(regs*)+0xf4>
c0014580:	51                   	push   ecx
c0014581:	51                   	push   ecx
c0014582:	6a 02                	push   0x2
c0014584:	53                   	push   ebx
c0014585:	e8 d6 75 ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c001458a:	83 c4 10             	add    esp,0x10
c001458d:	85 c0                	test   eax,eax
c001458f:	74 13                	je     c00145a4 <SysTruncate(regs*)+0x76>
c0014591:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014593:	83 ec 0c             	sub    esp,0xc
c0014596:	53                   	push   ebx
c0014597:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001459a:	83 c4 10             	add    esp,0x10
c001459d:	b8 04 00 00 00       	mov    eax,0x4
c00145a2:	eb 7c                	jmp    c0014620 <SysTruncate(regs*)+0xf2>
c00145a4:	52                   	push   edx
c00145a5:	57                   	push   edi
c00145a6:	56                   	push   esi
c00145a7:	53                   	push   ebx
c00145a8:	e8 c7 76 ff ff       	call   c000bc74 <File::truncate(unsigned long long)>
c00145ad:	83 c4 10             	add    esp,0x10
c00145b0:	85 c0                	test   eax,eax
c00145b2:	74 1b                	je     c00145cf <SysTruncate(regs*)+0xa1>
c00145b4:	83 ec 0c             	sub    esp,0xc
c00145b7:	53                   	push   ebx
c00145b8:	e8 01 76 ff ff       	call   c000bbbe <File::close()>
c00145bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145c5:	83 c4 10             	add    esp,0x10
c00145c8:	b8 05 00 00 00       	mov    eax,0x5
c00145cd:	eb 51                	jmp    c0014620 <SysTruncate(regs*)+0xf2>
c00145cf:	83 ec 0c             	sub    esp,0xc
c00145d2:	53                   	push   ebx
c00145d3:	e8 e6 75 ff ff       	call   c000bbbe <File::close()>
c00145d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145e0:	83 c4 10             	add    esp,0x10
c00145e3:	31 c0                	xor    eax,eax
c00145e5:	eb 39                	jmp    c0014620 <SysTruncate(regs*)+0xf2>
c00145e7:	31 d2                	xor    edx,edx
c00145e9:	83 fd 02             	cmp    ebp,0x2
c00145ec:	b8 01 00 00 00       	mov    eax,0x1
c00145f1:	7e 2f                	jle    c0014622 <SysTruncate(regs*)+0xf4>
c00145f3:	83 ec 0c             	sub    esp,0xc
c00145f6:	51                   	push   ecx
c00145f7:	e8 bf 4e ff ff       	call   c00094bb <KeGetFileFromDescriptor(int)>
c00145fc:	83 c4 10             	add    esp,0x10
c00145ff:	31 d2                	xor    edx,edx
c0014601:	89 c1                	mov    ecx,eax
c0014603:	b8 02 00 00 00       	mov    eax,0x2
c0014608:	85 c9                	test   ecx,ecx
c001460a:	74 16                	je     c0014622 <SysTruncate(regs*)+0xf4>
c001460c:	50                   	push   eax
c001460d:	57                   	push   edi
c001460e:	56                   	push   esi
c001460f:	51                   	push   ecx
c0014610:	e8 5f 76 ff ff       	call   c000bc74 <File::truncate(unsigned long long)>
c0014615:	83 c4 10             	add    esp,0x10
c0014618:	85 c0                	test   eax,eax
c001461a:	0f 95 c0             	setne  al
c001461d:	0f b6 c0             	movzx  eax,al
c0014620:	31 d2                	xor    edx,edx
c0014622:	83 c4 0c             	add    esp,0xc
c0014625:	5b                   	pop    ebx
c0014626:	5e                   	pop    esi
c0014627:	5f                   	pop    edi
c0014628:	5d                   	pop    ebp
c0014629:	c3                   	ret    

c001462a <SysWrite(regs*)>:
c001462a:	57                   	push   edi
c001462b:	56                   	push   esi
c001462c:	53                   	push   ebx
c001462d:	83 ec 10             	sub    esp,0x10
c0014630:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014634:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014637:	83 f8 02             	cmp    eax,0x2
c001463a:	77 10                	ja     c001464c <SysWrite(regs*)+0x22>
c001463c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014641:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014644:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001464a:	eb 0e                	jmp    c001465a <SysWrite(regs*)+0x30>
c001464c:	83 ec 0c             	sub    esp,0xc
c001464f:	50                   	push   eax
c0014650:	e8 66 4e ff ff       	call   c00094bb <KeGetFileFromDescriptor(int)>
c0014655:	83 c4 10             	add    esp,0x10
c0014658:	89 c1                	mov    ecx,eax
c001465a:	83 c8 ff             	or     eax,0xffffffff
c001465d:	85 c9                	test   ecx,ecx
c001465f:	89 c2                	mov    edx,eax
c0014661:	74 28                	je     c001468b <SysWrite(regs*)+0x61>
c0014663:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001466b:	83 ec 0c             	sub    esp,0xc
c001466e:	31 ff                	xor    edi,edi
c0014670:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014674:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014676:	52                   	push   edx
c0014677:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001467a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001467d:	57                   	push   edi
c001467e:	56                   	push   esi
c001467f:	51                   	push   ecx
c0014680:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014683:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014687:	83 c4 20             	add    esp,0x20
c001468a:	99                   	cdq    
c001468b:	83 c4 10             	add    esp,0x10
c001468e:	5b                   	pop    ebx
c001468f:	5e                   	pop    esi
c0014690:	5f                   	pop    edi
c0014691:	c3                   	ret    

c0014692 <SysWsbe(regs*)>:
c0014692:	57                   	push   edi
c0014693:	b9 0b 00 00 00       	mov    ecx,0xb
c0014698:	56                   	push   esi
c0014699:	be 3d 28 02 c0       	mov    esi,0xc002283d
c001469e:	53                   	push   ebx
c001469f:	83 ec 30             	sub    esp,0x30
c00146a2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00146a6:	fc                   	cld    
c00146a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00146a9:	83 ec 0c             	sub    esp,0xc
c00146ac:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00146b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146b8:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00146be:	8b 06                	mov    eax,DWORD PTR [esi]
c00146c0:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00146c3:	57                   	push   edi
c00146c4:	e8 b7 be fe ff       	call   c0000580 <strlen>
c00146c9:	5a                   	pop    edx
c00146ca:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00146ce:	52                   	push   edx
c00146cf:	31 d2                	xor    edx,edx
c00146d1:	57                   	push   edi
c00146d2:	52                   	push   edx
c00146d3:	50                   	push   eax
c00146d4:	56                   	push   esi
c00146d5:	ff d3                	call   ebx
c00146d7:	83 c4 14             	add    esp,0x14
c00146da:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00146de:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00146e1:	e8 a6 23 00 00       	call   c0016a8c <terminateTask(int)>
c00146e6:	83 c4 40             	add    esp,0x40
c00146e9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00146ee:	5b                   	pop    ebx
c00146ef:	31 d2                	xor    edx,edx
c00146f1:	5e                   	pop    esi
c00146f2:	5f                   	pop    edi
c00146f3:	c3                   	ret    

c00146f4 <SysYield(regs*)>:
c00146f4:	83 ec 0c             	sub    esp,0xc
c00146f7:	fa                   	cli    
c00146f8:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00146fe:	e8 09 1a 00 00       	call   c001610c <schedule()>
c0014703:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014708:	48                   	dec    eax
c0014709:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001470e:	75 01                	jne    c0014711 <SysYield(regs*)+0x1d>
c0014710:	fb                   	sti    
c0014711:	31 c0                	xor    eax,eax
c0014713:	31 d2                	xor    edx,edx
c0014715:	83 c4 0c             	add    esp,0xc
c0014718:	c3                   	ret    

c0014719 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014719:	55                   	push   ebp
c001471a:	57                   	push   edi
c001471b:	56                   	push   esi
c001471c:	53                   	push   ebx
c001471d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014723:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001472e:	74 3b                	je     c001476b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014730:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014738:	74 31                	je     c001476b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001473a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014742:	75 27                	jne    c001476b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014744:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001474b:	05 00 10 00 00       	add    eax,0x1000
c0014750:	89 c2                	mov    edx,eax
c0014752:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014757:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001475e:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014764:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001476b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014772:	83 ec 0c             	sub    esp,0xc
c0014775:	6a 01                	push   0x1
c0014777:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001477d:	e8 93 4e ff ff       	call   c0009615 <Virt::allocateKernelVirtualPages(int)>
c0014782:	83 c4 10             	add    esp,0x10
c0014785:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001478b:	89 c3                	mov    ebx,eax
c001478d:	0f 86 26 01 00 00    	jbe    c00148b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0014793:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001479b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00147a2:	c1 ee 0c             	shr    esi,0xc
c00147a5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00147a9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00147b0:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00147b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147bb:	29 ef                	sub    edi,ebp
c00147bd:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00147c1:	0f 83 f9 00 00 00    	jae    c00148c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00147c7:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00147cd:	b8 00 10 00 00       	mov    eax,0x1000
c00147d2:	0f 47 f8             	cmova  edi,eax
c00147d5:	83 ec 0c             	sub    esp,0xc
c00147d8:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00147df:	31 d2                	xor    edx,edx
c00147e1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00147e3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00147e7:	50                   	push   eax
c00147e8:	8d 74 24 30          	lea    esi,[esp+0x30]
c00147ec:	56                   	push   esi
c00147ed:	52                   	push   edx
c00147ee:	57                   	push   edi
c00147ef:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00147f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147f9:	83 c4 20             	add    esp,0x20
c00147fc:	85 c0                	test   eax,eax
c00147fe:	75 06                	jne    c0014806 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014800:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014804:	74 13                	je     c0014819 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0014806:	83 ec 0c             	sub    esp,0xc
c0014809:	53                   	push   ebx
c001480a:	e8 1a 51 ff ff       	call   c0009929 <Virt::freeKernelVirtualPages(unsigned long)>
c001480f:	83 c4 10             	add    esp,0x10
c0014812:	31 c0                	xor    eax,eax
c0014814:	e9 7c 01 00 00       	jmp    c0014995 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0014819:	fa                   	cli    
c001481a:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014820:	e8 dd 35 ff ff       	call   c0007e02 <Phys::allocatePage()>
c0014825:	6a 07                	push   0x7
c0014827:	53                   	push   ebx
c0014828:	50                   	push   eax
c0014829:	89 c7                	mov    edi,eax
c001482b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014830:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014833:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014839:	e8 e0 54 ff ff       	call   c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)>
c001483e:	83 c4 0c             	add    esp,0xc
c0014841:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014848:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001484e:	6a 00                	push   0x0
c0014850:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014855:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014858:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001485e:	e8 21 53 ff ff       	call   c0009b84 <VAS::mapOtherVASIn(bool, VAS*)>
c0014863:	58                   	pop    eax
c0014864:	5a                   	pop    edx
c0014865:	68 07 0c 00 00       	push   0xc07
c001486a:	55                   	push   ebp
c001486b:	57                   	push   edi
c001486c:	89 df                	mov    edi,ebx
c001486e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014875:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001487b:	6a 00                	push   0x0
c001487d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014882:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014885:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001488b:	e8 f2 56 ff ff       	call   c0009f82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014890:	b9 00 10 00 00       	mov    ecx,0x1000
c0014895:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014897:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001489c:	83 c4 20             	add    esp,0x20
c001489f:	48                   	dec    eax
c00148a0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00148a5:	85 c0                	test   eax,eax
c00148a7:	75 01                	jne    c00148aa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00148a9:	fb                   	sti    
c00148aa:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00148ae:	81 c5 00 10 00 00    	add    ebp,0x1000
c00148b4:	e9 f0 fe ff ff       	jmp    c00147a9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00148b9:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00148c0:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00148c7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00148cd:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00148d3:	0f 86 ae 00 00 00    	jbe    c0014987 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00148d9:	fa                   	cli    
c00148da:	51                   	push   ecx
c00148db:	31 ff                	xor    edi,edi
c00148dd:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00148e4:	c1 ee 0c             	shr    esi,0xc
c00148e7:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00148ed:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148f3:	6a 00                	push   0x0
c00148f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148fd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014903:	e8 7c 52 ff ff       	call   c0009b84 <VAS::mapOtherVASIn(bool, VAS*)>
c0014908:	83 c4 10             	add    esp,0x10
c001490b:	e8 f2 34 ff ff       	call   c0007e02 <Phys::allocatePage()>
c0014910:	47                   	inc    edi
c0014911:	6a 07                	push   0x7
c0014913:	53                   	push   ebx
c0014914:	50                   	push   eax
c0014915:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014919:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001491f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014922:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014928:	e8 f1 53 ff ff       	call   c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)>
c001492d:	58                   	pop    eax
c001492e:	5a                   	pop    edx
c001492f:	68 07 0c 00 00       	push   0xc07
c0014934:	55                   	push   ebp
c0014935:	81 c5 00 10 00 00    	add    ebp,0x1000
c001493b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001493f:	50                   	push   eax
c0014940:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014947:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001494d:	6a 00                	push   0x0
c001494f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014954:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014957:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001495d:	e8 20 56 ff ff       	call   c0009f82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014962:	83 c4 1c             	add    esp,0x1c
c0014965:	68 00 10 00 00       	push   0x1000
c001496a:	6a 00                	push   0x0
c001496c:	53                   	push   ebx
c001496d:	e8 7e bb fe ff       	call   c00004f0 <memset>
c0014972:	83 c4 10             	add    esp,0x10
c0014975:	39 fe                	cmp    esi,edi
c0014977:	77 92                	ja     c001490b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0014979:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001497e:	48                   	dec    eax
c001497f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014984:	75 01                	jne    c0014987 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014986:	fb                   	sti    
c0014987:	83 ec 0c             	sub    esp,0xc
c001498a:	53                   	push   ebx
c001498b:	e8 99 4f ff ff       	call   c0009929 <Virt::freeKernelVirtualPages(unsigned long)>
c0014990:	83 c4 10             	add    esp,0x10
c0014993:	b0 01                	mov    al,0x1
c0014995:	81 c4 2c 10 00 00    	add    esp,0x102c
c001499b:	5b                   	pop    ebx
c001499c:	5e                   	pop    esi
c001499d:	5f                   	pop    edi
c001499e:	5d                   	pop    ebp
c001499f:	c3                   	ret    

c00149a0 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00149a0:	55                   	push   ebp
c00149a1:	57                   	push   edi
c00149a2:	56                   	push   esi
c00149a3:	53                   	push   ebx
c00149a4:	83 ec 48             	sub    esp,0x48
c00149a7:	68 14 01 00 00       	push   0x114
c00149ac:	e8 42 31 ff ff       	call   c0007af3 <malloc>
c00149b1:	83 c4 0c             	add    esp,0xc
c00149b4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00149b8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00149bc:	89 c7                	mov    edi,eax
c00149be:	50                   	push   eax
c00149bf:	e8 7e 71 ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c00149c4:	58                   	pop    eax
c00149c5:	5a                   	pop    edx
c00149c6:	6a 01                	push   0x1
c00149c8:	57                   	push   edi
c00149c9:	e8 92 71 ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c00149ce:	83 c4 10             	add    esp,0x10
c00149d1:	85 c0                	test   eax,eax
c00149d3:	0f 85 4c 01 00 00    	jne    c0014b25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149d9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00149e1:	83 ec 0c             	sub    esp,0xc
c00149e4:	6a 34                	push   0x34
c00149e6:	e8 08 31 ff ff       	call   c0007af3 <malloc>
c00149eb:	89 c3                	mov    ebx,eax
c00149ed:	58                   	pop    eax
c00149ee:	8b 07                	mov    eax,DWORD PTR [edi]
c00149f0:	8d 74 24 38          	lea    esi,[esp+0x38]
c00149f4:	56                   	push   esi
c00149f5:	53                   	push   ebx
c00149f6:	6a 00                	push   0x0
c00149f8:	6a 34                	push   0x34
c00149fa:	57                   	push   edi
c00149fb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149fe:	83 c4 20             	add    esp,0x20
c0014a01:	85 c0                	test   eax,eax
c0014a03:	0f 85 1c 01 00 00    	jne    c0014b25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a09:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014a0f:	0f 85 10 01 00 00    	jne    c0014b25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a15:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a18:	85 c0                	test   eax,eax
c0014a1a:	0f 84 05 01 00 00    	je     c0014b25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a20:	31 d2                	xor    edx,edx
c0014a22:	55                   	push   ebp
c0014a23:	52                   	push   edx
c0014a24:	50                   	push   eax
c0014a25:	57                   	push   edi
c0014a26:	e8 f3 71 ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0014a2b:	83 c4 10             	add    esp,0x10
c0014a2e:	85 c0                	test   eax,eax
c0014a30:	0f 85 ef 00 00 00    	jne    c0014b25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a36:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014a39:	83 ec 0c             	sub    esp,0xc
c0014a3c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a40:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014a44:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a48:	0f af c2             	imul   eax,edx
c0014a4b:	50                   	push   eax
c0014a4c:	e8 a2 30 ff ff       	call   c0007af3 <malloc>
c0014a51:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014a53:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014a5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a5e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a62:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a66:	0f af c2             	imul   eax,edx
c0014a69:	99                   	cdq    
c0014a6a:	52                   	push   edx
c0014a6b:	50                   	push   eax
c0014a6c:	57                   	push   edi
c0014a6d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a70:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014a73:	83 c4 20             	add    esp,0x20
c0014a76:	85 c0                	test   eax,eax
c0014a78:	0f 84 a7 00 00 00    	je     c0014b25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a7e:	31 d2                	xor    edx,edx
c0014a80:	51                   	push   ecx
c0014a81:	52                   	push   edx
c0014a82:	50                   	push   eax
c0014a83:	57                   	push   edi
c0014a84:	e8 95 71 ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0014a89:	83 c4 10             	add    esp,0x10
c0014a8c:	85 c0                	test   eax,eax
c0014a8e:	0f 85 91 00 00 00    	jne    c0014b25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a94:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a98:	83 ec 0c             	sub    esp,0xc
c0014a9b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a9f:	0f af c2             	imul   eax,edx
c0014aa2:	50                   	push   eax
c0014aa3:	e8 4b 30 ff ff       	call   c0007af3 <malloc>
c0014aa8:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014aaa:	89 34 24             	mov    DWORD PTR [esp],esi
c0014aad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ab5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014ab9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014abd:	0f af c2             	imul   eax,edx
c0014ac0:	99                   	cdq    
c0014ac1:	52                   	push   edx
c0014ac2:	50                   	push   eax
c0014ac3:	57                   	push   edi
c0014ac4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ac7:	83 c4 20             	add    esp,0x20
c0014aca:	31 c9                	xor    ecx,ecx
c0014acc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014ad4:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014ad8:	0f b7 e9             	movzx  ebp,cx
c0014adb:	0f 83 86 00 00 00    	jae    c0014b67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014ae1:	c1 e5 05             	shl    ebp,0x5
c0014ae4:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014ae8:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014aec:	75 73                	jne    c0014b61 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014aee:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014af2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af5:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014afc:	52                   	push   edx
c0014afd:	31 d2                	xor    edx,edx
c0014aff:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014b02:	52                   	push   edx
c0014b03:	50                   	push   eax
c0014b04:	57                   	push   edi
c0014b05:	e8 14 71 ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0014b0a:	83 c4 10             	add    esp,0x10
c0014b0d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014b11:	85 c0                	test   eax,eax
c0014b13:	74 17                	je     c0014b2c <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014b15:	83 ec 0c             	sub    esp,0xc
c0014b18:	68 69 28 02 c0       	push   0xc0022869
c0014b1d:	e8 08 5e ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0014b22:	83 c4 10             	add    esp,0x10
c0014b25:	31 c0                	xor    eax,eax
c0014b27:	e9 8b 00 00 00       	jmp    c0014bb7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014b2c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014b30:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014b33:	83 ec 0c             	sub    esp,0xc
c0014b36:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014b39:	50                   	push   eax
c0014b3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014b3e:	56                   	push   esi
c0014b3f:	57                   	push   edi
c0014b40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014b44:	e8 d0 fb ff ff       	call   c0014719 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014b49:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014b4d:	83 c4 20             	add    esp,0x20
c0014b50:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014b54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014b58:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014b5d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014b61:	41                   	inc    ecx
c0014b62:	e9 6d ff ff ff       	jmp    c0014ad4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014b67:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014b6b:	83 ec 0c             	sub    esp,0xc
c0014b6e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014b72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b76:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014b7c:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014b82:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b87:	05 00 10 00 00       	add    eax,0x1000
c0014b8c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014b8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b93:	e8 6b 2f ff ff       	call   c0007b03 <free>
c0014b98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b9b:	e8 63 2f ff ff       	call   c0007b03 <free>
c0014ba0:	58                   	pop    eax
c0014ba1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ba5:	e8 59 2f ff ff       	call   c0007b03 <free>
c0014baa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014bad:	e8 0c 70 ff ff       	call   c000bbbe <File::close()>
c0014bb2:	83 c4 10             	add    esp,0x10
c0014bb5:	b0 01                	mov    al,0x1
c0014bb7:	83 c4 3c             	add    esp,0x3c
c0014bba:	5b                   	pop    ebx
c0014bbb:	5e                   	pop    esi
c0014bbc:	5f                   	pop    edi
c0014bbd:	5d                   	pop    ebp
c0014bbe:	c3                   	ret    

c0014bbf <Thr::runtimeReferenceHelper()>:
c0014bbf:	83 ec 18             	sub    esp,0x18
c0014bc2:	68 71 28 02 c0       	push   0xc0022871
c0014bc7:	e8 5e 5d ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0014bcc:	fa                   	cli    
c0014bcd:	83 c4 10             	add    esp,0x10
c0014bd0:	eb fe                	jmp    c0014bd0 <Thr::runtimeReferenceHelper()+0x11>

c0014bd2 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014bd2:	57                   	push   edi
c0014bd3:	56                   	push   esi
c0014bd4:	53                   	push   ebx
c0014bd5:	31 db                	xor    ebx,ebx
c0014bd7:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014bdd:	7e 3c                	jle    c0014c1b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014bdf:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014be6:	31 ff                	xor    edi,edi
c0014be8:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014bef:	7e 27                	jle    c0014c18 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014bf1:	50                   	push   eax
c0014bf2:	50                   	push   eax
c0014bf3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bf7:	8b 06                	mov    eax,DWORD PTR [esi]
c0014bf9:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014c00:	50                   	push   eax
c0014c01:	e8 7a bb fe ff       	call   c0000780 <strcmp>
c0014c06:	83 c4 10             	add    esp,0x10
c0014c09:	85 c0                	test   eax,eax
c0014c0b:	75 05                	jne    c0014c12 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014c0d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c10:	eb 0b                	jmp    c0014c1d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014c12:	83 c6 10             	add    esi,0x10
c0014c15:	47                   	inc    edi
c0014c16:	eb d0                	jmp    c0014be8 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014c18:	43                   	inc    ebx
c0014c19:	eb bc                	jmp    c0014bd7 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014c1b:	31 c0                	xor    eax,eax
c0014c1d:	5b                   	pop    ebx
c0014c1e:	5e                   	pop    esi
c0014c1f:	5f                   	pop    edi
c0014c20:	c3                   	ret    

c0014c21 <Thr::loadKernelSymbolTable(char const*)>:
c0014c21:	55                   	push   ebp
c0014c22:	57                   	push   edi
c0014c23:	56                   	push   esi
c0014c24:	53                   	push   ebx
c0014c25:	83 ec 68             	sub    esp,0x68
c0014c28:	68 14 01 00 00       	push   0x114
c0014c2d:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014c33:	e8 bb 2e ff ff       	call   c0007af3 <malloc>
c0014c38:	83 c4 0c             	add    esp,0xc
c0014c3b:	56                   	push   esi
c0014c3c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c40:	89 c3                	mov    ebx,eax
c0014c42:	50                   	push   eax
c0014c43:	e8 fa 6e ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c0014c48:	5e                   	pop    esi
c0014c49:	5f                   	pop    edi
c0014c4a:	6a 01                	push   0x1
c0014c4c:	53                   	push   ebx
c0014c4d:	e8 0e 6f ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c0014c52:	83 c4 10             	add    esp,0x10
c0014c55:	85 c0                	test   eax,eax
c0014c57:	74 0a                	je     c0014c63 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014c59:	83 ec 0c             	sub    esp,0xc
c0014c5c:	68 93 28 02 c0       	push   0xc0022893
c0014c61:	eb 34                	jmp    c0014c97 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014c63:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014c6b:	83 ec 0c             	sub    esp,0xc
c0014c6e:	6a 34                	push   0x34
c0014c70:	e8 7e 2e ff ff       	call   c0007af3 <malloc>
c0014c75:	59                   	pop    ecx
c0014c76:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014c7a:	89 c7                	mov    edi,eax
c0014c7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c7e:	56                   	push   esi
c0014c7f:	57                   	push   edi
c0014c80:	6a 00                	push   0x0
c0014c82:	6a 34                	push   0x34
c0014c84:	53                   	push   ebx
c0014c85:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c88:	83 c4 20             	add    esp,0x20
c0014c8b:	85 c0                	test   eax,eax
c0014c8d:	74 17                	je     c0014ca6 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014c8f:	83 ec 0c             	sub    esp,0xc
c0014c92:	68 aa 28 02 c0       	push   0xc00228aa
c0014c97:	e8 43 c9 ff ff       	call   c00115df <KePanic(char const*)>
c0014c9c:	83 c4 10             	add    esp,0x10
c0014c9f:	31 c0                	xor    eax,eax
c0014ca1:	e9 31 02 00 00       	jmp    c0014ed7 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014ca6:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014cac:	75 e1                	jne    c0014c8f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014cae:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014cb1:	85 c0                	test   eax,eax
c0014cb3:	74 da                	je     c0014c8f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014cb5:	52                   	push   edx
c0014cb6:	31 d2                	xor    edx,edx
c0014cb8:	52                   	push   edx
c0014cb9:	50                   	push   eax
c0014cba:	53                   	push   ebx
c0014cbb:	e8 5e 6f ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0014cc0:	83 c4 10             	add    esp,0x10
c0014cc3:	85 c0                	test   eax,eax
c0014cc5:	75 c8                	jne    c0014c8f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014cc7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014ccb:	83 ec 0c             	sub    esp,0xc
c0014cce:	31 ed                	xor    ebp,ebp
c0014cd0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014cd4:	0f af c2             	imul   eax,edx
c0014cd7:	50                   	push   eax
c0014cd8:	e8 16 2e ff ff       	call   c0007af3 <malloc>
c0014cdd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014cdf:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ce2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ce6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014cea:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014cee:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014cf2:	0f af c2             	imul   eax,edx
c0014cf5:	99                   	cdq    
c0014cf6:	52                   	push   edx
c0014cf7:	50                   	push   eax
c0014cf8:	53                   	push   ebx
c0014cf9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014cfc:	83 c4 20             	add    esp,0x20
c0014cff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d07:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d0f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014d17:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d1f:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014d23:	0f b7 f5             	movzx  esi,bp
c0014d26:	0f 83 a7 00 00 00    	jae    c0014dd3 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014d2c:	6b f6 28             	imul   esi,esi,0x28
c0014d2f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014d33:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014d36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d3a:	50                   	push   eax
c0014d3b:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014d3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d43:	8b 16                	mov    edx,DWORD PTR [esi]
c0014d45:	6b c0 28             	imul   eax,eax,0x28
c0014d48:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014d4c:	89 d0                	mov    eax,edx
c0014d4e:	31 d2                	xor    edx,edx
c0014d50:	52                   	push   edx
c0014d51:	50                   	push   eax
c0014d52:	53                   	push   ebx
c0014d53:	e8 c6 6e ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0014d58:	83 c4 0c             	add    esp,0xc
c0014d5b:	6a 20                	push   0x20
c0014d5d:	6a 00                	push   0x0
c0014d5f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d63:	52                   	push   edx
c0014d64:	e8 87 b7 fe ff       	call   c00004f0 <memset>
c0014d69:	58                   	pop    eax
c0014d6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d6c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014d70:	51                   	push   ecx
c0014d71:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014d75:	52                   	push   edx
c0014d76:	6a 00                	push   0x0
c0014d78:	6a 1f                	push   0x1f
c0014d7a:	53                   	push   ebx
c0014d7b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d7e:	83 c4 18             	add    esp,0x18
c0014d81:	68 c1 28 02 c0       	push   0xc00228c1
c0014d86:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d8a:	52                   	push   edx
c0014d8b:	e8 f0 b9 fe ff       	call   c0000780 <strcmp>
c0014d90:	83 c4 10             	add    esp,0x10
c0014d93:	85 c0                	test   eax,eax
c0014d95:	75 0f                	jne    c0014da6 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014d97:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014da2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014da6:	50                   	push   eax
c0014da7:	50                   	push   eax
c0014da8:	68 c9 28 02 c0       	push   0xc00228c9
c0014dad:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014db1:	50                   	push   eax
c0014db2:	e8 c9 b9 fe ff       	call   c0000780 <strcmp>
c0014db7:	83 c4 10             	add    esp,0x10
c0014dba:	85 c0                	test   eax,eax
c0014dbc:	75 0f                	jne    c0014dcd <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014dbe:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014dc1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014dc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014dc9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014dcd:	45                   	inc    ebp
c0014dce:	e9 4c ff ff ff       	jmp    c0014d1f <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014dd3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014dd8:	75 10                	jne    c0014dea <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014dda:	83 ec 0c             	sub    esp,0xc
c0014ddd:	68 d1 28 02 c0       	push   0xc00228d1
c0014de2:	e8 f8 c7 ff ff       	call   c00115df <KePanic(char const*)>
c0014de7:	83 c4 10             	add    esp,0x10
c0014dea:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014def:	75 10                	jne    c0014e01 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014df1:	83 ec 0c             	sub    esp,0xc
c0014df4:	68 d1 28 02 c0       	push   0xc00228d1
c0014df9:	e8 e1 c7 ff ff       	call   c00115df <KePanic(char const*)>
c0014dfe:	83 c4 10             	add    esp,0x10
c0014e01:	50                   	push   eax
c0014e02:	31 d2                	xor    edx,edx
c0014e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e08:	52                   	push   edx
c0014e09:	50                   	push   eax
c0014e0a:	53                   	push   ebx
c0014e0b:	e8 0e 6e ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0014e10:	5a                   	pop    edx
c0014e11:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e15:	e8 d9 2c ff ff       	call   c0007af3 <malloc>
c0014e1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e1e:	31 c9                	xor    ecx,ecx
c0014e20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e26:	5e                   	pop    esi
c0014e27:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014e2b:	55                   	push   ebp
c0014e2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e30:	51                   	push   ecx
c0014e31:	52                   	push   edx
c0014e32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014e36:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014e3a:	53                   	push   ebx
c0014e3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e3e:	83 c4 14             	add    esp,0x14
c0014e41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014e45:	e8 a9 2c ff ff       	call   c0007af3 <malloc>
c0014e4a:	89 c6                	mov    esi,eax
c0014e4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e4e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e51:	56                   	push   esi
c0014e52:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014e56:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014e5a:	51                   	push   ecx
c0014e5b:	52                   	push   edx
c0014e5c:	53                   	push   ebx
c0014e5d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e64:	83 c4 1c             	add    esp,0x1c
c0014e67:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014e6d:	c1 e8 04             	shr    eax,0x4
c0014e70:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014e77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e7b:	31 d2                	xor    edx,edx
c0014e7d:	52                   	push   edx
c0014e7e:	50                   	push   eax
c0014e7f:	53                   	push   ebx
c0014e80:	e8 99 6d ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0014e85:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e87:	31 d2                	xor    edx,edx
c0014e89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e8c:	56                   	push   esi
c0014e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e91:	52                   	push   edx
c0014e92:	50                   	push   eax
c0014e93:	53                   	push   ebx
c0014e94:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e97:	83 c4 14             	add    esp,0x14
c0014e9a:	53                   	push   ebx
c0014e9b:	e8 1e 6d ff ff       	call   c000bbbe <File::close()>
c0014ea0:	5d                   	pop    ebp
c0014ea1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ea5:	e8 59 2c ff ff       	call   c0007b03 <free>
c0014eaa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014ead:	e8 51 2c ff ff       	call   c0007b03 <free>
c0014eb2:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014eb7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014ebb:	83 c4 10             	add    esp,0x10
c0014ebe:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014ec5:	8d 50 01             	lea    edx,[eax+0x1]
c0014ec8:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014ecf:	b0 01                	mov    al,0x1
c0014ed1:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014ed7:	83 c4 5c             	add    esp,0x5c
c0014eda:	5b                   	pop    ebx
c0014edb:	5e                   	pop    esi
c0014edc:	5f                   	pop    edi
c0014edd:	5d                   	pop    ebp
c0014ede:	c3                   	ret    

c0014edf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014edf:	55                   	push   ebp
c0014ee0:	57                   	push   edi
c0014ee1:	56                   	push   esi
c0014ee2:	53                   	push   ebx
c0014ee3:	81 ec 68 03 00 00    	sub    esp,0x368
c0014ee9:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014ef0:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014ef6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014efa:	68 14 01 00 00       	push   0x114
c0014eff:	e8 ef 2b ff ff       	call   c0007af3 <malloc>
c0014f04:	83 c4 0c             	add    esp,0xc
c0014f07:	56                   	push   esi
c0014f08:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014f0f:	50                   	push   eax
c0014f10:	89 c3                	mov    ebx,eax
c0014f12:	e8 2b 6c ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c0014f17:	5f                   	pop    edi
c0014f18:	5d                   	pop    ebp
c0014f19:	6a 01                	push   0x1
c0014f1b:	53                   	push   ebx
c0014f1c:	e8 3f 6c ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c0014f21:	83 c4 10             	add    esp,0x10
c0014f24:	85 c0                	test   eax,eax
c0014f26:	0f 85 b3 06 00 00    	jne    c00155df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f2c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014f34:	83 ec 0c             	sub    esp,0xc
c0014f37:	6a 34                	push   0x34
c0014f39:	e8 b5 2b ff ff       	call   c0007af3 <malloc>
c0014f3e:	5e                   	pop    esi
c0014f3f:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014f43:	89 c5                	mov    ebp,eax
c0014f45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f47:	56                   	push   esi
c0014f48:	55                   	push   ebp
c0014f49:	6a 00                	push   0x0
c0014f4b:	6a 34                	push   0x34
c0014f4d:	53                   	push   ebx
c0014f4e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f51:	83 c4 20             	add    esp,0x20
c0014f54:	85 c0                	test   eax,eax
c0014f56:	0f 85 83 06 00 00    	jne    c00155df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f5c:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014f63:	0f 85 76 06 00 00    	jne    c00155df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f69:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014f6c:	85 c0                	test   eax,eax
c0014f6e:	0f 84 6b 06 00 00    	je     c00155df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f74:	31 d2                	xor    edx,edx
c0014f76:	51                   	push   ecx
c0014f77:	52                   	push   edx
c0014f78:	50                   	push   eax
c0014f79:	53                   	push   ebx
c0014f7a:	e8 9f 6c ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0014f7f:	83 c4 10             	add    esp,0x10
c0014f82:	85 c0                	test   eax,eax
c0014f84:	0f 85 55 06 00 00    	jne    c00155df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f8a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014f8d:	83 ec 0c             	sub    esp,0xc
c0014f90:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014f94:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014f98:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f9c:	0f af c2             	imul   eax,edx
c0014f9f:	50                   	push   eax
c0014fa0:	e8 4e 2b ff ff       	call   c0007af3 <malloc>
c0014fa5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014fa7:	89 34 24             	mov    DWORD PTR [esp],esi
c0014faa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014fae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fb2:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014fb6:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014fba:	0f af c2             	imul   eax,edx
c0014fbd:	99                   	cdq    
c0014fbe:	52                   	push   edx
c0014fbf:	50                   	push   eax
c0014fc0:	53                   	push   ebx
c0014fc1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fc4:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014fc7:	83 c4 20             	add    esp,0x20
c0014fca:	85 c0                	test   eax,eax
c0014fcc:	0f 84 0d 06 00 00    	je     c00155df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fd2:	52                   	push   edx
c0014fd3:	31 d2                	xor    edx,edx
c0014fd5:	52                   	push   edx
c0014fd6:	50                   	push   eax
c0014fd7:	53                   	push   ebx
c0014fd8:	e8 41 6c ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0014fdd:	83 c4 10             	add    esp,0x10
c0014fe0:	85 c0                	test   eax,eax
c0014fe2:	0f 85 f7 05 00 00    	jne    c00155df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fe8:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014fec:	83 ec 0c             	sub    esp,0xc
c0014fef:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014ff3:	0f af c2             	imul   eax,edx
c0014ff6:	50                   	push   eax
c0014ff7:	e8 f7 2a ff ff       	call   c0007af3 <malloc>
c0014ffc:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ffe:	89 34 24             	mov    DWORD PTR [esp],esi
c0015001:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015005:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015009:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001500d:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015011:	0f af c2             	imul   eax,edx
c0015014:	99                   	cdq    
c0015015:	52                   	push   edx
c0015016:	50                   	push   eax
c0015017:	53                   	push   ebx
c0015018:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001501b:	83 c4 20             	add    esp,0x20
c001501e:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0015024:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015027:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c001502b:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c001502f:	73 78                	jae    c00150a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0015031:	c1 e7 05             	shl    edi,0x5
c0015034:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0015038:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001503b:	75 63                	jne    c00150a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c001503d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015040:	31 d2                	xor    edx,edx
c0015042:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0015045:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015049:	50                   	push   eax
c001504a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001504d:	52                   	push   edx
c001504e:	50                   	push   eax
c001504f:	53                   	push   ebx
c0015050:	e8 c9 6b ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0015055:	83 c4 10             	add    esp,0x10
c0015058:	85 c0                	test   eax,eax
c001505a:	0f 85 7f 05 00 00    	jne    c00155df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015060:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015067:	83 ec 0c             	sub    esp,0xc
c001506a:	31 d2                	xor    edx,edx
c001506c:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0015070:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015072:	01 c6                	add    esi,eax
c0015074:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001507b:	50                   	push   eax
c001507c:	56                   	push   esi
c001507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015081:	52                   	push   edx
c0015082:	50                   	push   eax
c0015083:	53                   	push   ebx
c0015084:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015087:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001508a:	83 c4 1c             	add    esp,0x1c
c001508d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015090:	50                   	push   eax
c0015091:	6a 00                	push   0x0
c0015093:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0015097:	56                   	push   esi
c0015098:	e8 53 b4 fe ff       	call   c00004f0 <memset>
c001509d:	83 c4 10             	add    esp,0x10
c00150a0:	66 ff 04 24          	inc    WORD PTR [esp]
c00150a4:	e9 7b ff ff ff       	jmp    c0015024 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c00150a9:	50                   	push   eax
c00150aa:	68 00 01 00 00       	push   0x100
c00150af:	6a 00                	push   0x0
c00150b1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00150b5:	50                   	push   eax
c00150b6:	e8 35 b4 fe ff       	call   c00004f0 <memset>
c00150bb:	83 c4 0c             	add    esp,0xc
c00150be:	68 00 01 00 00       	push   0x100
c00150c3:	6a 00                	push   0x0
c00150c5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00150cc:	50                   	push   eax
c00150cd:	e8 1e b4 fe ff       	call   c00004f0 <memset>
c00150d2:	83 c4 10             	add    esp,0x10
c00150d5:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c00150dc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00150e3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00150eb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00150f3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00150fb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015103:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015107:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c001510b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015110:	0f 83 16 01 00 00    	jae    c001522c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0015116:	6b ff 28             	imul   edi,edi,0x28
c0015119:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c001511d:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015120:	51                   	push   ecx
c0015121:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0015125:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015129:	8b 07                	mov    eax,DWORD PTR [edi]
c001512b:	6b d2 28             	imul   edx,edx,0x28
c001512e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015132:	31 d2                	xor    edx,edx
c0015134:	52                   	push   edx
c0015135:	50                   	push   eax
c0015136:	53                   	push   ebx
c0015137:	e8 e2 6a ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c001513c:	83 c4 0c             	add    esp,0xc
c001513f:	6a 20                	push   0x20
c0015141:	6a 00                	push   0x0
c0015143:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001514a:	51                   	push   ecx
c001514b:	e8 a0 b3 fe ff       	call   c00004f0 <memset>
c0015150:	58                   	pop    eax
c0015151:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015153:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015157:	52                   	push   edx
c0015158:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001515f:	51                   	push   ecx
c0015160:	6a 00                	push   0x0
c0015162:	6a 1f                	push   0x1f
c0015164:	53                   	push   ebx
c0015165:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015168:	83 c4 1c             	add    esp,0x1c
c001516b:	6a 09                	push   0x9
c001516d:	68 eb 28 02 c0       	push   0xc00228eb
c0015172:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015179:	51                   	push   ecx
c001517a:	e8 01 b2 fe ff       	call   c0000380 <memcmp>
c001517f:	83 c4 10             	add    esp,0x10
c0015182:	85 c0                	test   eax,eax
c0015184:	75 1a                	jne    c00151a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0015186:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015189:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001518c:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015190:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015193:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001519a:	89 d0                	mov    eax,edx
c001519c:	40                   	inc    eax
c001519d:	89 04 24             	mov    DWORD PTR [esp],eax
c00151a0:	52                   	push   edx
c00151a1:	6a 09                	push   0x9
c00151a3:	68 f5 28 02 c0       	push   0xc00228f5
c00151a8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151af:	50                   	push   eax
c00151b0:	e8 cb b1 fe ff       	call   c0000380 <memcmp>
c00151b5:	83 c4 10             	add    esp,0x10
c00151b8:	85 c0                	test   eax,eax
c00151ba:	75 1a                	jne    c00151d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00151bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00151bf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00151c2:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00151c6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00151c9:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00151d0:	89 c8                	mov    eax,ecx
c00151d2:	40                   	inc    eax
c00151d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00151d6:	50                   	push   eax
c00151d7:	50                   	push   eax
c00151d8:	68 c1 28 02 c0       	push   0xc00228c1
c00151dd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151e4:	50                   	push   eax
c00151e5:	e8 96 b5 fe ff       	call   c0000780 <strcmp>
c00151ea:	83 c4 10             	add    esp,0x10
c00151ed:	85 c0                	test   eax,eax
c00151ef:	75 0b                	jne    c00151fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c00151f1:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00151f5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00151f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151fc:	50                   	push   eax
c00151fd:	50                   	push   eax
c00151fe:	68 c9 28 02 c0       	push   0xc00228c9
c0015203:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001520a:	50                   	push   eax
c001520b:	e8 70 b5 fe ff       	call   c0000780 <strcmp>
c0015210:	83 c4 10             	add    esp,0x10
c0015213:	85 c0                	test   eax,eax
c0015215:	75 0b                	jne    c0015222 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015217:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c001521b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001521e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015222:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015227:	e9 d7 fe ff ff       	jmp    c0015103 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c001522c:	50                   	push   eax
c001522d:	31 d2                	xor    edx,edx
c001522f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015233:	52                   	push   edx
c0015234:	50                   	push   eax
c0015235:	53                   	push   ebx
c0015236:	e8 e3 69 ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c001523b:	58                   	pop    eax
c001523c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015240:	e8 ae 28 ff ff       	call   c0007af3 <malloc>
c0015245:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015247:	31 d2                	xor    edx,edx
c0015249:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001524d:	58                   	pop    eax
c001524e:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015252:	56                   	push   esi
c0015253:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015257:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001525b:	52                   	push   edx
c001525c:	50                   	push   eax
c001525d:	53                   	push   ebx
c001525e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015261:	83 c4 14             	add    esp,0x14
c0015264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015268:	e8 86 28 ff ff       	call   c0007af3 <malloc>
c001526d:	31 d2                	xor    edx,edx
c001526f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015273:	83 c4 0c             	add    esp,0xc
c0015276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001527a:	52                   	push   edx
c001527b:	50                   	push   eax
c001527c:	53                   	push   ebx
c001527d:	e8 9c 69 ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c0015282:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015284:	31 d2                	xor    edx,edx
c0015286:	89 34 24             	mov    DWORD PTR [esp],esi
c0015289:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001528d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015291:	52                   	push   edx
c0015292:	50                   	push   eax
c0015293:	53                   	push   ebx
c0015294:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015297:	83 c4 20             	add    esp,0x20
c001529a:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c001529f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00152a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00152ab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00152af:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00152b2:	0f 84 2b 03 00 00    	je     c00155e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00152b8:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00152bf:	31 d2                	xor    edx,edx
c00152c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00152c5:	c1 e8 03             	shr    eax,0x3
c00152c8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00152cc:	51                   	push   ecx
c00152cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152d1:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00152d5:	52                   	push   edx
c00152d6:	50                   	push   eax
c00152d7:	53                   	push   ebx
c00152d8:	e8 41 69 ff ff       	call   c000bc1e <File::seek(unsigned long long)>
c00152dd:	5e                   	pop    esi
c00152de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152e2:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00152e9:	e8 05 28 ff ff       	call   c0007af3 <malloc>
c00152ee:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00152f0:	31 d2                	xor    edx,edx
c00152f2:	89 c7                	mov    edi,eax
c00152f4:	58                   	pop    eax
c00152f5:	8d 44 24 58          	lea    eax,[esp+0x58]
c00152f9:	50                   	push   eax
c00152fa:	57                   	push   edi
c00152fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152ff:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015306:	52                   	push   edx
c0015307:	50                   	push   eax
c0015308:	53                   	push   ebx
c0015309:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001530c:	83 c4 20             	add    esp,0x20
c001530f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015317:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001531b:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c001531f:	0f 8d a5 02 00 00    	jge    c00155ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0015325:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001532a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001532e:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0015331:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015335:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015339:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c001533d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015341:	c1 e8 08             	shr    eax,0x8
c0015344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015348:	89 c2                	mov    edx,eax
c001534a:	c1 e2 04             	shl    edx,0x4
c001534d:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0015351:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0015354:	85 f6                	test   esi,esi
c0015356:	0f 85 cf 00 00 00    	jne    c001542b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001535c:	83 ec 0c             	sub    esp,0xc
c001535f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015363:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015367:	03 02                	add    eax,DWORD PTR [edx]
c0015369:	50                   	push   eax
c001536a:	e8 63 f8 ff ff       	call   c0014bd2 <Thr::getAddressOfKernelSymbol(char const*)>
c001536f:	83 c4 10             	add    esp,0x10
c0015372:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015376:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001537b:	85 c0                	test   eax,eax
c001537d:	89 c6                	mov    esi,eax
c001537f:	0f 85 a6 00 00 00    	jne    c001542b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015385:	83 ec 0c             	sub    esp,0xc
c0015388:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c001538c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015390:	03 02                	add    eax,DWORD PTR [edx]
c0015392:	50                   	push   eax
c0015393:	e8 30 c4 ff ff       	call   c00117c8 <KeResolveCompatibilitySymbol(char*)>
c0015398:	83 c4 10             	add    esp,0x10
c001539b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001539f:	85 c0                	test   eax,eax
c00153a1:	89 c6                	mov    esi,eax
c00153a3:	0f 85 82 00 00 00    	jne    c001542b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00153a9:	50                   	push   eax
c00153aa:	50                   	push   eax
c00153ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00153af:	03 02                	add    eax,DWORD PTR [edx]
c00153b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00153b5:	50                   	push   eax
c00153b6:	68 ff 28 02 c0       	push   0xc00228ff
c00153bb:	e8 6a 55 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00153c0:	58                   	pop    eax
c00153c1:	5a                   	pop    edx
c00153c2:	68 19 29 02 c0       	push   0xc0022919
c00153c7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00153ce:	51                   	push   ecx
c00153cf:	e8 7c b2 fe ff       	call   c0000650 <strcpy>
c00153d4:	59                   	pop    ecx
c00153d5:	58                   	pop    eax
c00153d6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00153da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00153de:	03 02                	add    eax,DWORD PTR [edx]
c00153e0:	50                   	push   eax
c00153e1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00153e8:	51                   	push   ecx
c00153e9:	e8 82 b4 fe ff       	call   c0000870 <strcat>
c00153ee:	58                   	pop    eax
c00153ef:	5a                   	pop    edx
c00153f0:	68 af 29 02 c0       	push   0xc00229af
c00153f5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00153fc:	51                   	push   ecx
c00153fd:	e8 6e b4 fe ff       	call   c0000870 <strcat>
c0015402:	83 c4 10             	add    esp,0x10
c0015405:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001540a:	0f 84 77 01 00 00    	je     c0015587 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015410:	83 ec 0c             	sub    esp,0xc
c0015413:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001541a:	51                   	push   ecx
c001541b:	e8 bf c1 ff ff       	call   c00115df <KePanic(char const*)>
c0015420:	83 c4 10             	add    esp,0x10
c0015423:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015427:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001542b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015430:	83 f8 01             	cmp    eax,0x1
c0015433:	0f 85 9b 00 00 00    	jne    c00154d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0015439:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001543d:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0015444:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0015448:	01 d0                	add    eax,edx
c001544a:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015452:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015456:	0f 94 c0             	sete   al
c0015459:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015461:	0f 94 c1             	sete   cl
c0015464:	09 c1                	or     ecx,eax
c0015466:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001546a:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001546f:	0f b6 c9             	movzx  ecx,cl
c0015472:	8b 00                	mov    eax,DWORD PTR [eax]
c0015474:	74 41                	je     c00154b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0015476:	8d 14 06             	lea    edx,[esi+eax*1]
c0015479:	85 c9                	test   ecx,ecx
c001547b:	75 15                	jne    c0015492 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001547d:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015481:	66 83 f8 0c          	cmp    ax,0xc
c0015485:	76 05                	jbe    c001548c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0015487:	b8 0c 00 00 00       	mov    eax,0xc
c001548c:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015490:	76 37                	jbe    c00154c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015492:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015497:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001549b:	0f 84 e6 00 00 00    	je     c0015587 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00154a1:	83 ec 0c             	sub    esp,0xc
c00154a4:	68 30 29 02 c0       	push   0xc0022930
c00154a9:	e8 31 c1 ff ff       	call   c00115df <KePanic(char const*)>
c00154ae:	83 c4 10             	add    esp,0x10
c00154b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154b5:	eb 12                	jmp    c00154c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00154b7:	01 c2                	add    edx,eax
c00154b9:	85 c9                	test   ecx,ecx
c00154bb:	75 0c                	jne    c00154c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00154bd:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00154c1:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00154c5:	77 02                	ja     c00154c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00154c7:	01 f2                	add    edx,esi
c00154c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00154cd:	89 10                	mov    DWORD PTR [eax],edx
c00154cf:	e9 ed 00 00 00       	jmp    c00155c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00154d4:	83 f8 02             	cmp    eax,0x2
c00154d7:	0f 85 81 00 00 00    	jne    c001555e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c00154dd:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00154e4:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c00154e8:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00154ec:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00154f4:	74 21                	je     c0015517 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00154f6:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00154fe:	74 17                	je     c0015517 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015500:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0015504:	ba 0a 00 00 00       	mov    edx,0xa
c0015509:	83 f9 0e             	cmp    ecx,0xe
c001550c:	77 03                	ja     c0015511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c001550e:	8d 51 fc             	lea    edx,[ecx-0x4]
c0015511:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0015515:	76 1f                	jbe    c0015536 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0015517:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001551c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015520:	74 65                	je     c0015587 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015522:	83 ec 0c             	sub    esp,0xc
c0015525:	68 4c 29 02 c0       	push   0xc002294c
c001552a:	e8 b0 c0 ff ff       	call   c00115df <KePanic(char const*)>
c001552f:	83 c4 10             	add    esp,0x10
c0015532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015536:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001553b:	8b 10                	mov    edx,DWORD PTR [eax]
c001553d:	74 15                	je     c0015554 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001553f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015543:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001554a:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001554e:	01 d1                	add    ecx,edx
c0015550:	01 ce                	add    esi,ecx
c0015552:	eb 06                	jmp    c001555a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0015554:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0015558:	01 d6                	add    esi,edx
c001555a:	89 30                	mov    DWORD PTR [eax],esi
c001555c:	eb 63                	jmp    c00155c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001555e:	56                   	push   esi
c001555f:	56                   	push   esi
c0015560:	50                   	push   eax
c0015561:	68 68 29 02 c0       	push   0xc0022968
c0015566:	e8 bf 53 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001556b:	83 c4 10             	add    esp,0x10
c001556e:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015573:	74 12                	je     c0015587 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015575:	83 ec 0c             	sub    esp,0xc
c0015578:	68 73 29 02 c0       	push   0xc0022973
c001557d:	e8 5d c0 ff ff       	call   c00115df <KePanic(char const*)>
c0015582:	83 c4 10             	add    esp,0x10
c0015585:	eb 3a                	jmp    c00155c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015587:	83 ec 0c             	sub    esp,0xc
c001558a:	53                   	push   ebx
c001558b:	e8 2e 66 ff ff       	call   c000bbbe <File::close()>
c0015590:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015592:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015595:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015598:	89 3c 24             	mov    DWORD PTR [esp],edi
c001559b:	e8 63 25 ff ff       	call   c0007b03 <free>
c00155a0:	59                   	pop    ecx
c00155a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00155a5:	e8 59 25 ff ff       	call   c0007b03 <free>
c00155aa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155ad:	e8 51 25 ff ff       	call   c0007b03 <free>
c00155b2:	5b                   	pop    ebx
c00155b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155b7:	e8 47 25 ff ff       	call   c0007b03 <free>
c00155bc:	83 c4 10             	add    esp,0x10
c00155bf:	eb 1e                	jmp    c00155df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00155c1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00155c5:	e9 4d fd ff ff       	jmp    c0015317 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00155ca:	83 ec 0c             	sub    esp,0xc
c00155cd:	57                   	push   edi
c00155ce:	e8 30 25 ff ff       	call   c0007b03 <free>
c00155d3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00155d7:	83 c4 10             	add    esp,0x10
c00155da:	e9 cc fc ff ff       	jmp    c00152ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00155df:	31 c0                	xor    eax,eax
c00155e1:	eb 32                	jmp    c0015615 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c00155e3:	83 ec 0c             	sub    esp,0xc
c00155e6:	53                   	push   ebx
c00155e7:	e8 d2 65 ff ff       	call   c000bbbe <File::close()>
c00155ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00155ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155f4:	58                   	pop    eax
c00155f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00155f9:	e8 05 25 ff ff       	call   c0007b03 <free>
c00155fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015601:	e8 fd 24 ff ff       	call   c0007b03 <free>
c0015606:	5a                   	pop    edx
c0015607:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001560b:	e8 f3 24 ff ff       	call   c0007b03 <free>
c0015610:	83 c4 10             	add    esp,0x10
c0015613:	b0 01                	mov    al,0x1
c0015615:	81 c4 5c 03 00 00    	add    esp,0x35c
c001561b:	5b                   	pop    ebx
c001561c:	5e                   	pop    esi
c001561d:	5f                   	pop    edi
c001561e:	5d                   	pop    ebp
c001561f:	c3                   	ret    

c0015620 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015620:	56                   	push   esi
c0015621:	31 d2                	xor    edx,edx
c0015623:	53                   	push   ebx
c0015624:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001562a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001562e:	39 d3                	cmp    ebx,edx
c0015630:	7e 1b                	jle    c001564d <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015632:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c0015639:	39 c8                	cmp    eax,ecx
c001563b:	77 0d                	ja     c001564a <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001563d:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c0015644:	01 c6                	add    esi,eax
c0015646:	39 ce                	cmp    esi,ecx
c0015648:	77 05                	ja     c001564f <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001564a:	42                   	inc    edx
c001564b:	eb e1                	jmp    c001562e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001564d:	31 c0                	xor    eax,eax
c001564f:	5b                   	pop    ebx
c0015650:	5e                   	pop    esi
c0015651:	c3                   	ret    

c0015652 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015652:	53                   	push   ebx
c0015653:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015659:	31 c0                	xor    eax,eax
c001565b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001565f:	39 c3                	cmp    ebx,eax
c0015661:	7e 22                	jle    c0015685 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015663:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c001566a:	39 ca                	cmp    edx,ecx
c001566c:	77 14                	ja     c0015682 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001566e:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c0015675:	39 ca                	cmp    edx,ecx
c0015677:	76 09                	jbe    c0015682 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015679:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c0015680:	eb 05                	jmp    c0015687 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015682:	40                   	inc    eax
c0015683:	eb da                	jmp    c001565f <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015685:	31 c0                	xor    eax,eax
c0015687:	5b                   	pop    ebx
c0015688:	c3                   	ret    

c0015689 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015689:	53                   	push   ebx
c001568a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001568e:	53                   	push   ebx
c001568f:	e8 8c ff ff ff       	call   c0015620 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015694:	5a                   	pop    edx
c0015695:	31 d2                	xor    edx,edx
c0015697:	85 c0                	test   eax,eax
c0015699:	74 04                	je     c001569f <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001569b:	89 da                	mov    edx,ebx
c001569d:	29 c2                	sub    edx,eax
c001569f:	5b                   	pop    ebx
c00156a0:	89 d0                	mov    eax,edx
c00156a2:	c3                   	ret    

c00156a3 <Thr::loadDLL(char const*, bool)>:
c00156a3:	55                   	push   ebp
c00156a4:	57                   	push   edi
c00156a5:	56                   	push   esi
c00156a6:	53                   	push   ebx
c00156a7:	81 ec 34 01 00 00    	sub    esp,0x134
c00156ad:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00156b4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00156bb:	56                   	push   esi
c00156bc:	68 8b 29 02 c0       	push   0xc002298b
c00156c1:	e8 64 52 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00156c6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00156cd:	e8 21 24 ff ff       	call   c0007af3 <malloc>
c00156d2:	83 c4 0c             	add    esp,0xc
c00156d5:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00156db:	56                   	push   esi
c00156dc:	50                   	push   eax
c00156dd:	89 c3                	mov    ebx,eax
c00156df:	e8 5e 64 ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c00156e4:	83 c4 10             	add    esp,0x10
c00156e7:	85 db                	test   ebx,ebx
c00156e9:	75 3c                	jne    c0015727 <Thr::loadDLL(char const*, bool)+0x84>
c00156eb:	89 e8                	mov    eax,ebp
c00156ed:	84 c0                	test   al,al
c00156ef:	0f 84 e1 01 00 00    	je     c00158d6 <Thr::loadDLL(char const*, bool)+0x233>
c00156f5:	50                   	push   eax
c00156f6:	50                   	push   eax
c00156f7:	68 9c 29 02 c0       	push   0xc002299c
c00156fc:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015700:	57                   	push   edi
c0015701:	e8 4a af fe ff       	call   c0000650 <strcpy>
c0015706:	58                   	pop    eax
c0015707:	5a                   	pop    edx
c0015708:	56                   	push   esi
c0015709:	57                   	push   edi
c001570a:	e8 61 b1 fe ff       	call   c0000870 <strcat>
c001570f:	59                   	pop    ecx
c0015710:	58                   	pop    eax
c0015711:	68 af 29 02 c0       	push   0xc00229af
c0015716:	57                   	push   edi
c0015717:	e8 54 b1 fe ff       	call   c0000870 <strcat>
c001571c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001571f:	e8 bb be ff ff       	call   c00115df <KePanic(char const*)>
c0015724:	83 c4 10             	add    esp,0x10
c0015727:	50                   	push   eax
c0015728:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001572c:	50                   	push   eax
c001572d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015731:	50                   	push   eax
c0015732:	53                   	push   ebx
c0015733:	e8 2a 67 ff ff       	call   c000be62 <File::stat(unsigned long long*, bool*)>
c0015738:	83 c4 10             	add    esp,0x10
c001573b:	85 db                	test   ebx,ebx
c001573d:	74 0c                	je     c001574b <Thr::loadDLL(char const*, bool)+0xa8>
c001573f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015741:	83 ec 0c             	sub    esp,0xc
c0015744:	53                   	push   ebx
c0015745:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015748:	83 c4 10             	add    esp,0x10
c001574b:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015750:	75 0a                	jne    c001575c <Thr::loadDLL(char const*, bool)+0xb9>
c0015752:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015756:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001575a:	75 3e                	jne    c001579a <Thr::loadDLL(char const*, bool)+0xf7>
c001575c:	89 e8                	mov    eax,ebp
c001575e:	31 db                	xor    ebx,ebx
c0015760:	84 c0                	test   al,al
c0015762:	0f 84 6e 01 00 00    	je     c00158d6 <Thr::loadDLL(char const*, bool)+0x233>
c0015768:	50                   	push   eax
c0015769:	50                   	push   eax
c001576a:	68 9c 29 02 c0       	push   0xc002299c
c001576f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015773:	53                   	push   ebx
c0015774:	e8 d7 ae fe ff       	call   c0000650 <strcpy>
c0015779:	58                   	pop    eax
c001577a:	5a                   	pop    edx
c001577b:	56                   	push   esi
c001577c:	53                   	push   ebx
c001577d:	e8 ee b0 fe ff       	call   c0000870 <strcat>
c0015782:	59                   	pop    ecx
c0015783:	5f                   	pop    edi
c0015784:	68 af 29 02 c0       	push   0xc00229af
c0015789:	53                   	push   ebx
c001578a:	e8 e1 b0 fe ff       	call   c0000870 <strcat>
c001578f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015792:	e8 48 be ff ff       	call   c00115df <KePanic(char const*)>
c0015797:	83 c4 10             	add    esp,0x10
c001579a:	53                   	push   ebx
c001579b:	6a 03                	push   0x3
c001579d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00157a5:	05 ff 0f 00 00       	add    eax,0xfff
c00157aa:	83 d2 00             	adc    edx,0x0
c00157ad:	0f ac d0 0c          	shrd   eax,edx,0xc
c00157b1:	50                   	push   eax
c00157b2:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00157b8:	e8 69 46 ff ff       	call   c0009e26 <VAS::allocatePages(int, int)>
c00157bd:	89 c3                	mov    ebx,eax
c00157bf:	58                   	pop    eax
c00157c0:	5a                   	pop    edx
c00157c1:	53                   	push   ebx
c00157c2:	68 7e 0e 02 c0       	push   0xc0020e7e
c00157c7:	e8 5e 51 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00157cc:	89 34 24             	mov    DWORD PTR [esp],esi
c00157cf:	e8 ac ad fe ff       	call   c0000580 <strlen>
c00157d4:	8b 3d 00 bf 02 c0    	mov    edi,DWORD PTR ds:0xc002bf00
c00157da:	40                   	inc    eax
c00157db:	89 04 24             	mov    DWORD PTR [esp],eax
c00157de:	e8 10 23 ff ff       	call   c0007af3 <malloc>
c00157e3:	59                   	pop    ecx
c00157e4:	89 04 bd 20 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3ce0],eax
c00157eb:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00157f0:	5f                   	pop    edi
c00157f1:	56                   	push   esi
c00157f2:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c00157f9:	e8 52 ae fe ff       	call   c0000650 <strcpy>
c00157fe:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015803:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c001580a:	8d 50 01             	lea    edx,[eax+0x1]
c001580d:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c0015813:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015817:	83 c4 0c             	add    esp,0xc
c001581a:	6a 01                	push   0x1
c001581c:	53                   	push   ebx
c001581d:	56                   	push   esi
c001581e:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c0015825:	e8 b5 f6 ff ff       	call   c0014edf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001582a:	83 c4 10             	add    esp,0x10
c001582d:	89 c7                	mov    edi,eax
c001582f:	89 f8                	mov    eax,edi
c0015831:	83 f0 01             	xor    eax,0x1
c0015834:	84 c0                	test   al,al
c0015836:	74 18                	je     c0015850 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015838:	89 e8                	mov    eax,ebp
c001583a:	84 c0                	test   al,al
c001583c:	74 12                	je     c0015850 <Thr::loadDLL(char const*, bool)+0x1ad>
c001583e:	83 ec 0c             	sub    esp,0xc
c0015841:	68 b1 29 02 c0       	push   0xc00229b1
c0015846:	e8 94 bd ff ff       	call   c00115df <KePanic(char const*)>
c001584b:	83 c4 10             	add    esp,0x10
c001584e:	eb 06                	jmp    c0015856 <Thr::loadDLL(char const*, bool)+0x1b3>
c0015850:	89 f8                	mov    eax,edi
c0015852:	84 c0                	test   al,al
c0015854:	75 10                	jne    c0015866 <Thr::loadDLL(char const*, bool)+0x1c3>
c0015856:	83 ec 0c             	sub    esp,0xc
c0015859:	68 d0 29 02 c0       	push   0xc00229d0
c001585e:	e8 7c bd ff ff       	call   c00115df <KePanic(char const*)>
c0015863:	83 c4 10             	add    esp,0x10
c0015866:	31 f6                	xor    esi,esi
c0015868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001586c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015870:	05 ff 0f 00 00       	add    eax,0xfff
c0015875:	83 d2 00             	adc    edx,0x0
c0015878:	0f ac d0 0c          	shrd   eax,edx,0xc
c001587c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015880:	c1 ea 0c             	shr    edx,0xc
c0015883:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015887:	ba 00 00 00 00       	mov    edx,0x0
c001588c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0015890:	89 d0                	mov    eax,edx
c0015892:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0015896:	73 32                	jae    c00158ca <Thr::loadDLL(char const*, bool)+0x227>
c0015898:	50                   	push   eax
c0015899:	50                   	push   eax
c001589a:	89 f0                	mov    eax,esi
c001589c:	c1 e0 0c             	shl    eax,0xc
c001589f:	01 d8                	add    eax,ebx
c00158a1:	50                   	push   eax
c00158a2:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00158a8:	e8 5d 40 ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c00158ad:	83 c4 10             	add    esp,0x10
c00158b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00158b2:	a8 60                	test   al,0x60
c00158b4:	75 11                	jne    c00158c7 <Thr::loadDLL(char const*, bool)+0x224>
c00158b6:	83 ec 0c             	sub    esp,0xc
c00158b9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158be:	50                   	push   eax
c00158bf:	e8 d5 24 ff ff       	call   c0007d99 <Phys::freePage(unsigned long)>
c00158c4:	83 c4 10             	add    esp,0x10
c00158c7:	46                   	inc    esi
c00158c8:	eb 9e                	jmp    c0015868 <Thr::loadDLL(char const*, bool)+0x1c5>
c00158ca:	89 f8                	mov    eax,edi
c00158cc:	84 c0                	test   al,al
c00158ce:	b8 00 00 00 00       	mov    eax,0x0
c00158d3:	0f 44 d8             	cmove  ebx,eax
c00158d6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00158dc:	89 d8                	mov    eax,ebx
c00158de:	5b                   	pop    ebx
c00158df:	5e                   	pop    esi
c00158e0:	5f                   	pop    edi
c00158e1:	5d                   	pop    ebp
c00158e2:	c3                   	ret    

c00158e3 <Thr::executeDLL(unsigned long, void*)>:
c00158e3:	56                   	push   esi
c00158e4:	53                   	push   ebx
c00158e5:	52                   	push   edx
c00158e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00158ee:	85 db                	test   ebx,ebx
c00158f0:	75 10                	jne    c0015902 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00158f2:	83 ec 0c             	sub    esp,0xc
c00158f5:	68 ec 29 02 c0       	push   0xc00229ec
c00158fa:	e8 e0 bc ff ff       	call   c00115df <KePanic(char const*)>
c00158ff:	83 c4 10             	add    esp,0x10
c0015902:	50                   	push   eax
c0015903:	50                   	push   eax
c0015904:	53                   	push   ebx
c0015905:	68 16 2a 02 c0       	push   0xc0022a16
c001590a:	e8 1b 50 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001590f:	89 d8                	mov    eax,ebx
c0015911:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015915:	83 c4 14             	add    esp,0x14
c0015918:	5b                   	pop    ebx
c0015919:	5e                   	pop    esi
c001591a:	ff e0                	jmp    eax

c001591c <userModeEntryPoint(void*)>:
c001591c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015921:	83 e8 01             	sub    eax,0x1
c0015924:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015929:	75 01                	jne    c001592c <userModeEntryPoint(void*)+0x10>
c001592b:	fb                   	sti    
c001592c:	fb                   	sti    
c001592d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015932:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015935:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001593b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001593f:	e9 fb a8 fe ff       	jmp    c000023f <goToUsermode>

c0015944 <changeTSS>:
c0015944:	83 ec 14             	sub    esp,0x14
c0015947:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001594c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001594f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015954:	c1 e2 15             	shl    edx,0x15
c0015957:	29 d0                	sub    eax,edx
c0015959:	50                   	push   eax
c001595a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001595f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015965:	05 7c 11 00 00       	add    eax,0x117c
c001596a:	50                   	push   eax
c001596b:	e8 ec 35 ff ff       	call   c0008f5c <TSS::setESP(unsigned long)>
c0015970:	83 c4 1c             	add    esp,0x1c
c0015973:	c3                   	ret    

c0015974 <switchToThread(ThreadControlBlock*)>:
c0015974:	57                   	push   edi
c0015975:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c001597b:	56                   	push   esi
c001597c:	53                   	push   ebx
c001597d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015981:	85 c9                	test   ecx,ecx
c0015983:	0f 85 8b 00 00 00    	jne    c0015a14 <switchToThread(ThreadControlBlock*)+0xa0>
c0015989:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c001598d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015993:	74 7b                	je     c0015a10 <switchToThread(ThreadControlBlock*)+0x9c>
c0015995:	b8 00 04 00 00       	mov    eax,0x400
c001599a:	29 d0                	sub    eax,edx
c001599c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001599f:	d1 f8                	sar    eax,1
c00159a1:	01 d0                	add    eax,edx
c00159a3:	90                   	nop
c00159a4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00159a7:	e8 04 28 00 00       	call   c00181b0 <HalQueryPerformanceCounter()>
c00159ac:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c00159b1:	89 c6                	mov    esi,eax
c00159b3:	89 d7                	mov    edi,edx
c00159b5:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c00159bb:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c00159c0:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c00159c6:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c00159cc:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c00159d2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00159d8:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c00159de:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c00159e4:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00159e7:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00159ea:	01 c6                	add    esi,eax
c00159ec:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00159ef:	11 d7                	adc    edi,edx
c00159f1:	83 ec 0c             	sub    esp,0xc
c00159f4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00159f7:	53                   	push   ebx
c00159f8:	e8 7a a8 fe ff       	call   c0000277 <switchToThreadASM>
c00159fd:	0f 20 c0             	mov    eax,cr0
c0015a00:	83 c8 08             	or     eax,0x8
c0015a03:	0f 22 c0             	mov    cr0,eax
c0015a06:	83 c4 10             	add    esp,0x10
c0015a09:	5b                   	pop    ebx
c0015a0a:	5e                   	pop    esi
c0015a0b:	5f                   	pop    edi
c0015a0c:	c3                   	ret    
c0015a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a10:	31 c0                	xor    eax,eax
c0015a12:	eb 90                	jmp    c00159a4 <switchToThread(ThreadControlBlock*)+0x30>
c0015a14:	5b                   	pop    ebx
c0015a15:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015a1f:	5e                   	pop    esi
c0015a20:	5f                   	pop    edi
c0015a21:	c3                   	ret    
c0015a22:	66 90                	xchg   ax,ax

c0015a24 <Process::addArgs(char**)>:
c0015a24:	57                   	push   edi
c0015a25:	56                   	push   esi
c0015a26:	53                   	push   ebx
c0015a27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015a2b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015a2f:	85 f6                	test   esi,esi
c0015a31:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0015a3b:	74 4f                	je     c0015a8c <Process::addArgs(char**)+0x68>
c0015a3d:	8b 06                	mov    eax,DWORD PTR [esi]
c0015a3f:	85 c0                	test   eax,eax
c0015a41:	74 49                	je     c0015a8c <Process::addArgs(char**)+0x68>
c0015a43:	31 db                	xor    ebx,ebx
c0015a45:	8d 76 00             	lea    esi,[esi+0x0]
c0015a48:	83 ec 0c             	sub    esp,0xc
c0015a4b:	50                   	push   eax
c0015a4c:	e8 2f ab fe ff       	call   c0000580 <strlen>
c0015a51:	83 c0 01             	add    eax,0x1
c0015a54:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a57:	e8 97 20 ff ff       	call   c0007af3 <malloc>
c0015a5c:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015a63:	5a                   	pop    edx
c0015a64:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015a67:	83 c3 01             	add    ebx,0x1
c0015a6a:	59                   	pop    ecx
c0015a6b:	52                   	push   edx
c0015a6c:	50                   	push   eax
c0015a6d:	e8 de ab fe ff       	call   c0000650 <strcpy>
c0015a72:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015a78:	83 c4 10             	add    esp,0x10
c0015a7b:	83 c1 01             	add    ecx,0x1
c0015a7e:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015a84:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015a87:	85 c0                	test   eax,eax
c0015a89:	75 bd                	jne    c0015a48 <Process::addArgs(char**)+0x24>
c0015a8b:	90                   	nop
c0015a8c:	5b                   	pop    ebx
c0015a8d:	5e                   	pop    esi
c0015a8e:	5f                   	pop    edi
c0015a8f:	c3                   	ret    

c0015a90 <Process::Process(char const*, Process*, char**)>:
c0015a90:	56                   	push   esi
c0015a91:	53                   	push   ebx
c0015a92:	83 ec 14             	sub    esp,0x14
c0015a95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a99:	05 0c 02 00 00       	add    eax,0x20c
c0015a9e:	bb 07 00 00 00       	mov    ebx,0x7
c0015aa3:	89 c6                	mov    esi,eax
c0015aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0015aa8:	85 db                	test   ebx,ebx
c0015aaa:	78 14                	js     c0015ac0 <Process::Process(char const*, Process*, char**)+0x30>
c0015aac:	83 ec 0c             	sub    esp,0xc
c0015aaf:	56                   	push   esi
c0015ab0:	e8 33 a6 00 00       	call   c00200e8 <ThreadControlBlock::ThreadControlBlock()>
c0015ab5:	83 c4 10             	add    esp,0x10
c0015ab8:	83 c6 5f             	add    esi,0x5f
c0015abb:	83 eb 01             	sub    ebx,0x1
c0015abe:	eb e8                	jmp    c0015aa8 <Process::Process(char const*, Process*, char**)+0x18>
c0015ac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ac4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015acb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015acf:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015ad6:	83 ec 0c             	sub    esp,0xc
c0015ad9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015add:	e8 f2 b8 ff ff       	call   c00113d4 <KeNewProcessEnv(Process*)>
c0015ae2:	83 c4 10             	add    esp,0x10
c0015ae5:	89 c2                	mov    edx,eax
c0015ae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aeb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015af1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015af5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015afe:	a1 40 40 02 c0       	mov    eax,ds:0xc0024040
c0015b03:	8d 50 01             	lea    edx,[eax+0x1]
c0015b06:	89 15 40 40 02 c0    	mov    DWORD PTR ds:0xc0024040,edx
c0015b0c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b10:	89 02                	mov    DWORD PTR [edx],eax
c0015b12:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015b1a:	83 ec 0c             	sub    esp,0xc
c0015b1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b21:	e8 cd 1f ff ff       	call   c0007af3 <malloc>
c0015b26:	83 c4 10             	add    esp,0x10
c0015b29:	89 c3                	mov    ebx,eax
c0015b2b:	83 ec 08             	sub    esp,0x8
c0015b2e:	6a 00                	push   0x0
c0015b30:	53                   	push   ebx
c0015b31:	e8 3c 45 ff ff       	call   c000a072 <VAS::VAS(bool)>
c0015b36:	83 c4 10             	add    esp,0x10
c0015b39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b3d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b47:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015b51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b59:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015b5f:	e8 92 be ff ff       	call   c00119f6 <KeInitSignals()>
c0015b64:	89 c2                	mov    edx,eax
c0015b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b6a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015b70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b74:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b7a:	85 c0                	test   eax,eax
c0015b7c:	74 42                	je     c0015bc0 <Process::Process(char const*, Process*, char**)+0x130>
c0015b7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b82:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b88:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015b8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b92:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b9c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ba2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015ba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bac:	05 0c 01 00 00       	add    eax,0x10c
c0015bb1:	83 ec 08             	sub    esp,0x8
c0015bb4:	52                   	push   edx
c0015bb5:	50                   	push   eax
c0015bb6:	e8 95 aa fe ff       	call   c0000650 <strcpy>
c0015bbb:	83 c4 10             	add    esp,0x10
c0015bbe:	eb 64                	jmp    c0015c24 <Process::Process(char const*, Process*, char**)+0x194>
c0015bc0:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015bc8:	83 ec 0c             	sub    esp,0xc
c0015bcb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015bcf:	e8 1f 1f ff ff       	call   c0007af3 <malloc>
c0015bd4:	83 c4 10             	add    esp,0x10
c0015bd7:	89 c3                	mov    ebx,eax
c0015bd9:	83 ec 08             	sub    esp,0x8
c0015bdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015be0:	53                   	push   ebx
c0015be1:	e8 a6 30 ff ff       	call   c0008c8c <VgaText::VgaText(char const*)>
c0015be6:	83 c4 10             	add    esp,0x10
c0015be9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bed:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015bf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bf7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015bfd:	83 ec 0c             	sub    esp,0xc
c0015c00:	50                   	push   eax
c0015c01:	e8 34 29 ff ff       	call   c000853a <addToTerminalCycle(VgaText*)>
c0015c06:	83 c4 10             	add    esp,0x10
c0015c09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c0d:	05 0c 01 00 00       	add    eax,0x10c
c0015c12:	83 ec 08             	sub    esp,0x8
c0015c15:	68 35 2a 02 c0       	push   0xc0022a35
c0015c1a:	50                   	push   eax
c0015c1b:	e8 30 aa fe ff       	call   c0000650 <strcpy>
c0015c20:	83 c4 10             	add    esp,0x10
c0015c23:	90                   	nop
c0015c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c28:	83 c0 0c             	add    eax,0xc
c0015c2b:	83 ec 08             	sub    esp,0x8
c0015c2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c32:	50                   	push   eax
c0015c33:	e8 18 aa fe ff       	call   c0000650 <strcpy>
c0015c38:	83 c4 10             	add    esp,0x10
c0015c3b:	83 ec 08             	sub    esp,0x8
c0015c3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015c42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c46:	e8 d9 fd ff ff       	call   c0015a24 <Process::addArgs(char**)>
c0015c4b:	83 c4 10             	add    esp,0x10
c0015c4e:	83 ec 08             	sub    esp,0x8
c0015c51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c59:	e8 42 ed ff ff       	call   c00149a0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015c5e:	83 c4 10             	add    esp,0x10
c0015c61:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015c69:	83 f0 01             	xor    eax,0x1
c0015c6c:	88 c2                	mov    dl,al
c0015c6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c72:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015c78:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015c7d:	83 ec 04             	sub    esp,0x4
c0015c80:	50                   	push   eax
c0015c81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c85:	68 8c 2a 02 c0       	push   0xc0022a8c
c0015c8a:	e8 9b 4c ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0015c8f:	83 c4 10             	add    esp,0x10
c0015c92:	90                   	nop
c0015c93:	83 c4 14             	add    esp,0x14
c0015c96:	5b                   	pop    ebx
c0015c97:	5e                   	pop    esi
c0015c98:	c3                   	ret    
c0015c99:	90                   	nop
c0015c9a:	66 90                	xchg   ax,ax

c0015c9c <Process::Process(bool, char const*, Process*, char**)>:
c0015c9c:	56                   	push   esi
c0015c9d:	53                   	push   ebx
c0015c9e:	83 ec 24             	sub    esp,0x24
c0015ca1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ca5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015ca9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cad:	05 0c 02 00 00       	add    eax,0x20c
c0015cb2:	bb 07 00 00 00       	mov    ebx,0x7
c0015cb7:	89 c6                	mov    esi,eax
c0015cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0015cbc:	85 db                	test   ebx,ebx
c0015cbe:	78 14                	js     c0015cd4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015cc0:	83 ec 0c             	sub    esp,0xc
c0015cc3:	56                   	push   esi
c0015cc4:	e8 1f a4 00 00       	call   c00200e8 <ThreadControlBlock::ThreadControlBlock()>
c0015cc9:	83 c4 10             	add    esp,0x10
c0015ccc:	83 c6 5f             	add    esi,0x5f
c0015ccf:	83 eb 01             	sub    ebx,0x1
c0015cd2:	eb e8                	jmp    c0015cbc <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015cd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cd8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015cdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ce3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015cea:	83 ec 0c             	sub    esp,0xc
c0015ced:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015cf1:	e8 de b6 ff ff       	call   c00113d4 <KeNewProcessEnv(Process*)>
c0015cf6:	83 c4 10             	add    esp,0x10
c0015cf9:	89 c2                	mov    edx,eax
c0015cfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cff:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015d05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d09:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015d12:	a1 40 40 02 c0       	mov    eax,ds:0xc0024040
c0015d17:	8d 50 01             	lea    edx,[eax+0x1]
c0015d1a:	89 15 40 40 02 c0    	mov    DWORD PTR ds:0xc0024040,edx
c0015d20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015d24:	89 02                	mov    DWORD PTR [edx],eax
c0015d26:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015d2e:	83 ec 0c             	sub    esp,0xc
c0015d31:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d35:	e8 b9 1d ff ff       	call   c0007af3 <malloc>
c0015d3a:	83 c4 10             	add    esp,0x10
c0015d3d:	89 c3                	mov    ebx,eax
c0015d3f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015d44:	83 ec 08             	sub    esp,0x8
c0015d47:	50                   	push   eax
c0015d48:	53                   	push   ebx
c0015d49:	e8 24 43 ff ff       	call   c000a072 <VAS::VAS(bool)>
c0015d4e:	83 c4 10             	add    esp,0x10
c0015d51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d55:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d5f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015d69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d6d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d71:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015d77:	e8 7a bc ff ff       	call   c00119f6 <KeInitSignals()>
c0015d7c:	89 c2                	mov    edx,eax
c0015d7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d82:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015d88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d8c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d92:	85 c0                	test   eax,eax
c0015d94:	74 42                	je     c0015dd8 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015d96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d9a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015da0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015da6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015daa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015db0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015db4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015dba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015dc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dc4:	05 0c 01 00 00       	add    eax,0x10c
c0015dc9:	83 ec 08             	sub    esp,0x8
c0015dcc:	52                   	push   edx
c0015dcd:	50                   	push   eax
c0015dce:	e8 7d a8 fe ff       	call   c0000650 <strcpy>
c0015dd3:	83 c4 10             	add    esp,0x10
c0015dd6:	eb 64                	jmp    c0015e3c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015dd8:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015de0:	83 ec 0c             	sub    esp,0xc
c0015de3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015de7:	e8 07 1d ff ff       	call   c0007af3 <malloc>
c0015dec:	83 c4 10             	add    esp,0x10
c0015def:	89 c3                	mov    ebx,eax
c0015df1:	83 ec 08             	sub    esp,0x8
c0015df4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015df8:	53                   	push   ebx
c0015df9:	e8 8e 2e ff ff       	call   c0008c8c <VgaText::VgaText(char const*)>
c0015dfe:	83 c4 10             	add    esp,0x10
c0015e01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e05:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015e0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e0f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e15:	83 ec 0c             	sub    esp,0xc
c0015e18:	50                   	push   eax
c0015e19:	e8 1c 27 ff ff       	call   c000853a <addToTerminalCycle(VgaText*)>
c0015e1e:	83 c4 10             	add    esp,0x10
c0015e21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e25:	05 0c 01 00 00       	add    eax,0x10c
c0015e2a:	83 ec 08             	sub    esp,0x8
c0015e2d:	68 35 2a 02 c0       	push   0xc0022a35
c0015e32:	50                   	push   eax
c0015e33:	e8 18 a8 fe ff       	call   c0000650 <strcpy>
c0015e38:	83 c4 10             	add    esp,0x10
c0015e3b:	90                   	nop
c0015e3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e40:	83 c0 0c             	add    eax,0xc
c0015e43:	83 ec 08             	sub    esp,0x8
c0015e46:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e4a:	50                   	push   eax
c0015e4b:	e8 00 a8 fe ff       	call   c0000650 <strcpy>
c0015e50:	83 c4 10             	add    esp,0x10
c0015e53:	83 ec 08             	sub    esp,0x8
c0015e56:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015e5e:	e8 c1 fb ff ff       	call   c0015a24 <Process::addArgs(char**)>
c0015e63:	83 c4 10             	add    esp,0x10
c0015e66:	90                   	nop
c0015e67:	83 c4 24             	add    esp,0x24
c0015e6a:	5b                   	pop    ebx
c0015e6b:	5e                   	pop    esi
c0015e6c:	c3                   	ret    
c0015e6d:	8d 76 00             	lea    esi,[esi+0x0]

c0015e70 <taskStartupFunction>:
c0015e70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e75:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015e78:	c3                   	ret    
c0015e79:	90                   	nop
c0015e7a:	66 90                	xchg   ax,ax

c0015e7c <Semaphore::Semaphore(int)>:
c0015e7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e84:	89 10                	mov    DWORD PTR [eax],edx
c0015e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e8a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015e91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e95:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ea0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015ea7:	90                   	nop
c0015ea8:	c3                   	ret    
c0015ea9:	90                   	nop
c0015eaa:	66 90                	xchg   ax,ax

c0015eac <Mutex::Mutex()>:
c0015eac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eb0:	6a 01                	push   0x1
c0015eb2:	50                   	push   eax
c0015eb3:	e8 c4 ff ff ff       	call   c0015e7c <Semaphore::Semaphore(int)>
c0015eb8:	83 c4 08             	add    esp,0x8
c0015ebb:	90                   	nop
c0015ebc:	c3                   	ret    
c0015ebd:	90                   	nop
c0015ebe:	66 90                	xchg   ax,ax

c0015ec0 <Process::createThread(void (*)(void*), void*, int)>:
c0015ec0:	57                   	push   edi
c0015ec1:	31 c9                	xor    ecx,ecx
c0015ec3:	56                   	push   esi
c0015ec4:	53                   	push   ebx
c0015ec5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ec9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015ed0:	89 f2                	mov    edx,esi
c0015ed2:	66 90                	xchg   ax,ax
c0015ed4:	0f b7 c2             	movzx  eax,dx
c0015ed7:	80 e2 01             	and    dl,0x1
c0015eda:	74 14                	je     c0015ef0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015edc:	d1 f8                	sar    eax,1
c0015ede:	83 c1 01             	add    ecx,0x1
c0015ee1:	83 f9 10             	cmp    ecx,0x10
c0015ee4:	89 c2                	mov    edx,eax
c0015ee6:	75 ec                	jne    c0015ed4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015ee8:	31 db                	xor    ebx,ebx
c0015eea:	89 d8                	mov    eax,ebx
c0015eec:	5b                   	pop    ebx
c0015eed:	5e                   	pop    esi
c0015eee:	5f                   	pop    edi
c0015eef:	c3                   	ret    
c0015ef0:	b8 01 00 00 00       	mov    eax,0x1
c0015ef5:	d3 e0                	shl    eax,cl
c0015ef7:	09 c6                	or     esi,eax
c0015ef9:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015f00:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015f03:	c1 e0 05             	shl    eax,0x5
c0015f06:	29 c8                	sub    eax,ecx
c0015f08:	01 d8                	add    eax,ebx
c0015f0a:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015f11:	75 0d                	jne    c0015f20 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015f13:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0015f20:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f26:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015f29:	83 ec 0c             	sub    esp,0xc
c0015f2c:	c1 e6 05             	shl    esi,0x5
c0015f2f:	29 ce                	sub    esi,ecx
c0015f31:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015f34:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015f37:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015f3d:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015f43:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015f49:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015f50:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015f56:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015f5a:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015f60:	89 ca                	mov    edx,ecx
c0015f62:	f7 da                	neg    edx
c0015f64:	c1 e2 15             	shl    edx,0x15
c0015f67:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015f6d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015f73:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015f77:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015f81:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015f87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f8b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015f91:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015f9b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015fa5:	68 00 01 00 00       	push   0x100
c0015faa:	e8 44 1b ff ff       	call   c0007af3 <malloc>
c0015faf:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015fb2:	58                   	pop    eax
c0015fb3:	5a                   	pop    edx
c0015fb4:	53                   	push   ebx
c0015fb5:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015fba:	e8 c1 9e 00 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015fbf:	83 c4 10             	add    esp,0x10
c0015fc2:	89 d8                	mov    eax,ebx
c0015fc4:	5b                   	pop    ebx
c0015fc5:	5e                   	pop    esi
c0015fc6:	5f                   	pop    edi
c0015fc7:	c3                   	ret    

c0015fc8 <Process::createUserThread()>:
c0015fc8:	83 ec 0c             	sub    esp,0xc
c0015fcb:	68 80 00 00 00       	push   0x80
c0015fd0:	6a 00                	push   0x0
c0015fd2:	68 1c 59 01 c0       	push   0xc001591c
c0015fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fdb:	50                   	push   eax
c0015fdc:	e8 df fe ff ff       	call   c0015ec0 <Process::createThread(void (*)(void*), void*, int)>
c0015fe1:	83 c4 1c             	add    esp,0x1c
c0015fe4:	c3                   	ret    
c0015fe5:	8d 76 00             	lea    esi,[esi+0x0]

c0015fe8 <setupMultitasking(void (*)())>:
c0015fe8:	56                   	push   esi
c0015fe9:	53                   	push   ebx
c0015fea:	83 ec 04             	sub    esp,0x4
c0015fed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ff1:	eb 11                	jmp    c0016004 <setupMultitasking(void (*)())+0x1c>
c0015ff3:	90                   	nop
c0015ff4:	83 ec 0c             	sub    esp,0xc
c0015ff7:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015ffc:	e8 c3 9d 00 00       	call   c001fdc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016001:	83 c4 10             	add    esp,0x10
c0016004:	83 ec 0c             	sub    esp,0xc
c0016007:	68 e4 c6 02 c0       	push   0xc002c6e4
c001600c:	e8 8f 9d 00 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016011:	83 c4 10             	add    esp,0x10
c0016014:	84 c0                	test   al,al
c0016016:	74 dc                	je     c0015ff4 <setupMultitasking(void (*)())+0xc>
c0016018:	83 ec 0c             	sub    esp,0xc
c001601b:	68 24 07 00 00       	push   0x724
c0016020:	e8 ce 1a ff ff       	call   c0007af3 <malloc>
c0016025:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001602c:	6a 00                	push   0x0
c001602e:	68 39 2a 02 c0       	push   0xc0022a39
c0016033:	6a 01                	push   0x1
c0016035:	50                   	push   eax
c0016036:	89 c3                	mov    ebx,eax
c0016038:	e8 5f fc ff ff       	call   c0015c9c <Process::Process(bool, char const*, Process*, char**)>
c001603d:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0016043:	83 c4 14             	add    esp,0x14
c0016046:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c001604c:	50                   	push   eax
c001604d:	e8 3d 27 ff ff       	call   c000878f <setActiveTerminal(VgaText*)>
c0016052:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0016059:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0016063:	83 c8 01             	or     eax,0x1
c0016066:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c001606d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0016073:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016076:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016080:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0016086:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016090:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016096:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00160a0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00160aa:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00160b0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00160b6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00160c0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00160ca:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00160d1:	e8 1d 1a ff ff       	call   c0007af3 <malloc>
c00160d6:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00160dc:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00160e2:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00160e8:	5a                   	pop    edx
c00160e9:	59                   	pop    ecx
c00160ea:	68 35 2a 02 c0       	push   0xc0022a35
c00160ef:	50                   	push   eax
c00160f0:	e8 5b a5 fe ff       	call   c0000650 <strcpy>
c00160f5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00160fc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016100:	83 c4 14             	add    esp,0x14
c0016103:	5b                   	pop    ebx
c0016104:	5e                   	pop    esi
c0016105:	e9 5f a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001610a:	66 90                	xchg   ax,ax

c001610c <schedule()>:
c001610c:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016112:	85 d2                	test   edx,edx
c0016114:	74 0e                	je     c0016124 <schedule()+0x18>
c0016116:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016120:	c3                   	ret    
c0016121:	8d 76 00             	lea    esi,[esi+0x0]
c0016124:	53                   	push   ebx
c0016125:	83 ec 14             	sub    esp,0x14
c0016128:	68 e4 c6 02 c0       	push   0xc002c6e4
c001612d:	e8 6e 9c 00 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016132:	83 c4 10             	add    esp,0x10
c0016135:	84 c0                	test   al,al
c0016137:	75 3f                	jne    c0016178 <schedule()+0x6c>
c0016139:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001613e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016141:	83 fa 01             	cmp    edx,0x1
c0016144:	74 3a                	je     c0016180 <schedule()+0x74>
c0016146:	66 90                	xchg   ax,ax
c0016148:	83 ec 0c             	sub    esp,0xc
c001614b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016150:	e8 67 9c 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016155:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001615c:	89 c3                	mov    ebx,eax
c001615e:	e8 61 9c 00 00       	call   c001fdc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016163:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001616a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001616d:	e8 02 f8 ff ff       	call   c0015974 <switchToThread(ThreadControlBlock*)>
c0016172:	83 c4 10             	add    esp,0x10
c0016175:	8d 76 00             	lea    esi,[esi+0x0]
c0016178:	83 c4 08             	add    esp,0x8
c001617b:	5b                   	pop    ebx
c001617c:	c3                   	ret    
c001617d:	8d 76 00             	lea    esi,[esi+0x0]
c0016180:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016187:	83 ec 08             	sub    esp,0x8
c001618a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001618f:	50                   	push   eax
c0016190:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016195:	e8 e6 9c 00 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001619a:	83 c4 10             	add    esp,0x10
c001619d:	eb a9                	jmp    c0016148 <schedule()+0x3c>
c001619f:	90                   	nop

c00161a0 <Semaphore::tryAcquire()>:
c00161a0:	53                   	push   ebx
c00161a1:	83 ec 08             	sub    esp,0x8
c00161a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00161a8:	fa                   	cli    
c00161a9:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00161af:	8d 42 01             	lea    eax,[edx+0x1]
c00161b2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161b7:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00161bc:	8d 58 01             	lea    ebx,[eax+0x1]
c00161bf:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c00161c5:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00161c8:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00161ca:	7c 2c                	jl     c00161f8 <Semaphore::tryAcquire()+0x58>
c00161cc:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00161d1:	85 c0                	test   eax,eax
c00161d3:	75 0b                	jne    c00161e0 <Semaphore::tryAcquire()+0x40>
c00161d5:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00161da:	85 c0                	test   eax,eax
c00161dc:	75 5a                	jne    c0016238 <Semaphore::tryAcquire()+0x98>
c00161de:	66 90                	xchg   ax,ax
c00161e0:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00161e6:	31 c0                	xor    eax,eax
c00161e8:	85 d2                	test   edx,edx
c00161ea:	75 04                	jne    c00161f0 <Semaphore::tryAcquire()+0x50>
c00161ec:	fb                   	sti    
c00161ed:	8d 76 00             	lea    esi,[esi+0x0]
c00161f0:	83 c4 08             	add    esp,0x8
c00161f3:	5b                   	pop    ebx
c00161f4:	c3                   	ret    
c00161f5:	8d 76 00             	lea    esi,[esi+0x0]
c00161f8:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00161fd:	83 c3 01             	add    ebx,0x1
c0016200:	85 c0                	test   eax,eax
c0016202:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016205:	75 21                	jne    c0016228 <Semaphore::tryAcquire()+0x88>
c0016207:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c001620d:	85 c9                	test   ecx,ecx
c001620f:	74 17                	je     c0016228 <Semaphore::tryAcquire()+0x88>
c0016211:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001621b:	e8 ec fe ff ff       	call   c001610c <schedule()>
c0016220:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016225:	8d 50 ff             	lea    edx,[eax-0x1]
c0016228:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001622e:	85 d2                	test   edx,edx
c0016230:	b0 01                	mov    al,0x1
c0016232:	75 bc                	jne    c00161f0 <Semaphore::tryAcquire()+0x50>
c0016234:	eb b6                	jmp    c00161ec <Semaphore::tryAcquire()+0x4c>
c0016236:	66 90                	xchg   ax,ax
c0016238:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016242:	e8 c5 fe ff ff       	call   c001610c <schedule()>
c0016247:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001624c:	8d 50 ff             	lea    edx,[eax-0x1]
c001624f:	31 c0                	xor    eax,eax
c0016251:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016257:	85 d2                	test   edx,edx
c0016259:	75 95                	jne    c00161f0 <Semaphore::tryAcquire()+0x50>
c001625b:	eb 8f                	jmp    c00161ec <Semaphore::tryAcquire()+0x4c>
c001625d:	90                   	nop
c001625e:	66 90                	xchg   ax,ax

c0016260 <Semaphore::assertLocked(char const*)>:
c0016260:	83 ec 0c             	sub    esp,0xc
c0016263:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016267:	fa                   	cli    
c0016268:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001626e:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016273:	83 c1 01             	add    ecx,0x1
c0016276:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001627c:	8d 48 01             	lea    ecx,[eax+0x1]
c001627f:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016285:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0016287:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001628a:	7c 28                	jl     c00162b4 <Semaphore::assertLocked(char const*)+0x54>
c001628c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016291:	85 c0                	test   eax,eax
c0016293:	75 0b                	jne    c00162a0 <Semaphore::assertLocked(char const*)+0x40>
c0016295:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001629a:	85 c0                	test   eax,eax
c001629c:	75 32                	jne    c00162d0 <Semaphore::assertLocked(char const*)+0x70>
c001629e:	66 90                	xchg   ax,ax
c00162a0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162a5:	83 e8 01             	sub    eax,0x1
c00162a8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162ad:	75 01                	jne    c00162b0 <Semaphore::assertLocked(char const*)+0x50>
c00162af:	fb                   	sti    
c00162b0:	83 c4 0c             	add    esp,0xc
c00162b3:	c3                   	ret    
c00162b4:	83 ec 0c             	sub    esp,0xc
c00162b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00162bb:	52                   	push   edx
c00162bc:	e8 1e b3 ff ff       	call   c00115df <KePanic(char const*)>
c00162c1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162c6:	83 c4 10             	add    esp,0x10
c00162c9:	83 e8 01             	sub    eax,0x1
c00162cc:	eb be                	jmp    c001628c <Semaphore::assertLocked(char const*)+0x2c>
c00162ce:	66 90                	xchg   ax,ax
c00162d0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162da:	e8 2d fe ff ff       	call   c001610c <schedule()>
c00162df:	eb bf                	jmp    c00162a0 <Semaphore::assertLocked(char const*)+0x40>
c00162e1:	8d 76 00             	lea    esi,[esi+0x0]

c00162e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00162e4:	83 ec 0c             	sub    esp,0xc
c00162e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162f0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00162f3:	e8 14 fe ff ff       	call   c001610c <schedule()>
c00162f8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162fd:	83 e8 01             	sub    eax,0x1
c0016300:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016305:	75 01                	jne    c0016308 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0016307:	fb                   	sti    
c0016308:	83 c4 0c             	add    esp,0xc
c001630b:	c3                   	ret    

c001630c <blockTask(TaskState)>:
c001630c:	83 ec 0c             	sub    esp,0xc
c001630f:	fa                   	cli    
c0016310:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016315:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016319:	83 c0 01             	add    eax,0x1
c001631c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016321:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016326:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016329:	e8 de fd ff ff       	call   c001610c <schedule()>
c001632e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016333:	83 e8 01             	sub    eax,0x1
c0016336:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001633b:	75 03                	jne    c0016340 <blockTask(TaskState)+0x34>
c001633d:	fb                   	sti    
c001633e:	66 90                	xchg   ax,ax
c0016340:	83 c4 0c             	add    esp,0xc
c0016343:	c3                   	ret    

c0016344 <waitTask(int, int*, int)>:
c0016344:	83 ec 18             	sub    esp,0x18
c0016347:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001634c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016350:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016353:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016357:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001635c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001635f:	6a 07                	push   0x7
c0016361:	e8 a6 ff ff ff       	call   c001630c <blockTask(TaskState)>
c0016366:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001636b:	83 c4 10             	add    esp,0x10
c001636e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016371:	85 d2                	test   edx,edx
c0016373:	74 0b                	je     c0016380 <waitTask(int, int*, int)+0x3c>
c0016375:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016378:	89 02                	mov    DWORD PTR [edx],eax
c001637a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001637f:	90                   	nop
c0016380:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016383:	83 c4 0c             	add    esp,0xc
c0016386:	c3                   	ret    
c0016387:	90                   	nop

c0016388 <milliTenthSleepUntil(unsigned int)>:
c0016388:	83 ec 0c             	sub    esp,0xc
c001638b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001638f:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c0016395:	76 05                	jbe    c001639c <milliTenthSleepUntil(unsigned int)+0x14>
c0016397:	90                   	nop
c0016398:	83 c4 0c             	add    esp,0xc
c001639b:	c3                   	ret    
c001639c:	fa                   	cli    
c001639d:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00163a3:	83 ec 08             	sub    esp,0x8
c00163a6:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00163ac:	83 c2 01             	add    edx,0x1
c00163af:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00163b5:	83 c1 01             	add    ecx,0x1
c00163b8:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00163be:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163c4:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00163c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163cc:	50                   	push   eax
c00163cd:	68 d8 c6 02 c0       	push   0xc002c6d8
c00163d2:	e8 a9 9a 00 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163d7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00163de:	e8 29 ff ff ff       	call   c001630c <blockTask(TaskState)>
c00163e3:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163e8:	83 c4 10             	add    esp,0x10
c00163eb:	83 e8 01             	sub    eax,0x1
c00163ee:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00163f3:	85 c0                	test   eax,eax
c00163f5:	75 09                	jne    c0016400 <milliTenthSleepUntil(unsigned int)+0x78>
c00163f7:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00163fc:	85 c0                	test   eax,eax
c00163fe:	75 14                	jne    c0016414 <milliTenthSleepUntil(unsigned int)+0x8c>
c0016400:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016405:	83 e8 01             	sub    eax,0x1
c0016408:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001640d:	75 89                	jne    c0016398 <milliTenthSleepUntil(unsigned int)+0x10>
c001640f:	fb                   	sti    
c0016410:	83 c4 0c             	add    esp,0xc
c0016413:	c3                   	ret    
c0016414:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001641e:	e8 e9 fc ff ff       	call   c001610c <schedule()>
c0016423:	eb db                	jmp    c0016400 <milliTenthSleepUntil(unsigned int)+0x78>
c0016425:	8d 76 00             	lea    esi,[esi+0x0]

c0016428 <milliTenthSleep(unsigned int)>:
c0016428:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001642c:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016431:	01 c2                	add    edx,eax
c0016433:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016437:	e9 4c ff ff ff       	jmp    c0016388 <milliTenthSleepUntil(unsigned int)>

c001643c <sleep(unsigned int)>:
c001643c:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0016444:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016448:	eb de                	jmp    c0016428 <milliTenthSleep(unsigned int)>
c001644a:	66 90                	xchg   ax,ax

c001644c <Semaphore::acquire()>:
c001644c:	83 ec 0c             	sub    esp,0xc
c001644f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016453:	fa                   	cli    
c0016454:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016459:	83 c0 01             	add    eax,0x1
c001645c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016461:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016466:	8d 48 01             	lea    ecx,[eax+0x1]
c0016469:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001646f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016472:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016474:	7d 2e                	jge    c00164a4 <Semaphore::acquire()+0x58>
c0016476:	83 c1 01             	add    ecx,0x1
c0016479:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001647c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016481:	85 c0                	test   eax,eax
c0016483:	75 0b                	jne    c0016490 <Semaphore::acquire()+0x44>
c0016485:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001648a:	85 c0                	test   eax,eax
c001648c:	75 66                	jne    c00164f4 <Semaphore::acquire()+0xa8>
c001648e:	66 90                	xchg   ax,ax
c0016490:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016495:	83 e8 01             	sub    eax,0x1
c0016498:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001649d:	75 01                	jne    c00164a0 <Semaphore::acquire()+0x54>
c001649f:	fb                   	sti    
c00164a0:	83 c4 0c             	add    esp,0xc
c00164a3:	c3                   	ret    
c00164a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164a9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00164b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00164b3:	85 c9                	test   ecx,ecx
c00164b5:	74 51                	je     c0016508 <Semaphore::acquire()+0xbc>
c00164b7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00164ba:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00164c0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00164c3:	90                   	nop
c00164c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164c9:	83 ec 0c             	sub    esp,0xc
c00164cc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00164cf:	68 b8 2a 02 c0       	push   0xc0022ab8
c00164d4:	e8 51 44 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00164d9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00164e0:	e8 27 fe ff ff       	call   c001630c <blockTask(TaskState)>
c00164e5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00164ea:	83 c4 10             	add    esp,0x10
c00164ed:	83 e8 01             	sub    eax,0x1
c00164f0:	eb 8a                	jmp    c001647c <Semaphore::acquire()+0x30>
c00164f2:	66 90                	xchg   ax,ax
c00164f4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00164fe:	e8 09 fc ff ff       	call   c001610c <schedule()>
c0016503:	eb 8b                	jmp    c0016490 <Semaphore::acquire()+0x44>
c0016505:	8d 76 00             	lea    esi,[esi+0x0]
c0016508:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001650d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016510:	eb b2                	jmp    c00164c4 <Semaphore::acquire()+0x78>
c0016512:	66 90                	xchg   ax,ax

c0016514 <taskReturned>:
c0016514:	83 ec 18             	sub    esp,0x18
c0016517:	68 d8 2a 02 c0       	push   0xc0022ad8
c001651c:	e8 be b0 ff ff       	call   c00115df <KePanic(char const*)>
c0016521:	83 c4 10             	add    esp,0x10
c0016524:	83 ec 0c             	sub    esp,0xc
c0016527:	6a 02                	push   0x2
c0016529:	e8 de fd ff ff       	call   c001630c <blockTask(TaskState)>
c001652e:	fa                   	cli    
c001652f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016534:	83 c0 01             	add    eax,0x1
c0016537:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001653c:	e8 cb fb ff ff       	call   c001610c <schedule()>
c0016541:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016546:	83 c4 10             	add    esp,0x10
c0016549:	83 e8 01             	sub    eax,0x1
c001654c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016551:	85 c0                	test   eax,eax
c0016553:	75 cf                	jne    c0016524 <taskReturned+0x10>
c0016555:	fb                   	sti    
c0016556:	eb cc                	jmp    c0016524 <taskReturned+0x10>

c0016558 <Thr::processFromPID(int)>:
c0016558:	57                   	push   edi
c0016559:	56                   	push   esi
c001655a:	53                   	push   ebx
c001655b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001655f:	fa                   	cli    
c0016560:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016566:	83 ec 0c             	sub    esp,0xc
c0016569:	68 e4 c6 02 c0       	push   0xc002c6e4
c001656e:	83 c1 01             	add    ecx,0x1
c0016571:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016577:	e8 40 98 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001657c:	83 c4 10             	add    esp,0x10
c001657f:	89 c7                	mov    edi,eax
c0016581:	eb 15                	jmp    c0016598 <Thr::processFromPID(int)+0x40>
c0016583:	90                   	nop
c0016584:	83 ec 0c             	sub    esp,0xc
c0016587:	68 e4 c6 02 c0       	push   0xc002c6e4
c001658c:	e8 2b 98 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016591:	83 c4 10             	add    esp,0x10
c0016594:	39 f8                	cmp    eax,edi
c0016596:	74 50                	je     c00165e8 <Thr::processFromPID(int)+0x90>
c0016598:	83 ec 0c             	sub    esp,0xc
c001659b:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165a0:	e8 17 98 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165a5:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00165ac:	89 c3                	mov    ebx,eax
c00165ae:	e8 11 98 00 00       	call   c001fdc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00165b3:	58                   	pop    eax
c00165b4:	5a                   	pop    edx
c00165b5:	53                   	push   ebx
c00165b6:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165bb:	e8 c0 98 00 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165c3:	83 c4 10             	add    esp,0x10
c00165c6:	39 30                	cmp    DWORD PTR [eax],esi
c00165c8:	75 ba                	jne    c0016584 <Thr::processFromPID(int)+0x2c>
c00165ca:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165cf:	83 e8 01             	sub    eax,0x1
c00165d2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165d7:	74 0b                	je     c00165e4 <Thr::processFromPID(int)+0x8c>
c00165d9:	8d 76 00             	lea    esi,[esi+0x0]
c00165dc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165df:	90                   	nop
c00165e0:	5b                   	pop    ebx
c00165e1:	5e                   	pop    esi
c00165e2:	5f                   	pop    edi
c00165e3:	c3                   	ret    
c00165e4:	fb                   	sti    
c00165e5:	eb f5                	jmp    c00165dc <Thr::processFromPID(int)+0x84>
c00165e7:	90                   	nop
c00165e8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165ed:	8d 50 ff             	lea    edx,[eax-0x1]
c00165f0:	31 c0                	xor    eax,eax
c00165f2:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00165f8:	85 d2                	test   edx,edx
c00165fa:	75 e4                	jne    c00165e0 <Thr::processFromPID(int)+0x88>
c00165fc:	fb                   	sti    
c00165fd:	5b                   	pop    ebx
c00165fe:	5e                   	pop    esi
c00165ff:	5f                   	pop    edi
c0016600:	c3                   	ret    
c0016601:	8d 76 00             	lea    esi,[esi+0x0]

c0016604 <unblockTask(ThreadControlBlock*)>:
c0016604:	53                   	push   ebx
c0016605:	83 ec 08             	sub    esp,0x8
c0016608:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001660c:	fa                   	cli    
c001660d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016612:	83 c0 01             	add    eax,0x1
c0016615:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001661a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001661d:	85 c0                	test   eax,eax
c001661f:	74 67                	je     c0016688 <unblockTask(ThreadControlBlock*)+0x84>
c0016621:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016624:	83 f8 01             	cmp    eax,0x1
c0016627:	74 37                	je     c0016660 <unblockTask(ThreadControlBlock*)+0x5c>
c0016629:	83 ec 0c             	sub    esp,0xc
c001662c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016631:	e8 86 97 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016636:	83 c4 10             	add    esp,0x10
c0016639:	85 c0                	test   eax,eax
c001663b:	75 1b                	jne    c0016658 <unblockTask(ThreadControlBlock*)+0x54>
c001663d:	eb 5d                	jmp    c001669c <unblockTask(ThreadControlBlock*)+0x98>
c001663f:	90                   	nop
c0016640:	83 ec 08             	sub    esp,0x8
c0016643:	50                   	push   eax
c0016644:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016649:	e8 8e 9a 00 00       	call   c00200dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001664e:	83 c4 10             	add    esp,0x10
c0016651:	85 c0                	test   eax,eax
c0016653:	74 47                	je     c001669c <unblockTask(ThreadControlBlock*)+0x98>
c0016655:	8d 76 00             	lea    esi,[esi+0x0]
c0016658:	39 c3                	cmp    ebx,eax
c001665a:	75 e4                	jne    c0016640 <unblockTask(ThreadControlBlock*)+0x3c>
c001665c:	eb 12                	jmp    c0016670 <unblockTask(ThreadControlBlock*)+0x6c>
c001665e:	66 90                	xchg   ax,ax
c0016660:	83 ec 0c             	sub    esp,0xc
c0016663:	68 57 2a 02 c0       	push   0xc0022a57
c0016668:	e8 bd 42 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001666d:	83 c4 10             	add    esp,0x10
c0016670:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016675:	83 e8 01             	sub    eax,0x1
c0016678:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001667d:	75 01                	jne    c0016680 <unblockTask(ThreadControlBlock*)+0x7c>
c001667f:	fb                   	sti    
c0016680:	83 c4 08             	add    esp,0x8
c0016683:	5b                   	pop    ebx
c0016684:	c3                   	ret    
c0016685:	8d 76 00             	lea    esi,[esi+0x0]
c0016688:	83 ec 0c             	sub    esp,0xc
c001668b:	68 40 2a 02 c0       	push   0xc0022a40
c0016690:	e8 95 42 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0016695:	83 c4 10             	add    esp,0x10
c0016698:	eb d6                	jmp    c0016670 <unblockTask(ThreadControlBlock*)+0x6c>
c001669a:	66 90                	xchg   ax,ax
c001669c:	83 ec 08             	sub    esp,0x8
c001669f:	53                   	push   ebx
c00166a0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166a5:	e8 d6 97 00 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166aa:	83 c4 10             	add    esp,0x10
c00166ad:	eb c1                	jmp    c0016670 <unblockTask(ThreadControlBlock*)+0x6c>
c00166af:	90                   	nop

c00166b0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00166b0:	55                   	push   ebp
c00166b1:	57                   	push   edi
c00166b2:	56                   	push   esi
c00166b3:	53                   	push   ebx
c00166b4:	83 ec 1c             	sub    esp,0x1c
c00166b7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00166bb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166be:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00166c4:	85 ed                	test   ebp,ebp
c00166c6:	7e 28                	jle    c00166f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00166c8:	31 f6                	xor    esi,esi
c00166ca:	66 90                	xchg   ax,ax
c00166cc:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00166d3:	83 ec 0c             	sub    esp,0xc
c00166d6:	83 c6 01             	add    esi,0x1
c00166d9:	57                   	push   edi
c00166da:	e8 24 14 ff ff       	call   c0007b03 <free>
c00166df:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166e2:	83 c4 10             	add    esp,0x10
c00166e5:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00166eb:	7f df                	jg     c00166cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00166ed:	8d 76 00             	lea    esi,[esi+0x0]
c00166f0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00166fa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00166ff:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016702:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016705:	d3 c0                	rol    eax,cl
c0016707:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001670e:	21 c8                	and    eax,ecx
c0016710:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016717:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001671a:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016722:	89 f7                	mov    edi,esi
c0016724:	0f 85 72 01 00 00    	jne    c001689c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001672a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016730:	85 ed                	test   ebp,ebp
c0016732:	74 1c                	je     c0016750 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016734:	83 ec 0c             	sub    esp,0xc
c0016737:	55                   	push   ebp
c0016738:	e8 b3 ab ff ff       	call   c00112f0 <EnvVarContainer::~EnvVarContainer()>
c001673d:	59                   	pop    ecx
c001673e:	5e                   	pop    esi
c001673f:	6a 0c                	push   0xc
c0016741:	55                   	push   ebp
c0016742:	e8 e5 40 ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c0016747:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001674a:	83 c4 10             	add    esp,0x10
c001674d:	89 f7                	mov    edi,esi
c001674f:	90                   	nop
c0016750:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016756:	85 c0                	test   eax,eax
c0016758:	0f 84 b2 00 00 00    	je     c0016810 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001675e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016761:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016765:	31 c9                	xor    ecx,ecx
c0016767:	eb 17                	jmp    c0016780 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016769:	8d 76 00             	lea    esi,[esi+0x0]
c001676c:	83 c1 01             	add    ecx,0x1
c001676f:	83 f9 10             	cmp    ecx,0x10
c0016772:	0f 84 98 00 00 00    	je     c0016810 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016778:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001677e:	66 90                	xchg   ax,ax
c0016780:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016787:	d3 fa                	sar    edx,cl
c0016789:	80 e2 01             	and    dl,0x1
c001678c:	74 de                	je     c001676c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001678e:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016791:	c1 e2 05             	shl    edx,0x5
c0016794:	29 ca                	sub    edx,ecx
c0016796:	01 d0                	add    eax,edx
c0016798:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001679e:	83 fd 07             	cmp    ebp,0x7
c00167a1:	75 c9                	jne    c001676c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167a3:	05 40 02 00 00       	add    eax,0x240
c00167a8:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00167ab:	83 fd ff             	cmp    ebp,0xffffffff
c00167ae:	0f 8c f0 00 00 00    	jl     c00168a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00167b4:	0f 84 ae 01 00 00    	je     c0016968 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00167ba:	85 ed                	test   ebp,ebp
c00167bc:	0f 84 92 01 00 00    	je     c0016954 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00167c2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00167c4:	75 a6                	jne    c001676c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167c6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00167ca:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167d0:	01 d0                	add    eax,edx
c00167d2:	66 90                	xchg   ax,ax
c00167d4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00167d8:	83 ec 0c             	sub    esp,0xc
c00167db:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00167e1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167e4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00167ea:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00167f1:	50                   	push   eax
c00167f2:	e8 0d fe ff ff       	call   c0016604 <unblockTask(ThreadControlBlock*)>
c00167f7:	83 c4 10             	add    esp,0x10
c00167fa:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167fd:	89 f7                	mov    edi,esi
c00167ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016803:	83 c1 01             	add    ecx,0x1
c0016806:	83 f9 10             	cmp    ecx,0x10
c0016809:	0f 85 69 ff ff ff    	jne    c0016778 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001680f:	90                   	nop
c0016810:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016816:	85 c0                	test   eax,eax
c0016818:	74 62                	je     c001687c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001681a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016820:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016826:	74 54                	je     c001687c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016828:	83 ec 0c             	sub    esp,0xc
c001682b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016830:	e8 87 95 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016835:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001683c:	89 c7                	mov    edi,eax
c001683e:	e8 5d 95 00 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016843:	83 c4 10             	add    esp,0x10
c0016846:	84 c0                	test   al,al
c0016848:	0f 84 ce 00 00 00    	je     c001691c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001684e:	66 90                	xchg   ax,ax
c0016850:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016853:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016859:	85 d2                	test   edx,edx
c001685b:	74 0f                	je     c001686c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001685d:	8b 02                	mov    eax,DWORD PTR [edx]
c001685f:	83 ec 0c             	sub    esp,0xc
c0016862:	52                   	push   edx
c0016863:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016866:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016869:	83 c4 10             	add    esp,0x10
c001686c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016876:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016879:	8d 76 00             	lea    esi,[esi+0x0]
c001687c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016882:	85 db                	test   ebx,ebx
c0016884:	74 16                	je     c001689c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016886:	83 ec 0c             	sub    esp,0xc
c0016889:	53                   	push   ebx
c001688a:	e8 21 33 ff ff       	call   c0009bb0 <VAS::~VAS()>
c001688f:	58                   	pop    eax
c0016890:	5a                   	pop    edx
c0016891:	6a 14                	push   0x14
c0016893:	53                   	push   ebx
c0016894:	e8 93 3f ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c0016899:	83 c4 10             	add    esp,0x10
c001689c:	83 c4 1c             	add    esp,0x1c
c001689f:	5b                   	pop    ebx
c00168a0:	5e                   	pop    esi
c00168a1:	5f                   	pop    edi
c00168a2:	5d                   	pop    ebp
c00168a3:	c3                   	ret    
c00168a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168a8:	83 ec 0c             	sub    esp,0xc
c00168ab:	68 0c 2b 02 c0       	push   0xc0022b0c
c00168b0:	e8 2a ad ff ff       	call   c00115df <KePanic(char const*)>
c00168b5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00168b8:	83 c4 10             	add    esp,0x10
c00168bb:	89 f7                	mov    edi,esi
c00168bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168c1:	e9 a6 fe ff ff       	jmp    c001676c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00168c6:	66 90                	xchg   ax,ax
c00168c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168ce:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00168d4:	75 1e                	jne    c00168f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168d6:	83 ec 0c             	sub    esp,0xc
c00168d9:	68 74 2b 02 c0       	push   0xc0022b74
c00168de:	e8 47 40 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00168e3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00168ea:	e8 1d fa ff ff       	call   c001630c <blockTask(TaskState)>
c00168ef:	83 c4 10             	add    esp,0x10
c00168f2:	66 90                	xchg   ax,ax
c00168f4:	83 ec 08             	sub    esp,0x8
c00168f7:	56                   	push   esi
c00168f8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168fd:	e8 7e 95 00 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016902:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016909:	e8 ae 94 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001690e:	83 c4 10             	add    esp,0x10
c0016911:	39 f8                	cmp    eax,edi
c0016913:	0f 84 37 ff ff ff    	je     c0016850 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016919:	8d 76 00             	lea    esi,[esi+0x0]
c001691c:	83 ec 0c             	sub    esp,0xc
c001691f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016924:	e8 93 94 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016929:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016930:	89 c6                	mov    esi,eax
c0016932:	e8 8d 94 00 00       	call   c001fdc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016937:	83 c4 10             	add    esp,0x10
c001693a:	39 f3                	cmp    ebx,esi
c001693c:	74 b6                	je     c00168f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001693e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016941:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016944:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001694a:	75 a8                	jne    c00168f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001694c:	e9 77 ff ff ff       	jmp    c00168c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016951:	8d 76 00             	lea    esi,[esi+0x0]
c0016954:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016958:	83 ec 0c             	sub    esp,0xc
c001695b:	68 40 2b 02 c0       	push   0xc0022b40
c0016960:	e9 4b ff ff ff       	jmp    c00168b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016965:	8d 76 00             	lea    esi,[esi+0x0]
c0016968:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001696c:	8b 36                	mov    esi,DWORD PTR [esi]
c001696e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016971:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016974:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001697a:	01 d7                	add    edi,edx
c001697c:	89 f8                	mov    eax,edi
c001697e:	e9 51 fe ff ff       	jmp    c00167d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016983:	90                   	nop

c0016984 <cleanerTaskFunction(void*)>:
c0016984:	53                   	push   ebx
c0016985:	83 ec 08             	sub    esp,0x8
c0016988:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001698d:	83 e8 01             	sub    eax,0x1
c0016990:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016995:	75 01                	jne    c0016998 <cleanerTaskFunction(void*)+0x14>
c0016997:	fb                   	sti    
c0016998:	fa                   	cli    
c0016999:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001699e:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c00169a5:	8d 50 01             	lea    edx,[eax+0x1]
c00169a8:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00169ae:	0f 84 c4 00 00 00    	je     c0016a78 <cleanerTaskFunction(void*)+0xf4>
c00169b4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169b9:	85 c0                	test   eax,eax
c00169bb:	75 03                	jne    c00169c0 <cleanerTaskFunction(void*)+0x3c>
c00169bd:	fb                   	sti    
c00169be:	66 90                	xchg   ax,ax
c00169c0:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c00169c7:	fa                   	cli    
c00169c8:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00169ce:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00169d4:	83 c2 01             	add    edx,0x1
c00169d7:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00169dd:	83 c1 01             	add    ecx,0x1
c00169e0:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00169e6:	fa                   	cli    
c00169e7:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c00169ed:	83 c3 01             	add    ebx,0x1
c00169f0:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c00169f6:	eb 28                	jmp    c0016a20 <cleanerTaskFunction(void*)+0x9c>
c00169f8:	83 ec 0c             	sub    esp,0xc
c00169fb:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a00:	e8 b7 93 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a05:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016a0c:	89 c3                	mov    ebx,eax
c0016a0e:	e8 b1 93 00 00       	call   c001fdc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a16:	e8 95 fc ff ff       	call   c00166b0 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016a1b:	83 c4 10             	add    esp,0x10
c0016a1e:	66 90                	xchg   ax,ax
c0016a20:	83 ec 0c             	sub    esp,0xc
c0016a23:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a28:	e8 73 93 00 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016a2d:	83 c4 10             	add    esp,0x10
c0016a30:	84 c0                	test   al,al
c0016a32:	74 c4                	je     c00169f8 <cleanerTaskFunction(void*)+0x74>
c0016a34:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a39:	83 e8 01             	sub    eax,0x1
c0016a3c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a41:	75 01                	jne    c0016a44 <cleanerTaskFunction(void*)+0xc0>
c0016a43:	fb                   	sti    
c0016a44:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a49:	83 e8 01             	sub    eax,0x1
c0016a4c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a51:	0f 85 31 ff ff ff    	jne    c0016988 <cleanerTaskFunction(void*)+0x4>
c0016a57:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016a5c:	85 c0                	test   eax,eax
c0016a5e:	0f 84 24 ff ff ff    	je     c0016988 <cleanerTaskFunction(void*)+0x4>
c0016a64:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a6e:	e8 99 f6 ff ff       	call   c001610c <schedule()>
c0016a73:	e9 10 ff ff ff       	jmp    c0016988 <cleanerTaskFunction(void*)+0x4>
c0016a78:	83 ec 0c             	sub    esp,0xc
c0016a7b:	6a 02                	push   0x2
c0016a7d:	e8 62 f8 ff ff       	call   c00162e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016a82:	83 c4 10             	add    esp,0x10
c0016a85:	e9 36 ff ff ff       	jmp    c00169c0 <cleanerTaskFunction(void*)+0x3c>
c0016a8a:	66 90                	xchg   ax,ax

c0016a8c <terminateTask(int)>:
c0016a8c:	83 ec 14             	sub    esp,0x14
c0016a8f:	fa                   	cli    
c0016a90:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a96:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a9c:	83 c2 01             	add    edx,0x1
c0016a9f:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016aa5:	83 c1 01             	add    ecx,0x1
c0016aa8:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016aae:	fa                   	cli    
c0016aaf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ab4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ab8:	83 c0 01             	add    eax,0x1
c0016abb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ac0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ac5:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016ac8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016acd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016ad0:	50                   	push   eax
c0016ad1:	68 cc c6 02 c0       	push   0xc002c6cc
c0016ad6:	e8 a5 93 00 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016adb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ae0:	83 c4 10             	add    esp,0x10
c0016ae3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016aea:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016aef:	85 c0                	test   eax,eax
c0016af1:	74 65                	je     c0016b58 <terminateTask(int)+0xcc>
c0016af3:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016afa:	83 ec 0c             	sub    esp,0xc
c0016afd:	50                   	push   eax
c0016afe:	e8 01 fb ff ff       	call   c0016604 <unblockTask(ThreadControlBlock*)>
c0016b03:	83 c4 10             	add    esp,0x10
c0016b06:	66 90                	xchg   ax,ax
c0016b08:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b0d:	83 e8 01             	sub    eax,0x1
c0016b10:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b15:	75 01                	jne    c0016b18 <terminateTask(int)+0x8c>
c0016b17:	fb                   	sti    
c0016b18:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b1d:	83 e8 01             	sub    eax,0x1
c0016b20:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b25:	75 09                	jne    c0016b30 <terminateTask(int)+0xa4>
c0016b27:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016b2e:	75 3c                	jne    c0016b6c <terminateTask(int)+0xe0>
c0016b30:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b35:	83 e8 01             	sub    eax,0x1
c0016b38:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b3d:	75 01                	jne    c0016b40 <terminateTask(int)+0xb4>
c0016b3f:	fb                   	sti    
c0016b40:	fa                   	cli    
c0016b41:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b46:	83 c0 01             	add    eax,0x1
c0016b49:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b4e:	66 90                	xchg   ax,ax
c0016b50:	e8 b7 f5 ff ff       	call   c001610c <schedule()>
c0016b55:	eb d9                	jmp    c0016b30 <terminateTask(int)+0xa4>
c0016b57:	90                   	nop
c0016b58:	83 ec 0c             	sub    esp,0xc
c0016b5b:	68 6e 2a 02 c0       	push   0xc0022a6e
c0016b60:	e8 c5 3d ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0016b65:	83 c4 10             	add    esp,0x10
c0016b68:	eb 9e                	jmp    c0016b08 <terminateTask(int)+0x7c>
c0016b6a:	66 90                	xchg   ax,ax
c0016b6c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b76:	eb d8                	jmp    c0016b50 <terminateTask(int)+0xc4>

c0016b78 <Thr::terminateFromIRQ(int)>:
c0016b78:	83 ec 18             	sub    esp,0x18
c0016b7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b7f:	50                   	push   eax
c0016b80:	e8 07 ff ff ff       	call   c0016a8c <terminateTask(int)>
c0016b85:	90                   	nop
c0016b86:	66 90                	xchg   ax,ax

c0016b88 <Semaphore::release()>:
c0016b88:	83 ec 0c             	sub    esp,0xc
c0016b8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b8f:	fa                   	cli    
c0016b90:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b95:	83 c0 01             	add    eax,0x1
c0016b98:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b9d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016ba2:	8d 48 01             	lea    ecx,[eax+0x1]
c0016ba5:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016bab:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016bae:	85 c9                	test   ecx,ecx
c0016bb0:	74 42                	je     c0016bf4 <Semaphore::release()+0x6c>
c0016bb2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016bb5:	83 ec 0c             	sub    esp,0xc
c0016bb8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016bbb:	51                   	push   ecx
c0016bbc:	e8 43 fa ff ff       	call   c0016604 <unblockTask(ThreadControlBlock*)>
c0016bc1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016bc6:	83 c4 10             	add    esp,0x10
c0016bc9:	83 e8 01             	sub    eax,0x1
c0016bcc:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016bd1:	85 c0                	test   eax,eax
c0016bd3:	75 0b                	jne    c0016be0 <Semaphore::release()+0x58>
c0016bd5:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016bda:	85 c0                	test   eax,eax
c0016bdc:	75 22                	jne    c0016c00 <Semaphore::release()+0x78>
c0016bde:	66 90                	xchg   ax,ax
c0016be0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016be5:	83 e8 01             	sub    eax,0x1
c0016be8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bed:	75 01                	jne    c0016bf0 <Semaphore::release()+0x68>
c0016bef:	fb                   	sti    
c0016bf0:	83 c4 0c             	add    esp,0xc
c0016bf3:	c3                   	ret    
c0016bf4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016bf7:	83 e9 01             	sub    ecx,0x1
c0016bfa:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016bfd:	eb cd                	jmp    c0016bcc <Semaphore::release()+0x44>
c0016bff:	90                   	nop
c0016c00:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016c0a:	e8 fd f4 ff ff       	call   c001610c <schedule()>
c0016c0f:	eb cf                	jmp    c0016be0 <Semaphore::release()+0x58>
c0016c11:	8d 76 00             	lea    esi,[esi+0x0]

c0016c14 <__static_initialization_and_destruction_0(int, int)>:
c0016c14:	83 ec 0c             	sub    esp,0xc
c0016c17:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016c1c:	0f 85 8e 00 00 00    	jne    c0016cb0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c22:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016c2a:	0f 85 80 00 00 00    	jne    c0016cb0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c30:	83 ec 0c             	sub    esp,0xc
c0016c33:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c38:	e8 f7 94 00 00       	call   c0020134 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c3d:	83 c4 10             	add    esp,0x10
c0016c40:	83 ec 04             	sub    esp,0x4
c0016c43:	68 44 37 02 c0       	push   0xc0023744
c0016c48:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c4d:	68 e4 00 02 c0       	push   0xc00200e4
c0016c52:	e8 85 3b ff ff       	call   c000a7dc <__cxa_atexit>
c0016c57:	83 c4 10             	add    esp,0x10
c0016c5a:	83 ec 0c             	sub    esp,0xc
c0016c5d:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c62:	e8 cd 94 00 00       	call   c0020134 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c67:	83 c4 10             	add    esp,0x10
c0016c6a:	83 ec 04             	sub    esp,0x4
c0016c6d:	68 44 37 02 c0       	push   0xc0023744
c0016c72:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c77:	68 e4 00 02 c0       	push   0xc00200e4
c0016c7c:	e8 5b 3b ff ff       	call   c000a7dc <__cxa_atexit>
c0016c81:	83 c4 10             	add    esp,0x10
c0016c84:	83 ec 0c             	sub    esp,0xc
c0016c87:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c8c:	e8 a3 94 00 00       	call   c0020134 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c91:	83 c4 10             	add    esp,0x10
c0016c94:	83 ec 04             	sub    esp,0x4
c0016c97:	68 44 37 02 c0       	push   0xc0023744
c0016c9c:	68 cc c6 02 c0       	push   0xc002c6cc
c0016ca1:	68 e4 00 02 c0       	push   0xc00200e4
c0016ca6:	e8 31 3b ff ff       	call   c000a7dc <__cxa_atexit>
c0016cab:	83 c4 10             	add    esp,0x10
c0016cae:	66 90                	xchg   ax,ax
c0016cb0:	90                   	nop
c0016cb1:	83 c4 0c             	add    esp,0xc
c0016cb4:	c3                   	ret    
c0016cb5:	8d 76 00             	lea    esi,[esi+0x0]

c0016cb8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016cb8:	83 ec 0c             	sub    esp,0xc
c0016cbb:	83 ec 08             	sub    esp,0x8
c0016cbe:	68 ff ff 00 00       	push   0xffff
c0016cc3:	6a 01                	push   0x1
c0016cc5:	e8 4a ff ff ff       	call   c0016c14 <__static_initialization_and_destruction_0(int, int)>
c0016cca:	83 c4 10             	add    esp,0x10
c0016ccd:	83 c4 0c             	add    esp,0xc
c0016cd0:	c3                   	ret    

c0016cd1 <Vm::inbv(unsigned short)>:
c0016cd1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016cd5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016cda:	75 06                	jne    c0016ce2 <Vm::inbv(unsigned short)+0x11>
c0016cdc:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016ce1:	c3                   	ret    
c0016ce2:	ec                   	in     al,dx
c0016ce3:	c3                   	ret    

c0016ce4 <Vm::outbv(unsigned short, unsigned char)>:
c0016ce4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016ce8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cec:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016cf1:	75 25                	jne    c0016d18 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016cf3:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016cf9:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016cff:	8d 51 01             	lea    edx,[ecx+0x1]
c0016d02:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016d08:	83 fa 20             	cmp    edx,0x20
c0016d0b:	75 0c                	jne    c0016d19 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016d0d:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016d17:	c3                   	ret    
c0016d18:	ee                   	out    dx,al
c0016d19:	c3                   	ret    

c0016d1a <Vm::realToLinear(unsigned short, unsigned short)>:
c0016d1a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d1f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d24:	c1 e0 04             	shl    eax,0x4
c0016d27:	01 d0                	add    eax,edx
c0016d29:	c3                   	ret    

c0016d2a <Vm::getSegment(unsigned int)>:
c0016d2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d2e:	c1 e8 10             	shr    eax,0x10
c0016d31:	c3                   	ret    

c0016d32 <Vm::getOffset(unsigned int)>:
c0016d32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d36:	c3                   	ret    

c0016d37 <Vm::mainloop2()>:
c0016d37:	83 ec 18             	sub    esp,0x18
c0016d3a:	fa                   	cli    
c0016d3b:	6a 02                	push   0x2
c0016d3d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d43:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016d4a:	e8 95 f5 ff ff       	call   c00162e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d54:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016d58:	52                   	push   edx
c0016d59:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016d5d:	52                   	push   edx
c0016d5e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016d62:	52                   	push   edx
c0016d63:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016d67:	50                   	push   eax
c0016d68:	e8 a2 94 fe ff       	call   c000020f <goToVM86>
c0016d6d:	83 c4 2c             	add    esp,0x2c
c0016d70:	c3                   	ret    

c0016d71 <Vm::mainVm8086Loop(void*)>:
c0016d71:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d76:	48                   	dec    eax
c0016d77:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d7c:	75 01                	jne    c0016d7f <Vm::mainVm8086Loop(void*)+0xe>
c0016d7e:	fb                   	sti    
c0016d7f:	eb b6                	jmp    c0016d37 <Vm::mainloop2()>

c0016d81 <Vm::mainloop3(unsigned long)>:
c0016d81:	83 ec 18             	sub    esp,0x18
c0016d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d88:	fa                   	cli    
c0016d89:	6a 02                	push   0x2
c0016d8b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d91:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016d98:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016d9d:	e8 42 f5 ff ff       	call   c00162e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016da2:	83 c4 1c             	add    esp,0x1c
c0016da5:	eb 90                	jmp    c0016d37 <Vm::mainloop2()>

c0016da7 <Vm::initialise8086()>:
c0016da7:	83 ec 0c             	sub    esp,0xc
c0016daa:	68 80 00 00 00       	push   0x80
c0016daf:	6a 00                	push   0x0
c0016db1:	68 71 6d 01 c0       	push   0xc0016d71
c0016db6:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016dbc:	e8 ff f0 ff ff       	call   c0015ec0 <Process::createThread(void (*)(void*), void*, int)>
c0016dc1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016dc8:	68 00 01 00 00       	push   0x100
c0016dcd:	6a 00                	push   0x0
c0016dcf:	6a 00                	push   0x0
c0016dd1:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016dd6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016ddb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016de1:	e8 42 31 ff ff       	call   c0009f28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016de6:	83 c4 2c             	add    esp,0x2c
c0016de9:	c3                   	ret    

c0016dea <Vm::finish8086()>:
c0016dea:	53                   	push   ebx
c0016deb:	83 ec 08             	sub    esp,0x8
c0016dee:	fa                   	cli    
c0016def:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016df5:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016dfc:	75 15                	jne    c0016e13 <Vm::finish8086()+0x29>
c0016dfe:	e8 09 f3 ff ff       	call   c001610c <schedule()>
c0016e03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e08:	48                   	dec    eax
c0016e09:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e0e:	75 de                	jne    c0016dee <Vm::finish8086()+0x4>
c0016e10:	fb                   	sti    
c0016e11:	eb db                	jmp    c0016dee <Vm::finish8086()+0x4>
c0016e13:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016e1a:	83 ec 0c             	sub    esp,0xc
c0016e1d:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016e23:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e29:	e8 d6 f7 ff ff       	call   c0016604 <unblockTask(ThreadControlBlock*)>
c0016e2e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e33:	83 c4 10             	add    esp,0x10
c0016e36:	8d 50 ff             	lea    edx,[eax-0x1]
c0016e39:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016e3f:	85 d2                	test   edx,edx
c0016e41:	75 01                	jne    c0016e44 <Vm::finish8086()+0x5a>
c0016e43:	fb                   	sti    
c0016e44:	83 c4 08             	add    esp,0x8
c0016e47:	89 d8                	mov    eax,ebx
c0016e49:	5b                   	pop    ebx
c0016e4a:	c3                   	ret    

c0016e4b <Vm::getOutput8086(unsigned char*)>:
c0016e4b:	57                   	push   edi
c0016e4c:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016e52:	56                   	push   esi
c0016e53:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016e58:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016e5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e5e:	5e                   	pop    esi
c0016e5f:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016e64:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e6e:	5f                   	pop    edi
c0016e6f:	c3                   	ret    

c0016e70 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e70:	55                   	push   ebp
c0016e71:	57                   	push   edi
c0016e72:	56                   	push   esi
c0016e73:	53                   	push   ebx
c0016e74:	83 ec 0c             	sub    esp,0xc
c0016e77:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016e7b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016e7f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e83:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016e87:	fa                   	cli    
c0016e88:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e8e:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016e95:	75 15                	jne    c0016eac <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016e97:	e8 70 f2 ff ff       	call   c001610c <schedule()>
c0016e9c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ea1:	48                   	dec    eax
c0016ea2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ea7:	75 de                	jne    c0016e87 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016ea9:	fb                   	sti    
c0016eaa:	eb db                	jmp    c0016e87 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016eac:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016eb6:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016ebb:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016ebf:	0f b7 ff             	movzx  edi,di
c0016ec2:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016ec6:	0f b7 f6             	movzx  esi,si
c0016ec9:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016ecd:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016ed1:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016ed5:	50                   	push   eax
c0016ed6:	6a 20                	push   0x20
c0016ed8:	6a 00                	push   0x0
c0016eda:	68 40 c7 02 c0       	push   0xc002c740
c0016edf:	e8 0c 96 fe ff       	call   c00004f0 <memset>
c0016ee4:	5a                   	pop    edx
c0016ee5:	59                   	pop    ecx
c0016ee6:	57                   	push   edi
c0016ee7:	56                   	push   esi
c0016ee8:	e8 2d fe ff ff       	call   c0016d1a <Vm::realToLinear(unsigned short, unsigned short)>
c0016eed:	83 c4 10             	add    esp,0x10
c0016ef0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016ef4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016ef8:	89 c7                	mov    edi,eax
c0016efa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016efc:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016f03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f08:	48                   	dec    eax
c0016f09:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f0e:	75 01                	jne    c0016f11 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016f10:	fb                   	sti    
c0016f11:	83 ec 0c             	sub    esp,0xc
c0016f14:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016f1a:	e8 e5 f6 ff ff       	call   c0016604 <unblockTask(ThreadControlBlock*)>
c0016f1f:	83 c4 1c             	add    esp,0x1c
c0016f22:	b0 01                	mov    al,0x1
c0016f24:	5b                   	pop    ebx
c0016f25:	5e                   	pop    esi
c0016f26:	5f                   	pop    edi
c0016f27:	5d                   	pop    ebp
c0016f28:	c3                   	ret    

c0016f29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016f29:	55                   	push   ebp
c0016f2a:	57                   	push   edi
c0016f2b:	56                   	push   esi
c0016f2c:	53                   	push   ebx
c0016f2d:	83 ec 34             	sub    esp,0x34
c0016f30:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016f34:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016f38:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016f3c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016f40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f44:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f48:	68 9c 2b 02 c0       	push   0xc0022b9c
c0016f4d:	e8 d8 39 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0016f52:	83 c4 10             	add    esp,0x10
c0016f55:	fa                   	cli    
c0016f56:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016f5c:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f62:	84 db                	test   bl,bl
c0016f64:	75 15                	jne    c0016f7b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016f66:	e8 a1 f1 ff ff       	call   c001610c <schedule()>
c0016f6b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f70:	48                   	dec    eax
c0016f71:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f76:	75 dd                	jne    c0016f55 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f78:	fb                   	sti    
c0016f79:	eb da                	jmp    c0016f55 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f7b:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f89:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f8e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016f92:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f96:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f9a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f9e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016fa2:	50                   	push   eax
c0016fa3:	6a 20                	push   0x20
c0016fa5:	6a 00                	push   0x0
c0016fa7:	68 40 c7 02 c0       	push   0xc002c740
c0016fac:	e8 3f 95 fe ff       	call   c00004f0 <memset>
c0016fb1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016fb8:	e8 36 0b ff ff       	call   c0007af3 <malloc>
c0016fbd:	83 c4 0c             	add    esp,0xc
c0016fc0:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016fc6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016fca:	89 c5                	mov    ebp,eax
c0016fcc:	50                   	push   eax
c0016fcd:	e8 70 4b ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c0016fd2:	83 c4 10             	add    esp,0x10
c0016fd5:	85 ed                	test   ebp,ebp
c0016fd7:	75 0a                	jne    c0016fe3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016fd9:	83 ec 0c             	sub    esp,0xc
c0016fdc:	68 be 2b 02 c0       	push   0xc0022bbe
c0016fe1:	eb 2b                	jmp    c001700e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016fe3:	50                   	push   eax
c0016fe4:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016fe8:	50                   	push   eax
c0016fe9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016fed:	50                   	push   eax
c0016fee:	55                   	push   ebp
c0016fef:	e8 6e 4e ff ff       	call   c000be62 <File::stat(unsigned long long*, bool*)>
c0016ff4:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016ff8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016ffc:	83 c4 10             	add    esp,0x10
c0016fff:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0017004:	74 27                	je     c001702d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0017006:	83 ec 0c             	sub    esp,0xc
c0017009:	68 d2 2b 02 c0       	push   0xc0022bd2
c001700e:	e8 cc a5 ff ff       	call   c00115df <KePanic(char const*)>
c0017013:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017018:	83 c4 10             	add    esp,0x10
c001701b:	48                   	dec    eax
c001701c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017021:	85 c0                	test   eax,eax
c0017023:	75 01                	jne    c0017026 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017025:	fb                   	sti    
c0017026:	31 db                	xor    ebx,ebx
c0017028:	e9 90 00 00 00       	jmp    c00170bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c001702d:	51                   	push   ecx
c001702e:	51                   	push   ecx
c001702f:	6a 01                	push   0x1
c0017031:	55                   	push   ebp
c0017032:	e8 29 4b ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c0017037:	83 c4 10             	add    esp,0x10
c001703a:	85 c0                	test   eax,eax
c001703c:	74 26                	je     c0017064 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c001703e:	83 ec 0c             	sub    esp,0xc
c0017041:	68 eb 2b 02 c0       	push   0xc0022beb
c0017046:	e8 94 a5 ff ff       	call   c00115df <KePanic(char const*)>
c001704b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017050:	83 c4 10             	add    esp,0x10
c0017053:	48                   	dec    eax
c0017054:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017059:	85 c0                	test   eax,eax
c001705b:	75 c9                	jne    c0017026 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c001705d:	fb                   	sti    
c001705e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0017062:	eb 59                	jmp    c00170bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017064:	50                   	push   eax
c0017065:	0f b7 ff             	movzx  edi,di
c0017068:	50                   	push   eax
c0017069:	0f b7 f6             	movzx  esi,si
c001706c:	57                   	push   edi
c001706d:	56                   	push   esi
c001706e:	e8 a7 fc ff ff       	call   c0016d1a <Vm::realToLinear(unsigned short, unsigned short)>
c0017073:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017076:	5a                   	pop    edx
c0017077:	8d 74 24 20          	lea    esi,[esp+0x20]
c001707b:	56                   	push   esi
c001707c:	50                   	push   eax
c001707d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017081:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017085:	55                   	push   ebp
c0017086:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017089:	83 c4 14             	add    esp,0x14
c001708c:	55                   	push   ebp
c001708d:	e8 2c 4b ff ff       	call   c000bbbe <File::close()>
c0017092:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017097:	83 c4 10             	add    esp,0x10
c001709a:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c00170a1:	48                   	dec    eax
c00170a2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00170a7:	85 c0                	test   eax,eax
c00170a9:	75 01                	jne    c00170ac <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c00170ab:	fb                   	sti    
c00170ac:	83 ec 0c             	sub    esp,0xc
c00170af:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c00170b5:	e8 4a f5 ff ff       	call   c0016604 <unblockTask(ThreadControlBlock*)>
c00170ba:	83 c4 10             	add    esp,0x10
c00170bd:	83 c4 2c             	add    esp,0x2c
c00170c0:	88 d8                	mov    al,bl
c00170c2:	5b                   	pop    ebx
c00170c3:	5e                   	pop    esi
c00170c4:	5f                   	pop    edi
c00170c5:	5d                   	pop    ebp
c00170c6:	c3                   	ret    

c00170c7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00170c7:	57                   	push   edi
c00170c8:	56                   	push   esi
c00170c9:	53                   	push   ebx
c00170ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170d2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00170d6:	83 e8 06             	sub    eax,0x6
c00170d9:	0f b7 c0             	movzx  eax,ax
c00170dc:	50                   	push   eax
c00170dd:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00170e2:	50                   	push   eax
c00170e3:	e8 32 fc ff ff       	call   c0016d1a <Vm::realToLinear(unsigned short, unsigned short)>
c00170e8:	5a                   	pop    edx
c00170e9:	59                   	pop    ecx
c00170ea:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00170ed:	8d 51 fa             	lea    edx,[ecx-0x6]
c00170f0:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00170f3:	81 e2 ff ff 00 00    	and    edx,0xffff
c00170f9:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00170fc:	8d 51 02             	lea    edx,[ecx+0x2]
c00170ff:	66 89 10             	mov    WORD PTR [eax],dx
c0017102:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017106:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001710a:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c001710e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017111:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017115:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001711b:	89 f1                	mov    ecx,esi
c001711d:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0017121:	89 f2                	mov    edx,esi
c0017123:	0f b6 d6             	movzx  edx,dh
c0017126:	0f b6 f1             	movzx  esi,cl
c0017129:	74 0a                	je     c0017135 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c001712b:	c1 e2 08             	shl    edx,0x8
c001712e:	09 f2                	or     edx,esi
c0017130:	80 ce 02             	or     dh,0x2
c0017133:	eb 08                	jmp    c001713d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0017135:	c1 e2 08             	shl    edx,0x8
c0017138:	09 f2                	or     edx,esi
c001713a:	80 e6 fd             	and    dh,0xfd
c001713d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017141:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017146:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001714a:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017152:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017155:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c001715d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017160:	5b                   	pop    ebx
c0017161:	5e                   	pop    esi
c0017162:	5f                   	pop    edi
c0017163:	c3                   	ret    

c0017164 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017164:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017169:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001716e:	c1 e0 04             	shl    eax,0x4
c0017171:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017174:	c3                   	ret    

c0017175 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017175:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001717a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001717f:	c1 e0 04             	shl    eax,0x4
c0017182:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017186:	c3                   	ret    

c0017187 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017187:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001718c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017191:	c1 e0 04             	shl    eax,0x4
c0017194:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017197:	c3                   	ret    

c0017198 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017198:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001719d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171a2:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00171a6:	c1 e0 04             	shl    eax,0x4
c00171a9:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00171ac:	c3                   	ret    

c00171ad <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00171ad:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171b2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171bb:	c1 e0 04             	shl    eax,0x4
c00171be:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00171c2:	c3                   	ret    

c00171c3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00171c3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171c8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171d1:	c1 e0 04             	shl    eax,0x4
c00171d4:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00171d7:	c3                   	ret    

c00171d8 <Vm::faultHandler(regs*)>:
c00171d8:	55                   	push   ebp
c00171d9:	57                   	push   edi
c00171da:	56                   	push   esi
c00171db:	53                   	push   ebx
c00171dc:	83 ec 2c             	sub    esp,0x2c
c00171df:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00171e3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00171e6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00171ea:	0f b7 f8             	movzx  edi,ax
c00171ed:	0f b7 c0             	movzx  eax,ax
c00171f0:	52                   	push   edx
c00171f1:	50                   	push   eax
c00171f2:	e8 23 fb ff ff       	call   c0016d1a <Vm::realToLinear(unsigned short, unsigned short)>
c00171f7:	5a                   	pop    edx
c00171f8:	59                   	pop    ecx
c00171f9:	89 c1                	mov    ecx,eax
c00171fb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00171fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017202:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017207:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001720b:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001720e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017212:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017217:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001721b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001721f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017223:	e8 f2 fa ff ff       	call   c0016d1a <Vm::realToLinear(unsigned short, unsigned short)>
c0017228:	5e                   	pop    esi
c0017229:	be 06 00 00 00       	mov    esi,0x6
c001722e:	5d                   	pop    ebp
c001722f:	31 ed                	xor    ebp,ebp
c0017231:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017236:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017239:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001723f:	0f 84 74 02 00 00    	je     c00174b9 <Vm::faultHandler(regs*)+0x2e1>
c0017245:	0f 87 94 00 00 00    	ja     c00172df <Vm::faultHandler(regs*)+0x107>
c001724b:	83 fa 66             	cmp    edx,0x66
c001724e:	0f 84 e2 01 00 00    	je     c0017436 <Vm::faultHandler(regs*)+0x25e>
c0017254:	77 47                	ja     c001729d <Vm::faultHandler(regs*)+0xc5>
c0017256:	83 fa 36             	cmp    edx,0x36
c0017259:	0f 84 ca 01 00 00    	je     c0017429 <Vm::faultHandler(regs*)+0x251>
c001725f:	77 1a                	ja     c001727b <Vm::faultHandler(regs*)+0xa3>
c0017261:	83 fa 26             	cmp    edx,0x26
c0017264:	0f 84 98 01 00 00    	je     c0017402 <Vm::faultHandler(regs*)+0x22a>
c001726a:	83 fa 2e             	cmp    edx,0x2e
c001726d:	0f 85 27 06 00 00    	jne    c001789a <Vm::faultHandler(regs*)+0x6c2>
c0017273:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017276:	31 f6                	xor    esi,esi
c0017278:	41                   	inc    ecx
c0017279:	eb bb                	jmp    c0017236 <Vm::faultHandler(regs*)+0x5e>
c001727b:	83 fa 64             	cmp    edx,0x64
c001727e:	0f 84 8b 01 00 00    	je     c001740f <Vm::faultHandler(regs*)+0x237>
c0017284:	0f 87 92 01 00 00    	ja     c001741c <Vm::faultHandler(regs*)+0x244>
c001728a:	83 fa 3e             	cmp    edx,0x3e
c001728d:	0f 85 07 06 00 00    	jne    c001789a <Vm::faultHandler(regs*)+0x6c2>
c0017293:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017296:	be 01 00 00 00       	mov    esi,0x1
c001729b:	eb db                	jmp    c0017278 <Vm::faultHandler(regs*)+0xa0>
c001729d:	83 fa 6d             	cmp    edx,0x6d
c00172a0:	0f 84 34 03 00 00    	je     c00175da <Vm::faultHandler(regs*)+0x402>
c00172a6:	77 17                	ja     c00172bf <Vm::faultHandler(regs*)+0xe7>
c00172a8:	83 fa 67             	cmp    edx,0x67
c00172ab:	0f 84 92 01 00 00    	je     c0017443 <Vm::faultHandler(regs*)+0x26b>
c00172b1:	83 fa 6c             	cmp    edx,0x6c
c00172b4:	0f 84 b1 02 00 00    	je     c001756b <Vm::faultHandler(regs*)+0x393>
c00172ba:	e9 db 05 00 00       	jmp    c001789a <Vm::faultHandler(regs*)+0x6c2>
c00172bf:	83 fa 6f             	cmp    edx,0x6f
c00172c2:	0f 84 40 04 00 00    	je     c0017708 <Vm::faultHandler(regs*)+0x530>
c00172c8:	0f 82 a2 03 00 00    	jb     c0017670 <Vm::faultHandler(regs*)+0x498>
c00172ce:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00172d4:	0f 84 76 01 00 00    	je     c0017450 <Vm::faultHandler(regs*)+0x278>
c00172da:	e9 bb 05 00 00       	jmp    c001789a <Vm::faultHandler(regs*)+0x6c2>
c00172df:	81 fa ec 00 00 00    	cmp    edx,0xec
c00172e5:	0f 84 57 05 00 00    	je     c0017842 <Vm::faultHandler(regs*)+0x66a>
c00172eb:	0f 87 a9 00 00 00    	ja     c001739a <Vm::faultHandler(regs*)+0x1c2>
c00172f1:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00172f7:	0f 84 d6 04 00 00    	je     c00177d3 <Vm::faultHandler(regs*)+0x5fb>
c00172fd:	77 78                	ja     c0017377 <Vm::faultHandler(regs*)+0x19f>
c00172ff:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017305:	0f 84 0e 02 00 00    	je     c0017519 <Vm::faultHandler(regs*)+0x341>
c001730b:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017311:	0f 85 83 05 00 00    	jne    c001789a <Vm::faultHandler(regs*)+0x6c2>
c0017317:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001731b:	89 d1                	mov    ecx,edx
c001731d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017320:	c1 e1 08             	shl    ecx,0x8
c0017323:	09 ca                	or     edx,ecx
c0017325:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017328:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001732c:	89 d1                	mov    ecx,edx
c001732e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017332:	c1 e1 08             	shl    ecx,0x8
c0017335:	09 ca                	or     edx,ecx
c0017337:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001733a:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001733e:	89 d1                	mov    ecx,edx
c0017340:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017344:	c1 e1 08             	shl    ecx,0x8
c0017347:	09 ca                	or     edx,ecx
c0017349:	81 ca 00 02 02 00    	or     edx,0x20200
c001734f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017352:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0017356:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001735c:	d1 e8                	shr    eax,1
c001735e:	83 e0 01             	and    eax,0x1
c0017361:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017364:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017367:	83 c0 06             	add    eax,0x6
c001736a:	25 ff ff 00 00       	and    eax,0xffff
c001736f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017372:	e9 1f 05 00 00       	jmp    c0017896 <Vm::faultHandler(regs*)+0x6be>
c0017377:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001737d:	0f 84 95 04 00 00    	je     c0017818 <Vm::faultHandler(regs*)+0x640>
c0017383:	0f 82 66 04 00 00    	jb     c00177ef <Vm::faultHandler(regs*)+0x617>
c0017389:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001738f:	0f 84 9a 04 00 00    	je     c001782f <Vm::faultHandler(regs*)+0x657>
c0017395:	e9 00 05 00 00       	jmp    c001789a <Vm::faultHandler(regs*)+0x6c2>
c001739a:	81 fa ef 00 00 00    	cmp    edx,0xef
c00173a0:	0f 84 dd 04 00 00    	je     c0017883 <Vm::faultHandler(regs*)+0x6ab>
c00173a6:	77 2e                	ja     c00173d6 <Vm::faultHandler(regs*)+0x1fe>
c00173a8:	81 fa ed 00 00 00    	cmp    edx,0xed
c00173ae:	0f 84 aa 04 00 00    	je     c001785e <Vm::faultHandler(regs*)+0x686>
c00173b4:	81 fa ee 00 00 00    	cmp    edx,0xee
c00173ba:	0f 85 da 04 00 00    	jne    c001789a <Vm::faultHandler(regs*)+0x6c2>
c00173c0:	50                   	push   eax
c00173c1:	50                   	push   eax
c00173c2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00173c6:	50                   	push   eax
c00173c7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00173cb:	50                   	push   eax
c00173cc:	e8 13 f9 ff ff       	call   c0016ce4 <Vm::outbv(unsigned short, unsigned char)>
c00173d1:	e9 a5 04 00 00       	jmp    c001787b <Vm::faultHandler(regs*)+0x6a3>
c00173d6:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00173dc:	0f 84 6d 01 00 00    	je     c001754f <Vm::faultHandler(regs*)+0x377>
c00173e2:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00173e8:	0f 84 6f 01 00 00    	je     c001755d <Vm::faultHandler(regs*)+0x385>
c00173ee:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00173f4:	0f 85 a0 04 00 00    	jne    c001789a <Vm::faultHandler(regs*)+0x6c2>
c00173fa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173fd:	e9 76 fe ff ff       	jmp    c0017278 <Vm::faultHandler(regs*)+0xa0>
c0017402:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017405:	be 02 00 00 00       	mov    esi,0x2
c001740a:	e9 69 fe ff ff       	jmp    c0017278 <Vm::faultHandler(regs*)+0xa0>
c001740f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017412:	be 03 00 00 00       	mov    esi,0x3
c0017417:	e9 5c fe ff ff       	jmp    c0017278 <Vm::faultHandler(regs*)+0xa0>
c001741c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001741f:	be 04 00 00 00       	mov    esi,0x4
c0017424:	e9 4f fe ff ff       	jmp    c0017278 <Vm::faultHandler(regs*)+0xa0>
c0017429:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001742c:	be 05 00 00 00       	mov    esi,0x5
c0017431:	e9 42 fe ff ff       	jmp    c0017278 <Vm::faultHandler(regs*)+0xa0>
c0017436:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017439:	bd 01 00 00 00       	mov    ebp,0x1
c001743e:	e9 35 fe ff ff       	jmp    c0017278 <Vm::faultHandler(regs*)+0xa0>
c0017443:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017446:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001744b:	e9 28 fe ff ff       	jmp    c0017278 <Vm::faultHandler(regs*)+0xa0>
c0017450:	83 e5 01             	and    ebp,0x1
c0017453:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017456:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001745a:	74 30                	je     c001748c <Vm::faultHandler(regs*)+0x2b4>
c001745c:	83 e9 04             	sub    ecx,0x4
c001745f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017465:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001746b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001746e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017471:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017477:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001747b:	0f 84 12 04 00 00    	je     c0017893 <Vm::faultHandler(regs*)+0x6bb>
c0017481:	80 ce 02             	or     dh,0x2
c0017484:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017487:	e9 07 04 00 00       	jmp    c0017893 <Vm::faultHandler(regs*)+0x6bb>
c001748c:	83 e9 02             	sub    ecx,0x2
c001748f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017495:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017498:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001749c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00174a2:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00174a6:	74 05                	je     c00174ad <Vm::faultHandler(regs*)+0x2d5>
c00174a8:	80 ce 02             	or     dh,0x2
c00174ab:	eb 03                	jmp    c00174b0 <Vm::faultHandler(regs*)+0x2d8>
c00174ad:	80 e6 fd             	and    dh,0xfd
c00174b0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00174b4:	e9 da 03 00 00       	jmp    c0017893 <Vm::faultHandler(regs*)+0x6bb>
c00174b9:	83 e5 01             	and    ebp,0x1
c00174bc:	74 2a                	je     c00174e8 <Vm::faultHandler(regs*)+0x310>
c00174be:	8b 10                	mov    edx,DWORD PTR [eax]
c00174c0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00174c6:	81 ca 00 02 02 00    	or     edx,0x20200
c00174cc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00174cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00174d1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174d7:	c1 e8 09             	shr    eax,0x9
c00174da:	83 e0 01             	and    eax,0x1
c00174dd:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00174e0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00174e3:	83 c0 04             	add    eax,0x4
c00174e6:	eb 24                	jmp    c001750c <Vm::faultHandler(regs*)+0x334>
c00174e8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00174eb:	81 ca 00 02 02 00    	or     edx,0x20200
c00174f1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00174f4:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00174f7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174fd:	c1 e8 09             	shr    eax,0x9
c0017500:	83 e0 01             	and    eax,0x1
c0017503:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017506:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017509:	83 c0 02             	add    eax,0x2
c001750c:	25 ff ff 00 00       	and    eax,0xffff
c0017511:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017514:	e9 7a 03 00 00       	jmp    c0017893 <Vm::faultHandler(regs*)+0x6bb>
c0017519:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001751d:	3d ee 00 00 00       	cmp    eax,0xee
c0017522:	75 10                	jne    c0017534 <Vm::faultHandler(regs*)+0x35c>
c0017524:	83 ec 0c             	sub    esp,0xc
c0017527:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001752a:	e8 52 f8 ff ff       	call   c0016d81 <Vm::mainloop3(unsigned long)>
c001752f:	e9 4a 03 00 00       	jmp    c001787e <Vm::faultHandler(regs*)+0x6a6>
c0017534:	83 ec 0c             	sub    esp,0xc
c0017537:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001753b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001753f:	51                   	push   ecx
c0017540:	50                   	push   eax
c0017541:	53                   	push   ebx
c0017542:	e8 80 fb ff ff       	call   c00170c7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017547:	83 c4 20             	add    esp,0x20
c001754a:	e9 47 03 00 00       	jmp    c0017896 <Vm::faultHandler(regs*)+0x6be>
c001754f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017554:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017558:	e9 36 03 00 00       	jmp    c0017893 <Vm::faultHandler(regs*)+0x6bb>
c001755d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017562:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017566:	e9 28 03 00 00       	jmp    c0017893 <Vm::faultHandler(regs*)+0x6bb>
c001756b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017570:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017573:	74 2b                	je     c00175a0 <Vm::faultHandler(regs*)+0x3c8>
c0017575:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001757c:	76 22                	jbe    c00175a0 <Vm::faultHandler(regs*)+0x3c8>
c001757e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017582:	50                   	push   eax
c0017583:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017587:	50                   	push   eax
c0017588:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001758c:	50                   	push   eax
c001758d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017591:	50                   	push   eax
c0017592:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017596:	50                   	push   eax
c0017597:	6a 6c                	push   0x6c
c0017599:	6a 6c                	push   0x6c
c001759b:	e9 c0 01 00 00       	jmp    c0017760 <Vm::faultHandler(regs*)+0x588>
c00175a0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00175a4:	83 ec 0c             	sub    esp,0xc
c00175a7:	0f b7 f6             	movzx  esi,si
c00175aa:	50                   	push   eax
c00175ab:	e8 21 f7 ff ff       	call   c0016cd1 <Vm::inbv(unsigned short)>
c00175b0:	83 c4 0c             	add    esp,0xc
c00175b3:	0f b6 c0             	movzx  eax,al
c00175b6:	50                   	push   eax
c00175b7:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00175bb:	50                   	push   eax
c00175bc:	56                   	push   esi
c00175bd:	e8 d6 fb ff ff       	call   c0017198 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00175c2:	83 c4 10             	add    esp,0x10
c00175c5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175c8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175cc:	74 03                	je     c00175d1 <Vm::faultHandler(regs*)+0x3f9>
c00175ce:	48                   	dec    eax
c00175cf:	eb 01                	jmp    c00175d2 <Vm::faultHandler(regs*)+0x3fa>
c00175d1:	40                   	inc    eax
c00175d2:	0f b7 c0             	movzx  eax,ax
c00175d5:	e9 8e 00 00 00       	jmp    c0017668 <Vm::faultHandler(regs*)+0x490>
c00175da:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175df:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00175e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175e5:	74 29                	je     c0017610 <Vm::faultHandler(regs*)+0x438>
c00175e7:	3d ff ff 00 00       	cmp    eax,0xffff
c00175ec:	76 22                	jbe    c0017610 <Vm::faultHandler(regs*)+0x438>
c00175ee:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175f2:	50                   	push   eax
c00175f3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175f7:	50                   	push   eax
c00175f8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175fc:	50                   	push   eax
c00175fd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017601:	50                   	push   eax
c0017602:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017606:	50                   	push   eax
c0017607:	6a 6d                	push   0x6d
c0017609:	6a 6d                	push   0x6d
c001760b:	e9 50 01 00 00       	jmp    c0017760 <Vm::faultHandler(regs*)+0x588>
c0017610:	83 e5 01             	and    ebp,0x1
c0017613:	0f b7 c8             	movzx  ecx,ax
c0017616:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017619:	0f b7 f6             	movzx  esi,si
c001761c:	74 1e                	je     c001763c <Vm::faultHandler(regs*)+0x464>
c001761e:	ed                   	in     eax,dx
c001761f:	55                   	push   ebp
c0017620:	50                   	push   eax
c0017621:	51                   	push   ecx
c0017622:	56                   	push   esi
c0017623:	e8 9b fb ff ff       	call   c00171c3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017628:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001762b:	83 c4 10             	add    esp,0x10
c001762e:	8d 50 04             	lea    edx,[eax+0x4]
c0017631:	83 e8 04             	sub    eax,0x4
c0017634:	81 e2 ff ff 00 00    	and    edx,0xffff
c001763a:	eb 20                	jmp    c001765c <Vm::faultHandler(regs*)+0x484>
c001763c:	66 ed                	in     ax,dx
c001763e:	57                   	push   edi
c001763f:	0f b7 c0             	movzx  eax,ax
c0017642:	50                   	push   eax
c0017643:	51                   	push   ecx
c0017644:	56                   	push   esi
c0017645:	e8 63 fb ff ff       	call   c00171ad <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001764a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001764d:	83 c4 10             	add    esp,0x10
c0017650:	8d 50 02             	lea    edx,[eax+0x2]
c0017653:	83 e8 02             	sub    eax,0x2
c0017656:	81 e2 ff ff 00 00    	and    edx,0xffff
c001765c:	25 ff ff 00 00       	and    eax,0xffff
c0017661:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017665:	0f 44 c2             	cmove  eax,edx
c0017668:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001766b:	e9 23 02 00 00       	jmp    c0017893 <Vm::faultHandler(regs*)+0x6bb>
c0017670:	8d 46 ff             	lea    eax,[esi-0x1]
c0017673:	0f b6 f0             	movzx  esi,al
c0017676:	83 fe 05             	cmp    esi,0x5
c0017679:	77 23                	ja     c001769e <Vm::faultHandler(regs*)+0x4c6>
c001767b:	ff 24 b5 60 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd3a0]
c0017682:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017687:	eb 15                	jmp    c001769e <Vm::faultHandler(regs*)+0x4c6>
c0017689:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001768d:	eb 0f                	jmp    c001769e <Vm::faultHandler(regs*)+0x4c6>
c001768f:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017693:	eb 09                	jmp    c001769e <Vm::faultHandler(regs*)+0x4c6>
c0017695:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017699:	eb 03                	jmp    c001769e <Vm::faultHandler(regs*)+0x4c6>
c001769b:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001769e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00176a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176a6:	74 29                	je     c00176d1 <Vm::faultHandler(regs*)+0x4f9>
c00176a8:	3d ff ff 00 00       	cmp    eax,0xffff
c00176ad:	76 22                	jbe    c00176d1 <Vm::faultHandler(regs*)+0x4f9>
c00176af:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00176b3:	50                   	push   eax
c00176b4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176b8:	50                   	push   eax
c00176b9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00176bd:	50                   	push   eax
c00176be:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176c2:	50                   	push   eax
c00176c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176c7:	50                   	push   eax
c00176c8:	6a 6e                	push   0x6e
c00176ca:	6a 6e                	push   0x6e
c00176cc:	e9 8f 00 00 00       	jmp    c0017760 <Vm::faultHandler(regs*)+0x588>
c00176d1:	52                   	push   edx
c00176d2:	0f b7 c0             	movzx  eax,ax
c00176d5:	52                   	push   edx
c00176d6:	50                   	push   eax
c00176d7:	57                   	push   edi
c00176d8:	e8 87 fa ff ff       	call   c0017164 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00176dd:	59                   	pop    ecx
c00176de:	5e                   	pop    esi
c00176df:	0f b6 c0             	movzx  eax,al
c00176e2:	50                   	push   eax
c00176e3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00176e7:	50                   	push   eax
c00176e8:	e8 f7 f5 ff ff       	call   c0016ce4 <Vm::outbv(unsigned short, unsigned char)>
c00176ed:	83 c4 10             	add    esp,0x10
c00176f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176f3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176f7:	74 03                	je     c00176fc <Vm::faultHandler(regs*)+0x524>
c00176f9:	48                   	dec    eax
c00176fa:	eb 01                	jmp    c00176fd <Vm::faultHandler(regs*)+0x525>
c00176fc:	40                   	inc    eax
c00176fd:	0f b7 c0             	movzx  eax,ax
c0017700:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017703:	e9 8b 01 00 00       	jmp    c0017893 <Vm::faultHandler(regs*)+0x6bb>
c0017708:	8d 46 ff             	lea    eax,[esi-0x1]
c001770b:	0f b6 f0             	movzx  esi,al
c001770e:	83 fe 05             	cmp    esi,0x5
c0017711:	77 1e                	ja     c0017731 <Vm::faultHandler(regs*)+0x559>
c0017713:	ff 24 b5 78 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd388]
c001771a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001771e:	eb 11                	jmp    c0017731 <Vm::faultHandler(regs*)+0x559>
c0017720:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017723:	eb 0c                	jmp    c0017731 <Vm::faultHandler(regs*)+0x559>
c0017725:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017728:	eb 07                	jmp    c0017731 <Vm::faultHandler(regs*)+0x559>
c001772a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001772d:	eb 02                	jmp    c0017731 <Vm::faultHandler(regs*)+0x559>
c001772f:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017731:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017736:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017739:	74 37                	je     c0017772 <Vm::faultHandler(regs*)+0x59a>
c001773b:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017741:	76 2f                	jbe    c0017772 <Vm::faultHandler(regs*)+0x59a>
c0017743:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017747:	50                   	push   eax
c0017748:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001774c:	50                   	push   eax
c001774d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017751:	50                   	push   eax
c0017752:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017756:	50                   	push   eax
c0017757:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001775b:	50                   	push   eax
c001775c:	6a 6f                	push   0x6f
c001775e:	6a 6f                	push   0x6f
c0017760:	68 04 2c 02 c0       	push   0xc0022c04
c0017765:	e8 c0 31 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001776a:	83 c4 20             	add    esp,0x20
c001776d:	e9 86 01 00 00       	jmp    c00178f8 <Vm::faultHandler(regs*)+0x720>
c0017772:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017775:	0f b7 d7             	movzx  edx,di
c0017778:	0f b7 c6             	movzx  eax,si
c001777b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001777e:	81 e1 00 04 00 00    	and    ecx,0x400
c0017784:	83 e5 01             	and    ebp,0x1
c0017787:	74 1c                	je     c00177a5 <Vm::faultHandler(regs*)+0x5cd>
c0017789:	55                   	push   ebp
c001778a:	55                   	push   ebp
c001778b:	50                   	push   eax
c001778c:	52                   	push   edx
c001778d:	e8 f5 f9 ff ff       	call   c0017187 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017792:	83 c4 10             	add    esp,0x10
c0017795:	89 fa                	mov    edx,edi
c0017797:	ef                   	out    dx,eax
c0017798:	8d 46 04             	lea    eax,[esi+0x4]
c001779b:	83 ee 04             	sub    esi,0x4
c001779e:	25 ff ff 00 00       	and    eax,0xffff
c00177a3:	eb 1b                	jmp    c00177c0 <Vm::faultHandler(regs*)+0x5e8>
c00177a5:	55                   	push   ebp
c00177a6:	55                   	push   ebp
c00177a7:	50                   	push   eax
c00177a8:	52                   	push   edx
c00177a9:	e8 c7 f9 ff ff       	call   c0017175 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00177ae:	83 c4 10             	add    esp,0x10
c00177b1:	89 fa                	mov    edx,edi
c00177b3:	66 ef                	out    dx,ax
c00177b5:	8d 46 02             	lea    eax,[esi+0x2]
c00177b8:	83 ee 02             	sub    esi,0x2
c00177bb:	25 ff ff 00 00       	and    eax,0xffff
c00177c0:	81 e6 ff ff 00 00    	and    esi,0xffff
c00177c6:	85 c9                	test   ecx,ecx
c00177c8:	0f 44 f0             	cmove  esi,eax
c00177cb:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00177ce:	e9 c0 00 00 00       	jmp    c0017893 <Vm::faultHandler(regs*)+0x6bb>
c00177d3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00177da:	83 ec 0c             	sub    esp,0xc
c00177dd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177e1:	50                   	push   eax
c00177e2:	e8 ea f4 ff ff       	call   c0016cd1 <Vm::inbv(unsigned short)>
c00177e7:	0f b6 c0             	movzx  eax,al
c00177ea:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00177ed:	eb 3a                	jmp    c0017829 <Vm::faultHandler(regs*)+0x651>
c00177ef:	83 e5 01             	and    ebp,0x1
c00177f2:	74 07                	je     c00177fb <Vm::faultHandler(regs*)+0x623>
c00177f4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177f8:	ed                   	in     eax,dx
c00177f9:	eb 14                	jmp    c001780f <Vm::faultHandler(regs*)+0x637>
c00177fb:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00177fe:	66 31 f6             	xor    si,si
c0017801:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017804:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017808:	66 ed                	in     ax,dx
c001780a:	0f b7 c0             	movzx  eax,ax
c001780d:	09 f0                	or     eax,esi
c001780f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017812:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017816:	eb 7e                	jmp    c0017896 <Vm::faultHandler(regs*)+0x6be>
c0017818:	52                   	push   edx
c0017819:	52                   	push   edx
c001781a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001781e:	50                   	push   eax
c001781f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017823:	50                   	push   eax
c0017824:	e8 bb f4 ff ff       	call   c0016ce4 <Vm::outbv(unsigned short, unsigned char)>
c0017829:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001782d:	eb 4f                	jmp    c001787e <Vm::faultHandler(regs*)+0x6a6>
c001782f:	83 e5 01             	and    ebp,0x1
c0017832:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017835:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017839:	74 03                	je     c001783e <Vm::faultHandler(regs*)+0x666>
c001783b:	ef                   	out    dx,eax
c001783c:	eb d4                	jmp    c0017812 <Vm::faultHandler(regs*)+0x63a>
c001783e:	66 ef                	out    dx,ax
c0017840:	eb d0                	jmp    c0017812 <Vm::faultHandler(regs*)+0x63a>
c0017842:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017846:	83 ec 0c             	sub    esp,0xc
c0017849:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017850:	50                   	push   eax
c0017851:	e8 7b f4 ff ff       	call   c0016cd1 <Vm::inbv(unsigned short)>
c0017856:	0f b6 c0             	movzx  eax,al
c0017859:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001785c:	eb 1d                	jmp    c001787b <Vm::faultHandler(regs*)+0x6a3>
c001785e:	83 e5 01             	and    ebp,0x1
c0017861:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017864:	74 03                	je     c0017869 <Vm::faultHandler(regs*)+0x691>
c0017866:	ed                   	in     eax,dx
c0017867:	eb 0d                	jmp    c0017876 <Vm::faultHandler(regs*)+0x69e>
c0017869:	66 ed                	in     ax,dx
c001786b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001786e:	0f b7 c0             	movzx  eax,ax
c0017871:	66 31 d2             	xor    dx,dx
c0017874:	09 d0                	or     eax,edx
c0017876:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017879:	eb 18                	jmp    c0017893 <Vm::faultHandler(regs*)+0x6bb>
c001787b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001787e:	83 c4 10             	add    esp,0x10
c0017881:	eb 13                	jmp    c0017896 <Vm::faultHandler(regs*)+0x6be>
c0017883:	83 e5 01             	and    ebp,0x1
c0017886:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017889:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001788c:	74 03                	je     c0017891 <Vm::faultHandler(regs*)+0x6b9>
c001788e:	ef                   	out    dx,eax
c001788f:	eb 02                	jmp    c0017893 <Vm::faultHandler(regs*)+0x6bb>
c0017891:	66 ef                	out    dx,ax
c0017893:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017896:	b0 01                	mov    al,0x1
c0017898:	eb 60                	jmp    c00178fa <Vm::faultHandler(regs*)+0x722>
c001789a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001789e:	50                   	push   eax
c001789f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00178a3:	50                   	push   eax
c00178a4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00178a8:	50                   	push   eax
c00178a9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00178ad:	50                   	push   eax
c00178ae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00178b2:	50                   	push   eax
c00178b3:	52                   	push   edx
c00178b4:	52                   	push   edx
c00178b5:	68 31 2c 02 c0       	push   0xc0022c31
c00178ba:	e8 6b 30 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00178bf:	83 c4 20             	add    esp,0x20
c00178c2:	83 ec 0c             	sub    esp,0xc
c00178c5:	6a 60                	push   0x60
c00178c7:	e8 05 f4 ff ff       	call   c0016cd1 <Vm::inbv(unsigned short)>
c00178cc:	83 c4 10             	add    esp,0x10
c00178cf:	0f b6 d0             	movzx  edx,al
c00178d2:	83 fa 1c             	cmp    edx,0x1c
c00178d5:	74 05                	je     c00178dc <Vm::faultHandler(regs*)+0x704>
c00178d7:	83 fa 5a             	cmp    edx,0x5a
c00178da:	75 e6                	jne    c00178c2 <Vm::faultHandler(regs*)+0x6ea>
c00178dc:	0f b6 c0             	movzx  eax,al
c00178df:	83 f8 1c             	cmp    eax,0x1c
c00178e2:	74 05                	je     c00178e9 <Vm::faultHandler(regs*)+0x711>
c00178e4:	83 f8 5a             	cmp    eax,0x5a
c00178e7:	75 0f                	jne    c00178f8 <Vm::faultHandler(regs*)+0x720>
c00178e9:	83 ec 0c             	sub    esp,0xc
c00178ec:	6a 60                	push   0x60
c00178ee:	e8 de f3 ff ff       	call   c0016cd1 <Vm::inbv(unsigned short)>
c00178f3:	83 c4 10             	add    esp,0x10
c00178f6:	eb e4                	jmp    c00178dc <Vm::faultHandler(regs*)+0x704>
c00178f8:	31 c0                	xor    eax,eax
c00178fa:	83 c4 2c             	add    esp,0x2c
c00178fd:	5b                   	pop    ebx
c00178fe:	5e                   	pop    esi
c00178ff:	5f                   	pop    edi
c0017900:	5d                   	pop    ebp
c0017901:	c3                   	ret    

c0017902 <noCopro(unsigned long)>:
c0017902:	c3                   	ret    

c0017903 <nmiHandler(regs*, void*)>:
c0017903:	83 ec 0c             	sub    esp,0xc
c0017906:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001790b:	83 ec 0c             	sub    esp,0xc
c001790e:	50                   	push   eax
c001790f:	e8 e4 f9 fe ff       	call   c00072f8 <Computer::handleNMI()>
c0017914:	83 c4 10             	add    esp,0x10
c0017917:	90                   	nop
c0017918:	83 c4 0c             	add    esp,0xc
c001791b:	c3                   	ret    

c001791c <doubleFault(regs*, void*)>:
c001791c:	55                   	push   ebp
c001791d:	89 e5                	mov    ebp,esp
c001791f:	83 ec 08             	sub    esp,0x8
c0017922:	83 ec 0c             	sub    esp,0xc
c0017925:	68 90 2c 02 c0       	push   0xc0022c90
c001792a:	e8 b0 9c ff ff       	call   c00115df <KePanic(char const*)>
c001792f:	83 c4 10             	add    esp,0x10
c0017932:	90                   	nop
c0017933:	c9                   	leave  
c0017934:	c3                   	ret    

c0017935 <displayDebugInfo(regs*)>:
c0017935:	83 ec 1c             	sub    esp,0x1c
c0017938:	0f 20 c0             	mov    eax,cr0
c001793b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001793f:	0f 20 d0             	mov    eax,cr2
c0017942:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017946:	0f 20 d8             	mov    eax,cr3
c0017949:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001794d:	0f 20 e0             	mov    eax,cr4
c0017950:	89 04 24             	mov    DWORD PTR [esp],eax
c0017953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017957:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001795a:	83 ec 08             	sub    esp,0x8
c001795d:	50                   	push   eax
c001795e:	68 ac 2c 02 c0       	push   0xc0022cac
c0017963:	e8 c2 2f ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0017968:	83 c4 10             	add    esp,0x10
c001796b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001796f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017972:	83 ec 08             	sub    esp,0x8
c0017975:	50                   	push   eax
c0017976:	68 9d 2c 02 c0       	push   0xc0022c9d
c001797b:	e8 aa 2f ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0017980:	83 c4 10             	add    esp,0x10
c0017983:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017987:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001798a:	83 ec 08             	sub    esp,0x8
c001798d:	50                   	push   eax
c001798e:	68 a8 2c 02 c0       	push   0xc0022ca8
c0017993:	e8 92 2f ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0017998:	83 c4 10             	add    esp,0x10
c001799b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001799f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00179a2:	83 ec 08             	sub    esp,0x8
c00179a5:	50                   	push   eax
c00179a6:	68 b7 2c 02 c0       	push   0xc0022cb7
c00179ab:	e8 7a 2f ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00179b0:	83 c4 10             	add    esp,0x10
c00179b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b7:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00179ba:	83 ec 08             	sub    esp,0x8
c00179bd:	50                   	push   eax
c00179be:	68 c2 2c 02 c0       	push   0xc0022cc2
c00179c3:	e8 62 2f ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00179c8:	83 c4 10             	add    esp,0x10
c00179cb:	83 ec 08             	sub    esp,0x8
c00179ce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179d2:	68 cd 2c 02 c0       	push   0xc0022ccd
c00179d7:	e8 4e 2f ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00179dc:	83 c4 10             	add    esp,0x10
c00179df:	83 ec 08             	sub    esp,0x8
c00179e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00179e6:	68 d8 2c 02 c0       	push   0xc0022cd8
c00179eb:	e8 3a 2f ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00179f0:	83 c4 10             	add    esp,0x10
c00179f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00179fa:	c1 e0 05             	shl    eax,0x5
c00179fd:	8d 90 60 40 02 c0    	lea    edx,[eax-0x3ffdbfa0]
c0017a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a07:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a0a:	83 ec 04             	sub    esp,0x4
c0017a0d:	52                   	push   edx
c0017a0e:	50                   	push   eax
c0017a0f:	68 e3 2c 02 c0       	push   0xc0022ce3
c0017a14:	e8 11 2f ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0017a19:	83 c4 10             	add    esp,0x10
c0017a1c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a21:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a27:	83 ec 0c             	sub    esp,0xc
c0017a2a:	50                   	push   eax
c0017a2b:	e8 5f 0d ff ff       	call   c000878f <setActiveTerminal(VgaText*)>
c0017a30:	83 c4 10             	add    esp,0x10
c0017a33:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a38:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a3e:	83 ec 08             	sub    esp,0x8
c0017a41:	68 f2 2c 02 c0       	push   0xc0022cf2
c0017a46:	50                   	push   eax
c0017a47:	e8 80 10 ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0017a4c:	83 c4 10             	add    esp,0x10
c0017a4f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a54:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a5a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a5e:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017a61:	83 ec 08             	sub    esp,0x8
c0017a64:	52                   	push   edx
c0017a65:	50                   	push   eax
c0017a66:	e8 1b 10 ff ff       	call   c0008a86 <VgaText::putx(unsigned int)>
c0017a6b:	83 c4 10             	add    esp,0x10
c0017a6e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a73:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a79:	83 ec 08             	sub    esp,0x8
c0017a7c:	68 00 2d 02 c0       	push   0xc0022d00
c0017a81:	50                   	push   eax
c0017a82:	e8 45 10 ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0017a87:	83 c4 10             	add    esp,0x10
c0017a8a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a8f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a95:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017a9a:	8b 12                	mov    edx,DWORD PTR [edx]
c0017a9c:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017a9f:	83 c2 0c             	add    edx,0xc
c0017aa2:	83 ec 08             	sub    esp,0x8
c0017aa5:	52                   	push   edx
c0017aa6:	50                   	push   eax
c0017aa7:	e8 20 10 ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0017aac:	83 c4 10             	add    esp,0x10
c0017aaf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ab4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aba:	83 ec 08             	sub    esp,0x8
c0017abd:	68 09 2d 02 c0       	push   0xc0022d09
c0017ac2:	50                   	push   eax
c0017ac3:	e8 04 10 ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0017ac8:	83 c4 10             	add    esp,0x10
c0017acb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ad0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ad6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ada:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017add:	83 ec 08             	sub    esp,0x8
c0017ae0:	52                   	push   edx
c0017ae1:	50                   	push   eax
c0017ae2:	e8 9f 0f ff ff       	call   c0008a86 <VgaText::putx(unsigned int)>
c0017ae7:	83 c4 10             	add    esp,0x10
c0017aea:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017af5:	83 ec 08             	sub    esp,0x8
c0017af8:	68 11 2d 02 c0       	push   0xc0022d11
c0017afd:	50                   	push   eax
c0017afe:	e8 c9 0f ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0017b03:	83 c4 10             	add    esp,0x10
c0017b06:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b0b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b15:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017b18:	83 ec 08             	sub    esp,0x8
c0017b1b:	52                   	push   edx
c0017b1c:	50                   	push   eax
c0017b1d:	e8 64 0f ff ff       	call   c0008a86 <VgaText::putx(unsigned int)>
c0017b22:	83 c4 10             	add    esp,0x10
c0017b25:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b2a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b30:	83 ec 08             	sub    esp,0x8
c0017b33:	68 19 2d 02 c0       	push   0xc0022d19
c0017b38:	50                   	push   eax
c0017b39:	e8 8e 0f ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0017b3e:	83 c4 10             	add    esp,0x10
c0017b41:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b50:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017b53:	83 ec 08             	sub    esp,0x8
c0017b56:	52                   	push   edx
c0017b57:	50                   	push   eax
c0017b58:	e8 29 0f ff ff       	call   c0008a86 <VgaText::putx(unsigned int)>
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b65:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b6b:	83 ec 08             	sub    esp,0x8
c0017b6e:	68 21 2d 02 c0       	push   0xc0022d21
c0017b73:	50                   	push   eax
c0017b74:	e8 53 0f ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0017b79:	83 c4 10             	add    esp,0x10
c0017b7c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b81:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b8b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b8e:	83 ec 08             	sub    esp,0x8
c0017b91:	52                   	push   edx
c0017b92:	50                   	push   eax
c0017b93:	e8 ee 0e ff ff       	call   c0008a86 <VgaText::putx(unsigned int)>
c0017b98:	83 c4 10             	add    esp,0x10
c0017b9b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ba0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ba6:	83 ec 08             	sub    esp,0x8
c0017ba9:	68 29 2d 02 c0       	push   0xc0022d29
c0017bae:	50                   	push   eax
c0017baf:	e8 18 0f ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0017bb4:	83 c4 10             	add    esp,0x10
c0017bb7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bbc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bc2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bc6:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017bc9:	83 ec 08             	sub    esp,0x8
c0017bcc:	52                   	push   edx
c0017bcd:	50                   	push   eax
c0017bce:	e8 b3 0e ff ff       	call   c0008a86 <VgaText::putx(unsigned int)>
c0017bd3:	83 c4 10             	add    esp,0x10
c0017bd6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bdb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017be1:	83 ec 08             	sub    esp,0x8
c0017be4:	68 31 2d 02 c0       	push   0xc0022d31
c0017be9:	50                   	push   eax
c0017bea:	e8 dd 0e ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0017bef:	83 c4 10             	add    esp,0x10
c0017bf2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bf7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bfd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c01:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017c04:	83 ec 08             	sub    esp,0x8
c0017c07:	52                   	push   edx
c0017c08:	50                   	push   eax
c0017c09:	e8 78 0e ff ff       	call   c0008a86 <VgaText::putx(unsigned int)>
c0017c0e:	83 c4 10             	add    esp,0x10
c0017c11:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c1c:	83 ec 08             	sub    esp,0x8
c0017c1f:	68 39 2d 02 c0       	push   0xc0022d39
c0017c24:	50                   	push   eax
c0017c25:	e8 a2 0e ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0017c2a:	83 c4 10             	add    esp,0x10
c0017c2d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c32:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c38:	83 ec 08             	sub    esp,0x8
c0017c3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c3f:	50                   	push   eax
c0017c40:	e8 41 0e ff ff       	call   c0008a86 <VgaText::putx(unsigned int)>
c0017c45:	83 c4 10             	add    esp,0x10
c0017c48:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c4d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c53:	83 ec 08             	sub    esp,0x8
c0017c56:	68 42 2d 02 c0       	push   0xc0022d42
c0017c5b:	50                   	push   eax
c0017c5c:	e8 6b 0e ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0017c61:	83 c4 10             	add    esp,0x10
c0017c64:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c69:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c6f:	83 ec 08             	sub    esp,0x8
c0017c72:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c76:	50                   	push   eax
c0017c77:	e8 0a 0e ff ff       	call   c0008a86 <VgaText::putx(unsigned int)>
c0017c7c:	83 c4 10             	add    esp,0x10
c0017c7f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c84:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c8a:	83 ec 08             	sub    esp,0x8
c0017c8d:	68 4a 2d 02 c0       	push   0xc0022d4a
c0017c92:	50                   	push   eax
c0017c93:	e8 34 0e ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0017c98:	83 c4 10             	add    esp,0x10
c0017c9b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ca0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ca6:	83 ec 08             	sub    esp,0x8
c0017ca9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017cad:	50                   	push   eax
c0017cae:	e8 d3 0d ff ff       	call   c0008a86 <VgaText::putx(unsigned int)>
c0017cb3:	83 c4 10             	add    esp,0x10
c0017cb6:	fa                   	cli    
c0017cb7:	f4                   	hlt    
c0017cb8:	eb fe                	jmp    c0017cb8 <displayDebugInfo(regs*)+0x383>

c0017cba <HalSystemIdle()>:
c0017cba:	56                   	push   esi
c0017cbb:	53                   	push   ebx
c0017cbc:	83 ec 14             	sub    esp,0x14
c0017cbf:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017cc4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017cca:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017cd0:	83 e0 04             	and    eax,0x4
c0017cd3:	0f b6 c0             	movzx  eax,al
c0017cd6:	85 c0                	test   eax,eax
c0017cd8:	0f 95 c0             	setne  al
c0017cdb:	0f b6 c0             	movzx  eax,al
c0017cde:	85 c0                	test   eax,eax
c0017ce0:	74 4c                	je     c0017d2e <HalSystemIdle()+0x74>
c0017ce2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017ce7:	83 ec 08             	sub    esp,0x8
c0017cea:	68 e1 00 00 00       	push   0xe1
c0017cef:	50                   	push   eax
c0017cf0:	e8 0f f4 fe ff       	call   c0007104 <Computer::rdmsr(unsigned int)>
c0017cf5:	83 c4 10             	add    esp,0x10
c0017cf8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017cfc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d00:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d05:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d09:	83 e2 02             	and    edx,0x2
c0017d0c:	89 d3                	mov    ebx,edx
c0017d0e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d12:	83 e2 00             	and    edx,0x0
c0017d15:	89 d6                	mov    esi,edx
c0017d17:	56                   	push   esi
c0017d18:	53                   	push   ebx
c0017d19:	68 e1 00 00 00       	push   0xe1
c0017d1e:	50                   	push   eax
c0017d1f:	e8 0c f4 fe ff       	call   c0007130 <Computer::wrmsr(unsigned int, unsigned long long)>
c0017d24:	83 c4 10             	add    esp,0x10
c0017d27:	e8 68 84 fe ff       	call   c0000194 <doTPAUSE>
c0017d2c:	eb 01                	jmp    c0017d2f <HalSystemIdle()+0x75>
c0017d2e:	f4                   	hlt    
c0017d2f:	90                   	nop
c0017d30:	83 c4 14             	add    esp,0x14
c0017d33:	5b                   	pop    ebx
c0017d34:	5e                   	pop    esi
c0017d35:	c3                   	ret    

c0017d36 <displayProgramFault(char const*)>:
c0017d36:	83 ec 0c             	sub    esp,0xc
c0017d39:	83 ec 0c             	sub    esp,0xc
c0017d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d40:	e8 e5 2b ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0017d45:	83 c4 10             	add    esp,0x10
c0017d48:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d4f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d52:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d58:	85 c0                	test   eax,eax
c0017d5a:	74 21                	je     c0017d7d <displayProgramFault(char const*)+0x47>
c0017d5c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d61:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d63:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d66:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d6c:	6a 04                	push   0x4
c0017d6e:	6a 0f                	push   0xf
c0017d70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d74:	50                   	push   eax
c0017d75:	e8 c4 0d ff ff       	call   c0008b3e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017d7a:	83 c4 10             	add    esp,0x10
c0017d7d:	90                   	nop
c0017d7e:	83 c4 0c             	add    esp,0xc
c0017d81:	c3                   	ret    

c0017d82 <gpFault(regs*, void*)>:
c0017d82:	83 ec 1c             	sub    esp,0x1c
c0017d85:	c7 05 74 c7 02 c0 d8 71 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc00171d8
c0017d8f:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d94:	85 c0                	test   eax,eax
c0017d96:	74 1e                	je     c0017db6 <gpFault(regs*, void*)+0x34>
c0017d98:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d9d:	83 ec 0c             	sub    esp,0xc
c0017da0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017da4:	ff d0                	call   eax
c0017da6:	83 c4 10             	add    esp,0x10
c0017da9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017dad:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017db2:	85 c0                	test   eax,eax
c0017db4:	75 2e                	jne    c0017de4 <gpFault(regs*, void*)+0x62>
c0017db6:	83 ec 0c             	sub    esp,0xc
c0017db9:	68 52 2d 02 c0       	push   0xc0022d52
c0017dbe:	e8 73 ff ff ff       	call   c0017d36 <displayProgramFault(char const*)>
c0017dc3:	83 c4 10             	add    esp,0x10
c0017dc6:	83 ec 0c             	sub    esp,0xc
c0017dc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dcd:	e8 63 fb ff ff       	call   c0017935 <displayDebugInfo(regs*)>
c0017dd2:	83 c4 10             	add    esp,0x10
c0017dd5:	83 ec 0c             	sub    esp,0xc
c0017dd8:	6a 00                	push   0x0
c0017dda:	e8 99 ed ff ff       	call   c0016b78 <Thr::terminateFromIRQ(int)>
c0017ddf:	83 c4 10             	add    esp,0x10
c0017de2:	eb 01                	jmp    c0017de5 <gpFault(regs*, void*)+0x63>
c0017de4:	90                   	nop
c0017de5:	83 c4 1c             	add    esp,0x1c
c0017de8:	c3                   	ret    

c0017de9 <pgFault(regs*, void*)>:
c0017de9:	83 ec 1c             	sub    esp,0x1c
c0017dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017df0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017df3:	0f 20 d0             	mov    eax,cr2
c0017df6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017dfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dfe:	83 ec 04             	sub    esp,0x4
c0017e01:	52                   	push   edx
c0017e02:	50                   	push   eax
c0017e03:	68 30 2e 02 c0       	push   0xc0022e30
c0017e08:	e8 1d 2b ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0017e0d:	83 c4 10             	add    esp,0x10
c0017e10:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e15:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e17:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e1a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017e20:	0f 20 d2             	mov    edx,cr2
c0017e23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017e27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e2b:	83 ec 08             	sub    esp,0x8
c0017e2e:	52                   	push   edx
c0017e2f:	50                   	push   eax
c0017e30:	e8 65 25 ff ff       	call   c000a39a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017e35:	83 c4 10             	add    esp,0x10
c0017e38:	0f b6 c0             	movzx  eax,al
c0017e3b:	85 c0                	test   eax,eax
c0017e3d:	75 2e                	jne    c0017e6d <pgFault(regs*, void*)+0x84>
c0017e3f:	83 ec 0c             	sub    esp,0xc
c0017e42:	68 6b 2d 02 c0       	push   0xc0022d6b
c0017e47:	e8 ea fe ff ff       	call   c0017d36 <displayProgramFault(char const*)>
c0017e4c:	83 c4 10             	add    esp,0x10
c0017e4f:	83 ec 0c             	sub    esp,0xc
c0017e52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e56:	e8 da fa ff ff       	call   c0017935 <displayDebugInfo(regs*)>
c0017e5b:	83 c4 10             	add    esp,0x10
c0017e5e:	83 ec 0c             	sub    esp,0xc
c0017e61:	6a 00                	push   0x0
c0017e63:	e8 10 ed ff ff       	call   c0016b78 <Thr::terminateFromIRQ(int)>
c0017e68:	83 c4 10             	add    esp,0x10
c0017e6b:	eb 01                	jmp    c0017e6e <pgFault(regs*, void*)+0x85>
c0017e6d:	90                   	nop
c0017e6e:	83 c4 1c             	add    esp,0x1c
c0017e71:	c3                   	ret    

c0017e72 <otherISRHandler(regs*, void*)>:
c0017e72:	83 ec 0c             	sub    esp,0xc
c0017e75:	83 ec 0c             	sub    esp,0xc
c0017e78:	68 58 2e 02 c0       	push   0xc0022e58
c0017e7d:	e8 b4 fe ff ff       	call   c0017d36 <displayProgramFault(char const*)>
c0017e82:	83 c4 10             	add    esp,0x10
c0017e85:	83 ec 0c             	sub    esp,0xc
c0017e88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e8c:	e8 a4 fa ff ff       	call   c0017935 <displayDebugInfo(regs*)>
c0017e91:	83 c4 10             	add    esp,0x10
c0017e94:	83 ec 0c             	sub    esp,0xc
c0017e97:	6a 00                	push   0x0
c0017e99:	e8 da ec ff ff       	call   c0016b78 <Thr::terminateFromIRQ(int)>
c0017e9e:	83 c4 10             	add    esp,0x10
c0017ea1:	90                   	nop
c0017ea2:	83 c4 0c             	add    esp,0xc
c0017ea5:	c3                   	ret    

c0017ea6 <opcodeFault(regs*, void*)>:
c0017ea6:	55                   	push   ebp
c0017ea7:	89 e5                	mov    ebp,esp
c0017ea9:	83 ec 08             	sub    esp,0x8
c0017eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017eaf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017eb2:	83 ec 08             	sub    esp,0x8
c0017eb5:	50                   	push   eax
c0017eb6:	68 76 2d 02 c0       	push   0xc0022d76
c0017ebb:	e8 6a 2a ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0017ec0:	83 c4 10             	add    esp,0x10
c0017ec3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017ec8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017ece:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017ed4:	0f b6 c0             	movzx  eax,al
c0017ed7:	85 c0                	test   eax,eax
c0017ed9:	74 21                	je     c0017efc <opcodeFault(regs*, void*)+0x56>
c0017edb:	83 ec 0c             	sub    esp,0xc
c0017ede:	68 80 2e 02 c0       	push   0xc0022e80
c0017ee3:	e8 42 2a ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0017ee8:	83 c4 10             	add    esp,0x10
c0017eeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017eee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ef1:	8d 50 19             	lea    edx,[eax+0x19]
c0017ef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ef7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017efa:	eb 2b                	jmp    c0017f27 <opcodeFault(regs*, void*)+0x81>
c0017efc:	83 ec 0c             	sub    esp,0xc
c0017eff:	68 84 2d 02 c0       	push   0xc0022d84
c0017f04:	e8 2d fe ff ff       	call   c0017d36 <displayProgramFault(char const*)>
c0017f09:	83 c4 10             	add    esp,0x10
c0017f0c:	83 ec 0c             	sub    esp,0xc
c0017f0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017f12:	e8 1e fa ff ff       	call   c0017935 <displayDebugInfo(regs*)>
c0017f17:	83 c4 10             	add    esp,0x10
c0017f1a:	83 ec 0c             	sub    esp,0xc
c0017f1d:	6a 00                	push   0x0
c0017f1f:	e8 54 ec ff ff       	call   c0016b78 <Thr::terminateFromIRQ(int)>
c0017f24:	83 c4 10             	add    esp,0x10
c0017f27:	c9                   	leave  
c0017f28:	c3                   	ret    

c0017f29 <i386SaveCoprocessor(void*)>:
c0017f29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f2d:	83 c0 3f             	add    eax,0x3f
c0017f30:	83 e0 c0             	and    eax,0xffffffc0
c0017f33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f37:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017f3d <i386LoadCoprocessor(void*)>:
c0017f3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f41:	83 c0 3f             	add    eax,0x3f
c0017f44:	83 e0 c0             	and    eax,0xffffffc0
c0017f47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f4b:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017f51 <x87EmulHandler(regs*, void*)>:
c0017f51:	53                   	push   ebx
c0017f52:	83 ec 08             	sub    esp,0x8
c0017f55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f5a:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017f5e:	74 10                	je     c0017f70 <x87EmulHandler(regs*, void*)+0x1f>
c0017f60:	83 ec 0c             	sub    esp,0xc
c0017f63:	68 91 2d 02 c0       	push   0xc0022d91
c0017f68:	e8 72 96 ff ff       	call   c00115df <KePanic(char const*)>
c0017f6d:	83 c4 10             	add    esp,0x10
c0017f70:	0f 20 c0             	mov    eax,cr0
c0017f73:	a8 08                	test   al,0x8
c0017f75:	74 59                	je     c0017fd0 <x87EmulHandler(regs*, void*)+0x7f>
c0017f77:	0f 06                	clts   
c0017f79:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f7e:	85 c0                	test   eax,eax
c0017f80:	74 0e                	je     c0017f90 <x87EmulHandler(regs*, void*)+0x3f>
c0017f82:	83 ec 0c             	sub    esp,0xc
c0017f85:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f88:	e8 9c ff ff ff       	call   c0017f29 <i386SaveCoprocessor(void*)>
c0017f8d:	83 c4 10             	add    esp,0x10
c0017f90:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017f96:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017f9a:	75 12                	jne    c0017fae <x87EmulHandler(regs*, void*)+0x5d>
c0017f9c:	83 ec 0c             	sub    esp,0xc
c0017f9f:	68 40 02 00 00       	push   0x240
c0017fa4:	e8 4a fb fe ff       	call   c0007af3 <malloc>
c0017fa9:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017fac:	eb 10                	jmp    c0017fbe <x87EmulHandler(regs*, void*)+0x6d>
c0017fae:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017fb3:	83 ec 0c             	sub    esp,0xc
c0017fb6:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017fb9:	e8 7f ff ff ff       	call   c0017f3d <i386LoadCoprocessor(void*)>
c0017fbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fc3:	83 c4 10             	add    esp,0x10
c0017fc6:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017fcb:	83 c4 08             	add    esp,0x8
c0017fce:	5b                   	pop    ebx
c0017fcf:	c3                   	ret    
c0017fd0:	83 ec 0c             	sub    esp,0xc
c0017fd3:	68 a5 2d 02 c0       	push   0xc0022da5
c0017fd8:	e8 4d 29 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c0017fdd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017fe5:	83 c4 18             	add    esp,0x18
c0017fe8:	5b                   	pop    ebx
c0017fe9:	e9 8a eb ff ff       	jmp    c0016b78 <Thr::terminateFromIRQ(int)>

c0017fee <HalInitialiseCoprocessor()>:
c0017fee:	83 ec 10             	sub    esp,0x10
c0017ff1:	6a 00                	push   0x0
c0017ff3:	68 51 7f 01 c0       	push   0xc0017f51
c0017ff8:	6a 07                	push   0x7
c0017ffa:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0018004:	e8 ed 4e ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018009:	e8 b2 70 00 00       	call   c001f0c0 <avxDetect>
c001800e:	83 c4 10             	add    esp,0x10
c0018011:	85 c0                	test   eax,eax
c0018013:	74 1c                	je     c0018031 <HalInitialiseCoprocessor()+0x43>
c0018015:	c7 05 70 c7 02 c0 ea f0 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f0ea
c001801f:	c7 05 6c c7 02 c0 fb f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f0fb
c0018029:	83 c4 0c             	add    esp,0xc
c001802c:	e9 db 70 00 00       	jmp    c001f10c <avxInit>
c0018031:	e8 1a 74 00 00       	call   c001f450 <absolutelyNoChanceInHell>
c0018036:	85 c0                	test   eax,eax
c0018038:	74 1c                	je     c0018056 <HalInitialiseCoprocessor()+0x68>
c001803a:	c7 05 70 c7 02 c0 68 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f468
c0018044:	c7 05 6c c7 02 c0 70 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f470
c001804e:	83 c4 0c             	add    esp,0xc
c0018051:	e9 22 74 00 00       	jmp    c001f478 <sseInit>
c0018056:	e8 3b 74 00 00       	call   c001f496 <x87Detect>
c001805b:	85 c0                	test   eax,eax
c001805d:	74 1c                	je     c001807b <HalInitialiseCoprocessor()+0x8d>
c001805f:	c7 05 70 c7 02 c0 b1 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f4b1
c0018069:	c7 05 6c c7 02 c0 b8 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f4b8
c0018073:	83 c4 0c             	add    esp,0xc
c0018076:	e9 44 74 00 00       	jmp    c001f4bf <x87Init>
c001807b:	c7 05 70 c7 02 c0 02 79 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc0017902
c0018085:	c7 05 6c c7 02 c0 02 79 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc0017902
c001808f:	0f 20 c0             	mov    eax,cr0
c0018092:	83 c8 04             	or     eax,0x4
c0018095:	0f 22 c0             	mov    cr0,eax
c0018098:	83 c4 0c             	add    esp,0xc
c001809b:	c3                   	ret    

c001809c <HalPanic(char const*)>:
c001809c:	53                   	push   ebx
c001809d:	83 ec 10             	sub    esp,0x10
c00180a0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00180a4:	fa                   	cli    
c00180a5:	53                   	push   ebx
c00180a6:	68 bb 2d 02 c0       	push   0xc0022dbb
c00180ab:	e8 7a 28 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c00180b0:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c00180b5:	83 c4 10             	add    esp,0x10
c00180b8:	85 c0                	test   eax,eax
c00180ba:	74 09                	je     c00180c5 <HalPanic(char const*)+0x29>
c00180bc:	83 ec 0c             	sub    esp,0xc
c00180bf:	53                   	push   ebx
c00180c0:	ff d0                	call   eax
c00180c2:	83 c4 10             	add    esp,0x10
c00180c5:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00180ca:	85 c0                	test   eax,eax
c00180cc:	0f 84 dc 00 00 00    	je     c00181ae <HalPanic(char const*)+0x112>
c00180d2:	52                   	push   edx
c00180d3:	6a 01                	push   0x1
c00180d5:	6a 0f                	push   0xf
c00180d7:	50                   	push   eax
c00180d8:	e8 0d 05 ff ff       	call   c00085ea <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180dd:	59                   	pop    ecx
c00180de:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180e4:	e8 f1 06 ff ff       	call   c00087da <VgaText::clearScreen()>
c00180e9:	58                   	pop    eax
c00180ea:	5a                   	pop    edx
c00180eb:	68 30 0f 02 c0       	push   0xc0020f30
c00180f0:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180f6:	e8 27 05 ff ff       	call   c0008622 <VgaText::setTitle(char*)>
c00180fb:	83 c4 0c             	add    esp,0xc
c00180fe:	6a 01                	push   0x1
c0018100:	6a 0f                	push   0xf
c0018102:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018108:	e8 dd 04 ff ff       	call   c00085ea <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001810d:	59                   	pop    ecx
c001810e:	58                   	pop    eax
c001810f:	68 d4 2d 02 c0       	push   0xc0022dd4
c0018114:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001811a:	e8 ad 09 ff ff       	call   c0008acc <VgaText::puts(char const*)>
c001811f:	83 c4 0c             	add    esp,0xc
c0018122:	6a 0f                	push   0xf
c0018124:	6a 01                	push   0x1
c0018126:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001812c:	e8 b9 04 ff ff       	call   c00085ea <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018131:	58                   	pop    eax
c0018132:	5a                   	pop    edx
c0018133:	68 dd 2d 02 c0       	push   0xc0022ddd
c0018138:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001813e:	e8 89 09 ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0018143:	83 c4 0c             	add    esp,0xc
c0018146:	6a 01                	push   0x1
c0018148:	6a 0f                	push   0xf
c001814a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018150:	e8 95 04 ff ff       	call   c00085ea <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018155:	59                   	pop    ecx
c0018156:	58                   	pop    eax
c0018157:	68 21 2e 02 c0       	push   0xc0022e21
c001815c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018162:	e8 65 09 ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0018167:	58                   	pop    eax
c0018168:	5a                   	pop    edx
c0018169:	68 ea 2d 02 c0       	push   0xc0022dea
c001816e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018174:	e8 53 09 ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0018179:	59                   	pop    ecx
c001817a:	58                   	pop    eax
c001817b:	68 24 2e 02 c0       	push   0xc0022e24
c0018180:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018186:	e8 41 09 ff ff       	call   c0008acc <VgaText::puts(char const*)>
c001818b:	58                   	pop    eax
c001818c:	5a                   	pop    edx
c001818d:	53                   	push   ebx
c001818e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018194:	e8 33 09 ff ff       	call   c0008acc <VgaText::puts(char const*)>
c0018199:	59                   	pop    ecx
c001819a:	5b                   	pop    ebx
c001819b:	68 21 2e 02 c0       	push   0xc0022e21
c00181a0:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181a6:	e8 21 09 ff ff       	call   c0008acc <VgaText::puts(char const*)>
c00181ab:	83 c4 10             	add    esp,0x10
c00181ae:	eb fe                	jmp    c00181ae <HalPanic(char const*)+0x112>

c00181b0 <HalQueryPerformanceCounter()>:
c00181b0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00181b5:	31 d2                	xor    edx,edx
c00181b7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00181bd:	31 c0                	xor    eax,eax
c00181bf:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00181c6:	74 02                	je     c00181ca <HalQueryPerformanceCounter()+0x1a>
c00181c8:	0f 31                	rdtsc  
c00181ca:	c3                   	ret    

c00181cb <HalInitialise()>:
c00181cb:	53                   	push   ebx
c00181cc:	83 ec 08             	sub    esp,0x8
c00181cf:	e8 59 4f ff ff       	call   c000d12d <setupINTS()>
c00181d4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00181d9:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c00181e0:	75 0f                	jne    c00181f1 <HalInitialise()+0x26>
c00181e2:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00181e8:	83 e2 fe             	and    edx,0xfffffffe
c00181eb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00181f1:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c00181f8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00181fe:	83 e2 fe             	and    edx,0xfffffffe
c0018201:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018207:	e8 a0 02 00 00       	call   c00184ac <picOpen()>
c001820c:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018213:	74 0a                	je     c001821f <HalInitialise()+0x54>
c0018215:	e8 e2 01 00 00       	call   c00183fc <picDisable()>
c001821a:	e8 0d 68 00 00       	call   c001ea2c <apicOpen()>
c001821f:	50                   	push   eax
c0018220:	bb 0f 00 00 00       	mov    ebx,0xf
c0018225:	6a 00                	push   0x0
c0018227:	68 72 7e 01 c0       	push   0xc0017e72
c001822c:	6a 00                	push   0x0
c001822e:	e8 c3 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018233:	83 c4 0c             	add    esp,0xc
c0018236:	6a 00                	push   0x0
c0018238:	68 72 7e 01 c0       	push   0xc0017e72
c001823d:	6a 01                	push   0x1
c001823f:	e8 b2 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018244:	83 c4 0c             	add    esp,0xc
c0018247:	6a 00                	push   0x0
c0018249:	68 03 79 01 c0       	push   0xc0017903
c001824e:	6a 02                	push   0x2
c0018250:	e8 a1 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018255:	83 c4 0c             	add    esp,0xc
c0018258:	6a 00                	push   0x0
c001825a:	68 72 7e 01 c0       	push   0xc0017e72
c001825f:	6a 03                	push   0x3
c0018261:	e8 90 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018266:	83 c4 0c             	add    esp,0xc
c0018269:	6a 00                	push   0x0
c001826b:	68 72 7e 01 c0       	push   0xc0017e72
c0018270:	6a 04                	push   0x4
c0018272:	e8 7f 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018277:	83 c4 0c             	add    esp,0xc
c001827a:	6a 00                	push   0x0
c001827c:	68 72 7e 01 c0       	push   0xc0017e72
c0018281:	6a 05                	push   0x5
c0018283:	e8 6e 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018288:	83 c4 0c             	add    esp,0xc
c001828b:	6a 00                	push   0x0
c001828d:	68 a6 7e 01 c0       	push   0xc0017ea6
c0018292:	6a 06                	push   0x6
c0018294:	e8 5d 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018299:	83 c4 0c             	add    esp,0xc
c001829c:	6a 00                	push   0x0
c001829e:	68 1c 79 01 c0       	push   0xc001791c
c00182a3:	6a 08                	push   0x8
c00182a5:	e8 4c 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182aa:	83 c4 0c             	add    esp,0xc
c00182ad:	6a 00                	push   0x0
c00182af:	68 72 7e 01 c0       	push   0xc0017e72
c00182b4:	6a 09                	push   0x9
c00182b6:	e8 3b 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182bb:	83 c4 0c             	add    esp,0xc
c00182be:	6a 00                	push   0x0
c00182c0:	68 72 7e 01 c0       	push   0xc0017e72
c00182c5:	6a 0a                	push   0xa
c00182c7:	e8 2a 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182cc:	83 c4 0c             	add    esp,0xc
c00182cf:	6a 00                	push   0x0
c00182d1:	68 72 7e 01 c0       	push   0xc0017e72
c00182d6:	6a 0b                	push   0xb
c00182d8:	e8 19 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182dd:	83 c4 0c             	add    esp,0xc
c00182e0:	6a 00                	push   0x0
c00182e2:	68 82 7d 01 c0       	push   0xc0017d82
c00182e7:	6a 0d                	push   0xd
c00182e9:	e8 08 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182ee:	83 c4 0c             	add    esp,0xc
c00182f1:	6a 00                	push   0x0
c00182f3:	68 e9 7d 01 c0       	push   0xc0017de9
c00182f8:	6a 0e                	push   0xe
c00182fa:	e8 f7 4b ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182ff:	83 c4 10             	add    esp,0x10
c0018302:	50                   	push   eax
c0018303:	6a 00                	push   0x0
c0018305:	68 72 7e 01 c0       	push   0xc0017e72
c001830a:	53                   	push   ebx
c001830b:	43                   	inc    ebx
c001830c:	e8 e5 4b ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018311:	83 c4 10             	add    esp,0x10
c0018314:	83 fb 1e             	cmp    ebx,0x1e
c0018317:	75 e9                	jne    c0018302 <HalInitialise()+0x137>
c0018319:	50                   	push   eax
c001831a:	6a 00                	push   0x0
c001831c:	68 93 2a 01 c0       	push   0xc0012a93
c0018321:	6a 60                	push   0x60
c0018323:	e8 ce 4b ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018328:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001832d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018337:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001833e:	e8 b0 f7 fe ff       	call   c0007af3 <malloc>
c0018343:	89 04 24             	mov    DWORD PTR [esp],eax
c0018346:	89 c3                	mov    ebx,eax
c0018348:	e8 37 09 00 00       	call   c0018c84 <RTC::RTC()>
c001834d:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018357:	5a                   	pop    edx
c0018358:	59                   	pop    ecx
c0018359:	53                   	push   ebx
c001835a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018360:	e8 5b 46 ff ff       	call   c000c9c0 <Device::addChild(Device*)>
c0018365:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018367:	6a 00                	push   0x0
c0018369:	6a 00                	push   0x0
c001836b:	6a 00                	push   0x0
c001836d:	53                   	push   ebx
c001836e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018371:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018376:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001837c:	83 c4 28             	add    esp,0x28
c001837f:	5b                   	pop    ebx
c0018380:	c3                   	ret    

c0018381 <HalMakeBeep(int)>:
c0018381:	53                   	push   ebx
c0018382:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018386:	85 db                	test   ebx,ebx
c0018388:	75 07                	jne    c0018391 <HalMakeBeep(int)+0x10>
c001838a:	e4 61                	in     al,0x61
c001838c:	83 e0 fc             	and    eax,0xfffffffc
c001838f:	eb 26                	jmp    c00183b7 <HalMakeBeep(int)+0x36>
c0018391:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018396:	99                   	cdq    
c0018397:	f7 fb                	idiv   ebx
c0018399:	89 c1                	mov    ecx,eax
c001839b:	b0 b6                	mov    al,0xb6
c001839d:	e6 43                	out    0x43,al
c001839f:	88 c8                	mov    al,cl
c00183a1:	e6 42                	out    0x42,al
c00183a3:	89 c8                	mov    eax,ecx
c00183a5:	c1 e8 08             	shr    eax,0x8
c00183a8:	e6 42                	out    0x42,al
c00183aa:	e4 61                	in     al,0x61
c00183ac:	89 c2                	mov    edx,eax
c00183ae:	83 ca 03             	or     edx,0x3
c00183b1:	38 d0                	cmp    al,dl
c00183b3:	74 04                	je     c00183b9 <HalMakeBeep(int)+0x38>
c00183b5:	88 d0                	mov    al,dl
c00183b7:	e6 61                	out    0x61,al
c00183b9:	5b                   	pop    ebx
c00183ba:	c3                   	ret    

c00183bb <HalGetRand()>:
c00183bb:	31 c0                	xor    eax,eax
c00183bd:	c3                   	ret    

c00183be <HalEndOfInterrupt(int)>:
c00183be:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00183c5:	74 23                	je     c00183ea <HalEndOfInterrupt(int)+0x2c>
c00183c7:	83 ec 14             	sub    esp,0x14
c00183ca:	6a 1b                	push   0x1b
c00183cc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00183d2:	e8 2d ed fe ff       	call   c0007104 <Computer::rdmsr(unsigned int)>
c00183d7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00183dc:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00183e6:	83 c4 1c             	add    esp,0x1c
c00183e9:	c3                   	ret    
c00183ea:	e9 41 02 00 00       	jmp    c0018630 <picEOI(int)>

c00183ef <HalRestart()>:
c00183ef:	c3                   	ret    

c00183f0 <HalShutdown()>:
c00183f0:	c3                   	ret    

c00183f1 <HalSleep()>:
c00183f1:	c3                   	ret    
c00183f2:	66 90                	xchg   ax,ax

c00183f4 <picIoWait()>:
c00183f4:	eb 00                	jmp    c00183f6 <picIoWait()+0x2>
c00183f6:	eb 00                	jmp    c00183f8 <picIoWait()+0x4>
c00183f8:	90                   	nop
c00183f9:	c3                   	ret    
c00183fa:	66 90                	xchg   ax,ax

c00183fc <picDisable()>:
c00183fc:	83 ec 10             	sub    esp,0x10
c00183ff:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018406:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001840b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001840f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018414:	ee                   	out    dx,al
c0018415:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001841c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018421:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018425:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001842a:	ee                   	out    dx,al
c001842b:	90                   	nop
c001842c:	83 c4 10             	add    esp,0x10
c001842f:	c3                   	ret    

c0018430 <picGetIRQReg(int)>:
c0018430:	83 ec 10             	sub    esp,0x10
c0018433:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018437:	0f b6 c0             	movzx  eax,al
c001843a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018441:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018445:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018449:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001844e:	ee                   	out    dx,al
c001844f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018453:	0f b6 c0             	movzx  eax,al
c0018456:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001845d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018461:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018465:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001846a:	ee                   	out    dx,al
c001846b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018472:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018477:	89 c2                	mov    edx,eax
c0018479:	ec                   	in     al,dx
c001847a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001847e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018482:	0f b6 c0             	movzx  eax,al
c0018485:	c1 e0 08             	shl    eax,0x8
c0018488:	89 c1                	mov    ecx,eax
c001848a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018491:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018496:	89 c2                	mov    edx,eax
c0018498:	ec                   	in     al,dx
c0018499:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001849d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00184a1:	0f b6 c0             	movzx  eax,al
c00184a4:	09 c8                	or     eax,ecx
c00184a6:	83 c4 10             	add    esp,0x10
c00184a9:	c3                   	ret    
c00184aa:	66 90                	xchg   ax,ax

c00184ac <picOpen()>:
c00184ac:	83 ec 50             	sub    esp,0x50
c00184af:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00184b6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00184bb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00184bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00184c3:	ee                   	out    dx,al
c00184c4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00184cb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00184d0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00184d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00184d8:	ee                   	out    dx,al
c00184d9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00184e1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00184e9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00184f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184f4:	89 c2                	mov    edx,eax
c00184f6:	ec                   	in     al,dx
c00184f7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00184fb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00184ff:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018503:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001850a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001850e:	89 c2                	mov    edx,eax
c0018510:	ec                   	in     al,dx
c0018511:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018515:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018519:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001851d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018524:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018529:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001852d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018531:	ee                   	out    dx,al
c0018532:	e8 bd fe ff ff       	call   c00183f4 <picIoWait()>
c0018537:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001853e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018543:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018547:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001854b:	ee                   	out    dx,al
c001854c:	e8 a3 fe ff ff       	call   c00183f4 <picIoWait()>
c0018551:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018555:	0f b6 c0             	movzx  eax,al
c0018558:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001855f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018563:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018567:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001856b:	ee                   	out    dx,al
c001856c:	e8 83 fe ff ff       	call   c00183f4 <picIoWait()>
c0018571:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018575:	0f b6 c0             	movzx  eax,al
c0018578:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001857f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018583:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018587:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001858b:	ee                   	out    dx,al
c001858c:	e8 63 fe ff ff       	call   c00183f4 <picIoWait()>
c0018591:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018598:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001859d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00185a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00185a5:	ee                   	out    dx,al
c00185a6:	e8 49 fe ff ff       	call   c00183f4 <picIoWait()>
c00185ab:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00185b2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00185b7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00185bb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00185bf:	ee                   	out    dx,al
c00185c0:	e8 2f fe ff ff       	call   c00183f4 <picIoWait()>
c00185c5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00185cc:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00185d1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00185d5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00185d9:	ee                   	out    dx,al
c00185da:	e8 15 fe ff ff       	call   c00183f4 <picIoWait()>
c00185df:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00185e6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00185eb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00185ef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00185f3:	ee                   	out    dx,al
c00185f4:	e8 fb fd ff ff       	call   c00183f4 <picIoWait()>
c00185f9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00185fe:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018605:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018609:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001860d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018611:	ee                   	out    dx,al
c0018612:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018617:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001861e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018622:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018626:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001862a:	ee                   	out    dx,al
c001862b:	90                   	nop
c001862c:	83 c4 50             	add    esp,0x50
c001862f:	c3                   	ret    

c0018630 <picEOI(int)>:
c0018630:	83 ec 10             	sub    esp,0x10
c0018633:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018638:	75 1e                	jne    c0018658 <picEOI(int)+0x28>
c001863a:	6a 0b                	push   0xb
c001863c:	e8 ef fd ff ff       	call   c0018430 <picGetIRQReg(int)>
c0018641:	83 c4 04             	add    esp,0x4
c0018644:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018649:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001864e:	25 80 00 00 00       	and    eax,0x80
c0018653:	74 73                	je     c00186c8 <picEOI(int)+0x98>
c0018655:	8d 76 00             	lea    esi,[esi+0x0]
c0018658:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001865d:	75 31                	jne    c0018690 <picEOI(int)+0x60>
c001865f:	6a 0b                	push   0xb
c0018661:	e8 ca fd ff ff       	call   c0018430 <picGetIRQReg(int)>
c0018666:	83 c4 04             	add    esp,0x4
c0018669:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001866e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018672:	98                   	cwde   
c0018673:	85 c0                	test   eax,eax
c0018675:	78 19                	js     c0018690 <picEOI(int)+0x60>
c0018677:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001867e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018683:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018687:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001868c:	ee                   	out    dx,al
c001868d:	eb 3d                	jmp    c00186cc <picEOI(int)+0x9c>
c001868f:	90                   	nop
c0018690:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018695:	7e 19                	jle    c00186b0 <picEOI(int)+0x80>
c0018697:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001869e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00186a3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00186a7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00186ac:	ee                   	out    dx,al
c00186ad:	8d 76 00             	lea    esi,[esi+0x0]
c00186b0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00186b7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00186bc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00186c0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00186c5:	ee                   	out    dx,al
c00186c6:	eb 04                	jmp    c00186cc <picEOI(int)+0x9c>
c00186c8:	90                   	nop
c00186c9:	8d 76 00             	lea    esi,[esi+0x0]
c00186cc:	83 c4 10             	add    esp,0x10
c00186cf:	c3                   	ret    

c00186d0 <RTC::open(int, int, void*)>:
c00186d0:	31 c0                	xor    eax,eax
c00186d2:	c3                   	ret    
c00186d3:	90                   	nop

c00186d4 <RTC::close(int, int, void*)>:
c00186d4:	31 c0                	xor    eax,eax
c00186d6:	c3                   	ret    
c00186d7:	90                   	nop

c00186d8 <RTC::timeInSecondsUTC()>:
c00186d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186dc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00186e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00186e8:	c3                   	ret    
c00186e9:	90                   	nop

c00186ea <RTC::timeInDatetimeUTC()>:
c00186ea:	53                   	push   ebx
c00186eb:	83 ec 14             	sub    esp,0x14
c00186ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00186f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00186f8:	50                   	push   eax
c00186f9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00186fc:	83 c4 0c             	add    esp,0xc
c00186ff:	52                   	push   edx
c0018700:	50                   	push   eax
c0018701:	53                   	push   ebx
c0018702:	e8 2d 40 ff ff       	call   c000c734 <secondsToDatetime(unsigned long long)>
c0018707:	89 d8                	mov    eax,ebx
c0018709:	83 c4 14             	add    esp,0x14
c001870c:	5b                   	pop    ebx
c001870d:	c2 04 00             	ret    0x4

c0018710 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018710:	56                   	push   esi
c0018711:	53                   	push   ebx
c0018712:	83 ec 14             	sub    esp,0x14
c0018715:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018719:	8b 03                	mov    eax,DWORD PTR [ebx]
c001871b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001871e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018722:	52                   	push   edx
c0018723:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018727:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001872b:	50                   	push   eax
c001872c:	e8 03 40 ff ff       	call   c000c734 <secondsToDatetime(unsigned long long)>
c0018731:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018735:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018739:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001873d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018741:	89 f0                	mov    eax,esi
c0018743:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018747:	83 c4 20             	add    esp,0x20
c001874a:	5b                   	pop    ebx
c001874b:	5e                   	pop    esi
c001874c:	ff e0                	jmp    eax

c001874e <RTC::~RTC()>:
c001874e:	83 ec 0c             	sub    esp,0xc
c0018751:	ba c0 2e 02 c0       	mov    edx,0xc0022ec0
c0018756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001875a:	89 10                	mov    DWORD PTR [eax],edx
c001875c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018760:	83 ec 0c             	sub    esp,0xc
c0018763:	50                   	push   eax
c0018764:	e8 57 3d ff ff       	call   c000c4c0 <Clock::~Clock()>
c0018769:	83 c4 10             	add    esp,0x10
c001876c:	90                   	nop
c001876d:	83 c4 0c             	add    esp,0xc
c0018770:	c3                   	ret    
c0018771:	90                   	nop

c0018772 <RTC::~RTC()>:
c0018772:	83 ec 0c             	sub    esp,0xc
c0018775:	83 ec 0c             	sub    esp,0xc
c0018778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001877c:	e8 cd ff ff ff       	call   c001874e <RTC::~RTC()>
c0018781:	83 c4 10             	add    esp,0x10
c0018784:	83 ec 08             	sub    esp,0x8
c0018787:	68 60 01 00 00       	push   0x160
c001878c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018790:	e8 97 20 ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c0018795:	83 c4 10             	add    esp,0x10
c0018798:	83 c4 0c             	add    esp,0xc
c001879b:	c3                   	ret    

c001879c <RTC::get_update_in_progress_flag()>:
c001879c:	83 ec 14             	sub    esp,0x14
c001879f:	6a 0a                	push   0xa
c00187a1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187a7:	e8 10 ea fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c00187ac:	83 c4 1c             	add    esp,0x1c
c00187af:	0f b6 c0             	movzx  eax,al
c00187b2:	c1 e8 07             	shr    eax,0x7
c00187b5:	c3                   	ret    

c00187b6 <RTC::completeRTCRefresh()>:
c00187b6:	55                   	push   ebp
c00187b7:	57                   	push   edi
c00187b8:	56                   	push   esi
c00187b9:	53                   	push   ebx
c00187ba:	83 ec 3c             	sub    esp,0x3c
c00187bd:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00187c3:	83 ec 0c             	sub    esp,0xc
c00187c6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00187ca:	e8 cd ff ff ff       	call   c001879c <RTC::get_update_in_progress_flag()>
c00187cf:	83 c4 10             	add    esp,0x10
c00187d2:	84 c0                	test   al,al
c00187d4:	74 0e                	je     c00187e4 <RTC::completeRTCRefresh()+0x2e>
c00187d6:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00187dc:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00187e2:	73 df                	jae    c00187c3 <RTC::completeRTCRefresh()+0xd>
c00187e4:	50                   	push   eax
c00187e5:	50                   	push   eax
c00187e6:	6a 00                	push   0x0
c00187e8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187ee:	e8 c9 e9 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c00187f3:	89 c7                	mov    edi,eax
c00187f5:	58                   	pop    eax
c00187f6:	5a                   	pop    edx
c00187f7:	6a 02                	push   0x2
c00187f9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187ff:	e8 b8 e9 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c0018804:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018808:	59                   	pop    ecx
c0018809:	5b                   	pop    ebx
c001880a:	6a 04                	push   0x4
c001880c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018812:	e8 a5 e9 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c0018817:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001881b:	5e                   	pop    esi
c001881c:	5d                   	pop    ebp
c001881d:	6a 07                	push   0x7
c001881f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018825:	e8 92 e9 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c001882a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001882e:	58                   	pop    eax
c001882f:	5a                   	pop    edx
c0018830:	6a 08                	push   0x8
c0018832:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018838:	e8 7f e9 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c001883d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018841:	59                   	pop    ecx
c0018842:	5b                   	pop    ebx
c0018843:	6a 09                	push   0x9
c0018845:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001884b:	e8 6c e9 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c0018850:	0f b6 c0             	movzx  eax,al
c0018853:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018857:	83 c4 10             	add    esp,0x10
c001885a:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018860:	83 ec 0c             	sub    esp,0xc
c0018863:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018867:	e8 30 ff ff ff       	call   c001879c <RTC::get_update_in_progress_flag()>
c001886c:	83 c4 10             	add    esp,0x10
c001886f:	84 c0                	test   al,al
c0018871:	74 0e                	je     c0018881 <RTC::completeRTCRefresh()+0xcb>
c0018873:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018879:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001887f:	73 df                	jae    c0018860 <RTC::completeRTCRefresh()+0xaa>
c0018881:	51                   	push   ecx
c0018882:	51                   	push   ecx
c0018883:	6a 00                	push   0x0
c0018885:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001888b:	e8 2c e9 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c0018890:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018894:	5b                   	pop    ebx
c0018895:	5e                   	pop    esi
c0018896:	6a 02                	push   0x2
c0018898:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001889e:	e8 19 e9 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c00188a3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00188a7:	5d                   	pop    ebp
c00188a8:	58                   	pop    eax
c00188a9:	6a 04                	push   0x4
c00188ab:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188b1:	e8 06 e9 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c00188b6:	88 c3                	mov    bl,al
c00188b8:	58                   	pop    eax
c00188b9:	5a                   	pop    edx
c00188ba:	6a 07                	push   0x7
c00188bc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188c2:	e8 f5 e8 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c00188c7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00188cb:	59                   	pop    ecx
c00188cc:	5e                   	pop    esi
c00188cd:	6a 08                	push   0x8
c00188cf:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188d5:	e8 e2 e8 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c00188da:	5d                   	pop    ebp
c00188db:	89 c6                	mov    esi,eax
c00188dd:	58                   	pop    eax
c00188de:	6a 09                	push   0x9
c00188e0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188e6:	e8 d1 e8 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c00188eb:	89 f9                	mov    ecx,edi
c00188ed:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00188f1:	83 c4 10             	add    esp,0x10
c00188f4:	0f b6 e8             	movzx  ebp,al
c00188f7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00188fc:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018900:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018904:	74 27                	je     c001892d <RTC::completeRTCRefresh()+0x177>
c0018906:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001890a:	89 f0                	mov    eax,esi
c001890c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018910:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018914:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018918:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001891c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018920:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018924:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018928:	e9 2d ff ff ff       	jmp    c001885a <RTC::completeRTCRefresh()+0xa4>
c001892d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018932:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018936:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001893a:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001893e:	75 c6                	jne    c0018906 <RTC::completeRTCRefresh()+0x150>
c0018940:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018945:	89 f1                	mov    ecx,esi
c0018947:	0f b6 fb             	movzx  edi,bl
c001894a:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001894e:	0f b6 c9             	movzx  ecx,cl
c0018951:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018955:	89 f1                	mov    ecx,esi
c0018957:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001895b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001895f:	0f 94 c2             	sete   dl
c0018962:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018966:	0f 94 c0             	sete   al
c0018969:	21 d0                	and    eax,edx
c001896b:	31 d2                	xor    edx,edx
c001896d:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018971:	0f 94 c2             	sete   dl
c0018974:	85 c2                	test   edx,eax
c0018976:	74 8e                	je     c0018906 <RTC::completeRTCRefresh()+0x150>
c0018978:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001897c:	75 88                	jne    c0018906 <RTC::completeRTCRefresh()+0x150>
c001897e:	52                   	push   edx
c001897f:	52                   	push   edx
c0018980:	6a 0b                	push   0xb
c0018982:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018988:	e8 2f e8 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c001898d:	83 c4 10             	add    esp,0x10
c0018990:	a8 04                	test   al,0x4
c0018992:	75 7a                	jne    c0018a0e <RTC::completeRTCRefresh()+0x258>
c0018994:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018998:	c1 ef 04             	shr    edi,0x4
c001899b:	83 e6 0f             	and    esi,0xf
c001899e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00189a2:	c1 ed 04             	shr    ebp,0x4
c00189a5:	6b ed 0a             	imul   ebp,ebp,0xa
c00189a8:	c1 ea 04             	shr    edx,0x4
c00189ab:	6b d2 0a             	imul   edx,edx,0xa
c00189ae:	83 e1 0f             	and    ecx,0xf
c00189b1:	01 d1                	add    ecx,edx
c00189b3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00189b7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00189bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189bf:	c1 ea 04             	shr    edx,0x4
c00189c2:	6b d2 0a             	imul   edx,edx,0xa
c00189c5:	83 e1 0f             	and    ecx,0xf
c00189c8:	01 d1                	add    ecx,edx
c00189ca:	89 fa                	mov    edx,edi
c00189cc:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00189d0:	83 e2 07             	and    edx,0x7
c00189d3:	89 d9                	mov    ecx,ebx
c00189d5:	6b d2 0a             	imul   edx,edx,0xa
c00189d8:	83 e1 0f             	and    ecx,0xf
c00189db:	83 e3 80             	and    ebx,0xffffff80
c00189de:	01 d1                	add    ecx,edx
c00189e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189e4:	09 cb                	or     ebx,ecx
c00189e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00189ea:	c1 ea 04             	shr    edx,0x4
c00189ed:	6b d2 0a             	imul   edx,edx,0xa
c00189f0:	83 e1 0f             	and    ecx,0xf
c00189f3:	01 d1                	add    ecx,edx
c00189f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189f9:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00189fd:	c1 ea 04             	shr    edx,0x4
c0018a00:	6b d2 0a             	imul   edx,edx,0xa
c0018a03:	01 d6                	add    esi,edx
c0018a05:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a09:	83 e2 0f             	and    edx,0xf
c0018a0c:	01 d5                	add    ebp,edx
c0018a0e:	a8 02                	test   al,0x2
c0018a10:	75 15                	jne    c0018a27 <RTC::completeRTCRefresh()+0x271>
c0018a12:	f6 c3 80             	test   bl,0x80
c0018a15:	74 10                	je     c0018a27 <RTC::completeRTCRefresh()+0x271>
c0018a17:	83 e3 7f             	and    ebx,0x7f
c0018a1a:	b9 18 00 00 00       	mov    ecx,0x18
c0018a1f:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018a22:	99                   	cdq    
c0018a23:	f7 f9                	idiv   ecx
c0018a25:	88 d3                	mov    bl,dl
c0018a27:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018a2d:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018a33:	77 06                	ja     c0018a3b <RTC::completeRTCRefresh()+0x285>
c0018a35:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018a3b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a40:	31 c9                	xor    ecx,ecx
c0018a42:	31 d2                	xor    edx,edx
c0018a44:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0018a48:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018a4c:	89 cd                	mov    ebp,ecx
c0018a4e:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018a52:	c1 e7 10             	shl    edi,0x10
c0018a55:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018a5b:	c1 e0 10             	shl    eax,0x10
c0018a5e:	09 c5                	or     ebp,eax
c0018a60:	89 e9                	mov    ecx,ebp
c0018a62:	0f b7 c2             	movzx  eax,dx
c0018a65:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018a69:	09 f8                	or     eax,edi
c0018a6b:	89 c2                	mov    edx,eax
c0018a6d:	50                   	push   eax
c0018a6e:	50                   	push   eax
c0018a6f:	88 d9                	mov    cl,bl
c0018a71:	51                   	push   ecx
c0018a72:	52                   	push   edx
c0018a73:	e8 37 3b ff ff       	call   c000c5af <datetimeToSeconds(datetime_t)>
c0018a78:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018a7c:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018a82:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018a88:	83 c4 4c             	add    esp,0x4c
c0018a8b:	5b                   	pop    ebx
c0018a8c:	5e                   	pop    esi
c0018a8d:	5f                   	pop    edi
c0018a8e:	5d                   	pop    ebp
c0018a8f:	c3                   	ret    

c0018a90 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018a90:	55                   	push   ebp
c0018a91:	57                   	push   edi
c0018a92:	56                   	push   esi
c0018a93:	53                   	push   ebx
c0018a94:	83 ec 30             	sub    esp,0x30
c0018a97:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018a9b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018a9f:	6a 00                	push   0x0
c0018aa1:	6a 00                	push   0x0
c0018aa3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018aa9:	e8 26 e8 fe ff       	call   c00072d4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018aae:	83 c4 0c             	add    esp,0xc
c0018ab1:	6a 00                	push   0x0
c0018ab3:	6a 02                	push   0x2
c0018ab5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018abb:	e8 14 e8 fe ff       	call   c00072d4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ac0:	89 f8                	mov    eax,edi
c0018ac2:	89 f9                	mov    ecx,edi
c0018ac4:	0f b6 c4             	movzx  eax,ah
c0018ac7:	31 d2                	xor    edx,edx
c0018ac9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018acd:	c1 e9 10             	shr    ecx,0x10
c0018ad0:	89 f0                	mov    eax,esi
c0018ad2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018ad6:	89 f0                	mov    eax,esi
c0018ad8:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018adc:	0f b6 c4             	movzx  eax,ah
c0018adf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018ae3:	89 f0                	mov    eax,esi
c0018ae5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018ae9:	c1 e8 10             	shr    eax,0x10
c0018aec:	b9 64 00 00 00       	mov    ecx,0x64
c0018af1:	f7 f1                	div    ecx
c0018af3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018af7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018afb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018aff:	59                   	pop    ecx
c0018b00:	5b                   	pop    ebx
c0018b01:	89 fb                	mov    ebx,edi
c0018b03:	6a 0b                	push   0xb
c0018b05:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b0b:	e8 ac e6 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c0018b10:	83 c4 10             	add    esp,0x10
c0018b13:	a8 04                	test   al,0x4
c0018b15:	89 c5                	mov    ebp,eax
c0018b17:	75 6e                	jne    c0018b87 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018b19:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018b1d:	31 d2                	xor    edx,edx
c0018b1f:	0f b6 c1             	movzx  eax,cl
c0018b22:	b9 0a 00 00 00       	mov    ecx,0xa
c0018b27:	f7 f1                	div    ecx
c0018b29:	c1 e0 04             	shl    eax,0x4
c0018b2c:	09 d0                	or     eax,edx
c0018b2e:	31 d2                	xor    edx,edx
c0018b30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018b39:	f7 f1                	div    ecx
c0018b3b:	c1 e0 04             	shl    eax,0x4
c0018b3e:	09 d0                	or     eax,edx
c0018b40:	31 d2                	xor    edx,edx
c0018b42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b46:	0f b6 c3             	movzx  eax,bl
c0018b49:	f7 f1                	div    ecx
c0018b4b:	c1 e0 04             	shl    eax,0x4
c0018b4e:	09 d0                	or     eax,edx
c0018b50:	31 d2                	xor    edx,edx
c0018b52:	89 c3                	mov    ebx,eax
c0018b54:	89 f0                	mov    eax,esi
c0018b56:	0f b6 c0             	movzx  eax,al
c0018b59:	f7 f1                	div    ecx
c0018b5b:	c1 e0 04             	shl    eax,0x4
c0018b5e:	09 d0                	or     eax,edx
c0018b60:	31 d2                	xor    edx,edx
c0018b62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018b66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b6b:	f7 f1                	div    ecx
c0018b6d:	c1 e0 04             	shl    eax,0x4
c0018b70:	09 d0                	or     eax,edx
c0018b72:	31 d2                	xor    edx,edx
c0018b74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018b78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b7c:	f7 f1                	div    ecx
c0018b7e:	c1 e0 04             	shl    eax,0x4
c0018b81:	09 d0                	or     eax,edx
c0018b83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b87:	83 e5 02             	and    ebp,0x2
c0018b8a:	75 1e                	jne    c0018baa <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b8c:	0f b6 c3             	movzx  eax,bl
c0018b8f:	83 f8 0b             	cmp    eax,0xb
c0018b92:	76 10                	jbe    c0018ba4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018b94:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018b97:	84 d2                	test   dl,dl
c0018b99:	88 d3                	mov    bl,dl
c0018b9b:	75 02                	jne    c0018b9f <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018b9d:	b3 0c                	mov    bl,0xc
c0018b9f:	83 cb 80             	or     ebx,0xffffff80
c0018ba2:	eb 06                	jmp    c0018baa <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018ba4:	85 c0                	test   eax,eax
c0018ba6:	75 02                	jne    c0018baa <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018ba8:	b3 0c                	mov    bl,0xc
c0018baa:	50                   	push   eax
c0018bab:	0f b6 db             	movzx  ebx,bl
c0018bae:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018bb3:	52                   	push   edx
c0018bb4:	6a 00                	push   0x0
c0018bb6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bbc:	e8 13 e7 fe ff       	call   c00072d4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bc1:	83 c4 0c             	add    esp,0xc
c0018bc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018bc9:	50                   	push   eax
c0018bca:	6a 02                	push   0x2
c0018bcc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bd2:	e8 fd e6 fe ff       	call   c00072d4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bd7:	83 c4 0c             	add    esp,0xc
c0018bda:	53                   	push   ebx
c0018bdb:	6a 04                	push   0x4
c0018bdd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018be3:	e8 ec e6 fe ff       	call   c00072d4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018be8:	83 c4 0c             	add    esp,0xc
c0018beb:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018bf0:	52                   	push   edx
c0018bf1:	6a 07                	push   0x7
c0018bf3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bf9:	e8 d6 e6 fe ff       	call   c00072d4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bfe:	83 c4 0c             	add    esp,0xc
c0018c01:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018c06:	50                   	push   eax
c0018c07:	6a 08                	push   0x8
c0018c09:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c0f:	e8 c0 e6 fe ff       	call   c00072d4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c14:	83 c4 0c             	add    esp,0xc
c0018c17:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018c1c:	55                   	push   ebp
c0018c1d:	6a 09                	push   0x9
c0018c1f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c25:	e8 aa e6 fe ff       	call   c00072d4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c2a:	5a                   	pop    edx
c0018c2b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018c2f:	e8 82 fb ff ff       	call   c00187b6 <RTC::completeRTCRefresh()>
c0018c34:	83 c4 3c             	add    esp,0x3c
c0018c37:	b0 01                	mov    al,0x1
c0018c39:	5b                   	pop    ebx
c0018c3a:	5e                   	pop    esi
c0018c3b:	5f                   	pop    edi
c0018c3c:	5d                   	pop    ebp
c0018c3d:	c3                   	ret    

c0018c3e <rtcIRQHandler(regs*, void*)>:
c0018c3e:	53                   	push   ebx
c0018c3f:	83 ec 10             	sub    esp,0x10
c0018c42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018c46:	6a 0c                	push   0xc
c0018c48:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c4e:	e8 69 e5 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c0018c53:	83 c4 10             	add    esp,0x10
c0018c56:	a8 80                	test   al,0x80
c0018c58:	74 24                	je     c0018c7e <rtcIRQHandler(regs*, void*)+0x40>
c0018c5a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018c61:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018c68:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018c6f:	75 0d                	jne    c0018c7e <rtcIRQHandler(regs*, void*)+0x40>
c0018c71:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018c75:	83 c4 08             	add    esp,0x8
c0018c78:	5b                   	pop    ebx
c0018c79:	e9 38 fb ff ff       	jmp    c00187b6 <RTC::completeRTCRefresh()>
c0018c7e:	83 c4 08             	add    esp,0x8
c0018c81:	5b                   	pop    ebx
c0018c82:	c3                   	ret    
c0018c83:	90                   	nop

c0018c84 <RTC::RTC()>:
c0018c84:	83 ec 1c             	sub    esp,0x1c
c0018c87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c8b:	83 ec 08             	sub    esp,0x8
c0018c8e:	68 a3 2e 02 c0       	push   0xc0022ea3
c0018c93:	50                   	push   eax
c0018c94:	e8 f1 37 ff ff       	call   c000c48a <Clock::Clock(char const*)>
c0018c99:	83 c4 10             	add    esp,0x10
c0018c9c:	ba c0 2e 02 c0       	mov    edx,0xc0022ec0
c0018ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ca5:	89 10                	mov    DWORD PTR [eax],edx
c0018ca7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cab:	83 ec 0c             	sub    esp,0xc
c0018cae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018cb2:	6a 01                	push   0x1
c0018cb4:	68 3e 8c 01 c0       	push   0xc0018c3e
c0018cb9:	6a 08                	push   0x8
c0018cbb:	50                   	push   eax
c0018cbc:	e8 ab 3c ff ff       	call   c000c96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018cc1:	83 c4 20             	add    esp,0x20
c0018cc4:	89 c2                	mov    edx,eax
c0018cc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cca:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018cd0:	fa                   	cli    
c0018cd1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018cd6:	83 c0 01             	add    eax,0x1
c0018cd9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018cde:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018ce3:	83 ec 08             	sub    esp,0x8
c0018ce6:	6a 0b                	push   0xb
c0018ce8:	50                   	push   eax
c0018ce9:	e8 ce e4 fe ff       	call   c00071bc <Computer::readCMOS(unsigned char)>
c0018cee:	83 c4 10             	add    esp,0x10
c0018cf1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018cf5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018cfa:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018cfe:	83 ca 10             	or     edx,0x10
c0018d01:	0f b6 d2             	movzx  edx,dl
c0018d04:	83 ec 04             	sub    esp,0x4
c0018d07:	52                   	push   edx
c0018d08:	6a 0b                	push   0xb
c0018d0a:	50                   	push   eax
c0018d0b:	e8 c4 e5 fe ff       	call   c00072d4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d10:	83 c4 10             	add    esp,0x10
c0018d13:	83 ec 0c             	sub    esp,0xc
c0018d16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d1a:	e8 97 fa ff ff       	call   c00187b6 <RTC::completeRTCRefresh()>
c0018d1f:	83 c4 10             	add    esp,0x10
c0018d22:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d27:	83 e8 01             	sub    eax,0x1
c0018d2a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d2f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d34:	85 c0                	test   eax,eax
c0018d36:	75 01                	jne    c0018d39 <RTC::RTC()+0xb5>
c0018d38:	fb                   	sti    
c0018d39:	90                   	nop
c0018d3a:	83 c4 1c             	add    esp,0x1c
c0018d3d:	c3                   	ret    
c0018d3e:	66 90                	xchg   ax,ax

c0018d40 <HalConsoleScroll(int, int)>:
c0018d40:	83 ec 10             	sub    esp,0x10
c0018d43:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018d4b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018d53:	90                   	nop
c0018d54:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d59:	0f 8f e1 00 00 00    	jg     c0018e40 <HalConsoleScroll(int, int)+0x100>
c0018d5f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d67:	90                   	nop
c0018d68:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018d70:	0f 8f be 00 00 00    	jg     c0018e34 <HalConsoleScroll(int, int)+0xf4>
c0018d76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d7a:	89 d0                	mov    eax,edx
c0018d7c:	c1 e0 02             	shl    eax,0x2
c0018d7f:	01 d0                	add    eax,edx
c0018d81:	c1 e0 05             	shl    eax,0x5
c0018d84:	89 c2                	mov    edx,eax
c0018d86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d8a:	01 d0                	add    eax,edx
c0018d8c:	89 c2                	mov    edx,eax
c0018d8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d92:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018d95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d99:	89 d0                	mov    eax,edx
c0018d9b:	c1 e0 02             	shl    eax,0x2
c0018d9e:	01 d0                	add    eax,edx
c0018da0:	c1 e0 05             	shl    eax,0x5
c0018da3:	89 c2                	mov    edx,eax
c0018da5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018da9:	01 d0                	add    eax,edx
c0018dab:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018db1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018db5:	01 d0                	add    eax,edx
c0018db7:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018db9:	88 10                	mov    BYTE PTR [eax],dl
c0018dbb:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018dc0:	75 66                	jne    c0018e28 <HalConsoleScroll(int, int)+0xe8>
c0018dc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dc6:	83 e0 01             	and    eax,0x1
c0018dc9:	74 39                	je     c0018e04 <HalConsoleScroll(int, int)+0xc4>
c0018dcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018dcf:	83 e0 0f             	and    eax,0xf
c0018dd2:	88 c2                	mov    dl,al
c0018dd4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018dd8:	c1 e0 04             	shl    eax,0x4
c0018ddb:	09 d0                	or     eax,edx
c0018ddd:	88 c1                	mov    cl,al
c0018ddf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018de3:	89 d0                	mov    eax,edx
c0018de5:	c1 e0 02             	shl    eax,0x2
c0018de8:	01 d0                	add    eax,edx
c0018dea:	c1 e0 05             	shl    eax,0x5
c0018ded:	89 c2                	mov    edx,eax
c0018def:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018df3:	01 d0                	add    eax,edx
c0018df5:	89 c2                	mov    edx,eax
c0018df7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dfb:	01 d0                	add    eax,edx
c0018dfd:	88 ca                	mov    dl,cl
c0018dff:	88 10                	mov    BYTE PTR [eax],dl
c0018e01:	eb 25                	jmp    c0018e28 <HalConsoleScroll(int, int)+0xe8>
c0018e03:	90                   	nop
c0018e04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e08:	89 d0                	mov    eax,edx
c0018e0a:	c1 e0 02             	shl    eax,0x2
c0018e0d:	01 d0                	add    eax,edx
c0018e0f:	c1 e0 05             	shl    eax,0x5
c0018e12:	89 c2                	mov    edx,eax
c0018e14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e18:	01 d0                	add    eax,edx
c0018e1a:	89 c2                	mov    edx,eax
c0018e1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e20:	01 d0                	add    eax,edx
c0018e22:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018e25:	8d 76 00             	lea    esi,[esi+0x0]
c0018e28:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018e2d:	e9 36 ff ff ff       	jmp    c0018d68 <HalConsoleScroll(int, int)+0x28>
c0018e32:	66 90                	xchg   ax,ax
c0018e34:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018e39:	e9 16 ff ff ff       	jmp    c0018d54 <HalConsoleScroll(int, int)+0x14>
c0018e3e:	66 90                	xchg   ax,ax
c0018e40:	90                   	nop
c0018e41:	83 c4 10             	add    esp,0x10
c0018e44:	c3                   	ret    
c0018e45:	8d 76 00             	lea    esi,[esi+0x0]

c0018e48 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018e48:	83 ec 14             	sub    esp,0x14
c0018e4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e4f:	88 04 24             	mov    BYTE PTR [esp],al
c0018e52:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018e55:	0f b6 c0             	movzx  eax,al
c0018e58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e5c:	89 d1                	mov    ecx,edx
c0018e5e:	83 e1 0f             	and    ecx,0xf
c0018e61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e65:	c1 e2 04             	shl    edx,0x4
c0018e68:	0f b6 d2             	movzx  edx,dl
c0018e6b:	09 ca                	or     edx,ecx
c0018e6d:	c1 e2 08             	shl    edx,0x8
c0018e70:	09 d0                	or     eax,edx
c0018e72:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018e77:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018e7f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e83:	89 d0                	mov    eax,edx
c0018e85:	c1 e0 02             	shl    eax,0x2
c0018e88:	01 d0                	add    eax,edx
c0018e8a:	c1 e0 04             	shl    eax,0x4
c0018e8d:	89 c2                	mov    edx,eax
c0018e8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e93:	01 d0                	add    eax,edx
c0018e95:	d1 e0                	shl    eax,1
c0018e97:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018e9f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018ea4:	66 89 10             	mov    WORD PTR [eax],dx
c0018ea7:	90                   	nop
c0018ea8:	83 c4 14             	add    esp,0x14
c0018eab:	c3                   	ret    

c0018eac <HalConsoleCursorUpdate(int, int)>:
c0018eac:	83 ec 20             	sub    esp,0x20
c0018eaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018eb3:	89 c2                	mov    edx,eax
c0018eb5:	c1 e2 02             	shl    edx,0x2
c0018eb8:	01 d0                	add    eax,edx
c0018eba:	c1 e0 04             	shl    eax,0x4
c0018ebd:	89 c2                	mov    edx,eax
c0018ebf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ec3:	01 d0                	add    eax,edx
c0018ec5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018eca:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018ed1:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018ed6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018eda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ede:	ee                   	out    dx,al
c0018edf:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018ee4:	0f b6 c0             	movzx  eax,al
c0018ee7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018eee:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018ef2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018ef6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018efa:	ee                   	out    dx,al
c0018efb:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018f02:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018f07:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018f0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018f0f:	ee                   	out    dx,al
c0018f10:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018f15:	c1 e8 08             	shr    eax,0x8
c0018f18:	0f b6 c0             	movzx  eax,al
c0018f1b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018f22:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018f26:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018f2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f2e:	ee                   	out    dx,al
c0018f2f:	90                   	nop
c0018f30:	83 c4 20             	add    esp,0x20
c0018f33:	c3                   	ret    

c0018f34 <FAT::getName()>:
c0018f34:	b8 f4 2e 02 c0       	mov    eax,0xc0022ef4
c0018f39:	c3                   	ret    
c0018f3a:	66 90                	xchg   ax,ax

c0018f3c <FAT::tell(void*, unsigned long long*)>:
c0018f3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f41:	75 09                	jne    c0018f4c <FAT::tell(void*, unsigned long long*)+0x10>
c0018f43:	b8 04 00 00 00       	mov    eax,0x4
c0018f48:	c3                   	ret    
c0018f49:	8d 76 00             	lea    esi,[esi+0x0]
c0018f4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f51:	75 09                	jne    c0018f5c <FAT::tell(void*, unsigned long long*)+0x20>
c0018f53:	b8 04 00 00 00       	mov    eax,0x4
c0018f58:	c3                   	ret    
c0018f59:	8d 76 00             	lea    esi,[esi+0x0]
c0018f5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f60:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f63:	ba 00 00 00 00       	mov    edx,0x0
c0018f68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f6c:	89 01                	mov    DWORD PTR [ecx],eax
c0018f6e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f71:	b8 00 00 00 00       	mov    eax,0x0
c0018f76:	c3                   	ret    
c0018f77:	90                   	nop

c0018f78 <FAT::stat(void*, unsigned long long*)>:
c0018f78:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f7d:	75 09                	jne    c0018f88 <FAT::stat(void*, unsigned long long*)+0x10>
c0018f7f:	b8 04 00 00 00       	mov    eax,0x4
c0018f84:	c3                   	ret    
c0018f85:	8d 76 00             	lea    esi,[esi+0x0]
c0018f88:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f8d:	75 09                	jne    c0018f98 <FAT::stat(void*, unsigned long long*)+0x20>
c0018f8f:	b8 04 00 00 00       	mov    eax,0x4
c0018f94:	c3                   	ret    
c0018f95:	8d 76 00             	lea    esi,[esi+0x0]
c0018f98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018f9f:	ba 00 00 00 00       	mov    edx,0x0
c0018fa4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018fa8:	89 01                	mov    DWORD PTR [ecx],eax
c0018faa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018fad:	b8 00 00 00 00       	mov    eax,0x0
c0018fb2:	c3                   	ret    
c0018fb3:	90                   	nop

c0018fb4 <FAT::~FAT()>:
c0018fb4:	83 ec 0c             	sub    esp,0xc
c0018fb7:	ba 40 2f 02 c0       	mov    edx,0xc0022f40
c0018fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fc0:	89 10                	mov    DWORD PTR [eax],edx
c0018fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fc6:	83 ec 0c             	sub    esp,0xc
c0018fc9:	50                   	push   eax
c0018fca:	e8 e1 27 ff ff       	call   c000b7b0 <Filesystem::~Filesystem()>
c0018fcf:	83 c4 10             	add    esp,0x10
c0018fd2:	90                   	nop
c0018fd3:	83 c4 0c             	add    esp,0xc
c0018fd6:	c3                   	ret    
c0018fd7:	90                   	nop

c0018fd8 <FAT::~FAT()>:
c0018fd8:	83 ec 0c             	sub    esp,0xc
c0018fdb:	83 ec 0c             	sub    esp,0xc
c0018fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fe2:	e8 cd ff ff ff       	call   c0018fb4 <FAT::~FAT()>
c0018fe7:	83 c4 10             	add    esp,0x10
c0018fea:	83 ec 08             	sub    esp,0x8
c0018fed:	6a 08                	push   0x8
c0018fef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ff3:	e8 34 18 ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c0018ff8:	83 c4 10             	add    esp,0x10
c0018ffb:	83 c4 0c             	add    esp,0xc
c0018ffe:	c3                   	ret    
c0018fff:	90                   	nop

c0019000 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019000:	83 ec 1c             	sub    esp,0x1c
c0019003:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001900a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001900f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019013:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001901a:	83 f8 ff             	cmp    eax,0xffffffff
c001901d:	75 35                	jne    c0019054 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001901f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019023:	88 c2                	mov    dl,al
c0019025:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001902a:	01 d0                	add    eax,edx
c001902c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019030:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019036:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001903a:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019041:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019046:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001904a:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019051:	eb 19                	jmp    c001906c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019053:	90                   	nop
c0019054:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019058:	88 c2                	mov    dl,al
c001905a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001905e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019065:	01 d0                	add    eax,edx
c0019067:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001906b:	90                   	nop
c001906c:	83 ec 04             	sub    esp,0x4
c001906f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019077:	8d 44 24 15          	lea    eax,[esp+0x15]
c001907b:	50                   	push   eax
c001907c:	e8 72 bf fe ff       	call   c0004ff3 <f_getlabel>
c0019081:	83 c4 10             	add    esp,0x10
c0019084:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019088:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001908d:	75 09                	jne    c0019098 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001908f:	b8 00 00 00 00       	mov    eax,0x0
c0019094:	eb 0a                	jmp    c00190a0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0019096:	66 90                	xchg   ax,ax
c0019098:	b8 01 00 00 00       	mov    eax,0x1
c001909d:	8d 76 00             	lea    esi,[esi+0x0]
c00190a0:	83 c4 1c             	add    esp,0x1c
c00190a3:	c3                   	ret    

c00190a4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00190a4:	53                   	push   ebx
c00190a5:	83 ec 58             	sub    esp,0x58
c00190a8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00190b0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00190b4:	b9 00 00 00 00       	mov    ecx,0x0
c00190b9:	b8 3c 00 00 00       	mov    eax,0x3c
c00190be:	83 e0 f8             	and    eax,0xfffffff8
c00190c1:	89 c3                	mov    ebx,eax
c00190c3:	b8 00 00 00 00       	mov    eax,0x0
c00190c8:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c00190cc:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c00190d0:	83 c0 08             	add    eax,0x8
c00190d3:	39 d8                	cmp    eax,ebx
c00190d5:	72 f1                	jb     c00190c8 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c00190d7:	01 c2                	add    edx,eax
c00190d9:	89 0a                	mov    DWORD PTR [edx],ecx
c00190db:	83 c2 04             	add    edx,0x4
c00190de:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190e2:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190e9:	83 f8 ff             	cmp    eax,0xffffffff
c00190ec:	75 36                	jne    c0019124 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c00190ee:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00190f2:	88 c2                	mov    dl,al
c00190f4:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190f9:	01 d0                	add    eax,edx
c00190fb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00190ff:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019105:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019109:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019110:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019115:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019119:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019120:	eb 1a                	jmp    c001913c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0019122:	66 90                	xchg   ax,ax
c0019124:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019128:	88 c2                	mov    dl,al
c001912a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001912e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019135:	01 d0                	add    eax,edx
c0019137:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001913b:	90                   	nop
c001913c:	83 ec 08             	sub    esp,0x8
c001913f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019143:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019147:	50                   	push   eax
c0019148:	e8 23 77 fe ff       	call   c0000870 <strcat>
c001914d:	83 c4 10             	add    esp,0x10
c0019150:	83 ec 0c             	sub    esp,0xc
c0019153:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019157:	50                   	push   eax
c0019158:	e8 ea bf fe ff       	call   c0005147 <f_setlabel>
c001915d:	83 c4 10             	add    esp,0x10
c0019160:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019164:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019169:	75 09                	jne    c0019174 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001916b:	b8 00 00 00 00       	mov    eax,0x0
c0019170:	eb 0a                	jmp    c001917c <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0019172:	66 90                	xchg   ax,ax
c0019174:	b8 01 00 00 00       	mov    eax,0x1
c0019179:	8d 76 00             	lea    esi,[esi+0x0]
c001917c:	83 c4 58             	add    esp,0x58
c001917f:	5b                   	pop    ebx
c0019180:	c3                   	ret    
c0019181:	90                   	nop
c0019182:	66 90                	xchg   ax,ax

c0019184 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019184:	83 ec 2c             	sub    esp,0x2c
c0019187:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001918f:	83 ec 08             	sub    esp,0x8
c0019192:	68 18 2f 02 c0       	push   0xc0022f18
c0019197:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001919b:	e8 e0 75 fe ff       	call   c0000780 <strcmp>
c00191a0:	83 c4 10             	add    esp,0x10
c00191a3:	85 c0                	test   eax,eax
c00191a5:	0f 94 c0             	sete   al
c00191a8:	0f b6 c0             	movzx  eax,al
c00191ab:	85 c0                	test   eax,eax
c00191ad:	74 0d                	je     c00191bc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00191af:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191b7:	e9 c0 00 00 00       	jmp    c001927c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191bc:	83 ec 08             	sub    esp,0x8
c00191bf:	68 0a 2f 02 c0       	push   0xc0022f0a
c00191c4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191c8:	e8 b3 75 fe ff       	call   c0000780 <strcmp>
c00191cd:	83 c4 10             	add    esp,0x10
c00191d0:	85 c0                	test   eax,eax
c00191d2:	0f 94 c0             	sete   al
c00191d5:	0f b6 c0             	movzx  eax,al
c00191d8:	85 c0                	test   eax,eax
c00191da:	74 10                	je     c00191ec <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00191dc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191e4:	e9 93 00 00 00       	jmp    c001927c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191e9:	8d 76 00             	lea    esi,[esi+0x0]
c00191ec:	83 ec 08             	sub    esp,0x8
c00191ef:	68 10 2f 02 c0       	push   0xc0022f10
c00191f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191f8:	e8 83 75 fe ff       	call   c0000780 <strcmp>
c00191fd:	83 c4 10             	add    esp,0x10
c0019200:	85 c0                	test   eax,eax
c0019202:	0f 94 c0             	sete   al
c0019205:	0f b6 c0             	movzx  eax,al
c0019208:	85 c0                	test   eax,eax
c001920a:	74 0c                	je     c0019218 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001920c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019214:	eb 66                	jmp    c001927c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019216:	66 90                	xchg   ax,ax
c0019218:	83 ec 08             	sub    esp,0x8
c001921b:	68 bc 05 02 c0       	push   0xc00205bc
c0019220:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019224:	e8 57 75 fe ff       	call   c0000780 <strcmp>
c0019229:	83 c4 10             	add    esp,0x10
c001922c:	85 c0                	test   eax,eax
c001922e:	0f 94 c0             	sete   al
c0019231:	0f b6 c0             	movzx  eax,al
c0019234:	85 c0                	test   eax,eax
c0019236:	74 0c                	je     c0019244 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019238:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019240:	eb 3a                	jmp    c001927c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019242:	66 90                	xchg   ax,ax
c0019244:	83 ec 08             	sub    esp,0x8
c0019247:	68 16 2f 02 c0       	push   0xc0022f16
c001924c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019250:	e8 2b 75 fe ff       	call   c0000780 <strcmp>
c0019255:	83 c4 10             	add    esp,0x10
c0019258:	85 c0                	test   eax,eax
c001925a:	0f 94 c0             	sete   al
c001925d:	0f b6 c0             	movzx  eax,al
c0019260:	85 c0                	test   eax,eax
c0019262:	74 0c                	je     c0019270 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019264:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001926c:	eb 0e                	jmp    c001927c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001926e:	66 90                	xchg   ax,ax
c0019270:	b8 08 00 00 00       	mov    eax,0x8
c0019275:	e9 ea 00 00 00       	jmp    c0019364 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001927a:	66 90                	xchg   ax,ax
c001927c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019283:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019288:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001928c:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019293:	83 f8 ff             	cmp    eax,0xffffffff
c0019296:	75 34                	jne    c00192cc <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019298:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001929c:	88 c2                	mov    dl,al
c001929e:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192a3:	01 d0                	add    eax,edx
c00192a5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00192a9:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00192af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192b3:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00192ba:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192bf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00192c3:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00192ca:	eb 18                	jmp    c00192e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00192cc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00192d0:	88 c2                	mov    dl,al
c00192d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192d6:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00192dd:	01 d0                	add    eax,edx
c00192df:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00192e3:	90                   	nop
c00192e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00192e8:	88 04 24             	mov    BYTE PTR [esp],al
c00192eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00192ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192f3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00192fb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019300:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019308:	83 ec 0c             	sub    esp,0xc
c001930b:	68 00 20 00 00       	push   0x2000
c0019310:	e8 de e7 fe ff       	call   c0007af3 <malloc>
c0019315:	83 c4 10             	add    esp,0x10
c0019318:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001931c:	68 00 20 00 00       	push   0x2000
c0019321:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019325:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019329:	50                   	push   eax
c001932a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001932e:	50                   	push   eax
c001932f:	e8 10 c1 fe ff       	call   c0005444 <f_mkfs>
c0019334:	83 c4 10             	add    esp,0x10
c0019337:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001933b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019340:	75 0a                	jne    c001934c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019342:	b8 00 00 00 00       	mov    eax,0x0
c0019347:	eb 1b                	jmp    c0019364 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019349:	8d 76 00             	lea    esi,[esi+0x0]
c001934c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019351:	75 09                	jne    c001935c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019353:	b8 09 00 00 00       	mov    eax,0x9
c0019358:	eb 0a                	jmp    c0019364 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001935a:	66 90                	xchg   ax,ax
c001935c:	b8 01 00 00 00       	mov    eax,0x1
c0019361:	8d 76 00             	lea    esi,[esi+0x0]
c0019364:	83 c4 2c             	add    esp,0x2c
c0019367:	c3                   	ret    

c0019368 <FAT::tryMount(LogicalDisk*, int)>:
c0019368:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001936e:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019373:	83 f8 14             	cmp    eax,0x14
c0019376:	75 18                	jne    c0019390 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019378:	83 ec 0c             	sub    esp,0xc
c001937b:	68 1c 2f 02 c0       	push   0xc0022f1c
c0019380:	e8 5a 82 ff ff       	call   c00115df <KePanic(char const*)>
c0019385:	83 c4 10             	add    esp,0x10
c0019388:	b0 00                	mov    al,0x0
c001938a:	e9 ed 01 00 00       	jmp    c001957c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001938f:	90                   	nop
c0019390:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019397:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001939d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00193a3:	3d 00 02 00 00       	cmp    eax,0x200
c00193a8:	74 0a                	je     c00193b4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00193aa:	b0 00                	mov    al,0x0
c00193ac:	e9 cb 01 00 00       	jmp    c001957c <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193b1:	8d 76 00             	lea    esi,[esi+0x0]
c00193b4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00193bc:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00193c3:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00193ca:	83 f8 ff             	cmp    eax,0xffffffff
c00193cd:	74 09                	je     c00193d8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00193cf:	b0 01                	mov    al,0x1
c00193d1:	e9 a6 01 00 00       	jmp    c001957c <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193d6:	66 90                	xchg   ax,ax
c00193d8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00193e2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00193ea:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00193f1:	88 c2                	mov    dl,al
c00193f3:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193f8:	01 d0                	add    eax,edx
c00193fa:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019401:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019407:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001940e:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019415:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001941a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019421:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019428:	83 ec 0c             	sub    esp,0xc
c001942b:	68 34 02 00 00       	push   0x234
c0019430:	e8 be e6 fe ff       	call   c0007af3 <malloc>
c0019435:	83 c4 10             	add    esp,0x10
c0019438:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001943f:	83 ec 04             	sub    esp,0x4
c0019442:	6a 00                	push   0x0
c0019444:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001944b:	50                   	push   eax
c001944c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019453:	e8 e6 a7 fe ff       	call   c0003c3e <f_mount>
c0019458:	83 c4 10             	add    esp,0x10
c001945b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019462:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001946a:	74 1c                	je     c0019488 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001946c:	83 ec 0c             	sub    esp,0xc
c001946f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019476:	e8 98 e6 fe ff       	call   c0007b13 <rfree>
c001947b:	83 c4 10             	add    esp,0x10
c001947e:	b0 00                	mov    al,0x0
c0019480:	e9 f7 00 00 00       	jmp    c001957c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019485:	8d 76 00             	lea    esi,[esi+0x0]
c0019488:	83 ec 04             	sub    esp,0x4
c001948b:	68 00 01 00 00       	push   0x100
c0019490:	6a 00                	push   0x0
c0019492:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019499:	50                   	push   eax
c001949a:	e8 51 70 fe ff       	call   c00004f0 <memset>
c001949f:	83 c4 10             	add    esp,0x10
c00194a2:	83 ec 08             	sub    esp,0x8
c00194a5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194ac:	50                   	push   eax
c00194ad:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194b4:	50                   	push   eax
c00194b5:	e8 b6 73 fe ff       	call   c0000870 <strcat>
c00194ba:	83 c4 10             	add    esp,0x10
c00194bd:	83 ec 08             	sub    esp,0x8
c00194c0:	68 2a 2f 02 c0       	push   0xc0022f2a
c00194c5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194cc:	50                   	push   eax
c00194cd:	e8 9e 73 fe ff       	call   c0000870 <strcat>
c00194d2:	83 c4 10             	add    esp,0x10
c00194d5:	83 ec 04             	sub    esp,0x4
c00194d8:	6a 01                	push   0x1
c00194da:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00194e1:	50                   	push   eax
c00194e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194e6:	50                   	push   eax
c00194e7:	e8 b4 a7 fe ff       	call   c0003ca0 <f_open>
c00194ec:	83 c4 10             	add    esp,0x10
c00194ef:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00194f6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00194fd:	85 c0                	test   eax,eax
c00194ff:	74 0b                	je     c001950c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019501:	78 31                	js     c0019534 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019503:	83 e8 04             	sub    eax,0x4
c0019506:	83 f8 01             	cmp    eax,0x1
c0019509:	77 29                	ja     c0019534 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001950b:	90                   	nop
c001950c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019514:	83 ec 0c             	sub    esp,0xc
c0019517:	8d 44 24 14          	lea    eax,[esp+0x14]
c001951b:	50                   	push   eax
c001951c:	e8 2f af fe ff       	call   c0004450 <f_close>
c0019521:	83 c4 10             	add    esp,0x10
c0019524:	90                   	nop
c0019525:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001952d:	85 c0                	test   eax,eax
c001952f:	74 43                	je     c0019574 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019531:	eb 31                	jmp    c0019564 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019533:	90                   	nop
c0019534:	83 ec 0c             	sub    esp,0xc
c0019537:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001953e:	e8 d0 e5 fe ff       	call   c0007b13 <rfree>
c0019543:	83 c4 10             	add    esp,0x10
c0019546:	83 ec 04             	sub    esp,0x4
c0019549:	6a 00                	push   0x0
c001954b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019552:	50                   	push   eax
c0019553:	6a 00                	push   0x0
c0019555:	e8 e4 a6 fe ff       	call   c0003c3e <f_mount>
c001955a:	83 c4 10             	add    esp,0x10
c001955d:	b0 00                	mov    al,0x0
c001955f:	eb 1b                	jmp    c001957c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019561:	8d 76 00             	lea    esi,[esi+0x0]
c0019564:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019569:	83 c0 01             	add    eax,0x1
c001956c:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c0019571:	8d 76 00             	lea    esi,[esi+0x0]
c0019574:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001957b:	90                   	nop
c001957c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019582:	c3                   	ret    
c0019583:	90                   	nop

c0019584 <FAT::allocateSwapfile(char const*, int)>:
c0019584:	55                   	push   ebp
c0019585:	57                   	push   edi
c0019586:	56                   	push   esi
c0019587:	53                   	push   ebx
c0019588:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001958e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019599:	83 ec 0c             	sub    esp,0xc
c001959c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00195a3:	e8 4b e5 fe ff       	call   c0007af3 <malloc>
c00195a8:	83 c4 10             	add    esp,0x10
c00195ab:	89 c7                	mov    edi,eax
c00195ad:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00195b2:	83 ec 04             	sub    esp,0x4
c00195b5:	50                   	push   eax
c00195b6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00195bd:	57                   	push   edi
c00195be:	e8 7f 25 ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c00195c3:	83 c4 10             	add    esp,0x10
c00195c6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00195cd:	83 ec 04             	sub    esp,0x4
c00195d0:	8d 44 24 13          	lea    eax,[esp+0x13]
c00195d4:	50                   	push   eax
c00195d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00195d9:	50                   	push   eax
c00195da:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195e1:	e8 7c 28 ff ff       	call   c000be62 <File::stat(unsigned long long*, bool*)>
c00195e6:	83 c4 10             	add    esp,0x10
c00195e9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00195f0:	c1 e0 14             	shl    eax,0x14
c00195f3:	89 c7                	mov    edi,eax
c00195f5:	89 c5                	mov    ebp,eax
c00195f7:	c1 fd 1f             	sar    ebp,0x1f
c00195fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019602:	89 f9                	mov    ecx,edi
c0019604:	31 c1                	xor    ecx,eax
c0019606:	89 cb                	mov    ebx,ecx
c0019608:	89 e9                	mov    ecx,ebp
c001960a:	31 d1                	xor    ecx,edx
c001960c:	89 ce                	mov    esi,ecx
c001960e:	89 f0                	mov    eax,esi
c0019610:	09 d8                	or     eax,ebx
c0019612:	0f 84 9c 00 00 00    	je     c00196b4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019618:	83 ec 0c             	sub    esp,0xc
c001961b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019622:	e8 07 27 ff ff       	call   c000bd2e <File::unlink()>
c0019627:	83 c4 10             	add    esp,0x10
c001962a:	83 ec 08             	sub    esp,0x8
c001962d:	6a 12                	push   0x12
c001962f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019636:	e8 25 25 ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019645:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001964b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019652:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019659:	c1 e0 14             	shl    eax,0x14
c001965c:	83 ec 04             	sub    esp,0x4
c001965f:	6a 01                	push   0x1
c0019661:	50                   	push   eax
c0019662:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019669:	e8 69 bc fe ff       	call   c00052d7 <f_expand>
c001966e:	83 c4 10             	add    esp,0x10
c0019671:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019678:	8b 00                	mov    eax,DWORD PTR [eax]
c001967a:	83 c0 10             	add    eax,0x10
c001967d:	8b 00                	mov    eax,DWORD PTR [eax]
c001967f:	83 ec 0c             	sub    esp,0xc
c0019682:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019686:	52                   	push   edx
c0019687:	8d 54 24 30          	lea    edx,[esp+0x30]
c001968b:	52                   	push   edx
c001968c:	6a 00                	push   0x0
c001968e:	68 00 04 00 00       	push   0x400
c0019693:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001969a:	ff d0                	call   eax
c001969c:	83 c4 20             	add    esp,0x20
c001969f:	83 ec 0c             	sub    esp,0xc
c00196a2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196a9:	e8 10 25 ff ff       	call   c000bbbe <File::close()>
c00196ae:	83 c4 10             	add    esp,0x10
c00196b1:	8d 76 00             	lea    esi,[esi+0x0]
c00196b4:	83 ec 08             	sub    esp,0x8
c00196b7:	6a 01                	push   0x1
c00196b9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196c0:	e8 9b 24 ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c00196c5:	83 c4 10             	add    esp,0x10
c00196c8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00196d1:	83 c0 0c             	add    eax,0xc
c00196d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00196d6:	83 ec 0c             	sub    esp,0xc
c00196d9:	8d 54 24 24          	lea    edx,[esp+0x24]
c00196dd:	52                   	push   edx
c00196de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00196e2:	52                   	push   edx
c00196e3:	6a 00                	push   0x0
c00196e5:	6a 04                	push   0x4
c00196e7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00196ee:	ff d0                	call   eax
c00196f0:	83 c4 20             	add    esp,0x20
c00196f3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196fa:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019700:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019707:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001970e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019711:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019718:	83 ec 0c             	sub    esp,0xc
c001971b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019722:	e8 97 24 ff ff       	call   c000bbbe <File::close()>
c0019727:	83 c4 10             	add    esp,0x10
c001972a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019731:	ba 00 00 00 00       	mov    edx,0x0
c0019736:	81 c4 3c 04 00 00    	add    esp,0x43c
c001973c:	5b                   	pop    ebx
c001973d:	5e                   	pop    esi
c001973e:	5f                   	pop    edi
c001973f:	5d                   	pop    ebp
c0019740:	c3                   	ret    
c0019741:	90                   	nop
c0019742:	66 90                	xchg   ax,ax

c0019744 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019744:	57                   	push   edi
c0019745:	56                   	push   esi
c0019746:	53                   	push   ebx
c0019747:	81 ec 50 02 00 00    	sub    esp,0x250
c001974d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019755:	74 0d                	je     c0019764 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019757:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001975f:	75 0f                	jne    c0019770 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019761:	8d 76 00             	lea    esi,[esi+0x0]
c0019764:	b8 04 00 00 00       	mov    eax,0x4
c0019769:	e9 3a 01 00 00       	jmp    c00198a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001976e:	66 90                	xchg   ax,ax
c0019770:	83 ec 08             	sub    esp,0x8
c0019773:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001977a:	50                   	push   eax
c001977b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019782:	e8 95 af fe ff       	call   c000471c <f_readdir>
c0019787:	83 c4 10             	add    esp,0x10
c001978a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019791:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019798:	83 ec 0c             	sub    esp,0xc
c001979b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00197a2:	83 c0 16             	add    eax,0x16
c00197a5:	50                   	push   eax
c00197a6:	e8 d5 6d fe ff       	call   c0000580 <strlen>
c00197ab:	83 c4 10             	add    esp,0x10
c00197ae:	ba 00 00 00 00       	mov    edx,0x0
c00197b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197b7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00197bb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00197c2:	0f b6 c0             	movzx  eax,al
c00197c5:	83 e0 10             	and    eax,0x10
c00197c8:	74 0a                	je     c00197d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00197ca:	b8 02 00 00 00       	mov    eax,0x2
c00197cf:	eb 0b                	jmp    c00197dc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00197d1:	8d 76 00             	lea    esi,[esi+0x0]
c00197d4:	b8 01 00 00 00       	mov    eax,0x1
c00197d9:	8d 76 00             	lea    esi,[esi+0x0]
c00197dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00197e0:	83 ec 08             	sub    esp,0x8
c00197e3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00197ea:	83 c0 16             	add    eax,0x16
c00197ed:	50                   	push   eax
c00197ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c00197f2:	83 c0 10             	add    eax,0x10
c00197f5:	50                   	push   eax
c00197f6:	e8 55 6e fe ff       	call   c0000650 <strcpy>
c00197fb:	83 c4 10             	add    esp,0x10
c00197fe:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019805:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001980c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019810:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019817:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001981e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019825:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001982c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019833:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001983a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019841:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019848:	89 c6                	mov    esi,eax
c001984a:	89 d7                	mov    edi,edx
c001984c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001984e:	89 c8                	mov    eax,ecx
c0019850:	89 fa                	mov    edx,edi
c0019852:	89 f3                	mov    ebx,esi
c0019854:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001985b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019862:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019869:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019870:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019876:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001987d:	0f be c0             	movsx  eax,al
c0019880:	85 c0                	test   eax,eax
c0019882:	75 08                	jne    c001988c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019884:	b8 07 00 00 00       	mov    eax,0x7
c0019889:	eb 1d                	jmp    c00198a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001988b:	90                   	nop
c001988c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019893:	85 c0                	test   eax,eax
c0019895:	75 09                	jne    c00198a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019897:	b8 00 00 00 00       	mov    eax,0x0
c001989c:	eb 0a                	jmp    c00198a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001989e:	66 90                	xchg   ax,ax
c00198a0:	b8 01 00 00 00       	mov    eax,0x1
c00198a5:	8d 76 00             	lea    esi,[esi+0x0]
c00198a8:	81 c4 50 02 00 00    	add    esp,0x250
c00198ae:	5b                   	pop    ebx
c00198af:	5e                   	pop    esi
c00198b0:	5f                   	pop    edi
c00198b1:	c3                   	ret    
c00198b2:	66 90                	xchg   ax,ax

c00198b4 <FAT::read(void*, unsigned long, void*, int*)>:
c00198b4:	83 ec 1c             	sub    esp,0x1c
c00198b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198bc:	74 0a                	je     c00198c8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00198be:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00198c3:	75 0b                	jne    c00198d0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00198c5:	8d 76 00             	lea    esi,[esi+0x0]
c00198c8:	b8 04 00 00 00       	mov    eax,0x4
c00198cd:	eb 41                	jmp    c0019910 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00198cf:	90                   	nop
c00198d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198d4:	50                   	push   eax
c00198d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00198dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198e1:	e8 7d a6 fe ff       	call   c0003f63 <f_read>
c00198e6:	83 c4 10             	add    esp,0x10
c00198e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198f1:	89 c2                	mov    edx,eax
c00198f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198f7:	89 10                	mov    DWORD PTR [eax],edx
c00198f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198fd:	85 c0                	test   eax,eax
c00198ff:	75 07                	jne    c0019908 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019901:	b8 00 00 00 00       	mov    eax,0x0
c0019906:	eb 08                	jmp    c0019910 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019908:	b8 01 00 00 00       	mov    eax,0x1
c001990d:	8d 76 00             	lea    esi,[esi+0x0]
c0019910:	83 c4 1c             	add    esp,0x1c
c0019913:	c3                   	ret    

c0019914 <FAT::write(void*, unsigned long, void*, int*)>:
c0019914:	83 ec 1c             	sub    esp,0x1c
c0019917:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001991c:	74 0a                	je     c0019928 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001991e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019923:	75 0b                	jne    c0019930 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019925:	8d 76 00             	lea    esi,[esi+0x0]
c0019928:	b8 04 00 00 00       	mov    eax,0x4
c001992d:	eb 41                	jmp    c0019970 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001992f:	90                   	nop
c0019930:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019934:	50                   	push   eax
c0019935:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019939:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001993d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019941:	e8 fe a7 fe ff       	call   c0004144 <f_write>
c0019946:	83 c4 10             	add    esp,0x10
c0019949:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001994d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019951:	89 c2                	mov    edx,eax
c0019953:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019957:	89 10                	mov    DWORD PTR [eax],edx
c0019959:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001995d:	85 c0                	test   eax,eax
c001995f:	75 07                	jne    c0019968 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019961:	b8 00 00 00 00       	mov    eax,0x0
c0019966:	eb 08                	jmp    c0019970 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019968:	b8 01 00 00 00       	mov    eax,0x1
c001996d:	8d 76 00             	lea    esi,[esi+0x0]
c0019970:	83 c4 1c             	add    esp,0x1c
c0019973:	c3                   	ret    

c0019974 <FAT::close(void*)>:
c0019974:	83 ec 1c             	sub    esp,0x1c
c0019977:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001997c:	75 0a                	jne    c0019988 <FAT::close(void*)+0x14>
c001997e:	b8 04 00 00 00       	mov    eax,0x4
c0019983:	eb 3f                	jmp    c00199c4 <FAT::close(void*)+0x50>
c0019985:	8d 76 00             	lea    esi,[esi+0x0]
c0019988:	83 ec 0c             	sub    esp,0xc
c001998b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001998f:	e8 bc aa fe ff       	call   c0004450 <f_close>
c0019994:	83 c4 10             	add    esp,0x10
c0019997:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001999b:	83 ec 0c             	sub    esp,0xc
c001999e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199a2:	e8 5c e1 fe ff       	call   c0007b03 <free>
c00199a7:	83 c4 10             	add    esp,0x10
c00199aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199ae:	85 c0                	test   eax,eax
c00199b0:	75 0a                	jne    c00199bc <FAT::close(void*)+0x48>
c00199b2:	b8 00 00 00 00       	mov    eax,0x0
c00199b7:	eb 0b                	jmp    c00199c4 <FAT::close(void*)+0x50>
c00199b9:	8d 76 00             	lea    esi,[esi+0x0]
c00199bc:	b8 01 00 00 00       	mov    eax,0x1
c00199c1:	8d 76 00             	lea    esi,[esi+0x0]
c00199c4:	83 c4 1c             	add    esp,0x1c
c00199c7:	c3                   	ret    

c00199c8 <FAT::closeDir(void*)>:
c00199c8:	83 ec 1c             	sub    esp,0x1c
c00199cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199d0:	75 0a                	jne    c00199dc <FAT::closeDir(void*)+0x14>
c00199d2:	b8 04 00 00 00       	mov    eax,0x4
c00199d7:	eb 3f                	jmp    c0019a18 <FAT::closeDir(void*)+0x50>
c00199d9:	8d 76 00             	lea    esi,[esi+0x0]
c00199dc:	83 ec 0c             	sub    esp,0xc
c00199df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199e3:	e8 12 ad fe ff       	call   c00046fa <f_closedir>
c00199e8:	83 c4 10             	add    esp,0x10
c00199eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199ef:	83 ec 0c             	sub    esp,0xc
c00199f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199f6:	e8 08 e1 fe ff       	call   c0007b03 <free>
c00199fb:	83 c4 10             	add    esp,0x10
c00199fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a02:	85 c0                	test   eax,eax
c0019a04:	75 0a                	jne    c0019a10 <FAT::closeDir(void*)+0x48>
c0019a06:	b8 00 00 00 00       	mov    eax,0x0
c0019a0b:	eb 0b                	jmp    c0019a18 <FAT::closeDir(void*)+0x50>
c0019a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a10:	b8 01 00 00 00       	mov    eax,0x1
c0019a15:	8d 76 00             	lea    esi,[esi+0x0]
c0019a18:	83 c4 1c             	add    esp,0x1c
c0019a1b:	c3                   	ret    

c0019a1c <FAT::truncate(void*, unsigned long long)>:
c0019a1c:	83 ec 2c             	sub    esp,0x2c
c0019a1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a2f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a34:	75 0a                	jne    c0019a40 <FAT::truncate(void*, unsigned long long)+0x24>
c0019a36:	b8 04 00 00 00       	mov    eax,0x4
c0019a3b:	eb 47                	jmp    c0019a84 <FAT::truncate(void*, unsigned long long)+0x68>
c0019a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019a44:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019a47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a4b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019a53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a57:	83 ec 08             	sub    esp,0x8
c0019a5a:	50                   	push   eax
c0019a5b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a5f:	e8 1b aa fe ff       	call   c000447f <f_lseek>
c0019a64:	83 c4 10             	add    esp,0x10
c0019a67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019a6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a6f:	85 c0                	test   eax,eax
c0019a71:	75 09                	jne    c0019a7c <FAT::truncate(void*, unsigned long long)+0x60>
c0019a73:	b8 00 00 00 00       	mov    eax,0x0
c0019a78:	eb 0a                	jmp    c0019a84 <FAT::truncate(void*, unsigned long long)+0x68>
c0019a7a:	66 90                	xchg   ax,ax
c0019a7c:	b8 01 00 00 00       	mov    eax,0x1
c0019a81:	8d 76 00             	lea    esi,[esi+0x0]
c0019a84:	83 c4 2c             	add    esp,0x2c
c0019a87:	c3                   	ret    

c0019a88 <FAT::seek(void*, unsigned long long)>:
c0019a88:	83 ec 2c             	sub    esp,0x2c
c0019a8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a9b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019aa0:	75 0a                	jne    c0019aac <FAT::seek(void*, unsigned long long)+0x24>
c0019aa2:	b8 04 00 00 00       	mov    eax,0x4
c0019aa7:	eb 33                	jmp    c0019adc <FAT::seek(void*, unsigned long long)+0x54>
c0019aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0019aac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ab0:	83 ec 08             	sub    esp,0x8
c0019ab3:	50                   	push   eax
c0019ab4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019ab8:	e8 c2 a9 fe ff       	call   c000447f <f_lseek>
c0019abd:	83 c4 10             	add    esp,0x10
c0019ac0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ac4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ac8:	85 c0                	test   eax,eax
c0019aca:	75 08                	jne    c0019ad4 <FAT::seek(void*, unsigned long long)+0x4c>
c0019acc:	b8 00 00 00 00       	mov    eax,0x0
c0019ad1:	eb 09                	jmp    c0019adc <FAT::seek(void*, unsigned long long)+0x54>
c0019ad3:	90                   	nop
c0019ad4:	b8 01 00 00 00       	mov    eax,0x1
c0019ad9:	8d 76 00             	lea    esi,[esi+0x0]
c0019adc:	83 c4 2c             	add    esp,0x2c
c0019adf:	c3                   	ret    

c0019ae0 <fatWrapperReadDisk>:
c0019ae0:	53                   	push   ebx
c0019ae1:	83 ec 18             	sub    esp,0x18
c0019ae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ae8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019aec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019af1:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019af8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019afc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b00:	ba 00 00 00 00       	mov    edx,0x0
c0019b05:	83 ec 0c             	sub    esp,0xc
c0019b08:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b0c:	53                   	push   ebx
c0019b0d:	52                   	push   edx
c0019b0e:	50                   	push   eax
c0019b0f:	51                   	push   ecx
c0019b10:	e8 95 42 ff ff       	call   c000ddaa <LogicalDisk::read(unsigned long long, int, void*)>
c0019b15:	83 c4 20             	add    esp,0x20
c0019b18:	83 c4 18             	add    esp,0x18
c0019b1b:	5b                   	pop    ebx
c0019b1c:	c3                   	ret    
c0019b1d:	8d 76 00             	lea    esi,[esi+0x0]

c0019b20 <fatWrapperWriteDisk>:
c0019b20:	53                   	push   ebx
c0019b21:	83 ec 18             	sub    esp,0x18
c0019b24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b28:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b2c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b31:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b38:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b40:	ba 00 00 00 00       	mov    edx,0x0
c0019b45:	83 ec 0c             	sub    esp,0xc
c0019b48:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b4c:	53                   	push   ebx
c0019b4d:	52                   	push   edx
c0019b4e:	50                   	push   eax
c0019b4f:	51                   	push   ecx
c0019b50:	e8 c1 42 ff ff       	call   c000de16 <LogicalDisk::write(unsigned long long, int, void*)>
c0019b55:	83 c4 20             	add    esp,0x20
c0019b58:	83 c4 18             	add    esp,0x18
c0019b5b:	5b                   	pop    ebx
c0019b5c:	c3                   	ret    
c0019b5d:	8d 76 00             	lea    esi,[esi+0x0]

c0019b60 <fatWrapperIoctl>:
c0019b60:	53                   	push   ebx
c0019b61:	83 ec 28             	sub    esp,0x28
c0019b64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019b68:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019b6c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b70:	88 d0                	mov    al,dl
c0019b72:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b76:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b7b:	83 f8 02             	cmp    eax,0x2
c0019b7e:	75 34                	jne    c0019bb4 <fatWrapperIoctl+0x54>
c0019b80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b84:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b88:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b8d:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b94:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b9a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019ba0:	89 c2                	mov    edx,eax
c0019ba2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ba6:	66 89 10             	mov    WORD PTR [eax],dx
c0019ba9:	b8 00 00 00 00       	mov    eax,0x0
c0019bae:	e9 c5 00 00 00       	jmp    c0019c78 <fatWrapperIoctl+0x118>
c0019bb3:	90                   	nop
c0019bb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bb9:	83 f8 01             	cmp    eax,0x1
c0019bbc:	75 6a                	jne    c0019c28 <fatWrapperIoctl+0xc8>
c0019bbe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019bc6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bcb:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019bd2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019bd8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019bde:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019be4:	89 c8                	mov    eax,ecx
c0019be6:	89 da                	mov    edx,ebx
c0019be8:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019bec:	c1 e0 0a             	shl    eax,0xa
c0019bef:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019bf4:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019bfb:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c01:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c07:	89 cb                	mov    ebx,ecx
c0019c09:	c1 fb 1f             	sar    ebx,0x1f
c0019c0c:	53                   	push   ebx
c0019c0d:	51                   	push   ecx
c0019c0e:	52                   	push   edx
c0019c0f:	50                   	push   eax
c0019c10:	e8 bb 5b 00 00       	call   c001f7d0 <__udivdi3>
c0019c15:	83 c4 10             	add    esp,0x10
c0019c18:	89 c2                	mov    edx,eax
c0019c1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c1e:	89 10                	mov    DWORD PTR [eax],edx
c0019c20:	b8 00 00 00 00       	mov    eax,0x0
c0019c25:	eb 51                	jmp    c0019c78 <fatWrapperIoctl+0x118>
c0019c27:	90                   	nop
c0019c28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c2d:	85 c0                	test   eax,eax
c0019c2f:	75 07                	jne    c0019c38 <fatWrapperIoctl+0xd8>
c0019c31:	b8 00 00 00 00       	mov    eax,0x0
c0019c36:	eb 40                	jmp    c0019c78 <fatWrapperIoctl+0x118>
c0019c38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c3d:	83 f8 03             	cmp    eax,0x3
c0019c40:	75 1a                	jne    c0019c5c <fatWrapperIoctl+0xfc>
c0019c42:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c4e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019c54:	b8 00 00 00 00       	mov    eax,0x0
c0019c59:	eb 1d                	jmp    c0019c78 <fatWrapperIoctl+0x118>
c0019c5b:	90                   	nop
c0019c5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c61:	83 f8 04             	cmp    eax,0x4
c0019c64:	75 0a                	jne    c0019c70 <fatWrapperIoctl+0x110>
c0019c66:	b8 00 00 00 00       	mov    eax,0x0
c0019c6b:	eb 0b                	jmp    c0019c78 <fatWrapperIoctl+0x118>
c0019c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c70:	b8 04 00 00 00       	mov    eax,0x4
c0019c75:	8d 76 00             	lea    esi,[esi+0x0]
c0019c78:	83 c4 28             	add    esp,0x28
c0019c7b:	5b                   	pop    ebx
c0019c7c:	c3                   	ret    
c0019c7d:	90                   	nop
c0019c7e:	66 90                	xchg   ax,ax

c0019c80 <FAT::FAT()>:
c0019c80:	83 ec 1c             	sub    esp,0x1c
c0019c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c87:	83 ec 0c             	sub    esp,0xc
c0019c8a:	50                   	push   eax
c0019c8b:	e8 fc 1a ff ff       	call   c000b78c <Filesystem::Filesystem()>
c0019c90:	83 c4 10             	add    esp,0x10
c0019c93:	ba 40 2f 02 c0       	mov    edx,0xc0022f40
c0019c98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c9c:	89 10                	mov    DWORD PTR [eax],edx
c0019c9e:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019ca8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019cb0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019cb5:	7f 19                	jg     c0019cd0 <FAT::FAT()+0x50>
c0019cb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cbb:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019cc6:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019ccb:	eb e3                	jmp    c0019cb0 <FAT::FAT()+0x30>
c0019ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0019cd0:	90                   	nop
c0019cd1:	83 c4 1c             	add    esp,0x1c
c0019cd4:	c3                   	ret    
c0019cd5:	90                   	nop
c0019cd6:	66 90                	xchg   ax,ax

c0019cd8 <FAT::fixFilepath(char*)>:
c0019cd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cdc:	8a 00                	mov    al,BYTE PTR [eax]
c0019cde:	0f be c0             	movsx  eax,al
c0019ce1:	83 f8 40             	cmp    eax,0x40
c0019ce4:	7e 2e                	jle    c0019d14 <FAT::fixFilepath(char*)+0x3c>
c0019ce6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cea:	8a 00                	mov    al,BYTE PTR [eax]
c0019cec:	83 e8 41             	sub    eax,0x41
c0019cef:	88 c2                	mov    dl,al
c0019cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cf5:	88 10                	mov    BYTE PTR [eax],dl
c0019cf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cfb:	8a 00                	mov    al,BYTE PTR [eax]
c0019cfd:	0f be c0             	movsx  eax,al
c0019d00:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019d07:	83 c0 30             	add    eax,0x30
c0019d0a:	88 c2                	mov    dl,al
c0019d0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d10:	88 10                	mov    BYTE PTR [eax],dl
c0019d12:	66 90                	xchg   ax,ax
c0019d14:	90                   	nop
c0019d15:	c3                   	ret    
c0019d16:	66 90                	xchg   ax,ax

c0019d18 <FAT::open(char const*, void**, FileOpenMode)>:
c0019d18:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d1e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d26:	74 0c                	je     c0019d34 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019d28:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d30:	75 0e                	jne    c0019d40 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019d32:	66 90                	xchg   ax,ax
c0019d34:	b8 04 00 00 00       	mov    eax,0x4
c0019d39:	e9 46 01 00 00       	jmp    c0019e84 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019d3e:	66 90                	xchg   ax,ax
c0019d40:	83 ec 08             	sub    esp,0x8
c0019d43:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d4e:	50                   	push   eax
c0019d4f:	e8 fc 68 fe ff       	call   c0000650 <strcpy>
c0019d54:	83 c4 10             	add    esp,0x10
c0019d57:	83 ec 08             	sub    esp,0x8
c0019d5a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d5e:	50                   	push   eax
c0019d5f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d66:	e8 6d ff ff ff       	call   c0019cd8 <FAT::fixFilepath(char*)>
c0019d6b:	83 c4 10             	add    esp,0x10
c0019d6e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019d76:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d7d:	83 e0 01             	and    eax,0x1
c0019d80:	74 12                	je     c0019d94 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019d82:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d89:	83 c8 01             	or     eax,0x1
c0019d8c:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d93:	90                   	nop
c0019d94:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d9b:	83 e0 04             	and    eax,0x4
c0019d9e:	74 24                	je     c0019dc4 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019da0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019da7:	83 c8 30             	or     eax,0x30
c0019daa:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019db1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019db8:	83 c8 02             	or     eax,0x2
c0019dbb:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019dc2:	66 90                	xchg   ax,ax
c0019dc4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dcb:	83 e0 02             	and    eax,0x2
c0019dce:	74 14                	je     c0019de4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019dd0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dd7:	83 c8 02             	or     eax,0x2
c0019dda:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019de1:	8d 76 00             	lea    esi,[esi+0x0]
c0019de4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019deb:	83 e0 08             	and    eax,0x8
c0019dee:	74 14                	je     c0019e04 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019df0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019df7:	83 c8 04             	or     eax,0x4
c0019dfa:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e01:	8d 76 00             	lea    esi,[esi+0x0]
c0019e04:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e0b:	83 e0 10             	and    eax,0x10
c0019e0e:	74 14                	je     c0019e24 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019e10:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e17:	83 c8 08             	or     eax,0x8
c0019e1a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e21:	8d 76 00             	lea    esi,[esi+0x0]
c0019e24:	83 ec 0c             	sub    esp,0xc
c0019e27:	68 28 02 00 00       	push   0x228
c0019e2c:	e8 c2 dc fe ff       	call   c0007af3 <malloc>
c0019e31:	83 c4 10             	add    esp,0x10
c0019e34:	89 c2                	mov    edx,eax
c0019e36:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e3d:	89 10                	mov    DWORD PTR [eax],edx
c0019e3f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019e47:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e50:	83 ec 04             	sub    esp,0x4
c0019e53:	52                   	push   edx
c0019e54:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e58:	52                   	push   edx
c0019e59:	50                   	push   eax
c0019e5a:	e8 41 9e fe ff       	call   c0003ca0 <f_open>
c0019e5f:	83 c4 10             	add    esp,0x10
c0019e62:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019e69:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019e71:	74 09                	je     c0019e7c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019e73:	b8 01 00 00 00       	mov    eax,0x1
c0019e78:	eb 0a                	jmp    c0019e84 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019e7a:	66 90                	xchg   ax,ax
c0019e7c:	b8 00 00 00 00       	mov    eax,0x0
c0019e81:	8d 76 00             	lea    esi,[esi+0x0]
c0019e84:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e8a:	c3                   	ret    
c0019e8b:	90                   	nop

c0019e8c <FAT::openDir(char const*, void**)>:
c0019e8c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e92:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e9a:	74 0c                	je     c0019ea8 <FAT::openDir(char const*, void**)+0x1c>
c0019e9c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019ea4:	75 0e                	jne    c0019eb4 <FAT::openDir(char const*, void**)+0x28>
c0019ea6:	66 90                	xchg   ax,ax
c0019ea8:	b8 04 00 00 00       	mov    eax,0x4
c0019ead:	e9 82 00 00 00       	jmp    c0019f34 <FAT::openDir(char const*, void**)+0xa8>
c0019eb2:	66 90                	xchg   ax,ax
c0019eb4:	83 ec 08             	sub    esp,0x8
c0019eb7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ebe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ec2:	50                   	push   eax
c0019ec3:	e8 88 67 fe ff       	call   c0000650 <strcpy>
c0019ec8:	83 c4 10             	add    esp,0x10
c0019ecb:	83 ec 08             	sub    esp,0x8
c0019ece:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ed2:	50                   	push   eax
c0019ed3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019eda:	e8 f9 fd ff ff       	call   c0019cd8 <FAT::fixFilepath(char*)>
c0019edf:	83 c4 10             	add    esp,0x10
c0019ee2:	83 ec 0c             	sub    esp,0xc
c0019ee5:	6a 30                	push   0x30
c0019ee7:	e8 07 dc fe ff       	call   c0007af3 <malloc>
c0019eec:	83 c4 10             	add    esp,0x10
c0019eef:	89 c2                	mov    edx,eax
c0019ef1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ef8:	89 10                	mov    DWORD PTR [eax],edx
c0019efa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f01:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f03:	83 ec 08             	sub    esp,0x8
c0019f06:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019f0a:	52                   	push   edx
c0019f0b:	50                   	push   eax
c0019f0c:	e8 1e a7 fe ff       	call   c000462f <f_opendir>
c0019f11:	83 c4 10             	add    esp,0x10
c0019f14:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f1b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019f23:	74 07                	je     c0019f2c <FAT::openDir(char const*, void**)+0xa0>
c0019f25:	b8 01 00 00 00       	mov    eax,0x1
c0019f2a:	eb 08                	jmp    c0019f34 <FAT::openDir(char const*, void**)+0xa8>
c0019f2c:	b8 00 00 00 00       	mov    eax,0x0
c0019f31:	8d 76 00             	lea    esi,[esi+0x0]
c0019f34:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f3a:	c3                   	ret    
c0019f3b:	90                   	nop

c0019f3c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019f3c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f42:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019f4a:	75 0c                	jne    c0019f58 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019f4c:	b8 04 00 00 00       	mov    eax,0x4
c0019f51:	e9 d6 00 00 00       	jmp    c001a02c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f56:	66 90                	xchg   ax,ax
c0019f58:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019f60:	75 0a                	jne    c0019f6c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019f62:	b8 04 00 00 00       	mov    eax,0x4
c0019f67:	e9 c0 00 00 00       	jmp    c001a02c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f6c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019f74:	75 0a                	jne    c0019f80 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019f76:	b8 04 00 00 00       	mov    eax,0x4
c0019f7b:	e9 ac 00 00 00       	jmp    c001a02c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f80:	83 ec 08             	sub    esp,0x8
c0019f83:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f8a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f91:	50                   	push   eax
c0019f92:	e8 b9 66 fe ff       	call   c0000650 <strcpy>
c0019f97:	83 c4 10             	add    esp,0x10
c0019f9a:	83 ec 08             	sub    esp,0x8
c0019f9d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019fa4:	50                   	push   eax
c0019fa5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019fac:	e8 27 fd ff ff       	call   c0019cd8 <FAT::fixFilepath(char*)>
c0019fb1:	83 c4 10             	add    esp,0x10
c0019fb4:	83 ec 08             	sub    esp,0x8
c0019fb7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019fbb:	50                   	push   eax
c0019fbc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019fc3:	50                   	push   eax
c0019fc4:	e8 e5 a7 fe ff       	call   c00047ae <f_stat>
c0019fc9:	83 c4 10             	add    esp,0x10
c0019fcc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019fd3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019fda:	85 c0                	test   eax,eax
c0019fdc:	74 0a                	je     c0019fe8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019fde:	83 f8 04             	cmp    eax,0x4
c0019fe1:	74 39                	je     c001a01c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019fe3:	eb 3f                	jmp    c001a024 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fe8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019fec:	0f b6 c0             	movzx  eax,al
c0019fef:	83 e0 10             	and    eax,0x10
c0019ff2:	0f 95 c2             	setne  dl
c0019ff5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019ffc:	88 10                	mov    BYTE PTR [eax],dl
c0019ffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a002:	ba 00 00 00 00       	mov    edx,0x0
c001a007:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a00e:	89 01                	mov    DWORD PTR [ecx],eax
c001a010:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a013:	b8 00 00 00 00       	mov    eax,0x0
c001a018:	eb 12                	jmp    c001a02c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a01a:	66 90                	xchg   ax,ax
c001a01c:	b8 02 00 00 00       	mov    eax,0x2
c001a021:	eb 09                	jmp    c001a02c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a023:	90                   	nop
c001a024:	b8 01 00 00 00       	mov    eax,0x1
c001a029:	8d 76 00             	lea    esi,[esi+0x0]
c001a02c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a032:	c3                   	ret    
c001a033:	90                   	nop

c001a034 <FAT::unlink(char const*)>:
c001a034:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a03a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a042:	75 08                	jne    c001a04c <FAT::unlink(char const*)+0x18>
c001a044:	b8 04 00 00 00       	mov    eax,0x4
c001a049:	eb 61                	jmp    c001a0ac <FAT::unlink(char const*)+0x78>
c001a04b:	90                   	nop
c001a04c:	83 ec 08             	sub    esp,0x8
c001a04f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a056:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a05a:	50                   	push   eax
c001a05b:	e8 f0 65 fe ff       	call   c0000650 <strcpy>
c001a060:	83 c4 10             	add    esp,0x10
c001a063:	83 ec 08             	sub    esp,0x8
c001a066:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a06a:	50                   	push   eax
c001a06b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a072:	e8 61 fc ff ff       	call   c0019cd8 <FAT::fixFilepath(char*)>
c001a077:	83 c4 10             	add    esp,0x10
c001a07a:	83 ec 0c             	sub    esp,0xc
c001a07d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a081:	50                   	push   eax
c001a082:	e8 99 a9 fe ff       	call   c0004a20 <f_unlink>
c001a087:	83 c4 10             	add    esp,0x10
c001a08a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a091:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a098:	85 c0                	test   eax,eax
c001a09a:	75 08                	jne    c001a0a4 <FAT::unlink(char const*)+0x70>
c001a09c:	b8 00 00 00 00       	mov    eax,0x0
c001a0a1:	eb 09                	jmp    c001a0ac <FAT::unlink(char const*)+0x78>
c001a0a3:	90                   	nop
c001a0a4:	b8 01 00 00 00       	mov    eax,0x1
c001a0a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0ac:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a0b2:	c3                   	ret    
c001a0b3:	90                   	nop

c001a0b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a0b4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a0ba:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001a0c1:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001a0c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0cc:	88 d0                	mov    al,dl
c001a0ce:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a0d2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a0da:	75 0c                	jne    c001a0e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001a0dc:	b8 04 00 00 00       	mov    eax,0x4
c001a0e1:	e9 7e 01 00 00       	jmp    c001a264 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a0e6:	66 90                	xchg   ax,ax
c001a0e8:	83 ec 08             	sub    esp,0x8
c001a0eb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0f2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a0f6:	50                   	push   eax
c001a0f7:	e8 54 65 fe ff       	call   c0000650 <strcpy>
c001a0fc:	83 c4 10             	add    esp,0x10
c001a0ff:	83 ec 08             	sub    esp,0x8
c001a102:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a106:	50                   	push   eax
c001a107:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a10e:	e8 c5 fb ff ff       	call   c0019cd8 <FAT::fixFilepath(char*)>
c001a113:	83 c4 10             	add    esp,0x10
c001a116:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a11e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a126:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a12b:	83 e0 01             	and    eax,0x1
c001a12e:	74 14                	je     c001a144 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a130:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a137:	83 c8 01             	or     eax,0x1
c001a13a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a141:	8d 76 00             	lea    esi,[esi+0x0]
c001a144:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a149:	83 e0 02             	and    eax,0x2
c001a14c:	74 12                	je     c001a160 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a14e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a155:	83 c8 20             	or     eax,0x20
c001a158:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a15f:	90                   	nop
c001a160:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a165:	83 e0 04             	and    eax,0x4
c001a168:	74 12                	je     c001a17c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a16a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a171:	83 c8 04             	or     eax,0x4
c001a174:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a17b:	90                   	nop
c001a17c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a181:	83 e0 08             	and    eax,0x8
c001a184:	74 12                	je     c001a198 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a186:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a18d:	83 c8 02             	or     eax,0x2
c001a190:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a197:	90                   	nop
c001a198:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a19d:	83 e0 01             	and    eax,0x1
c001a1a0:	74 12                	je     c001a1b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a1a2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1a9:	83 c8 01             	or     eax,0x1
c001a1ac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1b3:	90                   	nop
c001a1b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1b9:	83 e0 02             	and    eax,0x2
c001a1bc:	74 12                	je     c001a1d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a1be:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1c5:	83 c8 20             	or     eax,0x20
c001a1c8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1cf:	90                   	nop
c001a1d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1d5:	83 e0 04             	and    eax,0x4
c001a1d8:	74 12                	je     c001a1ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a1da:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1e1:	83 c8 04             	or     eax,0x4
c001a1e4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1eb:	90                   	nop
c001a1ec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1f1:	83 e0 08             	and    eax,0x8
c001a1f4:	74 12                	je     c001a208 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a1f6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1fd:	83 c8 02             	or     eax,0x2
c001a200:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a207:	90                   	nop
c001a208:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a20f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a216:	09 d0                	or     eax,edx
c001a218:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a21f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a227:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a22f:	83 ec 04             	sub    esp,0x4
c001a232:	52                   	push   edx
c001a233:	50                   	push   eax
c001a234:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a238:	50                   	push   eax
c001a239:	e8 55 ac fe ff       	call   c0004e93 <f_chmod>
c001a23e:	83 c4 10             	add    esp,0x10
c001a241:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a248:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a24f:	85 c0                	test   eax,eax
c001a251:	75 09                	jne    c001a25c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a253:	b8 00 00 00 00       	mov    eax,0x0
c001a258:	eb 0a                	jmp    c001a264 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a25a:	66 90                	xchg   ax,ax
c001a25c:	b8 01 00 00 00       	mov    eax,0x1
c001a261:	8d 76 00             	lea    esi,[esi+0x0]
c001a264:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a26a:	c3                   	ret    
c001a26b:	90                   	nop

c001a26c <FAT::rename(char const*, char const*)>:
c001a26c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a272:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a27a:	74 0c                	je     c001a288 <FAT::rename(char const*, char const*)+0x1c>
c001a27c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a284:	75 0e                	jne    c001a294 <FAT::rename(char const*, char const*)+0x28>
c001a286:	66 90                	xchg   ax,ax
c001a288:	b8 04 00 00 00       	mov    eax,0x4
c001a28d:	e9 9e 00 00 00       	jmp    c001a330 <FAT::rename(char const*, char const*)+0xc4>
c001a292:	66 90                	xchg   ax,ax
c001a294:	83 ec 08             	sub    esp,0x8
c001a297:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a29e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a2a5:	50                   	push   eax
c001a2a6:	e8 a5 63 fe ff       	call   c0000650 <strcpy>
c001a2ab:	83 c4 10             	add    esp,0x10
c001a2ae:	83 ec 08             	sub    esp,0x8
c001a2b1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a2b8:	50                   	push   eax
c001a2b9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2c0:	e8 13 fa ff ff       	call   c0019cd8 <FAT::fixFilepath(char*)>
c001a2c5:	83 c4 10             	add    esp,0x10
c001a2c8:	83 ec 08             	sub    esp,0x8
c001a2cb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a2d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2d6:	50                   	push   eax
c001a2d7:	e8 74 63 fe ff       	call   c0000650 <strcpy>
c001a2dc:	83 c4 10             	add    esp,0x10
c001a2df:	83 ec 08             	sub    esp,0x8
c001a2e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2e6:	50                   	push   eax
c001a2e7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2ee:	e8 e5 f9 ff ff       	call   c0019cd8 <FAT::fixFilepath(char*)>
c001a2f3:	83 c4 10             	add    esp,0x10
c001a2f6:	83 ec 08             	sub    esp,0x8
c001a2f9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2fd:	50                   	push   eax
c001a2fe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a305:	50                   	push   eax
c001a306:	e8 d0 a9 fe ff       	call   c0004cdb <f_rename>
c001a30b:	83 c4 10             	add    esp,0x10
c001a30e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a315:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a31c:	85 c0                	test   eax,eax
c001a31e:	75 08                	jne    c001a328 <FAT::rename(char const*, char const*)+0xbc>
c001a320:	b8 00 00 00 00       	mov    eax,0x0
c001a325:	eb 09                	jmp    c001a330 <FAT::rename(char const*, char const*)+0xc4>
c001a327:	90                   	nop
c001a328:	b8 01 00 00 00       	mov    eax,0x1
c001a32d:	8d 76 00             	lea    esi,[esi+0x0]
c001a330:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a336:	c3                   	ret    
c001a337:	90                   	nop

c001a338 <FAT::mkdir(char const*)>:
c001a338:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a33e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a346:	75 08                	jne    c001a350 <FAT::mkdir(char const*)+0x18>
c001a348:	b8 04 00 00 00       	mov    eax,0x4
c001a34d:	eb 61                	jmp    c001a3b0 <FAT::mkdir(char const*)+0x78>
c001a34f:	90                   	nop
c001a350:	83 ec 08             	sub    esp,0x8
c001a353:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a35a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a35e:	50                   	push   eax
c001a35f:	e8 ec 62 fe ff       	call   c0000650 <strcpy>
c001a364:	83 c4 10             	add    esp,0x10
c001a367:	83 ec 08             	sub    esp,0x8
c001a36a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a36e:	50                   	push   eax
c001a36f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a376:	e8 5d f9 ff ff       	call   c0019cd8 <FAT::fixFilepath(char*)>
c001a37b:	83 c4 10             	add    esp,0x10
c001a37e:	83 ec 0c             	sub    esp,0xc
c001a381:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a385:	50                   	push   eax
c001a386:	e8 b5 a7 fe ff       	call   c0004b40 <f_mkdir>
c001a38b:	83 c4 10             	add    esp,0x10
c001a38e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a395:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a39c:	85 c0                	test   eax,eax
c001a39e:	75 08                	jne    c001a3a8 <FAT::mkdir(char const*)+0x70>
c001a3a0:	b8 00 00 00 00       	mov    eax,0x0
c001a3a5:	eb 09                	jmp    c001a3b0 <FAT::mkdir(char const*)+0x78>
c001a3a7:	90                   	nop
c001a3a8:	b8 01 00 00 00       	mov    eax,0x1
c001a3ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a3b0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a3b6:	c3                   	ret    
c001a3b7:	90                   	nop

c001a3b8 <FAT::exists(char const*)>:
c001a3b8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a3be:	83 ec 08             	sub    esp,0x8
c001a3c1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a3c8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3cc:	50                   	push   eax
c001a3cd:	e8 7e 62 fe ff       	call   c0000650 <strcpy>
c001a3d2:	83 c4 10             	add    esp,0x10
c001a3d5:	83 ec 08             	sub    esp,0x8
c001a3d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a3dc:	50                   	push   eax
c001a3dd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a3e4:	e8 ef f8 ff ff       	call   c0019cd8 <FAT::fixFilepath(char*)>
c001a3e9:	83 c4 10             	add    esp,0x10
c001a3ec:	83 ec 08             	sub    esp,0x8
c001a3ef:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a3f6:	50                   	push   eax
c001a3f7:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3fb:	50                   	push   eax
c001a3fc:	e8 ad a3 fe ff       	call   c00047ae <f_stat>
c001a401:	83 c4 10             	add    esp,0x10
c001a404:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a40b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a412:	85 c0                	test   eax,eax
c001a414:	75 06                	jne    c001a41c <FAT::exists(char const*)+0x64>
c001a416:	b0 01                	mov    al,0x1
c001a418:	eb 06                	jmp    c001a420 <FAT::exists(char const*)+0x68>
c001a41a:	66 90                	xchg   ax,ax
c001a41c:	b0 00                	mov    al,0x0
c001a41e:	66 90                	xchg   ax,ax
c001a420:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a426:	c3                   	ret    
c001a427:	90                   	nop

c001a428 <isoReadDiscSectorHelper>:
c001a428:	83 ec 2c             	sub    esp,0x2c
c001a42b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a42f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a433:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a438:	83 e8 41             	sub    eax,0x41
c001a43b:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a442:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a446:	ba 00 00 00 00       	mov    edx,0x0
c001a44b:	83 ec 0c             	sub    esp,0xc
c001a44e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a452:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a456:	52                   	push   edx
c001a457:	50                   	push   eax
c001a458:	51                   	push   ecx
c001a459:	e8 4c 39 ff ff       	call   c000ddaa <LogicalDisk::read(unsigned long long, int, void*)>
c001a45e:	83 c4 20             	add    esp,0x20
c001a461:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a465:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a46a:	74 0c                	je     c001a478 <isoReadDiscSectorHelper+0x50>
c001a46c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a470:	c1 e0 0b             	shl    eax,0xb
c001a473:	eb 0b                	jmp    c001a480 <isoReadDiscSectorHelper+0x58>
c001a475:	8d 76 00             	lea    esi,[esi+0x0]
c001a478:	b8 00 00 00 00       	mov    eax,0x0
c001a47d:	8d 76 00             	lea    esi,[esi+0x0]
c001a480:	83 c4 2c             	add    esp,0x2c
c001a483:	c3                   	ret    

c001a484 <iso_kprintf>:
c001a484:	83 ec 0c             	sub    esp,0xc
c001a487:	83 ec 08             	sub    esp,0x8
c001a48a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a48e:	68 ee 2c 02 c0       	push   0xc0022cee
c001a493:	e8 92 04 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001a498:	83 c4 10             	add    esp,0x10
c001a49b:	90                   	nop
c001a49c:	83 c4 0c             	add    esp,0xc
c001a49f:	c3                   	ret    

c001a4a0 <iso_kprintfd>:
c001a4a0:	83 ec 0c             	sub    esp,0xc
c001a4a3:	83 ec 08             	sub    esp,0x8
c001a4a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4aa:	68 c6 13 02 c0       	push   0xc00213c6
c001a4af:	e8 76 04 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001a4b4:	83 c4 10             	add    esp,0x10
c001a4b7:	90                   	nop
c001a4b8:	83 c4 0c             	add    esp,0xc
c001a4bb:	c3                   	ret    

c001a4bc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a4bc:	b8 08 00 00 00       	mov    eax,0x8
c001a4c1:	c3                   	ret    

c001a4c2 <ISO9660::truncate(void*, unsigned long long)>:
c001a4c2:	b8 01 00 00 00       	mov    eax,0x1
c001a4c7:	c3                   	ret    

c001a4c8 <ISO9660::getName()>:
c001a4c8:	b8 a4 2f 02 c0       	mov    eax,0xc0022fa4
c001a4cd:	c3                   	ret    

c001a4ce <ISO9660::closeDir(void*)>:
c001a4ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4d2:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4d4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a4d7:	90                   	nop

c001a4d8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a4d8:	b8 01 00 00 00       	mov    eax,0x1
c001a4dd:	c3                   	ret    

c001a4de <ISO9660::unlink(char const*)>:
c001a4de:	b8 01 00 00 00       	mov    eax,0x1
c001a4e3:	c3                   	ret    

c001a4e4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a4e4:	b8 03 00 00 00       	mov    eax,0x3
c001a4e9:	c3                   	ret    

c001a4ea <ISO9660::rename(char const*, char const*)>:
c001a4ea:	b8 01 00 00 00       	mov    eax,0x1
c001a4ef:	c3                   	ret    

c001a4f0 <ISO9660::mkdir(char const*)>:
c001a4f0:	b8 01 00 00 00       	mov    eax,0x1
c001a4f5:	c3                   	ret    

c001a4f6 <ISO9660::~ISO9660()>:
c001a4f6:	83 ec 0c             	sub    esp,0xc
c001a4f9:	ba e4 30 02 c0       	mov    edx,0xc00230e4
c001a4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a502:	89 10                	mov    DWORD PTR [eax],edx
c001a504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a508:	83 ec 0c             	sub    esp,0xc
c001a50b:	50                   	push   eax
c001a50c:	e8 9f 12 ff ff       	call   c000b7b0 <Filesystem::~Filesystem()>
c001a511:	83 c4 10             	add    esp,0x10
c001a514:	90                   	nop
c001a515:	83 c4 0c             	add    esp,0xc
c001a518:	c3                   	ret    
c001a519:	90                   	nop

c001a51a <ISO9660::~ISO9660()>:
c001a51a:	83 ec 0c             	sub    esp,0xc
c001a51d:	83 ec 0c             	sub    esp,0xc
c001a520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a524:	e8 cd ff ff ff       	call   c001a4f6 <ISO9660::~ISO9660()>
c001a529:	83 c4 10             	add    esp,0x10
c001a52c:	83 ec 08             	sub    esp,0x8
c001a52f:	6a 08                	push   0x8
c001a531:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a535:	e8 f2 02 ff ff       	call   c000a82c <operator delete(void*, unsigned long)>
c001a53a:	83 c4 10             	add    esp,0x10
c001a53d:	83 c4 0c             	add    esp,0xc
c001a540:	c3                   	ret    
c001a541:	90                   	nop

c001a542 <ISO9660::exists(char const*)>:
c001a542:	83 ec 18             	sub    esp,0x18
c001a545:	68 bf 2f 02 c0       	push   0xc0022fbf
c001a54a:	e8 90 70 ff ff       	call   c00115df <KePanic(char const*)>
c001a54f:	31 c0                	xor    eax,eax
c001a551:	83 c4 1c             	add    esp,0x1c
c001a554:	c3                   	ret    
c001a555:	90                   	nop

c001a556 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a556:	56                   	push   esi
c001a557:	53                   	push   ebx
c001a558:	53                   	push   ebx
c001a559:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a55d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a561:	85 db                	test   ebx,ebx
c001a563:	0f 84 ca 00 00 00    	je     c001a633 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a569:	85 f6                	test   esi,esi
c001a56b:	0f 84 c2 00 00 00    	je     c001a633 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a571:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a576:	b8 03 00 00 00       	mov    eax,0x3
c001a57b:	0f 85 b7 00 00 00    	jne    c001a638 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a581:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a583:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a589:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a590:	74 1b                	je     c001a5ad <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a592:	85 c0                	test   eax,eax
c001a594:	74 10                	je     c001a5a6 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a596:	83 ec 0c             	sub    esp,0xc
c001a599:	68 dd 2f 02 c0       	push   0xc0022fdd
c001a59e:	e8 3c 70 ff ff       	call   c00115df <KePanic(char const*)>
c001a5a3:	83 c4 10             	add    esp,0x10
c001a5a6:	8a 03                	mov    al,BYTE PTR [ebx]
c001a5a8:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a5ad:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a5b0:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a5b7:	85 c0                	test   eax,eax
c001a5b9:	74 09                	je     c001a5c4 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a5bb:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a5c2:	74 48                	je     c001a60c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a5c4:	83 ec 0c             	sub    esp,0xc
c001a5c7:	68 ed 2f 02 c0       	push   0xc0022fed
c001a5cc:	e8 59 03 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001a5d1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a5d4:	83 c4 10             	add    esp,0x10
c001a5d7:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a5de:	85 c0                	test   eax,eax
c001a5e0:	74 17                	je     c001a5f9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a5e2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a5e9:	83 ec 0c             	sub    esp,0xc
c001a5ec:	68 0d 30 02 c0       	push   0xc002300d
c001a5f1:	e8 34 03 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001a5f6:	83 c4 10             	add    esp,0x10
c001a5f9:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a600:	83 ec 0c             	sub    esp,0xc
c001a603:	50                   	push   eax
c001a604:	e8 5e c4 fe ff       	call   c0006a67 <init_percd>
c001a609:	83 c4 10             	add    esp,0x10
c001a60c:	51                   	push   ecx
c001a60d:	83 c3 03             	add    ebx,0x3
c001a610:	51                   	push   ecx
c001a611:	6a 00                	push   0x0
c001a613:	53                   	push   ebx
c001a614:	e8 11 bf fe ff       	call   c000652a <iso_open>
c001a619:	83 c4 10             	add    esp,0x10
c001a61c:	89 c2                	mov    edx,eax
c001a61e:	b8 01 00 00 00       	mov    eax,0x1
c001a623:	83 fa ff             	cmp    edx,0xffffffff
c001a626:	74 10                	je     c001a638 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a628:	83 c2 32             	add    edx,0x32
c001a62b:	31 c0                	xor    eax,eax
c001a62d:	01 d2                	add    edx,edx
c001a62f:	89 16                	mov    DWORD PTR [esi],edx
c001a631:	eb 05                	jmp    c001a638 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a633:	b8 04 00 00 00       	mov    eax,0x4
c001a638:	5a                   	pop    edx
c001a639:	5b                   	pop    ebx
c001a63a:	5e                   	pop    esi
c001a63b:	c3                   	ret    

c001a63c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a63c:	53                   	push   ebx
c001a63d:	83 ec 08             	sub    esp,0x8
c001a640:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a644:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a648:	85 c0                	test   eax,eax
c001a64a:	74 2d                	je     c001a679 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a64c:	85 db                	test   ebx,ebx
c001a64e:	74 29                	je     c001a679 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a650:	52                   	push   edx
c001a651:	b9 02 00 00 00       	mov    ecx,0x2
c001a656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a65a:	99                   	cdq    
c001a65b:	f7 f9                	idiv   ecx
c001a65d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a661:	83 e8 32             	sub    eax,0x32
c001a664:	50                   	push   eax
c001a665:	e8 68 bf fe ff       	call   c00065d2 <iso_read>
c001a66a:	83 c4 10             	add    esp,0x10
c001a66d:	89 03                	mov    DWORD PTR [ebx],eax
c001a66f:	09 d0                	or     eax,edx
c001a671:	0f 94 c0             	sete   al
c001a674:	0f b6 c0             	movzx  eax,al
c001a677:	eb 05                	jmp    c001a67e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a679:	b8 04 00 00 00       	mov    eax,0x4
c001a67e:	83 c4 08             	add    esp,0x8
c001a681:	5b                   	pop    ebx
c001a682:	c3                   	ret    
c001a683:	90                   	nop

c001a684 <ISO9660::seek(void*, unsigned long long)>:
c001a684:	57                   	push   edi
c001a685:	b8 04 00 00 00       	mov    eax,0x4
c001a68a:	56                   	push   esi
c001a68b:	51                   	push   ecx
c001a68c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a690:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a694:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a698:	85 d2                	test   edx,edx
c001a69a:	74 26                	je     c001a6c2 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a69c:	89 d0                	mov    eax,edx
c001a69e:	b9 02 00 00 00       	mov    ecx,0x2
c001a6a3:	6a 00                	push   0x0
c001a6a5:	99                   	cdq    
c001a6a6:	f7 f9                	idiv   ecx
c001a6a8:	57                   	push   edi
c001a6a9:	56                   	push   esi
c001a6aa:	83 e8 32             	sub    eax,0x32
c001a6ad:	50                   	push   eax
c001a6ae:	e8 35 c0 fe ff       	call   c00066e8 <iso_seek>
c001a6b3:	83 c4 10             	add    esp,0x10
c001a6b6:	31 f0                	xor    eax,esi
c001a6b8:	31 fa                	xor    edx,edi
c001a6ba:	09 d0                	or     eax,edx
c001a6bc:	0f 95 c0             	setne  al
c001a6bf:	0f b6 c0             	movzx  eax,al
c001a6c2:	5a                   	pop    edx
c001a6c3:	5e                   	pop    esi
c001a6c4:	5f                   	pop    edi
c001a6c5:	c3                   	ret    

c001a6c6 <ISO9660::tell(void*, unsigned long long*)>:
c001a6c6:	53                   	push   ebx
c001a6c7:	83 ec 08             	sub    esp,0x8
c001a6ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6ce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a6d2:	85 c0                	test   eax,eax
c001a6d4:	74 24                	je     c001a6fa <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a6d6:	85 db                	test   ebx,ebx
c001a6d8:	74 20                	je     c001a6fa <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a6da:	b9 02 00 00 00       	mov    ecx,0x2
c001a6df:	99                   	cdq    
c001a6e0:	f7 f9                	idiv   ecx
c001a6e2:	83 ec 0c             	sub    esp,0xc
c001a6e5:	83 e8 32             	sub    eax,0x32
c001a6e8:	50                   	push   eax
c001a6e9:	e8 7e c0 fe ff       	call   c000676c <iso_tell>
c001a6ee:	83 c4 10             	add    esp,0x10
c001a6f1:	89 03                	mov    DWORD PTR [ebx],eax
c001a6f3:	31 c0                	xor    eax,eax
c001a6f5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a6f8:	eb 05                	jmp    c001a6ff <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a6fa:	b8 04 00 00 00       	mov    eax,0x4
c001a6ff:	83 c4 08             	add    esp,0x8
c001a702:	5b                   	pop    ebx
c001a703:	c3                   	ret    

c001a704 <ISO9660::stat(void*, unsigned long long*)>:
c001a704:	56                   	push   esi
c001a705:	53                   	push   ebx
c001a706:	83 ec 10             	sub    esp,0x10
c001a709:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a70d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a711:	68 31 30 02 c0       	push   0xc0023031
c001a716:	e8 0f 02 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001a71b:	83 c4 10             	add    esp,0x10
c001a71e:	85 db                	test   ebx,ebx
c001a720:	74 2a                	je     c001a74c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a722:	85 f6                	test   esi,esi
c001a724:	74 26                	je     c001a74c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a726:	89 d8                	mov    eax,ebx
c001a728:	b9 02 00 00 00       	mov    ecx,0x2
c001a72d:	99                   	cdq    
c001a72e:	83 ec 0c             	sub    esp,0xc
c001a731:	f7 f9                	idiv   ecx
c001a733:	83 e8 32             	sub    eax,0x32
c001a736:	50                   	push   eax
c001a737:	e8 61 c0 fe ff       	call   c000679d <iso_total>
c001a73c:	83 c4 10             	add    esp,0x10
c001a73f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a746:	89 06                	mov    DWORD PTR [esi],eax
c001a748:	31 c0                	xor    eax,eax
c001a74a:	eb 05                	jmp    c001a751 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a74c:	b8 04 00 00 00       	mov    eax,0x4
c001a751:	5a                   	pop    edx
c001a752:	5b                   	pop    ebx
c001a753:	5e                   	pop    esi
c001a754:	c3                   	ret    
c001a755:	90                   	nop

c001a756 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a756:	55                   	push   ebp
c001a757:	57                   	push   edi
c001a758:	56                   	push   esi
c001a759:	53                   	push   ebx
c001a75a:	83 ec 18             	sub    esp,0x18
c001a75d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a761:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a765:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a769:	68 39 30 02 c0       	push   0xc0023039
c001a76e:	e8 b7 01 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001a773:	83 c4 10             	add    esp,0x10
c001a776:	85 ff                	test   edi,edi
c001a778:	0f 94 c0             	sete   al
c001a77b:	85 f6                	test   esi,esi
c001a77d:	0f 94 c2             	sete   dl
c001a780:	09 d0                	or     eax,edx
c001a782:	a8 01                	test   al,0x1
c001a784:	0f 85 dd 00 00 00    	jne    c001a867 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a78a:	85 db                	test   ebx,ebx
c001a78c:	0f 84 d5 00 00 00    	je     c001a867 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a792:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a795:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a79b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a7a2:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a7a9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a7ab:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a7b1:	74 1b                	je     c001a7ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a7b3:	85 c0                	test   eax,eax
c001a7b5:	74 10                	je     c001a7c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a7b7:	83 ec 0c             	sub    esp,0xc
c001a7ba:	68 dd 2f 02 c0       	push   0xc0022fdd
c001a7bf:	e8 1b 6e ff ff       	call   c00115df <KePanic(char const*)>
c001a7c4:	83 c4 10             	add    esp,0x10
c001a7c7:	8a 03                	mov    al,BYTE PTR [ebx]
c001a7c9:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a7ce:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7d1:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a7d8:	85 c0                	test   eax,eax
c001a7da:	74 09                	je     c001a7e5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a7dc:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a7e3:	74 51                	je     c001a836 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a7e5:	83 ec 0c             	sub    esp,0xc
c001a7e8:	68 41 30 02 c0       	push   0xc0023041
c001a7ed:	e8 38 01 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001a7f2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7f5:	83 c4 10             	add    esp,0x10
c001a7f8:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a800:	74 21                	je     c001a823 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a802:	83 ec 0c             	sub    esp,0xc
c001a805:	68 61 30 02 c0       	push   0xc0023061
c001a80a:	e8 1b 01 ff ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001a80f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a812:	83 c4 10             	add    esp,0x10
c001a815:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a81c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a823:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a82a:	83 ec 0c             	sub    esp,0xc
c001a82d:	50                   	push   eax
c001a82e:	e8 34 c2 fe ff       	call   c0006a67 <init_percd>
c001a833:	83 c4 10             	add    esp,0x10
c001a836:	52                   	push   edx
c001a837:	83 c3 03             	add    ebx,0x3
c001a83a:	52                   	push   edx
c001a83b:	6a 00                	push   0x0
c001a83d:	53                   	push   ebx
c001a83e:	e8 e7 bc fe ff       	call   c000652a <iso_open>
c001a843:	83 c4 10             	add    esp,0x10
c001a846:	83 f8 ff             	cmp    eax,0xffffffff
c001a849:	89 c5                	mov    ebp,eax
c001a84b:	75 21                	jne    c001a86e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a84d:	50                   	push   eax
c001a84e:	50                   	push   eax
c001a84f:	6a 01                	push   0x1
c001a851:	53                   	push   ebx
c001a852:	e8 d3 bc fe ff       	call   c000652a <iso_open>
c001a857:	83 c4 10             	add    esp,0x10
c001a85a:	ba 02 00 00 00       	mov    edx,0x2
c001a85f:	40                   	inc    eax
c001a860:	74 2b                	je     c001a88d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a862:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a865:	eb 24                	jmp    c001a88b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a867:	ba 04 00 00 00       	mov    edx,0x4
c001a86c:	eb 1f                	jmp    c001a88d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a86e:	83 ec 0c             	sub    esp,0xc
c001a871:	50                   	push   eax
c001a872:	e8 26 bf fe ff       	call   c000679d <iso_total>
c001a877:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a87e:	89 07                	mov    DWORD PTR [edi],eax
c001a880:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a883:	e8 2c bd fe ff       	call   c00065b4 <iso_close>
c001a888:	83 c4 10             	add    esp,0x10
c001a88b:	31 d2                	xor    edx,edx
c001a88d:	83 c4 0c             	add    esp,0xc
c001a890:	89 d0                	mov    eax,edx
c001a892:	5b                   	pop    ebx
c001a893:	5e                   	pop    esi
c001a894:	5f                   	pop    edi
c001a895:	5d                   	pop    ebp
c001a896:	c3                   	ret    
c001a897:	90                   	nop

c001a898 <ISO9660::close(void*)>:
c001a898:	83 ec 0c             	sub    esp,0xc
c001a89b:	b8 04 00 00 00       	mov    eax,0x4
c001a8a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8a4:	85 d2                	test   edx,edx
c001a8a6:	74 1b                	je     c001a8c3 <ISO9660::close(void*)+0x2b>
c001a8a8:	89 d0                	mov    eax,edx
c001a8aa:	b9 02 00 00 00       	mov    ecx,0x2
c001a8af:	99                   	cdq    
c001a8b0:	83 ec 0c             	sub    esp,0xc
c001a8b3:	f7 f9                	idiv   ecx
c001a8b5:	83 e8 32             	sub    eax,0x32
c001a8b8:	50                   	push   eax
c001a8b9:	e8 f6 bc fe ff       	call   c00065b4 <iso_close>
c001a8be:	83 c4 10             	add    esp,0x10
c001a8c1:	31 c0                	xor    eax,eax
c001a8c3:	83 c4 0c             	add    esp,0xc
c001a8c6:	c3                   	ret    
c001a8c7:	90                   	nop

c001a8c8 <ISO9660::openDir(char const*, void**)>:
c001a8c8:	56                   	push   esi
c001a8c9:	53                   	push   ebx
c001a8ca:	50                   	push   eax
c001a8cb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a8cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a8d3:	85 db                	test   ebx,ebx
c001a8d5:	0f 84 bd 00 00 00    	je     c001a998 <ISO9660::openDir(char const*, void**)+0xd0>
c001a8db:	85 f6                	test   esi,esi
c001a8dd:	0f 84 b5 00 00 00    	je     c001a998 <ISO9660::openDir(char const*, void**)+0xd0>
c001a8e3:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a8e5:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a8eb:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a8f2:	74 1b                	je     c001a90f <ISO9660::openDir(char const*, void**)+0x47>
c001a8f4:	85 c0                	test   eax,eax
c001a8f6:	74 10                	je     c001a908 <ISO9660::openDir(char const*, void**)+0x40>
c001a8f8:	83 ec 0c             	sub    esp,0xc
c001a8fb:	68 dd 2f 02 c0       	push   0xc0022fdd
c001a900:	e8 da 6c ff ff       	call   c00115df <KePanic(char const*)>
c001a905:	83 c4 10             	add    esp,0x10
c001a908:	8a 03                	mov    al,BYTE PTR [ebx]
c001a90a:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a90f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a912:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a919:	85 c0                	test   eax,eax
c001a91b:	74 10                	je     c001a92d <ISO9660::openDir(char const*, void**)+0x65>
c001a91d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a924:	74 1a                	je     c001a940 <ISO9660::openDir(char const*, void**)+0x78>
c001a926:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a92d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a934:	83 ec 0c             	sub    esp,0xc
c001a937:	50                   	push   eax
c001a938:	e8 2a c1 fe ff       	call   c0006a67 <init_percd>
c001a93d:	83 c4 10             	add    esp,0x10
c001a940:	50                   	push   eax
c001a941:	83 c3 03             	add    ebx,0x3
c001a944:	50                   	push   eax
c001a945:	6a 01                	push   0x1
c001a947:	53                   	push   ebx
c001a948:	e8 dd bb fe ff       	call   c000652a <iso_open>
c001a94d:	83 c4 10             	add    esp,0x10
c001a950:	83 f8 ff             	cmp    eax,0xffffffff
c001a953:	89 c3                	mov    ebx,eax
c001a955:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a95a:	75 1c                	jne    c001a978 <ISO9660::openDir(char const*, void**)+0xb0>
c001a95c:	53                   	push   ebx
c001a95d:	53                   	push   ebx
c001a95e:	68 85 30 02 c0       	push   0xc0023085
c001a963:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a969:	e8 5e e1 fe ff       	call   c0008acc <VgaText::puts(char const*)>
c001a96e:	83 c4 10             	add    esp,0x10
c001a971:	b8 01 00 00 00       	mov    eax,0x1
c001a976:	eb 25                	jmp    c001a99d <ISO9660::openDir(char const*, void**)+0xd5>
c001a978:	51                   	push   ecx
c001a979:	01 db                	add    ebx,ebx
c001a97b:	51                   	push   ecx
c001a97c:	83 c3 65             	add    ebx,0x65
c001a97f:	68 98 30 02 c0       	push   0xc0023098
c001a984:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a98a:	e8 3d e1 fe ff       	call   c0008acc <VgaText::puts(char const*)>
c001a98f:	83 c4 10             	add    esp,0x10
c001a992:	31 c0                	xor    eax,eax
c001a994:	89 1e                	mov    DWORD PTR [esi],ebx
c001a996:	eb 05                	jmp    c001a99d <ISO9660::openDir(char const*, void**)+0xd5>
c001a998:	b8 04 00 00 00       	mov    eax,0x4
c001a99d:	5a                   	pop    edx
c001a99e:	5b                   	pop    ebx
c001a99f:	5e                   	pop    esi
c001a9a0:	c3                   	ret    
c001a9a1:	90                   	nop

c001a9a2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a9a2:	55                   	push   ebp
c001a9a3:	57                   	push   edi
c001a9a4:	56                   	push   esi
c001a9a5:	53                   	push   ebx
c001a9a6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9ac:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a9b3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a9ba:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a9c1:	85 db                	test   ebx,ebx
c001a9c3:	0f 84 e4 00 00 00    	je     c001aaad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a9c9:	85 ed                	test   ebp,ebp
c001a9cb:	0f 84 dc 00 00 00    	je     c001aaad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a9d1:	83 ec 0c             	sub    esp,0xc
c001a9d4:	68 ab 30 02 c0       	push   0xc00230ab
c001a9d9:	e8 4c ff fe ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001a9de:	89 d8                	mov    eax,ebx
c001a9e0:	b9 02 00 00 00       	mov    ecx,0x2
c001a9e5:	99                   	cdq    
c001a9e6:	f7 f9                	idiv   ecx
c001a9e8:	83 e8 32             	sub    eax,0x32
c001a9eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001a9ee:	e8 fc bd fe ff       	call   c00067ef <iso_readdir>
c001a9f3:	83 c4 10             	add    esp,0x10
c001a9f6:	85 c0                	test   eax,eax
c001a9f8:	89 c3                	mov    ebx,eax
c001a9fa:	75 38                	jne    c001aa34 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a9fc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa01:	53                   	push   ebx
c001aa02:	53                   	push   ebx
c001aa03:	68 b6 30 02 c0       	push   0xc00230b6
c001aa08:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa0e:	e8 b9 e0 fe ff       	call   c0008acc <VgaText::puts(char const*)>
c001aa13:	83 c4 0c             	add    esp,0xc
c001aa16:	68 10 01 00 00       	push   0x110
c001aa1b:	6a 00                	push   0x0
c001aa1d:	57                   	push   edi
c001aa1e:	e8 cd 5a fe ff       	call   c00004f0 <memset>
c001aa23:	83 c4 10             	add    esp,0x10
c001aa26:	b8 01 00 00 00       	mov    eax,0x1
c001aa2b:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001aa32:	eb 7e                	jmp    c001aab2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001aa34:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001aa3a:	8d 70 08             	lea    esi,[eax+0x8]
c001aa3d:	83 ec 0c             	sub    esp,0xc
c001aa40:	56                   	push   esi
c001aa41:	e8 3a 5b fe ff       	call   c0000580 <strlen>
c001aa46:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aa4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa52:	83 c4 10             	add    esp,0x10
c001aa55:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001aa59:	75 0a                	jne    c001aa65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001aa5b:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001aa5e:	b8 02 00 00 00       	mov    eax,0x2
c001aa63:	74 05                	je     c001aa6a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001aa65:	b8 01 00 00 00       	mov    eax,0x1
c001aa6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa6e:	50                   	push   eax
c001aa6f:	50                   	push   eax
c001aa70:	56                   	push   esi
c001aa71:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa75:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aa79:	50                   	push   eax
c001aa7a:	e8 d1 5b fe ff       	call   c0000650 <strcpy>
c001aa7f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aa86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa88:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001aa8f:	5a                   	pop    edx
c001aa90:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa95:	59                   	pop    ecx
c001aa96:	68 c9 30 02 c0       	push   0xc00230c9
c001aa9b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aaa1:	e8 26 e0 fe ff       	call   c0008acc <VgaText::puts(char const*)>
c001aaa6:	83 c4 10             	add    esp,0x10
c001aaa9:	31 c0                	xor    eax,eax
c001aaab:	eb 05                	jmp    c001aab2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001aaad:	b8 04 00 00 00       	mov    eax,0x4
c001aab2:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aab8:	5b                   	pop    ebx
c001aab9:	5e                   	pop    esi
c001aaba:	5f                   	pop    edi
c001aabb:	5d                   	pop    ebp
c001aabc:	c3                   	ret    

c001aabd <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aabd:	57                   	push   edi
c001aabe:	56                   	push   esi
c001aabf:	53                   	push   ebx
c001aac0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aac4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aac8:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001aace:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aad2:	0f be cb             	movsx  ecx,bl
c001aad5:	75 0b                	jne    c001aae2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001aad7:	0f be 05 00 43 02 c0 	movsx  eax,BYTE PTR ds:0xc0024300
c001aade:	39 c8                	cmp    eax,ecx
c001aae0:	74 47                	je     c001ab29 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aae2:	83 ec 0c             	sub    esp,0xc
c001aae5:	31 d2                	xor    edx,edx
c001aae7:	68 a0 c8 02 c0       	push   0xc002c8a0
c001aaec:	6a 01                	push   0x1
c001aaee:	52                   	push   edx
c001aaef:	56                   	push   esi
c001aaf0:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001aaf7:	e8 ae 32 ff ff       	call   c000ddaa <LogicalDisk::read(unsigned long long, int, void*)>
c001aafc:	83 c4 20             	add    esp,0x20
c001aaff:	85 c0                	test   eax,eax
c001ab01:	75 0e                	jne    c001ab11 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001ab03:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001ab09:	88 1d 00 43 02 c0    	mov    BYTE PTR ds:0xc0024300,bl
c001ab0f:	eb 18                	jmp    c001ab29 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab11:	50                   	push   eax
c001ab12:	68 00 08 00 00       	push   0x800
c001ab17:	6a 00                	push   0x0
c001ab19:	57                   	push   edi
c001ab1a:	e8 d1 59 fe ff       	call   c00004f0 <memset>
c001ab1f:	83 c4 10             	add    esp,0x10
c001ab22:	b8 01 00 00 00       	mov    eax,0x1
c001ab27:	eb 0e                	jmp    c001ab37 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001ab29:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001ab2e:	b9 00 08 00 00       	mov    ecx,0x800
c001ab33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab35:	31 c0                	xor    eax,eax
c001ab37:	5b                   	pop    ebx
c001ab38:	5e                   	pop    esi
c001ab39:	5f                   	pop    edi
c001ab3a:	c3                   	ret    
c001ab3b:	90                   	nop

c001ab3c <ISO9660::tryMount(LogicalDisk*, int)>:
c001ab3c:	53                   	push   ebx
c001ab3d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001ab43:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001ab4d:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ab54:	8d 58 41             	lea    ebx,[eax+0x41]
c001ab57:	0f be db             	movsx  ebx,bl
c001ab5a:	53                   	push   ebx
c001ab5b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab5f:	50                   	push   eax
c001ab60:	6a 10                	push   0x10
c001ab62:	e8 56 ff ff ff       	call   c001aabd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab67:	83 c4 10             	add    esp,0x10
c001ab6a:	31 d2                	xor    edx,edx
c001ab6c:	85 c0                	test   eax,eax
c001ab6e:	75 33                	jne    c001aba3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab70:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ab75:	75 2c                	jne    c001aba3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab77:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ab7c:	75 25                	jne    c001aba3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab7e:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ab83:	75 1e                	jne    c001aba3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab85:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ab8a:	75 17                	jne    c001aba3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab8c:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ab91:	75 10                	jne    c001aba3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab93:	83 ec 0c             	sub    esp,0xc
c001ab96:	53                   	push   ebx
c001ab97:	e8 cb be fe ff       	call   c0006a67 <init_percd>
c001ab9c:	83 c4 10             	add    esp,0x10
c001ab9f:	40                   	inc    eax
c001aba0:	0f 95 c2             	setne  dl
c001aba3:	81 c4 08 08 00 00    	add    esp,0x808
c001aba9:	88 d0                	mov    al,dl
c001abab:	5b                   	pop    ebx
c001abac:	c3                   	ret    
c001abad:	90                   	nop

c001abae <ISO9660::ISO9660()>:
c001abae:	83 ec 0c             	sub    esp,0xc
c001abb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb5:	83 ec 0c             	sub    esp,0xc
c001abb8:	50                   	push   eax
c001abb9:	e8 ce 0b ff ff       	call   c000b78c <Filesystem::Filesystem()>
c001abbe:	83 c4 10             	add    esp,0x10
c001abc1:	ba e4 30 02 c0       	mov    edx,0xc00230e4
c001abc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abca:	89 10                	mov    DWORD PTR [eax],edx
c001abcc:	e8 a8 bf fe ff       	call   c0006b79 <fs_iso9660_init>
c001abd1:	90                   	nop
c001abd2:	83 c4 0c             	add    esp,0xc
c001abd5:	c3                   	ret    

c001abd6 <SoundCard::beginPlayback()>:
c001abd6:	c7 44 24 04 48 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023148
c001abde:	e9 fc 69 ff ff       	jmp    c00115df <KePanic(char const*)>
c001abe3:	90                   	nop

c001abe4 <SoundCard::stopPlayback()>:
c001abe4:	c7 44 24 04 48 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023148
c001abec:	e9 ee 69 ff ff       	jmp    c00115df <KePanic(char const*)>
c001abf1:	90                   	nop

c001abf2 <SoundCard::SoundCard(char const*)>:
c001abf2:	83 ec 1c             	sub    esp,0x1c
c001abf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abf9:	83 ec 08             	sub    esp,0x8
c001abfc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac00:	50                   	push   eax
c001ac01:	e8 52 1f ff ff       	call   c000cb58 <Device::Device(char const*)>
c001ac06:	83 c4 10             	add    esp,0x10
c001ac09:	ba 94 31 02 c0       	mov    edx,0xc0023194
c001ac0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac12:	89 10                	mov    DWORD PTR [eax],edx
c001ac14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac18:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac23:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ac2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac31:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ac3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac3f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ac49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac4d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ac57:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac5f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac64:	7f 1a                	jg     c001ac80 <SoundCard::SoundCard(char const*)+0x8e>
c001ac66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac6e:	83 c2 54             	add    edx,0x54
c001ac71:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ac79:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ac7e:	eb df                	jmp    c001ac5f <SoundCard::SoundCard(char const*)+0x6d>
c001ac80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac84:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac8b:	90                   	nop
c001ac8c:	83 c4 1c             	add    esp,0x1c
c001ac8f:	c3                   	ret    

c001ac90 <SoundCard::~SoundCard()>:
c001ac90:	83 ec 0c             	sub    esp,0xc
c001ac93:	ba 94 31 02 c0       	mov    edx,0xc0023194
c001ac98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac9c:	89 10                	mov    DWORD PTR [eax],edx
c001ac9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aca2:	83 ec 0c             	sub    esp,0xc
c001aca5:	50                   	push   eax
c001aca6:	e8 17 1c ff ff       	call   c000c8c2 <Device::~Device()>
c001acab:	83 c4 10             	add    esp,0x10
c001acae:	90                   	nop
c001acaf:	83 c4 0c             	add    esp,0xc
c001acb2:	c3                   	ret    
c001acb3:	90                   	nop

c001acb4 <SoundCard::~SoundCard()>:
c001acb4:	83 ec 0c             	sub    esp,0xc
c001acb7:	83 ec 0c             	sub    esp,0xc
c001acba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acbe:	e8 cd ff ff ff       	call   c001ac90 <SoundCard::~SoundCard()>
c001acc3:	83 c4 10             	add    esp,0x10
c001acc6:	83 ec 08             	sub    esp,0x8
c001acc9:	68 e8 01 00 00       	push   0x1e8
c001acce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acd2:	e8 55 fb fe ff       	call   c000a82c <operator delete(void*, unsigned long)>
c001acd7:	83 c4 10             	add    esp,0x10
c001acda:	83 c4 0c             	add    esp,0xc
c001acdd:	c3                   	ret    

c001acde <SoundCard::configureRates(int, int, int)>:
c001acde:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ace2:	31 c0                	xor    eax,eax
c001ace4:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001aceb:	75 20                	jne    c001ad0d <SoundCard::configureRates(int, int, int)+0x2f>
c001aced:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001acf1:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001acf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acfb:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ad01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad05:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ad0b:	b0 01                	mov    al,0x1
c001ad0d:	c3                   	ret    

c001ad0e <SoundCard::getSamples16(int, short*)>:
c001ad0e:	55                   	push   ebp
c001ad0f:	57                   	push   edi
c001ad10:	31 ff                	xor    edi,edi
c001ad12:	56                   	push   esi
c001ad13:	53                   	push   ebx
c001ad14:	31 db                	xor    ebx,ebx
c001ad16:	83 ec 10             	sub    esp,0x10
c001ad19:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ad1d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad21:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad24:	50                   	push   eax
c001ad25:	6a 00                	push   0x0
c001ad27:	55                   	push   ebp
c001ad28:	e8 c3 57 fe ff       	call   c00004f0 <memset>
c001ad2d:	83 c4 10             	add    esp,0x10
c001ad30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad34:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001ad3b:	85 c0                	test   eax,eax
c001ad3d:	74 1a                	je     c001ad59 <SoundCard::getSamples16(int, short*)+0x4b>
c001ad3f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad43:	75 14                	jne    c001ad59 <SoundCard::getSamples16(int, short*)+0x4b>
c001ad45:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad49:	55                   	push   ebp
c001ad4a:	56                   	push   esi
c001ad4b:	50                   	push   eax
c001ad4c:	e8 f3 02 00 00       	call   c001b044 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ad51:	83 c4 10             	add    esp,0x10
c001ad54:	39 c3                	cmp    ebx,eax
c001ad56:	0f 4c d8             	cmovl  ebx,eax
c001ad59:	47                   	inc    edi
c001ad5a:	83 ff 20             	cmp    edi,0x20
c001ad5d:	75 d1                	jne    c001ad30 <SoundCard::getSamples16(int, short*)+0x22>
c001ad5f:	83 c4 0c             	add    esp,0xc
c001ad62:	89 d8                	mov    eax,ebx
c001ad64:	5b                   	pop    ebx
c001ad65:	5e                   	pop    esi
c001ad66:	5f                   	pop    edi
c001ad67:	5d                   	pop    ebp
c001ad68:	c3                   	ret    
c001ad69:	90                   	nop

c001ad6a <SoundCard::getSamples32(int, int*)>:
c001ad6a:	55                   	push   ebp
c001ad6b:	57                   	push   edi
c001ad6c:	31 ff                	xor    edi,edi
c001ad6e:	56                   	push   esi
c001ad6f:	31 f6                	xor    esi,esi
c001ad71:	53                   	push   ebx
c001ad72:	83 ec 10             	sub    esp,0x10
c001ad75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad79:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad7d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ad81:	c1 e0 02             	shl    eax,0x2
c001ad84:	50                   	push   eax
c001ad85:	6a 00                	push   0x0
c001ad87:	55                   	push   ebp
c001ad88:	e8 63 57 fe ff       	call   c00004f0 <memset>
c001ad8d:	83 c4 10             	add    esp,0x10
c001ad90:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ad97:	85 c0                	test   eax,eax
c001ad99:	74 1a                	je     c001adb5 <SoundCard::getSamples32(int, int*)+0x4b>
c001ad9b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad9f:	75 14                	jne    c001adb5 <SoundCard::getSamples32(int, int*)+0x4b>
c001ada1:	53                   	push   ebx
c001ada2:	55                   	push   ebp
c001ada3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ada7:	50                   	push   eax
c001ada8:	e8 67 03 00 00       	call   c001b114 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001adad:	83 c4 10             	add    esp,0x10
c001adb0:	39 c6                	cmp    esi,eax
c001adb2:	0f 4c f0             	cmovl  esi,eax
c001adb5:	47                   	inc    edi
c001adb6:	83 ff 20             	cmp    edi,0x20
c001adb9:	75 d5                	jne    c001ad90 <SoundCard::getSamples32(int, int*)+0x26>
c001adbb:	85 f6                	test   esi,esi
c001adbd:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001adc4:	75 0f                	jne    c001add5 <SoundCard::getSamples32(int, int*)+0x6b>
c001adc6:	85 c0                	test   eax,eax
c001adc8:	74 1b                	je     c001ade5 <SoundCard::getSamples32(int, int*)+0x7b>
c001adca:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adcc:	83 ec 0c             	sub    esp,0xc
c001adcf:	53                   	push   ebx
c001add0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001add3:	eb 0d                	jmp    c001ade2 <SoundCard::getSamples32(int, int*)+0x78>
c001add5:	85 c0                	test   eax,eax
c001add7:	75 0c                	jne    c001ade5 <SoundCard::getSamples32(int, int*)+0x7b>
c001add9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001addb:	83 ec 0c             	sub    esp,0xc
c001adde:	53                   	push   ebx
c001addf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ade2:	83 c4 10             	add    esp,0x10
c001ade5:	83 c4 0c             	add    esp,0xc
c001ade8:	89 f0                	mov    eax,esi
c001adea:	5b                   	pop    ebx
c001adeb:	5e                   	pop    esi
c001adec:	5f                   	pop    edi
c001aded:	5d                   	pop    ebp
c001adee:	c3                   	ret    
c001adef:	90                   	nop

c001adf0 <SoundCard::addChannel(SoundPort*)>:
c001adf0:	83 ec 0c             	sub    esp,0xc
c001adf3:	31 c0                	xor    eax,eax
c001adf5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001adf9:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ae01:	74 1b                	je     c001ae1e <SoundCard::addChannel(SoundPort*)+0x2e>
c001ae03:	40                   	inc    eax
c001ae04:	83 f8 20             	cmp    eax,0x20
c001ae07:	75 f0                	jne    c001adf9 <SoundCard::addChannel(SoundPort*)+0x9>
c001ae09:	83 ec 0c             	sub    esp,0xc
c001ae0c:	68 6d 31 02 c0       	push   0xc002316d
c001ae11:	e8 c9 67 ff ff       	call   c00115df <KePanic(char const*)>
c001ae16:	83 c4 10             	add    esp,0x10
c001ae19:	83 c8 ff             	or     eax,0xffffffff
c001ae1c:	eb 0b                	jmp    c001ae29 <SoundCard::addChannel(SoundPort*)+0x39>
c001ae1e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae22:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ae29:	83 c4 0c             	add    esp,0xc
c001ae2c:	c3                   	ret    
c001ae2d:	90                   	nop

c001ae2e <SoundCard::removeChannel(int)>:
c001ae2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae36:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ae41:	c3                   	ret    
c001ae42:	66 90                	xchg   ax,ax

c001ae44 <SoundPort::SoundPort(int, int, int, int)>:
c001ae44:	83 ec 0c             	sub    esp,0xc
c001ae47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae56:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae62:	89 10                	mov    DWORD PTR [eax],edx
c001ae64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae68:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae6c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ae6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae73:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae77:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ae7a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ae7f:	75 13                	jne    c001ae94 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ae81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae85:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae87:	05 a0 0f 00 00       	add    eax,0xfa0
c001ae8c:	d1 e0                	shl    eax,1
c001ae8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae92:	66 90                	xchg   ax,ax
c001ae94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae9c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ae9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aea3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001aeaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aeb1:	c1 e0 02             	shl    eax,0x2
c001aeb4:	83 ec 0c             	sub    esp,0xc
c001aeb7:	50                   	push   eax
c001aeb8:	e8 36 cc fe ff       	call   c0007af3 <malloc>
c001aebd:	83 c4 10             	add    esp,0x10
c001aec0:	89 c2                	mov    edx,eax
c001aec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aec6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aec9:	90                   	nop
c001aeca:	83 c4 0c             	add    esp,0xc
c001aecd:	c3                   	ret    
c001aece:	66 90                	xchg   ax,ax

c001aed0 <SoundPort::~SoundPort()>:
c001aed0:	83 ec 0c             	sub    esp,0xc
c001aed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aeda:	85 c0                	test   eax,eax
c001aedc:	74 1e                	je     c001aefc <SoundPort::~SoundPort()+0x2c>
c001aede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aee5:	83 ec 0c             	sub    esp,0xc
c001aee8:	50                   	push   eax
c001aee9:	e8 15 cc fe ff       	call   c0007b03 <free>
c001aeee:	83 c4 10             	add    esp,0x10
c001aef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aefc:	90                   	nop
c001aefd:	83 c4 0c             	add    esp,0xc
c001af00:	c3                   	ret    
c001af01:	90                   	nop
c001af02:	66 90                	xchg   ax,ax

c001af04 <SoundPort::unpause()>:
c001af04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af08:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001af0c:	c3                   	ret    
c001af0d:	90                   	nop
c001af0e:	66 90                	xchg   ax,ax

c001af10 <SoundPort::pause()>:
c001af10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af14:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001af18:	c3                   	ret    
c001af19:	90                   	nop
c001af1a:	66 90                	xchg   ax,ax

c001af1c <SoundPort::getBufferUsed()>:
c001af1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af20:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af23:	c3                   	ret    

c001af24 <SoundPort::getBufferSize()>:
c001af24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af28:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af2b:	c3                   	ret    

c001af2c <SoundPort::buffer16(short*, int)>:
c001af2c:	55                   	push   ebp
c001af2d:	57                   	push   edi
c001af2e:	56                   	push   esi
c001af2f:	53                   	push   ebx
c001af30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af34:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001af38:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001af3b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001af3e:	74 68                	je     c001afa8 <SoundPort::buffer16(short*, int)+0x7c>
c001af40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af44:	85 c9                	test   ecx,ecx
c001af46:	7e 60                	jle    c001afa8 <SoundPort::buffer16(short*, int)+0x7c>
c001af48:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001af4c:	8d 70 01             	lea    esi,[eax+0x1]
c001af4f:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af52:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af55:	c1 e1 0f             	shl    ecx,0xf
c001af58:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001af5b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af5e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af61:	74 4d                	je     c001afb0 <SoundPort::buffer16(short*, int)+0x84>
c001af63:	31 f6                	xor    esi,esi
c001af65:	eb 21                	jmp    c001af88 <SoundPort::buffer16(short*, int)+0x5c>
c001af67:	90                   	nop
c001af68:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001af6d:	8d 79 01             	lea    edi,[ecx+0x1]
c001af70:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001af73:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001af76:	c1 e3 0f             	shl    ebx,0xf
c001af79:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001af7c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af7f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af82:	74 1c                	je     c001afa0 <SoundPort::buffer16(short*, int)+0x74>
c001af84:	89 c6                	mov    esi,eax
c001af86:	66 90                	xchg   ax,ax
c001af88:	8d 46 01             	lea    eax,[esi+0x1]
c001af8b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001af8f:	75 d7                	jne    c001af68 <SoundPort::buffer16(short*, int)+0x3c>
c001af91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af95:	8d 76 00             	lea    esi,[esi+0x0]
c001af98:	5b                   	pop    ebx
c001af99:	5e                   	pop    esi
c001af9a:	5f                   	pop    edi
c001af9b:	5d                   	pop    ebp
c001af9c:	c3                   	ret    
c001af9d:	8d 76 00             	lea    esi,[esi+0x0]
c001afa0:	5b                   	pop    ebx
c001afa1:	8d 46 02             	lea    eax,[esi+0x2]
c001afa4:	5e                   	pop    esi
c001afa5:	5f                   	pop    edi
c001afa6:	5d                   	pop    ebp
c001afa7:	c3                   	ret    
c001afa8:	5b                   	pop    ebx
c001afa9:	31 c0                	xor    eax,eax
c001afab:	5e                   	pop    esi
c001afac:	5f                   	pop    edi
c001afad:	5d                   	pop    ebp
c001afae:	c3                   	ret    
c001afaf:	90                   	nop
c001afb0:	b8 01 00 00 00       	mov    eax,0x1
c001afb5:	eb e1                	jmp    c001af98 <SoundPort::buffer16(short*, int)+0x6c>
c001afb7:	90                   	nop

c001afb8 <SoundPort::buffer32(int*, int)>:
c001afb8:	55                   	push   ebp
c001afb9:	57                   	push   edi
c001afba:	56                   	push   esi
c001afbb:	53                   	push   ebx
c001afbc:	83 ec 04             	sub    esp,0x4
c001afbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001afc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afc7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001afcb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afce:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afd1:	89 04 24             	mov    DWORD PTR [esp],eax
c001afd4:	74 5a                	je     c001b030 <SoundPort::buffer32(int*, int)+0x78>
c001afd6:	85 c0                	test   eax,eax
c001afd8:	7e 56                	jle    c001b030 <SoundPort::buffer32(int*, int)+0x78>
c001afda:	8d 71 01             	lea    esi,[ecx+0x1]
c001afdd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001afe0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001afe3:	8b 37                	mov    esi,DWORD PTR [edi]
c001afe5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001afe8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afeb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afee:	74 4c                	je     c001b03c <SoundPort::buffer32(int*, int)+0x84>
c001aff0:	31 f6                	xor    esi,esi
c001aff2:	eb 1c                	jmp    c001b010 <SoundPort::buffer32(int*, int)+0x58>
c001aff4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001aff7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001affa:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001affd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b000:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b004:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b007:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b00a:	74 18                	je     c001b024 <SoundPort::buffer32(int*, int)+0x6c>
c001b00c:	89 de                	mov    esi,ebx
c001b00e:	66 90                	xchg   ax,ax
c001b010:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b013:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b016:	75 dc                	jne    c001aff4 <SoundPort::buffer32(int*, int)+0x3c>
c001b018:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b01b:	90                   	nop
c001b01c:	83 c4 04             	add    esp,0x4
c001b01f:	5b                   	pop    ebx
c001b020:	5e                   	pop    esi
c001b021:	5f                   	pop    edi
c001b022:	5d                   	pop    ebp
c001b023:	c3                   	ret    
c001b024:	8d 46 02             	lea    eax,[esi+0x2]
c001b027:	83 c4 04             	add    esp,0x4
c001b02a:	5b                   	pop    ebx
c001b02b:	5e                   	pop    esi
c001b02c:	5f                   	pop    edi
c001b02d:	5d                   	pop    ebp
c001b02e:	c3                   	ret    
c001b02f:	90                   	nop
c001b030:	83 c4 04             	add    esp,0x4
c001b033:	31 c0                	xor    eax,eax
c001b035:	5b                   	pop    ebx
c001b036:	5e                   	pop    esi
c001b037:	5f                   	pop    edi
c001b038:	5d                   	pop    ebp
c001b039:	c3                   	ret    
c001b03a:	66 90                	xchg   ax,ax
c001b03c:	b8 01 00 00 00       	mov    eax,0x1
c001b041:	eb d9                	jmp    c001b01c <SoundPort::buffer32(int*, int)+0x64>
c001b043:	90                   	nop

c001b044 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b044:	55                   	push   ebp
c001b045:	57                   	push   edi
c001b046:	56                   	push   esi
c001b047:	53                   	push   ebx
c001b048:	83 ec 0c             	sub    esp,0xc
c001b04b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b04f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b053:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b057:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b05b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b061:	39 03                	cmp    DWORD PTR [ebx],eax
c001b063:	74 13                	je     c001b078 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001b065:	83 ec 0c             	sub    esp,0xc
c001b068:	68 c0 31 02 c0       	push   0xc00231c0
c001b06d:	e8 6d 65 ff ff       	call   c00115df <KePanic(char const*)>
c001b072:	83 c4 10             	add    esp,0x10
c001b075:	8d 76 00             	lea    esi,[esi+0x0]
c001b078:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b07e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b081:	74 11                	je     c001b094 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001b083:	83 ec 0c             	sub    esp,0xc
c001b086:	68 ff 31 02 c0       	push   0xc00231ff
c001b08b:	e8 4f 65 ff ff       	call   c00115df <KePanic(char const*)>
c001b090:	83 c4 10             	add    esp,0x10
c001b093:	90                   	nop
c001b094:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b09a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b09d:	74 11                	je     c001b0b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001b09f:	83 ec 0c             	sub    esp,0xc
c001b0a2:	68 ff 31 02 c0       	push   0xc00231ff
c001b0a7:	e8 33 65 ff ff       	call   c00115df <KePanic(char const*)>
c001b0ac:	83 c4 10             	add    esp,0x10
c001b0af:	90                   	nop
c001b0b0:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001b0b3:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001b0b7:	85 f6                	test   esi,esi
c001b0b9:	7e 2d                	jle    c001b0e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001b0bb:	31 c0                	xor    eax,eax
c001b0bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b0c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b0c3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001b0c6:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001b0cc:	85 c9                	test   ecx,ecx
c001b0ce:	0f 49 d1             	cmovns edx,ecx
c001b0d1:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001b0d5:	c1 fa 0f             	sar    edx,0xf
c001b0d8:	01 d1                	add    ecx,edx
c001b0da:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001b0de:	83 c0 01             	add    eax,0x1
c001b0e1:	39 f0                	cmp    eax,esi
c001b0e3:	75 db                	jne    c001b0c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001b0e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b0e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b0eb:	83 ec 04             	sub    esp,0x4
c001b0ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b0f1:	29 f0                	sub    eax,esi
c001b0f3:	c1 e0 02             	shl    eax,0x2
c001b0f6:	50                   	push   eax
c001b0f7:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b0fa:	50                   	push   eax
c001b0fb:	52                   	push   edx
c001b0fc:	e8 cf 52 fe ff       	call   c00003d0 <memmove>
c001b101:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b104:	29 f0                	sub    eax,esi
c001b106:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b109:	83 c4 1c             	add    esp,0x1c
c001b10c:	89 f0                	mov    eax,esi
c001b10e:	5b                   	pop    ebx
c001b10f:	5e                   	pop    esi
c001b110:	5f                   	pop    edi
c001b111:	5d                   	pop    ebp
c001b112:	c3                   	ret    
c001b113:	90                   	nop

c001b114 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b114:	55                   	push   ebp
c001b115:	57                   	push   edi
c001b116:	56                   	push   esi
c001b117:	53                   	push   ebx
c001b118:	83 ec 0c             	sub    esp,0xc
c001b11b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b11f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b123:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b127:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b12b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b131:	39 03                	cmp    DWORD PTR [ebx],eax
c001b133:	74 13                	je     c001b148 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b135:	83 ec 0c             	sub    esp,0xc
c001b138:	68 e0 31 02 c0       	push   0xc00231e0
c001b13d:	e8 9d 64 ff ff       	call   c00115df <KePanic(char const*)>
c001b142:	83 c4 10             	add    esp,0x10
c001b145:	8d 76 00             	lea    esi,[esi+0x0]
c001b148:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b14e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b151:	74 11                	je     c001b164 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b153:	83 ec 0c             	sub    esp,0xc
c001b156:	68 1b 32 02 c0       	push   0xc002321b
c001b15b:	e8 7f 64 ff ff       	call   c00115df <KePanic(char const*)>
c001b160:	83 c4 10             	add    esp,0x10
c001b163:	90                   	nop
c001b164:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b16a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b16d:	74 11                	je     c001b180 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b16f:	83 ec 0c             	sub    esp,0xc
c001b172:	68 1b 32 02 c0       	push   0xc002321b
c001b177:	e8 63 64 ff ff       	call   c00115df <KePanic(char const*)>
c001b17c:	83 c4 10             	add    esp,0x10
c001b17f:	90                   	nop
c001b180:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b183:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b187:	85 ff                	test   edi,edi
c001b189:	7e 21                	jle    c001b1ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b18b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b192:	31 c0                	xor    eax,eax
c001b194:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b197:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b19a:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b19d:	01 d5                	add    ebp,edx
c001b19f:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b1a2:	83 c0 04             	add    eax,0x4
c001b1a5:	39 c1                	cmp    ecx,eax
c001b1a7:	75 eb                	jne    c001b194 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b1a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b1af:	83 ec 04             	sub    esp,0x4
c001b1b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b1b5:	29 f8                	sub    eax,edi
c001b1b7:	c1 e0 02             	shl    eax,0x2
c001b1ba:	50                   	push   eax
c001b1bb:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b1be:	50                   	push   eax
c001b1bf:	52                   	push   edx
c001b1c0:	e8 0b 52 fe ff       	call   c00003d0 <memmove>
c001b1c5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b1c8:	29 f8                	sub    eax,edi
c001b1ca:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b1cd:	83 c4 1c             	add    esp,0x1c
c001b1d0:	89 f8                	mov    eax,edi
c001b1d2:	5b                   	pop    ebx
c001b1d3:	5e                   	pop    esi
c001b1d4:	5f                   	pop    edi
c001b1d5:	5d                   	pop    ebp
c001b1d6:	c3                   	ret    
c001b1d7:	90                   	nop

c001b1d8 <PCI::open(int, int, void*)>:
c001b1d8:	83 ec 18             	sub    esp,0x18
c001b1db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b1e3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b1e9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1eb:	50                   	push   eax
c001b1ec:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b1ef:	31 c0                	xor    eax,eax
c001b1f1:	83 c4 1c             	add    esp,0x1c
c001b1f4:	c3                   	ret    
c001b1f5:	90                   	nop

c001b1f6 <PCI::close(int, int, void*)>:
c001b1f6:	31 c0                	xor    eax,eax
c001b1f8:	c3                   	ret    
c001b1f9:	90                   	nop

c001b1fa <PCI::PCI()>:
c001b1fa:	83 ec 0c             	sub    esp,0xc
c001b1fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b201:	83 ec 08             	sub    esp,0x8
c001b204:	68 37 32 02 c0       	push   0xc0023237
c001b209:	50                   	push   eax
c001b20a:	e8 0d 11 ff ff       	call   c000c31c <Bus::Bus(char const*)>
c001b20f:	83 c4 10             	add    esp,0x10
c001b212:	ba e0 32 02 c0       	mov    edx,0xc00232e0
c001b217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b21b:	89 10                	mov    DWORD PTR [eax],edx
c001b21d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b221:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b22b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b22f:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b238:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b23e:	0f b6 d0             	movzx  edx,al
c001b241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b245:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b250:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b256:	0f b6 d0             	movzx  edx,al
c001b259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b25d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b266:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b26c:	8d 50 01             	lea    edx,[eax+0x1]
c001b26f:	88 d1                	mov    cl,dl
c001b271:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b275:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b27b:	0f b6 d0             	movzx  edx,al
c001b27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b282:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b286:	83 c9 c0             	or     ecx,0xffffffc0
c001b289:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b28d:	90                   	nop
c001b28e:	83 c4 0c             	add    esp,0xc
c001b291:	c3                   	ret    

c001b292 <PCI::readBAR8(unsigned int, int)>:
c001b292:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b296:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b29a:	f6 c2 01             	test   dl,0x1
c001b29d:	74 07                	je     c001b2a6 <PCI::readBAR8(unsigned int, int)+0x14>
c001b29f:	83 e2 fc             	and    edx,0xfffffffc
c001b2a2:	01 c2                	add    edx,eax
c001b2a4:	ec                   	in     al,dx
c001b2a5:	c3                   	ret    
c001b2a6:	83 e2 f0             	and    edx,0xfffffff0
c001b2a9:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b2ac:	c3                   	ret    
c001b2ad:	90                   	nop

c001b2ae <PCI::readBAR16(unsigned int, int)>:
c001b2ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2b6:	f6 c2 01             	test   dl,0x1
c001b2b9:	74 08                	je     c001b2c3 <PCI::readBAR16(unsigned int, int)+0x15>
c001b2bb:	83 e2 fc             	and    edx,0xfffffffc
c001b2be:	01 c2                	add    edx,eax
c001b2c0:	66 ed                	in     ax,dx
c001b2c2:	c3                   	ret    
c001b2c3:	83 e2 f0             	and    edx,0xfffffff0
c001b2c6:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b2ca:	c3                   	ret    
c001b2cb:	90                   	nop

c001b2cc <PCI::readBAR32(unsigned int, int)>:
c001b2cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2d4:	f6 c2 01             	test   dl,0x1
c001b2d7:	74 07                	je     c001b2e0 <PCI::readBAR32(unsigned int, int)+0x14>
c001b2d9:	83 e2 fc             	and    edx,0xfffffffc
c001b2dc:	01 c2                	add    edx,eax
c001b2de:	ed                   	in     eax,dx
c001b2df:	c3                   	ret    
c001b2e0:	83 e2 f0             	and    edx,0xfffffff0
c001b2e3:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b2e6:	c3                   	ret    
c001b2e7:	90                   	nop

c001b2e8 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b2e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2f4:	f6 c2 01             	test   dl,0x1
c001b2f7:	74 07                	je     c001b300 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b2f9:	83 e2 fc             	and    edx,0xfffffffc
c001b2fc:	01 ca                	add    edx,ecx
c001b2fe:	ee                   	out    dx,al
c001b2ff:	c3                   	ret    
c001b300:	83 e2 f0             	and    edx,0xfffffff0
c001b303:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b306:	c3                   	ret    
c001b307:	90                   	nop

c001b308 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b308:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b30c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b310:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b314:	f6 c2 01             	test   dl,0x1
c001b317:	74 08                	je     c001b321 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b319:	83 e2 fc             	and    edx,0xfffffffc
c001b31c:	01 ca                	add    edx,ecx
c001b31e:	66 ef                	out    dx,ax
c001b320:	c3                   	ret    
c001b321:	83 e2 f0             	and    edx,0xfffffff0
c001b324:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b328:	c3                   	ret    
c001b329:	90                   	nop

c001b32a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b32a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b32e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b332:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b336:	f6 c2 01             	test   dl,0x1
c001b339:	74 07                	je     c001b342 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b33b:	83 e2 fc             	and    edx,0xfffffffc
c001b33e:	01 ca                	add    edx,ecx
c001b340:	ef                   	out    dx,eax
c001b341:	c3                   	ret    
c001b342:	83 e2 f0             	and    edx,0xfffffff0
c001b345:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b348:	c3                   	ret    
c001b349:	90                   	nop

c001b34a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b34a:	55                   	push   ebp
c001b34b:	57                   	push   edi
c001b34c:	56                   	push   esi
c001b34d:	53                   	push   ebx
c001b34e:	83 ec 0c             	sub    esp,0xc
c001b351:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b356:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b35a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b35e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b362:	83 fe 07             	cmp    esi,0x7
c001b365:	76 10                	jbe    c001b377 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b367:	83 ec 0c             	sub    esp,0xc
c001b36a:	68 3f 32 02 c0       	push   0xc002323f
c001b36f:	e8 6b 62 ff ff       	call   c00115df <KePanic(char const*)>
c001b374:	83 c4 10             	add    esp,0x10
c001b377:	0f b6 db             	movzx  ebx,bl
c001b37a:	83 fb 0f             	cmp    ebx,0xf
c001b37d:	76 10                	jbe    c001b38f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b37f:	83 ec 0c             	sub    esp,0xc
c001b382:	68 6f 32 02 c0       	push   0xc002326f
c001b387:	e8 53 62 ff ff       	call   c00115df <KePanic(char const*)>
c001b38c:	83 c4 10             	add    esp,0x10
c001b38f:	8d 04 36             	lea    eax,[esi+esi*1]
c001b392:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b397:	83 c8 f0             	or     eax,0xfffffff0
c001b39a:	ee                   	out    dx,al
c001b39b:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b3a0:	89 e8                	mov    eax,ebp
c001b3a2:	ee                   	out    dx,al
c001b3a3:	89 f9                	mov    ecx,edi
c001b3a5:	89 d8                	mov    eax,ebx
c001b3a7:	0f b6 d9             	movzx  ebx,cl
c001b3aa:	83 c4 0c             	add    esp,0xc
c001b3ad:	c1 e0 08             	shl    eax,0x8
c001b3b0:	83 e3 fc             	and    ebx,0xfffffffc
c001b3b3:	09 d8                	or     eax,ebx
c001b3b5:	5b                   	pop    ebx
c001b3b6:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b3bb:	5e                   	pop    esi
c001b3bc:	5f                   	pop    edi
c001b3bd:	5d                   	pop    ebp
c001b3be:	c3                   	ret    
c001b3bf:	90                   	nop

c001b3c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b3c0:	57                   	push   edi
c001b3c1:	56                   	push   esi
c001b3c2:	53                   	push   ebx
c001b3c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b3cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b3d3:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b3d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3dd:	83 ff 01             	cmp    edi,0x1
c001b3e0:	75 3f                	jne    c001b421 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b3e2:	89 de                	mov    esi,ebx
c001b3e4:	0f b6 c0             	movzx  eax,al
c001b3e7:	c1 e0 10             	shl    eax,0x10
c001b3ea:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b3f0:	0f b6 c9             	movzx  ecx,cl
c001b3f3:	09 f0                	or     eax,esi
c001b3f5:	c1 e1 08             	shl    ecx,0x8
c001b3f8:	0f b6 d2             	movzx  edx,dl
c001b3fb:	c1 e2 0b             	shl    edx,0xb
c001b3fe:	09 c8                	or     eax,ecx
c001b400:	09 d0                	or     eax,edx
c001b402:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b407:	0d 00 00 00 80       	or     eax,0x80000000
c001b40c:	ef                   	out    dx,eax
c001b40d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b412:	ed                   	in     eax,dx
c001b413:	83 e3 02             	and    ebx,0x2
c001b416:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b41d:	d3 e8                	shr    eax,cl
c001b41f:	eb 44                	jmp    c001b465 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b421:	83 ff 02             	cmp    edi,0x2
c001b424:	75 2d                	jne    c001b453 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b426:	83 ec 0c             	sub    esp,0xc
c001b429:	0f b6 fb             	movzx  edi,bl
c001b42c:	57                   	push   edi
c001b42d:	0f b6 c9             	movzx  ecx,cl
c001b430:	51                   	push   ecx
c001b431:	0f b6 d2             	movzx  edx,dl
c001b434:	52                   	push   edx
c001b435:	0f b6 c0             	movzx  eax,al
c001b438:	50                   	push   eax
c001b439:	56                   	push   esi
c001b43a:	e8 0b ff ff ff       	call   c001b34a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b43f:	89 c2                	mov    edx,eax
c001b441:	ed                   	in     eax,dx
c001b442:	83 e3 02             	and    ebx,0x2
c001b445:	83 c4 20             	add    esp,0x20
c001b448:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b44f:	d3 e8                	shr    eax,cl
c001b451:	eb 12                	jmp    c001b465 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b453:	83 ec 0c             	sub    esp,0xc
c001b456:	68 9f 32 02 c0       	push   0xc002329f
c001b45b:	e8 7f 61 ff ff       	call   c00115df <KePanic(char const*)>
c001b460:	83 c4 10             	add    esp,0x10
c001b463:	31 c0                	xor    eax,eax
c001b465:	5b                   	pop    ebx
c001b466:	5e                   	pop    esi
c001b467:	5f                   	pop    edi
c001b468:	c3                   	ret    
c001b469:	90                   	nop

c001b46a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b46a:	83 ec 18             	sub    esp,0x18
c001b46d:	6a 00                	push   0x0
c001b46f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b474:	50                   	push   eax
c001b475:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b47a:	50                   	push   eax
c001b47b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b480:	50                   	push   eax
c001b481:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b485:	e8 36 ff ff ff       	call   c001b3c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b48a:	83 c4 2c             	add    esp,0x2c
c001b48d:	c3                   	ret    

c001b48e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b48e:	83 ec 18             	sub    esp,0x18
c001b491:	6a 0e                	push   0xe
c001b493:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b498:	50                   	push   eax
c001b499:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b49e:	50                   	push   eax
c001b49f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a4:	50                   	push   eax
c001b4a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4a9:	e8 12 ff ff ff       	call   c001b3c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4ae:	83 c4 2c             	add    esp,0x2c
c001b4b1:	0f b6 c0             	movzx  eax,al
c001b4b4:	c3                   	ret    
c001b4b5:	90                   	nop

c001b4b6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b4b6:	55                   	push   ebp
c001b4b7:	57                   	push   edi
c001b4b8:	56                   	push   esi
c001b4b9:	53                   	push   ebx
c001b4ba:	83 ec 18             	sub    esp,0x18
c001b4bd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b4c2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b4c7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b4cc:	6a 0a                	push   0xa
c001b4ce:	56                   	push   esi
c001b4cf:	55                   	push   ebp
c001b4d0:	57                   	push   edi
c001b4d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b4d5:	e8 e6 fe ff ff       	call   c001b3c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4da:	83 c4 14             	add    esp,0x14
c001b4dd:	6a 0a                	push   0xa
c001b4df:	56                   	push   esi
c001b4e0:	55                   	push   ebp
c001b4e1:	57                   	push   edi
c001b4e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b4e6:	89 c3                	mov    ebx,eax
c001b4e8:	0f b6 db             	movzx  ebx,bl
c001b4eb:	e8 d0 fe ff ff       	call   c001b3c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4f0:	83 c4 2c             	add    esp,0x2c
c001b4f3:	25 00 ff 00 00       	and    eax,0xff00
c001b4f8:	09 d8                	or     eax,ebx
c001b4fa:	5b                   	pop    ebx
c001b4fb:	5e                   	pop    esi
c001b4fc:	5f                   	pop    edi
c001b4fd:	5d                   	pop    ebp
c001b4fe:	c3                   	ret    
c001b4ff:	90                   	nop

c001b500 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b500:	83 ec 18             	sub    esp,0x18
c001b503:	6a 08                	push   0x8
c001b505:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b50a:	50                   	push   eax
c001b50b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b510:	50                   	push   eax
c001b511:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b516:	50                   	push   eax
c001b517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b51b:	e8 a0 fe ff ff       	call   c001b3c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b520:	83 c4 2c             	add    esp,0x2c
c001b523:	0f b6 c4             	movzx  eax,ah
c001b526:	c3                   	ret    
c001b527:	90                   	nop

c001b528 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b528:	83 ec 18             	sub    esp,0x18
c001b52b:	6a 08                	push   0x8
c001b52d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b532:	50                   	push   eax
c001b533:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b538:	50                   	push   eax
c001b539:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b53e:	50                   	push   eax
c001b53f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b543:	e8 78 fe ff ff       	call   c001b3c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b548:	83 c4 2c             	add    esp,0x2c
c001b54b:	c3                   	ret    

c001b54c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b54c:	83 ec 18             	sub    esp,0x18
c001b54f:	6a 3c                	push   0x3c
c001b551:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b556:	50                   	push   eax
c001b557:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b55c:	50                   	push   eax
c001b55d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b562:	50                   	push   eax
c001b563:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b567:	e8 54 fe ff ff       	call   c001b3c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b56c:	83 c4 2c             	add    esp,0x2c
c001b56f:	c3                   	ret    

c001b570 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b570:	83 ec 18             	sub    esp,0x18
c001b573:	6a 18                	push   0x18
c001b575:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b57a:	50                   	push   eax
c001b57b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b580:	50                   	push   eax
c001b581:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b586:	50                   	push   eax
c001b587:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b58b:	e8 30 fe ff ff       	call   c001b3c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b590:	83 c4 2c             	add    esp,0x2c
c001b593:	0f b6 c4             	movzx  eax,ah
c001b596:	c3                   	ret    
c001b597:	90                   	nop

c001b598 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b598:	55                   	push   ebp
c001b599:	57                   	push   edi
c001b59a:	56                   	push   esi
c001b59b:	53                   	push   ebx
c001b59c:	83 ec 28             	sub    esp,0x28
c001b59f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b5a3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b5a8:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b5ad:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b5b2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b5b9:	8d 43 12             	lea    eax,[ebx+0x12]
c001b5bc:	83 c3 10             	add    ebx,0x10
c001b5bf:	0f b6 c0             	movzx  eax,al
c001b5c2:	0f b6 db             	movzx  ebx,bl
c001b5c5:	50                   	push   eax
c001b5c6:	51                   	push   ecx
c001b5c7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b5cb:	57                   	push   edi
c001b5cc:	55                   	push   ebp
c001b5cd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b5d1:	e8 ea fd ff ff       	call   c001b3c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5d6:	83 c4 14             	add    esp,0x14
c001b5d9:	53                   	push   ebx
c001b5da:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b5de:	51                   	push   ecx
c001b5df:	89 c6                	mov    esi,eax
c001b5e1:	57                   	push   edi
c001b5e2:	55                   	push   ebp
c001b5e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b5e7:	c1 e6 10             	shl    esi,0x10
c001b5ea:	e8 d1 fd ff ff       	call   c001b3c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5ef:	83 c4 3c             	add    esp,0x3c
c001b5f2:	5b                   	pop    ebx
c001b5f3:	0f b7 c0             	movzx  eax,ax
c001b5f6:	09 f0                	or     eax,esi
c001b5f8:	5e                   	pop    esi
c001b5f9:	5f                   	pop    edi
c001b5fa:	5d                   	pop    ebp
c001b5fb:	c3                   	ret    

c001b5fc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b5fc:	55                   	push   ebp
c001b5fd:	57                   	push   edi
c001b5fe:	56                   	push   esi
c001b5ff:	53                   	push   ebx
c001b600:	83 ec 0c             	sub    esp,0xc
c001b603:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b607:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b60b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b60f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b613:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b619:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b61d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b621:	83 f9 01             	cmp    ecx,0x1
c001b624:	75 5d                	jne    c001b683 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b626:	0f b6 c8             	movzx  ecx,al
c001b629:	89 f0                	mov    eax,esi
c001b62b:	25 fc 00 00 00       	and    eax,0xfc
c001b630:	0f b6 d2             	movzx  edx,dl
c001b633:	c1 e1 10             	shl    ecx,0x10
c001b636:	c1 e2 0b             	shl    edx,0xb
c001b639:	09 c1                	or     ecx,eax
c001b63b:	89 f8                	mov    eax,edi
c001b63d:	0f b6 f8             	movzx  edi,al
c001b640:	c1 e7 08             	shl    edi,0x8
c001b643:	09 f9                	or     ecx,edi
c001b645:	09 d1                	or     ecx,edx
c001b647:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b64c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b652:	89 c8                	mov    eax,ecx
c001b654:	ef                   	out    dx,eax
c001b655:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b65a:	ed                   	in     eax,dx
c001b65b:	83 e6 02             	and    esi,0x2
c001b65e:	0f b7 db             	movzx  ebx,bx
c001b661:	74 0a                	je     c001b66d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b663:	c1 e3 10             	shl    ebx,0x10
c001b666:	0f b7 d0             	movzx  edx,ax
c001b669:	09 d3                	or     ebx,edx
c001b66b:	eb 05                	jmp    c001b672 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b66d:	66 31 c0             	xor    ax,ax
c001b670:	09 c3                	or     ebx,eax
c001b672:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b677:	89 c8                	mov    eax,ecx
c001b679:	ef                   	out    dx,eax
c001b67a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b67f:	89 d8                	mov    eax,ebx
c001b681:	eb 41                	jmp    c001b6c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b683:	83 f9 02             	cmp    ecx,0x2
c001b686:	75 45                	jne    c001b6cd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b688:	89 f1                	mov    ecx,esi
c001b68a:	83 ec 0c             	sub    esp,0xc
c001b68d:	0f b6 f1             	movzx  esi,cl
c001b690:	89 f9                	mov    ecx,edi
c001b692:	56                   	push   esi
c001b693:	0f b6 f9             	movzx  edi,cl
c001b696:	57                   	push   edi
c001b697:	0f b6 d2             	movzx  edx,dl
c001b69a:	52                   	push   edx
c001b69b:	0f b6 c0             	movzx  eax,al
c001b69e:	50                   	push   eax
c001b69f:	55                   	push   ebp
c001b6a0:	e8 a5 fc ff ff       	call   c001b34a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6a5:	89 c2                	mov    edx,eax
c001b6a7:	ed                   	in     eax,dx
c001b6a8:	83 c4 20             	add    esp,0x20
c001b6ab:	f6 c2 02             	test   dl,0x2
c001b6ae:	0f b7 db             	movzx  ebx,bx
c001b6b1:	74 0c                	je     c001b6bf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b6b3:	0f b7 c8             	movzx  ecx,ax
c001b6b6:	89 d8                	mov    eax,ebx
c001b6b8:	c1 e0 10             	shl    eax,0x10
c001b6bb:	09 c8                	or     eax,ecx
c001b6bd:	eb 05                	jmp    c001b6c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b6bf:	66 31 c0             	xor    ax,ax
c001b6c2:	09 d8                	or     eax,ebx
c001b6c4:	ef                   	out    dx,eax
c001b6c5:	83 c4 0c             	add    esp,0xc
c001b6c8:	5b                   	pop    ebx
c001b6c9:	5e                   	pop    esi
c001b6ca:	5f                   	pop    edi
c001b6cb:	5d                   	pop    ebp
c001b6cc:	c3                   	ret    
c001b6cd:	c7 44 24 20 9f 32 02 c0 	mov    DWORD PTR [esp+0x20],0xc002329f
c001b6d5:	83 c4 0c             	add    esp,0xc
c001b6d8:	5b                   	pop    ebx
c001b6d9:	5e                   	pop    esi
c001b6da:	5f                   	pop    edi
c001b6db:	5d                   	pop    ebp
c001b6dc:	e9 fe 5e ff ff       	jmp    c00115df <KePanic(char const*)>
c001b6e1:	90                   	nop

c001b6e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b6e2:	55                   	push   ebp
c001b6e3:	57                   	push   edi
c001b6e4:	56                   	push   esi
c001b6e5:	53                   	push   ebx
c001b6e6:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b6ec:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b6f3:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b6fa:	0f 85 bd 00 00 00    	jne    c001b7bd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b700:	83 ec 0c             	sub    esp,0xc
c001b703:	68 14 01 00 00       	push   0x114
c001b708:	e8 e6 c3 fe ff       	call   c0007af3 <malloc>
c001b70d:	83 c4 0c             	add    esp,0xc
c001b710:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b716:	68 a5 32 02 c0       	push   0xc00232a5
c001b71b:	50                   	push   eax
c001b71c:	89 c3                	mov    ebx,eax
c001b71e:	e8 1f 04 ff ff       	call   c000bb42 <File::File(char const*, Process*)>
c001b723:	83 c4 10             	add    esp,0x10
c001b726:	85 db                	test   ebx,ebx
c001b728:	0f 84 6b 02 00 00    	je     c001b999 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b72e:	57                   	push   edi
c001b72f:	57                   	push   edi
c001b730:	6a 01                	push   0x1
c001b732:	53                   	push   ebx
c001b733:	e8 28 04 ff ff       	call   c000bb60 <File::open(FileOpenMode)>
c001b738:	83 c4 10             	add    esp,0x10
c001b73b:	85 c0                	test   eax,eax
c001b73d:	0f 85 56 02 00 00    	jne    c001b999 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b743:	52                   	push   edx
c001b744:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b748:	50                   	push   eax
c001b749:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b74d:	50                   	push   eax
c001b74e:	53                   	push   ebx
c001b74f:	e8 0e 07 ff ff       	call   c000be62 <File::stat(unsigned long long*, bool*)>
c001b754:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b758:	40                   	inc    eax
c001b759:	89 04 24             	mov    DWORD PTR [esp],eax
c001b75c:	e8 92 c3 fe ff       	call   c0007af3 <malloc>
c001b761:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b765:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b769:	59                   	pop    ecx
c001b76a:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b76f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b771:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b775:	51                   	push   ecx
c001b776:	50                   	push   eax
c001b777:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b77b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b77f:	53                   	push   ebx
c001b780:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b783:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b787:	83 c4 20             	add    esp,0x20
c001b78a:	89 c8                	mov    eax,ecx
c001b78c:	99                   	cdq    
c001b78d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b791:	0f 85 02 02 00 00    	jne    c001b999 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b797:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b79b:	0f 85 f8 01 00 00    	jne    c001b999 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b7a1:	83 ec 0c             	sub    esp,0xc
c001b7a4:	53                   	push   ebx
c001b7a5:	e8 14 04 ff ff       	call   c000bbbe <File::close()>
c001b7aa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b7ae:	83 c4 10             	add    esp,0x10
c001b7b1:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b7b8:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b7bd:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b7c5:	31 c9                	xor    ecx,ecx
c001b7c7:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b7ce:	8b 2d a4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0a4
c001b7d4:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b7db:	8b 15 a8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a8
c001b7e1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b7e6:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b7ee:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b7f3:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b7fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b7ff:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b807:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b80b:	39 cd                	cmp    ebp,ecx
c001b80d:	0f 8e 86 01 00 00    	jle    c001b999 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b813:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b816:	d4 40                	aam    0x40
c001b818:	d5 39                	aad    0x39
c001b81a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b81e:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b822:	d4 40                	aam    0x40
c001b824:	d5 39                	aad    0x39
c001b826:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b82a:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b82e:	d4 40                	aam    0x40
c001b830:	d5 39                	aad    0x39
c001b832:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b836:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b83a:	d4 40                	aam    0x40
c001b83c:	d5 39                	aad    0x39
c001b83e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b842:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b846:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b84a:	3c 56                	cmp    al,0x56
c001b84c:	74 47                	je     c001b895 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b84e:	d4 40                	aam    0x40
c001b850:	d5 39                	aad    0x39
c001b852:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b855:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b859:	0f b6 db             	movzx  ebx,bl
c001b85c:	c1 e3 04             	shl    ebx,0x4
c001b85f:	d4 40                	aam    0x40
c001b861:	d5 39                	aad    0x39
c001b863:	83 e8 30             	sub    eax,0x30
c001b866:	0f b6 c0             	movzx  eax,al
c001b869:	09 c3                	or     ebx,eax
c001b86b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b86f:	c1 e3 04             	shl    ebx,0x4
c001b872:	d4 40                	aam    0x40
c001b874:	d5 39                	aad    0x39
c001b876:	83 e8 30             	sub    eax,0x30
c001b879:	0f b6 c0             	movzx  eax,al
c001b87c:	09 c3                	or     ebx,eax
c001b87e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b882:	c1 e3 04             	shl    ebx,0x4
c001b885:	d4 40                	aam    0x40
c001b887:	d5 39                	aad    0x39
c001b889:	83 e8 30             	sub    eax,0x30
c001b88c:	0f b6 c0             	movzx  eax,al
c001b88f:	09 c3                	or     ebx,eax
c001b891:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b895:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b899:	80 fb 58             	cmp    bl,0x58
c001b89c:	74 49                	je     c001b8e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b89e:	88 d8                	mov    al,bl
c001b8a0:	d4 40                	aam    0x40
c001b8a2:	d5 39                	aad    0x39
c001b8a4:	83 e8 30             	sub    eax,0x30
c001b8a7:	0f b6 f8             	movzx  edi,al
c001b8aa:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b8ae:	c1 e7 04             	shl    edi,0x4
c001b8b1:	d4 40                	aam    0x40
c001b8b3:	d5 39                	aad    0x39
c001b8b5:	83 e8 30             	sub    eax,0x30
c001b8b8:	0f b6 c0             	movzx  eax,al
c001b8bb:	09 c7                	or     edi,eax
c001b8bd:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b8c1:	c1 e7 04             	shl    edi,0x4
c001b8c4:	d4 40                	aam    0x40
c001b8c6:	d5 39                	aad    0x39
c001b8c8:	83 e8 30             	sub    eax,0x30
c001b8cb:	0f b6 c0             	movzx  eax,al
c001b8ce:	09 c7                	or     edi,eax
c001b8d0:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b8d4:	c1 e7 04             	shl    edi,0x4
c001b8d7:	d4 40                	aam    0x40
c001b8d9:	d5 39                	aad    0x39
c001b8db:	83 e8 30             	sub    eax,0x30
c001b8de:	0f b6 c0             	movzx  eax,al
c001b8e1:	09 c7                	or     edi,eax
c001b8e3:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b8e7:	8d 41 10             	lea    eax,[ecx+0x10]
c001b8ea:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b8ee:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b8f2:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b8f6:	83 f9 0a             	cmp    ecx,0xa
c001b8f9:	74 07                	je     c001b902 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b8fb:	47                   	inc    edi
c001b8fc:	39 c5                	cmp    ebp,eax
c001b8fe:	75 16                	jne    c001b916 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b900:	89 e8                	mov    eax,ebp
c001b902:	83 f9 0a             	cmp    ecx,0xa
c001b905:	0f 94 c1             	sete   cl
c001b908:	0f b6 c9             	movzx  ecx,cl
c001b90b:	01 c1                	add    ecx,eax
c001b90d:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b912:	75 0f                	jne    c001b923 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b914:	eb 1c                	jmp    c001b932 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b916:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b919:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b91d:	40                   	inc    eax
c001b91e:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b921:	eb cb                	jmp    c001b8ee <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b923:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b927:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b92c:	0f 85 d9 fe ff ff    	jne    c001b80b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b932:	80 fb 58             	cmp    bl,0x58
c001b935:	74 10                	je     c001b947 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b937:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b93c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b941:	0f 85 c4 fe ff ff    	jne    c001b80b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b947:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b94b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b94f:	83 e8 30             	sub    eax,0x30
c001b952:	c1 e0 04             	shl    eax,0x4
c001b955:	83 eb 30             	sub    ebx,0x30
c001b958:	09 d8                	or     eax,ebx
c001b95a:	0f b6 c0             	movzx  eax,al
c001b95d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b961:	0f 85 a4 fe ff ff    	jne    c001b80b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b96b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b96f:	83 e8 30             	sub    eax,0x30
c001b972:	c1 e0 04             	shl    eax,0x4
c001b975:	83 eb 30             	sub    ebx,0x30
c001b978:	09 d8                	or     eax,ebx
c001b97a:	0f b6 c0             	movzx  eax,al
c001b97d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b981:	0f 85 84 fe ff ff    	jne    c001b80b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b987:	50                   	push   eax
c001b988:	50                   	push   eax
c001b989:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b98d:	50                   	push   eax
c001b98e:	56                   	push   esi
c001b98f:	e8 bc 4c fe ff       	call   c0000650 <strcpy>
c001b994:	83 c4 10             	add    esp,0x10
c001b997:	eb 05                	jmp    c001b99e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b999:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b99c:	31 f6                	xor    esi,esi
c001b99e:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b9a4:	89 f0                	mov    eax,esi
c001b9a6:	5b                   	pop    ebx
c001b9a7:	5e                   	pop    esi
c001b9a8:	5f                   	pop    edi
c001b9a9:	5d                   	pop    ebp
c001b9aa:	c3                   	ret    
c001b9ab:	90                   	nop

c001b9ac <PCI::checkBus(unsigned char)>:
c001b9ac:	56                   	push   esi
c001b9ad:	53                   	push   ebx
c001b9ae:	31 db                	xor    ebx,ebx
c001b9b0:	51                   	push   ecx
c001b9b1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b9b6:	52                   	push   edx
c001b9b7:	53                   	push   ebx
c001b9b8:	43                   	inc    ebx
c001b9b9:	56                   	push   esi
c001b9ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9be:	e8 0f 03 00 00       	call   c001bcd2 <PCI::checkDevice(unsigned char, unsigned char)>
c001b9c3:	83 c4 10             	add    esp,0x10
c001b9c6:	83 fb 20             	cmp    ebx,0x20
c001b9c9:	75 eb                	jne    c001b9b6 <PCI::checkBus(unsigned char)+0xa>
c001b9cb:	58                   	pop    eax
c001b9cc:	5b                   	pop    ebx
c001b9cd:	5e                   	pop    esi
c001b9ce:	c3                   	ret    
c001b9cf:	90                   	nop

c001b9d0 <PCI::foundDevice(PCIDeviceInfo)>:
c001b9d0:	55                   	push   ebp
c001b9d1:	57                   	push   edi
c001b9d2:	56                   	push   esi
c001b9d3:	53                   	push   ebx
c001b9d4:	83 ec 1c             	sub    esp,0x1c
c001b9d7:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b9dc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b9e0:	3d ff ff 00 00       	cmp    eax,0xffff
c001b9e5:	0f 84 63 01 00 00    	je     c001bb4e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b9eb:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b9f0:	66 3d 06 04          	cmp    ax,0x406
c001b9f4:	75 2c                	jne    c001ba22 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b9f6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b9fb:	50                   	push   eax
c001b9fc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001ba01:	50                   	push   eax
c001ba02:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001ba07:	50                   	push   eax
c001ba08:	53                   	push   ebx
c001ba09:	e8 62 fb ff ff       	call   c001b570 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ba0e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ba12:	0f b6 c0             	movzx  eax,al
c001ba15:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ba19:	83 c4 2c             	add    esp,0x2c
c001ba1c:	5b                   	pop    ebx
c001ba1d:	5e                   	pop    esi
c001ba1e:	5f                   	pop    edi
c001ba1f:	5d                   	pop    ebp
c001ba20:	eb 8a                	jmp    c001b9ac <PCI::checkBus(unsigned char)>
c001ba22:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001ba27:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001ba2d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ba31:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ba35:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ba39:	85 d2                	test   edx,edx
c001ba3b:	74 34                	je     c001ba71 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001ba3d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ba40:	85 c9                	test   ecx,ecx
c001ba42:	74 29                	je     c001ba6d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ba44:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001ba4a:	31 f5                	xor    ebp,esi
c001ba4c:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001ba52:	75 19                	jne    c001ba6d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ba54:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001ba5a:	75 11                	jne    c001ba6d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ba5c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001ba63:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001ba67:	0f 84 e1 00 00 00    	je     c001bb4e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001ba6d:	8b 12                	mov    edx,DWORD PTR [edx]
c001ba6f:	eb c8                	jmp    c001ba39 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001ba71:	3d 01 06 00 00       	cmp    eax,0x601
c001ba76:	75 19                	jne    c001ba91 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001ba78:	83 ec 0c             	sub    esp,0xc
c001ba7b:	68 64 01 00 00       	push   0x164
c001ba80:	e8 6e c0 fe ff       	call   c0007af3 <malloc>
c001ba85:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba88:	89 c5                	mov    ebp,eax
c001ba8a:	e8 ab 0e 00 00       	call   c001c93a <SATABus::SATABus()>
c001ba8f:	eb 1e                	jmp    c001baaf <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001ba91:	3d 01 01 00 00       	cmp    eax,0x101
c001ba96:	75 62                	jne    c001bafa <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001ba98:	83 ec 0c             	sub    esp,0xc
c001ba9b:	68 70 02 00 00       	push   0x270
c001baa0:	e8 4e c0 fe ff       	call   c0007af3 <malloc>
c001baa5:	89 04 24             	mov    DWORD PTR [esp],eax
c001baa8:	89 c5                	mov    ebp,eax
c001baaa:	e8 f3 02 00 00       	call   c001bda2 <IDE::IDE()>
c001baaf:	58                   	pop    eax
c001bab0:	5a                   	pop    edx
c001bab1:	55                   	push   ebp
c001bab2:	53                   	push   ebx
c001bab3:	e8 08 0f ff ff       	call   c000c9c0 <Device::addChild(Device*)>
c001bab8:	83 ec 1c             	sub    esp,0x1c
c001babb:	b9 09 00 00 00       	mov    ecx,0x9
c001bac0:	fc                   	cld    
c001bac1:	8d 74 24 60          	lea    esi,[esp+0x60]
c001bac5:	89 e7                	mov    edi,esp
c001bac7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bac9:	55                   	push   ebp
c001baca:	e8 37 0e ff ff       	call   c000c906 <Device::preOpenPCI(PCIDeviceInfo)>
c001bacf:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bad2:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bad6:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bade:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bae6:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001baee:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001baf1:	83 c4 4c             	add    esp,0x4c
c001baf4:	5b                   	pop    ebx
c001baf5:	5e                   	pop    esi
c001baf6:	5f                   	pop    edi
c001baf7:	5d                   	pop    ebp
c001baf8:	ff e0                	jmp    eax
c001bafa:	83 ec 0c             	sub    esp,0xc
c001bafd:	68 58 01 00 00       	push   0x158
c001bb02:	e8 ec bf fe ff       	call   c0007af3 <malloc>
c001bb07:	5a                   	pop    edx
c001bb08:	59                   	pop    ecx
c001bb09:	68 be 32 02 c0       	push   0xc00232be
c001bb0e:	50                   	push   eax
c001bb0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bb13:	e8 46 11 ff ff       	call   c000cc5e <DriverlessDevice::DriverlessDevice(char const*)>
c001bb18:	5e                   	pop    esi
c001bb19:	5f                   	pop    edi
c001bb1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb1e:	50                   	push   eax
c001bb1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb23:	53                   	push   ebx
c001bb24:	e8 97 0e ff ff       	call   c000c9c0 <Device::addChild(Device*)>
c001bb29:	83 c4 10             	add    esp,0x10
c001bb2c:	b9 09 00 00 00       	mov    ecx,0x9
c001bb31:	fc                   	cld    
c001bb32:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bb36:	89 fe                	mov    esi,edi
c001bb38:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bb42:	83 c4 1c             	add    esp,0x1c
c001bb45:	5b                   	pop    ebx
c001bb46:	5e                   	pop    esi
c001bb47:	5f                   	pop    edi
c001bb48:	5d                   	pop    ebp
c001bb49:	e9 b8 0d ff ff       	jmp    c000c906 <Device::preOpenPCI(PCIDeviceInfo)>
c001bb4e:	83 c4 1c             	add    esp,0x1c
c001bb51:	5b                   	pop    ebx
c001bb52:	5e                   	pop    esi
c001bb53:	5f                   	pop    edi
c001bb54:	5d                   	pop    ebp
c001bb55:	c3                   	ret    

c001bb56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bb56:	55                   	push   ebp
c001bb57:	57                   	push   edi
c001bb58:	56                   	push   esi
c001bb59:	53                   	push   ebx
c001bb5a:	83 ec 68             	sub    esp,0x68
c001bb5d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bb64:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bb68:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bb6c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bb73:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bb78:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb7c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bb83:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bb88:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bb8c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bb91:	6a 0c                	push   0xc
c001bb93:	57                   	push   edi
c001bb94:	53                   	push   ebx
c001bb95:	56                   	push   esi
c001bb96:	55                   	push   ebp
c001bb97:	e8 24 f8 ff ff       	call   c001b3c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb9c:	83 c4 20             	add    esp,0x20
c001bb9f:	57                   	push   edi
c001bba0:	53                   	push   ebx
c001bba1:	56                   	push   esi
c001bba2:	55                   	push   ebp
c001bba3:	e8 0e f9 ff ff       	call   c001b4b6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bba8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bbad:	57                   	push   edi
c001bbae:	53                   	push   ebx
c001bbaf:	56                   	push   esi
c001bbb0:	55                   	push   ebp
c001bbb1:	e8 96 f9 ff ff       	call   c001b54c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bbb6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bbba:	83 c4 14             	add    esp,0x14
c001bbbd:	6a 3c                	push   0x3c
c001bbbf:	57                   	push   edi
c001bbc0:	53                   	push   ebx
c001bbc1:	56                   	push   esi
c001bbc2:	55                   	push   ebp
c001bbc3:	e8 f8 f7 ff ff       	call   c001b3c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbc8:	0f b6 c4             	movzx  eax,ah
c001bbcb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bbcf:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bbd3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bbd7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bbdc:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bbe2:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bbe8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bbec:	83 c4 20             	add    esp,0x20
c001bbef:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bbf4:	74 30                	je     c001bc26 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bbf6:	31 c0                	xor    eax,eax
c001bbf8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bbfc:	7e 28                	jle    c001bc26 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bbfe:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bc06:	39 cb                	cmp    ebx,ecx
c001bc08:	75 19                	jne    c001bc23 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc0a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bc12:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bc16:	75 0b                	jne    c001bc23 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc18:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bc1f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bc23:	40                   	inc    eax
c001bc24:	eb d2                	jmp    c001bbf8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bc26:	31 d2                	xor    edx,edx
c001bc28:	83 ec 0c             	sub    esp,0xc
c001bc2b:	57                   	push   edi
c001bc2c:	53                   	push   ebx
c001bc2d:	56                   	push   esi
c001bc2e:	52                   	push   edx
c001bc2f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bc33:	55                   	push   ebp
c001bc34:	e8 5f f9 ff ff       	call   c001b598 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc39:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bc3d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bc41:	42                   	inc    edx
c001bc42:	83 c4 20             	add    esp,0x20
c001bc45:	83 fa 06             	cmp    edx,0x6
c001bc48:	75 de                	jne    c001bc28 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bc4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc4e:	83 ec 0c             	sub    esp,0xc
c001bc51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc55:	c1 e2 08             	shl    edx,0x8
c001bc58:	0f b6 c4             	movzx  eax,ah
c001bc5b:	09 d0                	or     eax,edx
c001bc5d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bc62:	6a 02                	push   0x2
c001bc64:	57                   	push   edi
c001bc65:	53                   	push   ebx
c001bc66:	56                   	push   esi
c001bc67:	55                   	push   ebp
c001bc68:	e8 53 f7 ff ff       	call   c001b3c0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc6d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bc72:	83 c4 20             	add    esp,0x20
c001bc75:	57                   	push   edi
c001bc76:	53                   	push   ebx
c001bc77:	56                   	push   esi
c001bc78:	55                   	push   ebp
c001bc79:	e8 82 f8 ff ff       	call   c001b500 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bc7e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bc82:	57                   	push   edi
c001bc83:	53                   	push   ebx
c001bc84:	56                   	push   esi
c001bc85:	55                   	push   ebp
c001bc86:	e8 df f7 ff ff       	call   c001b46a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc8b:	b9 09 00 00 00       	mov    ecx,0x9
c001bc90:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bc95:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bc99:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bc9d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bca1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bca5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bca9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bcad:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bcb1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bcb5:	83 ec 0c             	sub    esp,0xc
c001bcb8:	fc                   	cld    
c001bcb9:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bcbd:	89 e7                	mov    edi,esp
c001bcbf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bcc1:	55                   	push   ebp
c001bcc2:	e8 09 fd ff ff       	call   c001b9d0 <PCI::foundDevice(PCIDeviceInfo)>
c001bcc7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bccd:	5b                   	pop    ebx
c001bcce:	5e                   	pop    esi
c001bccf:	5f                   	pop    edi
c001bcd0:	5d                   	pop    ebp
c001bcd1:	c3                   	ret    

c001bcd2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bcd2:	55                   	push   ebp
c001bcd3:	57                   	push   edi
c001bcd4:	56                   	push   esi
c001bcd5:	53                   	push   ebx
c001bcd6:	83 ec 0c             	sub    esp,0xc
c001bcd9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bcde:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bce3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bce7:	6a 00                	push   0x0
c001bce9:	56                   	push   esi
c001bcea:	57                   	push   edi
c001bceb:	55                   	push   ebp
c001bcec:	e8 79 f7 ff ff       	call   c001b46a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcf1:	6a 00                	push   0x0
c001bcf3:	56                   	push   esi
c001bcf4:	57                   	push   edi
c001bcf5:	55                   	push   ebp
c001bcf6:	e8 5b fe ff ff       	call   c001bb56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bcfb:	83 c4 20             	add    esp,0x20
c001bcfe:	6a 00                	push   0x0
c001bd00:	56                   	push   esi
c001bd01:	57                   	push   edi
c001bd02:	55                   	push   ebp
c001bd03:	e8 86 f7 ff ff       	call   c001b48e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd08:	83 c4 10             	add    esp,0x10
c001bd0b:	a8 80                	test   al,0x80
c001bd0d:	74 2d                	je     c001bd3c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bd0f:	bb 01 00 00 00       	mov    ebx,0x1
c001bd14:	53                   	push   ebx
c001bd15:	56                   	push   esi
c001bd16:	57                   	push   edi
c001bd17:	55                   	push   ebp
c001bd18:	e8 4d f7 ff ff       	call   c001b46a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd1d:	83 c4 10             	add    esp,0x10
c001bd20:	0f b7 c0             	movzx  eax,ax
c001bd23:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd28:	74 0c                	je     c001bd36 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bd2a:	53                   	push   ebx
c001bd2b:	56                   	push   esi
c001bd2c:	57                   	push   edi
c001bd2d:	55                   	push   ebp
c001bd2e:	e8 23 fe ff ff       	call   c001bb56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd33:	83 c4 10             	add    esp,0x10
c001bd36:	43                   	inc    ebx
c001bd37:	83 fb 08             	cmp    ebx,0x8
c001bd3a:	75 d8                	jne    c001bd14 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bd3c:	83 c4 0c             	add    esp,0xc
c001bd3f:	5b                   	pop    ebx
c001bd40:	5e                   	pop    esi
c001bd41:	5f                   	pop    edi
c001bd42:	5d                   	pop    ebp
c001bd43:	c3                   	ret    

c001bd44 <PCI::detect()>:
c001bd44:	56                   	push   esi
c001bd45:	53                   	push   ebx
c001bd46:	53                   	push   ebx
c001bd47:	31 db                	xor    ebx,ebx
c001bd49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd4d:	6a 00                	push   0x0
c001bd4f:	6a 00                	push   0x0
c001bd51:	6a 00                	push   0x0
c001bd53:	56                   	push   esi
c001bd54:	e8 35 f7 ff ff       	call   c001b48e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd59:	83 c4 10             	add    esp,0x10
c001bd5c:	a8 80                	test   al,0x80
c001bd5e:	75 21                	jne    c001bd81 <PCI::detect()+0x3d>
c001bd60:	51                   	push   ecx
c001bd61:	51                   	push   ecx
c001bd62:	6a 00                	push   0x0
c001bd64:	56                   	push   esi
c001bd65:	e8 42 fc ff ff       	call   c001b9ac <PCI::checkBus(unsigned char)>
c001bd6a:	83 c4 10             	add    esp,0x10
c001bd6d:	eb 2a                	jmp    c001bd99 <PCI::detect()+0x55>
c001bd6f:	52                   	push   edx
c001bd70:	52                   	push   edx
c001bd71:	53                   	push   ebx
c001bd72:	43                   	inc    ebx
c001bd73:	56                   	push   esi
c001bd74:	e8 33 fc ff ff       	call   c001b9ac <PCI::checkBus(unsigned char)>
c001bd79:	83 c4 10             	add    esp,0x10
c001bd7c:	83 fb 08             	cmp    ebx,0x8
c001bd7f:	74 18                	je     c001bd99 <PCI::detect()+0x55>
c001bd81:	53                   	push   ebx
c001bd82:	6a 00                	push   0x0
c001bd84:	6a 00                	push   0x0
c001bd86:	56                   	push   esi
c001bd87:	e8 de f6 ff ff       	call   c001b46a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd8c:	83 c4 10             	add    esp,0x10
c001bd8f:	0f b7 c0             	movzx  eax,ax
c001bd92:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd97:	74 d6                	je     c001bd6f <PCI::detect()+0x2b>
c001bd99:	58                   	pop    eax
c001bd9a:	5b                   	pop    ebx
c001bd9b:	5e                   	pop    esi
c001bd9c:	c3                   	ret    
c001bd9d:	90                   	nop

c001bd9e <IDE::close(int, int, void*)>:
c001bd9e:	83 c8 ff             	or     eax,0xffffffff
c001bda1:	c3                   	ret    

c001bda2 <IDE::IDE()>:
c001bda2:	83 ec 0c             	sub    esp,0xc
c001bda5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bda9:	83 ec 08             	sub    esp,0x8
c001bdac:	68 04 33 02 c0       	push   0xc0023304
c001bdb1:	50                   	push   eax
c001bdb2:	e8 4d 0f ff ff       	call   c000cd04 <HardDiskController::HardDiskController(char const*)>
c001bdb7:	83 c4 10             	add    esp,0x10
c001bdba:	ba 94 33 02 c0       	mov    edx,0xc0023394
c001bdbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdc3:	89 10                	mov    DWORD PTR [eax],edx
c001bdc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdc9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bdd0:	90                   	nop
c001bdd1:	83 c4 0c             	add    esp,0xc
c001bdd4:	c3                   	ret    
c001bdd5:	90                   	nop

c001bdd6 <IDE::prepareInterrupt(unsigned char)>:
c001bdd6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bddb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bddf:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bde7:	c3                   	ret    

c001bde8 <selectDrive(unsigned char, unsigned char)>:
c001bde8:	c3                   	ret    
c001bde9:	90                   	nop

c001bdea <IDE::getBase(unsigned char)>:
c001bdea:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bdef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdf3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bdfb:	c3                   	ret    

c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bdfc:	55                   	push   ebp
c001bdfd:	57                   	push   edi
c001bdfe:	56                   	push   esi
c001bdff:	53                   	push   ebx
c001be00:	83 ec 1c             	sub    esp,0x1c
c001be03:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be07:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001be0b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001be0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001be13:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001be16:	80 f9 03             	cmp    cl,0x3
c001be19:	77 4f                	ja     c001be6a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001be1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be1f:	0f b6 f2             	movzx  esi,dl
c001be22:	0f b6 db             	movzx  ebx,bl
c001be25:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001be28:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001be2d:	80 ca 80             	or     dl,0x80
c001be30:	52                   	push   edx
c001be31:	6a 0c                	push   0xc
c001be33:	56                   	push   esi
c001be34:	57                   	push   edi
c001be35:	e8 c2 ff ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be3a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001be3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be43:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001be47:	ee                   	out    dx,al
c001be48:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001be4d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001be51:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001be55:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be5d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be61:	83 c4 2c             	add    esp,0x2c
c001be64:	5b                   	pop    ebx
c001be65:	5e                   	pop    esi
c001be66:	5f                   	pop    edi
c001be67:	5d                   	pop    ebp
c001be68:	eb 92                	jmp    c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be6a:	0f b6 cb             	movzx  ecx,bl
c001be6d:	83 f9 07             	cmp    ecx,0x7
c001be70:	77 12                	ja     c001be84 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001be72:	0f b6 d2             	movzx  edx,dl
c001be75:	0f b6 db             	movzx  ebx,bl
c001be78:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001be80:	01 da                	add    edx,ebx
c001be82:	eb 2f                	jmp    c001beb3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be84:	83 f9 0d             	cmp    ecx,0xd
c001be87:	77 13                	ja     c001be9c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001be89:	0f b6 d2             	movzx  edx,dl
c001be8c:	0f b6 db             	movzx  ebx,bl
c001be8f:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001be96:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001be9a:	eb 17                	jmp    c001beb3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be9c:	83 f9 15             	cmp    ecx,0x15
c001be9f:	77 13                	ja     c001beb4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bea1:	0f b6 d2             	movzx  edx,dl
c001bea4:	0f b6 db             	movzx  ebx,bl
c001bea7:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001beaf:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001beb3:	ee                   	out    dx,al
c001beb4:	83 c4 1c             	add    esp,0x1c
c001beb7:	5b                   	pop    ebx
c001beb8:	5e                   	pop    esi
c001beb9:	5f                   	pop    edi
c001beba:	5d                   	pop    ebp
c001bebb:	c3                   	ret    

c001bebc <IDE::read(unsigned char, unsigned char)>:
c001bebc:	57                   	push   edi
c001bebd:	56                   	push   esi
c001bebe:	53                   	push   ebx
c001bebf:	83 ec 10             	sub    esp,0x10
c001bec2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bec6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001beca:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bece:	8d 42 f8             	lea    eax,[edx-0x8]
c001bed1:	3c 03                	cmp    al,0x3
c001bed3:	77 48                	ja     c001bf1d <IDE::read(unsigned char, unsigned char)+0x61>
c001bed5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bed9:	0f b6 f1             	movzx  esi,cl
c001bedc:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001bedf:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001bee4:	0c 80                	or     al,0x80
c001bee6:	50                   	push   eax
c001bee7:	6a 0c                	push   0xc
c001bee9:	56                   	push   esi
c001beea:	53                   	push   ebx
c001beeb:	e8 0c ff ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bef0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bef4:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001bef9:	0f b6 d2             	movzx  edx,dl
c001befc:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bf00:	ec                   	in     al,dx
c001bf01:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bf05:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001bf0a:	52                   	push   edx
c001bf0b:	6a 0c                	push   0xc
c001bf0d:	56                   	push   esi
c001bf0e:	53                   	push   ebx
c001bf0f:	e8 e8 fe ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf14:	83 c4 20             	add    esp,0x20
c001bf17:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bf1b:	eb 4c                	jmp    c001bf69 <IDE::read(unsigned char, unsigned char)+0xad>
c001bf1d:	0f b6 f2             	movzx  esi,dl
c001bf20:	83 fe 07             	cmp    esi,0x7
c001bf23:	77 12                	ja     c001bf37 <IDE::read(unsigned char, unsigned char)+0x7b>
c001bf25:	0f b6 c9             	movzx  ecx,cl
c001bf28:	0f b6 d2             	movzx  edx,dl
c001bf2b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001bf33:	01 c2                	add    edx,eax
c001bf35:	eb 31                	jmp    c001bf68 <IDE::read(unsigned char, unsigned char)+0xac>
c001bf37:	83 fe 0d             	cmp    esi,0xd
c001bf3a:	77 13                	ja     c001bf4f <IDE::read(unsigned char, unsigned char)+0x93>
c001bf3c:	0f b6 c9             	movzx  ecx,cl
c001bf3f:	0f b6 d2             	movzx  edx,dl
c001bf42:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001bf49:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bf4d:	eb 19                	jmp    c001bf68 <IDE::read(unsigned char, unsigned char)+0xac>
c001bf4f:	31 c0                	xor    eax,eax
c001bf51:	83 fe 15             	cmp    esi,0x15
c001bf54:	77 13                	ja     c001bf69 <IDE::read(unsigned char, unsigned char)+0xad>
c001bf56:	0f b6 c9             	movzx  ecx,cl
c001bf59:	0f b6 d2             	movzx  edx,dl
c001bf5c:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001bf64:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf68:	ec                   	in     al,dx
c001bf69:	83 c4 10             	add    esp,0x10
c001bf6c:	5b                   	pop    ebx
c001bf6d:	5e                   	pop    esi
c001bf6e:	5f                   	pop    edi
c001bf6f:	c3                   	ret    

c001bf70 <IDE::waitInterrupt(unsigned char)>:
c001bf70:	55                   	push   ebp
c001bf71:	57                   	push   edi
c001bf72:	56                   	push   esi
c001bf73:	53                   	push   ebx
c001bf74:	31 db                	xor    ebx,ebx
c001bf76:	83 ec 0c             	sub    esp,0xc
c001bf79:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bf7d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bf82:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bf8a:	89 e8                	mov    eax,ebp
c001bf8c:	84 c0                	test   al,al
c001bf8e:	75 30                	jne    c001bfc0 <IDE::waitInterrupt(unsigned char)+0x50>
c001bf90:	50                   	push   eax
c001bf91:	6a 0c                	push   0xc
c001bf93:	56                   	push   esi
c001bf94:	57                   	push   edi
c001bf95:	e8 22 ff ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001bf9a:	83 c4 10             	add    esp,0x10
c001bf9d:	a8 01                	test   al,0x1
c001bf9f:	75 27                	jne    c001bfc8 <IDE::waitInterrupt(unsigned char)+0x58>
c001bfa1:	f6 c3 04             	test   bl,0x4
c001bfa4:	75 12                	jne    c001bfb8 <IDE::waitInterrupt(unsigned char)+0x48>
c001bfa6:	83 fb 32             	cmp    ebx,0x32
c001bfa9:	7e 0d                	jle    c001bfb8 <IDE::waitInterrupt(unsigned char)+0x48>
c001bfab:	83 ec 0c             	sub    esp,0xc
c001bfae:	6a 64                	push   0x64
c001bfb0:	e8 73 a4 ff ff       	call   c0016428 <milliTenthSleep(unsigned int)>
c001bfb5:	83 c4 10             	add    esp,0x10
c001bfb8:	83 fb 3c             	cmp    ebx,0x3c
c001bfbb:	74 0b                	je     c001bfc8 <IDE::waitInterrupt(unsigned char)+0x58>
c001bfbd:	43                   	inc    ebx
c001bfbe:	eb c2                	jmp    c001bf82 <IDE::waitInterrupt(unsigned char)+0x12>
c001bfc0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bfc8:	83 c4 0c             	add    esp,0xc
c001bfcb:	89 e8                	mov    eax,ebp
c001bfcd:	5b                   	pop    ebx
c001bfce:	5e                   	pop    esi
c001bfcf:	5f                   	pop    edi
c001bfd0:	5d                   	pop    ebp
c001bfd1:	c3                   	ret    

c001bfd2 <ideChannel0IRQHandler(regs*, void*)>:
c001bfd2:	83 ec 10             	sub    esp,0x10
c001bfd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfd9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bfe0:	6a 07                	push   0x7
c001bfe2:	6a 00                	push   0x0
c001bfe4:	50                   	push   eax
c001bfe5:	e8 d2 fe ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001bfea:	83 c4 1c             	add    esp,0x1c
c001bfed:	c3                   	ret    

c001bfee <ideChannel1IRQHandler(regs*, void*)>:
c001bfee:	83 ec 10             	sub    esp,0x10
c001bff1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bff5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bffc:	6a 07                	push   0x7
c001bffe:	6a 01                	push   0x1
c001c000:	50                   	push   eax
c001c001:	e8 b6 fe ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c006:	83 c4 1c             	add    esp,0x1c
c001c009:	c3                   	ret    

c001c00a <IDE::enableIRQs(unsigned char, bool)>:
c001c00a:	57                   	push   edi
c001c00b:	b8 02 00 00 00       	mov    eax,0x2
c001c010:	56                   	push   esi
c001c011:	53                   	push   ebx
c001c012:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c017:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c01b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c01f:	74 02                	je     c001c023 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c021:	31 c0                	xor    eax,eax
c001c023:	0f b6 db             	movzx  ebx,bl
c001c026:	bf 04 00 00 00       	mov    edi,0x4
c001c02b:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c032:	50                   	push   eax
c001c033:	6a 0c                	push   0xc
c001c035:	53                   	push   ebx
c001c036:	56                   	push   esi
c001c037:	e8 c0 fd ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c03c:	83 c4 10             	add    esp,0x10
c001c03f:	50                   	push   eax
c001c040:	6a 0c                	push   0xc
c001c042:	53                   	push   ebx
c001c043:	56                   	push   esi
c001c044:	e8 73 fe ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c049:	83 c4 10             	add    esp,0x10
c001c04c:	4f                   	dec    edi
c001c04d:	75 f0                	jne    c001c03f <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c04f:	5b                   	pop    ebx
c001c050:	5e                   	pop    esi
c001c051:	5f                   	pop    edi
c001c052:	c3                   	ret    
c001c053:	90                   	nop

c001c054 <IDE::open(int, int, void*)>:
c001c054:	55                   	push   ebp
c001c055:	57                   	push   edi
c001c056:	56                   	push   esi
c001c057:	53                   	push   ebx
c001c058:	83 ec 1c             	sub    esp,0x1c
c001c05b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c05f:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c066:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c06f:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c078:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c07f:	0f 85 da 02 00 00    	jne    c001c35f <IDE::open(int, int, void*)+0x30b>
c001c085:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c08b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c08f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c093:	83 e0 7f             	and    eax,0x7f
c001c096:	83 f8 05             	cmp    eax,0x5
c001c099:	74 05                	je     c001c0a0 <IDE::open(int, int, void*)+0x4c>
c001c09b:	83 f8 0f             	cmp    eax,0xf
c001c09e:	75 32                	jne    c001c0d2 <IDE::open(int, int, void*)+0x7e>
c001c0a0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c0a6:	83 e0 fc             	and    eax,0xfffffffc
c001c0a9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c0b0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c0b6:	83 e0 fc             	and    eax,0xfffffffc
c001c0b9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c0c0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c0c6:	83 e0 fc             	and    eax,0xfffffffc
c001c0c9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c0d0:	eb 14                	jmp    c001c0e6 <IDE::open(int, int, void*)+0x92>
c001c0d2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c0dc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c0e6:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001c0ed:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c0f2:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c0f9:	89 fa                	mov    edx,edi
c001c0fb:	89 f1                	mov    ecx,esi
c001c0fd:	c1 e1 10             	shl    ecx,0x10
c001c100:	89 e8                	mov    eax,ebp
c001c102:	c1 e0 0b             	shl    eax,0xb
c001c105:	09 c1                	or     ecx,eax
c001c107:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c10e:	c1 e0 08             	shl    eax,0x8
c001c111:	09 c1                	or     ecx,eax
c001c113:	89 c8                	mov    eax,ecx
c001c115:	0d 08 00 00 80       	or     eax,0x80000008
c001c11a:	ef                   	out    dx,eax
c001c11b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c120:	ed                   	in     eax,dx
c001c121:	c1 e8 10             	shr    eax,0x10
c001c124:	3d ff ff 00 00       	cmp    eax,0xffff
c001c129:	0f 84 f9 00 00 00    	je     c001c228 <IDE::open(int, int, void*)+0x1d4>
c001c12f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c135:	89 fa                	mov    edx,edi
c001c137:	89 c8                	mov    eax,ecx
c001c139:	ef                   	out    dx,eax
c001c13a:	b0 fe                	mov    al,0xfe
c001c13c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c141:	ee                   	out    dx,al
c001c142:	89 c8                	mov    eax,ecx
c001c144:	89 fa                	mov    edx,edi
c001c146:	ef                   	out    dx,eax
c001c147:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c14c:	ed                   	in     eax,dx
c001c14d:	3c fe                	cmp    al,0xfe
c001c14f:	0f 85 a4 00 00 00    	jne    c001c1f9 <IDE::open(int, int, void*)+0x1a5>
c001c155:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c15b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c162:	74 30                	je     c001c194 <IDE::open(int, int, void*)+0x140>
c001c164:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c16a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c16e:	83 ec 0c             	sub    esp,0xc
c001c171:	40                   	inc    eax
c001c172:	0f b6 c0             	movzx  eax,al
c001c175:	50                   	push   eax
c001c176:	55                   	push   ebp
c001c177:	56                   	push   esi
c001c178:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c17e:	51                   	push   ecx
c001c17f:	e8 30 38 ff ff       	call   c000f9b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c184:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c189:	83 c4 1c             	add    esp,0x1c
c001c18c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c192:	eb 0a                	jmp    c001c19e <IDE::open(int, int, void*)+0x14a>
c001c194:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c19e:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c1a5:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001c1aa:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c1b1:	89 ea                	mov    edx,ebp
c001c1b3:	c1 e1 10             	shl    ecx,0x10
c001c1b6:	c1 e0 08             	shl    eax,0x8
c001c1b9:	09 c1                	or     ecx,eax
c001c1bb:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c1c2:	c1 e0 0b             	shl    eax,0xb
c001c1c5:	09 c1                	or     ecx,eax
c001c1c7:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c1cd:	89 c8                	mov    eax,ecx
c001c1cf:	ef                   	out    dx,eax
c001c1d0:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001c1d6:	be fc 0c 00 00       	mov    esi,0xcfc
c001c1db:	89 f2                	mov    edx,esi
c001c1dd:	89 f8                	mov    eax,edi
c001c1df:	ee                   	out    dx,al
c001c1e0:	89 c8                	mov    eax,ecx
c001c1e2:	89 ea                	mov    edx,ebp
c001c1e4:	ef                   	out    dx,eax
c001c1e5:	89 f2                	mov    edx,esi
c001c1e7:	ed                   	in     eax,dx
c001c1e8:	0f b6 c0             	movzx  eax,al
c001c1eb:	39 f8                	cmp    eax,edi
c001c1ed:	74 49                	je     c001c238 <IDE::open(int, int, void*)+0x1e4>
c001c1ef:	83 ec 0c             	sub    esp,0xc
c001c1f2:	68 1c 33 02 c0       	push   0xc002331c
c001c1f7:	eb 37                	jmp    c001c230 <IDE::open(int, int, void*)+0x1dc>
c001c1f9:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c202:	75 1a                	jne    c001c21e <IDE::open(int, int, void*)+0x1ca>
c001c204:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c209:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c20e:	74 05                	je     c001c215 <IDE::open(int, int, void*)+0x1c1>
c001c210:	83 c0 80             	add    eax,0xffffff80
c001c213:	75 09                	jne    c001c21e <IDE::open(int, int, void*)+0x1ca>
c001c215:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c21c:	eb 1a                	jmp    c001c238 <IDE::open(int, int, void*)+0x1e4>
c001c21e:	83 ec 0c             	sub    esp,0xc
c001c221:	68 24 33 02 c0       	push   0xc0023324
c001c226:	eb 08                	jmp    c001c230 <IDE::open(int, int, void*)+0x1dc>
c001c228:	83 ec 0c             	sub    esp,0xc
c001c22b:	68 55 33 02 c0       	push   0xc0023355
c001c230:	e8 aa 53 ff ff       	call   c00115df <KePanic(char const*)>
c001c235:	83 c4 10             	add    esp,0x10
c001c238:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c23f:	74 1a                	je     c001c25b <IDE::open(int, int, void*)+0x207>
c001c241:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c247:	83 e0 fc             	and    eax,0xfffffffc
c001c24a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c251:	83 c0 08             	add    eax,0x8
c001c254:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c25b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c261:	89 c2                	mov    edx,eax
c001c263:	83 e2 0f             	and    edx,0xf
c001c266:	83 fa 08             	cmp    edx,0x8
c001c269:	75 0a                	jne    c001c275 <IDE::open(int, int, void*)+0x221>
c001c26b:	83 e8 02             	sub    eax,0x2
c001c26e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c275:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c27b:	89 c2                	mov    edx,eax
c001c27d:	83 e2 0f             	and    edx,0xf
c001c280:	83 fa 08             	cmp    edx,0x8
c001c283:	75 0a                	jne    c001c28f <IDE::open(int, int, void*)+0x23b>
c001c285:	83 e8 02             	sub    eax,0x2
c001c288:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c28f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c296:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c29d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2a0:	89 d0                	mov    eax,edx
c001c2a2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2a6:	8d 7a 01             	lea    edi,[edx+0x1]
c001c2a9:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c2ad:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c2b1:	83 e1 3f             	and    ecx,0x3f
c001c2b4:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c2b8:	89 f9                	mov    ecx,edi
c001c2ba:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c2c1:	8d 78 02             	lea    edi,[eax+0x2]
c001c2c4:	0f b6 c9             	movzx  ecx,cl
c001c2c7:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c2ca:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c2ce:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c2d2:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c2d6:	83 e2 3f             	and    edx,0x3f
c001c2d9:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c2dd:	89 f9                	mov    ecx,edi
c001c2df:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c2e5:	8d 78 03             	lea    edi,[eax+0x3]
c001c2e8:	0f b6 d1             	movzx  edx,cl
c001c2eb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2ee:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c2f2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2f6:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c2fa:	83 e1 3f             	and    ecx,0x3f
c001c2fd:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c301:	89 f9                	mov    ecx,edi
c001c303:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c309:	8d 78 04             	lea    edi,[eax+0x4]
c001c30c:	0f b6 c9             	movzx  ecx,cl
c001c30f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c312:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c316:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c31a:	89 fa                	mov    edx,edi
c001c31c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c322:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c326:	83 e2 3f             	and    edx,0x3f
c001c329:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c32d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c334:	66 85 f6             	test   si,si
c001c337:	74 65                	je     c001c39e <IDE::open(int, int, void*)+0x34a>
c001c339:	89 f9                	mov    ecx,edi
c001c33b:	83 c0 05             	add    eax,0x5
c001c33e:	0f b6 d1             	movzx  edx,cl
c001c341:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c344:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c348:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c34c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c352:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c356:	83 e0 3f             	and    eax,0x3f
c001c359:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c35d:	eb 3f                	jmp    c001c39e <IDE::open(int, int, void*)+0x34a>
c001c35f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c366:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c36c:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c373:	05 06 02 00 00       	add    eax,0x206
c001c378:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c37f:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c386:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c38d:	05 06 02 00 00       	add    eax,0x206
c001c392:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c399:	e9 bd fe ff ff       	jmp    c001c25b <IDE::open(int, int, void*)+0x207>
c001c39e:	50                   	push   eax
c001c39f:	50                   	push   eax
c001c3a0:	6a 00                	push   0x0
c001c3a2:	53                   	push   ebx
c001c3a3:	e8 2e fa ff ff       	call   c001bdd6 <IDE::prepareInterrupt(unsigned char)>
c001c3a8:	5a                   	pop    edx
c001c3a9:	59                   	pop    ecx
c001c3aa:	6a 01                	push   0x1
c001c3ac:	53                   	push   ebx
c001c3ad:	e8 24 fa ff ff       	call   c001bdd6 <IDE::prepareInterrupt(unsigned char)>
c001c3b2:	83 c4 0c             	add    esp,0xc
c001c3b5:	6a 00                	push   0x0
c001c3b7:	6a 00                	push   0x0
c001c3b9:	53                   	push   ebx
c001c3ba:	e8 4b fc ff ff       	call   c001c00a <IDE::enableIRQs(unsigned char, bool)>
c001c3bf:	83 c4 0c             	add    esp,0xc
c001c3c2:	6a 00                	push   0x0
c001c3c4:	6a 01                	push   0x1
c001c3c6:	53                   	push   ebx
c001c3c7:	e8 3e fc ff ff       	call   c001c00a <IDE::enableIRQs(unsigned char, bool)>
c001c3cc:	83 c4 10             	add    esp,0x10
c001c3cf:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c3d6:	74 34                	je     c001c40c <IDE::open(int, int, void*)+0x3b8>
c001c3d8:	83 ec 0c             	sub    esp,0xc
c001c3db:	53                   	push   ebx
c001c3dc:	6a 01                	push   0x1
c001c3de:	68 d2 bf 01 c0       	push   0xc001bfd2
c001c3e3:	6a 0e                	push   0xe
c001c3e5:	53                   	push   ebx
c001c3e6:	e8 81 05 ff ff       	call   c000c96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3eb:	83 c4 14             	add    esp,0x14
c001c3ee:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c3f4:	53                   	push   ebx
c001c3f5:	6a 01                	push   0x1
c001c3f7:	68 ee bf 01 c0       	push   0xc001bfee
c001c3fc:	6a 0f                	push   0xf
c001c3fe:	53                   	push   ebx
c001c3ff:	e8 68 05 ff ff       	call   c000c96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c404:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c40a:	eb 38                	jmp    c001c444 <IDE::open(int, int, void*)+0x3f0>
c001c40c:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c416:	83 ec 0c             	sub    esp,0xc
c001c419:	53                   	push   ebx
c001c41a:	6a 00                	push   0x0
c001c41c:	68 d2 bf 01 c0       	push   0xc001bfd2
c001c421:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c427:	53                   	push   ebx
c001c428:	e8 3f 05 ff ff       	call   c000c96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c42d:	83 c4 14             	add    esp,0x14
c001c430:	53                   	push   ebx
c001c431:	6a 00                	push   0x0
c001c433:	68 ee bf 01 c0       	push   0xc001bfee
c001c438:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c43e:	53                   	push   ebx
c001c43f:	e8 28 05 ff ff       	call   c000c96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c444:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c446:	83 c4 20             	add    esp,0x20
c001c449:	83 ec 0c             	sub    esp,0xc
c001c44c:	53                   	push   ebx
c001c44d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c450:	83 c4 0c             	add    esp,0xc
c001c453:	6a 07                	push   0x7
c001c455:	6a 00                	push   0x0
c001c457:	53                   	push   ebx
c001c458:	e8 5f fa ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c45d:	83 c4 0c             	add    esp,0xc
c001c460:	6a 07                	push   0x7
c001c462:	6a 01                	push   0x1
c001c464:	53                   	push   ebx
c001c465:	e8 52 fa ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c46a:	83 c4 0c             	add    esp,0xc
c001c46d:	6a 01                	push   0x1
c001c46f:	6a 00                	push   0x0
c001c471:	53                   	push   ebx
c001c472:	e8 93 fb ff ff       	call   c001c00a <IDE::enableIRQs(unsigned char, bool)>
c001c477:	83 c4 0c             	add    esp,0xc
c001c47a:	6a 01                	push   0x1
c001c47c:	6a 01                	push   0x1
c001c47e:	53                   	push   ebx
c001c47f:	e8 86 fb ff ff       	call   c001c00a <IDE::enableIRQs(unsigned char, bool)>
c001c484:	83 c4 2c             	add    esp,0x2c
c001c487:	31 c0                	xor    eax,eax
c001c489:	5b                   	pop    ebx
c001c48a:	5e                   	pop    esi
c001c48b:	5f                   	pop    edi
c001c48c:	5d                   	pop    ebp
c001c48d:	c3                   	ret    

c001c48e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c48e:	55                   	push   ebp
c001c48f:	57                   	push   edi
c001c490:	56                   	push   esi
c001c491:	53                   	push   ebx
c001c492:	83 ec 1c             	sub    esp,0x1c
c001c495:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c499:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c49d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c4a1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c4a5:	8d 42 f8             	lea    eax,[edx-0x8]
c001c4a8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c4ac:	3c 03                	cmp    al,0x3
c001c4ae:	77 5a                	ja     c001c50a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c4b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c4b4:	0f b6 db             	movzx  ebx,bl
c001c4b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c4bb:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c4be:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c4c3:	0c 80                	or     al,0x80
c001c4c5:	50                   	push   eax
c001c4c6:	6a 0c                	push   0xc
c001c4c8:	53                   	push   ebx
c001c4c9:	56                   	push   esi
c001c4ca:	e8 2d f9 ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c4d3:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c4d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c4dc:	0f b6 d2             	movzx  edx,dl
c001c4df:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c4e3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c4e5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c4ea:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c4ee:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c4f2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c4fa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c4fe:	83 c4 2c             	add    esp,0x2c
c001c501:	5b                   	pop    ebx
c001c502:	5e                   	pop    esi
c001c503:	5f                   	pop    edi
c001c504:	5d                   	pop    ebp
c001c505:	e9 f2 f8 ff ff       	jmp    c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c50a:	0f b6 c2             	movzx  eax,dl
c001c50d:	83 f8 07             	cmp    eax,0x7
c001c510:	77 12                	ja     c001c524 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c512:	0f b6 db             	movzx  ebx,bl
c001c515:	0f b6 c2             	movzx  eax,dl
c001c518:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c520:	01 c2                	add    edx,eax
c001c522:	eb 2f                	jmp    c001c553 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c524:	83 f8 0d             	cmp    eax,0xd
c001c527:	77 13                	ja     c001c53c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c529:	0f b6 db             	movzx  ebx,bl
c001c52c:	0f b6 d2             	movzx  edx,dl
c001c52f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c536:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c53a:	eb 17                	jmp    c001c553 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c53c:	83 f8 15             	cmp    eax,0x15
c001c53f:	77 14                	ja     c001c555 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c541:	0f b6 db             	movzx  ebx,bl
c001c544:	0f b6 d2             	movzx  edx,dl
c001c547:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c54f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c553:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c555:	83 c4 1c             	add    esp,0x1c
c001c558:	5b                   	pop    ebx
c001c559:	5e                   	pop    esi
c001c55a:	5f                   	pop    edi
c001c55b:	5d                   	pop    ebp
c001c55c:	c3                   	ret    
c001c55d:	90                   	nop

c001c55e <IDE::detect()>:
c001c55e:	55                   	push   ebp
c001c55f:	57                   	push   edi
c001c560:	56                   	push   esi
c001c561:	53                   	push   ebx
c001c562:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c568:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c56f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c576:	0f 85 9e 02 00 00    	jne    c001c81a <IDE::detect()+0x2bc>
c001c57c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c583:	31 f6                	xor    esi,esi
c001c585:	31 ff                	xor    edi,edi
c001c587:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c58f:	89 f8                	mov    eax,edi
c001c591:	c1 e0 06             	shl    eax,0x6
c001c594:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c59c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c5a0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c5a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5a8:	c1 e0 04             	shl    eax,0x4
c001c5ab:	83 c8 a0             	or     eax,0xffffffa0
c001c5ae:	0f b6 c0             	movzx  eax,al
c001c5b1:	50                   	push   eax
c001c5b2:	6a 06                	push   0x6
c001c5b4:	56                   	push   esi
c001c5b5:	53                   	push   ebx
c001c5b6:	e8 41 f8 ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5bb:	83 c4 0c             	add    esp,0xc
c001c5be:	6a 0c                	push   0xc
c001c5c0:	56                   	push   esi
c001c5c1:	53                   	push   ebx
c001c5c2:	e8 f5 f8 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c5c7:	83 c4 0c             	add    esp,0xc
c001c5ca:	6a 0c                	push   0xc
c001c5cc:	56                   	push   esi
c001c5cd:	53                   	push   ebx
c001c5ce:	e8 e9 f8 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c5d3:	83 c4 0c             	add    esp,0xc
c001c5d6:	6a 0c                	push   0xc
c001c5d8:	56                   	push   esi
c001c5d9:	53                   	push   ebx
c001c5da:	e8 dd f8 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c5df:	83 c4 0c             	add    esp,0xc
c001c5e2:	6a 0c                	push   0xc
c001c5e4:	56                   	push   esi
c001c5e5:	53                   	push   ebx
c001c5e6:	e8 d1 f8 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c5eb:	68 ec 00 00 00       	push   0xec
c001c5f0:	6a 07                	push   0x7
c001c5f2:	56                   	push   esi
c001c5f3:	53                   	push   ebx
c001c5f4:	e8 03 f8 ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5f9:	83 c4 1c             	add    esp,0x1c
c001c5fc:	6a 0c                	push   0xc
c001c5fe:	56                   	push   esi
c001c5ff:	53                   	push   ebx
c001c600:	e8 b7 f8 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c605:	83 c4 0c             	add    esp,0xc
c001c608:	6a 0c                	push   0xc
c001c60a:	56                   	push   esi
c001c60b:	53                   	push   ebx
c001c60c:	e8 ab f8 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c611:	83 c4 0c             	add    esp,0xc
c001c614:	6a 0c                	push   0xc
c001c616:	56                   	push   esi
c001c617:	53                   	push   ebx
c001c618:	e8 9f f8 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c61d:	83 c4 0c             	add    esp,0xc
c001c620:	6a 0c                	push   0xc
c001c622:	56                   	push   esi
c001c623:	53                   	push   ebx
c001c624:	e8 93 f8 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c629:	83 c4 0c             	add    esp,0xc
c001c62c:	6a 0c                	push   0xc
c001c62e:	56                   	push   esi
c001c62f:	53                   	push   ebx
c001c630:	e8 87 f8 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c635:	83 c4 10             	add    esp,0x10
c001c638:	84 c0                	test   al,al
c001c63a:	0f 84 61 01 00 00    	je     c001c7a1 <IDE::detect()+0x243>
c001c640:	31 ed                	xor    ebp,ebp
c001c642:	50                   	push   eax
c001c643:	6a 0c                	push   0xc
c001c645:	56                   	push   esi
c001c646:	53                   	push   ebx
c001c647:	e8 70 f8 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c64c:	83 c4 10             	add    esp,0x10
c001c64f:	a8 01                	test   al,0x1
c001c651:	0f 85 6b 01 00 00    	jne    c001c7c2 <IDE::detect()+0x264>
c001c657:	a8 80                	test   al,0x80
c001c659:	75 04                	jne    c001c65f <IDE::detect()+0x101>
c001c65b:	a8 08                	test   al,0x8
c001c65d:	75 23                	jne    c001c682 <IDE::detect()+0x124>
c001c65f:	45                   	inc    ebp
c001c660:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c666:	7e da                	jle    c001c642 <IDE::detect()+0xe4>
c001c668:	83 ec 0c             	sub    esp,0xc
c001c66b:	6a 32                	push   0x32
c001c66d:	e8 b6 9d ff ff       	call   c0016428 <milliTenthSleep(unsigned int)>
c001c672:	83 c4 10             	add    esp,0x10
c001c675:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c67b:	75 c5                	jne    c001c642 <IDE::detect()+0xe4>
c001c67d:	e9 40 01 00 00       	jmp    c001c7c2 <IDE::detect()+0x264>
c001c682:	31 c9                	xor    ecx,ecx
c001c684:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c688:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c68c:	83 ec 0c             	sub    esp,0xc
c001c68f:	68 80 00 00 00       	push   0x80
c001c694:	55                   	push   ebp
c001c695:	6a 00                	push   0x0
c001c697:	56                   	push   esi
c001c698:	53                   	push   ebx
c001c699:	e8 f0 fd ff ff       	call   c001c48e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c69e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c6a3:	89 f8                	mov    eax,edi
c001c6a5:	c1 e0 06             	shl    eax,0x6
c001c6a8:	01 d8                	add    eax,ebx
c001c6aa:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c6b1:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c6b8:	89 d1                	mov    ecx,edx
c001c6ba:	89 f2                	mov    edx,esi
c001c6bc:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c6c2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c6c6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c6cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c6d0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c6d7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c6df:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c6e6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c6ee:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c6f4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c6fb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c701:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c705:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c709:	83 c4 20             	add    esp,0x20
c001c70c:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c70f:	83 c5 02             	add    ebp,0x2
c001c712:	83 c0 02             	add    eax,0x2
c001c715:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c71b:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c71e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c724:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c728:	75 e2                	jne    c001c70c <IDE::detect()+0x1ae>
c001c72a:	89 f8                	mov    eax,edi
c001c72c:	c1 e0 06             	shl    eax,0x6
c001c72f:	01 d8                	add    eax,ebx
c001c731:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c738:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c73f:	c1 ea 09             	shr    edx,0x9
c001c742:	83 e2 01             	and    edx,0x1
c001c745:	80 e1 01             	and    cl,0x1
c001c748:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c74e:	75 22                	jne    c001c772 <IDE::detect()+0x214>
c001c750:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c757:	74 47                	je     c001c7a0 <IDE::detect()+0x242>
c001c759:	83 ec 0c             	sub    esp,0xc
c001c75c:	68 7c 01 00 00       	push   0x17c
c001c761:	e8 8d b3 fe ff       	call   c0007af3 <malloc>
c001c766:	89 04 24             	mov    DWORD PTR [esp],eax
c001c769:	89 c5                	mov    ebp,eax
c001c76b:	e8 16 05 00 00       	call   c001cc86 <ATA::ATA()>
c001c770:	eb 17                	jmp    c001c789 <IDE::detect()+0x22b>
c001c772:	83 ec 0c             	sub    esp,0xc
c001c775:	68 84 01 00 00       	push   0x184
c001c77a:	e8 74 b3 fe ff       	call   c0007af3 <malloc>
c001c77f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c782:	89 c5                	mov    ebp,eax
c001c784:	e8 6f 0e 00 00       	call   c001d5f8 <ATAPI::ATAPI()>
c001c789:	5a                   	pop    edx
c001c78a:	59                   	pop    ecx
c001c78b:	55                   	push   ebp
c001c78c:	53                   	push   ebx
c001c78d:	e8 2e 02 ff ff       	call   c000c9c0 <Device::addChild(Device*)>
c001c792:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c795:	53                   	push   ebx
c001c796:	57                   	push   edi
c001c797:	6a 00                	push   0x0
c001c799:	55                   	push   ebp
c001c79a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c79d:	83 c4 20             	add    esp,0x20
c001c7a0:	47                   	inc    edi
c001c7a1:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c7a6:	74 0d                	je     c001c7b5 <IDE::detect()+0x257>
c001c7a8:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c7b0:	e9 da fd ff ff       	jmp    c001c58f <IDE::detect()+0x31>
c001c7b5:	4e                   	dec    esi
c001c7b6:	74 62                	je     c001c81a <IDE::detect()+0x2bc>
c001c7b8:	be 01 00 00 00       	mov    esi,0x1
c001c7bd:	e9 c5 fd ff ff       	jmp    c001c587 <IDE::detect()+0x29>
c001c7c2:	50                   	push   eax
c001c7c3:	6a 04                	push   0x4
c001c7c5:	56                   	push   esi
c001c7c6:	53                   	push   ebx
c001c7c7:	e8 f0 f6 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c7cc:	83 c4 0c             	add    esp,0xc
c001c7cf:	6a 05                	push   0x5
c001c7d1:	56                   	push   esi
c001c7d2:	53                   	push   ebx
c001c7d3:	89 c5                	mov    ebp,eax
c001c7d5:	e8 e2 f6 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c7da:	89 e9                	mov    ecx,ebp
c001c7dc:	83 c4 10             	add    esp,0x10
c001c7df:	0f b6 e9             	movzx  ebp,cl
c001c7e2:	83 fd 14             	cmp    ebp,0x14
c001c7e5:	74 2d                	je     c001c814 <IDE::detect()+0x2b6>
c001c7e7:	83 fd 69             	cmp    ebp,0x69
c001c7ea:	75 b5                	jne    c001c7a1 <IDE::detect()+0x243>
c001c7ec:	3c 96                	cmp    al,0x96
c001c7ee:	75 b1                	jne    c001c7a1 <IDE::detect()+0x243>
c001c7f0:	68 a1 00 00 00       	push   0xa1
c001c7f5:	6a 07                	push   0x7
c001c7f7:	56                   	push   esi
c001c7f8:	53                   	push   ebx
c001c7f9:	e8 fe f5 ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7fe:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c805:	e8 1e 9c ff ff       	call   c0016428 <milliTenthSleep(unsigned int)>
c001c80a:	83 c4 10             	add    esp,0x10
c001c80d:	b1 01                	mov    cl,0x1
c001c80f:	e9 70 fe ff ff       	jmp    c001c684 <IDE::detect()+0x126>
c001c814:	3c eb                	cmp    al,0xeb
c001c816:	75 cf                	jne    c001c7e7 <IDE::detect()+0x289>
c001c818:	eb d6                	jmp    c001c7f0 <IDE::detect()+0x292>
c001c81a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c820:	5b                   	pop    ebx
c001c821:	5e                   	pop    esi
c001c822:	5f                   	pop    edi
c001c823:	5d                   	pop    ebp
c001c824:	c3                   	ret    
c001c825:	90                   	nop

c001c826 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c826:	55                   	push   ebp
c001c827:	57                   	push   edi
c001c828:	56                   	push   esi
c001c829:	53                   	push   ebx
c001c82a:	83 ec 1c             	sub    esp,0x1c
c001c82d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c831:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c835:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c839:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c83d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c841:	88 c3                	mov    bl,al
c001c843:	25 ff 00 00 00       	and    eax,0xff
c001c848:	0f 84 88 00 00 00    	je     c001c8d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c84e:	83 ec 0c             	sub    esp,0xc
c001c851:	89 c7                	mov    edi,eax
c001c853:	68 7f 33 02 c0       	push   0xc002337f
c001c858:	e8 cd e0 fe ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001c85d:	83 c4 10             	add    esp,0x10
c001c860:	83 ff 01             	cmp    edi,0x1
c001c863:	74 6b                	je     c001c8d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c865:	83 ff 02             	cmp    edi,0x2
c001c868:	75 58                	jne    c001c8c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c86a:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c86f:	50                   	push   eax
c001c870:	6a 01                	push   0x1
c001c872:	01 ff                	add    edi,edi
c001c874:	09 fe                	or     esi,edi
c001c876:	89 f0                	mov    eax,esi
c001c878:	0f b6 f0             	movzx  esi,al
c001c87b:	c1 e6 06             	shl    esi,0x6
c001c87e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c886:	50                   	push   eax
c001c887:	55                   	push   ebp
c001c888:	e8 2f f6 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c88d:	83 c4 10             	add    esp,0x10
c001c890:	a8 01                	test   al,0x1
c001c892:	74 02                	je     c001c896 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c894:	b3 07                	mov    bl,0x7
c001c896:	a8 02                	test   al,0x2
c001c898:	74 02                	je     c001c89c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c89a:	b3 03                	mov    bl,0x3
c001c89c:	a8 04                	test   al,0x4
c001c89e:	74 02                	je     c001c8a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c8a0:	b3 14                	mov    bl,0x14
c001c8a2:	a8 08                	test   al,0x8
c001c8a4:	74 02                	je     c001c8a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c8a6:	b3 03                	mov    bl,0x3
c001c8a8:	a8 10                	test   al,0x10
c001c8aa:	74 02                	je     c001c8ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c8ac:	b3 15                	mov    bl,0x15
c001c8ae:	a8 20                	test   al,0x20
c001c8b0:	74 02                	je     c001c8b4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c8b2:	b3 03                	mov    bl,0x3
c001c8b4:	a8 40                	test   al,0x40
c001c8b6:	74 02                	je     c001c8ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c8b8:	b3 16                	mov    bl,0x16
c001c8ba:	a8 80                	test   al,0x80
c001c8bc:	74 18                	je     c001c8d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8be:	b3 0d                	mov    bl,0xd
c001c8c0:	eb 14                	jmp    c001c8d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8c2:	83 ff 03             	cmp    edi,0x3
c001c8c5:	74 0d                	je     c001c8d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c8c7:	83 ff 04             	cmp    edi,0x4
c001c8ca:	75 0a                	jne    c001c8d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8cc:	b3 08                	mov    bl,0x8
c001c8ce:	eb 06                	jmp    c001c8d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8d0:	b3 13                	mov    bl,0x13
c001c8d2:	eb 02                	jmp    c001c8d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8d4:	b3 17                	mov    bl,0x17
c001c8d6:	83 c4 1c             	add    esp,0x1c
c001c8d9:	88 d8                	mov    al,bl
c001c8db:	5b                   	pop    ebx
c001c8dc:	5e                   	pop    esi
c001c8dd:	5f                   	pop    edi
c001c8de:	5d                   	pop    ebp
c001c8df:	c3                   	ret    

c001c8e0 <IDE::polling(unsigned char, unsigned int)>:
c001c8e0:	57                   	push   edi
c001c8e1:	56                   	push   esi
c001c8e2:	53                   	push   ebx
c001c8e3:	bb 04 00 00 00       	mov    ebx,0x4
c001c8e8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c8ec:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c8f1:	52                   	push   edx
c001c8f2:	6a 0c                	push   0xc
c001c8f4:	56                   	push   esi
c001c8f5:	57                   	push   edi
c001c8f6:	e8 c1 f5 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c8fb:	83 c4 10             	add    esp,0x10
c001c8fe:	4b                   	dec    ebx
c001c8ff:	75 f0                	jne    c001c8f1 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c901:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c906:	50                   	push   eax
c001c907:	6a 0c                	push   0xc
c001c909:	56                   	push   esi
c001c90a:	57                   	push   edi
c001c90b:	e8 ac f5 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001c910:	83 c4 10             	add    esp,0x10
c001c913:	a8 01                	test   al,0x1
c001c915:	75 17                	jne    c001c92e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c917:	a8 20                	test   al,0x20
c001c919:	75 0f                	jne    c001c92a <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c91b:	4b                   	dec    ebx
c001c91c:	74 10                	je     c001c92e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c91e:	a8 80                	test   al,0x80
c001c920:	75 e4                	jne    c001c906 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c922:	a8 08                	test   al,0x8
c001c924:	74 e0                	je     c001c906 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c926:	31 c0                	xor    eax,eax
c001c928:	eb 06                	jmp    c001c930 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c92a:	b0 01                	mov    al,0x1
c001c92c:	eb 02                	jmp    c001c930 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c92e:	b0 02                	mov    al,0x2
c001c930:	5b                   	pop    ebx
c001c931:	5e                   	pop    esi
c001c932:	5f                   	pop    edi
c001c933:	c3                   	ret    

c001c934 <SATABus::close(int, int, void*)>:
c001c934:	31 c0                	xor    eax,eax
c001c936:	c3                   	ret    
c001c937:	90                   	nop

c001c938 <SATABus::detect()>:
c001c938:	c3                   	ret    
c001c939:	90                   	nop

c001c93a <SATABus::SATABus()>:
c001c93a:	83 ec 0c             	sub    esp,0xc
c001c93d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c941:	83 ec 08             	sub    esp,0x8
c001c944:	68 b8 33 02 c0       	push   0xc00233b8
c001c949:	50                   	push   eax
c001c94a:	e8 b5 03 ff ff       	call   c000cd04 <HardDiskController::HardDiskController(char const*)>
c001c94f:	83 c4 10             	add    esp,0x10
c001c952:	ba e4 33 02 c0       	mov    edx,0xc00233e4
c001c957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c95b:	89 10                	mov    DWORD PTR [eax],edx
c001c95d:	83 ec 0c             	sub    esp,0xc
c001c960:	6a 50                	push   0x50
c001c962:	e8 6a b5 fe ff       	call   c0007ed1 <Phys::allocateContiguousPages(int)>
c001c967:	83 c4 10             	add    esp,0x10
c001c96a:	89 c2                	mov    edx,eax
c001c96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c970:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c976:	83 ec 0c             	sub    esp,0xc
c001c979:	6a 50                	push   0x50
c001c97b:	e8 95 cc fe ff       	call   c0009615 <Virt::allocateKernelVirtualPages(int)>
c001c980:	83 c4 10             	add    esp,0x10
c001c983:	89 c2                	mov    edx,eax
c001c985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c989:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c98f:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c994:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c998:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c99e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c9a2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c9a8:	83 ec 0c             	sub    esp,0xc
c001c9ab:	6a 03                	push   0x3
c001c9ad:	6a 50                	push   0x50
c001c9af:	51                   	push   ecx
c001c9b0:	52                   	push   edx
c001c9b1:	50                   	push   eax
c001c9b2:	e8 71 d5 fe ff       	call   c0009f28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c9b7:	83 c4 20             	add    esp,0x20
c001c9ba:	90                   	nop
c001c9bb:	83 c4 0c             	add    esp,0xc
c001c9be:	c3                   	ret    
c001c9bf:	90                   	nop

c001c9c0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c9c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9c4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c9c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c9ca:	09 c2                	or     edx,eax
c001c9cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c9d6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c9d8:	31 c0                	xor    eax,eax
c001c9da:	c1 e9 08             	shr    ecx,0x8
c001c9dd:	83 e1 0f             	and    ecx,0xf
c001c9e0:	39 c8                	cmp    eax,ecx
c001c9e2:	74 0a                	je     c001c9ee <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c9e4:	f6 c2 01             	test   dl,0x1
c001c9e7:	74 08                	je     c001c9f1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c9e9:	d1 ea                	shr    edx,1
c001c9eb:	40                   	inc    eax
c001c9ec:	eb f2                	jmp    c001c9e0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c9ee:	83 c8 ff             	or     eax,0xffffffff
c001c9f1:	c3                   	ret    

c001c9f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c9f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c9f6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c9f9:	89 c2                	mov    edx,eax
c001c9fb:	c1 ea 08             	shr    edx,0x8
c001c9fe:	83 e2 0f             	and    edx,0xf
c001ca01:	4a                   	dec    edx
c001ca02:	75 32                	jne    c001ca36 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca04:	83 e0 0f             	and    eax,0xf
c001ca07:	83 f8 03             	cmp    eax,0x3
c001ca0a:	75 2a                	jne    c001ca36 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca0c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ca0f:	b8 02 00 00 00       	mov    eax,0x2
c001ca14:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ca1a:	74 1c                	je     c001ca38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca1c:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001ca22:	b8 04 00 00 00       	mov    eax,0x4
c001ca27:	74 0f                	je     c001ca38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca29:	31 c0                	xor    eax,eax
c001ca2b:	83 fa 03             	cmp    edx,0x3
c001ca2e:	0f 94 c0             	sete   al
c001ca31:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ca35:	c3                   	ret    
c001ca36:	31 c0                	xor    eax,eax
c001ca38:	c3                   	ret    
c001ca39:	90                   	nop

c001ca3a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca3e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca41:	0f ba e2 0f          	bt     edx,0xf
c001ca45:	72 f7                	jb     c001ca3e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ca47:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca4a:	83 ca 10             	or     edx,0x10
c001ca4d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca50:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca53:	83 ca 01             	or     edx,0x1
c001ca56:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca59:	c3                   	ret    

c001ca5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca5e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca61:	83 e2 fe             	and    edx,0xfffffffe
c001ca64:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca67:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca6a:	83 e2 ef             	and    edx,0xffffffef
c001ca6d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca70:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca73:	0f ba e2 0e          	bt     edx,0xe
c001ca77:	72 f7                	jb     c001ca70 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca79:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca7c:	0f ba e2 0f          	bt     edx,0xf
c001ca80:	72 ee                	jb     c001ca70 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca82:	c3                   	ret    
c001ca83:	90                   	nop

c001ca84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ca84:	55                   	push   ebp
c001ca85:	57                   	push   edi
c001ca86:	56                   	push   esi
c001ca87:	53                   	push   ebx
c001ca88:	83 ec 1c             	sub    esp,0x1c
c001ca8b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ca8f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ca93:	53                   	push   ebx
c001ca94:	57                   	push   edi
c001ca95:	e8 c0 ff ff ff       	call   c001ca5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ca9a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ca9e:	83 ec 0c             	sub    esp,0xc
c001caa1:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001caa7:	c1 e5 0a             	shl    ebp,0xa
c001caaa:	01 e8                	add    eax,ebp
c001caac:	89 03                	mov    DWORD PTR [ebx],eax
c001caae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cab0:	68 00 04 00 00       	push   0x400
c001cab5:	6a 00                	push   0x0
c001cab7:	50                   	push   eax
c001cab8:	e8 33 3a fe ff       	call   c00004f0 <memset>
c001cabd:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cac3:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001cac7:	83 c4 1c             	add    esp,0x1c
c001caca:	01 e8                	add    eax,ebp
c001cacc:	89 03                	mov    DWORD PTR [ebx],eax
c001cace:	c1 e6 08             	shl    esi,0x8
c001cad1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cad8:	81 c6 00 80 00 00    	add    esi,0x8000
c001cade:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cae4:	01 f0                	add    eax,esi
c001cae6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cae9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001caec:	68 00 01 00 00       	push   0x100
c001caf1:	6a 00                	push   0x0
c001caf3:	50                   	push   eax
c001caf4:	e8 f7 39 fe ff       	call   c00004f0 <memset>
c001caf9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001caff:	31 d2                	xor    edx,edx
c001cb01:	01 f0                	add    eax,esi
c001cb03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb06:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cb0d:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001cb13:	01 ee                	add    esi,ebp
c001cb15:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001cb19:	83 c4 10             	add    esp,0x10
c001cb1c:	c1 e5 0d             	shl    ebp,0xd
c001cb1f:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001cb25:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001cb2b:	83 c6 20             	add    esi,0x20
c001cb2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cb32:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cb38:	01 e8                	add    eax,ebp
c001cb3a:	01 d0                	add    eax,edx
c001cb3c:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cb3f:	52                   	push   edx
c001cb40:	68 00 01 00 00       	push   0x100
c001cb45:	6a 00                	push   0x0
c001cb47:	50                   	push   eax
c001cb48:	e8 a3 39 fe ff       	call   c00004f0 <memset>
c001cb4d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cb53:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001cb5a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb5e:	83 c4 10             	add    esp,0x10
c001cb61:	01 e8                	add    eax,ebp
c001cb63:	01 d0                	add    eax,edx
c001cb65:	81 c2 00 01 00 00    	add    edx,0x100
c001cb6b:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cb6e:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001cb74:	75 af                	jne    c001cb25 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001cb76:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb7d:	50                   	push   eax
c001cb7e:	50                   	push   eax
c001cb7f:	53                   	push   ebx
c001cb80:	57                   	push   edi
c001cb81:	e8 b4 fe ff ff       	call   c001ca3a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cb86:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb8d:	83 c4 2c             	add    esp,0x2c
c001cb90:	5b                   	pop    ebx
c001cb91:	5e                   	pop    esi
c001cb92:	5f                   	pop    edi
c001cb93:	5d                   	pop    ebp
c001cb94:	c3                   	ret    
c001cb95:	90                   	nop

c001cb96 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cb96:	55                   	push   ebp
c001cb97:	57                   	push   edi
c001cb98:	56                   	push   esi
c001cb99:	53                   	push   ebx
c001cb9a:	31 db                	xor    ebx,ebx
c001cb9c:	83 ec 0c             	sub    esp,0xc
c001cb9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cba3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cba7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cbaa:	f7 c7 01 00 00 00    	test   edi,0x1
c001cbb0:	74 7a                	je     c001cc2c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cbb2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cbb6:	89 d8                	mov    eax,ebx
c001cbb8:	c1 e0 07             	shl    eax,0x7
c001cbbb:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cbc2:	55                   	push   ebp
c001cbc3:	56                   	push   esi
c001cbc4:	e8 29 fe ff ff       	call   c001c9f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cbc9:	5a                   	pop    edx
c001cbca:	59                   	pop    ecx
c001cbcb:	83 f8 01             	cmp    eax,0x1
c001cbce:	75 21                	jne    c001cbf1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cbd0:	50                   	push   eax
c001cbd1:	53                   	push   ebx
c001cbd2:	55                   	push   ebp
c001cbd3:	56                   	push   esi
c001cbd4:	e8 ab fe ff ff       	call   c001ca84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cbd9:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cbe0:	e8 0e af fe ff       	call   c0007af3 <malloc>
c001cbe5:	89 04 24             	mov    DWORD PTR [esp],eax
c001cbe8:	89 c5                	mov    ebp,eax
c001cbea:	e8 c1 10 00 00       	call   c001dcb0 <SATA::SATA()>
c001cbef:	eb 24                	jmp    c001cc15 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cbf1:	83 f8 04             	cmp    eax,0x4
c001cbf4:	75 36                	jne    c001cc2c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cbf6:	51                   	push   ecx
c001cbf7:	53                   	push   ebx
c001cbf8:	55                   	push   ebp
c001cbf9:	56                   	push   esi
c001cbfa:	e8 85 fe ff ff       	call   c001ca84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cbff:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cc06:	e8 e8 ae fe ff       	call   c0007af3 <malloc>
c001cc0b:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc0e:	89 c5                	mov    ebp,eax
c001cc10:	e8 f5 17 00 00       	call   c001e40a <SATAPI::SATAPI()>
c001cc15:	58                   	pop    eax
c001cc16:	5a                   	pop    edx
c001cc17:	55                   	push   ebp
c001cc18:	56                   	push   esi
c001cc19:	e8 a2 fd fe ff       	call   c000c9c0 <Device::addChild(Device*)>
c001cc1e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cc21:	56                   	push   esi
c001cc22:	6a 00                	push   0x0
c001cc24:	53                   	push   ebx
c001cc25:	55                   	push   ebp
c001cc26:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cc29:	83 c4 20             	add    esp,0x20
c001cc2c:	d1 ef                	shr    edi,1
c001cc2e:	43                   	inc    ebx
c001cc2f:	83 fb 20             	cmp    ebx,0x20
c001cc32:	0f 85 72 ff ff ff    	jne    c001cbaa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cc38:	83 c4 0c             	add    esp,0xc
c001cc3b:	5b                   	pop    ebx
c001cc3c:	5e                   	pop    esi
c001cc3d:	5f                   	pop    edi
c001cc3e:	5d                   	pop    ebp
c001cc3f:	c3                   	ret    

c001cc40 <SATABus::open(int, int, void*)>:
c001cc40:	83 ec 14             	sub    esp,0x14
c001cc43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc47:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cc4d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cc53:	52                   	push   edx
c001cc54:	50                   	push   eax
c001cc55:	e8 3c ff ff ff       	call   c001cb96 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cc5a:	31 c0                	xor    eax,eax
c001cc5c:	83 c4 1c             	add    esp,0x1c
c001cc5f:	c3                   	ret    

c001cc60 <ATA::close(int, int, void*)>:
c001cc60:	83 ec 0c             	sub    esp,0xc
c001cc63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc67:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cc6d:	85 c0                	test   eax,eax
c001cc6f:	74 0c                	je     c001cc7d <ATA::close(int, int, void*)+0x1d>
c001cc71:	8b 10                	mov    edx,DWORD PTR [eax]
c001cc73:	83 ec 0c             	sub    esp,0xc
c001cc76:	50                   	push   eax
c001cc77:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cc7a:	83 c4 10             	add    esp,0x10
c001cc7d:	31 c0                	xor    eax,eax
c001cc7f:	83 c4 0c             	add    esp,0xc
c001cc82:	c3                   	ret    
c001cc83:	90                   	nop

c001cc84 <ATA::powerSaving(PowerSavingLevel)>:
c001cc84:	c3                   	ret    
c001cc85:	90                   	nop

c001cc86 <ATA::ATA()>:
c001cc86:	83 ec 0c             	sub    esp,0xc
c001cc89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8d:	83 ec 04             	sub    esp,0x4
c001cc90:	68 00 02 00 00       	push   0x200
c001cc95:	68 b1 34 02 c0       	push   0xc00234b1
c001cc9a:	50                   	push   eax
c001cc9b:	e8 ee 00 ff ff       	call   c000cd8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cca0:	83 c4 10             	add    esp,0x10
c001cca3:	ba 24 34 02 c0       	mov    edx,0xc0023424
c001cca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccac:	89 10                	mov    DWORD PTR [eax],edx
c001ccae:	90                   	nop
c001ccaf:	83 c4 0c             	add    esp,0xc
c001ccb2:	c3                   	ret    
c001ccb3:	90                   	nop

c001ccb4 <ATA::flush(bool)>:
c001ccb4:	53                   	push   ebx
c001ccb5:	83 ec 08             	sub    esp,0x8
c001ccb8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ccbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccc1:	83 f8 01             	cmp    eax,0x1
c001ccc4:	19 c0                	sbb    eax,eax
c001ccc6:	83 e0 fd             	and    eax,0xfffffffd
c001ccc9:	05 ea 00 00 00       	add    eax,0xea
c001ccce:	50                   	push   eax
c001cccf:	6a 07                	push   0x7
c001ccd1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccd8:	50                   	push   eax
c001ccd9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccdf:	e8 18 f1 ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cce4:	83 c4 0c             	add    esp,0xc
c001cce7:	6a 00                	push   0x0
c001cce9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccf0:	50                   	push   eax
c001ccf1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccf7:	e8 e4 fb ff ff       	call   c001c8e0 <IDE::polling(unsigned char, unsigned int)>
c001ccfc:	83 c4 18             	add    esp,0x18
c001ccff:	5b                   	pop    ebx
c001cd00:	c3                   	ret    
c001cd01:	90                   	nop

c001cd02 <ATA::readyForCommand()>:
c001cd02:	56                   	push   esi
c001cd03:	53                   	push   ebx
c001cd04:	53                   	push   ebx
c001cd05:	31 db                	xor    ebx,ebx
c001cd07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd0b:	51                   	push   ecx
c001cd0c:	6a 0c                	push   0xc
c001cd0e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cd15:	50                   	push   eax
c001cd16:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cd1c:	e8 9b f1 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001cd21:	83 c4 10             	add    esp,0x10
c001cd24:	a8 88                	test   al,0x88
c001cd26:	74 1f                	je     c001cd47 <ATA::readyForCommand()+0x45>
c001cd28:	43                   	inc    ebx
c001cd29:	83 fb 63             	cmp    ebx,0x63
c001cd2c:	7e dd                	jle    c001cd0b <ATA::readyForCommand()+0x9>
c001cd2e:	83 ec 0c             	sub    esp,0xc
c001cd31:	6a 0a                	push   0xa
c001cd33:	e8 f0 96 ff ff       	call   c0016428 <milliTenthSleep(unsigned int)>
c001cd38:	83 c4 10             	add    esp,0x10
c001cd3b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cd41:	75 c8                	jne    c001cd0b <ATA::readyForCommand()+0x9>
c001cd43:	31 c0                	xor    eax,eax
c001cd45:	eb 02                	jmp    c001cd49 <ATA::readyForCommand()+0x47>
c001cd47:	b0 01                	mov    al,0x1
c001cd49:	5a                   	pop    edx
c001cd4a:	5b                   	pop    ebx
c001cd4b:	5e                   	pop    esi
c001cd4c:	c3                   	ret    
c001cd4d:	90                   	nop

c001cd4e <ATA::access(unsigned long long, int, void*, bool)>:
c001cd4e:	55                   	push   ebp
c001cd4f:	57                   	push   edi
c001cd50:	56                   	push   esi
c001cd51:	53                   	push   ebx
c001cd52:	83 ec 2c             	sub    esp,0x2c
c001cd55:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cd59:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cd5d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cd61:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cd65:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd69:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cd6d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cd71:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cd77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cd7b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cd85:	c1 e0 06             	shl    eax,0x6
c001cd88:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cd90:	74 5b                	je     c001cded <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001cd92:	89 fa                	mov    edx,edi
c001cd94:	89 f0                	mov    eax,esi
c001cd96:	c1 ea 1c             	shr    edx,0x1c
c001cd99:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001cd9d:	89 d1                	mov    ecx,edx
c001cd9f:	09 c1                	or     ecx,eax
c001cda1:	74 25                	je     c001cdc8 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cda3:	31 ed                	xor    ebp,ebp
c001cda5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cdac:	89 fa                	mov    edx,edi
c001cdae:	89 f0                	mov    eax,esi
c001cdb0:	0f ad d0             	shrd   eax,edx,cl
c001cdb3:	d3 ea                	shr    edx,cl
c001cdb5:	f6 c1 20             	test   cl,0x20
c001cdb8:	74 02                	je     c001cdbc <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cdba:	89 d0                	mov    eax,edx
c001cdbc:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cdc0:	45                   	inc    ebp
c001cdc1:	83 fd 06             	cmp    ebp,0x6
c001cdc4:	75 df                	jne    c001cda5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cdc6:	eb 71                	jmp    c001ce39 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001cdc8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cdcd:	89 f0                	mov    eax,esi
c001cdcf:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cdd6:	0f ac f8 10          	shrd   eax,edi,0x10
c001cdda:	bf 01 00 00 00       	mov    edi,0x1
c001cddf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cde3:	c1 ee 18             	shr    esi,0x18
c001cde6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cdeb:	eb 53                	jmp    c001ce40 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cded:	6a 00                	push   0x0
c001cdef:	6a 3f                	push   0x3f
c001cdf1:	57                   	push   edi
c001cdf2:	56                   	push   esi
c001cdf3:	e8 d8 2a 00 00       	call   c001f8d0 <__umoddi3>
c001cdf8:	83 c4 10             	add    esp,0x10
c001cdfb:	40                   	inc    eax
c001cdfc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ce00:	6a 00                	push   0x0
c001ce02:	68 f0 03 00 00       	push   0x3f0
c001ce07:	57                   	push   edi
c001ce08:	56                   	push   esi
c001ce09:	e8 c2 29 00 00       	call   c001f7d0 <__udivdi3>
c001ce0e:	83 c4 10             	add    esp,0x10
c001ce11:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ce16:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce1d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce22:	6a 00                	push   0x0
c001ce24:	6a 3f                	push   0x3f
c001ce26:	57                   	push   edi
c001ce27:	31 ff                	xor    edi,edi
c001ce29:	56                   	push   esi
c001ce2a:	e8 a1 29 00 00       	call   c001f7d0 <__udivdi3>
c001ce2f:	83 c4 10             	add    esp,0x10
c001ce32:	83 e0 0f             	and    eax,0xf
c001ce35:	89 c6                	mov    esi,eax
c001ce37:	eb 07                	jmp    c001ce40 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ce39:	31 f6                	xor    esi,esi
c001ce3b:	bf 02 00 00 00       	mov    edi,0x2
c001ce40:	50                   	push   eax
c001ce41:	6a 00                	push   0x0
c001ce43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce4a:	50                   	push   eax
c001ce4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce4f:	e8 b6 f1 ff ff       	call   c001c00a <IDE::enableIRQs(unsigned char, bool)>
c001ce54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce57:	e8 a6 fe ff ff       	call   c001cd02 <ATA::readyForCommand()>
c001ce5c:	83 c4 10             	add    esp,0x10
c001ce5f:	84 c0                	test   al,al
c001ce61:	75 0a                	jne    c001ce6d <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001ce63:	be 01 00 00 00       	mov    esi,0x1
c001ce68:	e9 9b 02 00 00       	jmp    c001d108 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001ce6d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ce73:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ce79:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ce80:	c1 e0 04             	shl    eax,0x4
c001ce83:	09 c6                	or     esi,eax
c001ce85:	f7 c7 03 00 00 00    	test   edi,0x3
c001ce8b:	75 05                	jne    c001ce92 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001ce8d:	83 ce a0             	or     esi,0xffffffa0
c001ce90:	eb 03                	jmp    c001ce95 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ce92:	83 ce e0             	or     esi,0xffffffe0
c001ce95:	89 f0                	mov    eax,esi
c001ce97:	0f b6 f0             	movzx  esi,al
c001ce9a:	56                   	push   esi
c001ce9b:	6a 06                	push   0x6
c001ce9d:	51                   	push   ecx
c001ce9e:	52                   	push   edx
c001ce9f:	e8 58 ef ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cea4:	83 c4 10             	add    esp,0x10
c001cea7:	6a 00                	push   0x0
c001cea9:	6a 01                	push   0x1
c001ceab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ceb2:	50                   	push   eax
c001ceb3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ceb9:	e8 3e ef ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cebe:	89 f8                	mov    eax,edi
c001cec0:	83 c4 10             	add    esp,0x10
c001cec3:	0f b6 f0             	movzx  esi,al
c001cec6:	83 fe 02             	cmp    esi,0x2
c001cec9:	75 6e                	jne    c001cf39 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001cecb:	6a 00                	push   0x0
c001cecd:	6a 08                	push   0x8
c001cecf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ced6:	50                   	push   eax
c001ced7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cedd:	e8 1a ef ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cee2:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cee7:	50                   	push   eax
c001cee8:	6a 09                	push   0x9
c001ceea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cef1:	50                   	push   eax
c001cef2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cef8:	e8 ff ee ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cefd:	83 c4 20             	add    esp,0x20
c001cf00:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cf05:	50                   	push   eax
c001cf06:	6a 0a                	push   0xa
c001cf08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf0f:	50                   	push   eax
c001cf10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf16:	e8 e1 ee ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf1b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cf20:	50                   	push   eax
c001cf21:	6a 0b                	push   0xb
c001cf23:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf2a:	50                   	push   eax
c001cf2b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf31:	e8 c6 ee ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf36:	83 c4 20             	add    esp,0x20
c001cf39:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cf3e:	50                   	push   eax
c001cf3f:	6a 02                	push   0x2
c001cf41:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf48:	50                   	push   eax
c001cf49:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf4f:	e8 a8 ee ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf54:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cf59:	50                   	push   eax
c001cf5a:	6a 03                	push   0x3
c001cf5c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf63:	50                   	push   eax
c001cf64:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf6a:	e8 8d ee ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf6f:	83 c4 20             	add    esp,0x20
c001cf72:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cf77:	50                   	push   eax
c001cf78:	6a 04                	push   0x4
c001cf7a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf81:	50                   	push   eax
c001cf82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf88:	e8 6f ee ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf8d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cf92:	50                   	push   eax
c001cf93:	6a 05                	push   0x5
c001cf95:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf9c:	50                   	push   eax
c001cf9d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfa3:	e8 54 ee ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfa8:	83 c4 20             	add    esp,0x20
c001cfab:	83 fe 02             	cmp    esi,0x2
c001cfae:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001cfb3:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001cfb8:	85 c9                	test   ecx,ecx
c001cfba:	74 07                	je     c001cfc3 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cfbc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cfc1:	75 47                	jne    c001d00a <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001cfc3:	89 f8                	mov    eax,edi
c001cfc5:	0f b6 f8             	movzx  edi,al
c001cfc8:	31 c0                	xor    eax,eax
c001cfca:	83 ff 02             	cmp    edi,0x2
c001cfcd:	0f 95 c0             	setne  al
c001cfd0:	89 c6                	mov    esi,eax
c001cfd2:	74 0c                	je     c001cfe0 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001cfd4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cfd9:	b8 30 00 00 00       	mov    eax,0x30
c001cfde:	75 2f                	jne    c001d00f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cfe0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cfe4:	83 f2 01             	xor    edx,0x1
c001cfe7:	85 c9                	test   ecx,ecx
c001cfe9:	74 09                	je     c001cff4 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001cfeb:	84 d2                	test   dl,dl
c001cfed:	b8 24 00 00 00       	mov    eax,0x24
c001cff2:	75 1b                	jne    c001d00f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cff4:	85 f6                	test   esi,esi
c001cff6:	0f 84 67 fe ff ff    	je     c001ce63 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cffc:	84 d2                	test   dl,dl
c001cffe:	b8 20 00 00 00       	mov    eax,0x20
c001d003:	75 0a                	jne    c001d00f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001d005:	e9 59 fe ff ff       	jmp    c001ce63 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d00a:	b8 34 00 00 00       	mov    eax,0x34
c001d00f:	50                   	push   eax
c001d010:	6a 07                	push   0x7
c001d012:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d019:	50                   	push   eax
c001d01a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d020:	e8 d7 ed ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d025:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d029:	83 c4 10             	add    esp,0x10
c001d02c:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001d031:	85 f6                	test   esi,esi
c001d033:	0f 84 b5 00 00 00    	je     c001d0ee <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001d039:	50                   	push   eax
c001d03a:	6a 01                	push   0x1
c001d03c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d043:	50                   	push   eax
c001d044:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d04a:	e8 91 f8 ff ff       	call   c001c8e0 <IDE::polling(unsigned char, unsigned int)>
c001d04f:	83 c4 10             	add    esp,0x10
c001d052:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d058:	0f b6 c0             	movzx  eax,al
c001d05b:	85 c0                	test   eax,eax
c001d05d:	74 1f                	je     c001d07e <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001d05f:	50                   	push   eax
c001d060:	89 c6                	mov    esi,eax
c001d062:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d069:	0f b6 d2             	movzx  edx,dl
c001d06c:	50                   	push   eax
c001d06d:	52                   	push   edx
c001d06e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d074:	e8 ad f7 ff ff       	call   c001c826 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d079:	e9 87 00 00 00       	jmp    c001d105 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001d07e:	85 ed                	test   ebp,ebp
c001d080:	74 3b                	je     c001d0bd <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001d082:	31 ff                	xor    edi,edi
c001d084:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d088:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001d08c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001d091:	50                   	push   eax
c001d092:	50                   	push   eax
c001d093:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d09a:	50                   	push   eax
c001d09b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0a1:	e8 44 ed ff ff       	call   c001bdea <IDE::getBase(unsigned char)>
c001d0a6:	89 c2                	mov    edx,eax
c001d0a8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001d0ad:	66 ef                	out    dx,ax
c001d0af:	47                   	inc    edi
c001d0b0:	83 c4 10             	add    esp,0x10
c001d0b3:	81 ff 00 01 00 00    	cmp    edi,0x100
c001d0b9:	75 c9                	jne    c001d084 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001d0bb:	eb 23                	jmp    c001d0e0 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001d0bd:	51                   	push   ecx
c001d0be:	0f b6 d2             	movzx  edx,dl
c001d0c1:	51                   	push   ecx
c001d0c2:	52                   	push   edx
c001d0c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0c9:	e8 1c ed ff ff       	call   c001bdea <IDE::getBase(unsigned char)>
c001d0ce:	b9 00 01 00 00       	mov    ecx,0x100
c001d0d3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d0d7:	89 c2                	mov    edx,eax
c001d0d9:	fc                   	cld    
c001d0da:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d0dd:	83 c4 10             	add    esp,0x10
c001d0e0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d0e8:	4e                   	dec    esi
c001d0e9:	e9 43 ff ff ff       	jmp    c001d031 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001d0ee:	31 f6                	xor    esi,esi
c001d0f0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d0f5:	74 11                	je     c001d108 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001d0f7:	50                   	push   eax
c001d0f8:	50                   	push   eax
c001d0f9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001d0fe:	50                   	push   eax
c001d0ff:	53                   	push   ebx
c001d100:	e8 af fb ff ff       	call   c001ccb4 <ATA::flush(bool)>
c001d105:	83 c4 10             	add    esp,0x10
c001d108:	83 c4 2c             	add    esp,0x2c
c001d10b:	89 f0                	mov    eax,esi
c001d10d:	5b                   	pop    ebx
c001d10e:	5e                   	pop    esi
c001d10f:	5f                   	pop    edi
c001d110:	5d                   	pop    ebp
c001d111:	c3                   	ret    

c001d112 <ATA::detectCHS()>:
c001d112:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d116:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d11c:	c1 e0 06             	shl    eax,0x6
c001d11f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d125:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d12f:	c7 44 24 04 08 34 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023408
c001d137:	e9 a3 44 ff ff       	jmp    c00115df <KePanic(char const*)>

c001d13c <ATA::open(int, int, void*)>:
c001d13c:	53                   	push   ebx
c001d13d:	83 ec 08             	sub    esp,0x8
c001d140:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d144:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d148:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d14c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d152:	c1 e0 06             	shl    eax,0x6
c001d155:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d15b:	01 d0                	add    eax,edx
c001d15d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d164:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d16a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d171:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d17b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d182:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d188:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d18f:	75 0c                	jne    c001d19d <ATA::open(int, int, void*)+0x61>
c001d191:	83 ec 0c             	sub    esp,0xc
c001d194:	53                   	push   ebx
c001d195:	e8 78 ff ff ff       	call   c001d112 <ATA::detectCHS()>
c001d19a:	83 c4 10             	add    esp,0x10
c001d19d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d1a3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d1a9:	c1 e0 06             	shl    eax,0x6
c001d1ac:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d1b3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d1bd:	d1 e8                	shr    eax,1
c001d1bf:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d1c5:	6a 04                	push   0x4
c001d1c7:	6a 0c                	push   0xc
c001d1c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1d0:	50                   	push   eax
c001d1d1:	52                   	push   edx
c001d1d2:	e8 25 ec ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1d7:	90                   	nop
c001d1d8:	90                   	nop
c001d1d9:	6a 00                	push   0x0
c001d1db:	6a 0c                	push   0xc
c001d1dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1e4:	50                   	push   eax
c001d1e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d1eb:	e8 0c ec ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1f0:	83 c4 14             	add    esp,0x14
c001d1f3:	53                   	push   ebx
c001d1f4:	e8 fd fb fe ff       	call   c000cdf6 <PhysicalDisk::startCache()>
c001d1f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1fc:	e8 41 0e ff ff       	call   c000e042 <createPartitionsForDisk(PhysicalDisk*)>
c001d201:	83 c4 18             	add    esp,0x18
c001d204:	31 c0                	xor    eax,eax
c001d206:	5b                   	pop    ebx
c001d207:	c3                   	ret    

c001d208 <combineCharAndColour(char, unsigned char)>:
c001d208:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d20d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d213:	c1 e0 08             	shl    eax,0x8
c001d216:	09 d0                	or     eax,edx
c001d218:	c3                   	ret    

c001d219 <combineColours(unsigned char, unsigned char)>:
c001d219:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d21e:	c1 e0 04             	shl    eax,0x4
c001d221:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d225:	c3                   	ret    

c001d226 <ATA::read(unsigned long long, int, void*)>:
c001d226:	55                   	push   ebp
c001d227:	57                   	push   edi
c001d228:	56                   	push   esi
c001d229:	be 04 00 00 00       	mov    esi,0x4
c001d22e:	53                   	push   ebx
c001d22f:	83 ec 0c             	sub    esp,0xc
c001d232:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d236:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d23a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d23e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d242:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d245:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d24b:	0f 87 a1 01 00 00    	ja     c001d3f2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d251:	85 c9                	test   ecx,ecx
c001d253:	be 06 00 00 00       	mov    esi,0x6
c001d258:	0f 84 94 01 00 00    	je     c001d3f2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d25e:	55                   	push   ebp
c001d25f:	55                   	push   ebp
c001d260:	6a 00                	push   0x0
c001d262:	51                   	push   ecx
c001d263:	53                   	push   ebx
c001d264:	52                   	push   edx
c001d265:	50                   	push   eax
c001d266:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d26a:	e8 df fa ff ff       	call   c001cd4e <ATA::access(unsigned long long, int, void*, bool)>
c001d26f:	83 c4 20             	add    esp,0x20
c001d272:	85 c0                	test   eax,eax
c001d274:	89 c6                	mov    esi,eax
c001d276:	0f 85 71 01 00 00    	jne    c001d3ed <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d27c:	50                   	push   eax
c001d27d:	bd 10 27 00 00       	mov    ebp,0x2710
c001d282:	50                   	push   eax
c001d283:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d289:	6a 0f                	push   0xf
c001d28b:	6a 00                	push   0x0
c001d28d:	89 da                	mov    edx,ebx
c001d28f:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d295:	e8 7f ff ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001d29a:	59                   	pop    ecx
c001d29b:	b9 0a 00 00 00       	mov    ecx,0xa
c001d2a0:	5b                   	pop    ebx
c001d2a1:	0f b6 d8             	movzx  ebx,al
c001d2a4:	89 d0                	mov    eax,edx
c001d2a6:	53                   	push   ebx
c001d2a7:	99                   	cdq    
c001d2a8:	f7 fd                	idiv   ebp
c001d2aa:	99                   	cdq    
c001d2ab:	f7 f9                	idiv   ecx
c001d2ad:	83 c2 30             	add    edx,0x30
c001d2b0:	0f b6 d2             	movzx  edx,dl
c001d2b3:	52                   	push   edx
c001d2b4:	e8 4f ff ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d2b9:	5f                   	pop    edi
c001d2ba:	bf e8 03 00 00       	mov    edi,0x3e8
c001d2bf:	5a                   	pop    edx
c001d2c0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d2c6:	53                   	push   ebx
c001d2c7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2cc:	99                   	cdq    
c001d2cd:	f7 ff                	idiv   edi
c001d2cf:	99                   	cdq    
c001d2d0:	f7 f9                	idiv   ecx
c001d2d2:	8d 42 30             	lea    eax,[edx+0x30]
c001d2d5:	0f b6 c0             	movzx  eax,al
c001d2d8:	50                   	push   eax
c001d2d9:	e8 2a ff ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d2de:	5f                   	pop    edi
c001d2df:	bf 64 00 00 00       	mov    edi,0x64
c001d2e4:	5a                   	pop    edx
c001d2e5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d2eb:	53                   	push   ebx
c001d2ec:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2f1:	99                   	cdq    
c001d2f2:	f7 ff                	idiv   edi
c001d2f4:	99                   	cdq    
c001d2f5:	f7 f9                	idiv   ecx
c001d2f7:	8d 42 30             	lea    eax,[edx+0x30]
c001d2fa:	0f b6 c0             	movzx  eax,al
c001d2fd:	50                   	push   eax
c001d2fe:	e8 05 ff ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d303:	5a                   	pop    edx
c001d304:	5a                   	pop    edx
c001d305:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d30b:	53                   	push   ebx
c001d30c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d311:	99                   	cdq    
c001d312:	f7 f9                	idiv   ecx
c001d314:	99                   	cdq    
c001d315:	f7 f9                	idiv   ecx
c001d317:	8d 42 30             	lea    eax,[edx+0x30]
c001d31a:	0f b6 c0             	movzx  eax,al
c001d31d:	50                   	push   eax
c001d31e:	e8 e5 fe ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d323:	5a                   	pop    edx
c001d324:	5a                   	pop    edx
c001d325:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d32b:	53                   	push   ebx
c001d32c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d331:	99                   	cdq    
c001d332:	f7 f9                	idiv   ecx
c001d334:	83 c2 30             	add    edx,0x30
c001d337:	0f b6 d2             	movzx  edx,dl
c001d33a:	52                   	push   edx
c001d33b:	e8 c8 fe ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d340:	5a                   	pop    edx
c001d341:	5a                   	pop    edx
c001d342:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d348:	53                   	push   ebx
c001d349:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d34e:	99                   	cdq    
c001d34f:	f7 fd                	idiv   ebp
c001d351:	99                   	cdq    
c001d352:	f7 f9                	idiv   ecx
c001d354:	8d 42 30             	lea    eax,[edx+0x30]
c001d357:	0f b6 c0             	movzx  eax,al
c001d35a:	50                   	push   eax
c001d35b:	e8 a8 fe ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d360:	5d                   	pop    ebp
c001d361:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d366:	5a                   	pop    edx
c001d367:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d36d:	53                   	push   ebx
c001d36e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d373:	99                   	cdq    
c001d374:	f7 fd                	idiv   ebp
c001d376:	99                   	cdq    
c001d377:	f7 f9                	idiv   ecx
c001d379:	8d 42 30             	lea    eax,[edx+0x30]
c001d37c:	0f b6 c0             	movzx  eax,al
c001d37f:	50                   	push   eax
c001d380:	e8 83 fe ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d385:	5d                   	pop    ebp
c001d386:	5a                   	pop    edx
c001d387:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d38d:	53                   	push   ebx
c001d38e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d393:	99                   	cdq    
c001d394:	f7 ff                	idiv   edi
c001d396:	99                   	cdq    
c001d397:	f7 f9                	idiv   ecx
c001d399:	8d 42 30             	lea    eax,[edx+0x30]
c001d39c:	0f b6 c0             	movzx  eax,al
c001d39f:	50                   	push   eax
c001d3a0:	e8 63 fe ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d3a5:	5f                   	pop    edi
c001d3a6:	5d                   	pop    ebp
c001d3a7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d3ad:	53                   	push   ebx
c001d3ae:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3b3:	99                   	cdq    
c001d3b4:	f7 f9                	idiv   ecx
c001d3b6:	99                   	cdq    
c001d3b7:	f7 f9                	idiv   ecx
c001d3b9:	8d 42 30             	lea    eax,[edx+0x30]
c001d3bc:	0f b6 c0             	movzx  eax,al
c001d3bf:	50                   	push   eax
c001d3c0:	e8 43 fe ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d3c5:	5a                   	pop    edx
c001d3c6:	5f                   	pop    edi
c001d3c7:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d3cd:	53                   	push   ebx
c001d3ce:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3d3:	99                   	cdq    
c001d3d4:	f7 f9                	idiv   ecx
c001d3d6:	83 c2 30             	add    edx,0x30
c001d3d9:	0f b6 d2             	movzx  edx,dl
c001d3dc:	52                   	push   edx
c001d3dd:	e8 26 fe ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d3e2:	83 c4 10             	add    esp,0x10
c001d3e5:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d3eb:	eb 05                	jmp    c001d3f2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d3ed:	be 01 00 00 00       	mov    esi,0x1
c001d3f2:	83 c4 0c             	add    esp,0xc
c001d3f5:	89 f0                	mov    eax,esi
c001d3f7:	5b                   	pop    ebx
c001d3f8:	5e                   	pop    esi
c001d3f9:	5f                   	pop    edi
c001d3fa:	5d                   	pop    ebp
c001d3fb:	c3                   	ret    

c001d3fc <ATA::write(unsigned long long, int, void*)>:
c001d3fc:	55                   	push   ebp
c001d3fd:	57                   	push   edi
c001d3fe:	56                   	push   esi
c001d3ff:	be 04 00 00 00       	mov    esi,0x4
c001d404:	53                   	push   ebx
c001d405:	83 ec 0c             	sub    esp,0xc
c001d408:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d40c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d410:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d414:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d418:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d41b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d421:	0f 87 9c 01 00 00    	ja     c001d5c3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d427:	85 c9                	test   ecx,ecx
c001d429:	be 06 00 00 00       	mov    esi,0x6
c001d42e:	0f 84 8f 01 00 00    	je     c001d5c3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d434:	55                   	push   ebp
c001d435:	55                   	push   ebp
c001d436:	6a 01                	push   0x1
c001d438:	51                   	push   ecx
c001d439:	53                   	push   ebx
c001d43a:	52                   	push   edx
c001d43b:	50                   	push   eax
c001d43c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d440:	e8 09 f9 ff ff       	call   c001cd4e <ATA::access(unsigned long long, int, void*, bool)>
c001d445:	83 c4 20             	add    esp,0x20
c001d448:	85 c0                	test   eax,eax
c001d44a:	89 c6                	mov    esi,eax
c001d44c:	0f 85 6c 01 00 00    	jne    c001d5be <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d452:	50                   	push   eax
c001d453:	bd 10 27 00 00       	mov    ebp,0x2710
c001d458:	50                   	push   eax
c001d459:	6a 0f                	push   0xf
c001d45b:	6a 00                	push   0x0
c001d45d:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d463:	e8 b1 fd ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001d468:	5a                   	pop    edx
c001d469:	59                   	pop    ecx
c001d46a:	b9 0a 00 00 00       	mov    ecx,0xa
c001d46f:	0f b6 d8             	movzx  ebx,al
c001d472:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d477:	53                   	push   ebx
c001d478:	99                   	cdq    
c001d479:	f7 fd                	idiv   ebp
c001d47b:	99                   	cdq    
c001d47c:	f7 f9                	idiv   ecx
c001d47e:	8d 42 30             	lea    eax,[edx+0x30]
c001d481:	0f b6 c0             	movzx  eax,al
c001d484:	50                   	push   eax
c001d485:	e8 7e fd ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d48a:	5f                   	pop    edi
c001d48b:	bf e8 03 00 00       	mov    edi,0x3e8
c001d490:	5a                   	pop    edx
c001d491:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d497:	53                   	push   ebx
c001d498:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d49d:	99                   	cdq    
c001d49e:	f7 ff                	idiv   edi
c001d4a0:	99                   	cdq    
c001d4a1:	f7 f9                	idiv   ecx
c001d4a3:	8d 42 30             	lea    eax,[edx+0x30]
c001d4a6:	0f b6 c0             	movzx  eax,al
c001d4a9:	50                   	push   eax
c001d4aa:	e8 59 fd ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d4af:	5f                   	pop    edi
c001d4b0:	bf 64 00 00 00       	mov    edi,0x64
c001d4b5:	5a                   	pop    edx
c001d4b6:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d4bc:	53                   	push   ebx
c001d4bd:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4c2:	99                   	cdq    
c001d4c3:	f7 ff                	idiv   edi
c001d4c5:	99                   	cdq    
c001d4c6:	f7 f9                	idiv   ecx
c001d4c8:	8d 42 30             	lea    eax,[edx+0x30]
c001d4cb:	0f b6 c0             	movzx  eax,al
c001d4ce:	50                   	push   eax
c001d4cf:	e8 34 fd ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d4d4:	5a                   	pop    edx
c001d4d5:	5a                   	pop    edx
c001d4d6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d4dc:	53                   	push   ebx
c001d4dd:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4e2:	99                   	cdq    
c001d4e3:	f7 f9                	idiv   ecx
c001d4e5:	99                   	cdq    
c001d4e6:	f7 f9                	idiv   ecx
c001d4e8:	8d 42 30             	lea    eax,[edx+0x30]
c001d4eb:	0f b6 c0             	movzx  eax,al
c001d4ee:	50                   	push   eax
c001d4ef:	e8 14 fd ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d4f4:	5a                   	pop    edx
c001d4f5:	5a                   	pop    edx
c001d4f6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d4fc:	53                   	push   ebx
c001d4fd:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d502:	99                   	cdq    
c001d503:	f7 f9                	idiv   ecx
c001d505:	83 c2 30             	add    edx,0x30
c001d508:	0f b6 d2             	movzx  edx,dl
c001d50b:	52                   	push   edx
c001d50c:	e8 f7 fc ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d511:	5a                   	pop    edx
c001d512:	5a                   	pop    edx
c001d513:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d519:	53                   	push   ebx
c001d51a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d51f:	99                   	cdq    
c001d520:	f7 fd                	idiv   ebp
c001d522:	99                   	cdq    
c001d523:	f7 f9                	idiv   ecx
c001d525:	8d 42 30             	lea    eax,[edx+0x30]
c001d528:	0f b6 c0             	movzx  eax,al
c001d52b:	50                   	push   eax
c001d52c:	e8 d7 fc ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d531:	5d                   	pop    ebp
c001d532:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d537:	5a                   	pop    edx
c001d538:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d53e:	53                   	push   ebx
c001d53f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d544:	99                   	cdq    
c001d545:	f7 fd                	idiv   ebp
c001d547:	99                   	cdq    
c001d548:	f7 f9                	idiv   ecx
c001d54a:	8d 42 30             	lea    eax,[edx+0x30]
c001d54d:	0f b6 c0             	movzx  eax,al
c001d550:	50                   	push   eax
c001d551:	e8 b2 fc ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d556:	5d                   	pop    ebp
c001d557:	5a                   	pop    edx
c001d558:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d55e:	53                   	push   ebx
c001d55f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d564:	99                   	cdq    
c001d565:	f7 ff                	idiv   edi
c001d567:	99                   	cdq    
c001d568:	f7 f9                	idiv   ecx
c001d56a:	8d 42 30             	lea    eax,[edx+0x30]
c001d56d:	0f b6 c0             	movzx  eax,al
c001d570:	50                   	push   eax
c001d571:	e8 92 fc ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d576:	5f                   	pop    edi
c001d577:	5d                   	pop    ebp
c001d578:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d57e:	53                   	push   ebx
c001d57f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d584:	99                   	cdq    
c001d585:	f7 f9                	idiv   ecx
c001d587:	99                   	cdq    
c001d588:	f7 f9                	idiv   ecx
c001d58a:	8d 42 30             	lea    eax,[edx+0x30]
c001d58d:	0f b6 c0             	movzx  eax,al
c001d590:	50                   	push   eax
c001d591:	e8 72 fc ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d596:	5a                   	pop    edx
c001d597:	5f                   	pop    edi
c001d598:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d59e:	53                   	push   ebx
c001d59f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5a4:	99                   	cdq    
c001d5a5:	f7 f9                	idiv   ecx
c001d5a7:	83 c2 30             	add    edx,0x30
c001d5aa:	0f b6 d2             	movzx  edx,dl
c001d5ad:	52                   	push   edx
c001d5ae:	e8 55 fc ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001d5b3:	83 c4 10             	add    esp,0x10
c001d5b6:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d5bc:	eb 05                	jmp    c001d5c3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d5be:	be 01 00 00 00       	mov    esi,0x1
c001d5c3:	83 c4 0c             	add    esp,0xc
c001d5c6:	89 f0                	mov    eax,esi
c001d5c8:	5b                   	pop    ebx
c001d5c9:	5e                   	pop    esi
c001d5ca:	5f                   	pop    edi
c001d5cb:	5d                   	pop    ebp
c001d5cc:	c3                   	ret    
c001d5cd:	90                   	nop

c001d5ce <ATAPI::write(unsigned long long, int, void*)>:
c001d5ce:	b8 03 00 00 00       	mov    eax,0x3
c001d5d3:	c3                   	ret    

c001d5d4 <ATAPI::close(int, int, void*)>:
c001d5d4:	83 ec 0c             	sub    esp,0xc
c001d5d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5db:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5e1:	85 c0                	test   eax,eax
c001d5e3:	74 0c                	je     c001d5f1 <ATAPI::close(int, int, void*)+0x1d>
c001d5e5:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5e7:	83 ec 0c             	sub    esp,0xc
c001d5ea:	50                   	push   eax
c001d5eb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5ee:	83 c4 10             	add    esp,0x10
c001d5f1:	31 c0                	xor    eax,eax
c001d5f3:	83 c4 0c             	add    esp,0xc
c001d5f6:	c3                   	ret    
c001d5f7:	90                   	nop

c001d5f8 <ATAPI::ATAPI()>:
c001d5f8:	83 ec 0c             	sub    esp,0xc
c001d5fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ff:	83 ec 04             	sub    esp,0x4
c001d602:	68 00 08 00 00       	push   0x800
c001d607:	68 51 35 02 c0       	push   0xc0023551
c001d60c:	50                   	push   eax
c001d60d:	e8 7c f7 fe ff       	call   c000cd8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d612:	83 c4 10             	add    esp,0x10
c001d615:	ba 6c 34 02 c0       	mov    edx,0xc002346c
c001d61a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d61e:	89 10                	mov    DWORD PTR [eax],edx
c001d620:	90                   	nop
c001d621:	83 c4 0c             	add    esp,0xc
c001d624:	c3                   	ret    
c001d625:	90                   	nop

c001d626 <ATAPI::readyForCommand()>:
c001d626:	56                   	push   esi
c001d627:	53                   	push   ebx
c001d628:	53                   	push   ebx
c001d629:	31 db                	xor    ebx,ebx
c001d62b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d62f:	51                   	push   ecx
c001d630:	6a 0c                	push   0xc
c001d632:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d639:	50                   	push   eax
c001d63a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d640:	e8 77 e8 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001d645:	83 c4 10             	add    esp,0x10
c001d648:	a8 88                	test   al,0x88
c001d64a:	74 25                	je     c001d671 <ATAPI::readyForCommand()+0x4b>
c001d64c:	43                   	inc    ebx
c001d64d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d653:	7e da                	jle    c001d62f <ATAPI::readyForCommand()+0x9>
c001d655:	83 ec 0c             	sub    esp,0xc
c001d658:	68 5e 01 00 00       	push   0x15e
c001d65d:	e8 c6 8d ff ff       	call   c0016428 <milliTenthSleep(unsigned int)>
c001d662:	83 c4 10             	add    esp,0x10
c001d665:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d66b:	75 c2                	jne    c001d62f <ATAPI::readyForCommand()+0x9>
c001d66d:	31 c0                	xor    eax,eax
c001d66f:	eb 02                	jmp    c001d673 <ATAPI::readyForCommand()+0x4d>
c001d671:	b0 01                	mov    al,0x1
c001d673:	5a                   	pop    edx
c001d674:	5b                   	pop    ebx
c001d675:	5e                   	pop    esi
c001d676:	c3                   	ret    
c001d677:	90                   	nop

c001d678 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d678:	55                   	push   ebp
c001d679:	57                   	push   edi
c001d67a:	56                   	push   esi
c001d67b:	53                   	push   ebx
c001d67c:	83 ec 20             	sub    esp,0x20
c001d67f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d683:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d687:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d68b:	6a 01                	push   0x1
c001d68d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d694:	50                   	push   eax
c001d695:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d69b:	e8 6a e9 ff ff       	call   c001c00a <IDE::enableIRQs(unsigned char, bool)>
c001d6a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6a7:	59                   	pop    ecx
c001d6a8:	5e                   	pop    esi
c001d6a9:	50                   	push   eax
c001d6aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6b0:	e8 21 e7 ff ff       	call   c001bdd6 <IDE::prepareInterrupt(unsigned char)>
c001d6b5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6b8:	e8 69 ff ff ff       	call   c001d626 <ATAPI::readyForCommand()>
c001d6bd:	83 c4 10             	add    esp,0x10
c001d6c0:	84 c0                	test   al,al
c001d6c2:	75 0a                	jne    c001d6ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d6c4:	bb 01 00 00 00       	mov    ebx,0x1
c001d6c9:	e9 5f 02 00 00       	jmp    c001d92d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d6ce:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d6d4:	c1 e0 04             	shl    eax,0x4
c001d6d7:	0f b6 c0             	movzx  eax,al
c001d6da:	50                   	push   eax
c001d6db:	6a 06                	push   0x6
c001d6dd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6e4:	50                   	push   eax
c001d6e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6eb:	e8 0c e7 ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6f0:	6a 00                	push   0x0
c001d6f2:	6a 01                	push   0x1
c001d6f4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6fb:	50                   	push   eax
c001d6fc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d702:	e8 f5 e6 ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d707:	83 c4 20             	add    esp,0x20
c001d70a:	0f b6 c3             	movzx  eax,bl
c001d70d:	50                   	push   eax
c001d70e:	0f b6 df             	movzx  ebx,bh
c001d711:	6a 04                	push   0x4
c001d713:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d71a:	50                   	push   eax
c001d71b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d721:	e8 d6 e6 ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d726:	53                   	push   ebx
c001d727:	6a 05                	push   0x5
c001d729:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d730:	50                   	push   eax
c001d731:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d737:	e8 c0 e6 ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d73c:	83 c4 20             	add    esp,0x20
c001d73f:	68 a0 00 00 00       	push   0xa0
c001d744:	6a 07                	push   0x7
c001d746:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d74d:	50                   	push   eax
c001d74e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d754:	e8 a3 e6 ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d759:	83 c4 0c             	add    esp,0xc
c001d75c:	6a 01                	push   0x1
c001d75e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d765:	50                   	push   eax
c001d766:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d76c:	e8 6f f1 ff ff       	call   c001c8e0 <IDE::polling(unsigned char, unsigned int)>
c001d771:	83 c4 10             	add    esp,0x10
c001d774:	0f b6 d8             	movzx  ebx,al
c001d777:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d77d:	85 db                	test   ebx,ebx
c001d77f:	74 20                	je     c001d7a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d781:	53                   	push   ebx
c001d782:	0f b6 c0             	movzx  eax,al
c001d785:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d78c:	52                   	push   edx
c001d78d:	50                   	push   eax
c001d78e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d794:	e8 8d f0 ff ff       	call   c001c826 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d799:	83 c4 10             	add    esp,0x10
c001d79c:	e9 8c 01 00 00       	jmp    c001d92d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d7a1:	52                   	push   edx
c001d7a2:	0f b6 c0             	movzx  eax,al
c001d7a5:	52                   	push   edx
c001d7a6:	50                   	push   eax
c001d7a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7ad:	e8 38 e6 ff ff       	call   c001bdea <IDE::getBase(unsigned char)>
c001d7b2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d7b6:	b9 06 00 00 00       	mov    ecx,0x6
c001d7bb:	89 c2                	mov    edx,eax
c001d7bd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d7c0:	89 e8                	mov    eax,ebp
c001d7c2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d7c6:	83 c4 10             	add    esp,0x10
c001d7c9:	0f b6 c0             	movzx  eax,al
c001d7cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d7d0:	85 db                	test   ebx,ebx
c001d7d2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7d8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7df:	0f 84 eb 00 00 00    	je     c001d8d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d7e5:	55                   	push   ebp
c001d7e6:	55                   	push   ebp
c001d7e7:	52                   	push   edx
c001d7e8:	50                   	push   eax
c001d7e9:	e8 82 e7 ff ff       	call   c001bf70 <IDE::waitInterrupt(unsigned char)>
c001d7ee:	83 c4 10             	add    esp,0x10
c001d7f1:	84 c0                	test   al,al
c001d7f3:	0f 84 cb fe ff ff    	je     c001d6c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d7f9:	56                   	push   esi
c001d7fa:	56                   	push   esi
c001d7fb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d802:	50                   	push   eax
c001d803:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d809:	e8 c8 e5 ff ff       	call   c001bdd6 <IDE::prepareInterrupt(unsigned char)>
c001d80e:	83 c4 0c             	add    esp,0xc
c001d811:	6a 04                	push   0x4
c001d813:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d81a:	50                   	push   eax
c001d81b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d821:	e8 96 e6 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001d826:	83 c4 0c             	add    esp,0xc
c001d829:	6a 05                	push   0x5
c001d82b:	89 c6                	mov    esi,eax
c001d82d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d834:	50                   	push   eax
c001d835:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d83b:	e8 7c e6 ff ff       	call   c001bebc <IDE::read(unsigned char, unsigned char)>
c001d840:	83 c4 10             	add    esp,0x10
c001d843:	0f b6 e8             	movzx  ebp,al
c001d846:	89 f0                	mov    eax,esi
c001d848:	c1 e5 08             	shl    ebp,0x8
c001d84b:	0f b6 f0             	movzx  esi,al
c001d84e:	09 f5                	or     ebp,esi
c001d850:	31 f6                	xor    esi,esi
c001d852:	d1 fd                	sar    ebp,1
c001d854:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d859:	74 5c                	je     c001d8b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d85b:	39 ee                	cmp    esi,ebp
c001d85d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d863:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d86a:	75 0d                	jne    c001d879 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d86c:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d86f:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d873:	4b                   	dec    ebx
c001d874:	e9 57 ff ff ff       	jmp    c001d7d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d879:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d87d:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d881:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d886:	51                   	push   ecx
c001d887:	51                   	push   ecx
c001d888:	52                   	push   edx
c001d889:	50                   	push   eax
c001d88a:	e8 5b e5 ff ff       	call   c001bdea <IDE::getBase(unsigned char)>
c001d88f:	89 c2                	mov    edx,eax
c001d891:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d896:	66 ef                	out    dx,ax
c001d898:	46                   	inc    esi
c001d899:	83 c4 10             	add    esp,0x10
c001d89c:	eb bd                	jmp    c001d85b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d89e:	51                   	push   ecx
c001d89f:	51                   	push   ecx
c001d8a0:	52                   	push   edx
c001d8a1:	50                   	push   eax
c001d8a2:	e8 43 e5 ff ff       	call   c001bdea <IDE::getBase(unsigned char)>
c001d8a7:	89 c2                	mov    edx,eax
c001d8a9:	66 ed                	in     ax,dx
c001d8ab:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d8af:	83 c4 10             	add    esp,0x10
c001d8b2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d8b6:	46                   	inc    esi
c001d8b7:	39 ee                	cmp    esi,ebp
c001d8b9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8bf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d8c6:	75 d6                	jne    c001d89e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d8c8:	01 f6                	add    esi,esi
c001d8ca:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d8ce:	eb a3                	jmp    c001d873 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d8d0:	51                   	push   ecx
c001d8d1:	51                   	push   ecx
c001d8d2:	52                   	push   edx
c001d8d3:	50                   	push   eax
c001d8d4:	e8 97 e6 ff ff       	call   c001bf70 <IDE::waitInterrupt(unsigned char)>
c001d8d9:	83 c4 10             	add    esp,0x10
c001d8dc:	84 c0                	test   al,al
c001d8de:	0f 84 e0 fd ff ff    	je     c001d6c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d8e4:	52                   	push   edx
c001d8e5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d8ea:	52                   	push   edx
c001d8eb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8f2:	50                   	push   eax
c001d8f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8f9:	e8 d8 e4 ff ff       	call   c001bdd6 <IDE::prepareInterrupt(unsigned char)>
c001d8fe:	83 c4 10             	add    esp,0x10
c001d901:	50                   	push   eax
c001d902:	50                   	push   eax
c001d903:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d90a:	50                   	push   eax
c001d90b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d911:	e8 d4 e4 ff ff       	call   c001bdea <IDE::getBase(unsigned char)>
c001d916:	8d 50 07             	lea    edx,[eax+0x7]
c001d919:	ec                   	in     al,dx
c001d91a:	83 c4 10             	add    esp,0x10
c001d91d:	a8 88                	test   al,0x88
c001d91f:	74 0a                	je     c001d92b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d921:	4b                   	dec    ebx
c001d922:	75 dd                	jne    c001d901 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d924:	bb 02 00 00 00       	mov    ebx,0x2
c001d929:	eb 02                	jmp    c001d92d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d92b:	31 db                	xor    ebx,ebx
c001d92d:	83 c4 1c             	add    esp,0x1c
c001d930:	89 d8                	mov    eax,ebx
c001d932:	5b                   	pop    ebx
c001d933:	5e                   	pop    esi
c001d934:	5f                   	pop    edi
c001d935:	5d                   	pop    ebp
c001d936:	c3                   	ret    
c001d937:	90                   	nop

c001d938 <ATAPI::diskRemoved()>:
c001d938:	53                   	push   ebx
c001d939:	83 ec 14             	sub    esp,0x14
c001d93c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d940:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d947:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d94d:	e8 de 03 ff ff       	call   c000dd30 <LogicalDisk::unmount()>
c001d952:	58                   	pop    eax
c001d953:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d959:	e8 b6 0d ff ff       	call   c000e714 <VCache::writeWriteBuffer()>
c001d95e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d964:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d968:	83 c4 18             	add    esp,0x18
c001d96b:	5b                   	pop    ebx
c001d96c:	e9 93 0d ff ff       	jmp    c000e704 <VCache::invalidateReadBuffer()>
c001d971:	90                   	nop

c001d972 <ATAPI::eject()>:
c001d972:	57                   	push   edi
c001d973:	b9 03 00 00 00       	mov    ecx,0x3
c001d978:	53                   	push   ebx
c001d979:	83 ec 14             	sub    esp,0x14
c001d97c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d980:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d984:	fc                   	cld    
c001d985:	31 c0                	xor    eax,eax
c001d987:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d989:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d98e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d993:	50                   	push   eax
c001d994:	50                   	push   eax
c001d995:	6a 00                	push   0x0
c001d997:	6a 00                	push   0x0
c001d999:	6a 00                	push   0x0
c001d99b:	6a 02                	push   0x2
c001d99d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d9a1:	50                   	push   eax
c001d9a2:	53                   	push   ebx
c001d9a3:	e8 d0 fc ff ff       	call   c001d678 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9a8:	83 c4 14             	add    esp,0x14
c001d9ab:	53                   	push   ebx
c001d9ac:	e8 87 ff ff ff       	call   c001d938 <ATAPI::diskRemoved()>
c001d9b1:	83 c4 24             	add    esp,0x24
c001d9b4:	31 c0                	xor    eax,eax
c001d9b6:	5b                   	pop    ebx
c001d9b7:	5f                   	pop    edi
c001d9b8:	c3                   	ret    
c001d9b9:	90                   	nop

c001d9ba <ATAPI::diskInserted()>:
c001d9ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9be:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d9c5:	c3                   	ret    

c001d9c6 <ATAPI::detectMedia()>:
c001d9c6:	56                   	push   esi
c001d9c7:	53                   	push   ebx
c001d9c8:	83 ec 28             	sub    esp,0x28
c001d9cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d9cf:	6a 0c                	push   0xc
c001d9d1:	6a 00                	push   0x0
c001d9d3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d9d7:	56                   	push   esi
c001d9d8:	e8 13 2b fe ff       	call   c00004f0 <memset>
c001d9dd:	58                   	pop    eax
c001d9de:	5a                   	pop    edx
c001d9df:	6a 00                	push   0x0
c001d9e1:	6a 00                	push   0x0
c001d9e3:	6a 00                	push   0x0
c001d9e5:	6a 00                	push   0x0
c001d9e7:	56                   	push   esi
c001d9e8:	53                   	push   ebx
c001d9e9:	e8 8a fc ff ff       	call   c001d678 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9ee:	83 c4 1c             	add    esp,0x1c
c001d9f1:	6a 0c                	push   0xc
c001d9f3:	6a 00                	push   0x0
c001d9f5:	56                   	push   esi
c001d9f6:	e8 f5 2a fe ff       	call   c00004f0 <memset>
c001d9fb:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001da00:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001da05:	59                   	pop    ecx
c001da06:	58                   	pop    eax
c001da07:	6a 01                	push   0x1
c001da09:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001da0d:	50                   	push   eax
c001da0e:	6a 00                	push   0x0
c001da10:	6a 12                	push   0x12
c001da12:	56                   	push   esi
c001da13:	53                   	push   ebx
c001da14:	e8 5f fc ff ff       	call   c001d678 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da19:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001da1d:	83 c4 20             	add    esp,0x20
c001da20:	83 e0 7f             	and    eax,0x7f
c001da23:	83 f8 70             	cmp    eax,0x70
c001da26:	74 15                	je     c001da3d <ATAPI::detectMedia()+0x77>
c001da28:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da2f:	75 0c                	jne    c001da3d <ATAPI::detectMedia()+0x77>
c001da31:	83 ec 0c             	sub    esp,0xc
c001da34:	53                   	push   ebx
c001da35:	e8 80 ff ff ff       	call   c001d9ba <ATAPI::diskInserted()>
c001da3a:	83 c4 10             	add    esp,0x10
c001da3d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001da41:	83 e0 0f             	and    eax,0xf
c001da44:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001da49:	0f b6 c0             	movzx  eax,al
c001da4c:	75 19                	jne    c001da67 <ATAPI::detectMedia()+0xa1>
c001da4e:	83 f8 02             	cmp    eax,0x2
c001da51:	75 14                	jne    c001da67 <ATAPI::detectMedia()+0xa1>
c001da53:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da5a:	74 24                	je     c001da80 <ATAPI::detectMedia()+0xba>
c001da5c:	83 ec 0c             	sub    esp,0xc
c001da5f:	53                   	push   ebx
c001da60:	e8 d3 fe ff ff       	call   c001d938 <ATAPI::diskRemoved()>
c001da65:	eb 16                	jmp    c001da7d <ATAPI::detectMedia()+0xb7>
c001da67:	85 c0                	test   eax,eax
c001da69:	75 15                	jne    c001da80 <ATAPI::detectMedia()+0xba>
c001da6b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da72:	75 0c                	jne    c001da80 <ATAPI::detectMedia()+0xba>
c001da74:	83 ec 0c             	sub    esp,0xc
c001da77:	53                   	push   ebx
c001da78:	e8 3d ff ff ff       	call   c001d9ba <ATAPI::diskInserted()>
c001da7d:	83 c4 10             	add    esp,0x10
c001da80:	83 c4 24             	add    esp,0x24
c001da83:	5b                   	pop    ebx
c001da84:	5e                   	pop    esi
c001da85:	c3                   	ret    

c001da86 <ATAPI::open(int, int, void*)>:
c001da86:	56                   	push   esi
c001da87:	53                   	push   ebx
c001da88:	50                   	push   eax
c001da89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da91:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da95:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da9b:	c1 e0 06             	shl    eax,0x6
c001da9e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001daa4:	01 d0                	add    eax,edx
c001daa6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001daad:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001dab3:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001daba:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001dac4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001dacb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dad1:	6a 04                	push   0x4
c001dad3:	6a 0c                	push   0xc
c001dad5:	51                   	push   ecx
c001dad6:	52                   	push   edx
c001dad7:	e8 20 e3 ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dadc:	90                   	nop
c001dadd:	90                   	nop
c001dade:	6a 00                	push   0x0
c001dae0:	6a 0c                	push   0xc
c001dae2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dae9:	50                   	push   eax
c001daea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001daf0:	e8 07 e3 ff ff       	call   c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001daf5:	83 c4 14             	add    esp,0x14
c001daf8:	68 78 01 00 00       	push   0x178
c001dafd:	e8 f1 9f fe ff       	call   c0007af3 <malloc>
c001db02:	83 c4 0c             	add    esp,0xc
c001db05:	6a 00                	push   0x0
c001db07:	68 ff ff ff 7f       	push   0x7fffffff
c001db0c:	6a 00                	push   0x0
c001db0e:	6a 00                	push   0x0
c001db10:	53                   	push   ebx
c001db11:	68 03 36 02 c0       	push   0xc0023603
c001db16:	89 c6                	mov    esi,eax
c001db18:	50                   	push   eax
c001db19:	e8 50 00 ff ff       	call   c000db6e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001db1e:	83 c4 14             	add    esp,0x14
c001db21:	56                   	push   esi
c001db22:	e8 07 01 ff ff       	call   c000dc2e <LogicalDisk::assignDriveLetter()>
c001db27:	5a                   	pop    edx
c001db28:	59                   	pop    ecx
c001db29:	0f be c0             	movsx  eax,al
c001db2c:	50                   	push   eax
c001db2d:	68 54 34 02 c0       	push   0xc0023454
c001db32:	e8 f3 cd fe ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001db37:	58                   	pop    eax
c001db38:	5a                   	pop    edx
c001db39:	56                   	push   esi
c001db3a:	53                   	push   ebx
c001db3b:	e8 80 ee fe ff       	call   c000c9c0 <Device::addChild(Device*)>
c001db40:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001db46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db49:	e8 a8 f2 fe ff       	call   c000cdf6 <PhysicalDisk::startCache()>
c001db4e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001db55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db58:	e8 69 fe ff ff       	call   c001d9c6 <ATAPI::detectMedia()>
c001db5d:	83 c4 14             	add    esp,0x14
c001db60:	31 c0                	xor    eax,eax
c001db62:	5b                   	pop    ebx
c001db63:	5e                   	pop    esi
c001db64:	c3                   	ret    
c001db65:	90                   	nop

c001db66 <ATAPI::read(unsigned long long, int, void*)>:
c001db66:	55                   	push   ebp
c001db67:	57                   	push   edi
c001db68:	56                   	push   esi
c001db69:	53                   	push   ebx
c001db6a:	83 ec 1c             	sub    esp,0x1c
c001db6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db71:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001db75:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001db79:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db80:	74 3c                	je     c001dbbe <ATAPI::read(unsigned long long, int, void*)+0x58>
c001db82:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001db86:	b9 03 00 00 00       	mov    ecx,0x3
c001db8b:	fc                   	cld    
c001db8c:	31 c0                	xor    eax,eax
c001db8e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db90:	89 e8                	mov    eax,ebp
c001db92:	0f ce                	bswap  esi
c001db94:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001db98:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001db9d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dba1:	50                   	push   eax
c001dba2:	50                   	push   eax
c001dba3:	55                   	push   ebp
c001dba4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dba8:	c1 e5 0b             	shl    ebp,0xb
c001dbab:	6a 00                	push   0x0
c001dbad:	55                   	push   ebp
c001dbae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dbb2:	50                   	push   eax
c001dbb3:	53                   	push   ebx
c001dbb4:	e8 bf fa ff ff       	call   c001d678 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dbb9:	83 c4 20             	add    esp,0x20
c001dbbc:	eb 1a                	jmp    c001dbd8 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dbbe:	83 ec 0c             	sub    esp,0xc
c001dbc1:	53                   	push   ebx
c001dbc2:	e8 ff fd ff ff       	call   c001d9c6 <ATAPI::detectMedia()>
c001dbc7:	83 c4 10             	add    esp,0x10
c001dbca:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dbd1:	75 af                	jne    c001db82 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dbd3:	b8 02 00 00 00       	mov    eax,0x2
c001dbd8:	83 c4 1c             	add    esp,0x1c
c001dbdb:	5b                   	pop    ebx
c001dbdc:	5e                   	pop    esi
c001dbdd:	5f                   	pop    edi
c001dbde:	5d                   	pop    ebp
c001dbdf:	c3                   	ret    

c001dbe0 <SATA::close(int, int, void*)>:
c001dbe0:	83 ec 0c             	sub    esp,0xc
c001dbe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbe7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dbed:	85 c0                	test   eax,eax
c001dbef:	74 0c                	je     c001dbfd <SATA::close(int, int, void*)+0x1d>
c001dbf1:	8b 10                	mov    edx,DWORD PTR [eax]
c001dbf3:	83 ec 0c             	sub    esp,0xc
c001dbf6:	50                   	push   eax
c001dbf7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dbfa:	83 c4 10             	add    esp,0x10
c001dbfd:	31 c0                	xor    eax,eax
c001dbff:	83 c4 0c             	add    esp,0xc
c001dc02:	c3                   	ret    
c001dc03:	90                   	nop

c001dc04 <SATA::powerSaving(PowerSavingLevel)>:
c001dc04:	c3                   	ret    
c001dc05:	90                   	nop

c001dc06 <SATA::open(int, int, void*)>:
c001dc06:	56                   	push   esi
c001dc07:	53                   	push   ebx
c001dc08:	50                   	push   eax
c001dc09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc11:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dc1b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dc21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc25:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dc2f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dc39:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dc40:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dc46:	e8 b7 a1 fe ff       	call   c0007e02 <Phys::allocatePage()>
c001dc4b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dc51:	89 c6                	mov    esi,eax
c001dc53:	e8 aa a1 fe ff       	call   c0007e02 <Phys::allocatePage()>
c001dc58:	81 c6 00 10 00 00    	add    esi,0x1000
c001dc5e:	39 c6                	cmp    esi,eax
c001dc60:	74 10                	je     c001dc72 <SATA::open(int, int, void*)+0x6c>
c001dc62:	83 ec 0c             	sub    esp,0xc
c001dc65:	68 9c 34 02 c0       	push   0xc002349c
c001dc6a:	e8 70 39 ff ff       	call   c00115df <KePanic(char const*)>
c001dc6f:	83 c4 10             	add    esp,0x10
c001dc72:	83 ec 0c             	sub    esp,0xc
c001dc75:	6a 02                	push   0x2
c001dc77:	e8 99 b9 fe ff       	call   c0009615 <Virt::allocateKernelVirtualPages(int)>
c001dc7c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dc82:	6a 03                	push   0x3
c001dc84:	50                   	push   eax
c001dc85:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dc8b:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dc91:	e8 88 c0 fe ff       	call   c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)>
c001dc96:	83 c4 14             	add    esp,0x14
c001dc99:	53                   	push   ebx
c001dc9a:	e8 57 f1 fe ff       	call   c000cdf6 <PhysicalDisk::startCache()>
c001dc9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dca2:	e8 9b 03 ff ff       	call   c000e042 <createPartitionsForDisk(PhysicalDisk*)>
c001dca7:	83 c4 14             	add    esp,0x14
c001dcaa:	31 c0                	xor    eax,eax
c001dcac:	5b                   	pop    ebx
c001dcad:	5e                   	pop    esi
c001dcae:	c3                   	ret    
c001dcaf:	90                   	nop

c001dcb0 <SATA::SATA()>:
c001dcb0:	83 ec 0c             	sub    esp,0xc
c001dcb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb7:	83 ec 04             	sub    esp,0x4
c001dcba:	68 00 02 00 00       	push   0x200
c001dcbf:	68 b0 34 02 c0       	push   0xc00234b0
c001dcc4:	50                   	push   eax
c001dcc5:	e8 c4 f0 fe ff       	call   c000cd8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dcca:	83 c4 10             	add    esp,0x10
c001dccd:	ba 20 35 02 c0       	mov    edx,0xc0023520
c001dcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd6:	89 10                	mov    DWORD PTR [eax],edx
c001dcd8:	90                   	nop
c001dcd9:	83 c4 0c             	add    esp,0xc
c001dcdc:	c3                   	ret    
c001dcdd:	90                   	nop

c001dcde <SATA::access(unsigned long long, int, void*, bool)>:
c001dcde:	55                   	push   ebp
c001dcdf:	57                   	push   edi
c001dce0:	56                   	push   esi
c001dce1:	53                   	push   ebx
c001dce2:	83 ec 2c             	sub    esp,0x2c
c001dce5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dce9:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dcee:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dcf2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dcf6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dcfa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dcfe:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd06:	7e 10                	jle    c001dd18 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001dd08:	83 ec 0c             	sub    esp,0xc
c001dd0b:	68 c0 34 02 c0       	push   0xc00234c0
c001dd10:	e8 ca 38 ff ff       	call   c00115df <KePanic(char const*)>
c001dd15:	83 c4 10             	add    esp,0x10
c001dd18:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dd1e:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001dd24:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dd2a:	89 e8                	mov    eax,ebp
c001dd2c:	c1 e0 07             	shl    eax,0x7
c001dd2f:	01 d0                	add    eax,edx
c001dd31:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dd3b:	8d 45 02             	lea    eax,[ebp+0x2]
c001dd3e:	51                   	push   ecx
c001dd3f:	c1 e0 07             	shl    eax,0x7
c001dd42:	51                   	push   ecx
c001dd43:	01 d0                	add    eax,edx
c001dd45:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001dd49:	50                   	push   eax
c001dd4a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dd50:	e8 6b ec ff ff       	call   c001c9c0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dd55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dd59:	83 c4 10             	add    esp,0x10
c001dd5c:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001dd61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd65:	0f 84 5b 01 00 00    	je     c001dec6 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dd6b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd6f:	c1 e0 09             	shl    eax,0x9
c001dd72:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dd77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dd7b:	74 0e                	je     c001dd8b <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001dd7d:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dd83:	89 c1                	mov    ecx,eax
c001dd85:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dd89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd8b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd8f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd95:	8d 45 02             	lea    eax,[ebp+0x2]
c001dd98:	c1 e0 07             	shl    eax,0x7
c001dd9b:	01 d0                	add    eax,edx
c001dd9d:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd9f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dda5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ddab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ddaf:	c1 e1 05             	shl    ecx,0x5
c001ddb2:	01 c8                	add    eax,ecx
c001ddb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ddb8:	83 e1 01             	and    ecx,0x1
c001ddbb:	89 ce                	mov    esi,ecx
c001ddbd:	8a 08                	mov    cl,BYTE PTR [eax]
c001ddbf:	c1 e6 06             	shl    esi,0x6
c001ddc2:	83 e1 bf             	and    ecx,0xffffffbf
c001ddc5:	09 f1                	or     ecx,esi
c001ddc7:	88 08                	mov    BYTE PTR [eax],cl
c001ddc9:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ddcb:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ddd1:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ddd7:	89 08                	mov    DWORD PTR [eax],ecx
c001ddd9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dddf:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dde5:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ddeb:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ddee:	50                   	push   eax
c001ddef:	68 90 00 00 00       	push   0x90
c001ddf4:	6a 00                	push   0x0
c001ddf6:	56                   	push   esi
c001ddf7:	e8 f4 26 fe ff       	call   c00004f0 <memset>
c001ddfc:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001de02:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001de08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de0c:	83 c4 10             	add    esp,0x10
c001de0f:	48                   	dec    eax
c001de10:	25 ff ff 3f 00       	and    eax,0x3fffff
c001de15:	89 c1                	mov    ecx,eax
c001de17:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001de1d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001de22:	09 c8                	or     eax,ecx
c001de24:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001de2a:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001de30:	83 c8 80             	or     eax,0xffffff80
c001de33:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001de39:	66 8b 06             	mov    ax,WORD PTR [esi]
c001de3c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de40:	25 00 7f 00 00       	and    eax,0x7f00
c001de45:	0d 27 80 ff ff       	or     eax,0xffff8027
c001de4a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001de4f:	66 89 06             	mov    WORD PTR [esi],ax
c001de52:	b0 35                	mov    al,0x35
c001de54:	75 02                	jne    c001de58 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001de56:	b0 25                	mov    al,0x25
c001de58:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001de5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de5f:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001de63:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001de67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de6b:	c1 e8 10             	shr    eax,0x10
c001de6e:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001de71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de75:	c1 e8 18             	shr    eax,0x18
c001de78:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001de7b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001de7f:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001de82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de86:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001de89:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001de8d:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001de91:	89 ee                	mov    esi,ebp
c001de93:	31 c0                	xor    eax,eax
c001de95:	c1 e6 07             	shl    esi,0x7
c001de98:	01 d6                	add    esi,edx
c001de9a:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001dea0:	80 e1 88             	and    cl,0x88
c001dea3:	74 0a                	je     c001deaf <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001dea5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001deaa:	74 0a                	je     c001deb6 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001deac:	40                   	inc    eax
c001dead:	eb eb                	jmp    c001de9a <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001deaf:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001deb4:	75 17                	jne    c001decd <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001deb6:	83 ec 0c             	sub    esp,0xc
c001deb9:	68 f9 34 02 c0       	push   0xc00234f9
c001debe:	e8 67 ca fe ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001dec3:	83 c4 10             	add    esp,0x10
c001dec6:	b8 01 00 00 00       	mov    eax,0x1
c001decb:	eb 5b                	jmp    c001df28 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001decd:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ded1:	c1 e5 07             	shl    ebp,0x7
c001ded4:	b8 01 00 00 00       	mov    eax,0x1
c001ded9:	01 ea                	add    edx,ebp
c001dedb:	d3 e0                	shl    eax,cl
c001dedd:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001dee3:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001dee9:	85 c8                	test   eax,ecx
c001deeb:	74 16                	je     c001df03 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001deed:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001def3:	0f ba e1 1e          	bt     ecx,0x1e
c001def7:	73 ea                	jae    c001dee3 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001def9:	83 ec 0c             	sub    esp,0xc
c001defc:	68 07 35 02 c0       	push   0xc0023507
c001df01:	eb bb                	jmp    c001debe <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001df03:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001df09:	0f ba e0 1e          	bt     eax,0x1e
c001df0d:	72 b7                	jb     c001dec6 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001df0f:	31 c0                	xor    eax,eax
c001df11:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001df16:	75 10                	jne    c001df28 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001df18:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001df1e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001df22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df28:	83 c4 2c             	add    esp,0x2c
c001df2b:	5b                   	pop    ebx
c001df2c:	5e                   	pop    esi
c001df2d:	5f                   	pop    edi
c001df2e:	5d                   	pop    ebp
c001df2f:	c3                   	ret    

c001df30 <SATA::read(unsigned long long, int, void*)>:
c001df30:	55                   	push   ebp
c001df31:	57                   	push   edi
c001df32:	56                   	push   esi
c001df33:	be 04 00 00 00       	mov    esi,0x4
c001df38:	53                   	push   ebx
c001df39:	83 ec 0c             	sub    esp,0xc
c001df3c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001df40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001df44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df48:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001df4c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001df4f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001df55:	0f 87 1a 02 00 00    	ja     c001e175 <SATA::read(unsigned long long, int, void*)+0x245>
c001df5b:	85 c9                	test   ecx,ecx
c001df5d:	be 06 00 00 00       	mov    esi,0x6
c001df62:	0f 84 0d 02 00 00    	je     c001e175 <SATA::read(unsigned long long, int, void*)+0x245>
c001df68:	56                   	push   esi
c001df69:	56                   	push   esi
c001df6a:	6a 00                	push   0x0
c001df6c:	51                   	push   ecx
c001df6d:	53                   	push   ebx
c001df6e:	52                   	push   edx
c001df6f:	50                   	push   eax
c001df70:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df74:	e8 65 fd ff ff       	call   c001dcde <SATA::access(unsigned long long, int, void*, bool)>
c001df79:	83 c4 20             	add    esp,0x20
c001df7c:	85 c0                	test   eax,eax
c001df7e:	89 c6                	mov    esi,eax
c001df80:	0f 85 ea 01 00 00    	jne    c001e170 <SATA::read(unsigned long long, int, void*)+0x240>
c001df86:	50                   	push   eax
c001df87:	50                   	push   eax
c001df88:	6a 0f                	push   0xf
c001df8a:	6a 00                	push   0x0
c001df8c:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001df92:	bb 0a 00 00 00       	mov    ebx,0xa
c001df97:	e8 7d f2 ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001df9c:	5a                   	pop    edx
c001df9d:	59                   	pop    ecx
c001df9e:	b9 10 27 00 00       	mov    ecx,0x2710
c001dfa3:	0f b6 c0             	movzx  eax,al
c001dfa6:	50                   	push   eax
c001dfa7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfac:	99                   	cdq    
c001dfad:	f7 f9                	idiv   ecx
c001dfaf:	99                   	cdq    
c001dfb0:	f7 fb                	idiv   ebx
c001dfb2:	8d 42 30             	lea    eax,[edx+0x30]
c001dfb5:	0f b6 c0             	movzx  eax,al
c001dfb8:	50                   	push   eax
c001dfb9:	e8 4a f2 ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001dfbe:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dfc4:	5f                   	pop    edi
c001dfc5:	5d                   	pop    ebp
c001dfc6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001dfcb:	6a 0f                	push   0xf
c001dfcd:	6a 00                	push   0x0
c001dfcf:	e8 45 f2 ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001dfd4:	5a                   	pop    edx
c001dfd5:	59                   	pop    ecx
c001dfd6:	0f b6 c0             	movzx  eax,al
c001dfd9:	50                   	push   eax
c001dfda:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfdf:	99                   	cdq    
c001dfe0:	f7 fd                	idiv   ebp
c001dfe2:	99                   	cdq    
c001dfe3:	f7 fb                	idiv   ebx
c001dfe5:	8d 42 30             	lea    eax,[edx+0x30]
c001dfe8:	0f b6 c0             	movzx  eax,al
c001dfeb:	50                   	push   eax
c001dfec:	e8 17 f2 ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001dff1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dff7:	5f                   	pop    edi
c001dff8:	bf 64 00 00 00       	mov    edi,0x64
c001dffd:	58                   	pop    eax
c001dffe:	6a 0f                	push   0xf
c001e000:	6a 00                	push   0x0
c001e002:	e8 12 f2 ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e007:	5a                   	pop    edx
c001e008:	59                   	pop    ecx
c001e009:	0f b6 c0             	movzx  eax,al
c001e00c:	50                   	push   eax
c001e00d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e012:	99                   	cdq    
c001e013:	f7 ff                	idiv   edi
c001e015:	99                   	cdq    
c001e016:	f7 fb                	idiv   ebx
c001e018:	8d 42 30             	lea    eax,[edx+0x30]
c001e01b:	0f b6 c0             	movzx  eax,al
c001e01e:	50                   	push   eax
c001e01f:	e8 e4 f1 ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e024:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e02a:	58                   	pop    eax
c001e02b:	5a                   	pop    edx
c001e02c:	6a 0f                	push   0xf
c001e02e:	6a 00                	push   0x0
c001e030:	e8 e4 f1 ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e035:	59                   	pop    ecx
c001e036:	5a                   	pop    edx
c001e037:	0f b6 c0             	movzx  eax,al
c001e03a:	50                   	push   eax
c001e03b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e040:	99                   	cdq    
c001e041:	f7 fb                	idiv   ebx
c001e043:	99                   	cdq    
c001e044:	f7 fb                	idiv   ebx
c001e046:	8d 42 30             	lea    eax,[edx+0x30]
c001e049:	0f b6 c0             	movzx  eax,al
c001e04c:	50                   	push   eax
c001e04d:	e8 b6 f1 ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e052:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e058:	59                   	pop    ecx
c001e059:	58                   	pop    eax
c001e05a:	6a 0f                	push   0xf
c001e05c:	6a 00                	push   0x0
c001e05e:	e8 b6 f1 ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e063:	5a                   	pop    edx
c001e064:	59                   	pop    ecx
c001e065:	0f b6 c0             	movzx  eax,al
c001e068:	50                   	push   eax
c001e069:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e06e:	99                   	cdq    
c001e06f:	f7 fb                	idiv   ebx
c001e071:	83 c2 30             	add    edx,0x30
c001e074:	0f b6 d2             	movzx  edx,dl
c001e077:	52                   	push   edx
c001e078:	e8 8b f1 ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e07d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e083:	58                   	pop    eax
c001e084:	5a                   	pop    edx
c001e085:	6a 0f                	push   0xf
c001e087:	6a 00                	push   0x0
c001e089:	e8 8b f1 ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e08e:	59                   	pop    ecx
c001e08f:	b9 10 27 00 00       	mov    ecx,0x2710
c001e094:	5a                   	pop    edx
c001e095:	0f b6 c0             	movzx  eax,al
c001e098:	50                   	push   eax
c001e099:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e09e:	99                   	cdq    
c001e09f:	f7 f9                	idiv   ecx
c001e0a1:	99                   	cdq    
c001e0a2:	f7 fb                	idiv   ebx
c001e0a4:	8d 42 30             	lea    eax,[edx+0x30]
c001e0a7:	0f b6 c0             	movzx  eax,al
c001e0aa:	50                   	push   eax
c001e0ab:	e8 58 f1 ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e0b0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e0b6:	59                   	pop    ecx
c001e0b7:	58                   	pop    eax
c001e0b8:	6a 0f                	push   0xf
c001e0ba:	6a 00                	push   0x0
c001e0bc:	e8 58 f1 ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e0c1:	5a                   	pop    edx
c001e0c2:	59                   	pop    ecx
c001e0c3:	0f b6 c0             	movzx  eax,al
c001e0c6:	50                   	push   eax
c001e0c7:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0cc:	99                   	cdq    
c001e0cd:	f7 fd                	idiv   ebp
c001e0cf:	99                   	cdq    
c001e0d0:	f7 fb                	idiv   ebx
c001e0d2:	8d 42 30             	lea    eax,[edx+0x30]
c001e0d5:	0f b6 c0             	movzx  eax,al
c001e0d8:	50                   	push   eax
c001e0d9:	e8 2a f1 ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e0de:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e0e4:	5d                   	pop    ebp
c001e0e5:	58                   	pop    eax
c001e0e6:	6a 0f                	push   0xf
c001e0e8:	6a 00                	push   0x0
c001e0ea:	e8 2a f1 ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e0ef:	5a                   	pop    edx
c001e0f0:	59                   	pop    ecx
c001e0f1:	0f b6 c0             	movzx  eax,al
c001e0f4:	50                   	push   eax
c001e0f5:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0fa:	99                   	cdq    
c001e0fb:	f7 ff                	idiv   edi
c001e0fd:	99                   	cdq    
c001e0fe:	f7 fb                	idiv   ebx
c001e100:	8d 42 30             	lea    eax,[edx+0x30]
c001e103:	0f b6 c0             	movzx  eax,al
c001e106:	50                   	push   eax
c001e107:	e8 fc f0 ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e10c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e112:	5f                   	pop    edi
c001e113:	5d                   	pop    ebp
c001e114:	6a 0f                	push   0xf
c001e116:	6a 00                	push   0x0
c001e118:	e8 fc f0 ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e11d:	5a                   	pop    edx
c001e11e:	59                   	pop    ecx
c001e11f:	0f b6 c0             	movzx  eax,al
c001e122:	50                   	push   eax
c001e123:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e128:	99                   	cdq    
c001e129:	f7 fb                	idiv   ebx
c001e12b:	99                   	cdq    
c001e12c:	f7 fb                	idiv   ebx
c001e12e:	8d 42 30             	lea    eax,[edx+0x30]
c001e131:	0f b6 c0             	movzx  eax,al
c001e134:	50                   	push   eax
c001e135:	e8 ce f0 ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e13a:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e140:	5f                   	pop    edi
c001e141:	5d                   	pop    ebp
c001e142:	6a 0f                	push   0xf
c001e144:	6a 00                	push   0x0
c001e146:	e8 ce f0 ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e14b:	5a                   	pop    edx
c001e14c:	59                   	pop    ecx
c001e14d:	0f b6 c0             	movzx  eax,al
c001e150:	50                   	push   eax
c001e151:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e156:	99                   	cdq    
c001e157:	f7 fb                	idiv   ebx
c001e159:	83 c2 30             	add    edx,0x30
c001e15c:	0f b6 d2             	movzx  edx,dl
c001e15f:	52                   	push   edx
c001e160:	e8 a3 f0 ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e165:	83 c4 10             	add    esp,0x10
c001e168:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e16e:	eb 05                	jmp    c001e175 <SATA::read(unsigned long long, int, void*)+0x245>
c001e170:	be 01 00 00 00       	mov    esi,0x1
c001e175:	83 c4 0c             	add    esp,0xc
c001e178:	89 f0                	mov    eax,esi
c001e17a:	5b                   	pop    ebx
c001e17b:	5e                   	pop    esi
c001e17c:	5f                   	pop    edi
c001e17d:	5d                   	pop    ebp
c001e17e:	c3                   	ret    
c001e17f:	90                   	nop

c001e180 <SATA::write(unsigned long long, int, void*)>:
c001e180:	55                   	push   ebp
c001e181:	57                   	push   edi
c001e182:	56                   	push   esi
c001e183:	53                   	push   ebx
c001e184:	83 ec 0c             	sub    esp,0xc
c001e187:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e18b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e18f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e193:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e197:	8d 70 ff             	lea    esi,[eax-0x1]
c001e19a:	b8 04 00 00 00       	mov    eax,0x4
c001e19f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e1a5:	0f 87 2c 02 00 00    	ja     c001e3d7 <SATA::write(unsigned long long, int, void*)+0x257>
c001e1ab:	85 db                	test   ebx,ebx
c001e1ad:	b8 06 00 00 00       	mov    eax,0x6
c001e1b2:	0f 84 1f 02 00 00    	je     c001e3d7 <SATA::write(unsigned long long, int, void*)+0x257>
c001e1b8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e1bc:	c1 e6 09             	shl    esi,0x9
c001e1bf:	01 de                	add    esi,ebx
c001e1c1:	50                   	push   eax
c001e1c2:	89 d7                	mov    edi,edx
c001e1c4:	50                   	push   eax
c001e1c5:	83 c7 01             	add    edi,0x1
c001e1c8:	6a 01                	push   0x1
c001e1ca:	89 cd                	mov    ebp,ecx
c001e1cc:	53                   	push   ebx
c001e1cd:	83 d5 00             	adc    ebp,0x0
c001e1d0:	6a 01                	push   0x1
c001e1d2:	81 c3 00 02 00 00    	add    ebx,0x200
c001e1d8:	51                   	push   ecx
c001e1d9:	52                   	push   edx
c001e1da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1de:	e8 fb fa ff ff       	call   c001dcde <SATA::access(unsigned long long, int, void*, bool)>
c001e1e3:	83 c4 20             	add    esp,0x20
c001e1e6:	39 f3                	cmp    ebx,esi
c001e1e8:	89 fa                	mov    edx,edi
c001e1ea:	89 e9                	mov    ecx,ebp
c001e1ec:	75 d3                	jne    c001e1c1 <SATA::write(unsigned long long, int, void*)+0x41>
c001e1ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1f2:	bd 10 27 00 00       	mov    ebp,0x2710
c001e1f7:	bb 0a 00 00 00       	mov    ebx,0xa
c001e1fc:	01 05 b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,eax
c001e202:	50                   	push   eax
c001e203:	50                   	push   eax
c001e204:	6a 0f                	push   0xf
c001e206:	6a 00                	push   0x0
c001e208:	e8 0c f0 ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e20d:	5a                   	pop    edx
c001e20e:	59                   	pop    ecx
c001e20f:	0f b6 c0             	movzx  eax,al
c001e212:	50                   	push   eax
c001e213:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e218:	99                   	cdq    
c001e219:	f7 fd                	idiv   ebp
c001e21b:	99                   	cdq    
c001e21c:	f7 fb                	idiv   ebx
c001e21e:	8d 42 30             	lea    eax,[edx+0x30]
c001e221:	0f b6 c0             	movzx  eax,al
c001e224:	50                   	push   eax
c001e225:	e8 de ef ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e22a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e230:	5e                   	pop    esi
c001e231:	5f                   	pop    edi
c001e232:	bf e8 03 00 00       	mov    edi,0x3e8
c001e237:	6a 0f                	push   0xf
c001e239:	6a 00                	push   0x0
c001e23b:	e8 d9 ef ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e240:	5a                   	pop    edx
c001e241:	59                   	pop    ecx
c001e242:	0f b6 c0             	movzx  eax,al
c001e245:	50                   	push   eax
c001e246:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e24b:	99                   	cdq    
c001e24c:	f7 ff                	idiv   edi
c001e24e:	99                   	cdq    
c001e24f:	f7 fb                	idiv   ebx
c001e251:	8d 42 30             	lea    eax,[edx+0x30]
c001e254:	0f b6 c0             	movzx  eax,al
c001e257:	50                   	push   eax
c001e258:	e8 ab ef ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e25d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e263:	5e                   	pop    esi
c001e264:	be 64 00 00 00       	mov    esi,0x64
c001e269:	58                   	pop    eax
c001e26a:	6a 0f                	push   0xf
c001e26c:	6a 00                	push   0x0
c001e26e:	e8 a6 ef ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e273:	5a                   	pop    edx
c001e274:	59                   	pop    ecx
c001e275:	0f b6 c0             	movzx  eax,al
c001e278:	50                   	push   eax
c001e279:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e27e:	99                   	cdq    
c001e27f:	f7 fe                	idiv   esi
c001e281:	99                   	cdq    
c001e282:	f7 fb                	idiv   ebx
c001e284:	8d 42 30             	lea    eax,[edx+0x30]
c001e287:	0f b6 c0             	movzx  eax,al
c001e28a:	50                   	push   eax
c001e28b:	e8 78 ef ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e290:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e296:	58                   	pop    eax
c001e297:	5a                   	pop    edx
c001e298:	6a 0f                	push   0xf
c001e29a:	6a 00                	push   0x0
c001e29c:	e8 78 ef ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e2a1:	59                   	pop    ecx
c001e2a2:	5a                   	pop    edx
c001e2a3:	0f b6 c0             	movzx  eax,al
c001e2a6:	50                   	push   eax
c001e2a7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2ac:	99                   	cdq    
c001e2ad:	f7 fb                	idiv   ebx
c001e2af:	99                   	cdq    
c001e2b0:	f7 fb                	idiv   ebx
c001e2b2:	8d 42 30             	lea    eax,[edx+0x30]
c001e2b5:	0f b6 c0             	movzx  eax,al
c001e2b8:	50                   	push   eax
c001e2b9:	e8 4a ef ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e2be:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e2c4:	59                   	pop    ecx
c001e2c5:	58                   	pop    eax
c001e2c6:	6a 0f                	push   0xf
c001e2c8:	6a 00                	push   0x0
c001e2ca:	e8 4a ef ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e2cf:	5a                   	pop    edx
c001e2d0:	59                   	pop    ecx
c001e2d1:	0f b6 c0             	movzx  eax,al
c001e2d4:	50                   	push   eax
c001e2d5:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2da:	99                   	cdq    
c001e2db:	f7 fb                	idiv   ebx
c001e2dd:	83 c2 30             	add    edx,0x30
c001e2e0:	0f b6 d2             	movzx  edx,dl
c001e2e3:	52                   	push   edx
c001e2e4:	e8 1f ef ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e2e9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e2ef:	58                   	pop    eax
c001e2f0:	5a                   	pop    edx
c001e2f1:	6a 0f                	push   0xf
c001e2f3:	6a 00                	push   0x0
c001e2f5:	e8 1f ef ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e2fa:	59                   	pop    ecx
c001e2fb:	5a                   	pop    edx
c001e2fc:	0f b6 c0             	movzx  eax,al
c001e2ff:	50                   	push   eax
c001e300:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e305:	99                   	cdq    
c001e306:	f7 fd                	idiv   ebp
c001e308:	99                   	cdq    
c001e309:	f7 fb                	idiv   ebx
c001e30b:	8d 42 30             	lea    eax,[edx+0x30]
c001e30e:	0f b6 c0             	movzx  eax,al
c001e311:	50                   	push   eax
c001e312:	e8 f1 ee ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e317:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e31d:	59                   	pop    ecx
c001e31e:	5d                   	pop    ebp
c001e31f:	6a 0f                	push   0xf
c001e321:	6a 00                	push   0x0
c001e323:	e8 f1 ee ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e328:	5a                   	pop    edx
c001e329:	59                   	pop    ecx
c001e32a:	0f b6 c0             	movzx  eax,al
c001e32d:	50                   	push   eax
c001e32e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e333:	99                   	cdq    
c001e334:	f7 ff                	idiv   edi
c001e336:	99                   	cdq    
c001e337:	f7 fb                	idiv   ebx
c001e339:	8d 42 30             	lea    eax,[edx+0x30]
c001e33c:	0f b6 c0             	movzx  eax,al
c001e33f:	50                   	push   eax
c001e340:	e8 c3 ee ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e345:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e34b:	5f                   	pop    edi
c001e34c:	5d                   	pop    ebp
c001e34d:	6a 0f                	push   0xf
c001e34f:	6a 00                	push   0x0
c001e351:	e8 c3 ee ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e356:	5a                   	pop    edx
c001e357:	59                   	pop    ecx
c001e358:	0f b6 c0             	movzx  eax,al
c001e35b:	50                   	push   eax
c001e35c:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e361:	99                   	cdq    
c001e362:	f7 fe                	idiv   esi
c001e364:	99                   	cdq    
c001e365:	f7 fb                	idiv   ebx
c001e367:	8d 42 30             	lea    eax,[edx+0x30]
c001e36a:	0f b6 c0             	movzx  eax,al
c001e36d:	50                   	push   eax
c001e36e:	e8 95 ee ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e373:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e379:	5e                   	pop    esi
c001e37a:	5f                   	pop    edi
c001e37b:	6a 0f                	push   0xf
c001e37d:	6a 00                	push   0x0
c001e37f:	e8 95 ee ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e384:	5d                   	pop    ebp
c001e385:	5a                   	pop    edx
c001e386:	0f b6 c0             	movzx  eax,al
c001e389:	50                   	push   eax
c001e38a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e38f:	99                   	cdq    
c001e390:	f7 fb                	idiv   ebx
c001e392:	99                   	cdq    
c001e393:	f7 fb                	idiv   ebx
c001e395:	8d 42 30             	lea    eax,[edx+0x30]
c001e398:	0f b6 c0             	movzx  eax,al
c001e39b:	50                   	push   eax
c001e39c:	e8 67 ee ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e3a1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e3a7:	59                   	pop    ecx
c001e3a8:	5e                   	pop    esi
c001e3a9:	6a 0f                	push   0xf
c001e3ab:	6a 00                	push   0x0
c001e3ad:	e8 67 ee ff ff       	call   c001d219 <combineColours(unsigned char, unsigned char)>
c001e3b2:	5f                   	pop    edi
c001e3b3:	5d                   	pop    ebp
c001e3b4:	0f b6 c0             	movzx  eax,al
c001e3b7:	50                   	push   eax
c001e3b8:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3bd:	99                   	cdq    
c001e3be:	f7 fb                	idiv   ebx
c001e3c0:	83 c2 30             	add    edx,0x30
c001e3c3:	0f b6 d2             	movzx  edx,dl
c001e3c6:	52                   	push   edx
c001e3c7:	e8 3c ee ff ff       	call   c001d208 <combineCharAndColour(char, unsigned char)>
c001e3cc:	83 c4 10             	add    esp,0x10
c001e3cf:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e3d5:	31 c0                	xor    eax,eax
c001e3d7:	83 c4 0c             	add    esp,0xc
c001e3da:	5b                   	pop    ebx
c001e3db:	5e                   	pop    esi
c001e3dc:	5f                   	pop    edi
c001e3dd:	5d                   	pop    ebp
c001e3de:	c3                   	ret    
c001e3df:	90                   	nop

c001e3e0 <SATAPI::write(unsigned long long, int, void*)>:
c001e3e0:	b8 03 00 00 00       	mov    eax,0x3
c001e3e5:	c3                   	ret    

c001e3e6 <SATAPI::close(int, int, void*)>:
c001e3e6:	83 ec 0c             	sub    esp,0xc
c001e3e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ed:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e3f3:	85 c0                	test   eax,eax
c001e3f5:	74 0c                	je     c001e403 <SATAPI::close(int, int, void*)+0x1d>
c001e3f7:	8b 10                	mov    edx,DWORD PTR [eax]
c001e3f9:	83 ec 0c             	sub    esp,0xc
c001e3fc:	50                   	push   eax
c001e3fd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e400:	83 c4 10             	add    esp,0x10
c001e403:	31 c0                	xor    eax,eax
c001e405:	83 c4 0c             	add    esp,0xc
c001e408:	c3                   	ret    
c001e409:	90                   	nop

c001e40a <SATAPI::SATAPI()>:
c001e40a:	83 ec 0c             	sub    esp,0xc
c001e40d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e411:	83 ec 04             	sub    esp,0x4
c001e414:	68 00 08 00 00       	push   0x800
c001e419:	68 50 35 02 c0       	push   0xc0023550
c001e41e:	50                   	push   eax
c001e41f:	e8 6a e9 fe ff       	call   c000cd8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e424:	83 c4 10             	add    esp,0x10
c001e427:	ba 44 36 02 c0       	mov    edx,0xc0023644
c001e42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e430:	89 10                	mov    DWORD PTR [eax],edx
c001e432:	90                   	nop
c001e433:	83 c4 0c             	add    esp,0xc
c001e436:	c3                   	ret    
c001e437:	90                   	nop

c001e438 <SATAPI::diskRemoved()>:
c001e438:	c3                   	ret    
c001e439:	90                   	nop

c001e43a <SATAPI::diskInserted()>:
c001e43a:	83 ec 18             	sub    esp,0x18
c001e43d:	68 5c 35 02 c0       	push   0xc002355c
c001e442:	e8 e3 c4 fe ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001e447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e44b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e452:	83 c4 1c             	add    esp,0x1c
c001e455:	c3                   	ret    

c001e456 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e456:	55                   	push   ebp
c001e457:	57                   	push   edi
c001e458:	56                   	push   esi
c001e459:	53                   	push   ebx
c001e45a:	83 ec 34             	sub    esp,0x34
c001e45d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e461:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e465:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e469:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e46d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e471:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e477:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e47d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e481:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e487:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e48b:	83 c0 02             	add    eax,0x2
c001e48e:	c1 e0 07             	shl    eax,0x7
c001e491:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e495:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e499:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e49d:	c1 e0 07             	shl    eax,0x7
c001e4a0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e4a8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e4b2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e4b6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e4bc:	e8 ff e4 ff ff       	call   c001c9c0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e4c1:	83 c4 10             	add    esp,0x10
c001e4c4:	89 c2                	mov    edx,eax
c001e4c6:	b8 01 00 00 00       	mov    eax,0x1
c001e4cb:	83 fa ff             	cmp    edx,0xffffffff
c001e4ce:	0f 84 5f 02 00 00    	je     c001e733 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e4d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e4d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4dc:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e4e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4e4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e4ea:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e4f0:	89 d1                	mov    ecx,edx
c001e4f2:	c1 e1 05             	shl    ecx,0x5
c001e4f5:	01 c8                	add    eax,ecx
c001e4f7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e4f9:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e4ff:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e505:	89 08                	mov    DWORD PTR [eax],ecx
c001e507:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e50d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e513:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e519:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e51c:	50                   	push   eax
c001e51d:	68 90 00 00 00       	push   0x90
c001e522:	6a 00                	push   0x0
c001e524:	53                   	push   ebx
c001e525:	e8 c6 1f fe ff       	call   c00004f0 <memset>
c001e52a:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e52d:	b9 0c 00 00 00       	mov    ecx,0xc
c001e532:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e536:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e538:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e53e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e542:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e546:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e54c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e550:	48                   	dec    eax
c001e551:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e556:	89 c1                	mov    ecx,eax
c001e558:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e55e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e563:	09 c8                	or     eax,ecx
c001e565:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e56b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e571:	83 c8 80             	or     eax,0xffffff80
c001e574:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e57a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e57d:	25 00 7f 00 00       	and    eax,0x7f00
c001e582:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e587:	66 89 03             	mov    WORD PTR [ebx],ax
c001e58a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e58e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e596:	c1 e8 10             	shr    eax,0x10
c001e599:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e59c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5a0:	c1 e8 18             	shr    eax,0x18
c001e5a3:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e5a6:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e5aa:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e5ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5b1:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e5b4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e5b8:	83 c4 10             	add    esp,0x10
c001e5bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e5bf:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e5c3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e5c7:	31 c0                	xor    eax,eax
c001e5c9:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e5cf:	80 e1 88             	and    cl,0x88
c001e5d2:	74 0a                	je     c001e5de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e5d4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e5d9:	74 0a                	je     c001e5e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e5db:	40                   	inc    eax
c001e5dc:	eb eb                	jmp    c001e5c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e5de:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e5e3:	75 43                	jne    c001e628 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e5e5:	83 ec 0c             	sub    esp,0xc
c001e5e8:	68 74 35 02 c0       	push   0xc0023574
c001e5ed:	e8 38 c3 fe ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001e5f2:	58                   	pop    eax
c001e5f3:	5a                   	pop    edx
c001e5f4:	68 89 35 02 c0       	push   0xc0023589
c001e5f9:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e5ff:	e8 c8 a4 fe ff       	call   c0008acc <VgaText::puts(char const*)>
c001e604:	59                   	pop    ecx
c001e605:	5b                   	pop    ebx
c001e606:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e60a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e610:	e8 45 e4 ff ff       	call   c001ca5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e615:	5e                   	pop    esi
c001e616:	5f                   	pop    edi
c001e617:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e61b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e621:	e8 14 e4 ff ff       	call   c001ca3a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e626:	eb 48                	jmp    c001e670 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e628:	b8 01 00 00 00       	mov    eax,0x1
c001e62d:	88 d1                	mov    cl,dl
c001e62f:	d3 e0                	shl    eax,cl
c001e631:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e636:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e63c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e640:	89 c7                	mov    edi,eax
c001e642:	c1 e3 07             	shl    ebx,0x7
c001e645:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e649:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e64f:	85 c7                	test   edi,eax
c001e651:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e657:	0f 84 a3 00 00 00    	je     c001e700 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e65d:	0f ba e0 1e          	bt     eax,0x1e
c001e661:	73 1a                	jae    c001e67d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e663:	83 ec 0c             	sub    esp,0xc
c001e666:	68 9b 35 02 c0       	push   0xc002359b
c001e66b:	e8 ba c2 fe ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001e670:	83 c4 10             	add    esp,0x10
c001e673:	b8 01 00 00 00       	mov    eax,0x1
c001e678:	e9 b6 00 00 00       	jmp    c001e733 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e67d:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e683:	83 f8 0d             	cmp    eax,0xd
c001e686:	77 0a                	ja     c001e692 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e688:	83 ec 0c             	sub    esp,0xc
c001e68b:	68 c8 00 00 00       	push   0xc8
c001e690:	eb 28                	jmp    c001e6ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e692:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e698:	83 f8 0d             	cmp    eax,0xd
c001e69b:	77 0a                	ja     c001e6a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e69d:	83 ec 0c             	sub    esp,0xc
c001e6a0:	68 58 02 00 00       	push   0x258
c001e6a5:	eb 13                	jmp    c001e6ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e6a7:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e6ad:	83 f8 06             	cmp    eax,0x6
c001e6b0:	77 10                	ja     c001e6c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e6b2:	83 ec 0c             	sub    esp,0xc
c001e6b5:	68 dc 05 00 00       	push   0x5dc
c001e6ba:	e8 69 7d ff ff       	call   c0016428 <milliTenthSleep(unsigned int)>
c001e6bf:	83 c4 10             	add    esp,0x10
c001e6c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e6c6:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e6c9:	75 06                	jne    c001e6d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e6cb:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e6cf:	74 15                	je     c001e6e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e6d1:	83 fe 06             	cmp    esi,0x6
c001e6d4:	77 10                	ja     c001e6e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e6d6:	83 ec 0c             	sub    esp,0xc
c001e6d9:	68 c4 09 00 00       	push   0x9c4
c001e6de:	e8 45 7d ff ff       	call   c0016428 <milliTenthSleep(unsigned int)>
c001e6e3:	83 c4 10             	add    esp,0x10
c001e6e6:	46                   	inc    esi
c001e6e7:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e6ed:	0f 85 56 ff ff ff    	jne    c001e649 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e6f3:	83 ec 0c             	sub    esp,0xc
c001e6f6:	68 ae 35 02 c0       	push   0xc00235ae
c001e6fb:	e9 6b ff ff ff       	jmp    c001e66b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e700:	0f ba e0 1e          	bt     eax,0x1e
c001e704:	73 0d                	jae    c001e713 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e706:	83 ec 0c             	sub    esp,0xc
c001e709:	68 c2 35 02 c0       	push   0xc00235c2
c001e70e:	e9 58 ff ff ff       	jmp    c001e66b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e713:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e718:	74 17                	je     c001e731 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e71a:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e71f:	74 10                	je     c001e731 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e721:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e727:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e72b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e72f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e731:	31 c0                	xor    eax,eax
c001e733:	83 c4 2c             	add    esp,0x2c
c001e736:	5b                   	pop    ebx
c001e737:	5e                   	pop    esi
c001e738:	5f                   	pop    edi
c001e739:	5d                   	pop    ebp
c001e73a:	c3                   	ret    
c001e73b:	90                   	nop

c001e73c <SATAPI::eject()>:
c001e73c:	57                   	push   edi
c001e73d:	b9 03 00 00 00       	mov    ecx,0x3
c001e742:	83 ec 18             	sub    esp,0x18
c001e745:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e749:	fc                   	cld    
c001e74a:	31 c0                	xor    eax,eax
c001e74c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e74e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e753:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e758:	50                   	push   eax
c001e759:	6a 00                	push   0x0
c001e75b:	6a 00                	push   0x0
c001e75d:	6a 00                	push   0x0
c001e75f:	6a 00                	push   0x0
c001e761:	6a 02                	push   0x2
c001e763:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e767:	50                   	push   eax
c001e768:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e76c:	e8 e5 fc ff ff       	call   c001e456 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e771:	83 c4 38             	add    esp,0x38
c001e774:	31 c0                	xor    eax,eax
c001e776:	5f                   	pop    edi
c001e777:	c3                   	ret    

c001e778 <SATAPI::detectMedia()>:
c001e778:	53                   	push   ebx
c001e779:	83 ec 14             	sub    esp,0x14
c001e77c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e780:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e786:	e8 89 ff fe ff       	call   c000e714 <VCache::writeWriteBuffer()>
c001e78b:	59                   	pop    ecx
c001e78c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e792:	e8 6d ff fe ff       	call   c000e704 <VCache::invalidateReadBuffer()>
c001e797:	c7 04 24 d7 35 02 c0 	mov    DWORD PTR [esp],0xc00235d7
c001e79e:	e8 87 c1 fe ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001e7a3:	83 c4 10             	add    esp,0x10
c001e7a6:	31 c0                	xor    eax,eax
c001e7a8:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e7af:	85 d2                	test   edx,edx
c001e7b1:	74 0f                	je     c001e7c2 <SATAPI::detectMedia()+0x4a>
c001e7b3:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e7b9:	75 07                	jne    c001e7c2 <SATAPI::detectMedia()+0x4a>
c001e7bb:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e7c2:	40                   	inc    eax
c001e7c3:	83 f8 1a             	cmp    eax,0x1a
c001e7c6:	75 e0                	jne    c001e7a8 <SATAPI::detectMedia()+0x30>
c001e7c8:	83 c4 08             	add    esp,0x8
c001e7cb:	5b                   	pop    ebx
c001e7cc:	c3                   	ret    
c001e7cd:	90                   	nop

c001e7ce <SATAPI::open(int, int, void*)>:
c001e7ce:	56                   	push   esi
c001e7cf:	53                   	push   ebx
c001e7d0:	51                   	push   ecx
c001e7d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e7d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e7d9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e7e3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e7e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7ed:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e7f7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e801:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e808:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e80e:	e8 ef 95 fe ff       	call   c0007e02 <Phys::allocatePage()>
c001e813:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e819:	89 c6                	mov    esi,eax
c001e81b:	e8 e2 95 fe ff       	call   c0007e02 <Phys::allocatePage()>
c001e820:	81 c6 00 10 00 00    	add    esi,0x1000
c001e826:	39 c6                	cmp    esi,eax
c001e828:	74 10                	je     c001e83a <SATAPI::open(int, int, void*)+0x6c>
c001e82a:	83 ec 0c             	sub    esp,0xc
c001e82d:	68 ec 35 02 c0       	push   0xc00235ec
c001e832:	e8 a8 2d ff ff       	call   c00115df <KePanic(char const*)>
c001e837:	83 c4 10             	add    esp,0x10
c001e83a:	83 ec 0c             	sub    esp,0xc
c001e83d:	6a 02                	push   0x2
c001e83f:	e8 d1 ad fe ff       	call   c0009615 <Virt::allocateKernelVirtualPages(int)>
c001e844:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e84a:	6a 03                	push   0x3
c001e84c:	50                   	push   eax
c001e84d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e853:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e859:	e8 c0 b4 fe ff       	call   c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)>
c001e85e:	83 c4 14             	add    esp,0x14
c001e861:	68 78 01 00 00       	push   0x178
c001e866:	e8 88 92 fe ff       	call   c0007af3 <malloc>
c001e86b:	83 c4 0c             	add    esp,0xc
c001e86e:	6a 00                	push   0x0
c001e870:	68 ff ff ff 7f       	push   0x7fffffff
c001e875:	6a 00                	push   0x0
c001e877:	6a 00                	push   0x0
c001e879:	53                   	push   ebx
c001e87a:	68 02 36 02 c0       	push   0xc0023602
c001e87f:	89 c6                	mov    esi,eax
c001e881:	50                   	push   eax
c001e882:	e8 e7 f2 fe ff       	call   c000db6e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e887:	83 c4 14             	add    esp,0x14
c001e88a:	56                   	push   esi
c001e88b:	e8 9e f3 fe ff       	call   c000dc2e <LogicalDisk::assignDriveLetter()>
c001e890:	5a                   	pop    edx
c001e891:	59                   	pop    ecx
c001e892:	0f be c0             	movsx  eax,al
c001e895:	50                   	push   eax
c001e896:	68 54 34 02 c0       	push   0xc0023454
c001e89b:	e8 8a c0 fe ff       	call   c000a92a <Dbg::kprintf(char const*, ...)>
c001e8a0:	58                   	pop    eax
c001e8a1:	5a                   	pop    edx
c001e8a2:	56                   	push   esi
c001e8a3:	53                   	push   ebx
c001e8a4:	e8 17 e1 fe ff       	call   c000c9c0 <Device::addChild(Device*)>
c001e8a9:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e8af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8b2:	e8 3f e5 fe ff       	call   c000cdf6 <PhysicalDisk::startCache()>
c001e8b7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e8be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8c1:	e8 b2 fe ff ff       	call   c001e778 <SATAPI::detectMedia()>
c001e8c6:	83 c4 14             	add    esp,0x14
c001e8c9:	31 c0                	xor    eax,eax
c001e8cb:	5b                   	pop    ebx
c001e8cc:	5e                   	pop    esi
c001e8cd:	c3                   	ret    

c001e8ce <SATAPI::read(unsigned long long, int, void*)>:
c001e8ce:	55                   	push   ebp
c001e8cf:	57                   	push   edi
c001e8d0:	56                   	push   esi
c001e8d1:	53                   	push   ebx
c001e8d2:	83 ec 3c             	sub    esp,0x3c
c001e8d5:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e8d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e8dd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e8e1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e8e5:	83 fd 04             	cmp    ebp,0x4
c001e8e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e8f0:	7e 10                	jle    c001e902 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e8f2:	83 ec 0c             	sub    esp,0xc
c001e8f5:	68 10 36 02 c0       	push   0xc0023610
c001e8fa:	e8 e0 2c ff ff       	call   c00115df <KePanic(char const*)>
c001e8ff:	83 c4 10             	add    esp,0x10
c001e902:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e908:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e90e:	51                   	push   ecx
c001e90f:	50                   	push   eax
c001e910:	83 c0 02             	add    eax,0x2
c001e913:	c1 e0 07             	shl    eax,0x7
c001e916:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e91c:	50                   	push   eax
c001e91d:	52                   	push   edx
c001e91e:	e8 61 e1 ff ff       	call   c001ca84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e923:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e927:	b9 03 00 00 00       	mov    ecx,0x3
c001e92c:	fc                   	cld    
c001e92d:	31 c0                	xor    eax,eax
c001e92f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e931:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e936:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e93b:	83 c4 0c             	add    esp,0xc
c001e93e:	6a 00                	push   0x0
c001e940:	6a 00                	push   0x0
c001e942:	6a 00                	push   0x0
c001e944:	6a 00                	push   0x0
c001e946:	6a 02                	push   0x2
c001e948:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e94c:	50                   	push   eax
c001e94d:	53                   	push   ebx
c001e94e:	e8 03 fb ff ff       	call   c001e456 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e953:	83 c4 20             	add    esp,0x20
c001e956:	85 c0                	test   eax,eax
c001e958:	89 c6                	mov    esi,eax
c001e95a:	75 46                	jne    c001e9a2 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e95c:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e960:	b9 03 00 00 00       	mov    ecx,0x3
c001e965:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e967:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e96b:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e970:	0f c8                	bswap  eax
c001e972:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e976:	89 e8                	mov    eax,ebp
c001e978:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e97c:	50                   	push   eax
c001e97d:	55                   	push   ebp
c001e97e:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e982:	c1 e5 0b             	shl    ebp,0xb
c001e985:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e989:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e98d:	55                   	push   ebp
c001e98e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e992:	50                   	push   eax
c001e993:	53                   	push   ebx
c001e994:	e8 bd fa ff ff       	call   c001e456 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e999:	83 c4 20             	add    esp,0x20
c001e99c:	85 c0                	test   eax,eax
c001e99e:	89 c6                	mov    esi,eax
c001e9a0:	74 0c                	je     c001e9ae <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e9a2:	83 ec 0c             	sub    esp,0xc
c001e9a5:	53                   	push   ebx
c001e9a6:	e8 cd fd ff ff       	call   c001e778 <SATAPI::detectMedia()>
c001e9ab:	83 c4 10             	add    esp,0x10
c001e9ae:	83 c4 3c             	add    esp,0x3c
c001e9b1:	89 f0                	mov    eax,esi
c001e9b3:	5b                   	pop    ebx
c001e9b4:	5e                   	pop    esi
c001e9b5:	5f                   	pop    edi
c001e9b6:	5d                   	pop    ebp
c001e9b7:	c3                   	ret    

c001e9b8 <IOAPIC::close(int, int, void*)>:
c001e9b8:	b8 00 00 00 00       	mov    eax,0x0
c001e9bd:	c3                   	ret    

c001e9be <apicGetBase()>:
c001e9be:	55                   	push   ebp
c001e9bf:	89 e5                	mov    ebp,esp
c001e9c1:	83 ec 18             	sub    esp,0x18
c001e9c4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9c9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e9cf:	83 e0 08             	and    eax,0x8
c001e9d2:	0f b6 c0             	movzx  eax,al
c001e9d5:	85 c0                	test   eax,eax
c001e9d7:	75 07                	jne    c001e9e0 <apicGetBase()+0x22>
c001e9d9:	b8 00 00 00 00       	mov    eax,0x0
c001e9de:	eb 21                	jmp    c001ea01 <apicGetBase()+0x43>
c001e9e0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9e5:	83 ec 08             	sub    esp,0x8
c001e9e8:	6a 1b                	push   0x1b
c001e9ea:	50                   	push   eax
c001e9eb:	e8 14 87 fe ff       	call   c0007104 <Computer::rdmsr(unsigned int)>
c001e9f0:	83 c4 10             	add    esp,0x10
c001e9f3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e9f6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e9f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e9fc:	25 00 00 ff ff       	and    eax,0xffff0000
c001ea01:	c9                   	leave  
c001ea02:	c3                   	ret    
c001ea03:	90                   	nop

c001ea04 <IOAPIC::IOAPIC()>:
c001ea04:	83 ec 0c             	sub    esp,0xc
c001ea07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0b:	83 ec 08             	sub    esp,0x8
c001ea0e:	68 74 36 02 c0       	push   0xc0023674
c001ea13:	50                   	push   eax
c001ea14:	e8 3f e1 fe ff       	call   c000cb58 <Device::Device(char const*)>
c001ea19:	83 c4 10             	add    esp,0x10
c001ea1c:	ba 84 36 02 c0       	mov    edx,0xc0023684
c001ea21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea25:	89 10                	mov    DWORD PTR [eax],edx
c001ea27:	90                   	nop
c001ea28:	83 c4 0c             	add    esp,0xc
c001ea2b:	c3                   	ret    

c001ea2c <apicOpen()>:
c001ea2c:	55                   	push   ebp
c001ea2d:	89 e5                	mov    ebp,esp
c001ea2f:	53                   	push   ebx
c001ea30:	83 ec 34             	sub    esp,0x34
c001ea33:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001ea38:	83 f0 01             	xor    eax,0x1
c001ea3b:	0f b6 c0             	movzx  eax,al
c001ea3e:	85 c0                	test   eax,eax
c001ea40:	0f 84 a3 00 00 00    	je     c001eae9 <apicOpen()+0xbd>
c001ea46:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ea4a:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001ea4f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea53:	0f b6 c0             	movzx  eax,al
c001ea56:	39 c2                	cmp    edx,eax
c001ea58:	0f 83 84 00 00 00    	jae    c001eae2 <apicOpen()+0xb6>
c001ea5e:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ea65:	83 ec 0c             	sub    esp,0xc
c001ea68:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ea6b:	e8 83 90 fe ff       	call   c0007af3 <malloc>
c001ea70:	83 c4 10             	add    esp,0x10
c001ea73:	89 c3                	mov    ebx,eax
c001ea75:	83 ec 0c             	sub    esp,0xc
c001ea78:	53                   	push   ebx
c001ea79:	e8 86 ff ff ff       	call   c001ea04 <IOAPIC::IOAPIC()>
c001ea7e:	83 c4 10             	add    esp,0x10
c001ea81:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ea84:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ea88:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ea8b:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001ea92:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001ea97:	83 c0 01             	add    eax,0x1
c001ea9a:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001ea9f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001eaa4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001eaaa:	83 ec 08             	sub    esp,0x8
c001eaad:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eab0:	50                   	push   eax
c001eab1:	e8 0a df fe ff       	call   c000c9c0 <Device::addChild(Device*)>
c001eab6:	83 c4 10             	add    esp,0x10
c001eab9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eabc:	8b 00                	mov    eax,DWORD PTR [eax]
c001eabe:	83 c0 08             	add    eax,0x8
c001eac1:	8b 00                	mov    eax,DWORD PTR [eax]
c001eac3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eac7:	6a 00                	push   0x0
c001eac9:	6a 00                	push   0x0
c001eacb:	52                   	push   edx
c001eacc:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eacf:	ff d0                	call   eax
c001ead1:	83 c4 10             	add    esp,0x10
c001ead4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ead7:	83 c0 01             	add    eax,0x1
c001eada:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001eadd:	e9 68 ff ff ff       	jmp    c001ea4a <apicOpen()+0x1e>
c001eae2:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001eae9:	e8 d0 fe ff ff       	call   c001e9be <apicGetBase()>
c001eaee:	05 f0 00 00 00       	add    eax,0xf0
c001eaf3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eaf6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eaf9:	8b 00                	mov    eax,DWORD PTR [eax]
c001eafb:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eafe:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eb05:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eb0c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb0f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eb12:	89 10                	mov    DWORD PTR [eax],edx
c001eb14:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eb1b:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eb20:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eb23:	7d 7c                	jge    c001eba1 <apicOpen()+0x175>
c001eb25:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb28:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb2f:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001eb32:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb35:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb3c:	c1 e8 08             	shr    eax,0x8
c001eb3f:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eb43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb46:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb4d:	c1 e8 18             	shr    eax,0x18
c001eb50:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eb53:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eb57:	3d ff 00 00 00       	cmp    eax,0xff
c001eb5c:	75 3a                	jne    c001eb98 <apicOpen()+0x16c>
c001eb5e:	e8 5b fe ff ff       	call   c001e9be <apicGetBase()>
c001eb63:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eb67:	83 fa 01             	cmp    edx,0x1
c001eb6a:	75 07                	jne    c001eb73 <apicOpen()+0x147>
c001eb6c:	ba 60 03 00 00       	mov    edx,0x360
c001eb71:	eb 05                	jmp    c001eb78 <apicOpen()+0x14c>
c001eb73:	ba 50 03 00 00       	mov    edx,0x350
c001eb78:	01 d0                	add    eax,edx
c001eb7a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eb7d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb80:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb82:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eb85:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eb8c:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eb90:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb93:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eb96:	89 10                	mov    DWORD PTR [eax],edx
c001eb98:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eb9c:	e9 7a ff ff ff       	jmp    c001eb1b <apicOpen()+0xef>
c001eba1:	90                   	nop
c001eba2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eba5:	c9                   	leave  
c001eba6:	c3                   	ret    
c001eba7:	90                   	nop

c001eba8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001eba8:	55                   	push   ebp
c001eba9:	89 e5                	mov    ebp,esp
c001ebab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ebb4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ebb7:	72 1d                	jb     c001ebd6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ebb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebbc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ebc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebc5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ebcb:	01 d0                	add    eax,edx
c001ebcd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ebd0:	73 04                	jae    c001ebd6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ebd2:	b0 01                	mov    al,0x1
c001ebd4:	eb 02                	jmp    c001ebd8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ebd6:	b0 00                	mov    al,0x0
c001ebd8:	5d                   	pop    ebp
c001ebd9:	c3                   	ret    

c001ebda <IOAPIC::read(int)>:
c001ebda:	55                   	push   ebp
c001ebdb:	89 e5                	mov    ebp,esp
c001ebdd:	83 ec 10             	sub    esp,0x10
c001ebe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebe3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ebe9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ebec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ebef:	0f b6 d0             	movzx  edx,al
c001ebf2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebf5:	89 10                	mov    DWORD PTR [eax],edx
c001ebf7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebfa:	83 c0 10             	add    eax,0x10
c001ebfd:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebff:	c9                   	leave  
c001ec00:	c3                   	ret    
c001ec01:	90                   	nop

c001ec02 <IOAPIC::open(int, int, void*)>:
c001ec02:	55                   	push   ebp
c001ec03:	89 e5                	mov    ebp,esp
c001ec05:	57                   	push   edi
c001ec06:	56                   	push   esi
c001ec07:	53                   	push   ebx
c001ec08:	83 ec 04             	sub    esp,0x4
c001ec0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec0e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ec11:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec1a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec20:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ec27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec2a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ec30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec33:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec39:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ec40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec43:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ec49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec4c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ec52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec55:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec5b:	0f b6 f0             	movzx  esi,al
c001ec5e:	89 d0                	mov    eax,edx
c001ec60:	ba 00 00 00 00       	mov    edx,0x0
c001ec65:	89 c7                	mov    edi,eax
c001ec67:	83 e7 ff             	and    edi,0xffffffff
c001ec6a:	89 f9                	mov    ecx,edi
c001ec6c:	0f b6 da             	movzx  ebx,dl
c001ec6f:	89 c8                	mov    eax,ecx
c001ec71:	89 da                	mov    edx,ebx
c001ec73:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ec76:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ec79:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ec7d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ec81:	83 e0 00             	and    eax,0x0
c001ec84:	09 d0                	or     eax,edx
c001ec86:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ec8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec8d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec93:	8d 50 01             	lea    edx,[eax+0x1]
c001ec96:	88 d1                	mov    cl,dl
c001ec98:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ec9b:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001eca1:	0f b6 d0             	movzx  edx,al
c001eca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eca7:	83 c2 08             	add    edx,0x8
c001ecaa:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ecae:	0f b6 c9             	movzx  ecx,cl
c001ecb1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ecb7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ecbb:	6a 01                	push   0x1
c001ecbd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecc0:	e8 15 ff ff ff       	call   c001ebda <IOAPIC::read(int)>
c001ecc5:	83 c4 08             	add    esp,0x8
c001ecc8:	c1 f8 10             	sar    eax,0x10
c001eccb:	0f b6 c0             	movzx  eax,al
c001ecce:	8d 50 01             	lea    edx,[eax+0x1]
c001ecd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecd4:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ecda:	b8 00 00 00 00       	mov    eax,0x0
c001ecdf:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ece2:	5b                   	pop    ebx
c001ece3:	5e                   	pop    esi
c001ece4:	5f                   	pop    edi
c001ece5:	5d                   	pop    ebp
c001ece6:	c3                   	ret    
c001ece7:	90                   	nop

c001ece8 <IOAPIC::write(int, int)>:
c001ece8:	55                   	push   ebp
c001ece9:	89 e5                	mov    ebp,esp
c001eceb:	83 ec 10             	sub    esp,0x10
c001ecee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecf1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ecf7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ecfa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ecfd:	0f b6 d0             	movzx  edx,al
c001ed00:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed03:	89 10                	mov    DWORD PTR [eax],edx
c001ed05:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed08:	8d 50 10             	lea    edx,[eax+0x10]
c001ed0b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed0e:	89 02                	mov    DWORD PTR [edx],eax
c001ed10:	90                   	nop
c001ed11:	c9                   	leave  
c001ed12:	c3                   	ret    
c001ed13:	90                   	nop

c001ed14 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ed14:	55                   	push   ebp
c001ed15:	89 e5                	mov    ebp,esp
c001ed17:	53                   	push   ebx
c001ed18:	83 ec 2c             	sub    esp,0x2c
c001ed1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed1e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ed21:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ed24:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ed27:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ed2a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed2d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ed30:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ed33:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ed36:	88 d8                	mov    al,bl
c001ed38:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ed3b:	88 c8                	mov    al,cl
c001ed3d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ed40:	88 d0                	mov    al,dl
c001ed42:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ed45:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed49:	83 c0 08             	add    eax,0x8
c001ed4c:	d1 e0                	shl    eax,1
c001ed4e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ed51:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed55:	83 c0 08             	add    eax,0x8
c001ed58:	d1 e0                	shl    eax,1
c001ed5a:	83 c0 01             	add    eax,0x1
c001ed5d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ed60:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed63:	50                   	push   eax
c001ed64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed67:	e8 6e fe ff ff       	call   c001ebda <IOAPIC::read(int)>
c001ed6c:	83 c4 08             	add    esp,0x8
c001ed6f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ed72:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ed79:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ed7c:	c1 e0 18             	shl    eax,0x18
c001ed7f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ed82:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ed85:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed88:	52                   	push   edx
c001ed89:	50                   	push   eax
c001ed8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed8d:	e8 56 ff ff ff       	call   c001ece8 <IOAPIC::write(int, int)>
c001ed92:	83 c4 0c             	add    esp,0xc
c001ed95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed98:	50                   	push   eax
c001ed99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed9c:	e8 39 fe ff ff       	call   c001ebda <IOAPIC::read(int)>
c001eda1:	83 c4 08             	add    esp,0x8
c001eda4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001eda7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001edae:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001edb5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001edbc:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001edc0:	85 c0                	test   eax,eax
c001edc2:	74 09                	je     c001edcd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001edc4:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001edcb:	eb 07                	jmp    c001edd4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001edcd:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001edd4:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001edd8:	85 c0                	test   eax,eax
c001edda:	74 09                	je     c001ede5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001eddc:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ede3:	eb 07                	jmp    c001edec <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ede5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001edec:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001edf3:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001edf7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001edfa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001edfd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee00:	52                   	push   edx
c001ee01:	50                   	push   eax
c001ee02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee05:	e8 de fe ff ff       	call   c001ece8 <IOAPIC::write(int, int)>
c001ee0a:	83 c4 0c             	add    esp,0xc
c001ee0d:	90                   	nop
c001ee0e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee11:	c9                   	leave  
c001ee12:	c3                   	ret    
c001ee13:	90                   	nop

c001ee14 <APICTimer::close(int, int, void*)>:
c001ee14:	b8 00 00 00 00       	mov    eax,0x0
c001ee19:	c3                   	ret    
c001ee1a:	66 90                	xchg   ax,ax

c001ee1c <apicTimerHandler(regs*, void*)>:
c001ee1c:	83 ec 0c             	sub    esp,0xc
c001ee1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee23:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ee25:	b8 10 27 00 00       	mov    eax,0x2710
c001ee2a:	ba 00 00 00 00       	mov    edx,0x0
c001ee2f:	f7 f1                	div    ecx
c001ee31:	83 ec 0c             	sub    esp,0xc
c001ee34:	50                   	push   eax
c001ee35:	e8 f2 f5 fe ff       	call   c000e42c <timerHandler(unsigned int)>
c001ee3a:	83 c4 10             	add    esp,0x10
c001ee3d:	90                   	nop
c001ee3e:	83 c4 0c             	add    esp,0xc
c001ee41:	c3                   	ret    
c001ee42:	66 90                	xchg   ax,ax

c001ee44 <APICTimer::open(int, int, void*)>:
c001ee44:	83 ec 0c             	sub    esp,0xc
c001ee47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee4d:	83 c0 24             	add    eax,0x24
c001ee50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee52:	83 ec 08             	sub    esp,0x8
c001ee55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee5d:	ff d0                	call   eax
c001ee5f:	83 c4 10             	add    esp,0x10
c001ee62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee66:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee6a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee78:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ee7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee82:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ee88:	83 ec 0c             	sub    esp,0xc
c001ee8b:	51                   	push   ecx
c001ee8c:	6a 01                	push   0x1
c001ee8e:	68 1c ee 01 c0       	push   0xc001ee1c
c001ee93:	52                   	push   edx
c001ee94:	50                   	push   eax
c001ee95:	e8 d2 da fe ff       	call   c000c96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee9a:	83 c4 20             	add    esp,0x20
c001ee9d:	89 c2                	mov    edx,eax
c001ee9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eea9:	b8 00 00 00 00       	mov    eax,0x0
c001eeae:	83 c4 0c             	add    esp,0xc
c001eeb1:	c3                   	ret    
c001eeb2:	66 90                	xchg   ax,ax

c001eeb4 <APICTimer::write(int)>:
c001eeb4:	83 ec 0c             	sub    esp,0xc
c001eeb7:	83 ec 0c             	sub    esp,0xc
c001eeba:	68 a8 36 02 c0       	push   0xc00236a8
c001eebf:	e8 1b 27 ff ff       	call   c00115df <KePanic(char const*)>
c001eec4:	83 c4 10             	add    esp,0x10
c001eec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eecb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eecf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eed5:	90                   	nop
c001eed6:	83 c4 0c             	add    esp,0xc
c001eed9:	c3                   	ret    
c001eeda:	66 90                	xchg   ax,ax

c001eedc <APICTimer::APICTimer()>:
c001eedc:	83 ec 0c             	sub    esp,0xc
c001eedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee3:	83 ec 08             	sub    esp,0x8
c001eee6:	68 b8 36 02 c0       	push   0xc00236b8
c001eeeb:	50                   	push   eax
c001eeec:	e8 6f f4 fe ff       	call   c000e360 <Timer::Timer(char const*)>
c001eef1:	83 c4 10             	add    esp,0x10
c001eef4:	ba cc 36 02 c0       	mov    edx,0xc00236cc
c001eef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefd:	89 10                	mov    DWORD PTR [eax],edx
c001eeff:	90                   	nop
c001ef00:	83 c4 0c             	add    esp,0xc
c001ef03:	c3                   	ret    

c001ef04 <PIT::write(int)>:
c001ef04:	83 ec 10             	sub    esp,0x10
c001ef07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef0f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef19:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ef1e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ef23:	89 c2                	mov    edx,eax
c001ef25:	c1 fa 1f             	sar    edx,0x1f
c001ef28:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ef2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef30:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ef37:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ef3c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ef40:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ef45:	ee                   	out    dx,al
c001ef46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef4a:	0f b6 c0             	movzx  eax,al
c001ef4d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ef54:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ef58:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ef5c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ef61:	ee                   	out    dx,al
c001ef62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef66:	c1 f8 08             	sar    eax,0x8
c001ef69:	0f b6 c0             	movzx  eax,al
c001ef6c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ef73:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ef77:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ef7b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ef80:	ee                   	out    dx,al
c001ef81:	90                   	nop
c001ef82:	83 c4 10             	add    esp,0x10
c001ef85:	c3                   	ret    
c001ef86:	66 90                	xchg   ax,ax

c001ef88 <pitHandler(regs*, void*)>:
c001ef88:	83 ec 0c             	sub    esp,0xc
c001ef8b:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001ef91:	b8 10 27 00 00       	mov    eax,0x2710
c001ef96:	89 c2                	mov    edx,eax
c001ef98:	c1 fa 1f             	sar    edx,0x1f
c001ef9b:	f7 f9                	idiv   ecx
c001ef9d:	83 ec 0c             	sub    esp,0xc
c001efa0:	50                   	push   eax
c001efa1:	e8 86 f4 fe ff       	call   c000e42c <timerHandler(unsigned int)>
c001efa6:	83 c4 10             	add    esp,0x10
c001efa9:	90                   	nop
c001efaa:	83 c4 0c             	add    esp,0xc
c001efad:	c3                   	ret    
c001efae:	66 90                	xchg   ax,ax

c001efb0 <PIT::open(int, int, void*)>:
c001efb0:	83 ec 0c             	sub    esp,0xc
c001efb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb7:	8b 00                	mov    eax,DWORD PTR [eax]
c001efb9:	83 c0 24             	add    eax,0x24
c001efbc:	8b 00                	mov    eax,DWORD PTR [eax]
c001efbe:	83 ec 08             	sub    esp,0x8
c001efc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efc9:	ff d0                	call   eax
c001efcb:	83 c4 10             	add    esp,0x10
c001efce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd2:	83 ec 0c             	sub    esp,0xc
c001efd5:	6a 00                	push   0x0
c001efd7:	6a 01                	push   0x1
c001efd9:	68 88 ef 01 c0       	push   0xc001ef88
c001efde:	6a 00                	push   0x0
c001efe0:	50                   	push   eax
c001efe1:	e8 86 d9 fe ff       	call   c000c96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001efe6:	83 c4 20             	add    esp,0x20
c001efe9:	89 c2                	mov    edx,eax
c001efeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efef:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eff5:	b8 00 00 00 00       	mov    eax,0x0
c001effa:	83 c4 0c             	add    esp,0xc
c001effd:	c3                   	ret    
c001effe:	66 90                	xchg   ax,ax

c001f000 <PIT::close(int, int, void*)>:
c001f000:	83 ec 0c             	sub    esp,0xc
c001f003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f007:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f015:	6a 01                	push   0x1
c001f017:	68 88 ef 01 c0       	push   0xc001ef88
c001f01c:	6a 00                	push   0x0
c001f01e:	50                   	push   eax
c001f01f:	e8 7e d9 fe ff       	call   c000c9a2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f024:	83 c4 10             	add    esp,0x10
c001f027:	b8 00 00 00 00       	mov    eax,0x0
c001f02c:	83 c4 0c             	add    esp,0xc
c001f02f:	c3                   	ret    

c001f030 <PIT::PIT()>:
c001f030:	83 ec 0c             	sub    esp,0xc
c001f033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f037:	83 ec 08             	sub    esp,0x8
c001f03a:	68 f4 36 02 c0       	push   0xc00236f4
c001f03f:	50                   	push   eax
c001f040:	e8 1b f3 fe ff       	call   c000e360 <Timer::Timer(char const*)>
c001f045:	83 c4 10             	add    esp,0x10
c001f048:	ba 1c 37 02 c0       	mov    edx,0xc002371c
c001f04d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f051:	89 10                	mov    DWORD PTR [eax],edx
c001f053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f057:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f05d:	0f b6 d0             	movzx  edx,al
c001f060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f064:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f06b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f075:	0f b6 d0             	movzx  edx,al
c001f078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f085:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f08b:	8d 50 01             	lea    edx,[eax+0x1]
c001f08e:	88 d1                	mov    cl,dl
c001f090:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f094:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f09a:	0f b6 d0             	movzx  edx,al
c001f09d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f0a5:	83 e1 3f             	and    ecx,0x3f
c001f0a8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f0ac:	90                   	nop
c001f0ad:	83 c4 0c             	add    esp,0xc
c001f0b0:	c3                   	ret    
c001f0b1:	66 90                	xchg   ax,ax
c001f0b3:	66 90                	xchg   ax,ax
c001f0b5:	66 90                	xchg   ax,ax
c001f0b7:	66 90                	xchg   ax,ax
c001f0b9:	66 90                	xchg   ax,ax
c001f0bb:	66 90                	xchg   ax,ax
c001f0bd:	66 90                	xchg   ax,ax
c001f0bf:	90                   	nop

c001f0c0 <avxDetect>:
c001f0c0:	b8 01 00 00 00       	mov    eax,0x1
c001f0c5:	0f a2                	cpuid  
c001f0c7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f0cd:	74 15                	je     c001f0e4 <avxDetect.noAVX>
c001f0cf:	b8 01 00 00 00       	mov    eax,0x1
c001f0d4:	0f a2                	cpuid  
c001f0d6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f0dc:	74 06                	je     c001f0e4 <avxDetect.noAVX>
c001f0de:	b8 01 00 00 00       	mov    eax,0x1
c001f0e3:	c3                   	ret    

c001f0e4 <avxDetect.noAVX>:
c001f0e4:	b8 00 00 00 00       	mov    eax,0x0
c001f0e9:	c3                   	ret    

c001f0ea <avxSave>:
c001f0ea:	53                   	push   ebx
c001f0eb:	52                   	push   edx
c001f0ec:	31 c0                	xor    eax,eax
c001f0ee:	48                   	dec    eax
c001f0ef:	89 c2                	mov    edx,eax
c001f0f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0f5:	0f ae 23             	xsave  [ebx]
c001f0f8:	5a                   	pop    edx
c001f0f9:	5b                   	pop    ebx
c001f0fa:	c3                   	ret    

c001f0fb <avxLoad>:
c001f0fb:	53                   	push   ebx
c001f0fc:	52                   	push   edx
c001f0fd:	31 c0                	xor    eax,eax
c001f0ff:	48                   	dec    eax
c001f100:	89 c2                	mov    edx,eax
c001f102:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f106:	0f ae 2b             	xrstor [ebx]
c001f109:	5a                   	pop    edx
c001f10a:	5b                   	pop    ebx
c001f10b:	c3                   	ret    

c001f10c <avxInit>:
c001f10c:	e8 67 03 00 00       	call   c001f478 <sseInit>
c001f111:	50                   	push   eax
c001f112:	51                   	push   ecx
c001f113:	0f 20 e0             	mov    eax,cr4
c001f116:	0d 00 00 04 00       	or     eax,0x40000
c001f11b:	0f 22 e0             	mov    cr4,eax
c001f11e:	31 c9                	xor    ecx,ecx
c001f120:	0f 01 d0             	xgetbv 
c001f123:	0d 07 00 00 00       	or     eax,0x7
c001f128:	0f 01 d1             	xsetbv 
c001f12b:	59                   	pop    ecx
c001f12c:	58                   	pop    eax
c001f12d:	c3                   	ret    

c001f12e <avxClose>:
c001f12e:	c3                   	ret    

c001f12f <wouldSheSayYes>:
c001f12f:	c3                   	ret    
c001f130:	49                   	dec    ecx
c001f131:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f135:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f139:	75 20                	jne    c001f15b <isr0+0xb>
c001f13b:	4e                   	dec    esi
c001f13c:	79 61                	jns    c001f19f <isr7+0x3>
c001f13e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f143:	66 90                	xchg   ax,ax
c001f145:	66 90                	xchg   ax,ax
c001f147:	66 90                	xchg   ax,ax
c001f149:	66 90                	xchg   ax,ax
c001f14b:	66 90                	xchg   ax,ax
c001f14d:	66 90                	xchg   ax,ax
c001f14f:	90                   	nop

c001f150 <isr0>:
c001f150:	fa                   	cli    
c001f151:	68 00 00 00 00       	push   0x0
c001f156:	68 00 00 00 00       	push   0x0
c001f15b:	e9 56 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f160 <isr1>:
c001f160:	fa                   	cli    
c001f161:	6a 00                	push   0x0
c001f163:	6a 01                	push   0x1
c001f165:	e9 4c 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f16a <isr2>:
c001f16a:	fa                   	cli    
c001f16b:	6a 00                	push   0x0
c001f16d:	6a 02                	push   0x2
c001f16f:	e9 42 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f174 <isr3>:
c001f174:	fa                   	cli    
c001f175:	6a 00                	push   0x0
c001f177:	6a 03                	push   0x3
c001f179:	e9 38 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f17e <isr4>:
c001f17e:	fa                   	cli    
c001f17f:	6a 00                	push   0x0
c001f181:	6a 04                	push   0x4
c001f183:	e9 2e 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f188 <isr5>:
c001f188:	fa                   	cli    
c001f189:	6a 00                	push   0x0
c001f18b:	6a 05                	push   0x5
c001f18d:	e9 24 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f192 <isr6>:
c001f192:	fa                   	cli    
c001f193:	6a 00                	push   0x0
c001f195:	6a 06                	push   0x6
c001f197:	e9 1a 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f19c <isr7>:
c001f19c:	fa                   	cli    
c001f19d:	6a 00                	push   0x0
c001f19f:	6a 07                	push   0x7
c001f1a1:	e9 10 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1a6 <isr8>:
c001f1a6:	fa                   	cli    
c001f1a7:	6a 08                	push   0x8
c001f1a9:	e9 08 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1ae <isr9>:
c001f1ae:	fa                   	cli    
c001f1af:	6a 00                	push   0x0
c001f1b1:	6a 09                	push   0x9
c001f1b3:	e9 fe 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1b8 <isr10>:
c001f1b8:	fa                   	cli    
c001f1b9:	6a 0a                	push   0xa
c001f1bb:	e9 f6 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1c0 <isr11>:
c001f1c0:	fa                   	cli    
c001f1c1:	6a 0b                	push   0xb
c001f1c3:	e9 ee 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1c8 <isr12>:
c001f1c8:	fa                   	cli    
c001f1c9:	6a 0c                	push   0xc
c001f1cb:	e9 e6 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1d0 <isr13>:
c001f1d0:	fa                   	cli    
c001f1d1:	6a 0d                	push   0xd
c001f1d3:	53                   	push   ebx
c001f1d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f1d8:	81 fb a6 f3 01 c0    	cmp    ebx,0xc001f3a6
c001f1de:	5b                   	pop    ebx
c001f1df:	0f 84 c3 01 00 00    	je     c001f3a8 <finishSignal2>
c001f1e5:	e9 cc 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1ea <isr14>:
c001f1ea:	fa                   	cli    
c001f1eb:	6a 0e                	push   0xe
c001f1ed:	e9 c4 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1f2 <isr15>:
c001f1f2:	fa                   	cli    
c001f1f3:	6a 00                	push   0x0
c001f1f5:	6a 0f                	push   0xf
c001f1f7:	e9 ba 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1fc <isr16>:
c001f1fc:	fa                   	cli    
c001f1fd:	6a 00                	push   0x0
c001f1ff:	6a 10                	push   0x10
c001f201:	e9 b0 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f206 <isr17>:
c001f206:	fa                   	cli    
c001f207:	6a 00                	push   0x0
c001f209:	6a 11                	push   0x11
c001f20b:	e9 a6 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f210 <isr18>:
c001f210:	fa                   	cli    
c001f211:	6a 00                	push   0x0
c001f213:	6a 12                	push   0x12
c001f215:	e9 9c 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f21a <irq3>:
c001f21a:	fa                   	cli    
c001f21b:	6a 00                	push   0x0
c001f21d:	6a 23                	push   0x23
c001f21f:	e9 92 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f224 <irq4>:
c001f224:	fa                   	cli    
c001f225:	6a 00                	push   0x0
c001f227:	6a 24                	push   0x24
c001f229:	e9 88 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f22e <irq5>:
c001f22e:	fa                   	cli    
c001f22f:	6a 00                	push   0x0
c001f231:	6a 25                	push   0x25
c001f233:	e9 7e 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f238 <irq6>:
c001f238:	fa                   	cli    
c001f239:	6a 00                	push   0x0
c001f23b:	6a 26                	push   0x26
c001f23d:	e9 74 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f242 <irq7>:
c001f242:	fa                   	cli    
c001f243:	6a 00                	push   0x0
c001f245:	6a 27                	push   0x27
c001f247:	e9 6a 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f24c <irq8>:
c001f24c:	fa                   	cli    
c001f24d:	6a 00                	push   0x0
c001f24f:	6a 28                	push   0x28
c001f251:	e9 60 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f256 <irq9>:
c001f256:	fa                   	cli    
c001f257:	6a 00                	push   0x0
c001f259:	6a 29                	push   0x29
c001f25b:	e9 56 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f260 <irq10>:
c001f260:	fa                   	cli    
c001f261:	6a 00                	push   0x0
c001f263:	6a 2a                	push   0x2a
c001f265:	e9 4c 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f26a <irq11>:
c001f26a:	fa                   	cli    
c001f26b:	6a 00                	push   0x0
c001f26d:	6a 2b                	push   0x2b
c001f26f:	e9 42 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f274 <irq12>:
c001f274:	fa                   	cli    
c001f275:	6a 00                	push   0x0
c001f277:	6a 2c                	push   0x2c
c001f279:	e9 38 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f27e <irq13>:
c001f27e:	fa                   	cli    
c001f27f:	6a 00                	push   0x0
c001f281:	6a 2d                	push   0x2d
c001f283:	e9 2e 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f288 <irq14>:
c001f288:	fa                   	cli    
c001f289:	6a 00                	push   0x0
c001f28b:	6a 2e                	push   0x2e
c001f28d:	e9 24 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f292 <irq15>:
c001f292:	fa                   	cli    
c001f293:	6a 00                	push   0x0
c001f295:	6a 2f                	push   0x2f
c001f297:	e9 1a 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f29c <irq1>:
c001f29c:	fa                   	cli    
c001f29d:	6a 00                	push   0x0
c001f29f:	6a 21                	push   0x21
c001f2a1:	eb 13                	jmp    c001f2b6 <int_common_stub>

c001f2a3 <irq2>:
c001f2a3:	fa                   	cli    
c001f2a4:	6a 00                	push   0x0
c001f2a6:	6a 22                	push   0x22
c001f2a8:	eb 0c                	jmp    c001f2b6 <int_common_stub>

c001f2aa <isr96>:
c001f2aa:	6a 00                	push   0x0
c001f2ac:	6a 60                	push   0x60
c001f2ae:	fb                   	sti    
c001f2af:	eb 37                	jmp    c001f2e8 <syscall_common_stub>

c001f2b1 <irq0>:
c001f2b1:	fa                   	cli    
c001f2b2:	6a 00                	push   0x0
c001f2b4:	6a 20                	push   0x20

c001f2b6 <int_common_stub>:
c001f2b6:	60                   	pusha  
c001f2b7:	1e                   	push   ds
c001f2b8:	06                   	push   es
c001f2b9:	0f a0                	push   fs
c001f2bb:	0f a8                	push   gs
c001f2bd:	66 b8 10 00          	mov    ax,0x10
c001f2c1:	66 8e d8             	mov    ds,ax
c001f2c4:	66 8e c0             	mov    es,ax
c001f2c7:	66 8e e0             	mov    fs,ax
c001f2ca:	66 8e e8             	mov    gs,ax
c001f2cd:	54                   	push   esp
c001f2ce:	fc                   	cld    
c001f2cf:	e8 98 db fe ff       	call   c000ce6c <int_handler>
c001f2d4:	81 c4 04 00 00 00    	add    esp,0x4
c001f2da:	0f a9                	pop    gs
c001f2dc:	0f a1                	pop    fs
c001f2de:	07                   	pop    es
c001f2df:	1f                   	pop    ds
c001f2e0:	61                   	popa   
c001f2e1:	81 c4 08 00 00 00    	add    esp,0x8
c001f2e7:	cf                   	iret   

c001f2e8 <syscall_common_stub>:
c001f2e8:	60                   	pusha  
c001f2e9:	1e                   	push   ds
c001f2ea:	06                   	push   es
c001f2eb:	0f a0                	push   fs
c001f2ed:	0f a8                	push   gs
c001f2ef:	66 b8 10 00          	mov    ax,0x10
c001f2f3:	66 8e d8             	mov    ds,ax
c001f2f6:	66 8e c0             	mov    es,ax
c001f2f9:	66 8e e0             	mov    fs,ax
c001f2fc:	66 8e e8             	mov    gs,ax
c001f2ff:	54                   	push   esp
c001f300:	fc                   	cld    
c001f301:	e8 66 db fe ff       	call   c000ce6c <int_handler>
c001f306:	81 c4 04 00 00 00    	add    esp,0x4
c001f30c:	0f a9                	pop    gs
c001f30e:	0f a1                	pop    fs
c001f310:	07                   	pop    es
c001f311:	1f                   	pop    ds
c001f312:	e8 d8 28 ff ff       	call   c0011bef <KiCheckSignalZ>
c001f317:	3d 00 00 00 00       	cmp    eax,0x0
c001f31c:	0f 84 c0 00 00 00    	je     c001f3e2 <skipSignals>
c001f322:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f327:	61                   	popa   
c001f328:	53                   	push   ebx
c001f329:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f32f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f332:	5b                   	pop    ebx
c001f333:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f338:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f33b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f33e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f341:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f344:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f347:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f34a:	81 c4 08 00 00 00    	add    esp,0x8
c001f350:	5e                   	pop    esi
c001f351:	5b                   	pop    ebx
c001f352:	59                   	pop    ecx
c001f353:	5a                   	pop    edx
c001f354:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f357:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f35a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f35d:	52                   	push   edx
c001f35e:	51                   	push   ecx
c001f35f:	53                   	push   ebx
c001f360:	56                   	push   esi
c001f361:	81 ec 08 00 00 00    	sub    esp,0x8
c001f367:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f36a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f36d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f370:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f373:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f376:	60                   	pusha  
c001f377:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f37d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f380:	89 e3                	mov    ebx,esp
c001f382:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f385:	52                   	push   edx
c001f386:	68 a6 f3 01 c0       	push   0xc001f3a6
c001f38b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f38e:	89 dc                	mov    esp,ebx
c001f390:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f393:	68 23 00 00 00       	push   0x23
c001f398:	51                   	push   ecx
c001f399:	68 02 02 00 00       	push   0x202
c001f39e:	68 1b 00 00 00       	push   0x1b
c001f3a3:	ff 36                	push   DWORD PTR [esi]
c001f3a5:	cf                   	iret   

c001f3a6 <finishSignal>:
c001f3a6:	cd 0f                	int    0xf

c001f3a8 <finishSignal2>:
c001f3a8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f3ae:	e8 b9 28 ff ff       	call   c0011c6c <KiFinishSignalZ>
c001f3b3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f3b9:	68 23 00 00 00       	push   0x23
c001f3be:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f3c1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f3c4:	68 1b 00 00 00       	push   0x1b
c001f3c9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f3cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f3cf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f3d2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f3d5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f3d8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f3db:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f3de:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f3e1:	cf                   	iret   

c001f3e2 <skipSignals>:
c001f3e2:	61                   	popa   
c001f3e3:	81 c4 08 00 00 00    	add    esp,0x8
c001f3e9:	cf                   	iret   
c001f3ea:	90                   	nop
c001f3eb:	90                   	nop

c001f3ec <irq16>:
c001f3ec:	fa                   	cli    
c001f3ed:	6a 00                	push   0x0
c001f3ef:	6a 30                	push   0x30
c001f3f1:	e9 c0 fe ff ff       	jmp    c001f2b6 <int_common_stub>

c001f3f6 <irq17>:
c001f3f6:	fa                   	cli    
c001f3f7:	6a 00                	push   0x0
c001f3f9:	6a 31                	push   0x31
c001f3fb:	e9 b6 fe ff ff       	jmp    c001f2b6 <int_common_stub>

c001f400 <irq18>:
c001f400:	fa                   	cli    
c001f401:	6a 00                	push   0x0
c001f403:	6a 32                	push   0x32
c001f405:	e9 ac fe ff ff       	jmp    c001f2b6 <int_common_stub>

c001f40a <irq19>:
c001f40a:	fa                   	cli    
c001f40b:	6a 00                	push   0x0
c001f40d:	6a 33                	push   0x33
c001f40f:	e9 a2 fe ff ff       	jmp    c001f2b6 <int_common_stub>

c001f414 <irq20>:
c001f414:	fa                   	cli    
c001f415:	6a 00                	push   0x0
c001f417:	6a 34                	push   0x34
c001f419:	e9 98 fe ff ff       	jmp    c001f2b6 <int_common_stub>

c001f41e <irq21>:
c001f41e:	fa                   	cli    
c001f41f:	6a 00                	push   0x0
c001f421:	6a 35                	push   0x35
c001f423:	e9 8e fe ff ff       	jmp    c001f2b6 <int_common_stub>

c001f428 <irq22>:
c001f428:	fa                   	cli    
c001f429:	6a 00                	push   0x0
c001f42b:	6a 36                	push   0x36
c001f42d:	e9 84 fe ff ff       	jmp    c001f2b6 <int_common_stub>

c001f432 <irq23>:
c001f432:	fa                   	cli    
c001f433:	6a 00                	push   0x0
c001f435:	6a 37                	push   0x37
c001f437:	e9 7a fe ff ff       	jmp    c001f2b6 <int_common_stub>
c001f43c:	66 90                	xchg   ax,ax
c001f43e:	66 90                	xchg   ax,ax

c001f440 <i386GetRDRAND>:
c001f440:	b9 64 00 00 00       	mov    ecx,0x64

c001f445 <retry>:
c001f445:	0f c7 f0             	rdrand eax
c001f448:	72 05                	jb     c001f44f <retry.done>
c001f44a:	e2 f9                	loop   c001f445 <retry>

c001f44c <retry.fail>:
c001f44c:	31 c0                	xor    eax,eax
c001f44e:	c3                   	ret    

c001f44f <retry.done>:
c001f44f:	c3                   	ret    

c001f450 <absolutelyNoChanceInHell>:
c001f450:	b8 01 00 00 00       	mov    eax,0x1
c001f455:	0f a2                	cpuid  
c001f457:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f45d:	74 06                	je     c001f465 <sseDetect.noSSE>
c001f45f:	b8 01 00 00 00       	mov    eax,0x1
c001f464:	c3                   	ret    

c001f465 <sseDetect.noSSE>:
c001f465:	31 c0                	xor    eax,eax
c001f467:	c3                   	ret    

c001f468 <sseSave>:
c001f468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f46c:	0f ae 00             	fxsave [eax]
c001f46f:	c3                   	ret    

c001f470 <sseLoad>:
c001f470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f474:	0f ae 08             	fxrstor [eax]
c001f477:	c3                   	ret    

c001f478 <sseInit>:
c001f478:	e8 42 00 00 00       	call   c001f4bf <x87Init>
c001f47d:	0f 20 e0             	mov    eax,cr4
c001f480:	66 0d 00 06          	or     ax,0x600
c001f484:	0f 22 e0             	mov    cr4,eax
c001f487:	c3                   	ret    

c001f488 <sseClose>:
c001f488:	c3                   	ret    
c001f489:	66 90                	xchg   ax,ax
c001f48b:	66 90                	xchg   ax,ax
c001f48d:	66 90                	xchg   ax,ax
c001f48f:	90                   	nop

c001f490 <value_37F>:
c001f490:	7f 03                	jg     c001f495 <value_37A+0x1>

c001f492 <value_37E>:
c001f492:	7e 03                	jle    c001f497 <x87Detect+0x1>

c001f494 <value_37A>:
c001f494:	7a 03                	jp     c001f499 <x87Detect+0x3>

c001f496 <x87Detect>:
c001f496:	b8 01 00 00 00       	mov    eax,0x1
c001f49b:	0f a2                	cpuid  
c001f49d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f4a3:	74 06                	je     c001f4ab <x87Detect.nox87>
c001f4a5:	b8 01 00 00 00       	mov    eax,0x1
c001f4aa:	c3                   	ret    

c001f4ab <x87Detect.nox87>:
c001f4ab:	b8 00 00 00 00       	mov    eax,0x0
c001f4b0:	c3                   	ret    

c001f4b1 <x87Save>:
c001f4b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4b5:	dd 30                	fnsave [eax]
c001f4b7:	c3                   	ret    

c001f4b8 <x87Load>:
c001f4b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4bc:	dd 20                	frstor [eax]
c001f4be:	c3                   	ret    

c001f4bf <x87Init>:
c001f4bf:	0f 20 c0             	mov    eax,cr0
c001f4c2:	66 25 fb ff          	and    ax,0xfffb
c001f4c6:	66 0d 22 00          	or     ax,0x22
c001f4ca:	0f 22 c0             	mov    cr0,eax
c001f4cd:	db e3                	fninit 
c001f4cf:	0f 06                	clts   
c001f4d1:	d9 2d 94 f4 01 c0    	fldcw  WORD PTR ds:0xc001f494
c001f4d7:	c3                   	ret    

c001f4d8 <x87Close>:
c001f4d8:	c3                   	ret    
c001f4d9:	66 90                	xchg   ax,ax
c001f4db:	90                   	nop

c001f4dc <__do_global_ctors_aux>:
c001f4dc:	a1 90 04 02 c0       	mov    eax,ds:0xc0020490
c001f4e1:	83 f8 ff             	cmp    eax,0xffffffff
c001f4e4:	74 1a                	je     c001f500 <__do_global_ctors_aux+0x24>
c001f4e6:	55                   	push   ebp
c001f4e7:	89 e5                	mov    ebp,esp
c001f4e9:	53                   	push   ebx
c001f4ea:	52                   	push   edx
c001f4eb:	bb 90 04 02 c0       	mov    ebx,0xc0020490
c001f4f0:	ff d0                	call   eax
c001f4f2:	83 eb 04             	sub    ebx,0x4
c001f4f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f4f7:	83 f8 ff             	cmp    eax,0xffffffff
c001f4fa:	75 f4                	jne    c001f4f0 <__do_global_ctors_aux+0x14>
c001f4fc:	58                   	pop    eax
c001f4fd:	5b                   	pop    ebx
c001f4fe:	5d                   	pop    ebp
c001f4ff:	c3                   	ret    
c001f500:	c3                   	ret    
c001f501:	66 90                	xchg   ax,ax
c001f503:	90                   	nop

c001f504 <__divdi3>:
c001f504:	55                   	push   ebp
c001f505:	57                   	push   edi
c001f506:	56                   	push   esi
c001f507:	53                   	push   ebx
c001f508:	83 ec 1c             	sub    esp,0x1c
c001f50b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f50f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f513:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f516:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f51a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f51e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f522:	85 db                	test   ebx,ebx
c001f524:	0f 88 8e 00 00 00    	js     c001f5b8 <__divdi3+0xb4>
c001f52a:	89 dd                	mov    ebp,ebx
c001f52c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f534:	89 d3                	mov    ebx,edx
c001f536:	85 d2                	test   edx,edx
c001f538:	79 0d                	jns    c001f547 <__divdi3+0x43>
c001f53a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f53e:	f7 d8                	neg    eax
c001f540:	83 d2 00             	adc    edx,0x0
c001f543:	f7 da                	neg    edx
c001f545:	89 d3                	mov    ebx,edx
c001f547:	89 c7                	mov    edi,eax
c001f549:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f54c:	85 db                	test   ebx,ebx
c001f54e:	75 48                	jne    c001f598 <__divdi3+0x94>
c001f550:	39 ef                	cmp    edi,ebp
c001f552:	76 24                	jbe    c001f578 <__divdi3+0x74>
c001f554:	89 ea                	mov    edx,ebp
c001f556:	f7 f7                	div    edi
c001f558:	89 c1                	mov    ecx,eax
c001f55a:	31 f6                	xor    esi,esi
c001f55c:	89 c8                	mov    eax,ecx
c001f55e:	89 f2                	mov    edx,esi
c001f560:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f564:	85 c9                	test   ecx,ecx
c001f566:	74 07                	je     c001f56f <__divdi3+0x6b>
c001f568:	f7 d8                	neg    eax
c001f56a:	83 d2 00             	adc    edx,0x0
c001f56d:	f7 da                	neg    edx
c001f56f:	83 c4 1c             	add    esp,0x1c
c001f572:	5b                   	pop    ebx
c001f573:	5e                   	pop    esi
c001f574:	5f                   	pop    edi
c001f575:	5d                   	pop    ebp
c001f576:	c3                   	ret    
c001f577:	90                   	nop
c001f578:	85 ff                	test   edi,edi
c001f57a:	75 0b                	jne    c001f587 <__divdi3+0x83>
c001f57c:	b8 01 00 00 00       	mov    eax,0x1
c001f581:	31 d2                	xor    edx,edx
c001f583:	f7 f3                	div    ebx
c001f585:	89 c7                	mov    edi,eax
c001f587:	31 d2                	xor    edx,edx
c001f589:	89 e8                	mov    eax,ebp
c001f58b:	f7 f7                	div    edi
c001f58d:	89 c6                	mov    esi,eax
c001f58f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f592:	f7 f7                	div    edi
c001f594:	89 c1                	mov    ecx,eax
c001f596:	eb c4                	jmp    c001f55c <__divdi3+0x58>
c001f598:	39 eb                	cmp    ebx,ebp
c001f59a:	77 3c                	ja     c001f5d8 <__divdi3+0xd4>
c001f59c:	0f bd f3             	bsr    esi,ebx
c001f59f:	83 f6 1f             	xor    esi,0x1f
c001f5a2:	75 40                	jne    c001f5e4 <__divdi3+0xe0>
c001f5a4:	39 eb                	cmp    ebx,ebp
c001f5a6:	72 09                	jb     c001f5b1 <__divdi3+0xad>
c001f5a8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f5ab:	0f 87 97 00 00 00    	ja     c001f648 <__divdi3+0x144>
c001f5b1:	b9 01 00 00 00       	mov    ecx,0x1
c001f5b6:	eb a4                	jmp    c001f55c <__divdi3+0x58>
c001f5b8:	f7 d9                	neg    ecx
c001f5ba:	83 d3 00             	adc    ebx,0x0
c001f5bd:	f7 db                	neg    ebx
c001f5bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f5c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f5c6:	89 dd                	mov    ebp,ebx
c001f5c8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f5d0:	e9 5f ff ff ff       	jmp    c001f534 <__divdi3+0x30>
c001f5d5:	8d 76 00             	lea    esi,[esi+0x0]
c001f5d8:	31 f6                	xor    esi,esi
c001f5da:	31 c9                	xor    ecx,ecx
c001f5dc:	e9 7b ff ff ff       	jmp    c001f55c <__divdi3+0x58>
c001f5e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f5e4:	b8 20 00 00 00       	mov    eax,0x20
c001f5e9:	29 f0                	sub    eax,esi
c001f5eb:	89 f1                	mov    ecx,esi
c001f5ed:	d3 e3                	shl    ebx,cl
c001f5ef:	89 fa                	mov    edx,edi
c001f5f1:	88 c1                	mov    cl,al
c001f5f3:	d3 ea                	shr    edx,cl
c001f5f5:	09 da                	or     edx,ebx
c001f5f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f5fb:	89 f1                	mov    ecx,esi
c001f5fd:	d3 e7                	shl    edi,cl
c001f5ff:	89 eb                	mov    ebx,ebp
c001f601:	88 c1                	mov    cl,al
c001f603:	d3 eb                	shr    ebx,cl
c001f605:	89 f1                	mov    ecx,esi
c001f607:	d3 e5                	shl    ebp,cl
c001f609:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f60c:	88 c1                	mov    cl,al
c001f60e:	d3 ea                	shr    edx,cl
c001f610:	09 d5                	or     ebp,edx
c001f612:	89 e8                	mov    eax,ebp
c001f614:	89 da                	mov    edx,ebx
c001f616:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f61a:	89 d3                	mov    ebx,edx
c001f61c:	89 c5                	mov    ebp,eax
c001f61e:	f7 e7                	mul    edi
c001f620:	39 d3                	cmp    ebx,edx
c001f622:	72 18                	jb     c001f63c <__divdi3+0x138>
c001f624:	74 0a                	je     c001f630 <__divdi3+0x12c>
c001f626:	89 e9                	mov    ecx,ebp
c001f628:	31 f6                	xor    esi,esi
c001f62a:	e9 2d ff ff ff       	jmp    c001f55c <__divdi3+0x58>
c001f62f:	90                   	nop
c001f630:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f633:	89 f1                	mov    ecx,esi
c001f635:	d3 e7                	shl    edi,cl
c001f637:	39 c7                	cmp    edi,eax
c001f639:	73 eb                	jae    c001f626 <__divdi3+0x122>
c001f63b:	90                   	nop
c001f63c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f63f:	31 f6                	xor    esi,esi
c001f641:	e9 16 ff ff ff       	jmp    c001f55c <__divdi3+0x58>
c001f646:	66 90                	xchg   ax,ax
c001f648:	31 c9                	xor    ecx,ecx
c001f64a:	e9 0d ff ff ff       	jmp    c001f55c <__divdi3+0x58>
c001f64f:	90                   	nop

c001f650 <__moddi3>:
c001f650:	55                   	push   ebp
c001f651:	57                   	push   edi
c001f652:	56                   	push   esi
c001f653:	53                   	push   ebx
c001f654:	83 ec 2c             	sub    esp,0x2c
c001f657:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f65b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f65f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f663:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f667:	85 db                	test   ebx,ebx
c001f669:	0f 88 85 00 00 00    	js     c001f6f4 <__moddi3+0xa4>
c001f66f:	89 de                	mov    esi,ebx
c001f671:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f679:	89 d7                	mov    edi,edx
c001f67b:	85 d2                	test   edx,edx
c001f67d:	79 09                	jns    c001f688 <__moddi3+0x38>
c001f67f:	f7 d8                	neg    eax
c001f681:	83 d2 00             	adc    edx,0x0
c001f684:	f7 da                	neg    edx
c001f686:	89 d7                	mov    edi,edx
c001f688:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f68c:	89 cd                	mov    ebp,ecx
c001f68e:	85 ff                	test   edi,edi
c001f690:	75 52                	jne    c001f6e4 <__moddi3+0x94>
c001f692:	89 c3                	mov    ebx,eax
c001f694:	39 f0                	cmp    eax,esi
c001f696:	76 24                	jbe    c001f6bc <__moddi3+0x6c>
c001f698:	89 c8                	mov    eax,ecx
c001f69a:	89 f2                	mov    edx,esi
c001f69c:	f7 f3                	div    ebx
c001f69e:	89 d6                	mov    esi,edx
c001f6a0:	89 f0                	mov    eax,esi
c001f6a2:	31 d2                	xor    edx,edx
c001f6a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6a8:	85 c9                	test   ecx,ecx
c001f6aa:	74 07                	je     c001f6b3 <__moddi3+0x63>
c001f6ac:	f7 d8                	neg    eax
c001f6ae:	83 d2 00             	adc    edx,0x0
c001f6b1:	f7 da                	neg    edx
c001f6b3:	83 c4 2c             	add    esp,0x2c
c001f6b6:	5b                   	pop    ebx
c001f6b7:	5e                   	pop    esi
c001f6b8:	5f                   	pop    edi
c001f6b9:	5d                   	pop    ebp
c001f6ba:	c3                   	ret    
c001f6bb:	90                   	nop
c001f6bc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f6c0:	85 db                	test   ebx,ebx
c001f6c2:	75 0d                	jne    c001f6d1 <__moddi3+0x81>
c001f6c4:	b8 01 00 00 00       	mov    eax,0x1
c001f6c9:	31 d2                	xor    edx,edx
c001f6cb:	f7 f7                	div    edi
c001f6cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6d1:	89 f0                	mov    eax,esi
c001f6d3:	31 d2                	xor    edx,edx
c001f6d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f6d9:	f7 f7                	div    edi
c001f6db:	89 e8                	mov    eax,ebp
c001f6dd:	f7 f7                	div    edi
c001f6df:	89 d6                	mov    esi,edx
c001f6e1:	eb bd                	jmp    c001f6a0 <__moddi3+0x50>
c001f6e3:	90                   	nop
c001f6e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f6e8:	39 f7                	cmp    edi,esi
c001f6ea:	76 20                	jbe    c001f70c <__moddi3+0xbc>
c001f6ec:	89 c8                	mov    eax,ecx
c001f6ee:	89 f2                	mov    edx,esi
c001f6f0:	eb b2                	jmp    c001f6a4 <__moddi3+0x54>
c001f6f2:	66 90                	xchg   ax,ax
c001f6f4:	f7 d9                	neg    ecx
c001f6f6:	83 d3 00             	adc    ebx,0x0
c001f6f9:	f7 db                	neg    ebx
c001f6fb:	89 de                	mov    esi,ebx
c001f6fd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f705:	e9 6f ff ff ff       	jmp    c001f679 <__moddi3+0x29>
c001f70a:	66 90                	xchg   ax,ax
c001f70c:	0f bd c7             	bsr    eax,edi
c001f70f:	83 f0 1f             	xor    eax,0x1f
c001f712:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f716:	75 24                	jne    c001f73c <__moddi3+0xec>
c001f718:	39 f7                	cmp    edi,esi
c001f71a:	72 06                	jb     c001f722 <__moddi3+0xd2>
c001f71c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f720:	77 0c                	ja     c001f72e <__moddi3+0xde>
c001f722:	89 e9                	mov    ecx,ebp
c001f724:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f728:	19 fe                	sbb    esi,edi
c001f72a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f72e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f732:	89 f2                	mov    edx,esi
c001f734:	e9 6b ff ff ff       	jmp    c001f6a4 <__moddi3+0x54>
c001f739:	8d 76 00             	lea    esi,[esi+0x0]
c001f73c:	b8 20 00 00 00       	mov    eax,0x20
c001f741:	89 c2                	mov    edx,eax
c001f743:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f747:	29 da                	sub    edx,ebx
c001f749:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f74d:	88 d9                	mov    cl,bl
c001f74f:	d3 e7                	shl    edi,cl
c001f751:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f755:	88 d1                	mov    cl,dl
c001f757:	d3 e8                	shr    eax,cl
c001f759:	09 c7                	or     edi,eax
c001f75b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f75f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f763:	89 d8                	mov    eax,ebx
c001f765:	88 d9                	mov    cl,bl
c001f767:	d3 e7                	shl    edi,cl
c001f769:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f76d:	89 f3                	mov    ebx,esi
c001f76f:	88 d1                	mov    cl,dl
c001f771:	d3 eb                	shr    ebx,cl
c001f773:	89 c7                	mov    edi,eax
c001f775:	88 c1                	mov    cl,al
c001f777:	d3 e6                	shl    esi,cl
c001f779:	89 e8                	mov    eax,ebp
c001f77b:	88 d1                	mov    cl,dl
c001f77d:	d3 e8                	shr    eax,cl
c001f77f:	09 f0                	or     eax,esi
c001f781:	89 f9                	mov    ecx,edi
c001f783:	d3 e5                	shl    ebp,cl
c001f785:	89 da                	mov    edx,ebx
c001f787:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f78b:	89 d3                	mov    ebx,edx
c001f78d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f791:	89 c6                	mov    esi,eax
c001f793:	89 d1                	mov    ecx,edx
c001f795:	39 d3                	cmp    ebx,edx
c001f797:	72 27                	jb     c001f7c0 <__moddi3+0x170>
c001f799:	74 21                	je     c001f7bc <__moddi3+0x16c>
c001f79b:	29 f5                	sub    ebp,esi
c001f79d:	19 cb                	sbb    ebx,ecx
c001f79f:	89 de                	mov    esi,ebx
c001f7a1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f7a5:	d3 e6                	shl    esi,cl
c001f7a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f7ab:	89 f9                	mov    ecx,edi
c001f7ad:	d3 ed                	shr    ebp,cl
c001f7af:	09 ee                	or     esi,ebp
c001f7b1:	89 f0                	mov    eax,esi
c001f7b3:	d3 eb                	shr    ebx,cl
c001f7b5:	89 da                	mov    edx,ebx
c001f7b7:	e9 e8 fe ff ff       	jmp    c001f6a4 <__moddi3+0x54>
c001f7bc:	39 c5                	cmp    ebp,eax
c001f7be:	73 db                	jae    c001f79b <__moddi3+0x14b>
c001f7c0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f7c4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f7c8:	89 d1                	mov    ecx,edx
c001f7ca:	89 c6                	mov    esi,eax
c001f7cc:	eb cd                	jmp    c001f79b <__moddi3+0x14b>
c001f7ce:	66 90                	xchg   ax,ax

c001f7d0 <__udivdi3>:
c001f7d0:	55                   	push   ebp
c001f7d1:	57                   	push   edi
c001f7d2:	56                   	push   esi
c001f7d3:	53                   	push   ebx
c001f7d4:	83 ec 1c             	sub    esp,0x1c
c001f7d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f7db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f7df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f7e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f7e7:	85 d2                	test   edx,edx
c001f7e9:	75 41                	jne    c001f82c <__udivdi3+0x5c>
c001f7eb:	39 f7                	cmp    edi,esi
c001f7ed:	76 15                	jbe    c001f804 <__udivdi3+0x34>
c001f7ef:	89 e8                	mov    eax,ebp
c001f7f1:	89 f2                	mov    edx,esi
c001f7f3:	f7 f7                	div    edi
c001f7f5:	31 db                	xor    ebx,ebx
c001f7f7:	89 da                	mov    edx,ebx
c001f7f9:	83 c4 1c             	add    esp,0x1c
c001f7fc:	5b                   	pop    ebx
c001f7fd:	5e                   	pop    esi
c001f7fe:	5f                   	pop    edi
c001f7ff:	5d                   	pop    ebp
c001f800:	c3                   	ret    
c001f801:	8d 76 00             	lea    esi,[esi+0x0]
c001f804:	89 f9                	mov    ecx,edi
c001f806:	85 ff                	test   edi,edi
c001f808:	75 0b                	jne    c001f815 <__udivdi3+0x45>
c001f80a:	b8 01 00 00 00       	mov    eax,0x1
c001f80f:	31 d2                	xor    edx,edx
c001f811:	f7 f7                	div    edi
c001f813:	89 c1                	mov    ecx,eax
c001f815:	31 d2                	xor    edx,edx
c001f817:	89 f0                	mov    eax,esi
c001f819:	f7 f1                	div    ecx
c001f81b:	89 c3                	mov    ebx,eax
c001f81d:	89 e8                	mov    eax,ebp
c001f81f:	f7 f1                	div    ecx
c001f821:	89 da                	mov    edx,ebx
c001f823:	83 c4 1c             	add    esp,0x1c
c001f826:	5b                   	pop    ebx
c001f827:	5e                   	pop    esi
c001f828:	5f                   	pop    edi
c001f829:	5d                   	pop    ebp
c001f82a:	c3                   	ret    
c001f82b:	90                   	nop
c001f82c:	39 f2                	cmp    edx,esi
c001f82e:	77 1c                	ja     c001f84c <__udivdi3+0x7c>
c001f830:	0f bd da             	bsr    ebx,edx
c001f833:	83 f3 1f             	xor    ebx,0x1f
c001f836:	75 24                	jne    c001f85c <__udivdi3+0x8c>
c001f838:	39 f2                	cmp    edx,esi
c001f83a:	72 08                	jb     c001f844 <__udivdi3+0x74>
c001f83c:	39 ef                	cmp    edi,ebp
c001f83e:	0f 87 84 00 00 00    	ja     c001f8c8 <__udivdi3+0xf8>
c001f844:	b8 01 00 00 00       	mov    eax,0x1
c001f849:	eb ac                	jmp    c001f7f7 <__udivdi3+0x27>
c001f84b:	90                   	nop
c001f84c:	31 db                	xor    ebx,ebx
c001f84e:	31 c0                	xor    eax,eax
c001f850:	89 da                	mov    edx,ebx
c001f852:	83 c4 1c             	add    esp,0x1c
c001f855:	5b                   	pop    ebx
c001f856:	5e                   	pop    esi
c001f857:	5f                   	pop    edi
c001f858:	5d                   	pop    ebp
c001f859:	c3                   	ret    
c001f85a:	66 90                	xchg   ax,ax
c001f85c:	b8 20 00 00 00       	mov    eax,0x20
c001f861:	29 d8                	sub    eax,ebx
c001f863:	88 d9                	mov    cl,bl
c001f865:	d3 e2                	shl    edx,cl
c001f867:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f86b:	89 fa                	mov    edx,edi
c001f86d:	88 c1                	mov    cl,al
c001f86f:	d3 ea                	shr    edx,cl
c001f871:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f875:	09 d1                	or     ecx,edx
c001f877:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f87b:	88 d9                	mov    cl,bl
c001f87d:	d3 e7                	shl    edi,cl
c001f87f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f883:	89 f7                	mov    edi,esi
c001f885:	88 c1                	mov    cl,al
c001f887:	d3 ef                	shr    edi,cl
c001f889:	88 d9                	mov    cl,bl
c001f88b:	d3 e6                	shl    esi,cl
c001f88d:	89 ea                	mov    edx,ebp
c001f88f:	88 c1                	mov    cl,al
c001f891:	d3 ea                	shr    edx,cl
c001f893:	09 d6                	or     esi,edx
c001f895:	89 f0                	mov    eax,esi
c001f897:	89 fa                	mov    edx,edi
c001f899:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f89d:	89 d7                	mov    edi,edx
c001f89f:	89 c6                	mov    esi,eax
c001f8a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f8a5:	39 d7                	cmp    edi,edx
c001f8a7:	72 13                	jb     c001f8bc <__udivdi3+0xec>
c001f8a9:	74 09                	je     c001f8b4 <__udivdi3+0xe4>
c001f8ab:	89 f0                	mov    eax,esi
c001f8ad:	31 db                	xor    ebx,ebx
c001f8af:	e9 43 ff ff ff       	jmp    c001f7f7 <__udivdi3+0x27>
c001f8b4:	88 d9                	mov    cl,bl
c001f8b6:	d3 e5                	shl    ebp,cl
c001f8b8:	39 c5                	cmp    ebp,eax
c001f8ba:	73 ef                	jae    c001f8ab <__udivdi3+0xdb>
c001f8bc:	8d 46 ff             	lea    eax,[esi-0x1]
c001f8bf:	31 db                	xor    ebx,ebx
c001f8c1:	e9 31 ff ff ff       	jmp    c001f7f7 <__udivdi3+0x27>
c001f8c6:	66 90                	xchg   ax,ax
c001f8c8:	31 c0                	xor    eax,eax
c001f8ca:	e9 28 ff ff ff       	jmp    c001f7f7 <__udivdi3+0x27>
c001f8cf:	90                   	nop

c001f8d0 <__umoddi3>:
c001f8d0:	55                   	push   ebp
c001f8d1:	57                   	push   edi
c001f8d2:	56                   	push   esi
c001f8d3:	53                   	push   ebx
c001f8d4:	83 ec 1c             	sub    esp,0x1c
c001f8d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f8db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f8df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f8e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f8e7:	89 da                	mov    edx,ebx
c001f8e9:	85 c0                	test   eax,eax
c001f8eb:	75 37                	jne    c001f924 <__umoddi3+0x54>
c001f8ed:	39 df                	cmp    edi,ebx
c001f8ef:	76 13                	jbe    c001f904 <__umoddi3+0x34>
c001f8f1:	89 f0                	mov    eax,esi
c001f8f3:	f7 f7                	div    edi
c001f8f5:	89 d0                	mov    eax,edx
c001f8f7:	31 d2                	xor    edx,edx
c001f8f9:	83 c4 1c             	add    esp,0x1c
c001f8fc:	5b                   	pop    ebx
c001f8fd:	5e                   	pop    esi
c001f8fe:	5f                   	pop    edi
c001f8ff:	5d                   	pop    ebp
c001f900:	c3                   	ret    
c001f901:	8d 76 00             	lea    esi,[esi+0x0]
c001f904:	89 fd                	mov    ebp,edi
c001f906:	85 ff                	test   edi,edi
c001f908:	75 0b                	jne    c001f915 <__umoddi3+0x45>
c001f90a:	b8 01 00 00 00       	mov    eax,0x1
c001f90f:	31 d2                	xor    edx,edx
c001f911:	f7 f7                	div    edi
c001f913:	89 c5                	mov    ebp,eax
c001f915:	89 d8                	mov    eax,ebx
c001f917:	31 d2                	xor    edx,edx
c001f919:	f7 f5                	div    ebp
c001f91b:	89 f0                	mov    eax,esi
c001f91d:	f7 f5                	div    ebp
c001f91f:	89 d0                	mov    eax,edx
c001f921:	eb d4                	jmp    c001f8f7 <__umoddi3+0x27>
c001f923:	90                   	nop
c001f924:	89 f1                	mov    ecx,esi
c001f926:	39 d8                	cmp    eax,ebx
c001f928:	76 0a                	jbe    c001f934 <__umoddi3+0x64>
c001f92a:	89 f0                	mov    eax,esi
c001f92c:	83 c4 1c             	add    esp,0x1c
c001f92f:	5b                   	pop    ebx
c001f930:	5e                   	pop    esi
c001f931:	5f                   	pop    edi
c001f932:	5d                   	pop    ebp
c001f933:	c3                   	ret    
c001f934:	0f bd e8             	bsr    ebp,eax
c001f937:	83 f5 1f             	xor    ebp,0x1f
c001f93a:	75 1c                	jne    c001f958 <__umoddi3+0x88>
c001f93c:	39 d8                	cmp    eax,ebx
c001f93e:	72 04                	jb     c001f944 <__umoddi3+0x74>
c001f940:	39 f7                	cmp    edi,esi
c001f942:	77 08                	ja     c001f94c <__umoddi3+0x7c>
c001f944:	89 da                	mov    edx,ebx
c001f946:	29 fe                	sub    esi,edi
c001f948:	19 c2                	sbb    edx,eax
c001f94a:	89 f1                	mov    ecx,esi
c001f94c:	89 c8                	mov    eax,ecx
c001f94e:	83 c4 1c             	add    esp,0x1c
c001f951:	5b                   	pop    ebx
c001f952:	5e                   	pop    esi
c001f953:	5f                   	pop    edi
c001f954:	5d                   	pop    ebp
c001f955:	c3                   	ret    
c001f956:	66 90                	xchg   ax,ax
c001f958:	ba 20 00 00 00       	mov    edx,0x20
c001f95d:	29 ea                	sub    edx,ebp
c001f95f:	89 e9                	mov    ecx,ebp
c001f961:	d3 e0                	shl    eax,cl
c001f963:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f967:	89 f8                	mov    eax,edi
c001f969:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f96d:	88 d1                	mov    cl,dl
c001f96f:	d3 e8                	shr    eax,cl
c001f971:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f975:	09 c1                	or     ecx,eax
c001f977:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f97b:	89 e9                	mov    ecx,ebp
c001f97d:	d3 e7                	shl    edi,cl
c001f97f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f983:	89 d8                	mov    eax,ebx
c001f985:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f989:	88 d1                	mov    cl,dl
c001f98b:	d3 e8                	shr    eax,cl
c001f98d:	89 c7                	mov    edi,eax
c001f98f:	89 e9                	mov    ecx,ebp
c001f991:	d3 e3                	shl    ebx,cl
c001f993:	89 f0                	mov    eax,esi
c001f995:	88 d1                	mov    cl,dl
c001f997:	d3 e8                	shr    eax,cl
c001f999:	09 d8                	or     eax,ebx
c001f99b:	89 e9                	mov    ecx,ebp
c001f99d:	d3 e6                	shl    esi,cl
c001f99f:	89 f3                	mov    ebx,esi
c001f9a1:	89 fa                	mov    edx,edi
c001f9a3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f9a7:	89 d1                	mov    ecx,edx
c001f9a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f9ad:	89 c6                	mov    esi,eax
c001f9af:	89 d7                	mov    edi,edx
c001f9b1:	39 d1                	cmp    ecx,edx
c001f9b3:	72 27                	jb     c001f9dc <__umoddi3+0x10c>
c001f9b5:	74 21                	je     c001f9d8 <__umoddi3+0x108>
c001f9b7:	89 ca                	mov    edx,ecx
c001f9b9:	29 f3                	sub    ebx,esi
c001f9bb:	19 fa                	sbb    edx,edi
c001f9bd:	89 d0                	mov    eax,edx
c001f9bf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f9c3:	d3 e0                	shl    eax,cl
c001f9c5:	89 e9                	mov    ecx,ebp
c001f9c7:	d3 eb                	shr    ebx,cl
c001f9c9:	09 d8                	or     eax,ebx
c001f9cb:	d3 ea                	shr    edx,cl
c001f9cd:	83 c4 1c             	add    esp,0x1c
c001f9d0:	5b                   	pop    ebx
c001f9d1:	5e                   	pop    esi
c001f9d2:	5f                   	pop    edi
c001f9d3:	5d                   	pop    ebp
c001f9d4:	c3                   	ret    
c001f9d5:	8d 76 00             	lea    esi,[esi+0x0]
c001f9d8:	39 c3                	cmp    ebx,eax
c001f9da:	73 db                	jae    c001f9b7 <__umoddi3+0xe7>
c001f9dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f9e0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f9e4:	89 d7                	mov    edi,edx
c001f9e6:	89 c6                	mov    esi,eax
c001f9e8:	eb cd                	jmp    c001f9b7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f9ea <_init>:
c001f9ea:	55                   	push   ebp
c001f9eb:	89 e5                	mov    ebp,esp
c001f9ed:	e8 02 07 fe ff       	call   c00000f4 <frame_dummy>
c001f9f2:	e8 e5 fa ff ff       	call   c001f4dc <__do_global_ctors_aux>
c001f9f7:	5d                   	pop    ebp
c001f9f8:	c3                   	ret    

Disassembly of section .fini:

c001f9f9 <_fini>:
c001f9f9:	55                   	push   ebp
c001f9fa:	89 e5                	mov    ebp,esp
c001f9fc:	e8 83 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fa01:	5d                   	pop    ebp
c001fa02:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001fa04 <Computer::~Computer()>:
c001fa04:	83 ec 0c             	sub    esp,0xc
c001fa07:	ba 40 0d 02 c0       	mov    edx,0xc0020d40
c001fa0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa10:	89 10                	mov    DWORD PTR [eax],edx
c001fa12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa16:	83 ec 0c             	sub    esp,0xc
c001fa19:	50                   	push   eax
c001fa1a:	e8 a3 ce fe ff       	call   c000c8c2 <Device::~Device()>
c001fa1f:	83 c4 10             	add    esp,0x10
c001fa22:	90                   	nop
c001fa23:	83 c4 0c             	add    esp,0xc
c001fa26:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001fa28 <Computer::~Computer()>:
c001fa28:	83 ec 0c             	sub    esp,0xc
c001fa2b:	83 ec 0c             	sub    esp,0xc
c001fa2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa32:	e8 cd ff ff ff       	call   c001fa04 <Computer::~Computer()>
c001fa37:	83 c4 10             	add    esp,0x10
c001fa3a:	83 ec 08             	sub    esp,0x8
c001fa3d:	68 70 01 00 00       	push   0x170
c001fa42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa46:	e8 e1 ad fe ff       	call   c000a82c <operator delete(void*, unsigned long)>
c001fa4b:	83 c4 10             	add    esp,0x10
c001fa4e:	83 c4 0c             	add    esp,0xc
c001fa51:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001fa52 <idleCommon()>:
c001fa52:	83 ec 0c             	sub    esp,0xc
c001fa55:	fa                   	cli    
c001fa56:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001fa5c:	e8 ab 66 ff ff       	call   c001610c <schedule()>
c001fa61:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fa66:	48                   	dec    eax
c001fa67:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001fa6c:	75 01                	jne    c001fa6f <idleCommon()+0x1d>
c001fa6e:	fb                   	sti    
c001fa6f:	83 c4 0c             	add    esp,0xc
c001fa72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fa74 <LinkedList<UnixFile>::~LinkedList()>:
c001fa74:	90                   	nop
c001fa75:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fa76 <LinkedList<UnixFile>::LinkedList()>:
c001fa76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa8f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001faab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faaf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fab6:	90                   	nop
c001fab7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fab8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fab8:	83 ec 0c             	sub    esp,0xc
c001fabb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fac0:	75 10                	jne    c001fad2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fac2:	83 ec 0c             	sub    esp,0xc
c001fac5:	68 54 0f 02 c0       	push   0xc0020f54
c001faca:	e8 10 1b ff ff       	call   c00115df <KePanic(char const*)>
c001facf:	83 c4 10             	add    esp,0x10
c001fad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad6:	8b 00                	mov    eax,DWORD PTR [eax]
c001fad8:	85 c0                	test   eax,eax
c001fada:	74 34                	je     c001fb10 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fae3:	85 c0                	test   eax,eax
c001fae5:	74 29                	je     c001fb10 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faeb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faf2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001faf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fafd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb0e:	eb 65                	jmp    c001fb75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb16:	85 c0                	test   eax,eax
c001fb18:	75 4b                	jne    c001fb65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb21:	85 c0                	test   eax,eax
c001fb23:	75 40                	jne    c001fb65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb2d:	89 10                	mov    DWORD PTR [eax],edx
c001fb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb41:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb4f:	85 c0                	test   eax,eax
c001fb51:	74 22                	je     c001fb75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb53:	83 ec 0c             	sub    esp,0xc
c001fb56:	68 76 0f 02 c0       	push   0xc0020f76
c001fb5b:	e8 7f 1a ff ff       	call   c00115df <KePanic(char const*)>
c001fb60:	83 c4 10             	add    esp,0x10
c001fb63:	eb 10                	jmp    c001fb75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb65:	83 ec 0c             	sub    esp,0xc
c001fb68:	68 80 0f 02 c0       	push   0xc0020f80
c001fb6d:	e8 6d 1a ff ff       	call   c00115df <KePanic(char const*)>
c001fb72:	83 c4 10             	add    esp,0x10
c001fb75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb79:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb7c:	8d 50 01             	lea    edx,[eax+0x1]
c001fb7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb83:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb86:	90                   	nop
c001fb87:	83 c4 0c             	add    esp,0xc
c001fb8a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fb8c <LinkedList<UnixFile>::getFirstElement()>:
c001fb8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb90:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fb94 <LinkedList<UnixFile>::removeFirst()>:
c001fb94:	83 ec 0c             	sub    esp,0xc
c001fb97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb9d:	85 c0                	test   eax,eax
c001fb9f:	75 12                	jne    c001fbb3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fba1:	83 ec 0c             	sub    esp,0xc
c001fba4:	68 8c 0f 02 c0       	push   0xc0020f8c
c001fba9:	e8 31 1a ff ff       	call   c00115df <KePanic(char const*)>
c001fbae:	83 c4 10             	add    esp,0x10
c001fbb1:	eb 7e                	jmp    c001fc31 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fbb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbbd:	85 c0                	test   eax,eax
c001fbbf:	74 10                	je     c001fbd1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fbc1:	83 ec 0c             	sub    esp,0xc
c001fbc4:	68 d7 0f 02 c0       	push   0xc0020fd7
c001fbc9:	e8 11 1a ff ff       	call   c00115df <KePanic(char const*)>
c001fbce:	83 c4 10             	add    esp,0x10
c001fbd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbd7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbda:	85 c0                	test   eax,eax
c001fbdc:	75 33                	jne    c001fc11 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fbde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fbe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fbf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbfa:	83 f8 01             	cmp    eax,0x1
c001fbfd:	74 21                	je     c001fc20 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fbff:	83 ec 0c             	sub    esp,0xc
c001fc02:	68 b0 0f 02 c0       	push   0xc0020fb0
c001fc07:	e8 d3 19 ff ff       	call   c00115df <KePanic(char const*)>
c001fc0c:	83 c4 10             	add    esp,0x10
c001fc0f:	eb 0f                	jmp    c001fc20 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc15:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc17:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fc1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1e:	89 10                	mov    DWORD PTR [eax],edx
c001fc20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc27:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc31:	83 c4 0c             	add    esp,0xc
c001fc34:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fc36 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fc36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc3d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fc3e <DriverlessDevice::~DriverlessDevice()>:
c001fc3e:	ba fc 1b 02 c0       	mov    edx,0xc0021bfc
c001fc43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc47:	89 10                	mov    DWORD PTR [eax],edx
c001fc49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc4d:	50                   	push   eax
c001fc4e:	e8 6f cc fe ff       	call   c000c8c2 <Device::~Device()>
c001fc53:	83 c4 04             	add    esp,0x4
c001fc56:	90                   	nop
c001fc57:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fc58 <DriverlessDevice::~DriverlessDevice()>:
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	83 ec 0c             	sub    esp,0xc
c001fc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc62:	e8 d7 ff ff ff       	call   c001fc3e <DriverlessDevice::~DriverlessDevice()>
c001fc67:	83 c4 10             	add    esp,0x10
c001fc6a:	83 ec 08             	sub    esp,0x8
c001fc6d:	68 58 01 00 00       	push   0x158
c001fc72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc76:	e8 b1 ab fe ff       	call   c000a82c <operator delete(void*, unsigned long)>
c001fc7b:	83 c4 10             	add    esp,0x10
c001fc7e:	83 c4 0c             	add    esp,0xc
c001fc81:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fc82 <LinkedList<Device>::addElement(Device*)>:
c001fc82:	83 ec 0c             	sub    esp,0xc
c001fc85:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fc8a:	75 10                	jne    c001fc9c <LinkedList<Device>::addElement(Device*)+0x1a>
c001fc8c:	83 ec 0c             	sub    esp,0xc
c001fc8f:	68 54 0f 02 c0       	push   0xc0020f54
c001fc94:	e8 46 19 ff ff       	call   c00115df <KePanic(char const*)>
c001fc99:	83 c4 10             	add    esp,0x10
c001fc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fca2:	85 c0                	test   eax,eax
c001fca4:	74 3a                	je     c001fce0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcad:	85 c0                	test   eax,eax
c001fcaf:	74 2f                	je     c001fce0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fcb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcbc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fcc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcd4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fcde:	eb 68                	jmp    c001fd48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fce6:	85 c0                	test   eax,eax
c001fce8:	75 4e                	jne    c001fd38 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fcea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcf1:	85 c0                	test   eax,eax
c001fcf3:	75 43                	jne    c001fd38 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fcf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcfd:	89 10                	mov    DWORD PTR [eax],edx
c001fcff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd11:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd22:	85 c0                	test   eax,eax
c001fd24:	74 22                	je     c001fd48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd26:	83 ec 0c             	sub    esp,0xc
c001fd29:	68 76 0f 02 c0       	push   0xc0020f76
c001fd2e:	e8 ac 18 ff ff       	call   c00115df <KePanic(char const*)>
c001fd33:	83 c4 10             	add    esp,0x10
c001fd36:	eb 10                	jmp    c001fd48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd38:	83 ec 0c             	sub    esp,0xc
c001fd3b:	68 80 0f 02 c0       	push   0xc0020f80
c001fd40:	e8 9a 18 ff ff       	call   c00115df <KePanic(char const*)>
c001fd45:	83 c4 10             	add    esp,0x10
c001fd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd4f:	8d 50 01             	lea    edx,[eax+0x1]
c001fd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd56:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd59:	90                   	nop
c001fd5a:	83 c4 0c             	add    esp,0xc
c001fd5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fd5e <LinkedList<Device>::LinkedList()>:
c001fd5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd9e:	90                   	nop
c001fd9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fda0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fda0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fda4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fda6:	85 c0                	test   eax,eax
c001fda8:	75 0e                	jne    c001fdb8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fdaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdb1:	85 c0                	test   eax,eax
c001fdb3:	75 03                	jne    c001fdb8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fdb5:	b0 01                	mov    al,0x1
c001fdb7:	c3                   	ret    
c001fdb8:	b0 00                	mov    al,0x0
c001fdba:	90                   	nop
c001fdbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fdbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdc2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fdc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fdc4:	83 ec 0c             	sub    esp,0xc
c001fdc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdcb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdcd:	85 c0                	test   eax,eax
c001fdcf:	75 17                	jne    c001fde8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fdd1:	83 ec 0c             	sub    esp,0xc
c001fdd4:	68 8c 0f 02 c0       	push   0xc0020f8c
c001fdd9:	e8 01 18 ff ff       	call   c00115df <KePanic(char const*)>
c001fdde:	83 c4 10             	add    esp,0x10
c001fde1:	e9 96 00 00 00       	jmp    c001fe7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fde6:	66 90                	xchg   ax,ax
c001fde8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fdf2:	85 c0                	test   eax,eax
c001fdf4:	0f 95 c0             	setne  al
c001fdf7:	0f b6 c0             	movzx  eax,al
c001fdfa:	85 c0                	test   eax,eax
c001fdfc:	74 12                	je     c001fe10 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fdfe:	83 ec 0c             	sub    esp,0xc
c001fe01:	68 d7 0f 02 c0       	push   0xc0020fd7
c001fe06:	e8 d4 17 ff ff       	call   c00115df <KePanic(char const*)>
c001fe0b:	83 c4 10             	add    esp,0x10
c001fe0e:	66 90                	xchg   ax,ax
c001fe10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe19:	85 c0                	test   eax,eax
c001fe1b:	0f 94 c0             	sete   al
c001fe1e:	0f b6 c0             	movzx  eax,al
c001fe21:	85 c0                	test   eax,eax
c001fe23:	74 33                	je     c001fe58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fe25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe29:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe41:	83 f8 01             	cmp    eax,0x1
c001fe44:	74 22                	je     c001fe68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe46:	83 ec 0c             	sub    esp,0xc
c001fe49:	68 b0 0f 02 c0       	push   0xc0020fb0
c001fe4e:	e8 8c 17 ff ff       	call   c00115df <KePanic(char const*)>
c001fe53:	83 c4 10             	add    esp,0x10
c001fe56:	eb 10                	jmp    c001fe68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe5e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fe61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe65:	89 10                	mov    DWORD PTR [eax],edx
c001fe67:	90                   	nop
c001fe68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe6f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fe72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe76:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe79:	8d 76 00             	lea    esi,[esi+0x0]
c001fe7c:	83 c4 0c             	add    esp,0xc
c001fe7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fe80:	83 ec 0c             	sub    esp,0xc
c001fe83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fe88:	75 12                	jne    c001fe9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fe8a:	83 ec 0c             	sub    esp,0xc
c001fe8d:	68 54 0f 02 c0       	push   0xc0020f54
c001fe92:	e8 48 17 ff ff       	call   c00115df <KePanic(char const*)>
c001fe97:	83 c4 10             	add    esp,0x10
c001fe9a:	66 90                	xchg   ax,ax
c001fe9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fea2:	85 c0                	test   eax,eax
c001fea4:	74 36                	je     c001fedc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fead:	85 c0                	test   eax,eax
c001feaf:	74 2b                	je     c001fedc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001feb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001feb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001febc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001febf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fec7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001feca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fece:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fed1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fed8:	eb 6a                	jmp    c001ff44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001feda:	66 90                	xchg   ax,ax
c001fedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fee2:	85 c0                	test   eax,eax
c001fee4:	75 4e                	jne    c001ff34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001feed:	85 c0                	test   eax,eax
c001feef:	75 43                	jne    c001ff34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fef9:	89 10                	mov    DWORD PTR [eax],edx
c001fefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff03:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff0d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff1b:	85 c0                	test   eax,eax
c001ff1d:	74 25                	je     c001ff44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff1f:	83 ec 0c             	sub    esp,0xc
c001ff22:	68 76 0f 02 c0       	push   0xc0020f76
c001ff27:	e8 b3 16 ff ff       	call   c00115df <KePanic(char const*)>
c001ff2c:	83 c4 10             	add    esp,0x10
c001ff2f:	eb 13                	jmp    c001ff44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff31:	8d 76 00             	lea    esi,[esi+0x0]
c001ff34:	83 ec 0c             	sub    esp,0xc
c001ff37:	68 80 0f 02 c0       	push   0xc0020f80
c001ff3c:	e8 9e 16 ff ff       	call   c00115df <KePanic(char const*)>
c001ff41:	83 c4 10             	add    esp,0x10
c001ff44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff4b:	8d 50 01             	lea    edx,[eax+0x1]
c001ff4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff55:	90                   	nop
c001ff56:	83 c4 0c             	add    esp,0xc
c001ff59:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ff5c <ACPI::~ACPI()>:
c001ff5c:	83 ec 0c             	sub    esp,0xc
c001ff5f:	ba 58 22 02 c0       	mov    edx,0xc0022258
c001ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff68:	89 10                	mov    DWORD PTR [eax],edx
c001ff6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6e:	83 ec 0c             	sub    esp,0xc
c001ff71:	50                   	push   eax
c001ff72:	e8 4b c9 fe ff       	call   c000c8c2 <Device::~Device()>
c001ff77:	83 c4 10             	add    esp,0x10
c001ff7a:	90                   	nop
c001ff7b:	83 c4 0c             	add    esp,0xc
c001ff7e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ff80 <ACPI::~ACPI()>:
c001ff80:	83 ec 0c             	sub    esp,0xc
c001ff83:	83 ec 0c             	sub    esp,0xc
c001ff86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff8a:	e8 cd ff ff ff       	call   c001ff5c <ACPI::~ACPI()>
c001ff8f:	83 c4 10             	add    esp,0x10
c001ff92:	83 ec 08             	sub    esp,0x8
c001ff95:	68 64 12 00 00       	push   0x1264
c001ff9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff9e:	e8 89 a8 fe ff       	call   c000a82c <operator delete(void*, unsigned long)>
c001ffa3:	83 c4 10             	add    esp,0x10
c001ffa6:	83 c4 0c             	add    esp,0xc
c001ffa9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ffac <LinkedList<Device>::~LinkedList()>:
c001ffac:	90                   	nop
c001ffad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ffb0 <LinkedList<Device>::isEmpty()>:
c001ffb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffb6:	85 c0                	test   eax,eax
c001ffb8:	75 0e                	jne    c001ffc8 <LinkedList<Device>::isEmpty()+0x18>
c001ffba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffc1:	85 c0                	test   eax,eax
c001ffc3:	75 03                	jne    c001ffc8 <LinkedList<Device>::isEmpty()+0x18>
c001ffc5:	b0 01                	mov    al,0x1
c001ffc7:	c3                   	ret    
c001ffc8:	b0 00                	mov    al,0x0
c001ffca:	90                   	nop
c001ffcb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ffcc <LinkedList<Device>::getFirstElement()>:
c001ffcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffd2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ffd4 <LinkedList<Device>::removeFirst()>:
c001ffd4:	83 ec 0c             	sub    esp,0xc
c001ffd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffdb:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffdd:	85 c0                	test   eax,eax
c001ffdf:	75 17                	jne    c001fff8 <LinkedList<Device>::removeFirst()+0x24>
c001ffe1:	83 ec 0c             	sub    esp,0xc
c001ffe4:	68 8c 0f 02 c0       	push   0xc0020f8c
c001ffe9:	e8 f1 15 ff ff       	call   c00115df <KePanic(char const*)>
c001ffee:	83 c4 10             	add    esp,0x10
c001fff1:	e9 92 00 00 00       	jmp    c0020088 <LinkedList<Device>::removeFirst()+0xb4>
c001fff6:	66 90                	xchg   ax,ax
c001fff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffff:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020005:	85 c0                	test   eax,eax
c0020007:	74 13                	je     c002001c <LinkedList<Device>::removeFirst()+0x48>
c0020009:	83 ec 0c             	sub    esp,0xc
c002000c:	68 d7 0f 02 c0       	push   0xc0020fd7
c0020011:	e8 c9 15 ff ff       	call   c00115df <KePanic(char const*)>
c0020016:	83 c4 10             	add    esp,0x10
c0020019:	8d 76 00             	lea    esi,[esi+0x0]
c002001c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020020:	8b 00                	mov    eax,DWORD PTR [eax]
c0020022:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020028:	85 c0                	test   eax,eax
c002002a:	75 34                	jne    c0020060 <LinkedList<Device>::removeFirst()+0x8c>
c002002c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020030:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002003a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020045:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020048:	83 f8 01             	cmp    eax,0x1
c002004b:	74 27                	je     c0020074 <LinkedList<Device>::removeFirst()+0xa0>
c002004d:	83 ec 0c             	sub    esp,0xc
c0020050:	68 b0 0f 02 c0       	push   0xc0020fb0
c0020055:	e8 85 15 ff ff       	call   c00115df <KePanic(char const*)>
c002005a:	83 c4 10             	add    esp,0x10
c002005d:	eb 15                	jmp    c0020074 <LinkedList<Device>::removeFirst()+0xa0>
c002005f:	90                   	nop
c0020060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020064:	8b 00                	mov    eax,DWORD PTR [eax]
c0020066:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002006c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020070:	89 10                	mov    DWORD PTR [eax],edx
c0020072:	66 90                	xchg   ax,ax
c0020074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020078:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002007b:	8d 50 ff             	lea    edx,[eax-0x1]
c002007e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020082:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020085:	8d 76 00             	lea    esi,[esi+0x0]
c0020088:	83 c4 0c             	add    esp,0xc
c002008b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002008c <CPU::~CPU()>:
c002008c:	83 ec 0c             	sub    esp,0xc
c002008f:	ba 00 24 02 c0       	mov    edx,0xc0022400
c0020094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020098:	89 10                	mov    DWORD PTR [eax],edx
c002009a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002009e:	83 ec 0c             	sub    esp,0xc
c00200a1:	50                   	push   eax
c00200a2:	e8 1b c8 fe ff       	call   c000c8c2 <Device::~Device()>
c00200a7:	83 c4 10             	add    esp,0x10
c00200aa:	90                   	nop
c00200ab:	83 c4 0c             	add    esp,0xc
c00200ae:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00200b0 <CPU::~CPU()>:
c00200b0:	83 ec 0c             	sub    esp,0xc
c00200b3:	83 ec 0c             	sub    esp,0xc
c00200b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ba:	e8 cd ff ff ff       	call   c002008c <CPU::~CPU()>
c00200bf:	83 c4 10             	add    esp,0x10
c00200c2:	83 ec 08             	sub    esp,0x8
c00200c5:	68 94 11 00 00       	push   0x1194
c00200ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ce:	e8 59 a7 fe ff       	call   c000a82c <operator delete(void*, unsigned long)>
c00200d3:	83 c4 10             	add    esp,0x10
c00200d6:	83 c4 0c             	add    esp,0xc
c00200d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00200dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00200dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00200e3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00200e4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00200e4:	90                   	nop
c00200e5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00200e8 <ThreadControlBlock::ThreadControlBlock()>:
c00200e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200ec:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00200f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200f7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00200fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020102:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020109:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002010d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020114:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020118:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002011f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020123:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020127:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002012b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002012f:	90                   	nop
c0020130:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020134 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020138:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002013e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020142:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020149:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002014d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020158:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002015e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020162:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020169:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002016d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020174:	90                   	nop
c0020175:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020176 <PCI::~PCI()>:
c0020176:	83 ec 0c             	sub    esp,0xc
c0020179:	ba e0 32 02 c0       	mov    edx,0xc00232e0
c002017e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020182:	89 10                	mov    DWORD PTR [eax],edx
c0020184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020188:	83 ec 0c             	sub    esp,0xc
c002018b:	50                   	push   eax
c002018c:	e8 c3 c1 fe ff       	call   c000c354 <Bus::~Bus()>
c0020191:	83 c4 10             	add    esp,0x10
c0020194:	90                   	nop
c0020195:	83 c4 0c             	add    esp,0xc
c0020198:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002019a <PCI::~PCI()>:
c002019a:	83 ec 0c             	sub    esp,0xc
c002019d:	83 ec 0c             	sub    esp,0xc
c00201a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201a4:	e8 cd ff ff ff       	call   c0020176 <PCI::~PCI()>
c00201a9:	83 c4 10             	add    esp,0x10
c00201ac:	83 ec 08             	sub    esp,0x8
c00201af:	68 5c 01 00 00       	push   0x15c
c00201b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201b8:	e8 6f a6 fe ff       	call   c000a82c <operator delete(void*, unsigned long)>
c00201bd:	83 c4 10             	add    esp,0x10
c00201c0:	83 c4 0c             	add    esp,0xc
c00201c3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00201c4 <IDE::~IDE()>:
c00201c4:	83 ec 0c             	sub    esp,0xc
c00201c7:	ba 94 33 02 c0       	mov    edx,0xc0023394
c00201cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d0:	89 10                	mov    DWORD PTR [eax],edx
c00201d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d6:	83 ec 0c             	sub    esp,0xc
c00201d9:	50                   	push   eax
c00201da:	e8 5d cb fe ff       	call   c000cd3c <HardDiskController::~HardDiskController()>
c00201df:	83 c4 10             	add    esp,0x10
c00201e2:	90                   	nop
c00201e3:	83 c4 0c             	add    esp,0xc
c00201e6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00201e8 <IDE::~IDE()>:
c00201e8:	83 ec 0c             	sub    esp,0xc
c00201eb:	83 ec 0c             	sub    esp,0xc
c00201ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f2:	e8 cd ff ff ff       	call   c00201c4 <IDE::~IDE()>
c00201f7:	83 c4 10             	add    esp,0x10
c00201fa:	83 ec 08             	sub    esp,0x8
c00201fd:	68 70 02 00 00       	push   0x270
c0020202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020206:	e8 21 a6 fe ff       	call   c000a82c <operator delete(void*, unsigned long)>
c002020b:	83 c4 10             	add    esp,0x10
c002020e:	83 c4 0c             	add    esp,0xc
c0020211:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020212 <SATABus::~SATABus()>:
c0020212:	83 ec 0c             	sub    esp,0xc
c0020215:	ba e4 33 02 c0       	mov    edx,0xc00233e4
c002021a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021e:	89 10                	mov    DWORD PTR [eax],edx
c0020220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020224:	83 ec 0c             	sub    esp,0xc
c0020227:	50                   	push   eax
c0020228:	e8 0f cb fe ff       	call   c000cd3c <HardDiskController::~HardDiskController()>
c002022d:	83 c4 10             	add    esp,0x10
c0020230:	90                   	nop
c0020231:	83 c4 0c             	add    esp,0xc
c0020234:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020236 <SATABus::~SATABus()>:
c0020236:	83 ec 0c             	sub    esp,0xc
c0020239:	83 ec 0c             	sub    esp,0xc
c002023c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020240:	e8 cd ff ff ff       	call   c0020212 <SATABus::~SATABus()>
c0020245:	83 c4 10             	add    esp,0x10
c0020248:	83 ec 08             	sub    esp,0x8
c002024b:	68 64 01 00 00       	push   0x164
c0020250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020254:	e8 d3 a5 fe ff       	call   c000a82c <operator delete(void*, unsigned long)>
c0020259:	83 c4 10             	add    esp,0x10
c002025c:	83 c4 0c             	add    esp,0xc
c002025f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020260 <ATA::~ATA()>:
c0020260:	83 ec 0c             	sub    esp,0xc
c0020263:	ba 24 34 02 c0       	mov    edx,0xc0023424
c0020268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026c:	89 10                	mov    DWORD PTR [eax],edx
c002026e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020272:	83 ec 0c             	sub    esp,0xc
c0020275:	50                   	push   eax
c0020276:	e8 a3 cb fe ff       	call   c000ce1e <PhysicalDisk::~PhysicalDisk()>
c002027b:	83 c4 10             	add    esp,0x10
c002027e:	90                   	nop
c002027f:	83 c4 0c             	add    esp,0xc
c0020282:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020284 <ATA::~ATA()>:
c0020284:	83 ec 0c             	sub    esp,0xc
c0020287:	83 ec 0c             	sub    esp,0xc
c002028a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002028e:	e8 cd ff ff ff       	call   c0020260 <ATA::~ATA()>
c0020293:	83 c4 10             	add    esp,0x10
c0020296:	83 ec 08             	sub    esp,0x8
c0020299:	68 7c 01 00 00       	push   0x17c
c002029e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202a2:	e8 85 a5 fe ff       	call   c000a82c <operator delete(void*, unsigned long)>
c00202a7:	83 c4 10             	add    esp,0x10
c00202aa:	83 c4 0c             	add    esp,0xc
c00202ad:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00202ae <ATAPI::~ATAPI()>:
c00202ae:	83 ec 0c             	sub    esp,0xc
c00202b1:	ba 6c 34 02 c0       	mov    edx,0xc002346c
c00202b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ba:	89 10                	mov    DWORD PTR [eax],edx
c00202bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c0:	83 ec 0c             	sub    esp,0xc
c00202c3:	50                   	push   eax
c00202c4:	e8 55 cb fe ff       	call   c000ce1e <PhysicalDisk::~PhysicalDisk()>
c00202c9:	83 c4 10             	add    esp,0x10
c00202cc:	90                   	nop
c00202cd:	83 c4 0c             	add    esp,0xc
c00202d0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00202d2 <ATAPI::~ATAPI()>:
c00202d2:	83 ec 0c             	sub    esp,0xc
c00202d5:	83 ec 0c             	sub    esp,0xc
c00202d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202dc:	e8 cd ff ff ff       	call   c00202ae <ATAPI::~ATAPI()>
c00202e1:	83 c4 10             	add    esp,0x10
c00202e4:	83 ec 08             	sub    esp,0x8
c00202e7:	68 84 01 00 00       	push   0x184
c00202ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202f0:	e8 37 a5 fe ff       	call   c000a82c <operator delete(void*, unsigned long)>
c00202f5:	83 c4 10             	add    esp,0x10
c00202f8:	83 c4 0c             	add    esp,0xc
c00202fb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00202fc <SATA::~SATA()>:
c00202fc:	83 ec 0c             	sub    esp,0xc
c00202ff:	ba 20 35 02 c0       	mov    edx,0xc0023520
c0020304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020308:	89 10                	mov    DWORD PTR [eax],edx
c002030a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030e:	83 ec 0c             	sub    esp,0xc
c0020311:	50                   	push   eax
c0020312:	e8 07 cb fe ff       	call   c000ce1e <PhysicalDisk::~PhysicalDisk()>
c0020317:	83 c4 10             	add    esp,0x10
c002031a:	90                   	nop
c002031b:	83 c4 0c             	add    esp,0xc
c002031e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020320 <SATA::~SATA()>:
c0020320:	83 ec 0c             	sub    esp,0xc
c0020323:	83 ec 0c             	sub    esp,0xc
c0020326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002032a:	e8 cd ff ff ff       	call   c00202fc <SATA::~SATA()>
c002032f:	83 c4 10             	add    esp,0x10
c0020332:	83 ec 08             	sub    esp,0x8
c0020335:	68 7c 01 00 00       	push   0x17c
c002033a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002033e:	e8 e9 a4 fe ff       	call   c000a82c <operator delete(void*, unsigned long)>
c0020343:	83 c4 10             	add    esp,0x10
c0020346:	83 c4 0c             	add    esp,0xc
c0020349:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002034a <SATAPI::~SATAPI()>:
c002034a:	83 ec 0c             	sub    esp,0xc
c002034d:	ba 44 36 02 c0       	mov    edx,0xc0023644
c0020352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020356:	89 10                	mov    DWORD PTR [eax],edx
c0020358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035c:	83 ec 0c             	sub    esp,0xc
c002035f:	50                   	push   eax
c0020360:	e8 b9 ca fe ff       	call   c000ce1e <PhysicalDisk::~PhysicalDisk()>
c0020365:	83 c4 10             	add    esp,0x10
c0020368:	90                   	nop
c0020369:	83 c4 0c             	add    esp,0xc
c002036c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002036e <SATAPI::~SATAPI()>:
c002036e:	83 ec 0c             	sub    esp,0xc
c0020371:	83 ec 0c             	sub    esp,0xc
c0020374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020378:	e8 cd ff ff ff       	call   c002034a <SATAPI::~SATAPI()>
c002037d:	83 c4 10             	add    esp,0x10
c0020380:	83 ec 08             	sub    esp,0x8
c0020383:	68 84 01 00 00       	push   0x184
c0020388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002038c:	e8 9b a4 fe ff       	call   c000a82c <operator delete(void*, unsigned long)>
c0020391:	83 c4 10             	add    esp,0x10
c0020394:	83 c4 0c             	add    esp,0xc
c0020397:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020398 <IOAPIC::~IOAPIC()>:
c0020398:	83 ec 0c             	sub    esp,0xc
c002039b:	ba 84 36 02 c0       	mov    edx,0xc0023684
c00203a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a4:	89 10                	mov    DWORD PTR [eax],edx
c00203a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203aa:	83 ec 0c             	sub    esp,0xc
c00203ad:	50                   	push   eax
c00203ae:	e8 0f c5 fe ff       	call   c000c8c2 <Device::~Device()>
c00203b3:	83 c4 10             	add    esp,0x10
c00203b6:	90                   	nop
c00203b7:	83 c4 0c             	add    esp,0xc
c00203ba:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00203bc <IOAPIC::~IOAPIC()>:
c00203bc:	83 ec 0c             	sub    esp,0xc
c00203bf:	83 ec 0c             	sub    esp,0xc
c00203c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203c6:	e8 cd ff ff ff       	call   c0020398 <IOAPIC::~IOAPIC()>
c00203cb:	83 c4 10             	add    esp,0x10
c00203ce:	83 ec 08             	sub    esp,0x8
c00203d1:	68 68 01 00 00       	push   0x168
c00203d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203da:	e8 4d a4 fe ff       	call   c000a82c <operator delete(void*, unsigned long)>
c00203df:	83 c4 10             	add    esp,0x10
c00203e2:	83 c4 0c             	add    esp,0xc
c00203e5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00203e8 <APICTimer::~APICTimer()>:
c00203e8:	83 ec 0c             	sub    esp,0xc
c00203eb:	ba cc 36 02 c0       	mov    edx,0xc00236cc
c00203f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203f4:	89 10                	mov    DWORD PTR [eax],edx
c00203f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203fa:	83 ec 0c             	sub    esp,0xc
c00203fd:	50                   	push   eax
c00203fe:	e8 95 df fe ff       	call   c000e398 <Timer::~Timer()>
c0020403:	83 c4 10             	add    esp,0x10
c0020406:	90                   	nop
c0020407:	83 c4 0c             	add    esp,0xc
c002040a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002040c <APICTimer::~APICTimer()>:
c002040c:	83 ec 0c             	sub    esp,0xc
c002040f:	83 ec 0c             	sub    esp,0xc
c0020412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020416:	e8 cd ff ff ff       	call   c00203e8 <APICTimer::~APICTimer()>
c002041b:	83 c4 10             	add    esp,0x10
c002041e:	83 ec 08             	sub    esp,0x8
c0020421:	68 60 01 00 00       	push   0x160
c0020426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002042a:	e8 fd a3 fe ff       	call   c000a82c <operator delete(void*, unsigned long)>
c002042f:	83 c4 10             	add    esp,0x10
c0020432:	83 c4 0c             	add    esp,0xc
c0020435:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020438 <PIT::~PIT()>:
c0020438:	83 ec 0c             	sub    esp,0xc
c002043b:	ba 1c 37 02 c0       	mov    edx,0xc002371c
c0020440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020444:	89 10                	mov    DWORD PTR [eax],edx
c0020446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002044a:	83 ec 0c             	sub    esp,0xc
c002044d:	50                   	push   eax
c002044e:	e8 45 df fe ff       	call   c000e398 <Timer::~Timer()>
c0020453:	83 c4 10             	add    esp,0x10
c0020456:	90                   	nop
c0020457:	83 c4 0c             	add    esp,0xc
c002045a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002045c <PIT::~PIT()>:
c002045c:	83 ec 0c             	sub    esp,0xc
c002045f:	83 ec 0c             	sub    esp,0xc
c0020462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020466:	e8 cd ff ff ff       	call   c0020438 <PIT::~PIT()>
c002046b:	83 c4 10             	add    esp,0x10
c002046e:	83 ec 08             	sub    esp,0x8
c0020471:	68 5c 01 00 00       	push   0x15c
c0020476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002047a:	e8 ad a3 fe ff       	call   c000a82c <operator delete(void*, unsigned long)>
c002047f:	83 c4 10             	add    esp,0x10
c0020482:	83 c4 0c             	add    esp,0xc
c0020485:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 31 25 02 c0       	mov    esi,0xc0022531
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 4d 25 02 c0       	mov    esi,0xc002254d
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
