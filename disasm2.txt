
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a4 36 02 c0       	mov    eax,0xc00236a4
c0000025:	3d a4 36 02 c0       	cmp    eax,0xc00236a4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a4 36 02 c0       	push   0xc00236a4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a4 36 02 c0       	mov    eax,0xc00236a4
c0000051:	2d a4 36 02 c0       	sub    eax,0xc00236a4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a4 36 02 c0       	push   0xc00236a4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb fc fd 01 c0       	mov    ebx,0xc001fdfc
c0000097:	81 eb f8 fd 01 c0    	sub    ebx,0xc001fdf8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be f8 fd 01 c0       	mov    esi,0xc001fdf8
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a4 36 02 c0       	push   0xc00236a4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 a4 36 02 c0       	push   0xc00236a4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 ff 4f 01 00       	call   c00152ac <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 dd 4f 01 00       	call   c00152ac <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ea 54 01 00       	call   c00157d8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 85 5b 01 00       	call   c0015e7c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 dd 0d 01 00       	jmp    c001115c <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 00 fe 01 c0 02 	test   BYTE PTR [edx-0x3ffe0200],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 00 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0200],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 00 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe0200],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 00 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe0200],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 00 fe 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0200],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 00 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0200],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000e2a:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c00011af:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001206:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c000124f:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c000126a:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c0001324:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c000132a:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c0001331:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013f7:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013fd:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c0001404:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001552:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 04 ff 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe00fc]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 6e 76 01 00       	jmp    c0019448 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 98 76 01 00       	jmp    c0019488 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 b9 76 01 00       	jmp    c00194c8 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 60 00 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdffa0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 60 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdffa0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba c0 26 02 c0       	mov    edx,0xc00226c0
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 1c ff 01 c0       	mov    edx,0xc001ff1c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 22 ff 01 c0       	mov    eax,0xc001ff22
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf e0 ff 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0020]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 2b ff 01 c0       	mov    eax,0xc001ff2b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 60 00 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdffa0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 b0 ff 01 c0       	mov    eax,0xc001ffb0
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb a0 ff 01 c0       	mov    ebx,0xc001ffa0
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 80 ff 01 c0       	mov    eax,0xc001ff80
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 90 ff 01 c0       	mov    eax,0xc001ff90
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 32 ff 01 c0       	mov    edx,0xc001ff32
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 3e ff 01 c0       	mov    edx,0xc001ff3e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 52 ff 01 c0       	mov    edx,0xc001ff52
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 80 03 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020380
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 80 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020380
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 80 01 02 c0       	mov    eax,0xc0020180
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 c0 00 02 c0       	mov    eax,0xc00200c0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 80 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff80]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 80 04 02 c0       	push   0xc0020480
c0006147:	e8 a0 3c 01 00       	call   c0019dec <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 8e 04 02 c0       	push   0xc002048e
c000617f:	e8 68 3c 01 00       	call   c0019dec <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 d1 3b 01 00       	call   c0019d90 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 50 02 c0       	mov    eax,0xc0025020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 9d 04 02 c0       	push   0xc002049d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000657b:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c0006585:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c000659d:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c0006616:	8b 9d 4c 55 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdaab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c00066ad:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c000670f:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000674c:	05 40 55 02 c0       	add    eax,0xc0025540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c000680c:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 a0 04 02 c0       	push   0xc00204a0
c000682f:	e8 b8 35 01 00       	call   c0019dec <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 c6 35 01 00       	call   c0019e08 <iso_kprintfd>
c0006842:	c7 04 24 a5 04 02 c0 	mov    DWORD PTR [esp],0xc00204a5
c0006849:	e8 9e 35 01 00       	call   c0019dec <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006855:	e8 ae 35 01 00       	call   c0019e08 <iso_kprintfd>
c000685a:	c7 04 24 ab 04 02 c0 	mov    DWORD PTR [esp],0xc00204ab
c0006861:	e8 86 35 01 00       	call   c0019dec <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c000686d:	e8 96 35 01 00       	call   c0019e08 <iso_kprintfd>
c0006872:	c7 04 24 b1 04 02 c0 	mov    DWORD PTR [esp],0xc00204b1
c0006879:	e8 6e 35 01 00       	call   c0019dec <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006885:	e8 7e 35 01 00       	call   c0019e08 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068eb:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 55 02 c0    	lea    ebp,[edi-0x3ffdaaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 55 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdaaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 9d 04 02 c0       	push   0xc002049d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a2a:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a30:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 55 02 c0    	lea    eax,[edi-0x3ffdaab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 ba 04 02 c0       	push   0xc00204ba
c0006a52:	e8 95 33 01 00       	call   c0019dec <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a87:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 c5 04 02 c0       	push   0xc00204c5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 cc 04 02 c0       	push   0xc00204cc
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b25:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b48:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 d3 04 02 c0       	push   0xc00204d3
c0006b69:	e8 7e 32 01 00       	call   c0019dec <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 de 04 02 c0       	push   0xc00204de
c0006b84:	e8 63 32 01 00       	call   c0019dec <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 55 02 c0       	push   0xc0025540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 51 9d 00 00       	call   c00109e5 <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 73 5a 00 00       	call   c000c716 <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 ef 04 02 c0       	push   0xc00204ef
c0006cd4:	e8 c3 9d 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0006cf3:	50                   	push   eax
c0006cf4:	68 08 05 02 c0       	push   0xc0020508
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 03 e9 00 00       	call   c0015604 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 12 eb 00 00       	call   c0015828 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 90 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a490
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 ec 62 01 c0       	push   0xc00162ec
c0006d25:	52                   	push   edx
c0006d26:	e8 fd ea 00 00       	call   c0015828 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 04 06 02 c0       	push   0xc0020604
c0006d33:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c0006d38:	e8 5f 9d 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d44:	e8 df a5 00 00       	call   c0011328 <KeInitRand()>
c0006d49:	e8 c1 f9 00 00       	call   c001670f <Vm::initialise8086()>
c0006d4e:	e8 8f 47 00 00       	call   c000b4e2 <Fs::initVFS()>
c0006d53:	c7 04 24 15 05 02 c0 	mov    DWORD PTR [esp],0xc0020515
c0006d5a:	e8 3d 9d 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 04 06 02 c0       	push   0xc0020604
c0006d7e:	e8 19 9d 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c0006d83:	e8 37 44 00 00       	call   c000b1bf <KeInitialiseSymlinks()>
c0006d88:	e8 47 a2 00 00       	call   c0010fd4 <KeLoadSystemEnv()>
c0006d8d:	e8 a4 a4 00 00       	call   c0011236 <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 2f 05 02 c0       	push   0xc002052f
c0006d9c:	68 38 05 02 c0       	push   0xc0020538
c0006da1:	e8 8c ca 00 00       	call   c0013832 <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 c2 52 00 00       	call   c000c070 <User::loadClockSettings(int)>
c0006dae:	c7 04 24 28 06 02 c0 	mov    DWORD PTR [esp],0xc0020628
c0006db5:	e8 e2 9c 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 48 59 00 00       	call   c000c714 <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 40 05 02 c0 	mov    DWORD PTR [esp],0xc0020540
c0006dd3:	e8 c4 9c 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 51 05 02 c0       	push   0xc0020551
c0006de7:	e8 1c e2 00 00       	call   c0015008 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 53 e4 00 00       	call   c0015248 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 72 ee 00 00       	call   c0015c74 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 6d 05 02 c0       	push   0xc002056d
c0006e17:	50                   	push   eax
c0006e18:	e8 73 59 00 00       	call   c000c790 <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba 74 06 02 c0       	mov    edx,0xc0020674
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 df 7e 01 00       	call   c001edf6 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 a5 8f 00 00       	call   c000fefa <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 7e 8f 00 00       	call   c000fefa <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 5c 8f 00 00       	call   c000fefa <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 3a 8f 00 00       	call   c000fefa <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 47 8e 00 00       	call   c000fe76 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 22 8e 00 00       	call   c000fe76 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 3e 7d 01 00       	call   c001edb0 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 8c 79 01 00       	call   c001ea20 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 38 8e 00 00       	call   c000fefa <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 76 05 02 c0       	push   0xc0020576
c0007104:	e8 68 a0 00 00       	call   c0011171 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 7c 05 02 c0       	push   0xc002057c
c0007140:	e8 2c a0 00 00       	call   c0011171 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 3f 88 00 00       	jmp    c000f9cc <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 82 05 02 c0       	push   0xc0020582
c00071e3:	0f 94 05 00 2f 02 c0 	sete   BYTE PTR ds:0xc0022f00
c00071ea:	e8 ad 98 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 3b 83 00 00       	call   c000f540 <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 e4 53 00 00       	call   c000c5f8 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 9a 05 02 c0 	mov    DWORD PTR [esp],0xc002059a
c000722d:	e8 6a 98 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 6a 8d 00 00       	call   c000ffb2 <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 a1 53 00 00       	call   c000c5f8 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 48 06 02 c0       	push   0xc0020648
c0007274:	e8 23 98 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c0007279:	e8 d8 06 01 00       	call   c0017956 <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 b4 05 02 c0 	mov    DWORD PTR [esp],0xc00205b4
c0007285:	e8 12 98 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 ba e6 00 00       	call   c0015950 <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 cf 05 02 c0       	push   0xc00205cf
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 e0 05 02 c0       	push   0xc00205e0
c000730d:	e8 5f 9e 00 00       	call   c0011171 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 ed 05 02 c0       	push   0xc00205ed
c0007322:	e8 4a 9e 00 00       	call   c0011171 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 f7 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc00205f7
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 30 9e 00 00       	jmp    c0011171 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007525:	48                   	dec    eax
c0007526:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 ef 00 01 00       	call   c0017622 <HalSystemIdle()>
c0007533:	e8 7a 7e 01 00       	call   c001f3b2 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000763a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 b0 ea 01 c0       	push   0xc001eab0
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 c0 ea 01 c0       	push   0xc001eac0
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 ca ea 01 c0       	push   0xc001eaca
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 d4 ea 01 c0       	push   0xc001ead4
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 de ea 01 c0       	push   0xc001eade
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 e8 ea 01 c0       	push   0xc001eae8
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 f2 ea 01 c0       	push   0xc001eaf2
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 fc ea 01 c0       	push   0xc001eafc
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 06 eb 01 c0       	push   0xc001eb06
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 0e eb 01 c0       	push   0xc001eb0e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 18 eb 01 c0       	push   0xc001eb18
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 20 eb 01 c0       	push   0xc001eb20
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 28 eb 01 c0       	push   0xc001eb28
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 30 eb 01 c0       	push   0xc001eb30
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 4a eb 01 c0       	push   0xc001eb4a
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 52 eb 01 c0       	push   0xc001eb52
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 5c eb 01 c0       	push   0xc001eb5c
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 66 eb 01 c0       	push   0xc001eb66
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 70 eb 01 c0       	push   0xc001eb70
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 0a ec 01 c0       	push   0xc001ec0a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 11 ec 01 c0       	push   0xc001ec11
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 fc eb 01 c0       	push   0xc001ebfc
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 03 ec 01 c0       	push   0xc001ec03
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 7a eb 01 c0       	push   0xc001eb7a
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 84 eb 01 c0       	push   0xc001eb84
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 8e eb 01 c0       	push   0xc001eb8e
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 98 eb 01 c0       	push   0xc001eb98
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 a2 eb 01 c0       	push   0xc001eba2
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 ac eb 01 c0       	push   0xc001ebac
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 b6 eb 01 c0       	push   0xc001ebb6
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 c0 eb 01 c0       	push   0xc001ebc0
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 ca eb 01 c0       	push   0xc001ebca
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 d4 eb 01 c0       	push   0xc001ebd4
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 de eb 01 c0       	push   0xc001ebde
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 e8 eb 01 c0       	push   0xc001ebe8
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 f2 eb 01 c0       	push   0xc001ebf2
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 4c ed 01 c0       	push   0xc001ed4c
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 56 ed 01 c0       	push   0xc001ed56
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 60 ed 01 c0       	push   0xc001ed60
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 6a ed 01 c0       	push   0xc001ed6a
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 74 ed 01 c0       	push   0xc001ed74
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 7e ed 01 c0       	push   0xc001ed7e
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 88 ed 01 c0       	push   0xc001ed88
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 92 ed 01 c0       	push   0xc001ed92
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 06 eb 01 c0       	push   0xc001eb06
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 f0 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ef0
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079df:	8b 3d f0 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022ef0
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 f0 2e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022ef0,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 f0 2e 02 c0       	mov    eax,ds:0xc0022ef0
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 98 06 02 c0       	push   0xc0020698
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 c8 06 02 c0       	push   0xc00206c8
c0007a44:	e8 28 97 00 00       	call   c0011171 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 cd 06 02 c0       	push   0xc00206cd
c0007a5a:	e8 12 97 00 00       	call   c0011171 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 68 a4 02 c0 01 	add    DWORD PTR ds:0xc002a468,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 d4 06 02 c0       	push   0xc00206d4
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 9a 8e 00 00       	call   c0010a20 <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 e8 8d 00 00       	call   c001098f <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007bb8:	e8 8d 77 01 00       	call   c001f34a <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 ec 06 02 c0       	push   0xc00206ec
c0007c4b:	e8 21 95 00 00       	call   c0011171 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 5e 02 c0    	lea    edx,[esi-0x3ffda114]
c0007c92:	8d 84 06 ed 5e 02 c0 	lea    eax,[esi+eax*1-0x3ffda113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 ec 06 02 c0       	push   0xc00206ec
c0007cc5:	e8 a7 94 00 00       	call   c0011171 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 f4 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022ef4
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d f4 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ef4
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 f4 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ef4
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 91 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020791
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 a1 93 00 00       	jmp    c0011171 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 14 07 02 c0       	push   0xc0020714
c0007e54:	e8 18 93 00 00       	call   c0011171 <KePanic(char const*)>
c0007e59:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 a7 07 02 c0       	push   0xc00207a7
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 44 07 02 c0       	push   0xc0020744
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 bf 07 02 c0       	push   0xc00207bf
c000810a:	e8 62 90 00 00       	call   c0011171 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 68 07 02 c0       	push   0xc0020768
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 cd 07 02 c0       	push   0xc00207cd
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba 2c 08 02 c0       	mov    edx,0xc002082c
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 e9 07 02 c0       	push   0xc00207e9
c0008331:	e8 3b 8e 00 00       	call   c0011171 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000837a:	e8 f5 d6 00 00       	call   c0015a74 <schedule()>
c000837f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0008384:	48                   	dec    eax
c0008385:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 23 6e 01 00       	call   c001f230 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 06 08 02 c0       	push   0xc0020806
c0008422:	e8 4a 8d 00 00       	call   c0011171 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba 2c 08 02 c0       	mov    edx,0xc002082c
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba 74 08 02 c0       	mov    edx,0xc0020874
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 ce 4f 00 00       	call   c000d4da <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 e2 02 01 00       	call   c0018814 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d 20 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd0e0]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d 20 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd0e0]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 d8 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd228]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 b0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd250]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 14 00 01 00       	call   c00186a8 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 71 00 01 00       	jmp    c00187b0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 40 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020840
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 e5 89 00 00       	jmp    c0011171 <KePanic(char const*)>
c000878c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 2e 37 00 00       	jmp    c000c017 <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be 4e 08 02 c0       	mov    esi,0xc002084e
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 88 fb 00 00       	call   c00187b0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba 74 08 02 c0       	mov    edx,0xc0020874
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 5f 08 02 c0       	push   0xc002085f
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 65 08 02 c0       	push   0xc0020865
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba 3c 09 02 c0       	mov    edx,0xc002093c
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 60 2f 02 c0       	mov    eax,ds:0xc0022f60
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 60 2f 02 c0    	mov    DWORD PTR ds:0xc0022f60,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 5f 02 c0       	push   0xc0025f98
c00091e4:	e8 2f 62 01 00       	call   c001f418 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba 58 09 02 c0       	mov    edx,0xc0020958
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba 3c 09 02 c0       	mov    edx,0xc002093c
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 5f 02 c0       	push   0xc0025f98
c00093b8:	e8 2f 61 01 00       	call   c001f4ec <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 5f 02 c0       	push   0xc0025f98
c00093cc:	e8 23 61 01 00       	call   c001f4f4 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 5f 02 c0       	push   0xc0025f98
c00093ea:	e8 29 60 01 00       	call   c001f418 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 14 09 02 c0       	push   0xc0020914
c0009414:	e8 58 7d 00 00       	call   c0011171 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba 58 09 02 c0       	mov    edx,0xc0020958
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 5f 02 c0       	push   0xc0025f98
c00094b9:	e8 2e 60 01 00       	call   c001f4ec <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 5f 02 c0       	push   0xc0025f98
c00094d6:	e8 bb 60 01 00       	call   c001f596 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 5f 02 c0       	push   0xc0025f98
c0009558:	e8 79 5e 01 00       	call   c001f3d6 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 ec 2e 02 c0       	push   0xc0022eec
c0009568:	68 98 5f 02 c0       	push   0xc0025f98
c000956d:	68 d4 f3 01 c0       	push   0xc001f3d4
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 68 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f68
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 68 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f68
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 64 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022f64
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 64 2f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022f64,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 64 2f 02 c0    	mov    DWORD PTR ds:0xc0022f64,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 6c 09 02 c0       	push   0xc002096c
c0009674:	e8 f8 7a 00 00       	call   c0011171 <KePanic(char const*)>
c0009679:	8b 2d 64 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022f64
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 64 2f 02 c0    	mov    DWORD PTR ds:0xc0022f64,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 64 2f 02 c0       	mov    eax,ds:0xc0022f64
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 64 2f 02 c0    	mov    DWORD PTR ds:0xc0022f64,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 64 2f 02 c0       	mov    ds:0xc0022f64,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 6c 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f6c
c000973e:	8b 0d 74 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f74
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 70 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f70
c0009759:	8b 0d 6c 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f6c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 00 0c 02 c0       	push   0xc0020c00
c000979e:	e8 ce 79 00 00       	call   c0011171 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 e8 94 02 c0       	mov    eax,ds:0xc00294e8
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 17 0c 02 c0       	push   0xc0020c17
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 70 2f 02 c0    	mov    DWORD PTR ds:0xc0022f70,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 78 2f 02 c0 43 	mov    BYTE PTR ds:0xc0022f78,0x43
c000984f:	c7 05 6c 2f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0022f6c,0x8
c0009859:	a3 74 2f 02 c0       	mov    ds:0xc0022f74,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 70 2f 02 c0       	mov    eax,ds:0xc0022f70
c0009874:	f7 35 6c 2f 02 c0    	div    DWORD PTR ds:0xc0022f6c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 8c 09 02 c0       	push   0xc002098c
c00098af:	e8 bd 78 00 00       	call   c0011171 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 2e 0c 02 c0       	push   0xc0020c2e
c0009981:	e8 eb 77 00 00       	call   c0011171 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 b0 09 02 c0 	mov    DWORD PTR [esp+0x30],0xc00209b0
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 88 77 00 00       	jmp    c0011171 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 4a 0c 02 c0       	push   0xc0020c4a
c00099f6:	e8 76 77 00 00       	call   c0011171 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 66 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020c66
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 2c 77 00 00       	jmp    c0011171 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 d4 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209d4
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b04:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0009cee:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 f8 09 02 c0       	push   0xc00209f8
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 60 0a 02 c0       	push   0xc0020a60
c0009d87:	e8 e5 73 00 00       	call   c0011171 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 84 0a 02 c0       	push   0xc0020a84
c0009e7b:	e8 f1 72 00 00       	call   c0011171 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 b0 0a 02 c0       	push   0xc0020ab0
c0009fd9:	e8 93 71 00 00       	call   c0011171 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 7e 26 00 00       	call   c000c88c <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 80 0c 02 c0       	push   0xc0020c80
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 6c 2f 02 c0       	mov    eax,ds:0xc0022f6c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 78 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022f78
c000a2e7:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 5a 37 00 00       	call   c000da4e <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 6c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f6c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 d4 0a 02 c0       	push   0xc0020ad4
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a359:	c7 44 24 50 8e 0c 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020c8e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 b1 0c 02 c0       	push   0xc0020cb1
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 9f 0c 02 c0       	push   0xc0020c9f
c000a413:	e8 59 6d 00 00       	call   c0011171 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 04 0b 02 c0       	push   0xc0020b04
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 6c 2f 02 c0       	mov    eax,ds:0xc0022f6c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 78 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022f78
c000a4bf:	8b 2c 85 dc 93 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd6c24]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 16 35 00 00       	call   c000d9e2 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 6c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f6c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 c4 0c 02 c0       	push   0xc0020cc4
c000a4e9:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 24 0b 02 c0       	push   0xc0020b24
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 84 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b84
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 d9 0c 02 c0       	push   0xc0020cd9
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 ed 0c 02 c0       	push   0xc0020ced
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 00 0d 02 c0       	push   0xc0020d00
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 0d 0d 02 c0       	push   0xc0020d0d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 26 0d 02 c0       	push   0xc0020d26
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 26 0d 02 c0       	push   0xc0020d26
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 2e 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d2e
c000a7ec:	e8 80 69 00 00       	call   c0011171 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 46 0d 02 c0       	push   0xc0020d46
c000a7fe:	e8 6e 69 00 00       	call   c0011171 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 5c 0d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf2a4]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 ac 0e 02 c0       	push   0xc0020eac
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 c0 0e 02 c0       	push   0xc0020ec0
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 ca 0e 02 c0       	push   0xc0020eca
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 d4 0e 02 c0       	push   0xc0020ed4
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 18 10 02 c0       	push   0xc0021018
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 de 0e 02 c0       	push   0xc0020ede
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 38 10 02 c0       	push   0xc0021038
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 f3 0e 02 c0       	push   0xc0020ef3
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 0d 0f 02 c0       	push   0xc0020f0d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 80 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd080]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 60 10 02 c0       	push   0xc0021060
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 18 10 02 c0       	push   0xc0021018
c000ab78:	e8 f4 65 00 00       	call   c0011171 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 a8 10 02 c0       	push   0xc00210a8
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 a8 10 02 c0       	push   0xc00210a8
c000aba7:	e8 c5 65 00 00       	call   c0011171 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 18 0f 02 c0       	push   0xc0020f18
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 18 0f 02 c0       	push   0xc0020f18
c000abd3:	e8 99 65 00 00       	call   c0011171 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 35 0f 02 c0       	push   0xc0020f35
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 35 0f 02 c0       	push   0xc0020f35
c000abff:	e8 6d 65 00 00       	call   c0011171 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 c8 10 02 c0       	push   0xc00210c8
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 c8 10 02 c0       	push   0xc00210c8
c000ac2b:	e8 41 65 00 00       	call   c0011171 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 ec 10 02 c0       	push   0xc00210ec
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 ec 10 02 c0       	push   0xc00210ec
c000ac57:	e8 15 65 00 00       	call   c0011171 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 51 0f 02 c0       	push   0xc0020f51
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 51 0f 02 c0       	push   0xc0020f51
c000ac83:	e8 e9 64 00 00       	call   c0011171 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 6d 0f 02 c0       	push   0xc0020f6d
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 6d 0f 02 c0       	push   0xc0020f6d
c000acaf:	e8 bd 64 00 00       	call   c0011171 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 0c 11 02 c0       	push   0xc002110c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 0c 11 02 c0       	push   0xc002110c
c000acdb:	e8 91 64 00 00       	call   c0011171 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 30 11 02 c0       	push   0xc0021130
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 30 11 02 c0       	push   0xc0021130
c000ad07:	e8 65 64 00 00       	call   c0011171 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiCreateSymlinkID()>:
c000ad14:	55                   	push   ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	31 db                	xor    ebx,ebx
c000ad1a:	83 ec 1c             	sub    esp,0x1c
c000ad1d:	e8 9d 65 00 00       	call   c00112bf <KeRand()>
c000ad22:	8b 2d 60 70 02 c0    	mov    ebp,DWORD PTR ds:0xc0027060
c000ad28:	31 d2                	xor    edx,edx
c000ad2a:	43                   	inc    ebx
c000ad2b:	31 ff                	xor    edi,edi
c000ad2d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad30:	89 ee                	mov    esi,ebp
c000ad32:	89 0d 60 70 02 c0    	mov    DWORD PTR ds:0xc0027060,ecx
c000ad38:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad40:	c1 e0 1b             	shl    eax,0x1b
c000ad43:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4d:	75 10                	jne    c000ad5f <KiCreateSymlinkID()+0x4b>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	68 4f 11 02 c0       	push   0xc002114f
c000ad57:	e8 15 64 00 00       	call   c0011171 <KePanic(char const*)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000ad63:	75 06                	jne    c000ad6b <KiCreateSymlinkID()+0x57>
c000ad65:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000ad69:	74 b2                	je     c000ad1d <KiCreateSymlinkID()+0x9>
c000ad6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad73:	83 c4 1c             	add    esp,0x1c
c000ad76:	5b                   	pop    ebx
c000ad77:	31 f0                	xor    eax,esi
c000ad79:	5e                   	pop    esi
c000ad7a:	31 fa                	xor    edx,edi
c000ad7c:	5f                   	pop    edi
c000ad7d:	5d                   	pop    ebp
c000ad7e:	c3                   	ret    

c000ad7f <KiFlushSymlinkChanges()>:
c000ad7f:	56                   	push   esi
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 20             	sub    esp,0x20
c000ad84:	68 14 01 00 00       	push   0x114
c000ad89:	e8 45 cd ff ff       	call   c0007ad3 <malloc>
c000ad8e:	83 c4 0c             	add    esp,0xc
c000ad91:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000ad97:	68 58 11 02 c0       	push   0xc0021158
c000ad9c:	50                   	push   eax
c000ad9d:	89 c3                	mov    ebx,eax
c000ad9f:	e8 44 09 00 00       	call   c000b6e8 <File::File(char const*, Process*)>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	85 db                	test   ebx,ebx
c000ada9:	75 10                	jne    c000adbb <KiFlushSymlinkChanges()+0x3c>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	68 76 11 02 c0       	push   0xc0021176
c000adb3:	e8 b9 63 00 00       	call   c0011171 <KePanic(char const*)>
c000adb8:	83 c4 10             	add    esp,0x10
c000adbb:	50                   	push   eax
c000adbc:	50                   	push   eax
c000adbd:	6a 06                	push   0x6
c000adbf:	53                   	push   ebx
c000adc0:	e8 df 09 00 00       	call   c000b7a4 <File::open(FileOpenMode)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	85 c0                	test   eax,eax
c000adca:	74 10                	je     c000addc <KiFlushSymlinkChanges()+0x5d>
c000adcc:	83 ec 0c             	sub    esp,0xc
c000adcf:	68 90 11 02 c0       	push   0xc0021190
c000add4:	e8 98 63 00 00       	call   c0011171 <KePanic(char const*)>
c000add9:	83 c4 10             	add    esp,0x10
c000addc:	31 f6                	xor    esi,esi
c000adde:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ade4:	7e 40                	jle    c000ae26 <KiFlushSymlinkChanges()+0xa7>
c000ade6:	83 ec 0c             	sub    esp,0xc
c000ade9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000adef:	50                   	push   eax
c000adf0:	89 f0                	mov    eax,esi
c000adf2:	c1 e0 08             	shl    eax,0x8
c000adf5:	05 60 60 02 c0       	add    eax,0xc0026060
c000adfa:	50                   	push   eax
c000adfb:	6a 00                	push   0x0
c000adfd:	68 00 01 00 00       	push   0x100
c000ae02:	53                   	push   ebx
c000ae03:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae06:	83 c4 20             	add    esp,0x20
c000ae09:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae11:	74 10                	je     c000ae23 <KiFlushSymlinkChanges()+0xa4>
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	68 aa 11 02 c0       	push   0xc00211aa
c000ae1b:	e8 51 63 00 00       	call   c0011171 <KePanic(char const*)>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	46                   	inc    esi
c000ae24:	eb b8                	jmp    c000adde <KiFlushSymlinkChanges()+0x5f>
c000ae26:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae30:	83 ec 0c             	sub    esp,0xc
c000ae33:	53                   	push   ebx
c000ae34:	e8 c9 09 00 00       	call   c000b802 <File::close()>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	85 db                	test   ebx,ebx
c000ae3e:	74 0c                	je     c000ae4c <KiFlushSymlinkChanges()+0xcd>
c000ae40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	53                   	push   ebx
c000ae46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae49:	83 c4 10             	add    esp,0x10
c000ae4c:	83 c4 14             	add    esp,0x14
c000ae4f:	5b                   	pop    ebx
c000ae50:	5e                   	pop    esi
c000ae51:	c3                   	ret    

c000ae52 <KiDeinitialiseSymlinks(void*)>:
c000ae52:	e9 28 ff ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>

c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae57:	53                   	push   ebx
c000ae58:	83 ec 0c             	sub    esp,0xc
c000ae5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ae63:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae6c:	68 00 01 00 00       	push   0x100
c000ae71:	6a 00                	push   0x0
c000ae73:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000ae7a:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000ae81:	c1 e0 08             	shl    eax,0x8
c000ae84:	05 60 60 02 c0       	add    eax,0xc0026060
c000ae89:	50                   	push   eax
c000ae8a:	e8 61 56 ff ff       	call   c00004f0 <memset>
c000ae8f:	58                   	pop    eax
c000ae90:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae95:	5a                   	pop    edx
c000ae96:	c1 e0 08             	shl    eax,0x8
c000ae99:	53                   	push   ebx
c000ae9a:	05 60 60 02 c0       	add    eax,0xc0026060
c000ae9f:	50                   	push   eax
c000aea0:	e8 ab 57 ff ff       	call   c0000650 <strcpy>
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	40                   	inc    eax
c000aeae:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aeb3:	83 f8 0f             	cmp    eax,0xf
c000aeb6:	7e 09                	jle    c000aec1 <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aeb8:	83 c4 08             	add    esp,0x8
c000aebb:	5b                   	pop    ebx
c000aebc:	e9 be fe ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>
c000aec1:	83 c4 08             	add    esp,0x8
c000aec4:	5b                   	pop    ebx
c000aec5:	c3                   	ret    

c000aec6 <KiIsSymlinkRegistered(char const*)>:
c000aec6:	31 c0                	xor    eax,eax
c000aec8:	31 d2                	xor    edx,edx
c000aeca:	c3                   	ret    

c000aecb <KeDereferenceSymlink(char const*, char*)>:
c000aecb:	55                   	push   ebp
c000aecc:	57                   	push   edi
c000aecd:	56                   	push   esi
c000aece:	53                   	push   ebx
c000aecf:	83 ec 50             	sub    esp,0x50
c000aed2:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c000aed6:	53                   	push   ebx
c000aed7:	e8 ea ff ff ff       	call   c000aec6 <KiIsSymlinkRegistered(char const*)>
c000aedc:	5e                   	pop    esi
c000aedd:	5f                   	pop    edi
c000aede:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aee2:	09 d0                	or     eax,edx
c000aee4:	75 07                	jne    c000aeed <KeDereferenceSymlink(char const*, char*)+0x22>
c000aee6:	31 db                	xor    ebx,ebx
c000aee8:	e9 8b 01 00 00       	jmp    c000b078 <KeDereferenceSymlink(char const*, char*)+0x1ad>
c000aeed:	83 ec 0c             	sub    esp,0xc
c000aef0:	89 d7                	mov    edi,edx
c000aef2:	68 14 01 00 00       	push   0x114
c000aef7:	e8 d7 cb ff ff       	call   c0007ad3 <malloc>
c000aefc:	83 c4 0c             	add    esp,0xc
c000aeff:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000af05:	53                   	push   ebx
c000af06:	50                   	push   eax
c000af07:	89 c5                	mov    ebp,eax
c000af09:	e8 da 07 00 00       	call   c000b6e8 <File::File(char const*, Process*)>
c000af0e:	83 c4 10             	add    esp,0x10
c000af11:	85 ed                	test   ebp,ebp
c000af13:	0f 84 45 01 00 00    	je     c000b05e <KeDereferenceSymlink(char const*, char*)+0x193>
c000af19:	51                   	push   ecx
c000af1a:	51                   	push   ecx
c000af1b:	6a 01                	push   0x1
c000af1d:	55                   	push   ebp
c000af1e:	e8 81 08 00 00       	call   c000b7a4 <File::open(FileOpenMode)>
c000af23:	83 c4 10             	add    esp,0x10
c000af26:	85 c0                	test   eax,eax
c000af28:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000af2b:	74 09                	je     c000af36 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000af2d:	83 ec 0c             	sub    esp,0xc
c000af30:	55                   	push   ebp
c000af31:	e9 22 01 00 00       	jmp    c000b058 <KeDereferenceSymlink(char const*, char*)+0x18d>
c000af36:	83 ec 0c             	sub    esp,0xc
c000af39:	8d 74 24 28          	lea    esi,[esp+0x28]
c000af3d:	56                   	push   esi
c000af3e:	8d 5c 24 47          	lea    ebx,[esp+0x47]
c000af42:	53                   	push   ebx
c000af43:	6a 00                	push   0x0
c000af45:	6a 08                	push   0x8
c000af47:	55                   	push   ebp
c000af48:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000af4b:	83 c4 20             	add    esp,0x20
c000af4e:	85 c0                	test   eax,eax
c000af50:	0f 85 f3 00 00 00    	jne    c000b049 <KeDereferenceSymlink(char const*, char*)+0x17e>
c000af56:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000af5b:	0f 85 e8 00 00 00    	jne    c000b049 <KeDereferenceSymlink(char const*, char*)+0x17e>
c000af61:	52                   	push   edx
c000af62:	52                   	push   edx
c000af63:	68 c4 11 02 c0       	push   0xc00211c4
c000af68:	53                   	push   ebx
c000af69:	e8 12 58 ff ff       	call   c0000780 <strcmp>
c000af6e:	83 c4 10             	add    esp,0x10
c000af71:	85 c0                	test   eax,eax
c000af73:	89 c3                	mov    ebx,eax
c000af75:	0f 85 ce 00 00 00    	jne    c000b049 <KeDereferenceSymlink(char const*, char*)+0x17e>
c000af7b:	83 ec 0c             	sub    esp,0xc
c000af7e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000af81:	56                   	push   esi
c000af82:	8d 4c 24 30          	lea    ecx,[esp+0x30]
c000af86:	51                   	push   ecx
c000af87:	6a 00                	push   0x0
c000af89:	6a 08                	push   0x8
c000af8b:	55                   	push   ebp
c000af8c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000af8f:	83 c4 20             	add    esp,0x20
c000af92:	85 c0                	test   eax,eax
c000af94:	0f 85 af 00 00 00    	jne    c000b049 <KeDereferenceSymlink(char const*, char*)+0x17e>
c000af9a:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000af9f:	0f 85 a4 00 00 00    	jne    c000b049 <KeDereferenceSymlink(char const*, char*)+0x17e>
c000afa5:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c000afa9:	0f 85 37 ff ff ff    	jne    c000aee6 <KeDereferenceSymlink(char const*, char*)+0x1b>
c000afaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afb3:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000afb7:	0f 85 29 ff ff ff    	jne    c000aee6 <KeDereferenceSymlink(char const*, char*)+0x1b>
c000afbd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000afc5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000afcd:	50                   	push   eax
c000afce:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c000afd2:	50                   	push   eax
c000afd3:	8d 44 24 30          	lea    eax,[esp+0x30]
c000afd7:	50                   	push   eax
c000afd8:	55                   	push   ebp
c000afd9:	e8 c8 0a 00 00       	call   c000baa6 <File::stat(unsigned long long*, bool*)>
c000afde:	83 c4 10             	add    esp,0x10
c000afe1:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c000afe6:	85 c0                	test   eax,eax
c000afe8:	75 5f                	jne    c000b049 <KeDereferenceSymlink(char const*, char*)+0x17e>
c000afea:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000afee:	b9 0f 00 00 00       	mov    ecx,0xf
c000aff3:	89 c2                	mov    edx,eax
c000aff5:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000aff9:	39 f1                	cmp    ecx,esi
c000affb:	19 fa                	sbb    edx,edi
c000affd:	73 4a                	jae    c000b049 <KeDereferenceSymlink(char const*, char*)+0x17e>
c000afff:	83 c6 f0             	add    esi,0xfffffff0
c000b002:	b9 ff 00 00 00       	mov    ecx,0xff
c000b007:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000b00b:	83 d7 ff             	adc    edi,0xffffffff
c000b00e:	39 f1                	cmp    ecx,esi
c000b010:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c000b014:	19 f8                	sbb    eax,edi
c000b016:	72 46                	jb     c000b05e <KeDereferenceSymlink(char const*, char*)+0x193>
c000b018:	83 ec 0c             	sub    esp,0xc
c000b01b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b01e:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c000b022:	51                   	push   ecx
c000b023:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000b027:	57                   	push   edi
c000b028:	56                   	push   esi
c000b029:	55                   	push   ebp
c000b02a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b02d:	83 c4 20             	add    esp,0x20
c000b030:	85 c0                	test   eax,eax
c000b032:	75 15                	jne    c000b049 <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b034:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b038:	89 c7                	mov    edi,eax
c000b03a:	c1 ff 1f             	sar    edi,0x1f
c000b03d:	3b 7c 24 2c          	cmp    edi,DWORD PTR [esp+0x2c]
c000b041:	75 06                	jne    c000b049 <KeDereferenceSymlink(char const*, char*)+0x17e>
c000b043:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000b047:	74 1a                	je     c000b063 <KeDereferenceSymlink(char const*, char*)+0x198>
c000b049:	83 ec 0c             	sub    esp,0xc
c000b04c:	55                   	push   ebp
c000b04d:	e8 b0 07 00 00       	call   c000b802 <File::close()>
c000b052:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b055:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b058:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b05b:	83 c4 10             	add    esp,0x10
c000b05e:	83 cb ff             	or     ebx,0xffffffff
c000b061:	eb 15                	jmp    c000b078 <KeDereferenceSymlink(char const*, char*)+0x1ad>
c000b063:	83 ec 0c             	sub    esp,0xc
c000b066:	55                   	push   ebp
c000b067:	e8 96 07 00 00       	call   c000b802 <File::close()>
c000b06c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b06f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b072:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b075:	83 c4 10             	add    esp,0x10
c000b078:	83 c4 4c             	add    esp,0x4c
c000b07b:	89 d8                	mov    eax,ebx
c000b07d:	5b                   	pop    ebx
c000b07e:	5e                   	pop    esi
c000b07f:	5f                   	pop    edi
c000b080:	5d                   	pop    ebp
c000b081:	c3                   	ret    

c000b082 <KeCreateSymlink(char const*, char const*)>:
c000b082:	55                   	push   ebp
c000b083:	57                   	push   edi
c000b084:	56                   	push   esi
c000b085:	53                   	push   ebx
c000b086:	83 ec 38             	sub    esp,0x38
c000b089:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b08d:	68 14 01 00 00       	push   0x114
c000b092:	e8 3c ca ff ff       	call   c0007ad3 <malloc>
c000b097:	83 c4 0c             	add    esp,0xc
c000b09a:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000b0a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0a4:	89 c3                	mov    ebx,eax
c000b0a6:	50                   	push   eax
c000b0a7:	e8 3c 06 00 00       	call   c000b6e8 <File::File(char const*, Process*)>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	85 db                	test   ebx,ebx
c000b0b1:	b8 01 00 00 00       	mov    eax,0x1
c000b0b6:	0f 84 fb 00 00 00    	je     c000b1b7 <KeCreateSymlink(char const*, char const*)+0x135>
c000b0bc:	52                   	push   edx
c000b0bd:	52                   	push   edx
c000b0be:	6a 12                	push   0x12
c000b0c0:	53                   	push   ebx
c000b0c1:	e8 de 06 00 00       	call   c000b7a4 <File::open(FileOpenMode)>
c000b0c6:	83 c4 10             	add    esp,0x10
c000b0c9:	85 c0                	test   eax,eax
c000b0cb:	74 0b                	je     c000b0d8 <KeCreateSymlink(char const*, char const*)+0x56>
c000b0cd:	83 ec 0c             	sub    esp,0xc
c000b0d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0d2:	53                   	push   ebx
c000b0d3:	e9 d4 00 00 00       	jmp    c000b1ac <KeCreateSymlink(char const*, char const*)+0x12a>
c000b0d8:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b0dc:	be 32 12 02 c0       	mov    esi,0xc0021232
c000b0e1:	b9 09 00 00 00       	mov    ecx,0x9
c000b0e6:	fc                   	cld    
c000b0e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b0e9:	83 ec 0c             	sub    esp,0xc
c000b0ec:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b0f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0f2:	56                   	push   esi
c000b0f3:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b0f7:	52                   	push   edx
c000b0f8:	6a 00                	push   0x0
c000b0fa:	6a 08                	push   0x8
c000b0fc:	53                   	push   ebx
c000b0fd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b100:	83 c4 20             	add    esp,0x20
c000b103:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b108:	0f 85 90 00 00 00    	jne    c000b19e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b10e:	85 c0                	test   eax,eax
c000b110:	0f 85 88 00 00 00    	jne    c000b19e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b116:	e8 f9 fb ff ff       	call   c000ad14 <KiCreateSymlinkID()>
c000b11b:	83 ec 0c             	sub    esp,0xc
c000b11e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b122:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b126:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b128:	56                   	push   esi
c000b129:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b12d:	52                   	push   edx
c000b12e:	6a 00                	push   0x0
c000b130:	6a 08                	push   0x8
c000b132:	53                   	push   ebx
c000b133:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b136:	83 c4 20             	add    esp,0x20
c000b139:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b13e:	75 5e                	jne    c000b19e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b140:	85 c0                	test   eax,eax
c000b142:	75 5a                	jne    c000b19e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b144:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b146:	83 ec 0c             	sub    esp,0xc
c000b149:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b14c:	55                   	push   ebp
c000b14d:	e8 2e 54 ff ff       	call   c0000580 <strlen>
c000b152:	31 d2                	xor    edx,edx
c000b154:	89 34 24             	mov    DWORD PTR [esp],esi
c000b157:	55                   	push   ebp
c000b158:	52                   	push   edx
c000b159:	50                   	push   eax
c000b15a:	53                   	push   ebx
c000b15b:	ff d7                	call   edi
c000b15d:	83 c4 14             	add    esp,0x14
c000b160:	55                   	push   ebp
c000b161:	89 c6                	mov    esi,eax
c000b163:	e8 18 54 ff ff       	call   c0000580 <strlen>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b16f:	75 2d                	jne    c000b19e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b171:	85 f6                	test   esi,esi
c000b173:	75 29                	jne    c000b19e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b175:	50                   	push   eax
c000b176:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b17a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b17e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b182:	e8 d0 fc ff ff       	call   c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>
c000b187:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b18a:	e8 73 06 00 00       	call   c000b802 <File::close()>
c000b18f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b191:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b194:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b197:	83 c4 10             	add    esp,0x10
c000b19a:	31 c0                	xor    eax,eax
c000b19c:	eb 19                	jmp    c000b1b7 <KeCreateSymlink(char const*, char const*)+0x135>
c000b19e:	83 ec 0c             	sub    esp,0xc
c000b1a1:	53                   	push   ebx
c000b1a2:	e8 5b 06 00 00       	call   c000b802 <File::close()>
c000b1a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1af:	83 c4 10             	add    esp,0x10
c000b1b2:	b8 01 00 00 00       	mov    eax,0x1
c000b1b7:	83 c4 2c             	add    esp,0x2c
c000b1ba:	5b                   	pop    ebx
c000b1bb:	5e                   	pop    esi
c000b1bc:	5f                   	pop    edi
c000b1bd:	5d                   	pop    ebp
c000b1be:	c3                   	ret    

c000b1bf <KeInitialiseSymlinks()>:
c000b1bf:	53                   	push   ebx
c000b1c0:	83 ec 10             	sub    esp,0x10
c000b1c3:	6a 00                	push   0x0
c000b1c5:	68 52 ae 00 c0       	push   0xc000ae52
c000b1ca:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b1d4:	e8 d8 57 00 00       	call   c00109b1 <KeRegisterAtexit(void (*)(void*), void*)>
c000b1d9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b1e0:	e8 ee c8 ff ff       	call   c0007ad3 <malloc>
c000b1e5:	83 c4 0c             	add    esp,0xc
c000b1e8:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000b1ee:	68 58 11 02 c0       	push   0xc0021158
c000b1f3:	50                   	push   eax
c000b1f4:	89 c3                	mov    ebx,eax
c000b1f6:	e8 ed 04 00 00       	call   c000b6e8 <File::File(char const*, Process*)>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	85 db                	test   ebx,ebx
c000b200:	75 10                	jne    c000b212 <KeInitialiseSymlinks()+0x53>
c000b202:	83 ec 0c             	sub    esp,0xc
c000b205:	68 cc 11 02 c0       	push   0xc00211cc
c000b20a:	e8 62 5f 00 00       	call   c0011171 <KePanic(char const*)>
c000b20f:	83 c4 10             	add    esp,0x10
c000b212:	83 ec 0c             	sub    esp,0xc
c000b215:	53                   	push   ebx
c000b216:	e8 4d 08 00 00       	call   c000ba68 <File::exists()>
c000b21b:	83 c4 10             	add    esp,0x10
c000b21e:	84 c0                	test   al,al
c000b220:	75 2d                	jne    c000b24f <KeInitialiseSymlinks()+0x90>
c000b222:	52                   	push   edx
c000b223:	52                   	push   edx
c000b224:	6a 12                	push   0x12
c000b226:	53                   	push   ebx
c000b227:	e8 78 05 00 00       	call   c000b7a4 <File::open(FileOpenMode)>
c000b22c:	83 c4 10             	add    esp,0x10
c000b22f:	85 c0                	test   eax,eax
c000b231:	74 10                	je     c000b243 <KeInitialiseSymlinks()+0x84>
c000b233:	83 ec 0c             	sub    esp,0xc
c000b236:	68 e9 11 02 c0       	push   0xc00211e9
c000b23b:	e8 31 5f 00 00       	call   c0011171 <KePanic(char const*)>
c000b240:	83 c4 10             	add    esp,0x10
c000b243:	83 ec 0c             	sub    esp,0xc
c000b246:	53                   	push   ebx
c000b247:	e8 b6 05 00 00       	call   c000b802 <File::close()>
c000b24c:	83 c4 10             	add    esp,0x10
c000b24f:	85 db                	test   ebx,ebx
c000b251:	74 0c                	je     c000b25f <KeInitialiseSymlinks()+0xa0>
c000b253:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b255:	83 ec 0c             	sub    esp,0xc
c000b258:	53                   	push   ebx
c000b259:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b25c:	83 c4 10             	add    esp,0x10
c000b25f:	50                   	push   eax
c000b260:	50                   	push   eax
c000b261:	68 06 12 02 c0       	push   0xc0021206
c000b266:	68 14 12 02 c0       	push   0xc0021214
c000b26b:	e8 12 fe ff ff       	call   c000b082 <KeCreateSymlink(char const*, char const*)>
c000b270:	83 c4 18             	add    esp,0x18
c000b273:	5b                   	pop    ebx
c000b274:	c3                   	ret    
c000b275:	90                   	nop

c000b276 <File::read(unsigned long long, void*, int*)>:
c000b276:	53                   	push   ebx
c000b277:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b27b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b27f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b286:	83 f8 19             	cmp    eax,0x19
c000b289:	77 35                	ja     c000b2c0 <File::read(unsigned long long, void*, int*)+0x4a>
c000b28b:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b292:	85 c0                	test   eax,eax
c000b294:	74 2a                	je     c000b2c0 <File::read(unsigned long long, void*, int*)+0x4a>
c000b296:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b29c:	85 c0                	test   eax,eax
c000b29e:	74 20                	je     c000b2c0 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2a4:	74 21                	je     c000b2c7 <File::read(unsigned long long, void*, int*)+0x51>
c000b2a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b2ac:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b2b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b2b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b2ba:	5b                   	pop    ebx
c000b2bb:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b2be:	ff e0                	jmp    eax
c000b2c0:	b8 0b 00 00 00       	mov    eax,0xb
c000b2c5:	eb 05                	jmp    c000b2cc <File::read(unsigned long long, void*, int*)+0x56>
c000b2c7:	b8 05 00 00 00       	mov    eax,0x5
c000b2cc:	5b                   	pop    ebx
c000b2cd:	c3                   	ret    

c000b2ce <File::write(unsigned long long, void*, int*)>:
c000b2ce:	53                   	push   ebx
c000b2cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b2d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b2d7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b2de:	83 f8 19             	cmp    eax,0x19
c000b2e1:	77 35                	ja     c000b318 <File::write(unsigned long long, void*, int*)+0x4a>
c000b2e3:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b2ea:	85 c0                	test   eax,eax
c000b2ec:	74 2a                	je     c000b318 <File::write(unsigned long long, void*, int*)+0x4a>
c000b2ee:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2f4:	85 c0                	test   eax,eax
c000b2f6:	74 20                	je     c000b318 <File::write(unsigned long long, void*, int*)+0x4a>
c000b2f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2fc:	74 21                	je     c000b31f <File::write(unsigned long long, void*, int*)+0x51>
c000b2fe:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b300:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b304:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b30a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b30e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b312:	5b                   	pop    ebx
c000b313:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b316:	ff e0                	jmp    eax
c000b318:	b8 0b 00 00 00       	mov    eax,0xb
c000b31d:	eb 05                	jmp    c000b324 <File::write(unsigned long long, void*, int*)+0x56>
c000b31f:	b8 05 00 00 00       	mov    eax,0x5
c000b324:	5b                   	pop    ebx
c000b325:	c3                   	ret    

c000b326 <Directory::read(unsigned long long, void*, int*)>:
c000b326:	53                   	push   ebx
c000b327:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b32b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b32f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b336:	83 f8 19             	cmp    eax,0x19
c000b339:	77 35                	ja     c000b370 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b33b:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b342:	85 c0                	test   eax,eax
c000b344:	74 2a                	je     c000b370 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b346:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b34c:	85 c0                	test   eax,eax
c000b34e:	74 20                	je     c000b370 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b350:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b354:	74 21                	je     c000b377 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b356:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b358:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b35c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b366:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b36a:	5b                   	pop    ebx
c000b36b:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b36e:	ff e0                	jmp    eax
c000b370:	b8 0b 00 00 00       	mov    eax,0xb
c000b375:	eb 05                	jmp    c000b37c <Directory::read(unsigned long long, void*, int*)+0x56>
c000b377:	b8 05 00 00 00       	mov    eax,0x5
c000b37c:	5b                   	pop    ebx
c000b37d:	c3                   	ret    

c000b37e <Directory::write(unsigned long long, void*, int*)>:
c000b37e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b382:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b389:	b8 0b 00 00 00       	mov    eax,0xb
c000b38e:	83 fa 19             	cmp    edx,0x19
c000b391:	77 18                	ja     c000b3ab <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b393:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b39a:	85 d2                	test   edx,edx
c000b39c:	74 0d                	je     c000b3ab <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b39e:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b3a5:	19 c0                	sbb    eax,eax
c000b3a7:	83 e0 0a             	and    eax,0xa
c000b3aa:	40                   	inc    eax
c000b3ab:	c3                   	ret    

c000b3ac <File::isAtty()>:
c000b3ac:	31 c0                	xor    eax,eax
c000b3ae:	c3                   	ret    
c000b3af:	90                   	nop

c000b3b0 <Directory::isAtty()>:
c000b3b0:	31 c0                	xor    eax,eax
c000b3b2:	c3                   	ret    
c000b3b3:	90                   	nop

c000b3b4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b3b4:	b8 0a 00 00 00       	mov    eax,0xa
c000b3b9:	c3                   	ret    

c000b3ba <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b3ba:	b8 0a 00 00 00       	mov    eax,0xa
c000b3bf:	c3                   	ret    

c000b3c0 <Filesystem::allocateSwapfile(char const*, int)>:
c000b3c0:	31 c0                	xor    eax,eax
c000b3c2:	31 d2                	xor    edx,edx
c000b3c4:	c3                   	ret    
c000b3c5:	90                   	nop

c000b3c6 <File::~File()>:
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	ba b0 12 02 c0       	mov    edx,0xc00212b0
c000b3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d2:	89 10                	mov    DWORD PTR [eax],edx
c000b3d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d8:	83 ec 0c             	sub    esp,0xc
c000b3db:	50                   	push   eax
c000b3dc:	e8 ab df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b3e1:	83 c4 10             	add    esp,0x10
c000b3e4:	90                   	nop
c000b3e5:	83 c4 0c             	add    esp,0xc
c000b3e8:	c3                   	ret    
c000b3e9:	90                   	nop

c000b3ea <File::~File()>:
c000b3ea:	83 ec 0c             	sub    esp,0xc
c000b3ed:	83 ec 0c             	sub    esp,0xc
c000b3f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f4:	e8 cd ff ff ff       	call   c000b3c6 <File::~File()>
c000b3f9:	83 c4 10             	add    esp,0x10
c000b3fc:	83 ec 08             	sub    esp,0x8
c000b3ff:	68 14 01 00 00       	push   0x114
c000b404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b408:	e8 ff f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b40d:	83 c4 10             	add    esp,0x10
c000b410:	83 c4 0c             	add    esp,0xc
c000b413:	c3                   	ret    

c000b414 <Directory::~Directory()>:
c000b414:	83 ec 0c             	sub    esp,0xc
c000b417:	ba cc 12 02 c0       	mov    edx,0xc00212cc
c000b41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b420:	89 10                	mov    DWORD PTR [eax],edx
c000b422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	50                   	push   eax
c000b42a:	e8 5d df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b42f:	83 c4 10             	add    esp,0x10
c000b432:	90                   	nop
c000b433:	83 c4 0c             	add    esp,0xc
c000b436:	c3                   	ret    
c000b437:	90                   	nop

c000b438 <Directory::~Directory()>:
c000b438:	83 ec 0c             	sub    esp,0xc
c000b43b:	83 ec 0c             	sub    esp,0xc
c000b43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b442:	e8 cd ff ff ff       	call   c000b414 <Directory::~Directory()>
c000b447:	83 c4 10             	add    esp,0x10
c000b44a:	83 ec 08             	sub    esp,0x8
c000b44d:	68 14 01 00 00       	push   0x114
c000b452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b456:	e8 b1 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b45b:	83 c4 10             	add    esp,0x10
c000b45e:	83 c4 0c             	add    esp,0xc
c000b461:	c3                   	ret    

c000b462 <Filesystem::Filesystem()>:
c000b462:	ba 44 12 02 c0       	mov    edx,0xc0021244
c000b467:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b46b:	89 10                	mov    DWORD PTR [eax],edx
c000b46d:	8b 15 64 70 02 c0    	mov    edx,DWORD PTR ds:0xc0027064
c000b473:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b477:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b47a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b47e:	a3 64 70 02 c0       	mov    ds:0xc0027064,eax
c000b483:	90                   	nop
c000b484:	c3                   	ret    
c000b485:	90                   	nop

c000b486 <Filesystem::~Filesystem()>:
c000b486:	ba 44 12 02 c0       	mov    edx,0xc0021244
c000b48b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48f:	89 10                	mov    DWORD PTR [eax],edx
c000b491:	90                   	nop
c000b492:	c3                   	ret    
c000b493:	90                   	nop

c000b494 <Filesystem::~Filesystem()>:
c000b494:	83 ec 0c             	sub    esp,0xc
c000b497:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b49b:	e8 e6 ff ff ff       	call   c000b486 <Filesystem::~Filesystem()>
c000b4a0:	83 c4 04             	add    esp,0x4
c000b4a3:	83 ec 08             	sub    esp,0x8
c000b4a6:	6a 08                	push   0x8
c000b4a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ac:	e8 5b f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4b1:	83 c4 10             	add    esp,0x10
c000b4b4:	83 c4 0c             	add    esp,0xc
c000b4b7:	c3                   	ret    

c000b4b8 <Fs::getcwd(Process*, char*, int)>:
c000b4b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b4bc:	31 c0                	xor    eax,eax
c000b4be:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b4c2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b4c5:	7d 15                	jge    c000b4dc <Fs::getcwd(Process*, char*, int)+0x24>
c000b4c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b4cb:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b4d2:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b4d5:	84 c9                	test   cl,cl
c000b4d7:	74 06                	je     c000b4df <Fs::getcwd(Process*, char*, int)+0x27>
c000b4d9:	40                   	inc    eax
c000b4da:	eb e2                	jmp    c000b4be <Fs::getcwd(Process*, char*, int)+0x6>
c000b4dc:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b4df:	31 c0                	xor    eax,eax
c000b4e1:	c3                   	ret    

c000b4e2 <Fs::initVFS()>:
c000b4e2:	83 ec 18             	sub    esp,0x18
c000b4e5:	6a 08                	push   0x8
c000b4e7:	e8 e7 c5 ff ff       	call   c0007ad3 <malloc>
c000b4ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000b4ef:	e8 f4 e0 00 00       	call   c00195e8 <FAT::FAT()>
c000b4f4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b4fb:	e8 d3 c5 ff ff       	call   c0007ad3 <malloc>
c000b500:	89 04 24             	mov    DWORD PTR [esp],eax
c000b503:	e8 0e f0 00 00       	call   c001a516 <ISO9660::ISO9660()>
c000b508:	83 c4 1c             	add    esp,0x1c
c000b50b:	c3                   	ret    

c000b50c <Fs::standardiseFiles(char*, char const*, char const*)>:
c000b50c:	55                   	push   ebp
c000b50d:	57                   	push   edi
c000b50e:	56                   	push   esi
c000b50f:	53                   	push   ebx
c000b510:	81 ec 20 04 00 00    	sub    esp,0x420
c000b516:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000b51d:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b524:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b52b:	68 00 04 00 00       	push   0x400
c000b530:	6a 00                	push   0x0
c000b532:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b536:	56                   	push   esi
c000b537:	e8 b4 4f ff ff       	call   c00004f0 <memset>
c000b53c:	83 c4 10             	add    esp,0x10
c000b53f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b543:	75 0b                	jne    c000b550 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b545:	50                   	push   eax
c000b546:	50                   	push   eax
c000b547:	57                   	push   edi
c000b548:	56                   	push   esi
c000b549:	e8 02 51 ff ff       	call   c0000650 <strcpy>
c000b54e:	eb 45                	jmp    c000b595 <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000b550:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b553:	83 f8 2f             	cmp    eax,0x2f
c000b556:	74 05                	je     c000b55d <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b558:	83 f8 5c             	cmp    eax,0x5c
c000b55b:	75 19                	jne    c000b576 <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000b55d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b560:	3c 60                	cmp    al,0x60
c000b562:	7e 03                	jle    c000b567 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b564:	83 e8 20             	sub    eax,0x20
c000b567:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b56b:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b572:	50                   	push   eax
c000b573:	50                   	push   eax
c000b574:	eb 18                	jmp    c000b58e <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000b576:	50                   	push   eax
c000b577:	50                   	push   eax
c000b578:	55                   	push   ebp
c000b579:	56                   	push   esi
c000b57a:	e8 d1 50 ff ff       	call   c0000650 <strcpy>
c000b57f:	5a                   	pop    edx
c000b580:	59                   	pop    ecx
c000b581:	68 dc 21 02 c0       	push   0xc00221dc
c000b586:	56                   	push   esi
c000b587:	e8 e4 52 ff ff       	call   c0000870 <strcat>
c000b58c:	5d                   	pop    ebp
c000b58d:	58                   	pop    eax
c000b58e:	57                   	push   edi
c000b58f:	56                   	push   esi
c000b590:	e8 db 52 ff ff       	call   c0000870 <strcat>
c000b595:	83 c4 10             	add    esp,0x10
c000b598:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b59c:	3c 60                	cmp    al,0x60
c000b59e:	7e 03                	jle    c000b5a3 <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000b5a0:	83 e8 20             	sub    eax,0x20
c000b5a3:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b5a7:	88 03                	mov    BYTE PTR [ebx],al
c000b5a9:	b8 03 00 00 00       	mov    eax,0x3
c000b5ae:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b5b5:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b5bb:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b5bf:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000b5c7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b5cb:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000b5d0:	89 fa                	mov    edx,edi
c000b5d2:	0f be ea             	movsx  ebp,dl
c000b5d5:	85 ed                	test   ebp,ebp
c000b5d7:	0f 84 af 00 00 00    	je     c000b68c <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000b5dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b5e1:	42                   	inc    edx
c000b5e2:	83 fd 2f             	cmp    ebp,0x2f
c000b5e5:	74 05                	je     c000b5ec <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000b5e7:	83 fd 5c             	cmp    ebp,0x5c
c000b5ea:	75 14                	jne    c000b600 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b5ec:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b5f1:	89 c5                	mov    ebp,eax
c000b5f3:	74 0b                	je     c000b600 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b5f5:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b5f9:	40                   	inc    eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	eb c7                	jmp    c000b5c7 <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000b600:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b604:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000b609:	89 f9                	mov    ecx,edi
c000b60b:	0f be e9             	movsx  ebp,cl
c000b60e:	75 63                	jne    c000b673 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b610:	83 fd 2e             	cmp    ebp,0x2e
c000b613:	75 5e                	jne    c000b673 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b615:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b619:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b61e:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000b623:	74 18                	je     c000b63d <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000b625:	83 fd 2e             	cmp    ebp,0x2e
c000b628:	74 57                	je     c000b681 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b62a:	89 ca                	mov    edx,ecx
c000b62c:	42                   	inc    edx
c000b62d:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b631:	83 f9 2f             	cmp    ecx,0x2f
c000b634:	74 f6                	je     c000b62c <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b636:	83 f9 5c             	cmp    ecx,0x5c
c000b639:	74 f1                	je     c000b62c <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b63b:	eb bd                	jmp    c000b5fa <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b63d:	83 fd 2e             	cmp    ebp,0x2e
c000b640:	74 3f                	je     c000b681 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b642:	83 f8 03             	cmp    eax,0x3
c000b645:	74 b3                	je     c000b5fa <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b647:	42                   	inc    edx
c000b648:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b64c:	83 f9 2f             	cmp    ecx,0x2f
c000b64f:	74 f6                	je     c000b647 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b651:	83 f9 5c             	cmp    ecx,0x5c
c000b654:	74 f1                	je     c000b647 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b656:	48                   	dec    eax
c000b657:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b65b:	75 06                	jne    c000b663 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b65d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b661:	eb f3                	jmp    c000b656 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b663:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b667:	74 07                	je     c000b670 <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000b669:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b66d:	48                   	dec    eax
c000b66e:	eb f3                	jmp    c000b663 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b670:	40                   	inc    eax
c000b671:	eb 87                	jmp    c000b5fa <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b673:	83 fd 2f             	cmp    ebp,0x2f
c000b676:	74 82                	je     c000b5fa <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b678:	83 fd 5c             	cmp    ebp,0x5c
c000b67b:	0f 84 79 ff ff ff    	je     c000b5fa <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b681:	89 f9                	mov    ecx,edi
c000b683:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b686:	40                   	inc    eax
c000b687:	e9 6e ff ff ff       	jmp    c000b5fa <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b68c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b690:	83 ec 0c             	sub    esp,0xc
c000b693:	53                   	push   ebx
c000b694:	e8 e7 4e ff ff       	call   c0000580 <strlen>
c000b699:	83 c4 10             	add    esp,0x10
c000b69c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b6a1:	75 26                	jne    c000b6c9 <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000b6a3:	83 ec 0c             	sub    esp,0xc
c000b6a6:	53                   	push   ebx
c000b6a7:	e8 d4 4e ff ff       	call   c0000580 <strlen>
c000b6ac:	83 c4 10             	add    esp,0x10
c000b6af:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b6b4:	74 26                	je     c000b6dc <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000b6b6:	83 ec 0c             	sub    esp,0xc
c000b6b9:	53                   	push   ebx
c000b6ba:	e8 c1 4e ff ff       	call   c0000580 <strlen>
c000b6bf:	83 c4 10             	add    esp,0x10
c000b6c2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b6c7:	eb c7                	jmp    c000b690 <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000b6c9:	83 ec 0c             	sub    esp,0xc
c000b6cc:	53                   	push   ebx
c000b6cd:	e8 ae 4e ff ff       	call   c0000580 <strlen>
c000b6d2:	83 c4 10             	add    esp,0x10
c000b6d5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b6da:	74 c7                	je     c000b6a3 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b6dc:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b6e2:	5b                   	pop    ebx
c000b6e3:	5e                   	pop    esi
c000b6e4:	5f                   	pop    edi
c000b6e5:	5d                   	pop    ebp
c000b6e6:	c3                   	ret    
c000b6e7:	90                   	nop

c000b6e8 <File::File(char const*, Process*)>:
c000b6e8:	83 ec 0c             	sub    esp,0xc
c000b6eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ef:	83 ec 08             	sub    esp,0x8
c000b6f2:	6a 00                	push   0x0
c000b6f4:	50                   	push   eax
c000b6f5:	e8 ac da ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000b6fa:	83 c4 10             	add    esp,0x10
c000b6fd:	ba b0 12 02 c0       	mov    edx,0xc00212b0
c000b702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b706:	89 10                	mov    DWORD PTR [eax],edx
c000b708:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b70c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b716:	83 c0 0d             	add    eax,0xd
c000b719:	83 ec 04             	sub    esp,0x4
c000b71c:	52                   	push   edx
c000b71d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b721:	50                   	push   eax
c000b722:	e8 e5 fd ff ff       	call   c000b50c <Fs::standardiseFiles(char*, char const*, char const*)>
c000b727:	83 c4 10             	add    esp,0x10
c000b72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b72e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b731:	83 e8 41             	sub    eax,0x41
c000b734:	88 c2                	mov    dl,al
c000b736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b73a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b744:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b74c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b752:	0f b6 c0             	movzx  eax,al
c000b755:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b75c:	85 c0                	test   eax,eax
c000b75e:	74 3e                	je     c000b79e <File::File(char const*, Process*)+0xb6>
c000b760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b764:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b76a:	0f b6 c0             	movzx  eax,al
c000b76d:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b774:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b77a:	85 c0                	test   eax,eax
c000b77c:	75 20                	jne    c000b79e <File::File(char const*, Process*)+0xb6>
c000b77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b782:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b788:	0f b6 c0             	movzx  eax,al
c000b78b:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b792:	83 ec 0c             	sub    esp,0xc
c000b795:	50                   	push   eax
c000b796:	e8 85 21 00 00       	call   c000d920 <LogicalDisk::mount()>
c000b79b:	83 c4 10             	add    esp,0x10
c000b79e:	90                   	nop
c000b79f:	83 c4 0c             	add    esp,0xc
c000b7a2:	c3                   	ret    
c000b7a3:	90                   	nop

c000b7a4 <File::open(FileOpenMode)>:
c000b7a4:	53                   	push   ebx
c000b7a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b7aa:	83 ec 08             	sub    esp,0x8
c000b7ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7b1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b7b8:	83 fa 19             	cmp    edx,0x19
c000b7bb:	77 40                	ja     c000b7fd <File::open(FileOpenMode)+0x59>
c000b7bd:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b7c4:	85 d2                	test   edx,edx
c000b7c6:	74 35                	je     c000b7fd <File::open(FileOpenMode)+0x59>
c000b7c8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b7ce:	85 d2                	test   edx,edx
c000b7d0:	74 2b                	je     c000b7fd <File::open(FileOpenMode)+0x59>
c000b7d2:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b7d6:	b8 06 00 00 00       	mov    eax,0x6
c000b7db:	75 20                	jne    c000b7fd <File::open(FileOpenMode)+0x59>
c000b7dd:	8b 02                	mov    eax,DWORD PTR [edx]
c000b7df:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b7e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e9:	51                   	push   ecx
c000b7ea:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b7ed:	51                   	push   ecx
c000b7ee:	52                   	push   edx
c000b7ef:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b7f2:	83 c4 10             	add    esp,0x10
c000b7f5:	85 c0                	test   eax,eax
c000b7f7:	75 04                	jne    c000b7fd <File::open(FileOpenMode)+0x59>
c000b7f9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b7fd:	83 c4 08             	add    esp,0x8
c000b800:	5b                   	pop    ebx
c000b801:	c3                   	ret    

c000b802 <File::close()>:
c000b802:	53                   	push   ebx
c000b803:	b8 0b 00 00 00       	mov    eax,0xb
c000b808:	83 ec 08             	sub    esp,0x8
c000b80b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b80f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b816:	83 f9 19             	cmp    ecx,0x19
c000b819:	77 41                	ja     c000b85c <File::close()+0x5a>
c000b81b:	8b 1c 8d e0 94 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b822:	85 db                	test   ebx,ebx
c000b824:	74 36                	je     c000b85c <File::close()+0x5a>
c000b826:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b82d:	74 2d                	je     c000b85c <File::close()+0x5a>
c000b82f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b833:	b8 05 00 00 00       	mov    eax,0x5
c000b838:	74 22                	je     c000b85c <File::close()+0x5a>
c000b83a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b83e:	8b 04 8d e0 94 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6b20]
c000b845:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b84b:	53                   	push   ebx
c000b84c:	53                   	push   ebx
c000b84d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b84f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b855:	50                   	push   eax
c000b856:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b859:	83 c4 10             	add    esp,0x10
c000b85c:	83 c4 08             	add    esp,0x8
c000b85f:	5b                   	pop    ebx
c000b860:	c3                   	ret    
c000b861:	90                   	nop

c000b862 <File::seek(unsigned long long)>:
c000b862:	56                   	push   esi
c000b863:	b8 0b 00 00 00       	mov    eax,0xb
c000b868:	53                   	push   ebx
c000b869:	51                   	push   ecx
c000b86a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b86e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b872:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b876:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b87d:	83 fa 19             	cmp    edx,0x19
c000b880:	77 31                	ja     c000b8b3 <File::seek(unsigned long long)+0x51>
c000b882:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b889:	85 d2                	test   edx,edx
c000b88b:	74 26                	je     c000b8b3 <File::seek(unsigned long long)+0x51>
c000b88d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b893:	85 d2                	test   edx,edx
c000b895:	74 1c                	je     c000b8b3 <File::seek(unsigned long long)+0x51>
c000b897:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b89b:	b8 05 00 00 00       	mov    eax,0x5
c000b8a0:	74 11                	je     c000b8b3 <File::seek(unsigned long long)+0x51>
c000b8a2:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8a4:	53                   	push   ebx
c000b8a5:	51                   	push   ecx
c000b8a6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b8ac:	52                   	push   edx
c000b8ad:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8b0:	83 c4 10             	add    esp,0x10
c000b8b3:	5a                   	pop    edx
c000b8b4:	5b                   	pop    ebx
c000b8b5:	5e                   	pop    esi
c000b8b6:	c3                   	ret    
c000b8b7:	90                   	nop

c000b8b8 <File::truncate(unsigned long long)>:
c000b8b8:	56                   	push   esi
c000b8b9:	b8 0b 00 00 00       	mov    eax,0xb
c000b8be:	53                   	push   ebx
c000b8bf:	51                   	push   ecx
c000b8c0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b8c8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8cc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b8d3:	83 fa 19             	cmp    edx,0x19
c000b8d6:	77 31                	ja     c000b909 <File::truncate(unsigned long long)+0x51>
c000b8d8:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b8df:	85 d2                	test   edx,edx
c000b8e1:	74 26                	je     c000b909 <File::truncate(unsigned long long)+0x51>
c000b8e3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8e9:	85 d2                	test   edx,edx
c000b8eb:	74 1c                	je     c000b909 <File::truncate(unsigned long long)+0x51>
c000b8ed:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b8f1:	b8 05 00 00 00       	mov    eax,0x5
c000b8f6:	74 11                	je     c000b909 <File::truncate(unsigned long long)+0x51>
c000b8f8:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8fa:	53                   	push   ebx
c000b8fb:	51                   	push   ecx
c000b8fc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b902:	52                   	push   edx
c000b903:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b906:	83 c4 10             	add    esp,0x10
c000b909:	5a                   	pop    edx
c000b90a:	5b                   	pop    ebx
c000b90b:	5e                   	pop    esi
c000b90c:	c3                   	ret    
c000b90d:	90                   	nop

c000b90e <File::tell(unsigned long long*)>:
c000b90e:	83 ec 0c             	sub    esp,0xc
c000b911:	b8 0b 00 00 00       	mov    eax,0xb
c000b916:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b91a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b921:	83 fa 19             	cmp    edx,0x19
c000b924:	77 34                	ja     c000b95a <File::tell(unsigned long long*)+0x4c>
c000b926:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b92d:	85 d2                	test   edx,edx
c000b92f:	74 29                	je     c000b95a <File::tell(unsigned long long*)+0x4c>
c000b931:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b937:	85 d2                	test   edx,edx
c000b939:	74 1f                	je     c000b95a <File::tell(unsigned long long*)+0x4c>
c000b93b:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b93f:	b8 05 00 00 00       	mov    eax,0x5
c000b944:	74 14                	je     c000b95a <File::tell(unsigned long long*)+0x4c>
c000b946:	50                   	push   eax
c000b947:	8b 02                	mov    eax,DWORD PTR [edx]
c000b949:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b94d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b953:	52                   	push   edx
c000b954:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b957:	83 c4 10             	add    esp,0x10
c000b95a:	83 c4 0c             	add    esp,0xc
c000b95d:	c3                   	ret    

c000b95e <File::rewind()>:
c000b95e:	83 ec 10             	sub    esp,0x10
c000b961:	6a 00                	push   0x0
c000b963:	6a 00                	push   0x0
c000b965:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b969:	e8 f4 fe ff ff       	call   c000b862 <File::seek(unsigned long long)>
c000b96e:	83 c4 1c             	add    esp,0x1c
c000b971:	c3                   	ret    

c000b972 <File::unlink()>:
c000b972:	83 ec 0c             	sub    esp,0xc
c000b975:	b8 0b 00 00 00       	mov    eax,0xb
c000b97a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b97e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b985:	83 f9 19             	cmp    ecx,0x19
c000b988:	77 2f                	ja     c000b9b9 <File::unlink()+0x47>
c000b98a:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b991:	85 c9                	test   ecx,ecx
c000b993:	74 24                	je     c000b9b9 <File::unlink()+0x47>
c000b995:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b99b:	85 c9                	test   ecx,ecx
c000b99d:	74 1a                	je     c000b9b9 <File::unlink()+0x47>
c000b99f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9a3:	b8 06 00 00 00       	mov    eax,0x6
c000b9a8:	75 0f                	jne    c000b9b9 <File::unlink()+0x47>
c000b9aa:	50                   	push   eax
c000b9ab:	83 c2 0d             	add    edx,0xd
c000b9ae:	50                   	push   eax
c000b9af:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9b1:	52                   	push   edx
c000b9b2:	51                   	push   ecx
c000b9b3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b9b6:	83 c4 10             	add    esp,0x10
c000b9b9:	83 c4 0c             	add    esp,0xc
c000b9bc:	c3                   	ret    
c000b9bd:	90                   	nop

c000b9be <File::rename(char const*)>:
c000b9be:	83 ec 0c             	sub    esp,0xc
c000b9c1:	b8 0b 00 00 00       	mov    eax,0xb
c000b9c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9ca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9d1:	83 f9 19             	cmp    ecx,0x19
c000b9d4:	77 32                	ja     c000ba08 <File::rename(char const*)+0x4a>
c000b9d6:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b9dd:	85 c9                	test   ecx,ecx
c000b9df:	74 27                	je     c000ba08 <File::rename(char const*)+0x4a>
c000b9e1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9e7:	85 c9                	test   ecx,ecx
c000b9e9:	74 1d                	je     c000ba08 <File::rename(char const*)+0x4a>
c000b9eb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9ef:	b8 06 00 00 00       	mov    eax,0x6
c000b9f4:	75 12                	jne    c000ba08 <File::rename(char const*)+0x4a>
c000b9f6:	50                   	push   eax
c000b9f7:	83 c2 0d             	add    edx,0xd
c000b9fa:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba00:	52                   	push   edx
c000ba01:	51                   	push   ecx
c000ba02:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ba05:	83 c4 10             	add    esp,0x10
c000ba08:	83 c4 0c             	add    esp,0xc
c000ba0b:	c3                   	ret    

c000ba0c <File::chfatattr(unsigned char, unsigned char)>:
c000ba0c:	57                   	push   edi
c000ba0d:	b8 0b 00 00 00       	mov    eax,0xb
c000ba12:	56                   	push   esi
c000ba13:	53                   	push   ebx
c000ba14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba18:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ba1c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ba20:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba27:	83 f9 19             	cmp    ecx,0x19
c000ba2a:	77 37                	ja     c000ba63 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba2c:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000ba33:	85 c9                	test   ecx,ecx
c000ba35:	74 2c                	je     c000ba63 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba37:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba3d:	85 c9                	test   ecx,ecx
c000ba3f:	74 22                	je     c000ba63 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba41:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba45:	b8 06 00 00 00       	mov    eax,0x6
c000ba4a:	75 17                	jne    c000ba63 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba4c:	89 f0                	mov    eax,esi
c000ba4e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ba50:	0f b6 db             	movzx  ebx,bl
c000ba53:	0f b6 f0             	movzx  esi,al
c000ba56:	83 c2 0d             	add    edx,0xd
c000ba59:	56                   	push   esi
c000ba5a:	53                   	push   ebx
c000ba5b:	52                   	push   edx
c000ba5c:	51                   	push   ecx
c000ba5d:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000ba60:	83 c4 10             	add    esp,0x10
c000ba63:	5b                   	pop    ebx
c000ba64:	5e                   	pop    esi
c000ba65:	5f                   	pop    edi
c000ba66:	c3                   	ret    
c000ba67:	90                   	nop

c000ba68 <File::exists()>:
c000ba68:	83 ec 0c             	sub    esp,0xc
c000ba6b:	31 c0                	xor    eax,eax
c000ba6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba71:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba78:	83 f9 19             	cmp    ecx,0x19
c000ba7b:	77 24                	ja     c000baa1 <File::exists()+0x39>
c000ba7d:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000ba84:	85 c9                	test   ecx,ecx
c000ba86:	74 19                	je     c000baa1 <File::exists()+0x39>
c000ba88:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba8e:	85 c9                	test   ecx,ecx
c000ba90:	74 0f                	je     c000baa1 <File::exists()+0x39>
c000ba92:	50                   	push   eax
c000ba93:	83 c2 0d             	add    edx,0xd
c000ba96:	50                   	push   eax
c000ba97:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba99:	52                   	push   edx
c000ba9a:	51                   	push   ecx
c000ba9b:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000ba9e:	83 c4 10             	add    esp,0x10
c000baa1:	83 c4 0c             	add    esp,0xc
c000baa4:	c3                   	ret    
c000baa5:	90                   	nop

c000baa6 <File::stat(unsigned long long*, bool*)>:
c000baa6:	56                   	push   esi
c000baa7:	53                   	push   ebx
c000baa8:	50                   	push   eax
c000baa9:	b8 0b 00 00 00       	mov    eax,0xb
c000baae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bab2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bab6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000baba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bac1:	83 f9 19             	cmp    ecx,0x19
c000bac4:	77 3d                	ja     c000bb03 <File::stat(unsigned long long*, bool*)+0x5d>
c000bac6:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bacd:	85 c9                	test   ecx,ecx
c000bacf:	74 32                	je     c000bb03 <File::stat(unsigned long long*, bool*)+0x5d>
c000bad1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bad7:	85 c9                	test   ecx,ecx
c000bad9:	74 28                	je     c000bb03 <File::stat(unsigned long long*, bool*)+0x5d>
c000badb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000badf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bae1:	74 13                	je     c000baf6 <File::stat(unsigned long long*, bool*)+0x50>
c000bae3:	83 ec 04             	sub    esp,0x4
c000bae6:	56                   	push   esi
c000bae7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000baed:	51                   	push   ecx
c000baee:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000baf1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000baf4:	eb 0a                	jmp    c000bb00 <File::stat(unsigned long long*, bool*)+0x5a>
c000baf6:	53                   	push   ebx
c000baf7:	83 c2 0d             	add    edx,0xd
c000bafa:	56                   	push   esi
c000bafb:	52                   	push   edx
c000bafc:	51                   	push   ecx
c000bafd:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bb00:	83 c4 10             	add    esp,0x10
c000bb03:	5a                   	pop    edx
c000bb04:	5b                   	pop    ebx
c000bb05:	5e                   	pop    esi
c000bb06:	c3                   	ret    

c000bb07 <Fs::setcwd(Process*, char*)>:
c000bb07:	55                   	push   ebp
c000bb08:	57                   	push   edi
c000bb09:	56                   	push   esi
c000bb0a:	53                   	push   ebx
c000bb0b:	81 ec 20 02 00 00    	sub    esp,0x220
c000bb11:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000bb18:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bb1e:	57                   	push   edi
c000bb1f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bb26:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bb2a:	56                   	push   esi
c000bb2b:	e8 dc f9 ff ff       	call   c000b50c <Fs::standardiseFiles(char*, char const*, char const*)>
c000bb30:	89 34 24             	mov    DWORD PTR [esp],esi
c000bb33:	e8 48 4a ff ff       	call   c0000580 <strlen>
c000bb38:	83 c4 10             	add    esp,0x10
c000bb3b:	83 f8 02             	cmp    eax,0x2
c000bb3e:	77 15                	ja     c000bb55 <Fs::setcwd(Process*, char*)+0x4e>
c000bb40:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bb45:	83 eb 41             	sub    ebx,0x41
c000bb48:	8b 04 9d e0 94 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6b20]
c000bb4f:	85 c0                	test   eax,eax
c000bb51:	75 1c                	jne    c000bb6f <Fs::setcwd(Process*, char*)+0x68>
c000bb53:	eb 2f                	jmp    c000bb84 <Fs::setcwd(Process*, char*)+0x7d>
c000bb55:	83 ec 0c             	sub    esp,0xc
c000bb58:	56                   	push   esi
c000bb59:	e8 22 4a ff ff       	call   c0000580 <strlen>
c000bb5e:	83 c4 10             	add    esp,0x10
c000bb61:	83 f8 03             	cmp    eax,0x3
c000bb64:	75 57                	jne    c000bbbd <Fs::setcwd(Process*, char*)+0xb6>
c000bb66:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bb6b:	75 50                	jne    c000bbbd <Fs::setcwd(Process*, char*)+0xb6>
c000bb6d:	eb d1                	jmp    c000bb40 <Fs::setcwd(Process*, char*)+0x39>
c000bb6f:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bb76:	75 0c                	jne    c000bb84 <Fs::setcwd(Process*, char*)+0x7d>
c000bb78:	83 ec 0c             	sub    esp,0xc
c000bb7b:	50                   	push   eax
c000bb7c:	e8 9f 1d 00 00       	call   c000d920 <LogicalDisk::mount()>
c000bb81:	83 c4 10             	add    esp,0x10
c000bb84:	83 fb 19             	cmp    ebx,0x19
c000bb87:	b8 03 00 00 00       	mov    eax,0x3
c000bb8c:	0f 87 c6 00 00 00    	ja     c000bc58 <Fs::setcwd(Process*, char*)+0x151>
c000bb92:	8b 14 9d e0 94 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6b20]
c000bb99:	b8 05 00 00 00       	mov    eax,0x5
c000bb9e:	85 d2                	test   edx,edx
c000bba0:	0f 84 b2 00 00 00    	je     c000bc58 <Fs::setcwd(Process*, char*)+0x151>
c000bba6:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bbad:	b8 06 00 00 00       	mov    eax,0x6
c000bbb2:	0f 85 92 00 00 00    	jne    c000bc4a <Fs::setcwd(Process*, char*)+0x143>
c000bbb8:	e9 9b 00 00 00       	jmp    c000bc58 <Fs::setcwd(Process*, char*)+0x151>
c000bbbd:	83 ec 0c             	sub    esp,0xc
c000bbc0:	68 14 01 00 00       	push   0x114
c000bbc5:	e8 09 bf ff ff       	call   c0007ad3 <malloc>
c000bbca:	83 c4 0c             	add    esp,0xc
c000bbcd:	55                   	push   ebp
c000bbce:	56                   	push   esi
c000bbcf:	50                   	push   eax
c000bbd0:	89 c3                	mov    ebx,eax
c000bbd2:	e8 11 fb ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c000bbd7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bbdc:	83 c4 0c             	add    esp,0xc
c000bbdf:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bbe3:	50                   	push   eax
c000bbe4:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bbe8:	50                   	push   eax
c000bbe9:	53                   	push   ebx
c000bbea:	e8 b7 fe ff ff       	call   c000baa6 <File::stat(unsigned long long*, bool*)>
c000bbef:	83 c4 10             	add    esp,0x10
c000bbf2:	83 f8 02             	cmp    eax,0x2
c000bbf5:	74 27                	je     c000bc1e <Fs::setcwd(Process*, char*)+0x117>
c000bbf7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bbfc:	75 1c                	jne    c000bc1a <Fs::setcwd(Process*, char*)+0x113>
c000bbfe:	85 db                	test   ebx,ebx
c000bc00:	b8 02 00 00 00       	mov    eax,0x2
c000bc05:	74 51                	je     c000bc58 <Fs::setcwd(Process*, char*)+0x151>
c000bc07:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc09:	83 ec 0c             	sub    esp,0xc
c000bc0c:	53                   	push   ebx
c000bc0d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc10:	83 c4 10             	add    esp,0x10
c000bc13:	b8 02 00 00 00       	mov    eax,0x2
c000bc18:	eb 3e                	jmp    c000bc58 <Fs::setcwd(Process*, char*)+0x151>
c000bc1a:	85 c0                	test   eax,eax
c000bc1c:	74 1c                	je     c000bc3a <Fs::setcwd(Process*, char*)+0x133>
c000bc1e:	85 db                	test   ebx,ebx
c000bc20:	b8 01 00 00 00       	mov    eax,0x1
c000bc25:	74 31                	je     c000bc58 <Fs::setcwd(Process*, char*)+0x151>
c000bc27:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc29:	83 ec 0c             	sub    esp,0xc
c000bc2c:	53                   	push   ebx
c000bc2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc30:	83 c4 10             	add    esp,0x10
c000bc33:	b8 01 00 00 00       	mov    eax,0x1
c000bc38:	eb 1e                	jmp    c000bc58 <Fs::setcwd(Process*, char*)+0x151>
c000bc3a:	85 db                	test   ebx,ebx
c000bc3c:	74 0c                	je     c000bc4a <Fs::setcwd(Process*, char*)+0x143>
c000bc3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc40:	83 ec 0c             	sub    esp,0xc
c000bc43:	53                   	push   ebx
c000bc44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc47:	83 c4 10             	add    esp,0x10
c000bc4a:	50                   	push   eax
c000bc4b:	50                   	push   eax
c000bc4c:	56                   	push   esi
c000bc4d:	57                   	push   edi
c000bc4e:	e8 fd 49 ff ff       	call   c0000650 <strcpy>
c000bc53:	83 c4 10             	add    esp,0x10
c000bc56:	31 c0                	xor    eax,eax
c000bc58:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bc5e:	5b                   	pop    ebx
c000bc5f:	5e                   	pop    esi
c000bc60:	5f                   	pop    edi
c000bc61:	5d                   	pop    ebp
c000bc62:	c3                   	ret    
c000bc63:	90                   	nop

c000bc64 <Directory::Directory(char const*, Process*)>:
c000bc64:	83 ec 0c             	sub    esp,0xc
c000bc67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc6b:	83 ec 08             	sub    esp,0x8
c000bc6e:	6a 00                	push   0x0
c000bc70:	50                   	push   eax
c000bc71:	e8 30 d5 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bc76:	83 c4 10             	add    esp,0x10
c000bc79:	ba cc 12 02 c0       	mov    edx,0xc00212cc
c000bc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc82:	89 10                	mov    DWORD PTR [eax],edx
c000bc84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bc88:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000bc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc92:	83 c0 0d             	add    eax,0xd
c000bc95:	83 ec 04             	sub    esp,0x4
c000bc98:	52                   	push   edx
c000bc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc9d:	50                   	push   eax
c000bc9e:	e8 69 f8 ff ff       	call   c000b50c <Fs::standardiseFiles(char*, char const*, char const*)>
c000bca3:	83 c4 10             	add    esp,0x10
c000bca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcaa:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bcad:	83 e8 41             	sub    eax,0x41
c000bcb0:	88 c2                	mov    dl,al
c000bcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bcbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bcc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bcce:	0f b6 c0             	movzx  eax,al
c000bcd1:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bcd8:	85 c0                	test   eax,eax
c000bcda:	74 3e                	je     c000bd1a <Directory::Directory(char const*, Process*)+0xb6>
c000bcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bce6:	0f b6 c0             	movzx  eax,al
c000bce9:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bcf0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bcf6:	85 c0                	test   eax,eax
c000bcf8:	75 20                	jne    c000bd1a <Directory::Directory(char const*, Process*)+0xb6>
c000bcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcfe:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd04:	0f b6 c0             	movzx  eax,al
c000bd07:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bd0e:	83 ec 0c             	sub    esp,0xc
c000bd11:	50                   	push   eax
c000bd12:	e8 09 1c 00 00       	call   c000d920 <LogicalDisk::mount()>
c000bd17:	83 c4 10             	add    esp,0x10
c000bd1a:	90                   	nop
c000bd1b:	83 c4 0c             	add    esp,0xc
c000bd1e:	c3                   	ret    
c000bd1f:	90                   	nop

c000bd20 <Directory::open()>:
c000bd20:	53                   	push   ebx
c000bd21:	b8 0b 00 00 00       	mov    eax,0xb
c000bd26:	83 ec 08             	sub    esp,0x8
c000bd29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd2d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bd34:	83 fa 19             	cmp    edx,0x19
c000bd37:	77 3d                	ja     c000bd76 <Directory::open()+0x56>
c000bd39:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000bd40:	85 d2                	test   edx,edx
c000bd42:	74 32                	je     c000bd76 <Directory::open()+0x56>
c000bd44:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd4a:	85 d2                	test   edx,edx
c000bd4c:	74 28                	je     c000bd76 <Directory::open()+0x56>
c000bd4e:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bd52:	b8 06 00 00 00       	mov    eax,0x6
c000bd57:	75 1d                	jne    c000bd76 <Directory::open()+0x56>
c000bd59:	50                   	push   eax
c000bd5a:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd5c:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bd62:	51                   	push   ecx
c000bd63:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bd66:	51                   	push   ecx
c000bd67:	52                   	push   edx
c000bd68:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bd6b:	83 c4 10             	add    esp,0x10
c000bd6e:	85 c0                	test   eax,eax
c000bd70:	75 04                	jne    c000bd76 <Directory::open()+0x56>
c000bd72:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bd76:	83 c4 08             	add    esp,0x8
c000bd79:	5b                   	pop    ebx
c000bd7a:	c3                   	ret    
c000bd7b:	90                   	nop

c000bd7c <Directory::close()>:
c000bd7c:	53                   	push   ebx
c000bd7d:	b8 0b 00 00 00       	mov    eax,0xb
c000bd82:	83 ec 08             	sub    esp,0x8
c000bd85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd89:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd90:	83 f9 19             	cmp    ecx,0x19
c000bd93:	77 41                	ja     c000bdd6 <Directory::close()+0x5a>
c000bd95:	8b 1c 8d e0 94 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bd9c:	85 db                	test   ebx,ebx
c000bd9e:	74 36                	je     c000bdd6 <Directory::close()+0x5a>
c000bda0:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bda7:	74 2d                	je     c000bdd6 <Directory::close()+0x5a>
c000bda9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdad:	b8 05 00 00 00       	mov    eax,0x5
c000bdb2:	74 22                	je     c000bdd6 <Directory::close()+0x5a>
c000bdb4:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bdb8:	8b 04 8d e0 94 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6b20]
c000bdbf:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bdc5:	53                   	push   ebx
c000bdc6:	53                   	push   ebx
c000bdc7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bdc9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bdcf:	50                   	push   eax
c000bdd0:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bdd3:	83 c4 10             	add    esp,0x10
c000bdd6:	83 c4 08             	add    esp,0x8
c000bdd9:	5b                   	pop    ebx
c000bdda:	c3                   	ret    
c000bddb:	90                   	nop

c000bddc <Directory::unlink()>:
c000bddc:	83 ec 0c             	sub    esp,0xc
c000bddf:	b8 0b 00 00 00       	mov    eax,0xb
c000bde4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bde8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdef:	83 f9 19             	cmp    ecx,0x19
c000bdf2:	77 2f                	ja     c000be23 <Directory::unlink()+0x47>
c000bdf4:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bdfb:	85 c9                	test   ecx,ecx
c000bdfd:	74 24                	je     c000be23 <Directory::unlink()+0x47>
c000bdff:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be05:	85 c9                	test   ecx,ecx
c000be07:	74 1a                	je     c000be23 <Directory::unlink()+0x47>
c000be09:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be0d:	b8 06 00 00 00       	mov    eax,0x6
c000be12:	75 0f                	jne    c000be23 <Directory::unlink()+0x47>
c000be14:	50                   	push   eax
c000be15:	83 c2 0d             	add    edx,0xd
c000be18:	50                   	push   eax
c000be19:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be1b:	52                   	push   edx
c000be1c:	51                   	push   ecx
c000be1d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000be20:	83 c4 10             	add    esp,0x10
c000be23:	83 c4 0c             	add    esp,0xc
c000be26:	c3                   	ret    
c000be27:	90                   	nop

c000be28 <Directory::rename(char const*)>:
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	b8 0b 00 00 00       	mov    eax,0xb
c000be30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be34:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be3b:	83 f9 19             	cmp    ecx,0x19
c000be3e:	77 32                	ja     c000be72 <Directory::rename(char const*)+0x4a>
c000be40:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000be47:	85 c9                	test   ecx,ecx
c000be49:	74 27                	je     c000be72 <Directory::rename(char const*)+0x4a>
c000be4b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be51:	85 c9                	test   ecx,ecx
c000be53:	74 1d                	je     c000be72 <Directory::rename(char const*)+0x4a>
c000be55:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be59:	b8 06 00 00 00       	mov    eax,0x6
c000be5e:	75 12                	jne    c000be72 <Directory::rename(char const*)+0x4a>
c000be60:	50                   	push   eax
c000be61:	83 c2 0d             	add    edx,0xd
c000be64:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be6a:	52                   	push   edx
c000be6b:	51                   	push   ecx
c000be6c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be6f:	83 c4 10             	add    esp,0x10
c000be72:	83 c4 0c             	add    esp,0xc
c000be75:	c3                   	ret    

c000be76 <Directory::exists()>:
c000be76:	83 ec 0c             	sub    esp,0xc
c000be79:	31 c0                	xor    eax,eax
c000be7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be7f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be86:	83 f9 19             	cmp    ecx,0x19
c000be89:	77 24                	ja     c000beaf <Directory::exists()+0x39>
c000be8b:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000be92:	85 c9                	test   ecx,ecx
c000be94:	74 19                	je     c000beaf <Directory::exists()+0x39>
c000be96:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be9c:	85 c9                	test   ecx,ecx
c000be9e:	74 0f                	je     c000beaf <Directory::exists()+0x39>
c000bea0:	50                   	push   eax
c000bea1:	83 c2 0d             	add    edx,0xd
c000bea4:	50                   	push   eax
c000bea5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bea7:	52                   	push   edx
c000bea8:	51                   	push   ecx
c000bea9:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000beac:	83 c4 10             	add    esp,0x10
c000beaf:	83 c4 0c             	add    esp,0xc
c000beb2:	c3                   	ret    
c000beb3:	90                   	nop

c000beb4 <Directory::read(dirent*)>:
c000beb4:	83 ec 1c             	sub    esp,0x1c
c000beb7:	b8 0b 00 00 00       	mov    eax,0xb
c000bebc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bec0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bec7:	83 f9 19             	cmp    ecx,0x19
c000beca:	77 30                	ja     c000befc <Directory::read(dirent*)+0x48>
c000becc:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bed3:	85 c9                	test   ecx,ecx
c000bed5:	74 25                	je     c000befc <Directory::read(dirent*)+0x48>
c000bed7:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000bede:	74 1c                	je     c000befc <Directory::read(dirent*)+0x48>
c000bee0:	83 ec 0c             	sub    esp,0xc
c000bee3:	8b 02                	mov    eax,DWORD PTR [edx]
c000bee5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000bee9:	51                   	push   ecx
c000beea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beee:	6a 00                	push   0x0
c000bef0:	68 10 01 00 00       	push   0x110
c000bef5:	52                   	push   edx
c000bef6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bef9:	83 c4 20             	add    esp,0x20
c000befc:	83 c4 1c             	add    esp,0x1c
c000beff:	c3                   	ret    

c000bf00 <Directory::create()>:
c000bf00:	83 ec 0c             	sub    esp,0xc
c000bf03:	b8 0b 00 00 00       	mov    eax,0xb
c000bf08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf0c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf13:	83 f9 19             	cmp    ecx,0x19
c000bf16:	77 2f                	ja     c000bf47 <Directory::create()+0x47>
c000bf18:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bf1f:	85 c9                	test   ecx,ecx
c000bf21:	74 24                	je     c000bf47 <Directory::create()+0x47>
c000bf23:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf29:	85 c9                	test   ecx,ecx
c000bf2b:	74 1a                	je     c000bf47 <Directory::create()+0x47>
c000bf2d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf31:	b8 06 00 00 00       	mov    eax,0x6
c000bf36:	75 0f                	jne    c000bf47 <Directory::create()+0x47>
c000bf38:	50                   	push   eax
c000bf39:	83 c2 0d             	add    edx,0xd
c000bf3c:	50                   	push   eax
c000bf3d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf3f:	52                   	push   edx
c000bf40:	51                   	push   ecx
c000bf41:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000bf44:	83 c4 10             	add    esp,0x10
c000bf47:	83 c4 0c             	add    esp,0xc
c000bf4a:	c3                   	ret    
c000bf4b:	90                   	nop

c000bf4c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000bf4c:	b8 0a 00 00 00       	mov    eax,0xa
c000bf51:	c3                   	ret    
c000bf52:	66 90                	xchg   ax,ax

c000bf54 <Bus::Bus(char const*)>:
c000bf54:	83 ec 0c             	sub    esp,0xc
c000bf57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf5b:	83 ec 08             	sub    esp,0x8
c000bf5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf62:	50                   	push   eax
c000bf63:	e8 28 08 00 00       	call   c000c790 <Device::Device(char const*)>
c000bf68:	83 c4 10             	add    esp,0x10
c000bf6b:	ba e8 12 02 c0       	mov    edx,0xc00212e8
c000bf70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf74:	89 10                	mov    DWORD PTR [eax],edx
c000bf76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf7a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000bf84:	90                   	nop
c000bf85:	83 c4 0c             	add    esp,0xc
c000bf88:	c3                   	ret    
c000bf89:	90                   	nop
c000bf8a:	66 90                	xchg   ax,ax

c000bf8c <Bus::~Bus()>:
c000bf8c:	83 ec 0c             	sub    esp,0xc
c000bf8f:	ba e8 12 02 c0       	mov    edx,0xc00212e8
c000bf94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf98:	89 10                	mov    DWORD PTR [eax],edx
c000bf9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf9e:	83 ec 0c             	sub    esp,0xc
c000bfa1:	50                   	push   eax
c000bfa2:	e8 53 05 00 00       	call   c000c4fa <Device::~Device()>
c000bfa7:	83 c4 10             	add    esp,0x10
c000bfaa:	90                   	nop
c000bfab:	83 c4 0c             	add    esp,0xc
c000bfae:	c3                   	ret    
c000bfaf:	90                   	nop

c000bfb0 <Bus::~Bus()>:
c000bfb0:	83 ec 0c             	sub    esp,0xc
c000bfb3:	83 ec 0c             	sub    esp,0xc
c000bfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfba:	e8 cd ff ff ff       	call   c000bf8c <Bus::~Bus()>
c000bfbf:	83 c4 10             	add    esp,0x10
c000bfc2:	83 ec 08             	sub    esp,0x8
c000bfc5:	68 58 01 00 00       	push   0x158
c000bfca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfce:	e8 39 e8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000bfd3:	83 c4 10             	add    esp,0x10
c000bfd6:	83 c4 0c             	add    esp,0xc
c000bfd9:	c3                   	ret    

c000bfda <beepThread(void*)>:
c000bfda:	83 ec 0c             	sub    esp,0xc
c000bfdd:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000bfe2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfe6:	48                   	dec    eax
c000bfe7:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000bfec:	75 01                	jne    c000bfef <beepThread(void*)+0x15>
c000bfee:	fb                   	sti    
c000bfef:	6b c2 0a             	imul   eax,edx,0xa
c000bff2:	83 ec 0c             	sub    esp,0xc
c000bff5:	50                   	push   eax
c000bff6:	e8 95 9d 00 00       	call   c0015d90 <milliTenthSleep(unsigned int)>
c000bffb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c002:	e8 e2 bc 00 00       	call   c0017ce9 <HalMakeBeep(int)>
c000c007:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c00f:	83 c4 1c             	add    esp,0x1c
c000c012:	e9 5d 9c 00 00       	jmp    c0015c74 <blockTask(TaskState)>

c000c017 <Krnl::beep(int, int, bool)>:
c000c017:	56                   	push   esi
c000c018:	53                   	push   ebx
c000c019:	83 ec 10             	sub    esp,0x10
c000c01c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c020:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c028:	e8 bc bc 00 00       	call   c0017ce9 <HalMakeBeep(int)>
c000c02d:	89 f0                	mov    eax,esi
c000c02f:	83 c4 10             	add    esp,0x10
c000c032:	84 c0                	test   al,al
c000c034:	74 1e                	je     c000c054 <Krnl::beep(int, int, bool)+0x3d>
c000c036:	6b db 0a             	imul   ebx,ebx,0xa
c000c039:	83 ec 0c             	sub    esp,0xc
c000c03c:	53                   	push   ebx
c000c03d:	e8 4e 9d 00 00       	call   c0015d90 <milliTenthSleep(unsigned int)>
c000c042:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c04a:	83 c4 14             	add    esp,0x14
c000c04d:	5b                   	pop    ebx
c000c04e:	5e                   	pop    esi
c000c04f:	e9 95 bc 00 00       	jmp    c0017ce9 <HalMakeBeep(int)>
c000c054:	68 e6 00 00 00       	push   0xe6
c000c059:	53                   	push   ebx
c000c05a:	68 da bf 00 c0       	push   0xc000bfda
c000c05f:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000c065:	e8 be 97 00 00       	call   c0015828 <Process::createThread(void (*)(void*), void*, int)>
c000c06a:	83 c4 14             	add    esp,0x14
c000c06d:	5b                   	pop    ebx
c000c06e:	5e                   	pop    esi
c000c06f:	c3                   	ret    

c000c070 <User::loadClockSettings(int)>:
c000c070:	53                   	push   ebx
c000c071:	83 ec 14             	sub    esp,0x14
c000c074:	68 14 01 00 00       	push   0x114
c000c079:	e8 55 ba ff ff       	call   c0007ad3 <malloc>
c000c07e:	83 c4 0c             	add    esp,0xc
c000c081:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000c087:	68 0c 13 02 c0       	push   0xc002130c
c000c08c:	50                   	push   eax
c000c08d:	89 c3                	mov    ebx,eax
c000c08f:	e8 54 f6 ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c000c094:	58                   	pop    eax
c000c095:	5a                   	pop    edx
c000c096:	6a 01                	push   0x1
c000c098:	53                   	push   ebx
c000c099:	e8 06 f7 ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c000c09e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c0a1:	e8 5c f7 ff ff       	call   c000b802 <File::close()>
c000c0a6:	83 c4 10             	add    esp,0x10
c000c0a9:	85 db                	test   ebx,ebx
c000c0ab:	74 0f                	je     c000c0bc <User::loadClockSettings(int)+0x4c>
c000c0ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0af:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c0b3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c0b6:	83 c4 08             	add    esp,0x8
c000c0b9:	5b                   	pop    ebx
c000c0ba:	ff e0                	jmp    eax
c000c0bc:	83 c4 08             	add    esp,0x8
c000c0bf:	5b                   	pop    ebx
c000c0c0:	c3                   	ret    
c000c0c1:	90                   	nop

c000c0c2 <Clock::Clock(char const*)>:
c000c0c2:	83 ec 0c             	sub    esp,0xc
c000c0c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c9:	83 ec 08             	sub    esp,0x8
c000c0cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d0:	50                   	push   eax
c000c0d1:	e8 ba 06 00 00       	call   c000c790 <Device::Device(char const*)>
c000c0d6:	83 c4 10             	add    esp,0x10
c000c0d9:	ba 34 13 02 c0       	mov    edx,0xc0021334
c000c0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e2:	89 10                	mov    DWORD PTR [eax],edx
c000c0e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c0f2:	90                   	nop
c000c0f3:	83 c4 0c             	add    esp,0xc
c000c0f6:	c3                   	ret    
c000c0f7:	90                   	nop

c000c0f8 <Clock::~Clock()>:
c000c0f8:	83 ec 0c             	sub    esp,0xc
c000c0fb:	ba 34 13 02 c0       	mov    edx,0xc0021334
c000c100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c104:	89 10                	mov    DWORD PTR [eax],edx
c000c106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c10a:	83 ec 0c             	sub    esp,0xc
c000c10d:	50                   	push   eax
c000c10e:	e8 e7 03 00 00       	call   c000c4fa <Device::~Device()>
c000c113:	83 c4 10             	add    esp,0x10
c000c116:	90                   	nop
c000c117:	83 c4 0c             	add    esp,0xc
c000c11a:	c3                   	ret    
c000c11b:	90                   	nop

c000c11c <Clock::~Clock()>:
c000c11c:	83 ec 0c             	sub    esp,0xc
c000c11f:	83 ec 0c             	sub    esp,0xc
c000c122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c126:	e8 cd ff ff ff       	call   c000c0f8 <Clock::~Clock()>
c000c12b:	83 c4 10             	add    esp,0x10
c000c12e:	83 ec 08             	sub    esp,0x8
c000c131:	68 58 01 00 00       	push   0x158
c000c136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c13a:	e8 cd e6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c13f:	83 c4 10             	add    esp,0x10
c000c142:	83 c4 0c             	add    esp,0xc
c000c145:	c3                   	ret    

c000c146 <Clock::timeInSecondsLocal()>:
c000c146:	53                   	push   ebx
c000c147:	83 ec 14             	sub    esp,0x14
c000c14a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c14e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c150:	50                   	push   eax
c000c151:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c154:	0f b6 0d 68 70 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027068
c000c15b:	03 0d 6c 70 02 c0    	add    ecx,DWORD PTR ds:0xc002706c
c000c161:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c167:	89 cb                	mov    ebx,ecx
c000c169:	c1 fb 1f             	sar    ebx,0x1f
c000c16c:	01 c8                	add    eax,ecx
c000c16e:	11 da                	adc    edx,ebx
c000c170:	83 c4 10             	add    esp,0x10
c000c173:	31 c9                	xor    ecx,ecx
c000c175:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c17c:	74 05                	je     c000c183 <Clock::timeInSecondsLocal()+0x3d>
c000c17e:	b9 08 07 00 00       	mov    ecx,0x708
c000c183:	31 db                	xor    ebx,ebx
c000c185:	01 c8                	add    eax,ecx
c000c187:	11 da                	adc    edx,ebx
c000c189:	83 c4 08             	add    esp,0x8
c000c18c:	5b                   	pop    ebx
c000c18d:	c3                   	ret    

c000c18e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c18e:	57                   	push   edi
c000c18f:	56                   	push   esi
c000c190:	53                   	push   ebx
c000c191:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c195:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c199:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c19d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c19f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c1a2:	0f b6 05 68 70 02 c0 	movzx  eax,BYTE PTR ds:0xc0027068
c000c1a9:	03 05 6c 70 02 c0    	add    eax,DWORD PTR ds:0xc002706c
c000c1af:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c1b5:	99                   	cdq    
c000c1b6:	29 c6                	sub    esi,eax
c000c1b8:	19 d7                	sbb    edi,edx
c000c1ba:	89 f0                	mov    eax,esi
c000c1bc:	31 f6                	xor    esi,esi
c000c1be:	89 fa                	mov    edx,edi
c000c1c0:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c1c7:	74 05                	je     c000c1ce <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c1c9:	be 08 07 00 00       	mov    esi,0x708
c000c1ce:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c1d2:	31 ff                	xor    edi,edi
c000c1d4:	29 f0                	sub    eax,esi
c000c1d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1da:	19 fa                	sbb    edx,edi
c000c1dc:	89 d8                	mov    eax,ebx
c000c1de:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1e2:	5b                   	pop    ebx
c000c1e3:	5e                   	pop    esi
c000c1e4:	5f                   	pop    edi
c000c1e5:	ff e0                	jmp    eax

c000c1e7 <datetimeToSeconds(datetime_t)>:
c000c1e7:	55                   	push   ebp
c000c1e8:	57                   	push   edi
c000c1e9:	56                   	push   esi
c000c1ea:	53                   	push   ebx
c000c1eb:	83 ec 0c             	sub    esp,0xc
c000c1ee:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c1f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c1f6:	89 f7                	mov    edi,esi
c000c1f8:	89 f0                	mov    eax,esi
c000c1fa:	0f b6 cf             	movzx  ecx,bh
c000c1fd:	0f b6 c4             	movzx  eax,ah
c000c200:	c1 ef 10             	shr    edi,0x10
c000c203:	89 da                	mov    edx,ebx
c000c205:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c208:	89 f9                	mov    ecx,edi
c000c20a:	0f b6 f9             	movzx  edi,cl
c000c20d:	89 f1                	mov    ecx,esi
c000c20f:	6b c0 3c             	imul   eax,eax,0x3c
c000c212:	0f b6 f1             	movzx  esi,cl
c000c215:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c21b:	0f b6 db             	movzx  ebx,bl
c000c21e:	c1 ea 10             	shr    edx,0x10
c000c221:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c227:	01 f8                	add    eax,edi
c000c229:	01 f0                	add    eax,esi
c000c22b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c22e:	c1 f8 1f             	sar    eax,0x1f
c000c231:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c235:	89 e8                	mov    eax,ebp
c000c237:	0f b6 c0             	movzx  eax,al
c000c23a:	8b 0c 85 80 13 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdec80]
c000c241:	83 f8 01             	cmp    eax,0x1
c000c244:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c248:	0f b7 da             	movzx  ebx,dx
c000c24b:	76 27                	jbe    c000c274 <datetimeToSeconds(datetime_t)+0x8d>
c000c24d:	80 e2 03             	and    dl,0x3
c000c250:	75 22                	jne    c000c274 <datetimeToSeconds(datetime_t)+0x8d>
c000c252:	31 d2                	xor    edx,edx
c000c254:	be 64 00 00 00       	mov    esi,0x64
c000c259:	89 d8                	mov    eax,ebx
c000c25b:	f7 f6                	div    esi
c000c25d:	85 d2                	test   edx,edx
c000c25f:	75 12                	jne    c000c273 <datetimeToSeconds(datetime_t)+0x8c>
c000c261:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c267:	be 90 01 00 00       	mov    esi,0x190
c000c26c:	99                   	cdq    
c000c26d:	f7 fe                	idiv   esi
c000c26f:	85 d2                	test   edx,edx
c000c271:	75 01                	jne    c000c274 <datetimeToSeconds(datetime_t)+0x8d>
c000c273:	41                   	inc    ecx
c000c274:	83 fb 46             	cmp    ebx,0x46
c000c277:	76 48                	jbe    c000c2c1 <datetimeToSeconds(datetime_t)+0xda>
c000c279:	be 46 00 00 00       	mov    esi,0x46
c000c27e:	bf 64 00 00 00       	mov    edi,0x64
c000c283:	bd 90 01 00 00       	mov    ebp,0x190
c000c288:	f7 c6 03 00 00 00    	test   esi,0x3
c000c28e:	b8 6d 01 00 00       	mov    eax,0x16d
c000c293:	75 23                	jne    c000c2b8 <datetimeToSeconds(datetime_t)+0xd1>
c000c295:	89 f0                	mov    eax,esi
c000c297:	99                   	cdq    
c000c298:	f7 ff                	idiv   edi
c000c29a:	b8 6e 01 00 00       	mov    eax,0x16e
c000c29f:	85 d2                	test   edx,edx
c000c2a1:	75 15                	jne    c000c2b8 <datetimeToSeconds(datetime_t)+0xd1>
c000c2a3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c2a9:	99                   	cdq    
c000c2aa:	f7 fd                	idiv   ebp
c000c2ac:	83 fa 01             	cmp    edx,0x1
c000c2af:	19 c0                	sbb    eax,eax
c000c2b1:	f7 d0                	not    eax
c000c2b3:	05 6e 01 00 00       	add    eax,0x16e
c000c2b8:	46                   	inc    esi
c000c2b9:	01 c1                	add    ecx,eax
c000c2bb:	39 de                	cmp    esi,ebx
c000c2bd:	7c c9                	jl     c000c288 <datetimeToSeconds(datetime_t)+0xa1>
c000c2bf:	eb 34                	jmp    c000c2f5 <datetimeToSeconds(datetime_t)+0x10e>
c000c2c1:	74 32                	je     c000c2f5 <datetimeToSeconds(datetime_t)+0x10e>
c000c2c3:	b8 45 00 00 00       	mov    eax,0x45
c000c2c8:	89 c2                	mov    edx,eax
c000c2ca:	83 e2 03             	and    edx,0x3
c000c2cd:	39 d8                	cmp    eax,ebx
c000c2cf:	7e 0f                	jle    c000c2e0 <datetimeToSeconds(datetime_t)+0xf9>
c000c2d1:	83 fa 01             	cmp    edx,0x1
c000c2d4:	19 d2                	sbb    edx,edx
c000c2d6:	48                   	dec    eax
c000c2d7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c2de:	eb e8                	jmp    c000c2c8 <datetimeToSeconds(datetime_t)+0xe1>
c000c2e0:	85 d2                	test   edx,edx
c000c2e2:	b8 6d 01 00 00       	mov    eax,0x16d
c000c2e7:	75 0a                	jne    c000c2f3 <datetimeToSeconds(datetime_t)+0x10c>
c000c2e9:	83 fb 01             	cmp    ebx,0x1
c000c2ec:	19 c0                	sbb    eax,eax
c000c2ee:	05 6e 01 00 00       	add    eax,0x16e
c000c2f3:	29 c1                	sub    ecx,eax
c000c2f5:	b8 80 51 01 00       	mov    eax,0x15180
c000c2fa:	f7 e9                	imul   ecx
c000c2fc:	03 04 24             	add    eax,DWORD PTR [esp]
c000c2ff:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c303:	83 c4 0c             	add    esp,0xc
c000c306:	5b                   	pop    ebx
c000c307:	5e                   	pop    esi
c000c308:	5f                   	pop    edi
c000c309:	5d                   	pop    ebp
c000c30a:	c3                   	ret    
c000c30b:	90                   	nop

c000c30c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c30c:	57                   	push   edi
c000c30d:	56                   	push   esi
c000c30e:	53                   	push   ebx
c000c30f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c313:	8b 06                	mov    eax,DWORD PTR [esi]
c000c315:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c318:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c31c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c320:	e8 c2 fe ff ff       	call   c000c1e7 <datetimeToSeconds(datetime_t)>
c000c325:	59                   	pop    ecx
c000c326:	0f b6 0d 68 70 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027068
c000c32d:	5b                   	pop    ebx
c000c32e:	03 0d 6c 70 02 c0    	add    ecx,DWORD PTR ds:0xc002706c
c000c334:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c33a:	89 cb                	mov    ebx,ecx
c000c33c:	c1 fb 1f             	sar    ebx,0x1f
c000c33f:	29 c8                	sub    eax,ecx
c000c341:	19 da                	sbb    edx,ebx
c000c343:	31 c9                	xor    ecx,ecx
c000c345:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c34c:	74 05                	je     c000c353 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c34e:	b9 08 07 00 00       	mov    ecx,0x708
c000c353:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c357:	31 db                	xor    ebx,ebx
c000c359:	29 c8                	sub    eax,ecx
c000c35b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c35f:	19 da                	sbb    edx,ebx
c000c361:	89 f8                	mov    eax,edi
c000c363:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c367:	5b                   	pop    ebx
c000c368:	5e                   	pop    esi
c000c369:	5f                   	pop    edi
c000c36a:	ff e0                	jmp    eax

c000c36c <secondsToDatetime(unsigned long long)>:
c000c36c:	55                   	push   ebp
c000c36d:	57                   	push   edi
c000c36e:	56                   	push   esi
c000c36f:	53                   	push   ebx
c000c370:	83 ec 1c             	sub    esp,0x1c
c000c373:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c377:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c37b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c37f:	6a 00                	push   0x0
c000c381:	68 80 51 01 00       	push   0x15180
c000c386:	55                   	push   ebp
c000c387:	57                   	push   edi
c000c388:	e8 a3 2d 01 00       	call   c001f130 <__udivdi3>
c000c38d:	83 c4 10             	add    esp,0x10
c000c390:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c394:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c39a:	6a 00                	push   0x0
c000c39c:	68 80 51 01 00       	push   0x15180
c000c3a1:	55                   	push   ebp
c000c3a2:	57                   	push   edi
c000c3a3:	bf 10 0e 00 00       	mov    edi,0xe10
c000c3a8:	e8 83 2e 01 00       	call   c001f230 <__umoddi3>
c000c3ad:	83 c4 10             	add    esp,0x10
c000c3b0:	99                   	cdq    
c000c3b1:	f7 ff                	idiv   edi
c000c3b3:	bf 3c 00 00 00       	mov    edi,0x3c
c000c3b8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c3bb:	89 d0                	mov    eax,edx
c000c3bd:	99                   	cdq    
c000c3be:	f7 ff                	idiv   edi
c000c3c0:	85 db                	test   ebx,ebx
c000c3c2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c3c5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c3c8:	79 11                	jns    c000c3db <secondsToDatetime(unsigned long long)+0x6f>
c000c3ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c3ce:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c3d4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c3d9:	eb 07                	jmp    c000c3e2 <secondsToDatetime(unsigned long long)+0x76>
c000c3db:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c3e0:	89 d8                	mov    eax,ebx
c000c3e2:	99                   	cdq    
c000c3e3:	bf b4 05 00 00       	mov    edi,0x5b4
c000c3e8:	f7 f9                	idiv   ecx
c000c3ea:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c3ef:	31 d2                	xor    edx,edx
c000c3f1:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c3f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3fa:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c402:	01 c3                	add    ebx,eax
c000c404:	89 d8                	mov    eax,ebx
c000c406:	f7 f1                	div    ecx
c000c408:	31 d2                	xor    edx,edx
c000c40a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c40d:	89 d8                	mov    eax,ebx
c000c40f:	f7 f7                	div    edi
c000c411:	31 d2                	xor    edx,edx
c000c413:	29 c1                	sub    ecx,eax
c000c415:	89 d8                	mov    eax,ebx
c000c417:	f7 f5                	div    ebp
c000c419:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c41e:	31 d2                	xor    edx,edx
c000c420:	29 c1                	sub    ecx,eax
c000c422:	89 c8                	mov    eax,ecx
c000c424:	f7 f5                	div    ebp
c000c426:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c42b:	31 d2                	xor    edx,edx
c000c42d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c431:	89 c8                	mov    eax,ecx
c000c433:	f7 f5                	div    ebp
c000c435:	31 d2                	xor    edx,edx
c000c437:	01 c3                	add    ebx,eax
c000c439:	89 c8                	mov    eax,ecx
c000c43b:	f7 f7                	div    edi
c000c43d:	bf 99 00 00 00       	mov    edi,0x99
c000c442:	31 d2                	xor    edx,edx
c000c444:	29 c3                	sub    ebx,eax
c000c446:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c44e:	29 c3                	sub    ebx,eax
c000c450:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c453:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c456:	83 c1 02             	add    ecx,0x2
c000c459:	89 c8                	mov    eax,ecx
c000c45b:	bb 05 00 00 00       	mov    ebx,0x5
c000c460:	f7 f7                	div    edi
c000c462:	31 d2                	xor    edx,edx
c000c464:	89 c7                	mov    edi,eax
c000c466:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c46c:	83 c0 02             	add    eax,0x2
c000c46f:	f7 f3                	div    ebx
c000c471:	89 eb                	mov    ebx,ebp
c000c473:	29 c3                	sub    ebx,eax
c000c475:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c47b:	88 1e                	mov    BYTE PTR [esi],bl
c000c47d:	19 c0                	sbb    eax,eax
c000c47f:	31 d2                	xor    edx,edx
c000c481:	83 e0 0c             	and    eax,0xc
c000c484:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c488:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c490:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c494:	83 f9 01             	cmp    ecx,0x1
c000c497:	0f 96 c2             	setbe  dl
c000c49a:	41                   	inc    ecx
c000c49b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c49e:	01 d0                	add    eax,edx
c000c4a0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c4a4:	83 c4 1c             	add    esp,0x1c
c000c4a7:	89 f0                	mov    eax,esi
c000c4a9:	5b                   	pop    ebx
c000c4aa:	5e                   	pop    esi
c000c4ab:	5f                   	pop    edi
c000c4ac:	5d                   	pop    ebp
c000c4ad:	c2 04 00             	ret    0x4

c000c4b0 <Clock::timeInDatetimeLocal()>:
c000c4b0:	53                   	push   ebx
c000c4b1:	83 ec 14             	sub    esp,0x14
c000c4b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c4b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c4bc:	e8 85 fc ff ff       	call   c000c146 <Clock::timeInSecondsLocal()>
c000c4c1:	83 c4 0c             	add    esp,0xc
c000c4c4:	52                   	push   edx
c000c4c5:	50                   	push   eax
c000c4c6:	53                   	push   ebx
c000c4c7:	e8 a0 fe ff ff       	call   c000c36c <secondsToDatetime(unsigned long long)>
c000c4cc:	89 d8                	mov    eax,ebx
c000c4ce:	83 c4 14             	add    esp,0x14
c000c4d1:	5b                   	pop    ebx
c000c4d2:	c2 04 00             	ret    0x4
c000c4d5:	90                   	nop

c000c4d6 <Device::hibernate()>:
c000c4d6:	c3                   	ret    
c000c4d7:	90                   	nop

c000c4d8 <Device::wake()>:
c000c4d8:	c3                   	ret    
c000c4d9:	90                   	nop

c000c4da <Device::detect()>:
c000c4da:	c3                   	ret    
c000c4db:	90                   	nop

c000c4dc <Device::disableLegacy()>:
c000c4dc:	c3                   	ret    
c000c4dd:	90                   	nop

c000c4de <Device::powerSaving(PowerSavingLevel)>:
c000c4de:	c3                   	ret    
c000c4df:	90                   	nop

c000c4e0 <DriverlessDevice::close(int, int, void*)>:
c000c4e0:	31 c0                	xor    eax,eax
c000c4e2:	c3                   	ret    
c000c4e3:	90                   	nop

c000c4e4 <DriverlessDevice::detect()>:
c000c4e4:	c3                   	ret    
c000c4e5:	90                   	nop

c000c4e6 <DriverlessDevice::open(int, int, void*)>:
c000c4e6:	83 ec 18             	sub    esp,0x18
c000c4e9:	68 b0 13 02 c0       	push   0xc00213b0
c000c4ee:	e8 7e 4c 00 00       	call   c0011171 <KePanic(char const*)>
c000c4f3:	83 c8 ff             	or     eax,0xffffffff
c000c4f6:	83 c4 1c             	add    esp,0x1c
c000c4f9:	c3                   	ret    

c000c4fa <Device::~Device()>:
c000c4fa:	ba 10 14 02 c0       	mov    edx,0xc0021410
c000c4ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c503:	89 10                	mov    DWORD PTR [eax],edx
c000c505:	90                   	nop
c000c506:	c3                   	ret    
c000c507:	90                   	nop

c000c508 <Device::~Device()>:
c000c508:	83 ec 0c             	sub    esp,0xc
c000c50b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c50f:	e8 e6 ff ff ff       	call   c000c4fa <Device::~Device()>
c000c514:	83 c4 04             	add    esp,0x4
c000c517:	83 ec 08             	sub    esp,0x8
c000c51a:	68 58 01 00 00       	push   0x158
c000c51f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c523:	e8 e4 e2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c528:	83 c4 10             	add    esp,0x10
c000c52b:	83 c4 0c             	add    esp,0xc
c000c52e:	c3                   	ret    
c000c52f:	90                   	nop

c000c530 <Device::findAndLoadDriver()>:
c000c530:	c7 44 24 04 ce 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213ce
c000c538:	e9 cd e3 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c53d:	90                   	nop

c000c53e <Device::preOpenPCI(PCIDeviceInfo)>:
c000c53e:	57                   	push   edi
c000c53f:	b9 09 00 00 00       	mov    ecx,0x9
c000c544:	56                   	push   esi
c000c545:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c549:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c54d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c557:	81 c7 18 01 00 00    	add    edi,0x118
c000c55d:	fc                   	cld    
c000c55e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c560:	5e                   	pop    esi
c000c561:	5f                   	pop    edi
c000c562:	c3                   	ret    
c000c563:	90                   	nop

c000c564 <Device::preOpenACPI(void*, char*, char*)>:
c000c564:	57                   	push   edi
c000c565:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c56a:	56                   	push   esi
c000c56b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c56f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c573:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c577:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c581:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c587:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c58d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c58f:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c595:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c599:	b9 0e 00 00 00       	mov    ecx,0xe
c000c59e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5a0:	5e                   	pop    esi
c000c5a1:	5f                   	pop    edi
c000c5a2:	c3                   	ret    
c000c5a3:	90                   	nop

c000c5a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5a4:	53                   	push   ebx
c000c5a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c5a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c5b5:	0f b6 c0             	movzx  eax,al
c000c5b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c5c0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c5c4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5c8:	5b                   	pop    ebx
c000c5c9:	e9 aa 05 00 00       	jmp    c000cb78 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c5ce <Device::getParent()>:
c000c5ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5d2:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c5d8:	c3                   	ret    
c000c5d9:	90                   	nop

c000c5da <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c5da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c5de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5e2:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c5e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c5eb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c5f3:	e9 f7 06 00 00       	jmp    c000ccef <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c5f8 <Device::addChild(Device*)>:
c000c5f8:	53                   	push   ebx
c000c5f9:	83 ec 08             	sub    esp,0x8
c000c5fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c600:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c604:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c60a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c610:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c612:	85 d2                	test   edx,edx
c000c614:	74 04                	je     c000c61a <Device::addChild(Device*)+0x22>
c000c616:	89 d3                	mov    ebx,edx
c000c618:	eb f6                	jmp    c000c610 <Device::addChild(Device*)+0x18>
c000c61a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c61d:	83 ec 0c             	sub    esp,0xc
c000c620:	6a 08                	push   0x8
c000c622:	e8 ac b4 ff ff       	call   c0007ad3 <malloc>
c000c627:	89 03                	mov    DWORD PTR [ebx],eax
c000c629:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c62f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c636:	83 c4 18             	add    esp,0x18
c000c639:	5b                   	pop    ebx
c000c63a:	c3                   	ret    
c000c63b:	90                   	nop

c000c63c <Device::removeAllChildren()>:
c000c63c:	56                   	push   esi
c000c63d:	53                   	push   ebx
c000c63e:	52                   	push   edx
c000c63f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c643:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c649:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c64c:	74 17                	je     c000c665 <Device::removeAllChildren()+0x29>
c000c64e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c651:	85 c0                	test   eax,eax
c000c653:	74 0c                	je     c000c661 <Device::removeAllChildren()+0x25>
c000c655:	8b 10                	mov    edx,DWORD PTR [eax]
c000c657:	83 ec 0c             	sub    esp,0xc
c000c65a:	50                   	push   eax
c000c65b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c65e:	83 c4 10             	add    esp,0x10
c000c661:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c663:	eb e4                	jmp    c000c649 <Device::removeAllChildren()+0xd>
c000c665:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c66b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c671:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c677:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c67e:	58                   	pop    eax
c000c67f:	5b                   	pop    ebx
c000c680:	5e                   	pop    esi
c000c681:	c3                   	ret    

c000c682 <Device::hibernateAll()>:
c000c682:	53                   	push   ebx
c000c683:	83 ec 14             	sub    esp,0x14
c000c686:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c68a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c68c:	53                   	push   ebx
c000c68d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c690:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c69c:	74 0f                	je     c000c6ad <Device::hibernateAll()+0x2b>
c000c69e:	83 ec 0c             	sub    esp,0xc
c000c6a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6a4:	e8 d9 ff ff ff       	call   c000c682 <Device::hibernateAll()>
c000c6a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6ab:	eb e9                	jmp    c000c696 <Device::hibernateAll()+0x14>
c000c6ad:	83 c4 08             	add    esp,0x8
c000c6b0:	5b                   	pop    ebx
c000c6b1:	c3                   	ret    

c000c6b2 <Device::wakeAll()>:
c000c6b2:	53                   	push   ebx
c000c6b3:	83 ec 14             	sub    esp,0x14
c000c6b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6bc:	53                   	push   ebx
c000c6bd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c6c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6c6:	83 c4 10             	add    esp,0x10
c000c6c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6cc:	74 0f                	je     c000c6dd <Device::wakeAll()+0x2b>
c000c6ce:	83 ec 0c             	sub    esp,0xc
c000c6d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6d4:	e8 d9 ff ff ff       	call   c000c6b2 <Device::wakeAll()>
c000c6d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6db:	eb e9                	jmp    c000c6c6 <Device::wakeAll()+0x14>
c000c6dd:	83 c4 08             	add    esp,0x8
c000c6e0:	5b                   	pop    ebx
c000c6e1:	c3                   	ret    

c000c6e2 <Device::detectAll()>:
c000c6e2:	53                   	push   ebx
c000c6e3:	83 ec 14             	sub    esp,0x14
c000c6e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6ec:	53                   	push   ebx
c000c6ed:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c6f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6f6:	83 c4 10             	add    esp,0x10
c000c6f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6fc:	74 0f                	je     c000c70d <Device::detectAll()+0x2b>
c000c6fe:	83 ec 0c             	sub    esp,0xc
c000c701:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c704:	e8 d9 ff ff ff       	call   c000c6e2 <Device::detectAll()>
c000c709:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c70b:	eb e9                	jmp    c000c6f6 <Device::detectAll()+0x14>
c000c70d:	83 c4 08             	add    esp,0x8
c000c710:	5b                   	pop    ebx
c000c711:	c3                   	ret    

c000c712 <Device::disableLegacyAll()>:
c000c712:	c3                   	ret    
c000c713:	90                   	nop

c000c714 <Device::loadDriversForAll()>:
c000c714:	c3                   	ret    
c000c715:	90                   	nop

c000c716 <Device::closeAll()>:
c000c716:	53                   	push   ebx
c000c717:	83 ec 08             	sub    esp,0x8
c000c71a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c71e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c720:	6a 00                	push   0x0
c000c722:	6a 00                	push   0x0
c000c724:	6a 00                	push   0x0
c000c726:	53                   	push   ebx
c000c727:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c72a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c730:	83 c4 10             	add    esp,0x10
c000c733:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c736:	74 0f                	je     c000c747 <Device::closeAll()+0x31>
c000c738:	83 ec 0c             	sub    esp,0xc
c000c73b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c73e:	e8 d3 ff ff ff       	call   c000c716 <Device::closeAll()>
c000c743:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c745:	eb e9                	jmp    c000c730 <Device::closeAll()+0x1a>
c000c747:	83 c4 08             	add    esp,0x8
c000c74a:	5b                   	pop    ebx
c000c74b:	c3                   	ret    

c000c74c <Device::powerSavingAll(PowerSavingLevel)>:
c000c74c:	56                   	push   esi
c000c74d:	53                   	push   ebx
c000c74e:	83 ec 0c             	sub    esp,0xc
c000c751:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c755:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c759:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c75b:	56                   	push   esi
c000c75c:	53                   	push   ebx
c000c75d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c760:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c766:	83 c4 10             	add    esp,0x10
c000c769:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c76c:	74 0f                	je     c000c77d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c76e:	52                   	push   edx
c000c76f:	52                   	push   edx
c000c770:	56                   	push   esi
c000c771:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c774:	e8 d3 ff ff ff       	call   c000c74c <Device::powerSavingAll(PowerSavingLevel)>
c000c779:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c77b:	eb e9                	jmp    c000c766 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c77d:	58                   	pop    eax
c000c77e:	5b                   	pop    ebx
c000c77f:	5e                   	pop    esi
c000c780:	c3                   	ret    
c000c781:	90                   	nop

c000c782 <Device::setName(char const*)>:
c000c782:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c78a:	e9 c1 3e ff ff       	jmp    c0000650 <strcpy>
c000c78f:	90                   	nop

c000c790 <Device::Device(char const*)>:
c000c790:	83 ec 1c             	sub    esp,0x1c
c000c793:	ba 10 14 02 c0       	mov    edx,0xc0021410
c000c798:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c79c:	89 10                	mov    DWORD PTR [eax],edx
c000c79e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7a2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c7ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7b0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c7ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7be:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c7c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7cc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c7d6:	83 ec 08             	sub    esp,0x8
c000c7d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7e1:	e8 9c ff ff ff       	call   c000c782 <Device::setName(char const*)>
c000c7e6:	83 c4 10             	add    esp,0x10
c000c7e9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c7f1:	83 ec 0c             	sub    esp,0xc
c000c7f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c7f8:	e8 d6 b2 ff ff       	call   c0007ad3 <malloc>
c000c7fd:	83 c4 10             	add    esp,0x10
c000c800:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c806:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c80d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c811:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c817:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c81b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c821:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c827:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c82b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c831:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c838:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c83c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c847:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c84e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c852:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c85c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c860:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c86a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c86e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c878:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c87c:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c886:	90                   	nop
c000c887:	83 c4 1c             	add    esp,0x1c
c000c88a:	c3                   	ret    
c000c88b:	90                   	nop

c000c88c <Device::getName()>:
c000c88c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c890:	05 d0 00 00 00       	add    eax,0xd0
c000c895:	c3                   	ret    

c000c896 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c896:	83 ec 0c             	sub    esp,0xc
c000c899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c89d:	83 ec 08             	sub    esp,0x8
c000c8a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8a4:	50                   	push   eax
c000c8a5:	e8 e6 fe ff ff       	call   c000c790 <Device::Device(char const*)>
c000c8aa:	83 c4 10             	add    esp,0x10
c000c8ad:	ba 3c 14 02 c0       	mov    edx,0xc002143c
c000c8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b6:	89 10                	mov    DWORD PTR [eax],edx
c000c8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8bc:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c8c6:	90                   	nop
c000c8c7:	83 c4 0c             	add    esp,0xc
c000c8ca:	c3                   	ret    
c000c8cb:	90                   	nop

c000c8cc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c8cc:	57                   	push   edi
c000c8cd:	56                   	push   esi
c000c8ce:	53                   	push   ebx
c000c8cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c8d7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c8db:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c8e1:	75 0c                	jne    c000c8ef <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c8e3:	52                   	push   edx
c000c8e4:	52                   	push   edx
c000c8e5:	53                   	push   ebx
c000c8e6:	56                   	push   esi
c000c8e7:	e8 f6 2c 01 00       	call   c001f5e2 <LinkedList<Device>::addElement(Device*)>
c000c8ec:	83 c4 10             	add    esp,0x10
c000c8ef:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8f5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8f8:	74 12                	je     c000c90c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c8fa:	50                   	push   eax
c000c8fb:	57                   	push   edi
c000c8fc:	56                   	push   esi
c000c8fd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c900:	e8 c7 ff ff ff       	call   c000c8cc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c905:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c907:	83 c4 10             	add    esp,0x10
c000c90a:	eb e9                	jmp    c000c8f5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c90c:	5b                   	pop    ebx
c000c90d:	5e                   	pop    esi
c000c90e:	5f                   	pop    edi
c000c90f:	c3                   	ret    

c000c910 <getDevicesOfType(DeviceType)>:
c000c910:	53                   	push   ebx
c000c911:	83 ec 14             	sub    esp,0x14
c000c914:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c918:	53                   	push   ebx
c000c919:	e8 a0 2d 01 00       	call   c001f6be <LinkedList<Device>::LinkedList()>
c000c91e:	83 c4 0c             	add    esp,0xc
c000c921:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c925:	53                   	push   ebx
c000c926:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c92c:	e8 9b ff ff ff       	call   c000c8cc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c931:	83 c4 18             	add    esp,0x18
c000c934:	89 d8                	mov    eax,ebx
c000c936:	5b                   	pop    ebx
c000c937:	c2 04 00             	ret    0x4
c000c93a:	66 90                	xchg   ax,ax

c000c93c <HardDiskController::HardDiskController(char const*)>:
c000c93c:	83 ec 0c             	sub    esp,0xc
c000c93f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c943:	83 ec 08             	sub    esp,0x8
c000c946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c94a:	50                   	push   eax
c000c94b:	e8 40 fe ff ff       	call   c000c790 <Device::Device(char const*)>
c000c950:	83 c4 10             	add    esp,0x10
c000c953:	ba 68 14 02 c0       	mov    edx,0xc0021468
c000c958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c95c:	89 10                	mov    DWORD PTR [eax],edx
c000c95e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c962:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c96c:	90                   	nop
c000c96d:	83 c4 0c             	add    esp,0xc
c000c970:	c3                   	ret    
c000c971:	90                   	nop
c000c972:	66 90                	xchg   ax,ax

c000c974 <HardDiskController::~HardDiskController()>:
c000c974:	83 ec 0c             	sub    esp,0xc
c000c977:	ba 68 14 02 c0       	mov    edx,0xc0021468
c000c97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c980:	89 10                	mov    DWORD PTR [eax],edx
c000c982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c986:	83 ec 0c             	sub    esp,0xc
c000c989:	50                   	push   eax
c000c98a:	e8 6b fb ff ff       	call   c000c4fa <Device::~Device()>
c000c98f:	83 c4 10             	add    esp,0x10
c000c992:	90                   	nop
c000c993:	83 c4 0c             	add    esp,0xc
c000c996:	c3                   	ret    
c000c997:	90                   	nop

c000c998 <HardDiskController::~HardDiskController()>:
c000c998:	83 ec 0c             	sub    esp,0xc
c000c99b:	83 ec 0c             	sub    esp,0xc
c000c99e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9a2:	e8 cd ff ff ff       	call   c000c974 <HardDiskController::~HardDiskController()>
c000c9a7:	83 c4 10             	add    esp,0x10
c000c9aa:	83 ec 08             	sub    esp,0x8
c000c9ad:	68 58 01 00 00       	push   0x158
c000c9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b6:	e8 51 de ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c9bb:	83 c4 10             	add    esp,0x10
c000c9be:	83 c4 0c             	add    esp,0xc
c000c9c1:	c3                   	ret    

c000c9c2 <PhysicalDisk::eject()>:
c000c9c2:	83 c8 ff             	or     eax,0xffffffff
c000c9c5:	c3                   	ret    

c000c9c6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c9c6:	83 ec 0c             	sub    esp,0xc
c000c9c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9cd:	83 ec 08             	sub    esp,0x8
c000c9d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9d4:	50                   	push   eax
c000c9d5:	e8 b6 fd ff ff       	call   c000c790 <Device::Device(char const*)>
c000c9da:	83 c4 10             	add    esp,0x10
c000c9dd:	ba 94 14 02 c0       	mov    edx,0xc0021494
c000c9e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9e6:	89 10                	mov    DWORD PTR [eax],edx
c000c9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ec:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9f7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca02:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ca0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ca14:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ca1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca1e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ca28:	90                   	nop
c000ca29:	83 c4 0c             	add    esp,0xc
c000ca2c:	c3                   	ret    
c000ca2d:	90                   	nop

c000ca2e <PhysicalDisk::startCache()>:
c000ca2e:	56                   	push   esi
c000ca2f:	53                   	push   ebx
c000ca30:	83 ec 10             	sub    esp,0x10
c000ca33:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca37:	6a 44                	push   0x44
c000ca39:	e8 95 b0 ff ff       	call   c0007ad3 <malloc>
c000ca3e:	89 c6                	mov    esi,eax
c000ca40:	58                   	pop    eax
c000ca41:	5a                   	pop    edx
c000ca42:	53                   	push   ebx
c000ca43:	56                   	push   esi
c000ca44:	e8 83 17 00 00       	call   c000e1cc <VCache::VCache(PhysicalDisk*)>
c000ca49:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ca4f:	83 c4 14             	add    esp,0x14
c000ca52:	5b                   	pop    ebx
c000ca53:	5e                   	pop    esi
c000ca54:	c3                   	ret    
c000ca55:	90                   	nop

c000ca56 <PhysicalDisk::~PhysicalDisk()>:
c000ca56:	83 ec 0c             	sub    esp,0xc
c000ca59:	ba 94 14 02 c0       	mov    edx,0xc0021494
c000ca5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca62:	89 10                	mov    DWORD PTR [eax],edx
c000ca64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca68:	83 ec 0c             	sub    esp,0xc
c000ca6b:	50                   	push   eax
c000ca6c:	e8 89 fa ff ff       	call   c000c4fa <Device::~Device()>
c000ca71:	83 c4 10             	add    esp,0x10
c000ca74:	90                   	nop
c000ca75:	83 c4 0c             	add    esp,0xc
c000ca78:	c3                   	ret    
c000ca79:	90                   	nop

c000ca7a <PhysicalDisk::~PhysicalDisk()>:
c000ca7a:	83 ec 0c             	sub    esp,0xc
c000ca7d:	83 ec 0c             	sub    esp,0xc
c000ca80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca84:	e8 cd ff ff ff       	call   c000ca56 <PhysicalDisk::~PhysicalDisk()>
c000ca89:	83 c4 10             	add    esp,0x10
c000ca8c:	83 ec 08             	sub    esp,0x8
c000ca8f:	68 6c 01 00 00       	push   0x16c
c000ca94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca98:	e8 6f dd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ca9d:	83 c4 10             	add    esp,0x10
c000caa0:	83 c4 0c             	add    esp,0xc
c000caa3:	c3                   	ret    

c000caa4 <int_handler>:
c000caa4:	55                   	push   ebp
c000caa5:	57                   	push   edi
c000caa6:	56                   	push   esi
c000caa7:	53                   	push   ebx
c000caa8:	83 ec 0c             	sub    esp,0xc
c000caab:	80 3d 28 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c28,0x0
c000cab2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cab6:	74 0b                	je     c000cac3 <int_handler+0x1f>
c000cab8:	fa                   	cli    
c000cab9:	f4                   	hlt    
c000caba:	80 3d 28 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c28,0x0
c000cac1:	75 f5                	jne    c000cab8 <int_handler+0x14>
c000cac3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cac6:	8d 46 e0             	lea    eax,[esi-0x20]
c000cac9:	83 f8 17             	cmp    eax,0x17
c000cacc:	76 40                	jbe    c000cb0e <int_handler+0x6a>
c000cace:	c1 e6 04             	shl    esi,0x4
c000cad1:	31 db                	xor    ebx,ebx
c000cad3:	8d ae 80 80 02 c0    	lea    ebp,[esi-0x3ffd7f80]
c000cad9:	81 c6 80 70 02 c0    	add    esi,0xc0027080
c000cadf:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cae3:	85 c0                	test   eax,eax
c000cae5:	74 13                	je     c000cafa <int_handler+0x56>
c000cae7:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000caeb:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000caee:	74 2c                	je     c000cb1c <int_handler+0x78>
c000caf0:	83 ec 08             	sub    esp,0x8
c000caf3:	52                   	push   edx
c000caf4:	57                   	push   edi
c000caf5:	ff d0                	call   eax
c000caf7:	83 c4 10             	add    esp,0x10
c000cafa:	83 c3 01             	add    ebx,0x1
c000cafd:	83 fb 04             	cmp    ebx,0x4
c000cb00:	75 dd                	jne    c000cadf <int_handler+0x3b>
c000cb02:	83 c4 0c             	add    esp,0xc
c000cb05:	31 c0                	xor    eax,eax
c000cb07:	5b                   	pop    ebx
c000cb08:	31 d2                	xor    edx,edx
c000cb0a:	5e                   	pop    esi
c000cb0b:	5f                   	pop    edi
c000cb0c:	5d                   	pop    ebp
c000cb0d:	c3                   	ret    
c000cb0e:	83 ec 0c             	sub    esp,0xc
c000cb11:	50                   	push   eax
c000cb12:	e8 0f b2 00 00       	call   c0017d26 <HalEndOfInterrupt(int)>
c000cb17:	83 c4 10             	add    esp,0x10
c000cb1a:	eb b2                	jmp    c000cace <int_handler+0x2a>
c000cb1c:	83 ec 08             	sub    esp,0x8
c000cb1f:	52                   	push   edx
c000cb20:	57                   	push   edi
c000cb21:	ff d0                	call   eax
c000cb23:	83 c4 10             	add    esp,0x10
c000cb26:	83 c4 0c             	add    esp,0xc
c000cb29:	5b                   	pop    ebx
c000cb2a:	5e                   	pop    esi
c000cb2b:	5f                   	pop    edi
c000cb2c:	5d                   	pop    ebp
c000cb2d:	c3                   	ret    

c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cb2e:	56                   	push   esi
c000cb2f:	31 c0                	xor    eax,eax
c000cb31:	53                   	push   ebx
c000cb32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb3a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cb3e:	89 ca                	mov    edx,ecx
c000cb40:	c1 e2 04             	shl    edx,0x4
c000cb43:	83 bc 82 80 80 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd7f80],0x0
c000cb4b:	74 17                	je     c000cb64 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cb4d:	83 c0 01             	add    eax,0x1
c000cb50:	83 f8 04             	cmp    eax,0x4
c000cb53:	75 ee                	jne    c000cb43 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cb55:	c7 44 24 0c c4 14 02 c0 	mov    DWORD PTR [esp+0xc],0xc00214c4
c000cb5d:	5b                   	pop    ebx
c000cb5e:	5e                   	pop    esi
c000cb5f:	e9 0d 46 00 00       	jmp    c0011171 <KePanic(char const*)>
c000cb64:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cb67:	89 1c 85 80 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f80],ebx
c000cb6e:	5b                   	pop    ebx
c000cb6f:	89 34 85 80 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f80],esi
c000cb76:	5e                   	pop    esi
c000cb77:	c3                   	ret    

c000cb78 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cb78:	55                   	push   ebp
c000cb79:	57                   	push   edi
c000cb7a:	56                   	push   esi
c000cb7b:	53                   	push   ebx
c000cb7c:	83 ec 0c             	sub    esp,0xc
c000cb7f:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cb85:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cb89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cb8d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cb94:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cb97:	74 57                	je     c000cbf0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cb99:	84 c0                	test   al,al
c000cb9b:	89 c7                	mov    edi,eax
c000cb9d:	74 1d                	je     c000cbbc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cb9f:	83 fe 0f             	cmp    esi,0xf
c000cba2:	0f 8f d9 00 00 00    	jg     c000cc81 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cba8:	0f b6 b6 a8 2f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd058]
c000cbaf:	0f b7 bc 36 20 98 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd67e0]
c000cbb7:	d1 ef                	shr    edi,1
c000cbb9:	83 e7 01             	and    edi,0x1
c000cbbc:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c000cbc1:	83 ec 08             	sub    esp,0x8
c000cbc4:	31 db                	xor    ebx,ebx
c000cbc6:	50                   	push   eax
c000cbc7:	68 d1 14 02 c0       	push   0xc00214d1
c000cbcc:	e8 39 dd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cbd1:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c000cbd6:	83 c4 10             	add    esp,0x10
c000cbd9:	85 c0                	test   eax,eax
c000cbdb:	7f 59                	jg     c000cc36 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cbdd:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cbe0:	83 ec 0c             	sub    esp,0xc
c000cbe3:	68 e8 14 02 c0       	push   0xc00214e8
c000cbe8:	e8 84 45 00 00       	call   c0011171 <KePanic(char const*)>
c000cbed:	83 c4 10             	add    esp,0x10
c000cbf0:	89 e8                	mov    eax,ebp
c000cbf2:	31 d2                	xor    edx,edx
c000cbf4:	c1 e0 04             	shl    eax,0x4
c000cbf7:	8b 8c 90 80 80 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd7f80]
c000cbfe:	85 c9                	test   ecx,ecx
c000cc00:	0f 84 92 00 00 00    	je     c000cc98 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cc06:	83 c2 01             	add    edx,0x1
c000cc09:	83 fa 04             	cmp    edx,0x4
c000cc0c:	75 e9                	jne    c000cbf7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cc0e:	83 ec 0c             	sub    esp,0xc
c000cc11:	68 3c 15 02 c0       	push   0xc002153c
c000cc16:	e8 56 45 00 00       	call   c0011171 <KePanic(char const*)>
c000cc1b:	83 c4 10             	add    esp,0x10
c000cc1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cc23:	83 c4 0c             	add    esp,0xc
c000cc26:	5b                   	pop    ebx
c000cc27:	5e                   	pop    esi
c000cc28:	5f                   	pop    edi
c000cc29:	5d                   	pop    ebp
c000cc2a:	c3                   	ret    
c000cc2b:	83 c3 01             	add    ebx,0x1
c000cc2e:	39 1d 60 ae 02 c0    	cmp    DWORD PTR ds:0xc002ae60,ebx
c000cc34:	7e a7                	jle    c000cbdd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cc36:	8b 2c 9d 80 ae 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd5180]
c000cc3d:	83 ec 08             	sub    esp,0x8
c000cc40:	56                   	push   esi
c000cc41:	55                   	push   ebp
c000cc42:	e8 c9 18 01 00       	call   c001e510 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cc47:	83 c4 10             	add    esp,0x10
c000cc4a:	84 c0                	test   al,al
c000cc4c:	74 dd                	je     c000cc2b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cc4e:	89 f8                	mov    eax,edi
c000cc50:	83 ec 04             	sub    esp,0x4
c000cc53:	8b 1c 9d 80 ae 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5180]
c000cc5a:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cc5d:	0f b6 f8             	movzx  edi,al
c000cc60:	57                   	push   edi
c000cc61:	89 e8                	mov    eax,ebp
c000cc63:	6a 00                	push   0x0
c000cc65:	0f b6 c0             	movzx  eax,al
c000cc68:	50                   	push   eax
c000cc69:	89 f0                	mov    eax,esi
c000cc6b:	6a 00                	push   0x0
c000cc6d:	0f b6 c0             	movzx  eax,al
c000cc70:	6a 00                	push   0x0
c000cc72:	50                   	push   eax
c000cc73:	53                   	push   ebx
c000cc74:	e8 03 1a 01 00       	call   c001e67c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cc79:	83 c4 20             	add    esp,0x20
c000cc7c:	e9 6f ff ff ff       	jmp    c000cbf0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cc81:	83 ec 0c             	sub    esp,0xc
c000cc84:	31 ff                	xor    edi,edi
c000cc86:	68 04 15 02 c0       	push   0xc0021504
c000cc8b:	e8 e1 44 00 00       	call   c0011171 <KePanic(char const*)>
c000cc90:	83 c4 10             	add    esp,0x10
c000cc93:	e9 24 ff ff ff       	jmp    c000cbbc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cc98:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000cc9b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cc9f:	89 14 85 80 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f80],edx
c000cca6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ccaa:	89 14 85 80 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f80],edx
c000ccb1:	83 c4 0c             	add    esp,0xc
c000ccb4:	89 f0                	mov    eax,esi
c000ccb6:	5b                   	pop    ebx
c000ccb7:	5e                   	pop    esi
c000ccb8:	5f                   	pop    edi
c000ccb9:	5d                   	pop    ebp
c000ccba:	c3                   	ret    

c000ccbb <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ccbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccbf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ccc3:	c1 e0 04             	shl    eax,0x4
c000ccc6:	8d 50 10             	lea    edx,[eax+0x10]
c000ccc9:	39 88 80 80 02 c0    	cmp    DWORD PTR [eax-0x3ffd7f80],ecx
c000cccf:	74 08                	je     c000ccd9 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ccd1:	83 c0 04             	add    eax,0x4
c000ccd4:	39 d0                	cmp    eax,edx
c000ccd6:	75 f1                	jne    c000ccc9 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ccd8:	c3                   	ret    
c000ccd9:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000cce3:	c7 80 80 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f80],0x0
c000cced:	eb e2                	jmp    c000ccd1 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000ccef <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ccef:	56                   	push   esi
c000ccf0:	53                   	push   ebx
c000ccf1:	83 ec 04             	sub    esp,0x4
c000ccf4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ccf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccfd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cd01:	74 0e                	je     c000cd11 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cd03:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000cd08:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000cd0f:	75 34                	jne    c000cd45 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000cd11:	8d 43 20             	lea    eax,[ebx+0x20]
c000cd14:	c1 e0 04             	shl    eax,0x4
c000cd17:	8d 50 10             	lea    edx,[eax+0x10]
c000cd1a:	39 b0 80 80 02 c0    	cmp    DWORD PTR [eax-0x3ffd7f80],esi
c000cd20:	74 0d                	je     c000cd2f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000cd22:	83 c0 04             	add    eax,0x4
c000cd25:	39 d0                	cmp    eax,edx
c000cd27:	75 f1                	jne    c000cd1a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000cd29:	83 c4 04             	add    esp,0x4
c000cd2c:	5b                   	pop    ebx
c000cd2d:	5e                   	pop    esi
c000cd2e:	c3                   	ret    
c000cd2f:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000cd39:	c7 80 80 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f80],0x0
c000cd43:	eb dd                	jmp    c000cd22 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000cd45:	83 fb 0f             	cmp    ebx,0xf
c000cd48:	7f 09                	jg     c000cd53 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000cd4a:	0f b6 9b a8 2f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd058]
c000cd51:	eb be                	jmp    c000cd11 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cd53:	83 ec 0c             	sub    esp,0xc
c000cd56:	68 f5 14 02 c0       	push   0xc00214f5
c000cd5b:	e8 11 44 00 00       	call   c0011171 <KePanic(char const*)>
c000cd60:	83 c4 10             	add    esp,0x10
c000cd63:	eb ac                	jmp    c000cd11 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000cd65 <setupINTS()>:
c000cd65:	31 c0                	xor    eax,eax
c000cd67:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000cd71:	83 c0 10             	add    eax,0x10
c000cd74:	c7 80 70 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f90],0x0
c000cd7e:	c7 80 74 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f8c],0x0
c000cd88:	c7 80 74 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f8c],0x0
c000cd92:	c7 80 78 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f88],0x0
c000cd9c:	c7 80 78 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f88],0x0
c000cda6:	c7 80 7c 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f84],0x0
c000cdb0:	c7 80 7c 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f84],0x0
c000cdba:	3d 00 10 00 00       	cmp    eax,0x1000
c000cdbf:	75 a6                	jne    c000cd67 <setupINTS()+0x2>
c000cdc1:	c3                   	ret    

c000cdc2 <convertLegacyIRQNumber(int)>:
c000cdc2:	83 ec 0c             	sub    esp,0xc
c000cdc5:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cdcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdcf:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cdd6:	74 0c                	je     c000cde4 <convertLegacyIRQNumber(int)+0x22>
c000cdd8:	83 f8 0f             	cmp    eax,0xf
c000cddb:	7f 0b                	jg     c000cde8 <convertLegacyIRQNumber(int)+0x26>
c000cddd:	0f b6 80 a8 2f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd058]
c000cde4:	83 c4 0c             	add    esp,0xc
c000cde7:	c3                   	ret    
c000cde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdec:	83 ec 0c             	sub    esp,0xc
c000cdef:	68 04 15 02 c0       	push   0xc0021504
c000cdf4:	e8 78 43 00 00       	call   c0011171 <KePanic(char const*)>
c000cdf9:	83 c4 10             	add    esp,0x10
c000cdfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce00:	83 c4 0c             	add    esp,0xc
c000ce03:	c3                   	ret    

c000ce04 <startGUI(void*)>:
c000ce04:	55                   	push   ebp
c000ce05:	89 e5                	mov    ebp,esp
c000ce07:	53                   	push   ebx
c000ce08:	83 ec 04             	sub    esp,0x4
c000ce0b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce10:	83 e8 01             	sub    eax,0x1
c000ce13:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000ce18:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce1d:	85 c0                	test   eax,eax
c000ce1f:	75 01                	jne    c000ce22 <startGUI(void*)+0x1e>
c000ce21:	fb                   	sti    
c000ce22:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce28:	83 ec 08             	sub    esp,0x8
c000ce2b:	6a 01                	push   0x1
c000ce2d:	68 61 15 02 c0       	push   0xc0021561
c000ce32:	e8 d1 81 00 00       	call   c0015008 <Thr::loadDLL(char const*, bool)>
c000ce37:	83 c4 10             	add    esp,0x10
c000ce3a:	83 ec 08             	sub    esp,0x8
c000ce3d:	53                   	push   ebx
c000ce3e:	50                   	push   eax
c000ce3f:	e8 04 84 00 00       	call   c0015248 <Thr::executeDLL(unsigned long, void*)>
c000ce44:	83 c4 10             	add    esp,0x10
c000ce47:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce4d:	83 ec 08             	sub    esp,0x8
c000ce50:	6a 01                	push   0x1
c000ce52:	68 7b 15 02 c0       	push   0xc002157b
c000ce57:	e8 ac 81 00 00       	call   c0015008 <Thr::loadDLL(char const*, bool)>
c000ce5c:	83 c4 10             	add    esp,0x10
c000ce5f:	83 ec 08             	sub    esp,0x8
c000ce62:	53                   	push   ebx
c000ce63:	50                   	push   eax
c000ce64:	e8 df 83 00 00       	call   c0015248 <Thr::executeDLL(unsigned long, void*)>
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	90                   	nop
c000ce6d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ce70:	c9                   	leave  
c000ce71:	c3                   	ret    

c000ce72 <startGUIVESA(void*)>:
c000ce72:	55                   	push   ebp
c000ce73:	89 e5                	mov    ebp,esp
c000ce75:	53                   	push   ebx
c000ce76:	83 ec 04             	sub    esp,0x4
c000ce79:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce7e:	83 e8 01             	sub    eax,0x1
c000ce81:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000ce86:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce8b:	85 c0                	test   eax,eax
c000ce8d:	75 01                	jne    c000ce90 <startGUIVESA(void*)+0x1e>
c000ce8f:	fb                   	sti    
c000ce90:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce96:	83 ec 08             	sub    esp,0x8
c000ce99:	6a 01                	push   0x1
c000ce9b:	68 99 15 02 c0       	push   0xc0021599
c000cea0:	e8 63 81 00 00       	call   c0015008 <Thr::loadDLL(char const*, bool)>
c000cea5:	83 c4 10             	add    esp,0x10
c000cea8:	83 ec 08             	sub    esp,0x8
c000ceab:	53                   	push   ebx
c000ceac:	50                   	push   eax
c000cead:	e8 96 83 00 00       	call   c0015248 <Thr::executeDLL(unsigned long, void*)>
c000ceb2:	83 c4 10             	add    esp,0x10
c000ceb5:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cebb:	83 ec 08             	sub    esp,0x8
c000cebe:	6a 01                	push   0x1
c000cec0:	68 7b 15 02 c0       	push   0xc002157b
c000cec5:	e8 3e 81 00 00       	call   c0015008 <Thr::loadDLL(char const*, bool)>
c000ceca:	83 c4 10             	add    esp,0x10
c000cecd:	83 ec 08             	sub    esp,0x8
c000ced0:	53                   	push   ebx
c000ced1:	50                   	push   eax
c000ced2:	e8 71 83 00 00       	call   c0015248 <Thr::executeDLL(unsigned long, void*)>
c000ced7:	83 c4 10             	add    esp,0x10
c000ceda:	90                   	nop
c000cedb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cede:	c9                   	leave  
c000cedf:	c3                   	ret    

c000cee0 <sendKeyToTerminal(unsigned char)>:
c000cee0:	55                   	push   ebp
c000cee1:	89 e5                	mov    ebp,esp
c000cee3:	83 ec 28             	sub    esp,0x28
c000cee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cee9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000ceec:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000cef1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000cef5:	83 ec 08             	sub    esp,0x8
c000cef8:	52                   	push   edx
c000cef9:	50                   	push   eax
c000cefa:	e8 bd be ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000ceff:	83 c4 10             	add    esp,0x10
c000cf02:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf06:	83 f8 0a             	cmp    eax,0xa
c000cf09:	74 16                	je     c000cf21 <sendKeyToTerminal(unsigned char)+0x41>
c000cf0b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf0f:	83 f8 03             	cmp    eax,0x3
c000cf12:	74 0d                	je     c000cf21 <sendKeyToTerminal(unsigned char)+0x41>
c000cf14:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf18:	83 f8 1c             	cmp    eax,0x1c
c000cf1b:	0f 85 97 00 00 00    	jne    c000cfb8 <sendKeyToTerminal(unsigned char)+0xd8>
c000cf21:	fa                   	cli    
c000cf22:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cf27:	83 c0 01             	add    eax,0x1
c000cf2a:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000cf2f:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf34:	83 c0 01             	add    eax,0x1
c000cf37:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000cf3c:	a1 80 90 02 c0       	mov    eax,ds:0xc0029080
c000cf41:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf44:	c7 05 80 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029080,0x0
c000cf4e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000cf52:	74 1f                	je     c000cf73 <sendKeyToTerminal(unsigned char)+0x93>
c000cf54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf57:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000cf5a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cf5d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000cf60:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf63:	83 ec 0c             	sub    esp,0xc
c000cf66:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cf69:	e8 fe 8f 00 00       	call   c0015f6c <unblockTask(ThreadControlBlock*)>
c000cf6e:	83 c4 10             	add    esp,0x10
c000cf71:	eb db                	jmp    c000cf4e <sendKeyToTerminal(unsigned char)+0x6e>
c000cf73:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf78:	83 e8 01             	sub    eax,0x1
c000cf7b:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000cf80:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf85:	85 c0                	test   eax,eax
c000cf87:	75 18                	jne    c000cfa1 <sendKeyToTerminal(unsigned char)+0xc1>
c000cf89:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c000cf8e:	85 c0                	test   eax,eax
c000cf90:	74 0f                	je     c000cfa1 <sendKeyToTerminal(unsigned char)+0xc1>
c000cf92:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c000cf9c:	e8 d3 8a 00 00       	call   c0015a74 <schedule()>
c000cfa1:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cfa6:	83 e8 01             	sub    eax,0x1
c000cfa9:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000cfae:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cfb3:	85 c0                	test   eax,eax
c000cfb5:	75 01                	jne    c000cfb8 <sendKeyToTerminal(unsigned char)+0xd8>
c000cfb7:	fb                   	sti    
c000cfb8:	90                   	nop
c000cfb9:	c9                   	leave  
c000cfba:	c3                   	ret    

c000cfbb <sendKeyboardToken(KeyboardToken)>:
c000cfbb:	55                   	push   ebp
c000cfbc:	89 e5                	mov    ebp,esp
c000cfbe:	83 ec 18             	sub    esp,0x18
c000cfc1:	e8 fb 41 00 00       	call   c00111c1 <KeUserIOReceived()>
c000cfc6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000cfc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfcc:	0f b7 c0             	movzx  eax,ax
c000cfcf:	83 f2 01             	xor    edx,0x1
c000cfd2:	88 90 a0 90 02 c0    	mov    BYTE PTR [eax-0x3ffd6f60],dl
c000cfd8:	a1 88 90 02 c0       	mov    eax,ds:0xc0029088
c000cfdd:	85 c0                	test   eax,eax
c000cfdf:	74 24                	je     c000d005 <sendKeyboardToken(KeyboardToken)+0x4a>
c000cfe1:	8b 15 88 90 02 c0    	mov    edx,DWORD PTR ds:0xc0029088
c000cfe7:	83 ec 04             	sub    esp,0x4
c000cfea:	68 a0 90 02 c0       	push   0xc00290a0
c000cfef:	83 ec 08             	sub    esp,0x8
c000cff2:	89 e0                	mov    eax,esp
c000cff4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000cff7:	89 08                	mov    DWORD PTR [eax],ecx
c000cff9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000cffc:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d000:	ff d2                	call   edx
c000d002:	83 c4 10             	add    esp,0x10
c000d005:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d009:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d00c:	a0 a8 94 02 c0       	mov    al,ds:0xc00294a8
c000d011:	0f b6 d2             	movzx  edx,dl
c000d014:	0f b6 c0             	movzx  eax,al
c000d017:	39 c2                	cmp    edx,eax
c000d019:	74 1c                	je     c000d037 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d01b:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d01e:	a2 a8 94 02 c0       	mov    ds:0xc00294a8,al
c000d023:	a0 a8 94 02 c0       	mov    al,ds:0xc00294a8
c000d028:	0f b6 c0             	movzx  eax,al
c000d02b:	83 ec 0c             	sub    esp,0xc
c000d02e:	50                   	push   eax
c000d02f:	e8 e4 b4 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d034:	83 c4 10             	add    esp,0x10
c000d037:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d03a:	0f b6 c0             	movzx  eax,al
c000d03d:	85 c0                	test   eax,eax
c000d03f:	0f 84 da 00 00 00    	je     c000d11f <sendKeyboardToken(KeyboardToken)+0x164>
c000d045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d048:	0f b7 c0             	movzx  eax,ax
c000d04b:	3d 18 03 00 00       	cmp    eax,0x318
c000d050:	75 06                	jne    c000d058 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d052:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d05b:	0f b7 c0             	movzx  eax,ax
c000d05e:	3d 19 03 00 00       	cmp    eax,0x319
c000d063:	75 06                	jne    c000d06b <sendKeyboardToken(KeyboardToken)+0xb0>
c000d065:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d06b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d06e:	0f b7 c0             	movzx  eax,ax
c000d071:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d076:	75 06                	jne    c000d07e <sendKeyboardToken(KeyboardToken)+0xc3>
c000d078:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d07e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d081:	0f b7 c0             	movzx  eax,ax
c000d084:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d089:	75 06                	jne    c000d091 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d08b:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d094:	0f b7 c0             	movzx  eax,ax
c000d097:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d09c:	75 06                	jne    c000d0a4 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d09e:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d0a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0a7:	0f b7 c0             	movzx  eax,ax
c000d0aa:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d0af:	75 06                	jne    c000d0b7 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d0b1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d0b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0ba:	0f b7 c0             	movzx  eax,ax
c000d0bd:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d0c2:	75 06                	jne    c000d0ca <sendKeyboardToken(KeyboardToken)+0x10f>
c000d0c4:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d0ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0cd:	0f b7 c0             	movzx  eax,ax
c000d0d0:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d0d5:	75 06                	jne    c000d0dd <sendKeyboardToken(KeyboardToken)+0x122>
c000d0d7:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d0dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0e0:	0f b7 c0             	movzx  eax,ax
c000d0e3:	3d 20 03 00 00       	cmp    eax,0x320
c000d0e8:	75 06                	jne    c000d0f0 <sendKeyboardToken(KeyboardToken)+0x135>
c000d0ea:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d0f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0f3:	0f b7 c0             	movzx  eax,ax
c000d0f6:	3d 21 03 00 00       	cmp    eax,0x321
c000d0fb:	75 06                	jne    c000d103 <sendKeyboardToken(KeyboardToken)+0x148>
c000d0fd:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d106:	0f b7 c0             	movzx  eax,ax
c000d109:	3d 22 03 00 00       	cmp    eax,0x322
c000d10e:	0f 85 f1 00 00 00    	jne    c000d205 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d114:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d11a:	e9 e6 00 00 00       	jmp    c000d205 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d11f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d122:	0f b7 c0             	movzx  eax,ax
c000d125:	3d 18 03 00 00       	cmp    eax,0x318
c000d12a:	75 0a                	jne    c000d136 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d12c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d132:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d139:	0f b7 c0             	movzx  eax,ax
c000d13c:	3d 19 03 00 00       	cmp    eax,0x319
c000d141:	75 0a                	jne    c000d14d <sendKeyboardToken(KeyboardToken)+0x192>
c000d143:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d149:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d14d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d150:	0f b7 c0             	movzx  eax,ax
c000d153:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d158:	75 0a                	jne    c000d164 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d15a:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d160:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d167:	0f b7 c0             	movzx  eax,ax
c000d16a:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d16f:	75 0a                	jne    c000d17b <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d171:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d177:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d17b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d17e:	0f b7 c0             	movzx  eax,ax
c000d181:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d186:	75 0a                	jne    c000d192 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d188:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d18e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d195:	0f b7 c0             	movzx  eax,ax
c000d198:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d19d:	75 0a                	jne    c000d1a9 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d19f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d1a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ac:	0f b7 c0             	movzx  eax,ax
c000d1af:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1b4:	75 0a                	jne    c000d1c0 <sendKeyboardToken(KeyboardToken)+0x205>
c000d1b6:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d1bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1c3:	0f b7 c0             	movzx  eax,ax
c000d1c6:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d1cb:	75 0a                	jne    c000d1d7 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d1cd:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d1d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1da:	0f b7 c0             	movzx  eax,ax
c000d1dd:	3d 20 03 00 00       	cmp    eax,0x320
c000d1e2:	75 0a                	jne    c000d1ee <sendKeyboardToken(KeyboardToken)+0x233>
c000d1e4:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d1ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f1:	0f b7 c0             	movzx  eax,ax
c000d1f4:	3d 21 03 00 00       	cmp    eax,0x321
c000d1f9:	75 0a                	jne    c000d205 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d1fb:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d201:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d208:	0f b7 c0             	movzx  eax,ax
c000d20b:	3d 00 02 00 00       	cmp    eax,0x200
c000d210:	75 2f                	jne    c000d241 <sendKeyboardToken(KeyboardToken)+0x286>
c000d212:	a0 a0 94 02 c0       	mov    al,ds:0xc00294a0
c000d217:	83 f0 01             	xor    eax,0x1
c000d21a:	0f b6 c0             	movzx  eax,al
c000d21d:	85 c0                	test   eax,eax
c000d21f:	74 20                	je     c000d241 <sendKeyboardToken(KeyboardToken)+0x286>
c000d221:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000d226:	6a 01                	push   0x1
c000d228:	6a 00                	push   0x0
c000d22a:	68 04 ce 00 c0       	push   0xc000ce04
c000d22f:	50                   	push   eax
c000d230:	e8 f3 85 00 00       	call   c0015828 <Process::createThread(void (*)(void*), void*, int)>
c000d235:	83 c4 10             	add    esp,0x10
c000d238:	c6 05 a0 94 02 c0 01 	mov    BYTE PTR ds:0xc00294a0,0x1
c000d23f:	eb 3a                	jmp    c000d27b <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d241:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d244:	0f b7 c0             	movzx  eax,ax
c000d247:	3d 01 02 00 00       	cmp    eax,0x201
c000d24c:	75 2d                	jne    c000d27b <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d24e:	a0 a0 94 02 c0       	mov    al,ds:0xc00294a0
c000d253:	83 f0 01             	xor    eax,0x1
c000d256:	0f b6 c0             	movzx  eax,al
c000d259:	85 c0                	test   eax,eax
c000d25b:	74 1e                	je     c000d27b <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d25d:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000d262:	6a 01                	push   0x1
c000d264:	6a 00                	push   0x0
c000d266:	68 72 ce 00 c0       	push   0xc000ce72
c000d26b:	50                   	push   eax
c000d26c:	e8 b7 85 00 00       	call   c0015828 <Process::createThread(void (*)(void*), void*, int)>
c000d271:	83 c4 10             	add    esp,0x10
c000d274:	c6 05 a0 94 02 c0 01 	mov    BYTE PTR ds:0xc00294a0,0x1
c000d27b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d27e:	0f b7 c0             	movzx  eax,ax
c000d281:	3d 25 03 00 00       	cmp    eax,0x325
c000d286:	75 06                	jne    c000d28e <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d288:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d28e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d291:	0f b7 c0             	movzx  eax,ax
c000d294:	3d 24 03 00 00       	cmp    eax,0x324
c000d299:	75 06                	jne    c000d2a1 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d29b:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d2a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2a4:	0f b7 c0             	movzx  eax,ax
c000d2a7:	3d 23 03 00 00       	cmp    eax,0x323
c000d2ac:	75 06                	jne    c000d2b4 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d2ae:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d2b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2b7:	0f b7 c0             	movzx  eax,ax
c000d2ba:	3d 26 03 00 00       	cmp    eax,0x326
c000d2bf:	75 06                	jne    c000d2c7 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d2c1:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d2c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ca:	0f b7 c0             	movzx  eax,ax
c000d2cd:	3d 27 03 00 00       	cmp    eax,0x327
c000d2d2:	75 06                	jne    c000d2da <sendKeyboardToken(KeyboardToken)+0x31f>
c000d2d4:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d2da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2dd:	0f b7 c0             	movzx  eax,ax
c000d2e0:	3d 22 03 00 00       	cmp    eax,0x322
c000d2e5:	75 06                	jne    c000d2ed <sendKeyboardToken(KeyboardToken)+0x332>
c000d2e7:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d2ed:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d2f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d2f4:	83 f0 01             	xor    eax,0x1
c000d2f7:	0f b6 c0             	movzx  eax,al
c000d2fa:	85 c0                	test   eax,eax
c000d2fc:	74 7c                	je     c000d37a <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d2fe:	a0 a1 91 02 c0       	mov    al,ds:0xc00291a1
c000d303:	0f b6 c0             	movzx  eax,al
c000d306:	85 c0                	test   eax,eax
c000d308:	74 43                	je     c000d34d <sendKeyboardToken(KeyboardToken)+0x392>
c000d30a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d30e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d312:	85 c0                	test   eax,eax
c000d314:	74 2b                	je     c000d341 <sendKeyboardToken(KeyboardToken)+0x386>
c000d316:	8b 15 a4 94 02 c0    	mov    edx,DWORD PTR ds:0xc00294a4
c000d31c:	89 d0                	mov    eax,edx
c000d31e:	c1 e0 02             	shl    eax,0x2
c000d321:	01 d0                	add    eax,edx
c000d323:	d1 e0                	shl    eax,1
c000d325:	a3 a4 94 02 c0       	mov    ds:0xc00294a4,eax
c000d32a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d32d:	0f b7 c0             	movzx  eax,ax
c000d330:	8d 50 d0             	lea    edx,[eax-0x30]
c000d333:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d338:	01 d0                	add    eax,edx
c000d33a:	a3 a4 94 02 c0       	mov    ds:0xc00294a4,eax
c000d33f:	eb 71                	jmp    c000d3b2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d341:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d34b:	eb 65                	jmp    c000d3b2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d34d:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d352:	85 c0                	test   eax,eax
c000d354:	74 18                	je     c000d36e <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d356:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d35b:	0f b6 c0             	movzx  eax,al
c000d35e:	83 ec 0c             	sub    esp,0xc
c000d361:	50                   	push   eax
c000d362:	e8 79 fb ff ff       	call   c000cee0 <sendKeyToTerminal(unsigned char)>
c000d367:	83 c4 10             	add    esp,0x10
c000d36a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d36e:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d378:	eb 38                	jmp    c000d3b2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d37a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d37d:	0f b7 c0             	movzx  eax,ax
c000d380:	3d 01 01 00 00       	cmp    eax,0x101
c000d385:	75 2b                	jne    c000d3b2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d387:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d38c:	85 c0                	test   eax,eax
c000d38e:	74 18                	je     c000d3a8 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d390:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d395:	0f b6 c0             	movzx  eax,al
c000d398:	83 ec 0c             	sub    esp,0xc
c000d39b:	50                   	push   eax
c000d39c:	e8 3f fb ff ff       	call   c000cee0 <sendKeyToTerminal(unsigned char)>
c000d3a1:	83 c4 10             	add    esp,0x10
c000d3a4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d3a8:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d3b2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d3b5:	83 f0 01             	xor    eax,0x1
c000d3b8:	0f b6 c0             	movzx  eax,al
c000d3bb:	85 c0                	test   eax,eax
c000d3bd:	74 5a                	je     c000d419 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3bf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d3c2:	83 f0 01             	xor    eax,0x1
c000d3c5:	0f b6 c0             	movzx  eax,al
c000d3c8:	85 c0                	test   eax,eax
c000d3ca:	74 4d                	je     c000d419 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3cc:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c000d3d1:	83 f0 01             	xor    eax,0x1
c000d3d4:	0f b6 c0             	movzx  eax,al
c000d3d7:	85 c0                	test   eax,eax
c000d3d9:	74 3e                	je     c000d419 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3de:	0f b7 c0             	movzx  eax,ax
c000d3e1:	83 f8 1f             	cmp    eax,0x1f
c000d3e4:	76 0b                	jbe    c000d3f1 <sendKeyboardToken(KeyboardToken)+0x436>
c000d3e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e9:	0f b7 c0             	movzx  eax,ax
c000d3ec:	83 f8 7e             	cmp    eax,0x7e
c000d3ef:	76 16                	jbe    c000d407 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d3f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f4:	0f b7 c0             	movzx  eax,ax
c000d3f7:	83 f8 0a             	cmp    eax,0xa
c000d3fa:	74 0b                	je     c000d407 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d3fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ff:	0f b7 c0             	movzx  eax,ax
c000d402:	83 f8 08             	cmp    eax,0x8
c000d405:	75 12                	jne    c000d419 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d40a:	0f b6 c0             	movzx  eax,al
c000d40d:	83 ec 0c             	sub    esp,0xc
c000d410:	50                   	push   eax
c000d411:	e8 ca fa ff ff       	call   c000cee0 <sendKeyToTerminal(unsigned char)>
c000d416:	83 c4 10             	add    esp,0x10
c000d419:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d41c:	83 f0 01             	xor    eax,0x1
c000d41f:	0f b6 c0             	movzx  eax,al
c000d422:	85 c0                	test   eax,eax
c000d424:	74 5d                	je     c000d483 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d426:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d429:	83 f0 01             	xor    eax,0x1
c000d42c:	0f b6 c0             	movzx  eax,al
c000d42f:	85 c0                	test   eax,eax
c000d431:	74 50                	je     c000d483 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d433:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c000d438:	0f b6 c0             	movzx  eax,al
c000d43b:	85 c0                	test   eax,eax
c000d43d:	74 44                	je     c000d483 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d43f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d442:	0f b7 c0             	movzx  eax,ax
c000d445:	83 f8 3f             	cmp    eax,0x3f
c000d448:	76 39                	jbe    c000d483 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d44a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d44d:	0f b7 c0             	movzx  eax,ax
c000d450:	83 f8 7f             	cmp    eax,0x7f
c000d453:	77 2e                	ja     c000d483 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d458:	88 c2                	mov    dl,al
c000d45a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d45d:	0f b7 c0             	movzx  eax,ax
c000d460:	83 f8 5f             	cmp    eax,0x5f
c000d463:	76 04                	jbe    c000d469 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d465:	b0 20                	mov    al,0x20
c000d467:	eb 02                	jmp    c000d46b <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d469:	b0 00                	mov    al,0x0
c000d46b:	89 d1                	mov    ecx,edx
c000d46d:	29 c1                	sub    ecx,eax
c000d46f:	89 c8                	mov    eax,ecx
c000d471:	83 e8 40             	sub    eax,0x40
c000d474:	0f b6 c0             	movzx  eax,al
c000d477:	83 ec 0c             	sub    esp,0xc
c000d47a:	50                   	push   eax
c000d47b:	e8 60 fa ff ff       	call   c000cee0 <sendKeyToTerminal(unsigned char)>
c000d480:	83 c4 10             	add    esp,0x10
c000d483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d486:	0f b7 c0             	movzx  eax,ax
c000d489:	3d 00 03 00 00       	cmp    eax,0x300
c000d48e:	75 12                	jne    c000d4a2 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d490:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d493:	83 f0 01             	xor    eax,0x1
c000d496:	0f b6 c0             	movzx  eax,al
c000d499:	85 c0                	test   eax,eax
c000d49b:	74 05                	je     c000d4a2 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d49d:	e8 77 b0 ff ff       	call   c0008519 <doTerminalCycle()>
c000d4a2:	90                   	nop
c000d4a3:	c9                   	leave  
c000d4a4:	c3                   	ret    

c000d4a5 <clearInternalKeybuffer(VgaText*)>:
c000d4a5:	55                   	push   ebp
c000d4a6:	89 e5                	mov    ebp,esp
c000d4a8:	83 ec 08             	sub    esp,0x8
c000d4ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ae:	05 02 01 00 00       	add    eax,0x102
c000d4b3:	83 ec 0c             	sub    esp,0xc
c000d4b6:	50                   	push   eax
c000d4b7:	e8 c4 30 ff ff       	call   c0000580 <strlen>
c000d4bc:	83 c4 10             	add    esp,0x10
c000d4bf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d4c2:	81 c2 02 01 00 00    	add    edx,0x102
c000d4c8:	83 ec 04             	sub    esp,0x4
c000d4cb:	50                   	push   eax
c000d4cc:	6a 00                	push   0x0
c000d4ce:	52                   	push   edx
c000d4cf:	e8 1c 30 ff ff       	call   c00004f0 <memset>
c000d4d4:	83 c4 10             	add    esp,0x10
c000d4d7:	90                   	nop
c000d4d8:	c9                   	leave  
c000d4d9:	c3                   	ret    

c000d4da <readKeyboard(VgaText*, char*, unsigned long)>:
c000d4da:	55                   	push   ebp
c000d4db:	89 e5                	mov    ebp,esp
c000d4dd:	83 ec 18             	sub    esp,0x18
c000d4e0:	a1 88 90 02 c0       	mov    eax,ds:0xc0029088
c000d4e5:	85 c0                	test   eax,eax
c000d4e7:	74 2a                	je     c000d513 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d4e9:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d4ef:	8b 15 88 90 02 c0    	mov    edx,DWORD PTR ds:0xc0029088
c000d4f5:	83 ec 04             	sub    esp,0x4
c000d4f8:	68 a0 90 02 c0       	push   0xc00290a0
c000d4fd:	83 ec 08             	sub    esp,0x8
c000d500:	89 e0                	mov    eax,esp
c000d502:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d505:	89 08                	mov    DWORD PTR [eax],ecx
c000d507:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d50a:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d50e:	ff d2                	call   edx
c000d510:	83 c4 10             	add    esp,0x10
c000d513:	fb                   	sti    
c000d514:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d51b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d51f:	0f 84 0d 01 00 00    	je     c000d632 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d528:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d52e:	0f be c0             	movsx  eax,al
c000d531:	85 c0                	test   eax,eax
c000d533:	75 2c                	jne    c000d561 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d535:	fa                   	cli    
c000d536:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d53b:	83 c0 01             	add    eax,0x1
c000d53e:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000d543:	e8 2c 85 00 00       	call   c0015a74 <schedule()>
c000d548:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d54d:	83 e8 01             	sub    eax,0x1
c000d550:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000d555:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d55a:	85 c0                	test   eax,eax
c000d55c:	75 c7                	jne    c000d525 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d55e:	fb                   	sti    
c000d55f:	eb c4                	jmp    c000d525 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d561:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d564:	8d 50 01             	lea    edx,[eax+0x1]
c000d567:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d56a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d56d:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d573:	88 10                	mov    BYTE PTR [eax],dl
c000d575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d578:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d57e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d581:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d585:	83 f8 03             	cmp    eax,0x3
c000d588:	75 1e                	jne    c000d5a8 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d58a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d58f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d591:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d594:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d59a:	83 ec 08             	sub    esp,0x8
c000d59d:	6a 02                	push   0x2
c000d59f:	50                   	push   eax
c000d5a0:	e8 6a 40 00 00       	call   c001160f <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5a5:	83 c4 10             	add    esp,0x10
c000d5a8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5ac:	83 f8 1c             	cmp    eax,0x1c
c000d5af:	75 1e                	jne    c000d5cf <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d5b1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d5b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d5bb:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d5c1:	83 ec 08             	sub    esp,0x8
c000d5c4:	6a 09                	push   0x9
c000d5c6:	50                   	push   eax
c000d5c7:	e8 43 40 00 00       	call   c001160f <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5cc:	83 c4 10             	add    esp,0x10
c000d5cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d2:	05 02 01 00 00       	add    eax,0x102
c000d5d7:	83 ec 0c             	sub    esp,0xc
c000d5da:	50                   	push   eax
c000d5db:	e8 a0 2f ff ff       	call   c0000580 <strlen>
c000d5e0:	83 c4 10             	add    esp,0x10
c000d5e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5e6:	81 c2 02 01 00 00    	add    edx,0x102
c000d5ec:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d5ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5f2:	81 c2 02 01 00 00    	add    edx,0x102
c000d5f8:	83 ec 04             	sub    esp,0x4
c000d5fb:	50                   	push   eax
c000d5fc:	51                   	push   ecx
c000d5fd:	52                   	push   edx
c000d5fe:	e8 cd 2d ff ff       	call   c00003d0 <memmove>
c000d603:	83 c4 10             	add    esp,0x10
c000d606:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d60a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d60e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d612:	83 f8 0a             	cmp    eax,0xa
c000d615:	74 16                	je     c000d62d <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d617:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d61b:	83 f8 03             	cmp    eax,0x3
c000d61e:	74 0d                	je     c000d62d <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d620:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d624:	83 f8 1c             	cmp    eax,0x1c
c000d627:	0f 85 ee fe ff ff    	jne    c000d51b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d62d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d630:	eb 03                	jmp    c000d635 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d632:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d635:	c9                   	leave  
c000d636:	c3                   	ret    
c000d637:	90                   	nop

c000d638 <Keyboard::Keyboard(char const*)>:
c000d638:	83 ec 0c             	sub    esp,0xc
c000d63b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d63f:	83 ec 08             	sub    esp,0x8
c000d642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d646:	50                   	push   eax
c000d647:	e8 44 f1 ff ff       	call   c000c790 <Device::Device(char const*)>
c000d64c:	83 c4 10             	add    esp,0x10
c000d64f:	ba bc 15 02 c0       	mov    edx,0xc00215bc
c000d654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d658:	89 10                	mov    DWORD PTR [eax],edx
c000d65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d65e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d668:	c6 05 84 90 02 c0 01 	mov    BYTE PTR ds:0xc0029084,0x1
c000d66f:	90                   	nop
c000d670:	83 c4 0c             	add    esp,0xc
c000d673:	c3                   	ret    

c000d674 <Keyboard::~Keyboard()>:
c000d674:	83 ec 0c             	sub    esp,0xc
c000d677:	ba bc 15 02 c0       	mov    edx,0xc00215bc
c000d67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d680:	89 10                	mov    DWORD PTR [eax],edx
c000d682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d686:	83 ec 0c             	sub    esp,0xc
c000d689:	50                   	push   eax
c000d68a:	e8 6b ee ff ff       	call   c000c4fa <Device::~Device()>
c000d68f:	83 c4 10             	add    esp,0x10
c000d692:	90                   	nop
c000d693:	83 c4 0c             	add    esp,0xc
c000d696:	c3                   	ret    
c000d697:	90                   	nop

c000d698 <Keyboard::~Keyboard()>:
c000d698:	83 ec 0c             	sub    esp,0xc
c000d69b:	83 ec 0c             	sub    esp,0xc
c000d69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6a2:	e8 cd ff ff ff       	call   c000d674 <Keyboard::~Keyboard()>
c000d6a7:	83 c4 10             	add    esp,0x10
c000d6aa:	83 ec 08             	sub    esp,0x8
c000d6ad:	68 5c 01 00 00       	push   0x15c
c000d6b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b6:	e8 51 d1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d6bb:	83 c4 10             	add    esp,0x10
c000d6be:	83 c4 0c             	add    esp,0xc
c000d6c1:	c3                   	ret    

c000d6c2 <LogicalDisk::close(int, int, void*)>:
c000d6c2:	83 c8 ff             	or     eax,0xffffffff
c000d6c5:	c3                   	ret    

c000d6c6 <LogicalDisk::~LogicalDisk()>:
c000d6c6:	83 ec 0c             	sub    esp,0xc
c000d6c9:	ba 34 16 02 c0       	mov    edx,0xc0021634
c000d6ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d2:	89 10                	mov    DWORD PTR [eax],edx
c000d6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d8:	83 ec 0c             	sub    esp,0xc
c000d6db:	50                   	push   eax
c000d6dc:	e8 19 ee ff ff       	call   c000c4fa <Device::~Device()>
c000d6e1:	83 c4 10             	add    esp,0x10
c000d6e4:	90                   	nop
c000d6e5:	83 c4 0c             	add    esp,0xc
c000d6e8:	c3                   	ret    
c000d6e9:	90                   	nop

c000d6ea <LogicalDisk::~LogicalDisk()>:
c000d6ea:	83 ec 0c             	sub    esp,0xc
c000d6ed:	83 ec 0c             	sub    esp,0xc
c000d6f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6f4:	e8 cd ff ff ff       	call   c000d6c6 <LogicalDisk::~LogicalDisk()>
c000d6f9:	83 c4 10             	add    esp,0x10
c000d6fc:	83 ec 08             	sub    esp,0x8
c000d6ff:	68 78 01 00 00       	push   0x178
c000d704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d708:	e8 ff d0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	83 c4 0c             	add    esp,0xc
c000d713:	c3                   	ret    

c000d714 <LogicalDisk::open(int, int, void*)>:
c000d714:	83 ec 18             	sub    esp,0x18
c000d717:	68 e8 15 02 c0       	push   0xc00215e8
c000d71c:	e8 50 3a 00 00       	call   c0011171 <KePanic(char const*)>
c000d721:	83 c8 ff             	or     eax,0xffffffff
c000d724:	83 c4 1c             	add    esp,0x1c
c000d727:	c3                   	ret    

c000d728 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d728:	53                   	push   ebx
c000d729:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d72d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d731:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d735:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d73b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d741:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d747:	77 10                	ja     c000d759 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d749:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d74f:	89 d3                	mov    ebx,edx
c000d751:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d757:	72 05                	jb     c000d75e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d759:	83 c8 ff             	or     eax,0xffffffff
c000d75c:	89 c2                	mov    edx,eax
c000d75e:	5b                   	pop    ebx
c000d75f:	c3                   	ret    

c000d760 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d760:	56                   	push   esi
c000d761:	83 c8 ff             	or     eax,0xffffffff
c000d764:	53                   	push   ebx
c000d765:	89 c2                	mov    edx,eax
c000d767:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d76b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d76f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d773:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d779:	77 27                	ja     c000d7a2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d77b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d781:	89 d8                	mov    eax,ebx
c000d783:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d789:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d78e:	89 c2                	mov    edx,eax
c000d790:	73 10                	jae    c000d7a2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d792:	89 c8                	mov    eax,ecx
c000d794:	89 da                	mov    edx,ebx
c000d796:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d79c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d7a2:	5b                   	pop    ebx
c000d7a3:	5e                   	pop    esi
c000d7a4:	c3                   	ret    
c000d7a5:	90                   	nop

c000d7a6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d7a6:	83 ec 1c             	sub    esp,0x1c
c000d7a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7bd:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d7c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d7c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7cc:	83 ec 08             	sub    esp,0x8
c000d7cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d7d3:	50                   	push   eax
c000d7d4:	e8 b7 ef ff ff       	call   c000c790 <Device::Device(char const*)>
c000d7d9:	83 c4 10             	add    esp,0x10
c000d7dc:	ba 34 16 02 c0       	mov    edx,0xc0021634
c000d7e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e5:	89 10                	mov    DWORD PTR [eax],edx
c000d7e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7eb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d7f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d7fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d801:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d808:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d80c:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d816:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d81a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d81e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d822:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d828:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d82e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d832:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d835:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d839:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d83f:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d849:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d84d:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d857:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d861:	90                   	nop
c000d862:	83 c4 1c             	add    esp,0x1c
c000d865:	c3                   	ret    

c000d866 <LogicalDisk::assignDriveLetter()>:
c000d866:	55                   	push   ebp
c000d867:	57                   	push   edi
c000d868:	56                   	push   esi
c000d869:	53                   	push   ebx
c000d86a:	83 ec 14             	sub    esp,0x14
c000d86d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d871:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d877:	b0 41                	mov    al,0x41
c000d879:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d87f:	84 d2                	test   dl,dl
c000d881:	75 02                	jne    c000d885 <LogicalDisk::assignDriveLetter()+0x1f>
c000d883:	b0 43                	mov    al,0x43
c000d885:	8b 3d c0 94 02 c0    	mov    edi,DWORD PTR ds:0xc00294c0
c000d88b:	0f b6 ca             	movzx  ecx,dl
c000d88e:	0f be e8             	movsx  ebp,al
c000d891:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d895:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d899:	8b 3d c4 94 02 c0    	mov    edi,DWORD PTR ds:0xc00294c4
c000d89f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d8a3:	3c 43                	cmp    al,0x43
c000d8a5:	75 10                	jne    c000d8b7 <LogicalDisk::assignDriveLetter()+0x51>
c000d8a7:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d8ae:	75 5a                	jne    c000d90a <LogicalDisk::assignDriveLetter()+0xa4>
c000d8b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d8b5:	75 53                	jne    c000d90a <LogicalDisk::assignDriveLetter()+0xa4>
c000d8b7:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d8ba:	ba 01 00 00 00       	mov    edx,0x1
c000d8bf:	89 34 24             	mov    DWORD PTR [esp],esi
c000d8c2:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d8c5:	d3 e2                	shl    edx,cl
c000d8c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d8cb:	89 d7                	mov    edi,edx
c000d8cd:	89 d6                	mov    esi,edx
c000d8cf:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d8d3:	c1 ff 1f             	sar    edi,0x1f
c000d8d6:	21 f9                	and    ecx,edi
c000d8d8:	09 d1                	or     ecx,edx
c000d8da:	75 2e                	jne    c000d90a <LogicalDisk::assignDriveLetter()+0xa4>
c000d8dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d8e0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d8e4:	09 f2                	or     edx,esi
c000d8e6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d8e9:	89 15 c0 94 02 c0    	mov    DWORD PTR ds:0xc00294c0,edx
c000d8ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d8f3:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d8f9:	89 1c b5 e0 94 02 c0 	mov    DWORD PTR [esi*4-0x3ffd6b20],ebx
c000d900:	09 fa                	or     edx,edi
c000d902:	89 15 c4 94 02 c0    	mov    DWORD PTR ds:0xc00294c4,edx
c000d908:	eb 0d                	jmp    c000d917 <LogicalDisk::assignDriveLetter()+0xb1>
c000d90a:	8d 50 01             	lea    edx,[eax+0x1]
c000d90d:	45                   	inc    ebp
c000d90e:	80 fa 5b             	cmp    dl,0x5b
c000d911:	88 d0                	mov    al,dl
c000d913:	75 8e                	jne    c000d8a3 <LogicalDisk::assignDriveLetter()+0x3d>
c000d915:	31 c0                	xor    eax,eax
c000d917:	83 c4 14             	add    esp,0x14
c000d91a:	5b                   	pop    ebx
c000d91b:	5e                   	pop    esi
c000d91c:	5f                   	pop    edi
c000d91d:	5d                   	pop    ebp
c000d91e:	c3                   	ret    
c000d91f:	90                   	nop

c000d920 <LogicalDisk::mount()>:
c000d920:	56                   	push   esi
c000d921:	53                   	push   ebx
c000d922:	53                   	push   ebx
c000d923:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d927:	8b 1d 64 70 02 c0    	mov    ebx,DWORD PTR ds:0xc0027064
c000d92d:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d937:	85 db                	test   ebx,ebx
c000d939:	74 27                	je     c000d962 <LogicalDisk::mount()+0x42>
c000d93b:	51                   	push   ecx
c000d93c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d943:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d945:	83 e8 41             	sub    eax,0x41
c000d948:	50                   	push   eax
c000d949:	56                   	push   esi
c000d94a:	53                   	push   ebx
c000d94b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d94e:	83 c4 10             	add    esp,0x10
c000d951:	84 c0                	test   al,al
c000d953:	74 08                	je     c000d95d <LogicalDisk::mount()+0x3d>
c000d955:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d95b:	eb 07                	jmp    c000d964 <LogicalDisk::mount()+0x44>
c000d95d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d960:	eb d5                	jmp    c000d937 <LogicalDisk::mount()+0x17>
c000d962:	31 c0                	xor    eax,eax
c000d964:	5a                   	pop    edx
c000d965:	5b                   	pop    ebx
c000d966:	5e                   	pop    esi
c000d967:	c3                   	ret    

c000d968 <LogicalDisk::unmount()>:
c000d968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d96c:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d976:	c3                   	ret    
c000d977:	90                   	nop

c000d978 <LogicalDisk::eject()>:
c000d978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d97c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d982:	8b 10                	mov    edx,DWORD PTR [eax]
c000d984:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d988:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d98b:	90                   	nop

c000d98c <LogicalDisk::unassignDriveLetter()>:
c000d98c:	57                   	push   edi
c000d98d:	56                   	push   esi
c000d98e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d992:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d999:	85 c9                	test   ecx,ecx
c000d99b:	75 0f                	jne    c000d9ac <LogicalDisk::unassignDriveLetter()+0x20>
c000d99d:	c7 44 24 0c 0c 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc002160c
c000d9a5:	5e                   	pop    esi
c000d9a6:	5f                   	pop    edi
c000d9a7:	e9 c5 37 00 00       	jmp    c0011171 <KePanic(char const*)>
c000d9ac:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d9b3:	83 e9 41             	sub    ecx,0x41
c000d9b6:	b8 01 00 00 00       	mov    eax,0x1
c000d9bb:	c7 04 8d e0 94 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6b20],0x0
c000d9c6:	d3 e0                	shl    eax,cl
c000d9c8:	89 c7                	mov    edi,eax
c000d9ca:	f7 d0                	not    eax
c000d9cc:	c1 ff 1f             	sar    edi,0x1f
c000d9cf:	21 05 c0 94 02 c0    	and    DWORD PTR ds:0xc00294c0,eax
c000d9d5:	89 fe                	mov    esi,edi
c000d9d7:	f7 d6                	not    esi
c000d9d9:	21 35 c4 94 02 c0    	and    DWORD PTR ds:0xc00294c4,esi
c000d9df:	5e                   	pop    esi
c000d9e0:	5f                   	pop    edi
c000d9e1:	c3                   	ret    

c000d9e2 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d9e2:	57                   	push   edi
c000d9e3:	56                   	push   esi
c000d9e4:	53                   	push   ebx
c000d9e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d9e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d9ed:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d9f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d9f5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d9fb:	77 41                	ja     c000da3e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d9fd:	99                   	cdq    
c000d9fe:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da04:	01 c8                	add    eax,ecx
c000da06:	11 da                	adc    edx,ebx
c000da08:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da0e:	19 d7                	sbb    edi,edx
c000da10:	72 33                	jb     c000da45 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000da12:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da18:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da1e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da22:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da26:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da2c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da36:	5b                   	pop    ebx
c000da37:	5e                   	pop    esi
c000da38:	5f                   	pop    edi
c000da39:	e9 d4 0a 00 00       	jmp    c000e512 <VCache::read(unsigned long long, int, void*)>
c000da3e:	b8 05 00 00 00       	mov    eax,0x5
c000da43:	eb 05                	jmp    c000da4a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000da45:	b8 07 00 00 00       	mov    eax,0x7
c000da4a:	5b                   	pop    ebx
c000da4b:	5e                   	pop    esi
c000da4c:	5f                   	pop    edi
c000da4d:	c3                   	ret    

c000da4e <LogicalDisk::write(unsigned long long, int, void*)>:
c000da4e:	57                   	push   edi
c000da4f:	56                   	push   esi
c000da50:	53                   	push   ebx
c000da51:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da59:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da61:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000da67:	77 41                	ja     c000daaa <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000da69:	99                   	cdq    
c000da6a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da70:	01 c8                	add    eax,ecx
c000da72:	11 da                	adc    edx,ebx
c000da74:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da7a:	19 d7                	sbb    edi,edx
c000da7c:	72 33                	jb     c000dab1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000da7e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da84:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da8a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da8e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da92:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da98:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000daa2:	5b                   	pop    ebx
c000daa3:	5e                   	pop    esi
c000daa4:	5f                   	pop    edi
c000daa5:	e9 6e 09 00 00       	jmp    c000e418 <VCache::write(unsigned long long, int, void*)>
c000daaa:	b8 05 00 00 00       	mov    eax,0x5
c000daaf:	eb 05                	jmp    c000dab6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dab1:	b8 07 00 00 00       	mov    eax,0x7
c000dab6:	5b                   	pop    ebx
c000dab7:	5e                   	pop    esi
c000dab8:	5f                   	pop    edi
c000dab9:	c3                   	ret    
c000daba:	66 90                	xchg   ax,ax

c000dabc <Mouse::Mouse(char const*)>:
c000dabc:	83 ec 0c             	sub    esp,0xc
c000dabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac3:	83 ec 08             	sub    esp,0x8
c000dac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daca:	50                   	push   eax
c000dacb:	e8 c0 ec ff ff       	call   c000c790 <Device::Device(char const*)>
c000dad0:	83 c4 10             	add    esp,0x10
c000dad3:	ba 60 16 02 c0       	mov    edx,0xc0021660
c000dad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dadc:	89 10                	mov    DWORD PTR [eax],edx
c000dade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000daec:	90                   	nop
c000daed:	83 c4 0c             	add    esp,0xc
c000daf0:	c3                   	ret    
c000daf1:	90                   	nop
c000daf2:	66 90                	xchg   ax,ax

c000daf4 <Mouse::~Mouse()>:
c000daf4:	83 ec 0c             	sub    esp,0xc
c000daf7:	ba 60 16 02 c0       	mov    edx,0xc0021660
c000dafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db00:	89 10                	mov    DWORD PTR [eax],edx
c000db02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db06:	83 ec 0c             	sub    esp,0xc
c000db09:	50                   	push   eax
c000db0a:	e8 eb e9 ff ff       	call   c000c4fa <Device::~Device()>
c000db0f:	83 c4 10             	add    esp,0x10
c000db12:	90                   	nop
c000db13:	83 c4 0c             	add    esp,0xc
c000db16:	c3                   	ret    
c000db17:	90                   	nop

c000db18 <Mouse::~Mouse()>:
c000db18:	83 ec 0c             	sub    esp,0xc
c000db1b:	83 ec 0c             	sub    esp,0xc
c000db1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db22:	e8 cd ff ff ff       	call   c000daf4 <Mouse::~Mouse()>
c000db27:	83 c4 10             	add    esp,0x10
c000db2a:	83 ec 08             	sub    esp,0x8
c000db2d:	68 58 01 00 00       	push   0x158
c000db32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db36:	e8 d1 cc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000db3b:	83 c4 10             	add    esp,0x10
c000db3e:	83 c4 0c             	add    esp,0xc
c000db41:	c3                   	ret    

c000db42 <NIC::getMAC()>:
c000db42:	31 c0                	xor    eax,eax
c000db44:	31 d2                	xor    edx,edx
c000db46:	c3                   	ret    
c000db47:	90                   	nop

c000db48 <NIC::write(int, unsigned char*, int*)>:
c000db48:	b8 01 00 00 00       	mov    eax,0x1
c000db4d:	c3                   	ret    

c000db4e <NIC::NIC(char const*)>:
c000db4e:	83 ec 0c             	sub    esp,0xc
c000db51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db55:	83 ec 08             	sub    esp,0x8
c000db58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db5c:	50                   	push   eax
c000db5d:	e8 2e ec ff ff       	call   c000c790 <Device::Device(char const*)>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	ba 8c 16 02 c0       	mov    edx,0xc002168c
c000db6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db6e:	89 10                	mov    DWORD PTR [eax],edx
c000db70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db74:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000db7e:	90                   	nop
c000db7f:	83 c4 0c             	add    esp,0xc
c000db82:	c3                   	ret    
c000db83:	90                   	nop

c000db84 <NIC::~NIC()>:
c000db84:	83 ec 0c             	sub    esp,0xc
c000db87:	ba 8c 16 02 c0       	mov    edx,0xc002168c
c000db8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db90:	89 10                	mov    DWORD PTR [eax],edx
c000db92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db96:	83 ec 0c             	sub    esp,0xc
c000db99:	50                   	push   eax
c000db9a:	e8 5b e9 ff ff       	call   c000c4fa <Device::~Device()>
c000db9f:	83 c4 10             	add    esp,0x10
c000dba2:	90                   	nop
c000dba3:	83 c4 0c             	add    esp,0xc
c000dba6:	c3                   	ret    
c000dba7:	90                   	nop

c000dba8 <NIC::~NIC()>:
c000dba8:	83 ec 0c             	sub    esp,0xc
c000dbab:	83 ec 0c             	sub    esp,0xc
c000dbae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb2:	e8 cd ff ff ff       	call   c000db84 <NIC::~NIC()>
c000dbb7:	83 c4 10             	add    esp,0x10
c000dbba:	83 ec 08             	sub    esp,0x8
c000dbbd:	68 58 01 00 00       	push   0x158
c000dbc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc6:	e8 41 cc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dbcb:	83 c4 10             	add    esp,0x10
c000dbce:	83 c4 0c             	add    esp,0xc
c000dbd1:	c3                   	ret    

c000dbd2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbd2:	55                   	push   ebp
c000dbd3:	57                   	push   edi
c000dbd4:	56                   	push   esi
c000dbd5:	53                   	push   ebx
c000dbd6:	81 ec 28 01 00 00    	sub    esp,0x128
c000dbdc:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dbe3:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dbea:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dbf1:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dbf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dbfc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dc00:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc07:	e8 80 ec ff ff       	call   c000c88c <Device::getName()>
c000dc0c:	5a                   	pop    edx
c000dc0d:	59                   	pop    ecx
c000dc0e:	50                   	push   eax
c000dc0f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dc13:	55                   	push   ebp
c000dc14:	e8 37 2a ff ff       	call   c0000650 <strcpy>
c000dc19:	5b                   	pop    ebx
c000dc1a:	58                   	pop    eax
c000dc1b:	68 b8 16 02 c0       	push   0xc00216b8
c000dc20:	55                   	push   ebp
c000dc21:	e8 4a 2c ff ff       	call   c0000870 <strcat>
c000dc26:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dc2d:	e8 a1 9e ff ff       	call   c0007ad3 <malloc>
c000dc32:	83 c4 0c             	add    esp,0xc
c000dc35:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc39:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc3d:	89 c3                	mov    ebx,eax
c000dc3f:	57                   	push   edi
c000dc40:	56                   	push   esi
c000dc41:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dc48:	55                   	push   ebp
c000dc49:	50                   	push   eax
c000dc4a:	e8 57 fb ff ff       	call   c000d7a6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dc4f:	83 c4 14             	add    esp,0x14
c000dc52:	53                   	push   ebx
c000dc53:	e8 0e fc ff ff       	call   c000d866 <LogicalDisk::assignDriveLetter()>
c000dc58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc5b:	e8 c0 fc ff ff       	call   c000d920 <LogicalDisk::mount()>
c000dc60:	58                   	pop    eax
c000dc61:	5a                   	pop    edx
c000dc62:	53                   	push   ebx
c000dc63:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc6a:	e8 89 e9 ff ff       	call   c000c5f8 <Device::addChild(Device*)>
c000dc6f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dc75:	5b                   	pop    ebx
c000dc76:	5e                   	pop    esi
c000dc77:	5f                   	pop    edi
c000dc78:	5d                   	pop    ebp
c000dc79:	c3                   	ret    

c000dc7a <createPartitionsForDisk(PhysicalDisk*)>:
c000dc7a:	55                   	push   ebp
c000dc7b:	57                   	push   edi
c000dc7c:	56                   	push   esi
c000dc7d:	53                   	push   ebx
c000dc7e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dc84:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dc8b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dc91:	3d 00 02 00 00       	cmp    eax,0x200
c000dc96:	74 27                	je     c000dcbf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dc98:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dc9e:	83 ec 10             	sub    esp,0x10
c000dca1:	99                   	cdq    
c000dca2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dca8:	52                   	push   edx
c000dca9:	50                   	push   eax
c000dcaa:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dcae:	c1 e6 0a             	shl    esi,0xa
c000dcb1:	89 fd                	mov    ebp,edi
c000dcb3:	55                   	push   ebp
c000dcb4:	56                   	push   esi
c000dcb5:	e8 76 14 01 00       	call   c001f130 <__udivdi3>
c000dcba:	e9 b9 00 00 00       	jmp    c000dd78 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dcbf:	83 ec 0c             	sub    esp,0xc
c000dcc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcc4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000dcc8:	56                   	push   esi
c000dcc9:	6a 01                	push   0x1
c000dccb:	6a 00                	push   0x0
c000dccd:	6a 00                	push   0x0
c000dccf:	53                   	push   ebx
c000dcd0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dcd3:	83 c4 20             	add    esp,0x20
c000dcd6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000dcde:	75 0a                	jne    c000dcea <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000dce0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000dce8:	74 2c                	je     c000dd16 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000dcea:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dcf0:	83 ec 10             	sub    esp,0x10
c000dcf3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dcf9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dcff:	89 f7                	mov    edi,esi
c000dd01:	c1 ff 1f             	sar    edi,0x1f
c000dd04:	57                   	push   edi
c000dd05:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd09:	56                   	push   esi
c000dd0a:	c1 e0 0a             	shl    eax,0xa
c000dd0d:	52                   	push   edx
c000dd0e:	50                   	push   eax
c000dd0f:	e8 1c 14 01 00       	call   c001f130 <__udivdi3>
c000dd14:	eb 62                	jmp    c000dd78 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dd16:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000dd1d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000dd24:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000dd2b:	89 cf                	mov    edi,ecx
c000dd2d:	83 e2 7f             	and    edx,0x7f
c000dd30:	83 e7 7f             	and    edi,0x7f
c000dd33:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000dd36:	83 e0 7f             	and    eax,0x7f
c000dd39:	8d 14 01             	lea    edx,[ecx+eax*1]
c000dd3c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000dd43:	83 e0 7f             	and    eax,0x7f
c000dd46:	01 d0                	add    eax,edx
c000dd48:	84 c0                	test   al,al
c000dd4a:	89 c5                	mov    ebp,eax
c000dd4c:	74 41                	je     c000dd8f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000dd4e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd54:	83 ec 10             	sub    esp,0x10
c000dd57:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd5d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd63:	89 f7                	mov    edi,esi
c000dd65:	c1 ff 1f             	sar    edi,0x1f
c000dd68:	57                   	push   edi
c000dd69:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd6d:	56                   	push   esi
c000dd6e:	c1 e0 0a             	shl    eax,0xa
c000dd71:	52                   	push   edx
c000dd72:	50                   	push   eax
c000dd73:	e8 b8 13 01 00       	call   c001f130 <__udivdi3>
c000dd78:	83 c4 14             	add    esp,0x14
c000dd7b:	52                   	push   edx
c000dd7c:	50                   	push   eax
c000dd7d:	6a 00                	push   0x0
c000dd7f:	6a 00                	push   0x0
c000dd81:	53                   	push   ebx
c000dd82:	e8 4b fe ff ff       	call   c000dbd2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd87:	83 c4 20             	add    esp,0x20
c000dd8a:	e9 73 01 00 00       	jmp    c000df02 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000dd8f:	89 f0                	mov    eax,esi
c000dd91:	31 c9                	xor    ecx,ecx
c000dd93:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000dd9a:	75 02                	jne    c000dd9e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000dd9c:	89 cd                	mov    ebp,ecx
c000dd9e:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000dda6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ddad:	83 c0 10             	add    eax,0x10
c000ddb0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ddb8:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000ddbf:	c1 e2 08             	shl    edx,0x8
c000ddc2:	c1 e6 10             	shl    esi,0x10
c000ddc5:	09 f2                	or     edx,esi
c000ddc7:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000ddce:	09 f2                	or     edx,esi
c000ddd0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ddd7:	c1 e6 18             	shl    esi,0x18
c000ddda:	09 f2                	or     edx,esi
c000dddc:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000dde3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000dde7:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ddee:	c1 e6 10             	shl    esi,0x10
c000ddf1:	c1 e2 08             	shl    edx,0x8
c000ddf4:	09 f2                	or     edx,esi
c000ddf6:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ddfd:	09 f2                	or     edx,esi
c000ddff:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000de06:	c1 e6 18             	shl    esi,0x18
c000de09:	09 f2                	or     edx,esi
c000de0b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000de0f:	41                   	inc    ecx
c000de10:	83 f9 04             	cmp    ecx,0x4
c000de13:	0f 85 7a ff ff ff    	jne    c000dd93 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000de19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de1d:	83 f0 01             	xor    eax,0x1
c000de20:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000de24:	75 4f                	jne    c000de75 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de2a:	83 f0 01             	xor    eax,0x1
c000de2d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000de31:	75 42                	jne    c000de75 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de33:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de39:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000de41:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de47:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000de4f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de55:	89 f7                	mov    edi,esi
c000de57:	c1 ff 1f             	sar    edi,0x1f
c000de5a:	57                   	push   edi
c000de5b:	56                   	push   esi
c000de5c:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de60:	52                   	push   edx
c000de61:	c1 e0 0a             	shl    eax,0xa
c000de64:	50                   	push   eax
c000de65:	e8 c6 12 01 00       	call   c001f130 <__udivdi3>
c000de6a:	83 c4 10             	add    esp,0x10
c000de6d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de71:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de75:	89 e8                	mov    eax,ebp
c000de77:	0f b6 e8             	movzx  ebp,al
c000de7a:	85 ed                	test   ebp,ebp
c000de7c:	74 50                	je     c000dece <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000de7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de82:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de86:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de8a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000de8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de92:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000de96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de9a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000de9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dea2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dea6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000deaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000deae:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000deb2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000deb6:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000deba:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000debe:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000dec2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000dec6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000deca:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000dece:	31 ed                	xor    ebp,ebp
c000ded0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000ded4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000ded8:	89 f8                	mov    eax,edi
c000deda:	09 f0                	or     eax,esi
c000dedc:	74 1e                	je     c000defc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000dede:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dee2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dee6:	89 d1                	mov    ecx,edx
c000dee8:	09 c1                	or     ecx,eax
c000deea:	74 10                	je     c000defc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000deec:	83 ec 0c             	sub    esp,0xc
c000deef:	57                   	push   edi
c000def0:	56                   	push   esi
c000def1:	52                   	push   edx
c000def2:	50                   	push   eax
c000def3:	53                   	push   ebx
c000def4:	e8 d9 fc ff ff       	call   c000dbd2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000def9:	83 c4 20             	add    esp,0x20
c000defc:	45                   	inc    ebp
c000defd:	83 fd 04             	cmp    ebp,0x4
c000df00:	75 ce                	jne    c000ded0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000df02:	81 c4 5c 02 00 00    	add    esp,0x25c
c000df08:	5b                   	pop    ebx
c000df09:	5e                   	pop    esi
c000df0a:	5f                   	pop    edi
c000df0b:	5d                   	pop    ebp
c000df0c:	c3                   	ret    
c000df0d:	66 90                	xchg   ax,ax
c000df0f:	90                   	nop

c000df10 <Serial::Serial(char const*)>:
c000df10:	83 ec 0c             	sub    esp,0xc
c000df13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df17:	83 ec 08             	sub    esp,0x8
c000df1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df1e:	50                   	push   eax
c000df1f:	e8 6c e8 ff ff       	call   c000c790 <Device::Device(char const*)>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	ba cc 16 02 c0       	mov    edx,0xc00216cc
c000df2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df30:	89 10                	mov    DWORD PTR [eax],edx
c000df32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df36:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000df40:	90                   	nop
c000df41:	83 c4 0c             	add    esp,0xc
c000df44:	c3                   	ret    
c000df45:	90                   	nop
c000df46:	66 90                	xchg   ax,ax

c000df48 <Serial::~Serial()>:
c000df48:	83 ec 0c             	sub    esp,0xc
c000df4b:	ba cc 16 02 c0       	mov    edx,0xc00216cc
c000df50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df54:	89 10                	mov    DWORD PTR [eax],edx
c000df56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5a:	83 ec 0c             	sub    esp,0xc
c000df5d:	50                   	push   eax
c000df5e:	e8 97 e5 ff ff       	call   c000c4fa <Device::~Device()>
c000df63:	83 c4 10             	add    esp,0x10
c000df66:	90                   	nop
c000df67:	83 c4 0c             	add    esp,0xc
c000df6a:	c3                   	ret    
c000df6b:	90                   	nop

c000df6c <Serial::~Serial()>:
c000df6c:	83 ec 0c             	sub    esp,0xc
c000df6f:	83 ec 0c             	sub    esp,0xc
c000df72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df76:	e8 cd ff ff ff       	call   c000df48 <Serial::~Serial()>
c000df7b:	83 c4 10             	add    esp,0x10
c000df7e:	83 ec 08             	sub    esp,0x8
c000df81:	68 58 01 00 00       	push   0x158
c000df86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df8a:	e8 7d c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000df8f:	83 c4 10             	add    esp,0x10
c000df92:	83 c4 0c             	add    esp,0xc
c000df95:	c3                   	ret    
c000df96:	66 90                	xchg   ax,ax

c000df98 <Timer::Timer(char const*)>:
c000df98:	83 ec 0c             	sub    esp,0xc
c000df9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9f:	83 ec 08             	sub    esp,0x8
c000dfa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa6:	50                   	push   eax
c000dfa7:	e8 e4 e7 ff ff       	call   c000c790 <Device::Device(char const*)>
c000dfac:	83 c4 10             	add    esp,0x10
c000dfaf:	ba 10 17 02 c0       	mov    edx,0xc0021710
c000dfb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb8:	89 10                	mov    DWORD PTR [eax],edx
c000dfba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfbe:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000dfc8:	90                   	nop
c000dfc9:	83 c4 0c             	add    esp,0xc
c000dfcc:	c3                   	ret    
c000dfcd:	90                   	nop
c000dfce:	66 90                	xchg   ax,ax

c000dfd0 <Timer::~Timer()>:
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	ba 10 17 02 c0       	mov    edx,0xc0021710
c000dfd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfdc:	89 10                	mov    DWORD PTR [eax],edx
c000dfde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe2:	83 ec 0c             	sub    esp,0xc
c000dfe5:	50                   	push   eax
c000dfe6:	e8 0f e5 ff ff       	call   c000c4fa <Device::~Device()>
c000dfeb:	83 c4 10             	add    esp,0x10
c000dfee:	90                   	nop
c000dfef:	83 c4 0c             	add    esp,0xc
c000dff2:	c3                   	ret    
c000dff3:	90                   	nop

c000dff4 <Timer::~Timer()>:
c000dff4:	83 ec 0c             	sub    esp,0xc
c000dff7:	83 ec 0c             	sub    esp,0xc
c000dffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dffe:	e8 cd ff ff ff       	call   c000dfd0 <Timer::~Timer()>
c000e003:	83 c4 10             	add    esp,0x10
c000e006:	83 ec 08             	sub    esp,0x8
c000e009:	68 5c 01 00 00       	push   0x15c
c000e00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e012:	e8 f5 c7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e017:	83 c4 10             	add    esp,0x10
c000e01a:	83 c4 0c             	add    esp,0xc
c000e01d:	c3                   	ret    

c000e01e <Timer::read()>:
c000e01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e022:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e028:	c3                   	ret    

c000e029 <setupTimer(int)>:
c000e029:	53                   	push   ebx
c000e02a:	83 ec 14             	sub    esp,0x14
c000e02d:	68 5c 01 00 00       	push   0x15c
c000e032:	e8 9c 9a ff ff       	call   c0007ad3 <malloc>
c000e037:	89 04 24             	mov    DWORD PTR [esp],eax
c000e03a:	89 c3                	mov    ebx,eax
c000e03c:	e8 57 09 01 00       	call   c001e998 <PIT::PIT()>
c000e041:	58                   	pop    eax
c000e042:	5a                   	pop    edx
c000e043:	53                   	push   ebx
c000e044:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e04a:	e8 a9 e5 ff ff       	call   c000c5f8 <Device::addChild(Device*)>
c000e04f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e051:	6a 00                	push   0x0
c000e053:	6a 00                	push   0x0
c000e055:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e059:	53                   	push   ebx
c000e05a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e05d:	83 c4 28             	add    esp,0x28
c000e060:	89 d8                	mov    eax,ebx
c000e062:	5b                   	pop    ebx
c000e063:	c3                   	ret    

c000e064 <timerHandler(unsigned int)>:
c000e064:	56                   	push   esi
c000e065:	53                   	push   ebx
c000e066:	51                   	push   ecx
c000e067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06b:	01 05 4c 95 02 c0    	add    DWORD PTR ds:0xc002954c,eax
c000e071:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e078:	0f 84 4a 01 00 00    	je     c000e1c8 <timerHandler(unsigned int)+0x164>
c000e07e:	fa                   	cli    
c000e07f:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000e085:	83 ec 0c             	sub    esp,0xc
c000e088:	68 78 a4 02 c0       	push   0xc002a478
c000e08d:	ff 05 64 a4 02 c0    	inc    DWORD PTR ds:0xc002a464
c000e093:	e8 68 16 01 00       	call   c001f700 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e098:	83 c4 10             	add    esp,0x10
c000e09b:	84 c0                	test   al,al
c000e09d:	0f 85 a1 00 00 00    	jne    c000e144 <timerHandler(unsigned int)+0xe0>
c000e0a3:	83 ec 0c             	sub    esp,0xc
c000e0a6:	68 78 a4 02 c0       	push   0xc002a478
c000e0ab:	e8 6c 16 01 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0b0:	83 c4 10             	add    esp,0x10
c000e0b3:	89 c6                	mov    esi,eax
c000e0b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e0b8:	83 ec 0c             	sub    esp,0xc
c000e0bb:	68 78 a4 02 c0       	push   0xc002a478
c000e0c0:	e8 57 16 01 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0c5:	c7 04 24 78 a4 02 c0 	mov    DWORD PTR [esp],0xc002a478
c000e0cc:	89 c3                	mov    ebx,eax
c000e0ce:	e8 51 16 01 00       	call   c001f724 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e0d3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e0d6:	83 c4 10             	add    esp,0x10
c000e0d9:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c000e0df:	77 23                	ja     c000e104 <timerHandler(unsigned int)+0xa0>
c000e0e1:	83 ec 0c             	sub    esp,0xc
c000e0e4:	53                   	push   ebx
c000e0e5:	e8 82 7e 00 00       	call   c0015f6c <unblockTask(ThreadControlBlock*)>
c000e0ea:	83 c4 10             	add    esp,0x10
c000e0ed:	39 de                	cmp    esi,ebx
c000e0ef:	75 27                	jne    c000e118 <timerHandler(unsigned int)+0xb4>
c000e0f1:	83 ec 0c             	sub    esp,0xc
c000e0f4:	68 78 a4 02 c0       	push   0xc002a478
c000e0f9:	e8 1e 16 01 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0fe:	89 c6                	mov    esi,eax
c000e100:	eb 12                	jmp    c000e114 <timerHandler(unsigned int)+0xb0>
c000e102:	66 90                	xchg   ax,ax
c000e104:	52                   	push   edx
c000e105:	52                   	push   edx
c000e106:	53                   	push   ebx
c000e107:	68 78 a4 02 c0       	push   0xc002a478
c000e10c:	e8 cf 16 01 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e111:	8d 76 00             	lea    esi,[esi+0x0]
c000e114:	83 c4 10             	add    esp,0x10
c000e117:	90                   	nop
c000e118:	83 ec 0c             	sub    esp,0xc
c000e11b:	68 78 a4 02 c0       	push   0xc002a478
c000e120:	e8 db 15 01 00       	call   c001f700 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	84 c0                	test   al,al
c000e12a:	75 18                	jne    c000e144 <timerHandler(unsigned int)+0xe0>
c000e12c:	83 ec 0c             	sub    esp,0xc
c000e12f:	68 78 a4 02 c0       	push   0xc002a478
c000e134:	e8 e3 15 01 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e139:	83 c4 10             	add    esp,0x10
c000e13c:	39 f0                	cmp    eax,esi
c000e13e:	0f 85 74 ff ff ff    	jne    c000e0b8 <timerHandler(unsigned int)+0x54>
c000e144:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e149:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e14d:	74 41                	je     c000e190 <timerHandler(unsigned int)+0x12c>
c000e14f:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e156:	74 38                	je     c000e190 <timerHandler(unsigned int)+0x12c>
c000e158:	fa                   	cli    
c000e159:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000e15f:	a1 4c 95 02 c0       	mov    eax,ds:0xc002954c
c000e164:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e16a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e16d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e173:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e176:	72 08                	jb     c000e180 <timerHandler(unsigned int)+0x11c>
c000e178:	e8 f7 78 00 00       	call   c0015a74 <schedule()>
c000e17d:	8d 76 00             	lea    esi,[esi+0x0]
c000e180:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000e185:	48                   	dec    eax
c000e186:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000e18b:	75 03                	jne    c000e190 <timerHandler(unsigned int)+0x12c>
c000e18d:	fb                   	sti    
c000e18e:	66 90                	xchg   ax,ax
c000e190:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000e195:	48                   	dec    eax
c000e196:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000e19b:	75 1b                	jne    c000e1b8 <timerHandler(unsigned int)+0x154>
c000e19d:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c000e1a4:	74 12                	je     c000e1b8 <timerHandler(unsigned int)+0x154>
c000e1a6:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c000e1b0:	e8 bf 78 00 00       	call   c0015a74 <schedule()>
c000e1b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1b8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000e1bd:	48                   	dec    eax
c000e1be:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000e1c3:	75 03                	jne    c000e1c8 <timerHandler(unsigned int)+0x164>
c000e1c5:	fb                   	sti    
c000e1c6:	66 90                	xchg   ax,ax
c000e1c8:	58                   	pop    eax
c000e1c9:	5b                   	pop    ebx
c000e1ca:	5e                   	pop    esi
c000e1cb:	c3                   	ret    

c000e1cc <VCache::VCache(PhysicalDisk*)>:
c000e1cc:	53                   	push   ebx
c000e1cd:	83 ec 18             	sub    esp,0x18
c000e1d0:	ba 40 17 02 c0       	mov    edx,0xc0021740
c000e1d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1d9:	89 10                	mov    DWORD PTR [eax],edx
c000e1db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1df:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e1e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1ea:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e1f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e1fc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e203:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e207:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e20e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e219:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e224:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e22c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e233:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e23a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e23e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e246:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e24a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e24e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e252:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e256:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e25d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e265:	83 ec 0c             	sub    esp,0xc
c000e268:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e26c:	e8 62 98 ff ff       	call   c0007ad3 <malloc>
c000e271:	83 c4 10             	add    esp,0x10
c000e274:	89 c3                	mov    ebx,eax
c000e276:	83 ec 0c             	sub    esp,0xc
c000e279:	53                   	push   ebx
c000e27a:	e8 95 75 00 00       	call   c0015814 <Mutex::Mutex()>
c000e27f:	83 c4 10             	add    esp,0x10
c000e282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e286:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e289:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e28d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e291:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e298:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e29f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2a3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e2a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ad:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e2b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2b4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e2ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2c0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e2c4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e2c7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e2ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ce:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e2d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2d6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e2dc:	05 00 02 00 00       	add    eax,0x200
c000e2e1:	c1 e0 03             	shl    eax,0x3
c000e2e4:	83 ec 0c             	sub    esp,0xc
c000e2e7:	50                   	push   eax
c000e2e8:	e8 e6 97 ff ff       	call   c0007ad3 <malloc>
c000e2ed:	83 c4 10             	add    esp,0x10
c000e2f0:	89 c2                	mov    edx,eax
c000e2f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e2f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2fd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e308:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e30c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e310:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e316:	89 d0                	mov    eax,edx
c000e318:	c1 e0 02             	shl    eax,0x2
c000e31b:	01 d0                	add    eax,edx
c000e31d:	c1 e0 04             	shl    eax,0x4
c000e320:	83 ec 0c             	sub    esp,0xc
c000e323:	50                   	push   eax
c000e324:	e8 aa 97 ff ff       	call   c0007ad3 <malloc>
c000e329:	83 c4 10             	add    esp,0x10
c000e32c:	89 c2                	mov    edx,eax
c000e32e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e332:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e335:	90                   	nop
c000e336:	83 c4 18             	add    esp,0x18
c000e339:	5b                   	pop    ebx
c000e33a:	c3                   	ret    
c000e33b:	90                   	nop

c000e33c <VCache::invalidateReadBuffer()>:
c000e33c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e340:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e346:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e34a:	c3                   	ret    
c000e34b:	90                   	nop

c000e34c <VCache::writeWriteBuffer()>:
c000e34c:	53                   	push   ebx
c000e34d:	83 ec 08             	sub    esp,0x8
c000e350:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e354:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e358:	74 1e                	je     c000e378 <VCache::writeWriteBuffer()+0x2c>
c000e35a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e35d:	83 ec 0c             	sub    esp,0xc
c000e360:	8b 10                	mov    edx,DWORD PTR [eax]
c000e362:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e365:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e368:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e36b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e36e:	50                   	push   eax
c000e36f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e372:	83 c4 20             	add    esp,0x20
c000e375:	8d 76 00             	lea    esi,[esi+0x0]
c000e378:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e37f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e386:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e38a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e391:	83 c4 08             	add    esp,0x8
c000e394:	5b                   	pop    ebx
c000e395:	c3                   	ret    
c000e396:	66 90                	xchg   ax,ax

c000e398 <VCache::~VCache()>:
c000e398:	83 ec 0c             	sub    esp,0xc
c000e39b:	ba 40 17 02 c0       	mov    edx,0xc0021740
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	89 10                	mov    DWORD PTR [eax],edx
c000e3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3aa:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e3ad:	0f b6 c0             	movzx  eax,al
c000e3b0:	85 c0                	test   eax,eax
c000e3b2:	74 10                	je     c000e3c4 <VCache::~VCache()+0x2c>
c000e3b4:	83 ec 0c             	sub    esp,0xc
c000e3b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3bb:	e8 8c ff ff ff       	call   c000e34c <VCache::writeWriteBuffer()>
c000e3c0:	83 c4 10             	add    esp,0x10
c000e3c3:	90                   	nop
c000e3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e3cb:	83 ec 0c             	sub    esp,0xc
c000e3ce:	50                   	push   eax
c000e3cf:	e8 0f 97 ff ff       	call   c0007ae3 <free>
c000e3d4:	83 c4 10             	add    esp,0x10
c000e3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e3de:	83 ec 0c             	sub    esp,0xc
c000e3e1:	50                   	push   eax
c000e3e2:	e8 fc 96 ff ff       	call   c0007ae3 <free>
c000e3e7:	83 c4 10             	add    esp,0x10
c000e3ea:	90                   	nop
c000e3eb:	83 c4 0c             	add    esp,0xc
c000e3ee:	c3                   	ret    
c000e3ef:	90                   	nop

c000e3f0 <VCache::~VCache()>:
c000e3f0:	83 ec 0c             	sub    esp,0xc
c000e3f3:	83 ec 0c             	sub    esp,0xc
c000e3f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3fa:	e8 99 ff ff ff       	call   c000e398 <VCache::~VCache()>
c000e3ff:	83 c4 10             	add    esp,0x10
c000e402:	83 ec 08             	sub    esp,0x8
c000e405:	6a 44                	push   0x44
c000e407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e40b:	e8 fc c3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e410:	83 c4 10             	add    esp,0x10
c000e413:	83 c4 0c             	add    esp,0xc
c000e416:	c3                   	ret    
c000e417:	90                   	nop

c000e418 <VCache::write(unsigned long long, int, void*)>:
c000e418:	55                   	push   ebp
c000e419:	57                   	push   edi
c000e41a:	56                   	push   esi
c000e41b:	53                   	push   ebx
c000e41c:	83 ec 1c             	sub    esp,0x1c
c000e41f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e423:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e427:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e42b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e42f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e433:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e437:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e43b:	74 0f                	je     c000e44c <VCache::write(unsigned long long, int, void*)+0x34>
c000e43d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e441:	53                   	push   ebx
c000e442:	e8 f5 fe ff ff       	call   c000e33c <VCache::invalidateReadBuffer()>
c000e447:	58                   	pop    eax
c000e448:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e44c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e450:	74 66                	je     c000e4b8 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e452:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e455:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e459:	99                   	cdq    
c000e45a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e45d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e460:	89 c6                	mov    esi,eax
c000e462:	31 ce                	xor    esi,ecx
c000e464:	89 d0                	mov    eax,edx
c000e466:	31 e8                	xor    eax,ebp
c000e468:	09 c6                	or     esi,eax
c000e46a:	75 38                	jne    c000e4a4 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e46c:	83 ff 01             	cmp    edi,0x1
c000e46f:	75 33                	jne    c000e4a4 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e471:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e474:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e478:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e47c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e482:	0f af f9             	imul   edi,ecx
c000e485:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e488:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e48a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e48d:	40                   	inc    eax
c000e48e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e491:	83 f8 50             	cmp    eax,0x50
c000e494:	75 72                	jne    c000e508 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e496:	83 ec 0c             	sub    esp,0xc
c000e499:	53                   	push   ebx
c000e49a:	e8 ad fe ff ff       	call   c000e34c <VCache::writeWriteBuffer()>
c000e49f:	83 c4 10             	add    esp,0x10
c000e4a2:	eb 64                	jmp    c000e508 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e4a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e4a8:	83 ec 0c             	sub    esp,0xc
c000e4ab:	53                   	push   ebx
c000e4ac:	e8 9b fe ff ff       	call   c000e34c <VCache::writeWriteBuffer()>
c000e4b1:	83 c4 10             	add    esp,0x10
c000e4b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e4b8:	83 ff 4f             	cmp    edi,0x4f
c000e4bb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4be:	7f 20                	jg     c000e4e0 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e4c0:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e4c3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e4c7:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e4ca:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e4cd:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e4d0:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e4d4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e4da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4dc:	eb 2a                	jmp    c000e508 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e4de:	66 90                	xchg   ax,ax
c000e4e0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e4e4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4e6:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e4ea:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e4ee:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e4f2:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e4f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e4fa:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e4fd:	83 c4 1c             	add    esp,0x1c
c000e500:	5b                   	pop    ebx
c000e501:	5e                   	pop    esi
c000e502:	5f                   	pop    edi
c000e503:	5d                   	pop    ebp
c000e504:	ff e0                	jmp    eax
c000e506:	66 90                	xchg   ax,ax
c000e508:	83 c4 1c             	add    esp,0x1c
c000e50b:	31 c0                	xor    eax,eax
c000e50d:	5b                   	pop    ebx
c000e50e:	5e                   	pop    esi
c000e50f:	5f                   	pop    edi
c000e510:	5d                   	pop    ebp
c000e511:	c3                   	ret    

c000e512 <VCache::read(unsigned long long, int, void*)>:
c000e512:	55                   	push   ebp
c000e513:	57                   	push   edi
c000e514:	56                   	push   esi
c000e515:	53                   	push   ebx
c000e516:	83 ec 1c             	sub    esp,0x1c
c000e519:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e51d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e521:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e525:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e529:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e52d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e531:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e535:	74 0d                	je     c000e544 <VCache::read(unsigned long long, int, void*)+0x32>
c000e537:	83 ec 0c             	sub    esp,0xc
c000e53a:	57                   	push   edi
c000e53b:	e8 0c fe ff ff       	call   c000e34c <VCache::writeWriteBuffer()>
c000e540:	83 c4 10             	add    esp,0x10
c000e543:	90                   	nop
c000e544:	83 fd 01             	cmp    ebp,0x1
c000e547:	0f 85 93 00 00 00    	jne    c000e5e0 <VCache::read(unsigned long long, int, void*)+0xce>
c000e54d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e550:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e557:	89 04 24             	mov    DWORD PTR [esp],eax
c000e55a:	0f 85 80 00 00 00    	jne    c000e5e0 <VCache::read(unsigned long long, int, void*)+0xce>
c000e560:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e563:	89 cd                	mov    ebp,ecx
c000e565:	f7 dd                	neg    ebp
c000e567:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e56b:	89 e8                	mov    eax,ebp
c000e56d:	21 dd                	and    ebp,ebx
c000e56f:	c1 f8 1f             	sar    eax,0x1f
c000e572:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e576:	89 e8                	mov    eax,ebp
c000e578:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e57c:	21 f5                	and    ebp,esi
c000e57e:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e582:	89 ea                	mov    edx,ebp
c000e584:	74 2e                	je     c000e5b4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e586:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e589:	75 29                	jne    c000e5b4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e58b:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e58e:	75 24                	jne    c000e5b4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e590:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e593:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e599:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e59c:	8d 70 ff             	lea    esi,[eax-0x1]
c000e59f:	21 f3                	and    ebx,esi
c000e5a1:	0f af d9             	imul   ebx,ecx
c000e5a4:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e5a7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e5ab:	89 de                	mov    esi,ebx
c000e5ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5af:	31 c0                	xor    eax,eax
c000e5b1:	eb 61                	jmp    c000e614 <VCache::read(unsigned long long, int, void*)+0x102>
c000e5b3:	90                   	nop
c000e5b4:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e5b8:	83 ec 0c             	sub    esp,0xc
c000e5bb:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e5be:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e5c2:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e5c5:	8b 36                	mov    esi,DWORD PTR [esi]
c000e5c7:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e5ca:	51                   	push   ecx
c000e5cb:	52                   	push   edx
c000e5cc:	50                   	push   eax
c000e5cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5d1:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e5d4:	83 c4 20             	add    esp,0x20
c000e5d7:	85 c0                	test   eax,eax
c000e5d9:	75 39                	jne    c000e614 <VCache::read(unsigned long long, int, void*)+0x102>
c000e5db:	eb b3                	jmp    c000e590 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e5dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e5e0:	83 ec 0c             	sub    esp,0xc
c000e5e3:	57                   	push   edi
c000e5e4:	e8 53 fd ff ff       	call   c000e33c <VCache::invalidateReadBuffer()>
c000e5e9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e5ec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e5f2:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e5f6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e5fa:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e5fe:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e602:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e606:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e609:	83 c4 2c             	add    esp,0x2c
c000e60c:	5b                   	pop    ebx
c000e60d:	5e                   	pop    esi
c000e60e:	5f                   	pop    edi
c000e60f:	5d                   	pop    ebp
c000e610:	ff e0                	jmp    eax
c000e612:	66 90                	xchg   ax,ax
c000e614:	83 c4 1c             	add    esp,0x1c
c000e617:	5b                   	pop    ebx
c000e618:	5e                   	pop    esi
c000e619:	5f                   	pop    edi
c000e61a:	5d                   	pop    ebp
c000e61b:	c3                   	ret    

c000e61c <Video::putrect(int, int, int, int, unsigned int)>:
c000e61c:	55                   	push   ebp
c000e61d:	57                   	push   edi
c000e61e:	56                   	push   esi
c000e61f:	53                   	push   ebx
c000e620:	83 ec 1c             	sub    esp,0x1c
c000e623:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e627:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e62b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e62f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e633:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e637:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e63b:	01 df                	add    edi,ebx
c000e63d:	39 fb                	cmp    ebx,edi
c000e63f:	7d 1f                	jge    c000e660 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e641:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e645:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e649:	7d 12                	jge    c000e65d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e64b:	8b 16                	mov    edx,DWORD PTR [esi]
c000e64d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e651:	53                   	push   ebx
c000e652:	55                   	push   ebp
c000e653:	45                   	inc    ebp
c000e654:	56                   	push   esi
c000e655:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e658:	83 c4 10             	add    esp,0x10
c000e65b:	eb e8                	jmp    c000e645 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e65d:	43                   	inc    ebx
c000e65e:	eb dd                	jmp    c000e63d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e660:	83 c4 1c             	add    esp,0x1c
c000e663:	5b                   	pop    ebx
c000e664:	5e                   	pop    esi
c000e665:	5f                   	pop    edi
c000e666:	5d                   	pop    ebp
c000e667:	c3                   	ret    

c000e668 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e668:	55                   	push   ebp
c000e669:	57                   	push   edi
c000e66a:	31 ff                	xor    edi,edi
c000e66c:	56                   	push   esi
c000e66d:	53                   	push   ebx
c000e66e:	83 ec 1c             	sub    esp,0x1c
c000e671:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e675:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e679:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e680:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e685:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e689:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e68d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e691:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e694:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e698:	01 f9                	add    ecx,edi
c000e69a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e69e:	7d 2f                	jge    c000e6cf <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e6a0:	31 f6                	xor    esi,esi
c000e6a2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e6a6:	01 f2                	add    edx,esi
c000e6a8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e6ac:	7d 1a                	jge    c000e6c8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e6ae:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e6b1:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e6b4:	46                   	inc    esi
c000e6b5:	51                   	push   ecx
c000e6b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e6ba:	52                   	push   edx
c000e6bb:	55                   	push   ebp
c000e6bc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e6bf:	83 c4 10             	add    esp,0x10
c000e6c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e6c6:	eb da                	jmp    c000e6a2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e6c8:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e6cc:	47                   	inc    edi
c000e6cd:	eb c5                	jmp    c000e694 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e6cf:	83 c4 1c             	add    esp,0x1c
c000e6d2:	5b                   	pop    ebx
c000e6d3:	5e                   	pop    esi
c000e6d4:	5f                   	pop    edi
c000e6d5:	5d                   	pop    ebp
c000e6d6:	c3                   	ret    
c000e6d7:	90                   	nop

c000e6d8 <Video::blit(unsigned int*, int, int, int, int)>:
c000e6d8:	55                   	push   ebp
c000e6d9:	ba 00 00 00 00       	mov    edx,0x0
c000e6de:	57                   	push   edi
c000e6df:	56                   	push   esi
c000e6e0:	53                   	push   ebx
c000e6e1:	83 ec 1c             	sub    esp,0x1c
c000e6e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e6e8:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e6ec:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e6f0:	85 c0                	test   eax,eax
c000e6f2:	0f 49 d0             	cmovns edx,eax
c000e6f5:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e6fc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e700:	89 eb                	mov    ebx,ebp
c000e702:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e706:	01 ea                	add    edx,ebp
c000e708:	39 da                	cmp    edx,ebx
c000e70a:	7e 54                	jle    c000e760 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e70c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e712:	7c 4c                	jl     c000e760 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e714:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e718:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e71c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e720:	01 c1                	add    ecx,eax
c000e722:	39 f9                	cmp    ecx,edi
c000e724:	7e 2f                	jle    c000e755 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e726:	83 c2 04             	add    edx,0x4
c000e729:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e72f:	7c 21                	jl     c000e752 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e731:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e735:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e737:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e73a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e73e:	55                   	push   ebp
c000e73f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e743:	56                   	push   esi
c000e744:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e747:	83 c4 10             	add    esp,0x10
c000e74a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e74e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e752:	47                   	inc    edi
c000e753:	eb c7                	jmp    c000e71c <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e755:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e759:	43                   	inc    ebx
c000e75a:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e75e:	eb a2                	jmp    c000e702 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e760:	83 c4 1c             	add    esp,0x1c
c000e763:	5b                   	pop    ebx
c000e764:	5e                   	pop    esi
c000e765:	5f                   	pop    edi
c000e766:	5d                   	pop    ebp
c000e767:	c3                   	ret    

c000e768 <Video::clearScreen(unsigned int)>:
c000e768:	57                   	push   edi
c000e769:	56                   	push   esi
c000e76a:	53                   	push   ebx
c000e76b:	31 db                	xor    ebx,ebx
c000e76d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e771:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e777:	7e 1f                	jle    c000e798 <Video::clearScreen(unsigned int)+0x30>
c000e779:	31 ff                	xor    edi,edi
c000e77b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e781:	7e 12                	jle    c000e795 <Video::clearScreen(unsigned int)+0x2d>
c000e783:	8b 06                	mov    eax,DWORD PTR [esi]
c000e785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e789:	53                   	push   ebx
c000e78a:	57                   	push   edi
c000e78b:	47                   	inc    edi
c000e78c:	56                   	push   esi
c000e78d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e790:	83 c4 10             	add    esp,0x10
c000e793:	eb e6                	jmp    c000e77b <Video::clearScreen(unsigned int)+0x13>
c000e795:	43                   	inc    ebx
c000e796:	eb d9                	jmp    c000e771 <Video::clearScreen(unsigned int)+0x9>
c000e798:	5b                   	pop    ebx
c000e799:	5e                   	pop    esi
c000e79a:	5f                   	pop    edi
c000e79b:	c3                   	ret    

c000e79c <Video::putpixel(int, int, unsigned int)>:
c000e79c:	c7 44 24 04 48 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021748
c000e7a4:	e9 c8 29 00 00       	jmp    c0011171 <KePanic(char const*)>
c000e7a9:	90                   	nop

c000e7aa <Video::readPixelApprox(int, int)>:
c000e7aa:	83 ec 18             	sub    esp,0x18
c000e7ad:	68 69 17 02 c0       	push   0xc0021769
c000e7b2:	e8 ba 29 00 00       	call   c0011171 <KePanic(char const*)>
c000e7b7:	31 c0                	xor    eax,eax
c000e7b9:	83 c4 1c             	add    esp,0x1c
c000e7bc:	c3                   	ret    
c000e7bd:	90                   	nop

c000e7be <Video::Video(char const*)>:
c000e7be:	83 ec 0c             	sub    esp,0xc
c000e7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c5:	83 ec 08             	sub    esp,0x8
c000e7c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7cc:	50                   	push   eax
c000e7cd:	e8 be df ff ff       	call   c000c790 <Device::Device(char const*)>
c000e7d2:	83 c4 10             	add    esp,0x10
c000e7d5:	ba e4 17 02 c0       	mov    edx,0xc00217e4
c000e7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7de:	89 10                	mov    DWORD PTR [eax],edx
c000e7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e7ee:	90                   	nop
c000e7ef:	83 c4 0c             	add    esp,0xc
c000e7f2:	c3                   	ret    
c000e7f3:	90                   	nop

c000e7f4 <Video::~Video()>:
c000e7f4:	83 ec 0c             	sub    esp,0xc
c000e7f7:	ba e4 17 02 c0       	mov    edx,0xc00217e4
c000e7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e800:	89 10                	mov    DWORD PTR [eax],edx
c000e802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e806:	83 ec 0c             	sub    esp,0xc
c000e809:	50                   	push   eax
c000e80a:	e8 eb dc ff ff       	call   c000c4fa <Device::~Device()>
c000e80f:	83 c4 10             	add    esp,0x10
c000e812:	90                   	nop
c000e813:	83 c4 0c             	add    esp,0xc
c000e816:	c3                   	ret    
c000e817:	90                   	nop

c000e818 <Video::~Video()>:
c000e818:	83 ec 0c             	sub    esp,0xc
c000e81b:	83 ec 0c             	sub    esp,0xc
c000e81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e822:	e8 cd ff ff ff       	call   c000e7f4 <Video::~Video()>
c000e827:	83 c4 10             	add    esp,0x10
c000e82a:	83 ec 08             	sub    esp,0x8
c000e82d:	68 64 01 00 00       	push   0x164
c000e832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e836:	e8 d1 bf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e83b:	83 c4 10             	add    esp,0x10
c000e83e:	83 c4 0c             	add    esp,0xc
c000e841:	c3                   	ret    

c000e842 <Video::isMonochrome()>:
c000e842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e846:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e84c:	c3                   	ret    
c000e84d:	90                   	nop

c000e84e <Video::getWidth()>:
c000e84e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e852:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e858:	c3                   	ret    
c000e859:	90                   	nop

c000e85a <Video::getHeight()>:
c000e85a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e85e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e864:	c3                   	ret    
c000e865:	90                   	nop

c000e866 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e866:	55                   	push   ebp
c000e867:	57                   	push   edi
c000e868:	56                   	push   esi
c000e869:	53                   	push   ebx
c000e86a:	83 ec 2c             	sub    esp,0x2c
c000e86d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e871:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e875:	83 f8 01             	cmp    eax,0x1
c000e878:	19 c9                	sbb    ecx,ecx
c000e87a:	31 db                	xor    ebx,ebx
c000e87c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e880:	89 ce                	mov    esi,ecx
c000e882:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e88a:	f7 d6                	not    esi
c000e88c:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e892:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e896:	01 d8                	add    eax,ebx
c000e898:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e89c:	57                   	push   edi
c000e89d:	e8 b8 ff ff ff       	call   c000e85a <Video::getHeight()>
c000e8a2:	59                   	pop    ecx
c000e8a3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e8a7:	7e 70                	jle    c000e919 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e8a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e8ad:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e8b1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e8b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8b8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e8bc:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e8c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8c7:	89 e8                	mov    eax,ebp
c000e8c9:	83 c0 20             	add    eax,0x20
c000e8cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e8d0:	57                   	push   edi
c000e8d1:	e8 78 ff ff ff       	call   c000e84e <Video::getWidth()>
c000e8d6:	5a                   	pop    edx
c000e8d7:	39 c5                	cmp    ebp,eax
c000e8d9:	7d 34                	jge    c000e90f <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e8db:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e8e0:	74 05                	je     c000e8e7 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e8e2:	8b 07                	mov    eax,DWORD PTR [edi]
c000e8e4:	56                   	push   esi
c000e8e5:	eb 0d                	jmp    c000e8f4 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e8e7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e8ec:	74 12                	je     c000e900 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e8ee:	8b 07                	mov    eax,DWORD PTR [edi]
c000e8f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e8f8:	55                   	push   ebp
c000e8f9:	57                   	push   edi
c000e8fa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8fd:	83 c4 10             	add    esp,0x10
c000e900:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e904:	45                   	inc    ebp
c000e905:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e909:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e90d:	75 c1                	jne    c000e8d0 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e90f:	43                   	inc    ebx
c000e910:	83 fb 20             	cmp    ebx,0x20
c000e913:	0f 85 79 ff ff ff    	jne    c000e892 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e919:	83 c4 2c             	add    esp,0x2c
c000e91c:	5b                   	pop    ebx
c000e91d:	5e                   	pop    esi
c000e91e:	5f                   	pop    edi
c000e91f:	5d                   	pop    ebp
c000e920:	c3                   	ret    
c000e921:	90                   	nop

c000e922 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e922:	55                   	push   ebp
c000e923:	57                   	push   edi
c000e924:	56                   	push   esi
c000e925:	53                   	push   ebx
c000e926:	83 ec 28             	sub    esp,0x28
c000e929:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e92d:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e931:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e935:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e939:	c1 e7 08             	shl    edi,0x8
c000e93c:	01 c7                	add    edi,eax
c000e93e:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e942:	c1 e6 08             	shl    esi,0x8
c000e945:	01 f0                	add    eax,esi
c000e947:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e94b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e94f:	0f af c7             	imul   eax,edi
c000e952:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e959:	50                   	push   eax
c000e95a:	e8 74 91 ff ff       	call   c0007ad3 <malloc>
c000e95f:	83 c4 10             	add    esp,0x10
c000e962:	85 c0                	test   eax,eax
c000e964:	89 c5                	mov    ebp,eax
c000e966:	75 10                	jne    c000e978 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e968:	83 ec 0c             	sub    esp,0xc
c000e96b:	68 94 17 02 c0       	push   0xc0021794
c000e970:	e8 fc 27 00 00       	call   c0011171 <KePanic(char const*)>
c000e975:	83 c4 10             	add    esp,0x10
c000e978:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e97c:	ba 12 00 00 00       	mov    edx,0x12
c000e981:	85 c0                	test   eax,eax
c000e983:	74 11                	je     c000e996 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e985:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e989:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e98d:	c1 fa 03             	sar    edx,0x3
c000e990:	0f af d1             	imul   edx,ecx
c000e993:	83 c2 12             	add    edx,0x12
c000e996:	85 ff                	test   edi,edi
c000e998:	74 06                	je     c000e9a0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e99a:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e99e:	75 12                	jne    c000e9b2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e9a0:	83 ec 0c             	sub    esp,0xc
c000e9a3:	68 a4 17 02 c0       	push   0xc00217a4
c000e9a8:	e8 5d bf ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000e9ad:	e9 b8 00 00 00       	jmp    c000ea6a <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e9b2:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e9b6:	83 f9 02             	cmp    ecx,0x2
c000e9b9:	0f 85 96 00 00 00    	jne    c000ea55 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e9bf:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e9c4:	75 0e                	jne    c000e9d4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9c6:	85 c0                	test   eax,eax
c000e9c8:	75 0a                	jne    c000e9d4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9ca:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e9cd:	83 e8 18             	sub    eax,0x18
c000e9d0:	a8 f7                	test   al,0xf7
c000e9d2:	74 0a                	je     c000e9de <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e9d4:	83 ec 0c             	sub    esp,0xc
c000e9d7:	68 b9 17 02 c0       	push   0xc00217b9
c000e9dc:	eb 7f                	jmp    c000ea5d <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e9de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e9e6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e9ee:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000e9f2:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e9f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e9fe:	75 0c                	jne    c000ea0c <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ea00:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000ea05:	c1 e1 18             	shl    ecx,0x18
c000ea08:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ea0c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ea11:	46                   	inc    esi
c000ea12:	89 c8                	mov    eax,ecx
c000ea14:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ea19:	c1 e0 10             	shl    eax,0x10
c000ea1c:	c1 e1 08             	shl    ecx,0x8
c000ea1f:	09 c1                	or     ecx,eax
c000ea21:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ea25:	09 c1                	or     ecx,eax
c000ea27:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ea2b:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ea2f:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ea33:	c1 f8 03             	sar    eax,0x3
c000ea36:	01 c2                	add    edx,eax
c000ea38:	89 f0                	mov    eax,esi
c000ea3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ea3e:	39 c7                	cmp    edi,eax
c000ea40:	7f b0                	jg     c000e9f2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ea42:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ea46:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea4a:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ea4d:	7e 22                	jle    c000ea71 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ea4f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ea53:	eb 99                	jmp    c000e9ee <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ea55:	50                   	push   eax
c000ea56:	50                   	push   eax
c000ea57:	51                   	push   ecx
c000ea58:	68 c7 17 02 c0       	push   0xc00217c7
c000ea5d:	e8 a8 be ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ea62:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ea65:	e8 79 90 ff ff       	call   c0007ae3 <free>
c000ea6a:	83 c4 10             	add    esp,0x10
c000ea6d:	31 ed                	xor    ebp,ebp
c000ea6f:	eb 0f                	jmp    c000ea80 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ea71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea75:	89 38                	mov    DWORD PTR [eax],edi
c000ea77:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea7b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ea7e:	89 38                	mov    DWORD PTR [eax],edi
c000ea80:	83 c4 1c             	add    esp,0x1c
c000ea83:	89 e8                	mov    eax,ebp
c000ea85:	5b                   	pop    ebx
c000ea86:	5e                   	pop    esi
c000ea87:	5f                   	pop    edi
c000ea88:	5d                   	pop    ebp
c000ea89:	c3                   	ret    

c000ea8a <Video::putTGA(int, int, unsigned char*, int)>:
c000ea8a:	55                   	push   ebp
c000ea8b:	57                   	push   edi
c000ea8c:	56                   	push   esi
c000ea8d:	53                   	push   ebx
c000ea8e:	83 ec 28             	sub    esp,0x28
c000ea91:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea95:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ea99:	50                   	push   eax
c000ea9a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea9e:	50                   	push   eax
c000ea9f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eaa3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eaa7:	57                   	push   edi
c000eaa8:	e8 75 fe ff ff       	call   c000e922 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eaad:	83 c4 20             	add    esp,0x20
c000eab0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eab4:	85 c0                	test   eax,eax
c000eab6:	74 35                	je     c000eaed <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eab8:	89 c6                	mov    esi,eax
c000eaba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eabe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eac2:	39 d8                	cmp    eax,ebx
c000eac4:	7e 27                	jle    c000eaed <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eac6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eaca:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eace:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ead2:	39 e9                	cmp    ecx,ebp
c000ead4:	7e 14                	jle    c000eaea <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ead6:	83 c6 04             	add    esi,0x4
c000ead9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000eadb:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000eade:	53                   	push   ebx
c000eadf:	55                   	push   ebp
c000eae0:	45                   	inc    ebp
c000eae1:	57                   	push   edi
c000eae2:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eae5:	83 c4 10             	add    esp,0x10
c000eae8:	eb e0                	jmp    c000eaca <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eaea:	43                   	inc    ebx
c000eaeb:	eb cd                	jmp    c000eaba <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eaed:	83 c4 1c             	add    esp,0x1c
c000eaf0:	5b                   	pop    ebx
c000eaf1:	5e                   	pop    esi
c000eaf2:	5f                   	pop    edi
c000eaf3:	5d                   	pop    ebp
c000eaf4:	c3                   	ret    
c000eaf5:	66 90                	xchg   ax,ax
c000eaf7:	90                   	nop

c000eaf8 <ACPI::close(int, int, void*)>:
c000eaf8:	83 ec 1c             	sub    esp,0x1c
c000eafb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eb03:	74 0b                	je     c000eb10 <ACPI::close(int, int, void*)+0x18>
c000eb05:	b8 00 00 00 00       	mov    eax,0x0
c000eb0a:	e9 99 00 00 00       	jmp    c000eba8 <ACPI::close(int, int, void*)+0xb0>
c000eb0f:	90                   	nop
c000eb10:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eb15:	75 29                	jne    c000eb40 <ACPI::close(int, int, void*)+0x48>
c000eb17:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000eb1c:	85 c0                	test   eax,eax
c000eb1e:	74 08                	je     c000eb28 <ACPI::close(int, int, void*)+0x30>
c000eb20:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000eb25:	ff d0                	call   eax
c000eb27:	90                   	nop
c000eb28:	83 ec 0c             	sub    esp,0xc
c000eb2b:	68 28 18 02 c0       	push   0xc0021828
c000eb30:	e8 3c 26 00 00       	call   c0011171 <KePanic(char const*)>
c000eb35:	83 c4 10             	add    esp,0x10
c000eb38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb3d:	eb 69                	jmp    c000eba8 <ACPI::close(int, int, void*)+0xb0>
c000eb3f:	90                   	nop
c000eb40:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eb45:	75 59                	jne    c000eba0 <ACPI::close(int, int, void*)+0xa8>
c000eb47:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c000eb4c:	85 c0                	test   eax,eax
c000eb4e:	74 08                	je     c000eb58 <ACPI::close(int, int, void*)+0x60>
c000eb50:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c000eb55:	ff d0                	call   eax
c000eb57:	90                   	nop
c000eb58:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eb5d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb60:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb65:	83 e0 02             	and    eax,0x2
c000eb68:	74 1e                	je     c000eb88 <ACPI::close(int, int, void*)+0x90>
c000eb6a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eb71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb75:	89 c2                	mov    edx,eax
c000eb77:	ec                   	in     al,dx
c000eb78:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb7c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eb80:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb84:	eb da                	jmp    c000eb60 <ACPI::close(int, int, void*)+0x68>
c000eb86:	66 90                	xchg   ax,ax
c000eb88:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000eb8f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000eb94:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000eb98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb9c:	ee                   	out    dx,al
c000eb9d:	8d 76 00             	lea    esi,[esi+0x0]
c000eba0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eba5:	8d 76 00             	lea    esi,[esi+0x0]
c000eba8:	83 c4 1c             	add    esp,0x1c
c000ebab:	c3                   	ret    

c000ebac <findRSDP()>:
c000ebac:	83 ec 1c             	sub    esp,0x1c
c000ebaf:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebb4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ebba:	83 e0 04             	and    eax,0x4
c000ebbd:	0f b6 c0             	movzx  eax,al
c000ebc0:	85 c0                	test   eax,eax
c000ebc2:	75 08                	jne    c000ebcc <findRSDP()+0x20>
c000ebc4:	b8 00 00 00 00       	mov    eax,0x0
c000ebc9:	eb 75                	jmp    c000ec40 <findRSDP()+0x94>
c000ebcb:	90                   	nop
c000ebcc:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ebd1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ebd6:	7f 1c                	jg     c000ebf4 <findRSDP()+0x48>
c000ebd8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebdd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ebe3:	83 e2 fb             	and    edx,0xfffffffb
c000ebe6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ebec:	b8 00 00 00 00       	mov    eax,0x0
c000ebf1:	eb 4d                	jmp    c000ec40 <findRSDP()+0x94>
c000ebf3:	90                   	nop
c000ebf4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ebfc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ec04:	77 32                	ja     c000ec38 <findRSDP()+0x8c>
c000ec06:	83 ec 04             	sub    esp,0x4
c000ec09:	6a 08                	push   0x8
c000ec0b:	68 c3 18 02 c0       	push   0xc00218c3
c000ec10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec14:	e8 67 17 ff ff       	call   c0000380 <memcmp>
c000ec19:	83 c4 10             	add    esp,0x10
c000ec1c:	85 c0                	test   eax,eax
c000ec1e:	0f 94 c0             	sete   al
c000ec21:	0f b6 c0             	movzx  eax,al
c000ec24:	85 c0                	test   eax,eax
c000ec26:	74 08                	je     c000ec30 <findRSDP()+0x84>
c000ec28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec2c:	eb 12                	jmp    c000ec40 <findRSDP()+0x94>
c000ec2e:	66 90                	xchg   ax,ax
c000ec30:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ec35:	eb c5                	jmp    c000ebfc <findRSDP()+0x50>
c000ec37:	90                   	nop
c000ec38:	b8 00 00 00 00       	mov    eax,0x0
c000ec3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec40:	83 c4 1c             	add    esp,0x1c
c000ec43:	c3                   	ret    

c000ec44 <loadACPITables(unsigned char*)>:
c000ec44:	57                   	push   edi
c000ec45:	56                   	push   esi
c000ec46:	53                   	push   ebx
c000ec47:	83 ec 60             	sub    esp,0x60
c000ec4a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec4f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ec55:	83 e0 04             	and    eax,0x4
c000ec58:	0f b6 c0             	movzx  eax,al
c000ec5b:	85 c0                	test   eax,eax
c000ec5d:	0f 84 41 02 00 00    	je     c000eea4 <loadACPITables(unsigned char*)+0x260>
c000ec63:	a0 80 97 02 c0       	mov    al,ds:0xc0029780
c000ec68:	0f b6 c0             	movzx  eax,al
c000ec6b:	85 c0                	test   eax,eax
c000ec6d:	74 79                	je     c000ece8 <loadACPITables(unsigned char*)+0xa4>
c000ec6f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ec73:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ec77:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec7e:	83 e8 24             	sub    eax,0x24
c000ec81:	c1 e8 03             	shr    eax,0x3
c000ec84:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ec88:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ec90:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ec94:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ec98:	0f 8d ba 00 00 00    	jge    c000ed58 <loadACPITables(unsigned char*)+0x114>
c000ec9e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000eca2:	83 c0 24             	add    eax,0x24
c000eca5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000eca9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ecad:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ecb1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ecb5:	c1 e0 03             	shl    eax,0x3
c000ecb8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ecbc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ecc0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ecc3:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecc5:	89 c1                	mov    ecx,eax
c000ecc7:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000eccc:	8d 50 01             	lea    edx,[eax+0x1]
c000eccf:	89 15 6c 95 02 c0    	mov    DWORD PTR ds:0xc002956c,edx
c000ecd5:	89 ca                	mov    edx,ecx
c000ecd7:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ecde:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ece3:	eb ab                	jmp    c000ec90 <loadACPITables(unsigned char*)+0x4c>
c000ece5:	8d 76 00             	lea    esi,[esi+0x0]
c000ece8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ecec:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ecf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ecf7:	83 e8 24             	sub    eax,0x24
c000ecfa:	c1 e8 02             	shr    eax,0x2
c000ecfd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ed01:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ed09:	8d 76 00             	lea    esi,[esi+0x0]
c000ed0c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed10:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ed14:	7d 42                	jge    c000ed58 <loadACPITables(unsigned char*)+0x114>
c000ed16:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed1a:	83 c0 24             	add    eax,0x24
c000ed1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ed21:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed25:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ed29:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed2d:	c1 e0 02             	shl    eax,0x2
c000ed30:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ed34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed38:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ed3a:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ed3f:	8d 50 01             	lea    edx,[eax+0x1]
c000ed42:	89 15 6c 95 02 c0    	mov    DWORD PTR ds:0xc002956c,edx
c000ed48:	89 ca                	mov    edx,ecx
c000ed4a:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ed51:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ed56:	eb b4                	jmp    c000ed0c <loadACPITables(unsigned char*)+0xc8>
c000ed58:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ed60:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ed65:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ed69:	0f 8d 39 01 00 00    	jge    c000eea8 <loadACPITables(unsigned char*)+0x264>
c000ed6f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ed73:	8b 04 c5 84 95 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6a7c]
c000ed7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ed7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed82:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed8a:	25 ff 0f 00 00       	and    eax,0xfff
c000ed8f:	89 c6                	mov    esi,eax
c000ed91:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ed97:	83 ec 0c             	sub    esp,0xc
c000ed9a:	6a 01                	push   0x1
c000ed9c:	e8 54 a8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000eda1:	83 c4 10             	add    esp,0x10
c000eda4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eda8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000edae:	83 ec 0c             	sub    esp,0xc
c000edb1:	6a 01                	push   0x1
c000edb3:	6a 01                	push   0x1
c000edb5:	50                   	push   eax
c000edb6:	52                   	push   edx
c000edb7:	53                   	push   ebx
c000edb8:	e8 4b b1 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000edbd:	83 c4 20             	add    esp,0x20
c000edc0:	09 f0                	or     eax,esi
c000edc2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000edc6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000edca:	c1 e0 03             	shl    eax,0x3
c000edcd:	05 80 95 02 c0       	add    eax,0xc0029580
c000edd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000edd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000edde:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ede6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000edea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000edee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edf2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000edf6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfa:	89 c6                	mov    esi,eax
c000edfc:	89 d7                	mov    edi,edx
c000edfe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ee00:	89 c8                	mov    eax,ecx
c000ee02:	89 fa                	mov    edx,edi
c000ee04:	89 f3                	mov    ebx,esi
c000ee06:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ee0a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ee0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ee1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee21:	05 00 10 00 00       	add    eax,0x1000
c000ee26:	c1 e8 0c             	shr    eax,0xc
c000ee29:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ee2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee31:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ee35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee39:	25 ff 0f 00 00       	and    eax,0xfff
c000ee3e:	89 c6                	mov    esi,eax
c000ee40:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee46:	83 ec 0c             	sub    esp,0xc
c000ee49:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee4d:	e8 a3 a7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ee52:	83 c4 10             	add    esp,0x10
c000ee55:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee59:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ee5f:	83 ec 0c             	sub    esp,0xc
c000ee62:	6a 01                	push   0x1
c000ee64:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ee68:	50                   	push   eax
c000ee69:	52                   	push   edx
c000ee6a:	53                   	push   ebx
c000ee6b:	e8 98 b0 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee70:	83 c4 20             	add    esp,0x20
c000ee73:	09 f0                	or     eax,esi
c000ee75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee7d:	83 ec 0c             	sub    esp,0xc
c000ee80:	50                   	push   eax
c000ee81:	e8 83 aa ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000ee86:	83 c4 10             	add    esp,0x10
c000ee89:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee8d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee91:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ee98:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000ee9d:	e9 be fe ff ff       	jmp    c000ed60 <loadACPITables(unsigned char*)+0x11c>
c000eea2:	66 90                	xchg   ax,ax
c000eea4:	90                   	nop
c000eea5:	8d 76 00             	lea    esi,[esi+0x0]
c000eea8:	83 c4 60             	add    esp,0x60
c000eeab:	5b                   	pop    ebx
c000eeac:	5e                   	pop    esi
c000eead:	5f                   	pop    edi
c000eeae:	c3                   	ret    
c000eeaf:	90                   	nop

c000eeb0 <findRSDT(unsigned char*)>:
c000eeb0:	57                   	push   edi
c000eeb1:	56                   	push   esi
c000eeb2:	53                   	push   ebx
c000eeb3:	83 ec 50             	sub    esp,0x50
c000eeb6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eebb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eec1:	83 e0 04             	and    eax,0x4
c000eec4:	0f b6 c0             	movzx  eax,al
c000eec7:	85 c0                	test   eax,eax
c000eec9:	75 0d                	jne    c000eed8 <findRSDT(unsigned char*)+0x28>
c000eecb:	b8 00 00 00 00       	mov    eax,0x0
c000eed0:	e9 2b 01 00 00       	jmp    c000f000 <findRSDT(unsigned char*)+0x150>
c000eed5:	8d 76 00             	lea    esi,[esi+0x0]
c000eed8:	89 e0                	mov    eax,esp
c000eeda:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eede:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000eee2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000eee6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000eeee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eef2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eef6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eefa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000eefe:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ef02:	89 c6                	mov    esi,eax
c000ef04:	89 d7                	mov    edi,edx
c000ef06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef08:	89 c8                	mov    eax,ecx
c000ef0a:	89 fa                	mov    edx,edi
c000ef0c:	89 f3                	mov    ebx,esi
c000ef0e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000ef12:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ef16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef1a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ef1e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000ef22:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ef2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef32:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef3a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef3e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ef42:	25 ff 0f 00 00       	and    eax,0xfff
c000ef47:	89 c6                	mov    esi,eax
c000ef49:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef4f:	83 ec 0c             	sub    esp,0xc
c000ef52:	6a 02                	push   0x2
c000ef54:	e8 9c a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef59:	83 c4 10             	add    esp,0x10
c000ef5c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ef60:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef66:	83 ec 0c             	sub    esp,0xc
c000ef69:	6a 01                	push   0x1
c000ef6b:	6a 02                	push   0x2
c000ef6d:	50                   	push   eax
c000ef6e:	52                   	push   edx
c000ef6f:	53                   	push   ebx
c000ef70:	e8 93 af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef75:	83 c4 20             	add    esp,0x20
c000ef78:	09 f0                	or     eax,esi
c000ef7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef7e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef82:	25 ff 0f 00 00       	and    eax,0xfff
c000ef87:	89 c6                	mov    esi,eax
c000ef89:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef8f:	83 ec 0c             	sub    esp,0xc
c000ef92:	6a 02                	push   0x2
c000ef94:	e8 5c a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef99:	83 c4 10             	add    esp,0x10
c000ef9c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000efa0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000efa6:	83 ec 0c             	sub    esp,0xc
c000efa9:	6a 01                	push   0x1
c000efab:	6a 02                	push   0x2
c000efad:	50                   	push   eax
c000efae:	52                   	push   edx
c000efaf:	53                   	push   ebx
c000efb0:	e8 53 af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efb5:	83 c4 20             	add    esp,0x20
c000efb8:	09 f0                	or     eax,esi
c000efba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000efbe:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000efc3:	85 c0                	test   eax,eax
c000efc5:	75 11                	jne    c000efd8 <findRSDT(unsigned char*)+0x128>
c000efc7:	c6 05 80 97 02 c0 00 	mov    BYTE PTR ds:0xc0029780,0x0
c000efce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000efd2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efd6:	eb 24                	jmp    c000effc <findRSDT(unsigned char*)+0x14c>
c000efd8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000efdd:	83 f8 02             	cmp    eax,0x2
c000efe0:	75 12                	jne    c000eff4 <findRSDT(unsigned char*)+0x144>
c000efe2:	c6 05 80 97 02 c0 01 	mov    BYTE PTR ds:0xc0029780,0x1
c000efe9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000efed:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000eff1:	eb 09                	jmp    c000effc <findRSDT(unsigned char*)+0x14c>
c000eff3:	90                   	nop
c000eff4:	b8 00 00 00 00       	mov    eax,0x0
c000eff9:	eb 05                	jmp    c000f000 <findRSDT(unsigned char*)+0x150>
c000effb:	90                   	nop
c000effc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f000:	83 c4 50             	add    esp,0x50
c000f003:	5b                   	pop    ebx
c000f004:	5e                   	pop    esi
c000f005:	5f                   	pop    edi
c000f006:	c3                   	ret    
c000f007:	90                   	nop

c000f008 <findDataTable(unsigned char*, char*)>:
c000f008:	83 ec 1c             	sub    esp,0x1c
c000f00b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f010:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f016:	83 e0 04             	and    eax,0x4
c000f019:	0f b6 c0             	movzx  eax,al
c000f01c:	85 c0                	test   eax,eax
c000f01e:	75 08                	jne    c000f028 <findDataTable(unsigned char*, char*)+0x20>
c000f020:	b8 00 00 00 00       	mov    eax,0x0
c000f025:	eb 5d                	jmp    c000f084 <findDataTable(unsigned char*, char*)+0x7c>
c000f027:	90                   	nop
c000f028:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f030:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000f035:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f039:	7d 41                	jge    c000f07c <findDataTable(unsigned char*, char*)+0x74>
c000f03b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f03f:	c1 e0 03             	shl    eax,0x3
c000f042:	05 80 95 02 c0       	add    eax,0xc0029580
c000f047:	83 ec 04             	sub    esp,0x4
c000f04a:	6a 04                	push   0x4
c000f04c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f050:	50                   	push   eax
c000f051:	e8 2a 13 ff ff       	call   c0000380 <memcmp>
c000f056:	83 c4 10             	add    esp,0x10
c000f059:	85 c0                	test   eax,eax
c000f05b:	0f 94 c0             	sete   al
c000f05e:	0f b6 c0             	movzx  eax,al
c000f061:	85 c0                	test   eax,eax
c000f063:	74 0f                	je     c000f074 <findDataTable(unsigned char*, char*)+0x6c>
c000f065:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f069:	8b 04 c5 84 95 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6a7c]
c000f070:	eb 12                	jmp    c000f084 <findDataTable(unsigned char*, char*)+0x7c>
c000f072:	66 90                	xchg   ax,ax
c000f074:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f079:	eb b5                	jmp    c000f030 <findDataTable(unsigned char*, char*)+0x28>
c000f07b:	90                   	nop
c000f07c:	b8 00 00 00 00       	mov    eax,0x0
c000f081:	8d 76 00             	lea    esi,[esi+0x0]
c000f084:	83 c4 1c             	add    esp,0x1c
c000f087:	c3                   	ret    

c000f088 <scanMADT()>:
c000f088:	53                   	push   ebx
c000f089:	83 ec 38             	sub    esp,0x38
c000f08c:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f091:	25 00 04 00 00       	and    eax,0x400
c000f096:	74 14                	je     c000f0ac <scanMADT()+0x24>
c000f098:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f09d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0a3:	83 e2 fb             	and    edx,0xfffffffb
c000f0a6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0ac:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0b1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0b7:	83 e0 04             	and    eax,0x4
c000f0ba:	0f b6 c0             	movzx  eax,al
c000f0bd:	85 c0                	test   eax,eax
c000f0bf:	0f 84 6b 04 00 00    	je     c000f530 <scanMADT()+0x4a8>
c000f0c5:	e8 e2 fa ff ff       	call   c000ebac <findRSDP()>
c000f0ca:	a3 8c 97 02 c0       	mov    ds:0xc002978c,eax
c000f0cf:	a1 8c 97 02 c0       	mov    eax,ds:0xc002978c
c000f0d4:	85 c0                	test   eax,eax
c000f0d6:	75 1c                	jne    c000f0f4 <scanMADT()+0x6c>
c000f0d8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0dd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0e3:	83 e2 fb             	and    edx,0xfffffffb
c000f0e6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0ec:	e9 47 04 00 00       	jmp    c000f538 <scanMADT()+0x4b0>
c000f0f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0f4:	a1 8c 97 02 c0       	mov    eax,ds:0xc002978c
c000f0f9:	83 ec 0c             	sub    esp,0xc
c000f0fc:	50                   	push   eax
c000f0fd:	e8 ae fd ff ff       	call   c000eeb0 <findRSDT(unsigned char*)>
c000f102:	83 c4 10             	add    esp,0x10
c000f105:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000f10a:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f10f:	85 c0                	test   eax,eax
c000f111:	75 19                	jne    c000f12c <scanMADT()+0xa4>
c000f113:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f118:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f11e:	83 e2 fb             	and    edx,0xfffffffb
c000f121:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f127:	e9 0c 04 00 00       	jmp    c000f538 <scanMADT()+0x4b0>
c000f12c:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f131:	83 ec 0c             	sub    esp,0xc
c000f134:	50                   	push   eax
c000f135:	e8 0a fb ff ff       	call   c000ec44 <loadACPITables(unsigned char*)>
c000f13a:	83 c4 10             	add    esp,0x10
c000f13d:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f142:	83 ec 08             	sub    esp,0x8
c000f145:	68 cc 18 02 c0       	push   0xc00218cc
c000f14a:	50                   	push   eax
c000f14b:	e8 b8 fe ff ff       	call   c000f008 <findDataTable(unsigned char*, char*)>
c000f150:	83 c4 10             	add    esp,0x10
c000f153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f157:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f15c:	75 1a                	jne    c000f178 <scanMADT()+0xf0>
c000f15e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f163:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f169:	83 e2 fe             	and    edx,0xfffffffe
c000f16c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f172:	e9 c1 03 00 00       	jmp    c000f538 <scanMADT()+0x4b0>
c000f177:	90                   	nop
c000f178:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f180:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f184:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f187:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f18b:	0f 87 a7 03 00 00    	ja     c000f538 <scanMADT()+0x4b0>
c000f191:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f199:	0f 87 99 03 00 00    	ja     c000f538 <scanMADT()+0x4b0>
c000f19f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1a3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f1a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1ab:	8d 50 01             	lea    edx,[eax+0x1]
c000f1ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1b6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1ba:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f1be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1c2:	8d 50 01             	lea    edx,[eax+0x1]
c000f1c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1cd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1d1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f1d5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f1da:	83 f8 02             	cmp    eax,0x2
c000f1dd:	0f 86 51 03 00 00    	jbe    c000f534 <scanMADT()+0x4ac>
c000f1e3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f1e8:	85 c0                	test   eax,eax
c000f1ea:	75 58                	jne    c000f244 <scanMADT()+0x1bc>
c000f1ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1f0:	8d 50 01             	lea    edx,[eax+0x1]
c000f1f3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1f7:	8a 15 80 99 02 c0    	mov    dl,BYTE PTR ds:0xc0029980
c000f1fd:	0f b6 d2             	movzx  edx,dl
c000f200:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f204:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f208:	88 82 c0 99 02 c0    	mov    BYTE PTR [edx-0x3ffd6640],al
c000f20e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f212:	8d 50 01             	lea    edx,[eax+0x1]
c000f215:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f219:	8a 15 80 99 02 c0    	mov    dl,BYTE PTR ds:0xc0029980
c000f21f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f222:	88 0d 80 99 02 c0    	mov    BYTE PTR ds:0xc0029980,cl
c000f228:	0f b6 d2             	movzx  edx,dl
c000f22b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f22f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f233:	88 82 a0 99 02 c0    	mov    BYTE PTR [edx-0x3ffd6660],al
c000f239:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f23e:	e9 d9 02 00 00       	jmp    c000f51c <scanMADT()+0x494>
c000f243:	90                   	nop
c000f244:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f249:	83 f8 01             	cmp    eax,0x1
c000f24c:	0f 85 1a 01 00 00    	jne    c000f36c <scanMADT()+0x2e4>
c000f252:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f256:	8d 50 01             	lea    edx,[eax+0x1]
c000f259:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f25d:	8a 15 40 98 02 c0    	mov    dl,BYTE PTR ds:0xc0029840
c000f263:	0f b6 d2             	movzx  edx,dl
c000f266:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f26a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f26e:	88 82 60 98 02 c0    	mov    BYTE PTR [edx-0x3ffd67a0],al
c000f274:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f279:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f27d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f281:	01 d0                	add    eax,edx
c000f283:	83 c0 2c             	add    eax,0x2c
c000f286:	8a 00                	mov    al,BYTE PTR [eax]
c000f288:	0f b6 d0             	movzx  edx,al
c000f28b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f28f:	8d 48 01             	lea    ecx,[eax+0x1]
c000f292:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f296:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f29a:	0f b6 c0             	movzx  eax,al
c000f29d:	c1 e0 08             	shl    eax,0x8
c000f2a0:	89 d1                	mov    ecx,edx
c000f2a2:	09 c1                	or     ecx,eax
c000f2a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2a8:	8d 50 02             	lea    edx,[eax+0x2]
c000f2ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2af:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2b3:	0f b6 c0             	movzx  eax,al
c000f2b6:	c1 e0 10             	shl    eax,0x10
c000f2b9:	09 c1                	or     ecx,eax
c000f2bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2bf:	8d 50 03             	lea    edx,[eax+0x3]
c000f2c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2c6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2ca:	0f b6 c0             	movzx  eax,al
c000f2cd:	c1 e0 18             	shl    eax,0x18
c000f2d0:	09 c1                	or     ecx,eax
c000f2d2:	89 ca                	mov    edx,ecx
c000f2d4:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f2d9:	0f b6 c0             	movzx  eax,al
c000f2dc:	89 14 85 80 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6780],edx
c000f2e3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f2e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2f0:	01 d0                	add    eax,edx
c000f2f2:	83 c0 2c             	add    eax,0x2c
c000f2f5:	8a 00                	mov    al,BYTE PTR [eax]
c000f2f7:	0f b6 d0             	movzx  edx,al
c000f2fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2fe:	8d 48 01             	lea    ecx,[eax+0x1]
c000f301:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f305:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f309:	0f b6 c0             	movzx  eax,al
c000f30c:	c1 e0 08             	shl    eax,0x8
c000f30f:	89 d1                	mov    ecx,edx
c000f311:	09 c1                	or     ecx,eax
c000f313:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f317:	8d 50 02             	lea    edx,[eax+0x2]
c000f31a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f31e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f322:	0f b6 c0             	movzx  eax,al
c000f325:	c1 e0 10             	shl    eax,0x10
c000f328:	09 c1                	or     ecx,eax
c000f32a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f32e:	8d 50 03             	lea    edx,[eax+0x3]
c000f331:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f335:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f339:	0f b6 c0             	movzx  eax,al
c000f33c:	c1 e0 18             	shl    eax,0x18
c000f33f:	09 c1                	or     ecx,eax
c000f341:	89 ca                	mov    edx,ecx
c000f343:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f348:	0f b6 c0             	movzx  eax,al
c000f34b:	89 14 85 00 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6700],edx
c000f352:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f357:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f35c:	83 c0 01             	add    eax,0x1
c000f35f:	a2 40 98 02 c0       	mov    ds:0xc0029840,al
c000f364:	e9 b3 01 00 00       	jmp    c000f51c <scanMADT()+0x494>
c000f369:	8d 76 00             	lea    esi,[esi+0x0]
c000f36c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f371:	83 f8 02             	cmp    eax,0x2
c000f374:	0f 85 ea 00 00 00    	jne    c000f464 <scanMADT()+0x3dc>
c000f37a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f37e:	8d 50 01             	lea    edx,[eax+0x1]
c000f381:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f385:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f389:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f38d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f391:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f395:	8d 50 01             	lea    edx,[eax+0x1]
c000f398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f39c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3a0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f3a4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f3a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3b0:	01 d0                	add    eax,edx
c000f3b2:	83 c0 2c             	add    eax,0x2c
c000f3b5:	8a 00                	mov    al,BYTE PTR [eax]
c000f3b7:	0f b6 d0             	movzx  edx,al
c000f3ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3be:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3c5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3c9:	0f b6 c0             	movzx  eax,al
c000f3cc:	c1 e0 08             	shl    eax,0x8
c000f3cf:	89 d1                	mov    ecx,edx
c000f3d1:	09 c1                	or     ecx,eax
c000f3d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3d7:	8d 50 02             	lea    edx,[eax+0x2]
c000f3da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3e2:	0f b6 c0             	movzx  eax,al
c000f3e5:	c1 e0 10             	shl    eax,0x10
c000f3e8:	09 c1                	or     ecx,eax
c000f3ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ee:	8d 50 03             	lea    edx,[eax+0x3]
c000f3f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3f5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3f9:	0f b6 c0             	movzx  eax,al
c000f3fc:	c1 e0 18             	shl    eax,0x18
c000f3ff:	09 c8                	or     eax,ecx
c000f401:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f405:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f40a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f40e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f412:	01 d0                	add    eax,edx
c000f414:	83 c0 2c             	add    eax,0x2c
c000f417:	8a 00                	mov    al,BYTE PTR [eax]
c000f419:	0f b6 d0             	movzx  edx,al
c000f41c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f420:	8d 48 01             	lea    ecx,[eax+0x1]
c000f423:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f427:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f42b:	0f b6 c0             	movzx  eax,al
c000f42e:	c1 e0 08             	shl    eax,0x8
c000f431:	09 d0                	or     eax,edx
c000f433:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f438:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f43d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f442:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f446:	88 90 a8 2f 02 c0    	mov    BYTE PTR [eax-0x3ffdd058],dl
c000f44c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f451:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f456:	66 89 94 00 20 98 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd67e0],dx
c000f45e:	e9 b9 00 00 00       	jmp    c000f51c <scanMADT()+0x494>
c000f463:	90                   	nop
c000f464:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f469:	83 f8 04             	cmp    eax,0x4
c000f46c:	0f 85 9a 00 00 00    	jne    c000f50c <scanMADT()+0x484>
c000f472:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f476:	8d 50 01             	lea    edx,[eax+0x1]
c000f479:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f47d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f481:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f485:	0f b6 c0             	movzx  eax,al
c000f488:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f48c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f490:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f494:	01 d0                	add    eax,edx
c000f496:	83 c0 2c             	add    eax,0x2c
c000f499:	8a 00                	mov    al,BYTE PTR [eax]
c000f49b:	0f b6 d0             	movzx  edx,al
c000f49e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4a2:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4a9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4ad:	0f b6 c0             	movzx  eax,al
c000f4b0:	c1 e0 08             	shl    eax,0x8
c000f4b3:	09 d0                	or     eax,edx
c000f4b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f4b9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f4be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4c2:	8d 50 01             	lea    edx,[eax+0x1]
c000f4c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4cd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4d1:	0f b6 c0             	movzx  eax,al
c000f4d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4dc:	c1 e0 08             	shl    eax,0x8
c000f4df:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f4e3:	89 c1                	mov    ecx,eax
c000f4e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e9:	c1 e0 18             	shl    eax,0x18
c000f4ec:	89 c3                	mov    ebx,eax
c000f4ee:	a1 90 97 02 c0       	mov    eax,ds:0xc0029790
c000f4f3:	8d 50 01             	lea    edx,[eax+0x1]
c000f4f6:	89 15 90 97 02 c0    	mov    DWORD PTR ds:0xc0029790,edx
c000f4fc:	09 d9                	or     ecx,ebx
c000f4fe:	89 ca                	mov    edx,ecx
c000f500:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c000f507:	eb 13                	jmp    c000f51c <scanMADT()+0x494>
c000f509:	8d 76 00             	lea    esi,[esi+0x0]
c000f50c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f511:	83 f8 05             	cmp    eax,0x5
c000f514:	75 06                	jne    c000f51c <scanMADT()+0x494>
c000f516:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f51b:	90                   	nop
c000f51c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f521:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f525:	01 d0                	add    eax,edx
c000f527:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f52b:	e9 50 fc ff ff       	jmp    c000f180 <scanMADT()+0xf8>
c000f530:	90                   	nop
c000f531:	eb 05                	jmp    c000f538 <scanMADT()+0x4b0>
c000f533:	90                   	nop
c000f534:	90                   	nop
c000f535:	8d 76 00             	lea    esi,[esi+0x0]
c000f538:	83 c4 38             	add    esp,0x38
c000f53b:	5b                   	pop    ebx
c000f53c:	c3                   	ret    
c000f53d:	90                   	nop
c000f53e:	66 90                	xchg   ax,ax

c000f540 <ACPI::ACPI()>:
c000f540:	83 ec 0c             	sub    esp,0xc
c000f543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f547:	83 ec 08             	sub    esp,0x8
c000f54a:	68 d1 18 02 c0       	push   0xc00218d1
c000f54f:	50                   	push   eax
c000f550:	e8 3b d2 ff ff       	call   c000c790 <Device::Device(char const*)>
c000f555:	83 c4 10             	add    esp,0x10
c000f558:	ba 24 1a 02 c0       	mov    edx,0xc0021a24
c000f55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f561:	89 10                	mov    DWORD PTR [eax],edx
c000f563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f567:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f572:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f580:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f58a:	e8 f9 fa ff ff       	call   c000f088 <scanMADT()>
c000f58f:	90                   	nop
c000f590:	83 c4 0c             	add    esp,0xc
c000f593:	c3                   	ret    

c000f594 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f594:	83 ec 2c             	sub    esp,0x2c
c000f597:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f59b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f59f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f5a3:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f5a7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f5ac:	88 c8                	mov    al,cl
c000f5ae:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f5b2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f5b7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f5bf:	90                   	nop
c000f5c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5c4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f5ca:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f5ce:	0f 8d b0 00 00 00    	jge    c000f684 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f5d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5dc:	83 c2 2a             	add    edx,0x2a
c000f5df:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f5e3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f5e8:	0f b7 c0             	movzx  eax,ax
c000f5eb:	39 c2                	cmp    edx,eax
c000f5ed:	0f 85 85 00 00 00    	jne    c000f678 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f5f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5fb:	83 c2 2a             	add    edx,0x2a
c000f5fe:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f602:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f607:	0f b6 c0             	movzx  eax,al
c000f60a:	39 c2                	cmp    edx,eax
c000f60c:	75 6a                	jne    c000f678 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f60e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f613:	85 c0                	test   eax,eax
c000f615:	74 3d                	je     c000f654 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f617:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f61b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f61f:	83 c2 2a             	add    edx,0x2a
c000f622:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f626:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f62a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f62d:	39 c2                	cmp    edx,eax
c000f62f:	74 13                	je     c000f644 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f631:	83 ec 0c             	sub    esp,0xc
c000f634:	68 4c 18 02 c0       	push   0xc002184c
c000f639:	e8 33 1b 00 00       	call   c0011171 <KePanic(char const*)>
c000f63e:	83 c4 10             	add    esp,0x10
c000f641:	8d 76 00             	lea    esi,[esi+0x0]
c000f644:	83 ec 0c             	sub    esp,0xc
c000f647:	68 d6 18 02 c0       	push   0xc00218d6
c000f64c:	e8 20 1b 00 00       	call   c0011171 <KePanic(char const*)>
c000f651:	83 c4 10             	add    esp,0x10
c000f654:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f658:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f65c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f660:	83 c2 2a             	add    edx,0x2a
c000f663:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f667:	8b 02                	mov    eax,DWORD PTR [edx]
c000f669:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f66c:	89 01                	mov    DWORD PTR [ecx],eax
c000f66e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f671:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f676:	66 90                	xchg   ax,ax
c000f678:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f67d:	e9 3e ff ff ff       	jmp    c000f5c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f682:	66 90                	xchg   ax,ax
c000f684:	90                   	nop
c000f685:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f689:	83 c4 2c             	add    esp,0x2c
c000f68c:	c2 04 00             	ret    0x4
c000f68f:	90                   	nop

c000f690 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f690:	83 ec 1c             	sub    esp,0x1c
c000f693:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f697:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f69b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f69f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f6a4:	88 c8                	mov    al,cl
c000f6a6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f6aa:	88 d0                	mov    al,dl
c000f6ac:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6b4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6be:	83 c2 2a             	add    edx,0x2a
c000f6c1:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f6c5:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f6c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6cd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6d7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f6da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f6de:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f6e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6e7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6ed:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f6f1:	83 c0 01             	add    eax,0x1
c000f6f4:	88 c1                	mov    cl,al
c000f6f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6fa:	83 c2 2a             	add    edx,0x2a
c000f6fd:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f701:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f705:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f70b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f70f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f712:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f716:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f71a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f71e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f724:	8d 50 01             	lea    edx,[eax+0x1]
c000f727:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f72b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f731:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f735:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f73b:	3d 00 02 00 00       	cmp    eax,0x200
c000f740:	75 12                	jne    c000f754 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f742:	83 ec 0c             	sub    esp,0xc
c000f745:	68 e5 18 02 c0       	push   0xc00218e5
c000f74a:	e8 22 1a 00 00       	call   c0011171 <KePanic(char const*)>
c000f74f:	83 c4 10             	add    esp,0x10
c000f752:	66 90                	xchg   ax,ax
c000f754:	90                   	nop
c000f755:	83 c4 1c             	add    esp,0x1c
c000f758:	c3                   	ret    
c000f759:	90                   	nop
c000f75a:	66 90                	xchg   ax,ax

c000f75c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f75c:	b8 00 00 00 00       	mov    eax,0x0
c000f761:	c3                   	ret    
c000f762:	66 90                	xchg   ax,ax

c000f764 <ACPI::detectPCI()>:
c000f764:	53                   	push   ebx
c000f765:	83 ec 28             	sub    esp,0x28
c000f768:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f76d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f772:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f777:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f77d:	83 e0 04             	and    eax,0x4
c000f780:	0f b6 c0             	movzx  eax,al
c000f783:	85 c0                	test   eax,eax
c000f785:	74 2d                	je     c000f7b4 <ACPI::detectPCI()+0x50>
c000f787:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f78c:	83 ec 08             	sub    esp,0x8
c000f78f:	68 02 19 02 c0       	push   0xc0021902
c000f794:	50                   	push   eax
c000f795:	e8 6e f8 ff ff       	call   c000f008 <findDataTable(unsigned char*, char*)>
c000f79a:	83 c4 10             	add    esp,0x10
c000f79d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f7a1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f7a6:	74 0c                	je     c000f7b4 <ACPI::detectPCI()+0x50>
c000f7a8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7ad:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7b2:	66 90                	xchg   ax,ax
c000f7b4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f7bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7c0:	8a 00                	mov    al,BYTE PTR [eax]
c000f7c2:	0f b6 c0             	movzx  eax,al
c000f7c5:	83 f8 01             	cmp    eax,0x1
c000f7c8:	75 0e                	jne    c000f7d8 <ACPI::detectPCI()+0x74>
c000f7ca:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7cf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7d4:	eb 2e                	jmp    c000f804 <ACPI::detectPCI()+0xa0>
c000f7d6:	66 90                	xchg   ax,ax
c000f7d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7dc:	8a 00                	mov    al,BYTE PTR [eax]
c000f7de:	0f b6 c0             	movzx  eax,al
c000f7e1:	83 f8 02             	cmp    eax,0x2
c000f7e4:	75 1e                	jne    c000f804 <ACPI::detectPCI()+0xa0>
c000f7e6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7eb:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f7f0:	85 c0                	test   eax,eax
c000f7f2:	74 10                	je     c000f804 <ACPI::detectPCI()+0xa0>
c000f7f4:	83 ec 0c             	sub    esp,0xc
c000f7f7:	68 7c 18 02 c0       	push   0xc002187c
c000f7fc:	e8 70 19 00 00       	call   c0011171 <KePanic(char const*)>
c000f801:	83 c4 10             	add    esp,0x10
c000f804:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f808:	83 f0 01             	xor    eax,0x1
c000f80b:	0f b6 c0             	movzx  eax,al
c000f80e:	85 c0                	test   eax,eax
c000f810:	74 46                	je     c000f858 <ACPI::detectPCI()+0xf4>
c000f812:	e8 19 09 ff ff       	call   c0000130 <manualPCIProbe>
c000f817:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f81b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f820:	75 0e                	jne    c000f830 <ACPI::detectPCI()+0xcc>
c000f822:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f827:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f82c:	eb 2a                	jmp    c000f858 <ACPI::detectPCI()+0xf4>
c000f82e:	66 90                	xchg   ax,ax
c000f830:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f835:	75 21                	jne    c000f858 <ACPI::detectPCI()+0xf4>
c000f837:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f83c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f841:	85 c0                	test   eax,eax
c000f843:	74 13                	je     c000f858 <ACPI::detectPCI()+0xf4>
c000f845:	83 ec 0c             	sub    esp,0xc
c000f848:	68 7c 18 02 c0       	push   0xc002187c
c000f84d:	e8 1f 19 00 00       	call   c0011171 <KePanic(char const*)>
c000f852:	83 c4 10             	add    esp,0x10
c000f855:	8d 76 00             	lea    esi,[esi+0x0]
c000f858:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f85d:	85 c0                	test   eax,eax
c000f85f:	0f 84 87 00 00 00    	je     c000f8ec <ACPI::detectPCI()+0x188>
c000f865:	83 ec 0c             	sub    esp,0xc
c000f868:	68 07 19 02 c0       	push   0xc0021907
c000f86d:	e8 2a 12 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c000f872:	83 c4 10             	add    esp,0x10
c000f875:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f87d:	83 ec 0c             	sub    esp,0xc
c000f880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f884:	e8 4a 82 ff ff       	call   c0007ad3 <malloc>
c000f889:	83 c4 10             	add    esp,0x10
c000f88c:	89 c3                	mov    ebx,eax
c000f88e:	83 ec 0c             	sub    esp,0xc
c000f891:	53                   	push   ebx
c000f892:	e8 cb b2 00 00       	call   c001ab62 <PCI::PCI()>
c000f897:	83 c4 10             	add    esp,0x10
c000f89a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f89e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f8a2:	83 ec 08             	sub    esp,0x8
c000f8a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8a9:	50                   	push   eax
c000f8aa:	e8 49 cd ff ff       	call   c000c5f8 <Device::addChild(Device*)>
c000f8af:	83 c4 10             	add    esp,0x10
c000f8b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b8:	83 c0 08             	add    eax,0x8
c000f8bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8bd:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f8c2:	85 d2                	test   edx,edx
c000f8c4:	74 0a                	je     c000f8d0 <ACPI::detectPCI()+0x16c>
c000f8c6:	ba 01 00 00 00       	mov    edx,0x1
c000f8cb:	eb 0b                	jmp    c000f8d8 <ACPI::detectPCI()+0x174>
c000f8cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f8d0:	ba 02 00 00 00       	mov    edx,0x2
c000f8d5:	8d 76 00             	lea    esi,[esi+0x0]
c000f8d8:	6a 00                	push   0x0
c000f8da:	6a 00                	push   0x0
c000f8dc:	52                   	push   edx
c000f8dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8e1:	ff d0                	call   eax
c000f8e3:	83 c4 10             	add    esp,0x10
c000f8e6:	e9 91 00 00 00       	jmp    c000f97c <ACPI::detectPCI()+0x218>
c000f8eb:	90                   	nop
c000f8ec:	83 ec 0c             	sub    esp,0xc
c000f8ef:	68 1f 19 02 c0       	push   0xc002191f
c000f8f4:	e8 a3 11 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c000f8f9:	83 c4 10             	add    esp,0x10
c000f8fc:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f903:	83 ec 0c             	sub    esp,0xc
c000f906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f90a:	e8 c4 81 ff ff       	call   c0007ad3 <malloc>
c000f90f:	83 c4 10             	add    esp,0x10
c000f912:	89 c3                	mov    ebx,eax
c000f914:	83 ec 0c             	sub    esp,0xc
c000f917:	53                   	push   ebx
c000f918:	e8 ed bd 00 00       	call   c001b70a <IDE::IDE()>
c000f91d:	83 c4 10             	add    esp,0x10
c000f920:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f924:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f928:	83 ec 08             	sub    esp,0x8
c000f92b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f92f:	50                   	push   eax
c000f930:	e8 c3 cc ff ff       	call   c000c5f8 <Device::addChild(Device*)>
c000f935:	83 c4 10             	add    esp,0x10
c000f938:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f93c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f946:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f94a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f953:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f957:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f960:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f964:	8b 00                	mov    eax,DWORD PTR [eax]
c000f966:	83 c0 08             	add    eax,0x8
c000f969:	8b 00                	mov    eax,DWORD PTR [eax]
c000f96b:	6a 00                	push   0x0
c000f96d:	6a 00                	push   0x0
c000f96f:	6a 00                	push   0x0
c000f971:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f975:	ff d0                	call   eax
c000f977:	83 c4 10             	add    esp,0x10
c000f97a:	66 90                	xchg   ax,ax
c000f97c:	90                   	nop
c000f97d:	83 c4 28             	add    esp,0x28
c000f980:	5b                   	pop    ebx
c000f981:	c3                   	ret    
c000f982:	66 90                	xchg   ax,ax

c000f984 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f984:	83 ec 1c             	sub    esp,0x1c
c000f987:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f98b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f98e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f992:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f997:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f99c:	83 ec 08             	sub    esp,0x8
c000f99f:	52                   	push   edx
c000f9a0:	50                   	push   eax
c000f9a1:	e8 f4 77 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000f9a6:	83 c4 10             	add    esp,0x10
c000f9a9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f9ad:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f9b2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f9b7:	83 ec 04             	sub    esp,0x4
c000f9ba:	6a 01                	push   0x1
c000f9bc:	52                   	push   edx
c000f9bd:	50                   	push   eax
c000f9be:	e8 ef 78 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f9c3:	83 c4 10             	add    esp,0x10
c000f9c6:	90                   	nop
c000f9c7:	83 c4 1c             	add    esp,0x1c
c000f9ca:	c3                   	ret    
c000f9cb:	90                   	nop

c000f9cc <ACPI::sleep()>:
c000f9cc:	83 ec 0c             	sub    esp,0xc
c000f9cf:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c000f9d4:	85 c0                	test   eax,eax
c000f9d6:	74 08                	je     c000f9e0 <ACPI::sleep()+0x14>
c000f9d8:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c000f9dd:	ff d0                	call   eax
c000f9df:	90                   	nop
c000f9e0:	90                   	nop
c000f9e1:	83 c4 0c             	add    esp,0xc
c000f9e4:	c3                   	ret    
c000f9e5:	90                   	nop
c000f9e6:	66 90                	xchg   ax,ax

c000f9e8 <ACPI::open(int, int, void*)>:
c000f9e8:	55                   	push   ebp
c000f9e9:	89 e5                	mov    ebp,esp
c000f9eb:	53                   	push   ebx
c000f9ec:	81 ec 74 01 00 00    	sub    esp,0x174
c000f9f2:	83 ec 0c             	sub    esp,0xc
c000f9f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f9f8:	e8 67 fd ff ff       	call   c000f764 <ACPI::detectPCI()>
c000f9fd:	83 c4 10             	add    esp,0x10
c000fa00:	83 ec 0c             	sub    esp,0xc
c000fa03:	68 a4 18 02 c0       	push   0xc00218a4
c000fa08:	e8 8f 10 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c000fa0d:	83 c4 10             	add    esp,0x10
c000fa10:	b8 4c 05 00 00       	mov    eax,0x54c
c000fa15:	8a 00                	mov    al,BYTE PTR [eax]
c000fa17:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fa1a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fa1e:	83 f8 01             	cmp    eax,0x1
c000fa21:	75 15                	jne    c000fa38 <ACPI::open(int, int, void*)+0x50>
c000fa23:	83 ec 0c             	sub    esp,0xc
c000fa26:	68 14 12 02 c0       	push   0xc0021214
c000fa2b:	e8 56 4b 00 00       	call   c0014586 <Thr::loadKernelSymbolTable(char const*)>
c000fa30:	83 c4 10             	add    esp,0x10
c000fa33:	eb 33                	jmp    c000fa68 <ACPI::open(int, int, void*)+0x80>
c000fa35:	8d 76 00             	lea    esi,[esi+0x0]
c000fa38:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fa3c:	3d bb 00 00 00       	cmp    eax,0xbb
c000fa41:	75 15                	jne    c000fa58 <ACPI::open(int, int, void*)+0x70>
c000fa43:	83 ec 0c             	sub    esp,0xc
c000fa46:	68 34 19 02 c0       	push   0xc0021934
c000fa4b:	e8 36 4b 00 00       	call   c0014586 <Thr::loadKernelSymbolTable(char const*)>
c000fa50:	83 c4 10             	add    esp,0x10
c000fa53:	eb 13                	jmp    c000fa68 <ACPI::open(int, int, void*)+0x80>
c000fa55:	8d 76 00             	lea    esi,[esi+0x0]
c000fa58:	83 ec 0c             	sub    esp,0xc
c000fa5b:	68 52 19 02 c0       	push   0xc0021952
c000fa60:	e8 0c 17 00 00       	call   c0011171 <KePanic(char const*)>
c000fa65:	83 c4 10             	add    esp,0x10
c000fa68:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fa6c:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fa73:	83 ec 0c             	sub    esp,0xc
c000fa76:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fa79:	e8 55 80 ff ff       	call   c0007ad3 <malloc>
c000fa7e:	83 c4 10             	add    esp,0x10
c000fa81:	89 c3                	mov    ebx,eax
c000fa83:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fa88:	83 ec 04             	sub    esp,0x4
c000fa8b:	50                   	push   eax
c000fa8c:	68 6c 19 02 c0       	push   0xc002196c
c000fa91:	53                   	push   ebx
c000fa92:	e8 51 bc ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c000fa97:	83 c4 10             	add    esp,0x10
c000fa9a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fa9d:	83 ec 08             	sub    esp,0x8
c000faa0:	6a 01                	push   0x1
c000faa2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000faa5:	e8 fa bc ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c000faaa:	83 c4 10             	add    esp,0x10
c000faad:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fab0:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fab4:	75 12                	jne    c000fac8 <ACPI::open(int, int, void*)+0xe0>
c000fab6:	83 ec 0c             	sub    esp,0xc
c000fab9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fabc:	e8 41 bd ff ff       	call   c000b802 <File::close()>
c000fac1:	83 c4 10             	add    esp,0x10
c000fac4:	eb 06                	jmp    c000facc <ACPI::open(int, int, void*)+0xe4>
c000fac6:	66 90                	xchg   ax,ax
c000fac8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000facc:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fad0:	74 16                	je     c000fae8 <ACPI::open(int, int, void*)+0x100>
c000fad2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fad5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fad7:	83 c0 08             	add    eax,0x8
c000fada:	8b 00                	mov    eax,DWORD PTR [eax]
c000fadc:	83 ec 0c             	sub    esp,0xc
c000fadf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fae2:	ff d0                	call   eax
c000fae4:	83 c4 10             	add    esp,0x10
c000fae7:	90                   	nop
c000fae8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000faeb:	83 f0 01             	xor    eax,0x1
c000faee:	0f b6 c0             	movzx  eax,al
c000faf1:	85 c0                	test   eax,eax
c000faf3:	74 3b                	je     c000fb30 <ACPI::open(int, int, void*)+0x148>
c000faf5:	83 ec 0c             	sub    esp,0xc
c000faf8:	68 8a 19 02 c0       	push   0xc002198a
c000fafd:	e8 9a 0f 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c000fb02:	83 c4 10             	add    esp,0x10
c000fb05:	83 ec 04             	sub    esp,0x4
c000fb08:	6a 0c                	push   0xc
c000fb0a:	68 a5 19 02 c0       	push   0xc00219a5
c000fb0f:	68 b6 19 02 c0       	push   0xc00219b6
c000fb14:	e8 19 3d 00 00       	call   c0013832 <Reg::readIntWithDefault(char*, char*, int)>
c000fb19:	83 c4 10             	add    esp,0x10
c000fb1c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fb1f:	83 ec 0c             	sub    esp,0xc
c000fb22:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fb25:	e8 f0 9c ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fb2a:	83 c4 10             	add    esp,0x10
c000fb2d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb30:	83 ec 0c             	sub    esp,0xc
c000fb33:	68 15 05 02 c0       	push   0xc0020515
c000fb38:	e8 5f 0f 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb43:	83 ec 08             	sub    esp,0x8
c000fb46:	6a 13                	push   0x13
c000fb48:	50                   	push   eax
c000fb49:	e8 c2 cd ff ff       	call   c000c910 <getDevicesOfType(DeviceType)>
c000fb4e:	83 c4 0c             	add    esp,0xc
c000fb51:	8d 76 00             	lea    esi,[esi+0x0]
c000fb54:	83 ec 0c             	sub    esp,0xc
c000fb57:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb5a:	50                   	push   eax
c000fb5b:	e8 b0 fd 00 00       	call   c001f910 <LinkedList<Device>::isEmpty()>
c000fb60:	83 c4 10             	add    esp,0x10
c000fb63:	83 f0 01             	xor    eax,0x1
c000fb66:	0f b6 c0             	movzx  eax,al
c000fb69:	85 c0                	test   eax,eax
c000fb6b:	0f 84 1f 01 00 00    	je     c000fc90 <ACPI::open(int, int, void*)+0x2a8>
c000fb71:	83 ec 0c             	sub    esp,0xc
c000fb74:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb77:	50                   	push   eax
c000fb78:	e8 af fd 00 00       	call   c001f92c <LinkedList<Device>::getFirstElement()>
c000fb7d:	83 c4 10             	add    esp,0x10
c000fb80:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fb83:	83 ec 0c             	sub    esp,0xc
c000fb86:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb89:	50                   	push   eax
c000fb8a:	e8 a5 fd 00 00       	call   c001f934 <LinkedList<Device>::removeFirst()>
c000fb8f:	83 c4 10             	add    esp,0x10
c000fb92:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fb95:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fb98:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fb9b:	b8 24 00 00 00       	mov    eax,0x24
c000fba0:	83 e0 fc             	and    eax,0xfffffffc
c000fba3:	89 c3                	mov    ebx,eax
c000fba5:	b8 00 00 00 00       	mov    eax,0x0
c000fbaa:	66 90                	xchg   ax,ax
c000fbac:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fbb3:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000fbba:	83 c0 04             	add    eax,0x4
c000fbbd:	39 d8                	cmp    eax,ebx
c000fbbf:	72 eb                	jb     c000fbac <ACPI::open(int, int, void*)+0x1c4>
c000fbc1:	83 ec 08             	sub    esp,0x8
c000fbc4:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000fbca:	50                   	push   eax
c000fbcb:	83 ec 24             	sub    esp,0x24
c000fbce:	89 e1                	mov    ecx,esp
c000fbd0:	b8 24 00 00 00       	mov    eax,0x24
c000fbd5:	83 e0 fc             	and    eax,0xfffffffc
c000fbd8:	89 c3                	mov    ebx,eax
c000fbda:	b8 00 00 00 00       	mov    eax,0x0
c000fbdf:	90                   	nop
c000fbe0:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000fbe7:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000fbea:	83 c0 04             	add    eax,0x4
c000fbed:	39 d8                	cmp    eax,ebx
c000fbef:	72 ef                	jb     c000fbe0 <ACPI::open(int, int, void*)+0x1f8>
c000fbf1:	e8 54 b4 00 00       	call   c001b04a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fbf6:	83 c4 30             	add    esp,0x30
c000fbf9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000fbfc:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000fc00:	0f 84 4e ff ff ff    	je     c000fb54 <ACPI::open(int, int, void*)+0x16c>
c000fc06:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000fc0d:	83 ec 0c             	sub    esp,0xc
c000fc10:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000fc13:	e8 bb 7e ff ff       	call   c0007ad3 <malloc>
c000fc18:	83 c4 10             	add    esp,0x10
c000fc1b:	89 c3                	mov    ebx,eax
c000fc1d:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fc22:	83 ec 04             	sub    esp,0x4
c000fc25:	50                   	push   eax
c000fc26:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fc29:	53                   	push   ebx
c000fc2a:	e8 b9 ba ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c000fc2f:	83 c4 10             	add    esp,0x10
c000fc32:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000fc35:	83 ec 0c             	sub    esp,0xc
c000fc38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fc3b:	e8 28 be ff ff       	call   c000ba68 <File::exists()>
c000fc40:	83 c4 10             	add    esp,0x10
c000fc43:	0f b6 c0             	movzx  eax,al
c000fc46:	85 c0                	test   eax,eax
c000fc48:	74 22                	je     c000fc6c <ACPI::open(int, int, void*)+0x284>
c000fc4a:	83 ec 08             	sub    esp,0x8
c000fc4d:	6a 01                	push   0x1
c000fc4f:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fc52:	e8 b1 53 00 00       	call   c0015008 <Thr::loadDLL(char const*, bool)>
c000fc57:	83 c4 10             	add    esp,0x10
c000fc5a:	83 ec 08             	sub    esp,0x8
c000fc5d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fc60:	50                   	push   eax
c000fc61:	e8 e2 55 00 00       	call   c0015248 <Thr::executeDLL(unsigned long, void*)>
c000fc66:	83 c4 10             	add    esp,0x10
c000fc69:	8d 76 00             	lea    esi,[esi+0x0]
c000fc6c:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000fc70:	0f 84 de fe ff ff    	je     c000fb54 <ACPI::open(int, int, void*)+0x16c>
c000fc76:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000fc79:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc7b:	83 c0 08             	add    eax,0x8
c000fc7e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc80:	83 ec 0c             	sub    esp,0xc
c000fc83:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fc86:	ff d0                	call   eax
c000fc88:	83 c4 10             	add    esp,0x10
c000fc8b:	e9 c4 fe ff ff       	jmp    c000fb54 <ACPI::open(int, int, void*)+0x16c>
c000fc90:	83 ec 0c             	sub    esp,0xc
c000fc93:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc96:	50                   	push   eax
c000fc97:	e8 70 fc 00 00       	call   c001f90c <LinkedList<Device>::~LinkedList()>
c000fc9c:	83 c4 10             	add    esp,0x10
c000fc9f:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fca5:	83 ec 08             	sub    esp,0x8
c000fca8:	6a 01                	push   0x1
c000fcaa:	68 bd 19 02 c0       	push   0xc00219bd
c000fcaf:	e8 54 53 00 00       	call   c0015008 <Thr::loadDLL(char const*, bool)>
c000fcb4:	83 c4 10             	add    esp,0x10
c000fcb7:	83 ec 08             	sub    esp,0x8
c000fcba:	53                   	push   ebx
c000fcbb:	50                   	push   eax
c000fcbc:	e8 87 55 00 00       	call   c0015248 <Thr::executeDLL(unsigned long, void*)>
c000fcc1:	83 c4 10             	add    esp,0x10
c000fcc4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fcc9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fccf:	83 e0 04             	and    eax,0x4
c000fcd2:	0f b6 c0             	movzx  eax,al
c000fcd5:	85 c0                	test   eax,eax
c000fcd7:	0f 84 e3 00 00 00    	je     c000fdc0 <ACPI::open(int, int, void*)+0x3d8>
c000fcdd:	83 ec 0c             	sub    esp,0xc
c000fce0:	68 da 19 02 c0       	push   0xc00219da
c000fce5:	e8 b2 0d 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c000fcea:	83 c4 10             	add    esp,0x10
c000fced:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000fcf4:	83 ec 0c             	sub    esp,0xc
c000fcf7:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000fcfa:	e8 d4 7d ff ff       	call   c0007ad3 <malloc>
c000fcff:	83 c4 10             	add    esp,0x10
c000fd02:	89 c3                	mov    ebx,eax
c000fd04:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fd09:	83 ec 04             	sub    esp,0x4
c000fd0c:	50                   	push   eax
c000fd0d:	68 f7 19 02 c0       	push   0xc00219f7
c000fd12:	53                   	push   ebx
c000fd13:	e8 d0 b9 ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c000fd18:	83 c4 10             	add    esp,0x10
c000fd1b:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000fd1e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fd22:	74 1c                	je     c000fd40 <ACPI::open(int, int, void*)+0x358>
c000fd24:	83 ec 0c             	sub    esp,0xc
c000fd27:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fd2a:	e8 39 bd ff ff       	call   c000ba68 <File::exists()>
c000fd2f:	83 c4 10             	add    esp,0x10
c000fd32:	0f b6 c0             	movzx  eax,al
c000fd35:	85 c0                	test   eax,eax
c000fd37:	74 07                	je     c000fd40 <ACPI::open(int, int, void*)+0x358>
c000fd39:	b0 01                	mov    al,0x1
c000fd3b:	eb 07                	jmp    c000fd44 <ACPI::open(int, int, void*)+0x35c>
c000fd3d:	8d 76 00             	lea    esi,[esi+0x0]
c000fd40:	b0 00                	mov    al,0x0
c000fd42:	66 90                	xchg   ax,ax
c000fd44:	0f b6 c0             	movzx  eax,al
c000fd47:	85 c0                	test   eax,eax
c000fd49:	74 21                	je     c000fd6c <ACPI::open(int, int, void*)+0x384>
c000fd4b:	83 ec 08             	sub    esp,0x8
c000fd4e:	6a 01                	push   0x1
c000fd50:	68 f7 19 02 c0       	push   0xc00219f7
c000fd55:	e8 ae 52 00 00       	call   c0015008 <Thr::loadDLL(char const*, bool)>
c000fd5a:	83 c4 10             	add    esp,0x10
c000fd5d:	83 ec 08             	sub    esp,0x8
c000fd60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fd63:	50                   	push   eax
c000fd64:	e8 df 54 00 00       	call   c0015248 <Thr::executeDLL(unsigned long, void*)>
c000fd69:	83 c4 10             	add    esp,0x10
c000fd6c:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fd70:	74 1e                	je     c000fd90 <ACPI::open(int, int, void*)+0x3a8>
c000fd72:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fd76:	74 18                	je     c000fd90 <ACPI::open(int, int, void*)+0x3a8>
c000fd78:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000fd7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd7d:	83 c0 08             	add    eax,0x8
c000fd80:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd82:	83 ec 0c             	sub    esp,0xc
c000fd85:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fd88:	ff d0                	call   eax
c000fd8a:	83 c4 10             	add    esp,0x10
c000fd8d:	8d 76 00             	lea    esi,[esi+0x0]
c000fd90:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000fd95:	83 ec 08             	sub    esp,0x8
c000fd98:	68 14 1a 02 c0       	push   0xc0021a14
c000fd9d:	50                   	push   eax
c000fd9e:	e8 65 f2 ff ff       	call   c000f008 <findDataTable(unsigned char*, char*)>
c000fda3:	83 c4 10             	add    esp,0x10
c000fda6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000fda9:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000fdad:	74 11                	je     c000fdc0 <ACPI::open(int, int, void*)+0x3d8>
c000fdaf:	83 ec 08             	sub    esp,0x8
c000fdb2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000fdb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fdb8:	e8 c7 fb ff ff       	call   c000f984 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fdbd:	83 c4 10             	add    esp,0x10
c000fdc0:	b8 00 00 00 00       	mov    eax,0x0
c000fdc5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fdc8:	c9                   	leave  
c000fdc9:	c3                   	ret    

c000fdca <CPU::close(int, int, void*)>:
c000fdca:	31 c0                	xor    eax,eax
c000fdcc:	c3                   	ret    
c000fdcd:	90                   	nop

c000fdce <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fdce:	60                   	pusha  
c000fdcf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fdd3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdd7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fddb:	9c                   	pushf  
c000fddc:	fa                   	cli    
c000fddd:	0f 09                	wbinvd 
c000fddf:	0f 30                	wrmsr  
c000fde1:	9d                   	popf   
c000fde2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fde6:	89 02                	mov    DWORD PTR [edx],eax
c000fde8:	61                   	popa   
c000fde9:	c3                   	ret    

c000fdea <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000fdea:	60                   	pusha  
c000fdeb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fdef:	9c                   	pushf  
c000fdf0:	fa                   	cli    
c000fdf1:	0f 09                	wbinvd 
c000fdf3:	31 c0                	xor    eax,eax
c000fdf5:	31 d2                	xor    edx,edx
c000fdf7:	0f 32                	rdmsr  
c000fdf9:	9d                   	popf   
c000fdfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdfe:	89 02                	mov    DWORD PTR [edx],eax
c000fe00:	61                   	popa   
c000fe01:	c3                   	ret    

c000fe02 <CPU::AMD_K6_writeback(int, int, int)>:
c000fe02:	56                   	push   esi
c000fe03:	53                   	push   ebx
c000fe04:	83 ec 10             	sub    esp,0x10
c000fe07:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000fe0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe10:	75 5d                	jne    c000fe6f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe12:	83 f8 08             	cmp    eax,0x8
c000fe15:	75 09                	jne    c000fe20 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000fe17:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000fe1c:	7e 13                	jle    c000fe31 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fe1e:	eb 30                	jmp    c000fe50 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fe20:	83 f8 06             	cmp    eax,0x6
c000fe23:	7c 4a                	jl     c000fe6f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe25:	83 f8 07             	cmp    eax,0x7
c000fe28:	7e 07                	jle    c000fe31 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fe2a:	83 f8 09             	cmp    eax,0x9
c000fe2d:	74 21                	je     c000fe50 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fe2f:	eb 3e                	jmp    c000fe6f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe31:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000fe37:	89 e6                	mov    esi,esp
c000fe39:	56                   	push   esi
c000fe3a:	68 82 00 00 c0       	push   0xc0000082
c000fe3f:	e8 a6 ff ff ff       	call   c000fdea <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fe44:	c1 eb 15             	shr    ebx,0x15
c000fe47:	56                   	push   esi
c000fe48:	83 e3 7e             	and    ebx,0x7e
c000fe4b:	6a 00                	push   0x0
c000fe4d:	53                   	push   ebx
c000fe4e:	eb 12                	jmp    c000fe62 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000fe50:	89 e3                	mov    ebx,esp
c000fe52:	53                   	push   ebx
c000fe53:	68 82 00 00 c0       	push   0xc0000082
c000fe58:	e8 8d ff ff ff       	call   c000fdea <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fe5d:	53                   	push   ebx
c000fe5e:	6a 00                	push   0x0
c000fe60:	6a 00                	push   0x0
c000fe62:	68 82 00 00 c0       	push   0xc0000082
c000fe67:	e8 62 ff ff ff       	call   c000fdce <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000fe6c:	83 c4 18             	add    esp,0x18
c000fe6f:	83 c4 10             	add    esp,0x10
c000fe72:	5b                   	pop    ebx
c000fe73:	5e                   	pop    esi
c000fe74:	c3                   	ret    
c000fe75:	90                   	nop

c000fe76 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000fe76:	55                   	push   ebp
c000fe77:	57                   	push   edi
c000fe78:	56                   	push   esi
c000fe79:	53                   	push   ebx
c000fe7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe7e:	39 05 b8 2f 02 c0    	cmp    DWORD PTR ds:0xc0022fb8,eax
c000fe84:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000fe88:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fe8c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000fe90:	75 23                	jne    c000feb5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000fe92:	a1 ec 99 02 c0       	mov    eax,ds:0xc00299ec
c000fe97:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fe9b:	89 06                	mov    DWORD PTR [esi],eax
c000fe9d:	a1 e8 99 02 c0       	mov    eax,ds:0xc00299e8
c000fea2:	89 07                	mov    DWORD PTR [edi],eax
c000fea4:	a1 e4 99 02 c0       	mov    eax,ds:0xc00299e4
c000fea9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000feac:	a1 e0 99 02 c0       	mov    eax,ds:0xc00299e0
c000feb1:	89 02                	mov    DWORD PTR [edx],eax
c000feb3:	eb 3f                	jmp    c000fef4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000feb5:	31 c9                	xor    ecx,ecx
c000feb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000febb:	0f a2                	cpuid  
c000febd:	89 06                	mov    DWORD PTR [esi],eax
c000febf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fec3:	89 1f                	mov    DWORD PTR [edi],ebx
c000fec5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000fec8:	89 10                	mov    DWORD PTR [eax],edx
c000feca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fece:	a3 b8 2f 02 c0       	mov    ds:0xc0022fb8,eax
c000fed3:	8b 06                	mov    eax,DWORD PTR [esi]
c000fed5:	a3 ec 99 02 c0       	mov    ds:0xc00299ec,eax
c000feda:	8b 07                	mov    eax,DWORD PTR [edi]
c000fedc:	a3 e8 99 02 c0       	mov    ds:0xc00299e8,eax
c000fee1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fee4:	a3 e4 99 02 c0       	mov    ds:0xc00299e4,eax
c000fee9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000feed:	8b 00                	mov    eax,DWORD PTR [eax]
c000feef:	a3 e0 99 02 c0       	mov    ds:0xc00299e0,eax
c000fef4:	5b                   	pop    ebx
c000fef5:	5e                   	pop    esi
c000fef6:	5f                   	pop    edi
c000fef7:	5d                   	pop    ebp
c000fef8:	c3                   	ret    
c000fef9:	90                   	nop

c000fefa <CPU::cpuidCheckEDX(unsigned int)>:
c000fefa:	83 ec 10             	sub    esp,0x10
c000fefd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff01:	50                   	push   eax
c000ff02:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff06:	50                   	push   eax
c000ff07:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff0b:	50                   	push   eax
c000ff0c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff10:	50                   	push   eax
c000ff11:	6a 01                	push   0x1
c000ff13:	e8 5e ff ff ff       	call   c000fe76 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff1c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000ff20:	0f 95 c0             	setne  al
c000ff23:	83 c4 24             	add    esp,0x24
c000ff26:	c3                   	ret    
c000ff27:	90                   	nop

c000ff28 <CPU::cpuidCheckECX(unsigned int)>:
c000ff28:	83 ec 10             	sub    esp,0x10
c000ff2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff2f:	50                   	push   eax
c000ff30:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff34:	50                   	push   eax
c000ff35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff39:	50                   	push   eax
c000ff3a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff3e:	50                   	push   eax
c000ff3f:	6a 01                	push   0x1
c000ff41:	e8 30 ff ff ff       	call   c000fe76 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff4a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000ff4e:	0f 95 c0             	setne  al
c000ff51:	83 c4 24             	add    esp,0x24
c000ff54:	c3                   	ret    
c000ff55:	90                   	nop

c000ff56 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000ff56:	83 ec 10             	sub    esp,0x10
c000ff59:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff5d:	50                   	push   eax
c000ff5e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff62:	50                   	push   eax
c000ff63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff67:	50                   	push   eax
c000ff68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff6c:	50                   	push   eax
c000ff6d:	6a 07                	push   0x7
c000ff6f:	e8 02 ff ff ff       	call   c000fe76 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff78:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000ff7c:	0f 95 c0             	setne  al
c000ff7f:	83 c4 24             	add    esp,0x24
c000ff82:	c3                   	ret    
c000ff83:	90                   	nop

c000ff84 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000ff84:	83 ec 10             	sub    esp,0x10
c000ff87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff8b:	50                   	push   eax
c000ff8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff90:	50                   	push   eax
c000ff91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff95:	50                   	push   eax
c000ff96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff9a:	50                   	push   eax
c000ff9b:	6a 07                	push   0x7
c000ff9d:	e8 d4 fe ff ff       	call   c000fe76 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffa2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffa6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000ffaa:	0f 95 c0             	setne  al
c000ffad:	83 c4 24             	add    esp,0x24
c000ffb0:	c3                   	ret    
c000ffb1:	90                   	nop

c000ffb2 <CPU::CPU()>:
c000ffb2:	83 ec 0c             	sub    esp,0xc
c000ffb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffb9:	83 ec 08             	sub    esp,0x8
c000ffbc:	68 39 1b 02 c0       	push   0xc0021b39
c000ffc1:	50                   	push   eax
c000ffc2:	e8 c9 c7 ff ff       	call   c000c790 <Device::Device(char const*)>
c000ffc7:	83 c4 10             	add    esp,0x10
c000ffca:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c000ffcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd3:	89 10                	mov    DWORD PTR [eax],edx
c000ffd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000ffe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe7:	05 78 01 00 00       	add    eax,0x178
c000ffec:	83 ec 0c             	sub    esp,0xc
c000ffef:	50                   	push   eax
c000fff0:	e8 87 73 ff ff       	call   c000737c <GDT::GDT()>
c000fff5:	83 c4 10             	add    esp,0x10
c000fff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fffc:	05 7c 09 00 00       	add    eax,0x97c
c0010001:	83 ec 0c             	sub    esp,0xc
c0010004:	50                   	push   eax
c0010005:	e8 c2 75 ff ff       	call   c00075cc <IDT::IDT()>
c001000a:	83 c4 10             	add    esp,0x10
c001000d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010011:	05 7c 11 00 00       	add    eax,0x117c
c0010016:	83 ec 0c             	sub    esp,0xc
c0010019:	50                   	push   eax
c001001a:	e8 0d 8f ff ff       	call   c0008f2c <TSS::TSS()>
c001001f:	83 c4 10             	add    esp,0x10
c0010022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010026:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001002d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010031:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001003b:	90                   	nop
c001003c:	83 c4 0c             	add    esp,0xc
c001003f:	c3                   	ret    

c0010040 <CPU::displayFeatures()>:
c0010040:	c3                   	ret    
c0010041:	90                   	nop

c0010042 <CPU::detectFeatures()>:
c0010042:	55                   	push   ebp
c0010043:	57                   	push   edi
c0010044:	56                   	push   esi
c0010045:	53                   	push   ebx
c0010046:	83 ec 30             	sub    esp,0x30
c0010049:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001004d:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010057:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001005d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010064:	6a 0d                	push   0xd
c0010066:	6a 00                	push   0x0
c0010068:	55                   	push   ebp
c0010069:	e8 82 04 ff ff       	call   c00004f0 <memset>
c001006e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010073:	83 c4 10             	add    esp,0x10
c0010076:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001007d:	0f 84 db 05 00 00    	je     c001065e <CPU::detectFeatures()+0x61c>
c0010083:	83 ec 0c             	sub    esp,0xc
c0010086:	89 ef                	mov    edi,ebp
c0010088:	6a 10                	push   0x10
c001008a:	e8 6b fe ff ff       	call   c000fefa <CPU::cpuidCheckEDX(unsigned int)>
c001008f:	83 e0 01             	and    eax,0x1
c0010092:	8d 14 00             	lea    edx,[eax+eax*1]
c0010095:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001009b:	83 e0 fd             	and    eax,0xfffffffd
c001009e:	09 d0                	or     eax,edx
c00100a0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00100a6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00100ad:	e8 48 fe ff ff       	call   c000fefa <CPU::cpuidCheckEDX(unsigned int)>
c00100b2:	83 e0 01             	and    eax,0x1
c00100b5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00100bc:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00100c2:	83 e0 fb             	and    eax,0xfffffffb
c00100c5:	09 d0                	or     eax,edx
c00100c7:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00100cd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00100d4:	e8 21 fe ff ff       	call   c000fefa <CPU::cpuidCheckEDX(unsigned int)>
c00100d9:	83 e0 01             	and    eax,0x1
c00100dc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00100e3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00100e9:	83 e0 f7             	and    eax,0xfffffff7
c00100ec:	09 d0                	or     eax,edx
c00100ee:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00100f4:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00100fb:	e8 fa fd ff ff       	call   c000fefa <CPU::cpuidCheckEDX(unsigned int)>
c0010100:	83 e0 01             	and    eax,0x1
c0010103:	c1 e0 04             	shl    eax,0x4
c0010106:	89 c2                	mov    edx,eax
c0010108:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001010e:	83 e0 ef             	and    eax,0xffffffef
c0010111:	09 d0                	or     eax,edx
c0010113:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010119:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010120:	e8 d5 fd ff ff       	call   c000fefa <CPU::cpuidCheckEDX(unsigned int)>
c0010125:	83 e0 01             	and    eax,0x1
c0010128:	c1 e0 05             	shl    eax,0x5
c001012b:	89 c2                	mov    edx,eax
c001012d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010133:	83 e0 df             	and    eax,0xffffffdf
c0010136:	09 d0                	or     eax,edx
c0010138:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001013e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010145:	e8 b0 fd ff ff       	call   c000fefa <CPU::cpuidCheckEDX(unsigned int)>
c001014a:	83 e0 01             	and    eax,0x1
c001014d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010150:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010156:	83 e0 fd             	and    eax,0xfffffffd
c0010159:	09 d0                	or     eax,edx
c001015b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010161:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010168:	e8 8d fd ff ff       	call   c000fefa <CPU::cpuidCheckEDX(unsigned int)>
c001016d:	83 e0 01             	and    eax,0x1
c0010170:	c1 e0 06             	shl    eax,0x6
c0010173:	89 c2                	mov    edx,eax
c0010175:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001017b:	83 e0 bf             	and    eax,0xffffffbf
c001017e:	09 d0                	or     eax,edx
c0010180:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010186:	58                   	pop    eax
c0010187:	8d 44 24 28          	lea    eax,[esp+0x28]
c001018b:	50                   	push   eax
c001018c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010190:	50                   	push   eax
c0010191:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010195:	56                   	push   esi
c0010196:	8d 44 24 28          	lea    eax,[esp+0x28]
c001019a:	50                   	push   eax
c001019b:	6a 00                	push   0x0
c001019d:	e8 d4 fc ff ff       	call   c000fe76 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00101a2:	b8 04 00 00 00       	mov    eax,0x4
c00101a7:	89 c1                	mov    ecx,eax
c00101a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101ab:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00101b1:	89 c1                	mov    ecx,eax
c00101b3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00101b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101b9:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00101bf:	89 c1                	mov    ecx,eax
c00101c1:	8d 74 24 38          	lea    esi,[esp+0x38]
c00101c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101c7:	83 c4 18             	add    esp,0x18
c00101ca:	68 48 1a 02 c0       	push   0xc0021a48
c00101cf:	55                   	push   ebp
c00101d0:	e8 ab 05 ff ff       	call   c0000780 <strcmp>
c00101d5:	83 c4 10             	add    esp,0x10
c00101d8:	85 c0                	test   eax,eax
c00101da:	75 0f                	jne    c00101eb <CPU::detectFeatures()+0x1a9>
c00101dc:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00101e6:	e9 22 02 00 00       	jmp    c001040d <CPU::detectFeatures()+0x3cb>
c00101eb:	50                   	push   eax
c00101ec:	50                   	push   eax
c00101ed:	68 55 1a 02 c0       	push   0xc0021a55
c00101f2:	55                   	push   ebp
c00101f3:	e8 88 05 ff ff       	call   c0000780 <strcmp>
c00101f8:	83 c4 10             	add    esp,0x10
c00101fb:	85 c0                	test   eax,eax
c00101fd:	74 dd                	je     c00101dc <CPU::detectFeatures()+0x19a>
c00101ff:	50                   	push   eax
c0010200:	50                   	push   eax
c0010201:	68 62 1a 02 c0       	push   0xc0021a62
c0010206:	55                   	push   ebp
c0010207:	e8 74 05 ff ff       	call   c0000780 <strcmp>
c001020c:	83 c4 10             	add    esp,0x10
c001020f:	85 c0                	test   eax,eax
c0010211:	74 2a                	je     c001023d <CPU::detectFeatures()+0x1fb>
c0010213:	50                   	push   eax
c0010214:	50                   	push   eax
c0010215:	68 6f 1a 02 c0       	push   0xc0021a6f
c001021a:	55                   	push   ebp
c001021b:	e8 60 05 ff ff       	call   c0000780 <strcmp>
c0010220:	83 c4 10             	add    esp,0x10
c0010223:	85 c0                	test   eax,eax
c0010225:	74 16                	je     c001023d <CPU::detectFeatures()+0x1fb>
c0010227:	50                   	push   eax
c0010228:	50                   	push   eax
c0010229:	68 7c 1a 02 c0       	push   0xc0021a7c
c001022e:	55                   	push   ebp
c001022f:	e8 4c 05 ff ff       	call   c0000780 <strcmp>
c0010234:	83 c4 10             	add    esp,0x10
c0010237:	85 c0                	test   eax,eax
c0010239:	74 48                	je     c0010283 <CPU::detectFeatures()+0x241>
c001023b:	eb 0f                	jmp    c001024c <CPU::detectFeatures()+0x20a>
c001023d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010247:	e9 c1 01 00 00       	jmp    c001040d <CPU::detectFeatures()+0x3cb>
c001024c:	50                   	push   eax
c001024d:	50                   	push   eax
c001024e:	68 89 1a 02 c0       	push   0xc0021a89
c0010253:	55                   	push   ebp
c0010254:	e8 27 05 ff ff       	call   c0000780 <strcmp>
c0010259:	83 c4 10             	add    esp,0x10
c001025c:	85 c0                	test   eax,eax
c001025e:	74 23                	je     c0010283 <CPU::detectFeatures()+0x241>
c0010260:	57                   	push   edi
c0010261:	57                   	push   edi
c0010262:	68 96 1a 02 c0       	push   0xc0021a96
c0010267:	55                   	push   ebp
c0010268:	e8 13 05 ff ff       	call   c0000780 <strcmp>
c001026d:	83 c4 10             	add    esp,0x10
c0010270:	85 c0                	test   eax,eax
c0010272:	75 1e                	jne    c0010292 <CPU::detectFeatures()+0x250>
c0010274:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001027e:	e9 8a 01 00 00       	jmp    c001040d <CPU::detectFeatures()+0x3cb>
c0010283:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001028d:	e9 7b 01 00 00       	jmp    c001040d <CPU::detectFeatures()+0x3cb>
c0010292:	56                   	push   esi
c0010293:	56                   	push   esi
c0010294:	68 a3 1a 02 c0       	push   0xc0021aa3
c0010299:	55                   	push   ebp
c001029a:	e8 e1 04 ff ff       	call   c0000780 <strcmp>
c001029f:	83 c4 10             	add    esp,0x10
c00102a2:	85 c0                	test   eax,eax
c00102a4:	75 0f                	jne    c00102b5 <CPU::detectFeatures()+0x273>
c00102a6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00102b0:	e9 58 01 00 00       	jmp    c001040d <CPU::detectFeatures()+0x3cb>
c00102b5:	51                   	push   ecx
c00102b6:	51                   	push   ecx
c00102b7:	68 62 1a 02 c0       	push   0xc0021a62
c00102bc:	55                   	push   ebp
c00102bd:	e8 be 04 ff ff       	call   c0000780 <strcmp>
c00102c2:	83 c4 10             	add    esp,0x10
c00102c5:	85 c0                	test   eax,eax
c00102c7:	75 0f                	jne    c00102d8 <CPU::detectFeatures()+0x296>
c00102c9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00102d3:	e9 35 01 00 00       	jmp    c001040d <CPU::detectFeatures()+0x3cb>
c00102d8:	52                   	push   edx
c00102d9:	52                   	push   edx
c00102da:	68 b0 1a 02 c0       	push   0xc0021ab0
c00102df:	55                   	push   ebp
c00102e0:	e8 9b 04 ff ff       	call   c0000780 <strcmp>
c00102e5:	83 c4 10             	add    esp,0x10
c00102e8:	85 c0                	test   eax,eax
c00102ea:	75 0f                	jne    c00102fb <CPU::detectFeatures()+0x2b9>
c00102ec:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00102f6:	e9 12 01 00 00       	jmp    c001040d <CPU::detectFeatures()+0x3cb>
c00102fb:	50                   	push   eax
c00102fc:	50                   	push   eax
c00102fd:	68 bd 1a 02 c0       	push   0xc0021abd
c0010302:	55                   	push   ebp
c0010303:	e8 78 04 ff ff       	call   c0000780 <strcmp>
c0010308:	83 c4 10             	add    esp,0x10
c001030b:	85 c0                	test   eax,eax
c001030d:	75 0f                	jne    c001031e <CPU::detectFeatures()+0x2dc>
c001030f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010319:	e9 ef 00 00 00       	jmp    c001040d <CPU::detectFeatures()+0x3cb>
c001031e:	50                   	push   eax
c001031f:	50                   	push   eax
c0010320:	68 ca 1a 02 c0       	push   0xc0021aca
c0010325:	55                   	push   ebp
c0010326:	e8 55 04 ff ff       	call   c0000780 <strcmp>
c001032b:	83 c4 10             	add    esp,0x10
c001032e:	85 c0                	test   eax,eax
c0010330:	75 0f                	jne    c0010341 <CPU::detectFeatures()+0x2ff>
c0010332:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001033c:	e9 cc 00 00 00       	jmp    c001040d <CPU::detectFeatures()+0x3cb>
c0010341:	50                   	push   eax
c0010342:	50                   	push   eax
c0010343:	68 d7 1a 02 c0       	push   0xc0021ad7
c0010348:	55                   	push   ebp
c0010349:	e8 32 04 ff ff       	call   c0000780 <strcmp>
c001034e:	83 c4 10             	add    esp,0x10
c0010351:	85 c0                	test   eax,eax
c0010353:	75 0f                	jne    c0010364 <CPU::detectFeatures()+0x322>
c0010355:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001035f:	e9 a9 00 00 00       	jmp    c001040d <CPU::detectFeatures()+0x3cb>
c0010364:	50                   	push   eax
c0010365:	50                   	push   eax
c0010366:	68 e4 1a 02 c0       	push   0xc0021ae4
c001036b:	55                   	push   ebp
c001036c:	e8 0f 04 ff ff       	call   c0000780 <strcmp>
c0010371:	83 c4 10             	add    esp,0x10
c0010374:	85 c0                	test   eax,eax
c0010376:	75 0f                	jne    c0010387 <CPU::detectFeatures()+0x345>
c0010378:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010382:	e9 86 00 00 00       	jmp    c001040d <CPU::detectFeatures()+0x3cb>
c0010387:	50                   	push   eax
c0010388:	50                   	push   eax
c0010389:	68 f1 1a 02 c0       	push   0xc0021af1
c001038e:	55                   	push   ebp
c001038f:	e8 ec 03 ff ff       	call   c0000780 <strcmp>
c0010394:	83 c4 10             	add    esp,0x10
c0010397:	85 c0                	test   eax,eax
c0010399:	75 0c                	jne    c00103a7 <CPU::detectFeatures()+0x365>
c001039b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00103a5:	eb 66                	jmp    c001040d <CPU::detectFeatures()+0x3cb>
c00103a7:	50                   	push   eax
c00103a8:	50                   	push   eax
c00103a9:	68 fe 1a 02 c0       	push   0xc0021afe
c00103ae:	55                   	push   ebp
c00103af:	e8 cc 03 ff ff       	call   c0000780 <strcmp>
c00103b4:	83 c4 10             	add    esp,0x10
c00103b7:	85 c0                	test   eax,eax
c00103b9:	75 0c                	jne    c00103c7 <CPU::detectFeatures()+0x385>
c00103bb:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00103c5:	eb 46                	jmp    c001040d <CPU::detectFeatures()+0x3cb>
c00103c7:	57                   	push   edi
c00103c8:	57                   	push   edi
c00103c9:	68 0b 1b 02 c0       	push   0xc0021b0b
c00103ce:	55                   	push   ebp
c00103cf:	e8 ac 03 ff ff       	call   c0000780 <strcmp>
c00103d4:	83 c4 10             	add    esp,0x10
c00103d7:	85 c0                	test   eax,eax
c00103d9:	74 e0                	je     c00103bb <CPU::detectFeatures()+0x379>
c00103db:	56                   	push   esi
c00103dc:	56                   	push   esi
c00103dd:	68 18 1b 02 c0       	push   0xc0021b18
c00103e2:	55                   	push   ebp
c00103e3:	e8 98 03 ff ff       	call   c0000780 <strcmp>
c00103e8:	83 c4 10             	add    esp,0x10
c00103eb:	85 c0                	test   eax,eax
c00103ed:	74 cc                	je     c00103bb <CPU::detectFeatures()+0x379>
c00103ef:	51                   	push   ecx
c00103f0:	51                   	push   ecx
c00103f1:	68 25 1b 02 c0       	push   0xc0021b25
c00103f6:	55                   	push   ebp
c00103f7:	e8 84 03 ff ff       	call   c0000780 <strcmp>
c00103fc:	83 c4 10             	add    esp,0x10
c00103ff:	85 c0                	test   eax,eax
c0010401:	74 b8                	je     c00103bb <CPU::detectFeatures()+0x379>
c0010403:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001040d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010412:	0f 86 be 00 00 00    	jbe    c00104d6 <CPU::detectFeatures()+0x494>
c0010418:	83 ec 0c             	sub    esp,0xc
c001041b:	68 80 00 00 00       	push   0x80
c0010420:	e8 31 fb ff ff       	call   c000ff56 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010425:	83 e0 01             	and    eax,0x1
c0010428:	c1 e0 06             	shl    eax,0x6
c001042b:	89 c2                	mov    edx,eax
c001042d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010433:	83 e0 bf             	and    eax,0xffffffbf
c0010436:	09 d0                	or     eax,edx
c0010438:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001043e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010445:	e8 0c fb ff ff       	call   c000ff56 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001044a:	83 e0 01             	and    eax,0x1
c001044d:	c1 e0 04             	shl    eax,0x4
c0010450:	89 c2                	mov    edx,eax
c0010452:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010458:	83 e0 ef             	and    eax,0xffffffef
c001045b:	09 d0                	or     eax,edx
c001045d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010463:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001046a:	e8 e7 fa ff ff       	call   c000ff56 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001046f:	89 c2                	mov    edx,eax
c0010471:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010477:	c1 e2 07             	shl    edx,0x7
c001047a:	83 e0 7f             	and    eax,0x7f
c001047d:	09 d0                	or     eax,edx
c001047f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010485:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001048c:	e8 f3 fa ff ff       	call   c000ff84 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010491:	83 e0 01             	and    eax,0x1
c0010494:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001049b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00104a1:	83 e0 f7             	and    eax,0xfffffff7
c00104a4:	09 d0                	or     eax,edx
c00104a6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00104ac:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00104b3:	e8 cc fa ff ff       	call   c000ff84 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00104b8:	83 c4 10             	add    esp,0x10
c00104bb:	83 e0 01             	and    eax,0x1
c00104be:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104c5:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00104cb:	83 e0 fb             	and    eax,0xfffffffb
c00104ce:	09 d0                	or     eax,edx
c00104d0:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104dd:	50                   	push   eax
c00104de:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104e2:	50                   	push   eax
c00104e3:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00104e7:	57                   	push   edi
c00104e8:	8d 74 24 28          	lea    esi,[esp+0x28]
c00104ec:	56                   	push   esi
c00104ed:	6a 01                	push   0x1
c00104ef:	e8 82 f9 ff ff       	call   c000fe76 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00104f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104f8:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00104fe:	89 c1                	mov    ecx,eax
c0010500:	83 e1 0f             	and    ecx,0xf
c0010503:	83 e2 f0             	and    edx,0xfffffff0
c0010506:	09 ca                	or     edx,ecx
c0010508:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001050e:	89 c2                	mov    edx,eax
c0010510:	c1 ea 04             	shr    edx,0x4
c0010513:	83 e2 0f             	and    edx,0xf
c0010516:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001051a:	89 d1                	mov    ecx,edx
c001051c:	83 c4 20             	add    esp,0x20
c001051f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010525:	c1 e1 06             	shl    ecx,0x6
c0010528:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001052e:	09 ca                	or     edx,ecx
c0010530:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010537:	89 c2                	mov    edx,eax
c0010539:	c1 ea 08             	shr    edx,0x8
c001053c:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010542:	83 e2 0f             	and    edx,0xf
c0010545:	89 d5                	mov    ebp,edx
c0010547:	83 e5 03             	and    ebp,0x3
c001054a:	c1 e5 06             	shl    ebp,0x6
c001054d:	83 e1 3f             	and    ecx,0x3f
c0010550:	09 e9                	or     ecx,ebp
c0010552:	89 d5                	mov    ebp,edx
c0010554:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001055a:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010560:	c1 ed 02             	shr    ebp,0x2
c0010563:	83 e1 c0             	and    ecx,0xffffffc0
c0010566:	09 e9                	or     ecx,ebp
c0010568:	89 c5                	mov    ebp,eax
c001056a:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010570:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010576:	c1 ed 08             	shr    ebp,0x8
c0010579:	83 e5 30             	and    ebp,0x30
c001057c:	83 e1 cf             	and    ecx,0xffffffcf
c001057f:	09 e9                	or     ecx,ebp
c0010581:	83 fa 06             	cmp    edx,0x6
c0010584:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001058a:	74 05                	je     c0010591 <CPU::detectFeatures()+0x54f>
c001058c:	83 fa 0f             	cmp    edx,0xf
c001058f:	75 64                	jne    c00105f5 <CPU::detectFeatures()+0x5b3>
c0010591:	89 c1                	mov    ecx,eax
c0010593:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010599:	c1 e9 10             	shr    ecx,0x10
c001059c:	c1 e1 04             	shl    ecx,0x4
c001059f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00105a3:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00105a9:	0f b6 c9             	movzx  ecx,cl
c00105ac:	c1 e1 06             	shl    ecx,0x6
c00105af:	09 e9                	or     ecx,ebp
c00105b1:	83 fa 0f             	cmp    edx,0xf
c00105b4:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00105bb:	75 38                	jne    c00105f5 <CPU::detectFeatures()+0x5b3>
c00105bd:	c1 e8 14             	shr    eax,0x14
c00105c0:	83 c0 0f             	add    eax,0xf
c00105c3:	0f b6 c0             	movzx  eax,al
c00105c6:	89 c2                	mov    edx,eax
c00105c8:	c1 e8 02             	shr    eax,0x2
c00105cb:	83 e2 03             	and    edx,0x3
c00105ce:	89 d1                	mov    ecx,edx
c00105d0:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00105d6:	c1 e1 06             	shl    ecx,0x6
c00105d9:	83 e2 3f             	and    edx,0x3f
c00105dc:	09 ca                	or     edx,ecx
c00105de:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00105e4:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00105ea:	83 e2 c0             	and    edx,0xffffffc0
c00105ed:	09 d0                	or     eax,edx
c00105ef:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00105f5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105fb:	83 ec 0c             	sub    esp,0xc
c00105fe:	83 c8 07             	or     eax,0x7
c0010601:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010607:	8d 44 24 28          	lea    eax,[esp+0x28]
c001060b:	50                   	push   eax
c001060c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010610:	55                   	push   ebp
c0010611:	57                   	push   edi
c0010612:	56                   	push   esi
c0010613:	68 00 00 00 80       	push   0x80000000
c0010618:	e8 59 f8 ff ff       	call   c000fe76 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001061d:	83 c4 20             	add    esp,0x20
c0010620:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010628:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001062c:	76 1e                	jbe    c001064c <CPU::detectFeatures()+0x60a>
c001062e:	83 ec 0c             	sub    esp,0xc
c0010631:	50                   	push   eax
c0010632:	55                   	push   ebp
c0010633:	57                   	push   edi
c0010634:	56                   	push   esi
c0010635:	68 01 00 00 80       	push   0x80000001
c001063a:	e8 37 f8 ff ff       	call   c000fe76 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001063f:	83 c4 20             	add    esp,0x20
c0010642:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001064c:	52                   	push   edx
c001064d:	52                   	push   edx
c001064e:	68 31 1b 02 c0       	push   0xc0021b31
c0010653:	53                   	push   ebx
c0010654:	e8 29 c1 ff ff       	call   c000c782 <Device::setName(char const*)>
c0010659:	83 c4 10             	add    esp,0x10
c001065c:	eb 69                	jmp    c00106c7 <CPU::detectFeatures()+0x685>
c001065e:	50                   	push   eax
c001065f:	50                   	push   eax
c0010660:	68 96 1a 02 c0       	push   0xc0021a96
c0010665:	55                   	push   ebp
c0010666:	e8 e5 ff fe ff       	call   c0000650 <strcpy>
c001066b:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010675:	e8 49 fb fe ff       	call   c00001c3 <is486>
c001067a:	83 c4 10             	add    esp,0x10
c001067d:	85 c0                	test   eax,eax
c001067f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010685:	74 1f                	je     c00106a6 <CPU::detectFeatures()+0x664>
c0010687:	83 c8 07             	or     eax,0x7
c001068a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010690:	0f 20 c0             	mov    eax,cr0
c0010693:	83 e0 14             	and    eax,0x14
c0010696:	83 f8 04             	cmp    eax,0x4
c0010699:	75 10                	jne    c00106ab <CPU::detectFeatures()+0x669>
c001069b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106a1:	83 e0 fd             	and    eax,0xfffffffd
c00106a4:	eb 1b                	jmp    c00106c1 <CPU::detectFeatures()+0x67f>
c00106a6:	83 e0 f8             	and    eax,0xfffffff8
c00106a9:	eb df                	jmp    c001068a <CPU::detectFeatures()+0x648>
c00106ab:	e8 ee fa fe ff       	call   c000019e <hasLegacyFPU>
c00106b0:	83 e0 01             	and    eax,0x1
c00106b3:	8d 14 00             	lea    edx,[eax+eax*1]
c00106b6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106bc:	83 e0 fd             	and    eax,0xfffffffd
c00106bf:	09 d0                	or     eax,edx
c00106c1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00106c7:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00106ce:	74 17                	je     c00106e7 <CPU::detectFeatures()+0x6a5>
c00106d0:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c00106d6:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c00106dc:	83 c8 10             	or     eax,0x10
c00106df:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c00106e5:	eb 20                	jmp    c0010707 <CPU::detectFeatures()+0x6c5>
c00106e7:	e8 b2 fa fe ff       	call   c000019e <hasLegacyFPU>
c00106ec:	83 e0 01             	and    eax,0x1
c00106ef:	8d 14 00             	lea    edx,[eax+eax*1]
c00106f2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106f8:	83 e0 fd             	and    eax,0xfffffffd
c00106fb:	09 d0                	or     eax,edx
c00106fd:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010703:	a8 02                	test   al,0x2
c0010705:	75 c9                	jne    c00106d0 <CPU::detectFeatures()+0x68e>
c0010707:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001070e:	83 c4 2c             	add    esp,0x2c
c0010711:	5b                   	pop    ebx
c0010712:	5e                   	pop    esi
c0010713:	5f                   	pop    edi
c0010714:	5d                   	pop    ebp
c0010715:	c3                   	ret    

c0010716 <CPU::setupSMEP()>:
c0010716:	0f 20 e0             	mov    eax,cr4
c0010719:	0d 00 00 10 00       	or     eax,0x100000
c001071e:	0f 22 e0             	mov    cr4,eax
c0010721:	c3                   	ret    

c0010722 <CPU::setupUMIP()>:
c0010722:	0f 20 e0             	mov    eax,cr4
c0010725:	80 cc 08             	or     ah,0x8
c0010728:	0f 22 e0             	mov    cr4,eax
c001072b:	c3                   	ret    

c001072c <CPU::setupTSC()>:
c001072c:	0f 20 e0             	mov    eax,cr4
c001072f:	83 c8 04             	or     eax,0x4
c0010732:	0f 22 e0             	mov    cr4,eax
c0010735:	c3                   	ret    

c0010736 <CPU::setupLargePages()>:
c0010736:	0f 20 e0             	mov    eax,cr4
c0010739:	83 c8 10             	or     eax,0x10
c001073c:	0f 22 e0             	mov    cr4,eax
c001073f:	c3                   	ret    

c0010740 <CPU::setupPAT()>:
c0010740:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010745:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001074c:	74 2c                	je     c001077a <CPU::setupPAT()+0x3a>
c001074e:	53                   	push   ebx
c001074f:	83 ec 10             	sub    esp,0x10
c0010752:	68 77 02 00 00       	push   0x277
c0010757:	50                   	push   eax
c0010758:	e8 85 69 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001075d:	83 e2 f8             	and    edx,0xfffffff8
c0010760:	83 ca 01             	or     edx,0x1
c0010763:	52                   	push   edx
c0010764:	50                   	push   eax
c0010765:	68 77 02 00 00       	push   0x277
c001076a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010770:	e8 99 69 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010775:	83 c4 28             	add    esp,0x28
c0010778:	5b                   	pop    ebx
c0010779:	c3                   	ret    
c001077a:	c3                   	ret    
c001077b:	90                   	nop

c001077c <CPU::setupMTRR()>:
c001077c:	c3                   	ret    
c001077d:	90                   	nop

c001077e <CPU::setupGlobalPages()>:
c001077e:	0f 20 e0             	mov    eax,cr4
c0010781:	0c 80                	or     al,0x80
c0010783:	0f 22 e0             	mov    cr4,eax
c0010786:	c3                   	ret    
c0010787:	90                   	nop

c0010788 <CPU::allowUsermodeDataAccess()>:
c0010788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001078c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010793:	74 03                	je     c0010798 <CPU::allowUsermodeDataAccess()+0x10>
c0010795:	0f 01 cb             	stac   
c0010798:	c3                   	ret    
c0010799:	90                   	nop

c001079a <CPU::prohibitUsermodeDataAccess()>:
c001079a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001079e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00107a5:	74 03                	je     c00107aa <CPU::prohibitUsermodeDataAccess()+0x10>
c00107a7:	0f 01 ca             	clac   
c00107aa:	c3                   	ret    
c00107ab:	90                   	nop

c00107ac <CPU::setupSMAP()>:
c00107ac:	0f 20 e0             	mov    eax,cr4
c00107af:	0d 00 00 20 00       	or     eax,0x200000
c00107b4:	0f 22 e0             	mov    cr4,eax
c00107b7:	eb e1                	jmp    c001079a <CPU::prohibitUsermodeDataAccess()>
c00107b9:	90                   	nop

c00107ba <CPU::setupFeatures()>:
c00107ba:	53                   	push   ebx
c00107bb:	83 ec 08             	sub    esp,0x8
c00107be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107c2:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00107c9:	74 18                	je     c00107e3 <CPU::setupFeatures()+0x29>
c00107cb:	83 ec 0c             	sub    esp,0xc
c00107ce:	68 3d 1b 02 c0       	push   0xc0021b3d
c00107d3:	e8 32 a1 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00107d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107db:	e8 42 ff ff ff       	call   c0010722 <CPU::setupUMIP()>
c00107e0:	83 c4 10             	add    esp,0x10
c00107e3:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00107ea:	74 18                	je     c0010804 <CPU::setupFeatures()+0x4a>
c00107ec:	83 ec 0c             	sub    esp,0xc
c00107ef:	68 47 1b 02 c0       	push   0xc0021b47
c00107f4:	e8 11 a1 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00107f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107fc:	e8 2b ff ff ff       	call   c001072c <CPU::setupTSC()>
c0010801:	83 c4 10             	add    esp,0x10
c0010804:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001080b:	74 18                	je     c0010825 <CPU::setupFeatures()+0x6b>
c001080d:	83 ec 0c             	sub    esp,0xc
c0010810:	68 50 1b 02 c0       	push   0xc0021b50
c0010815:	e8 f0 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001081a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001081d:	e8 14 ff ff ff       	call   c0010736 <CPU::setupLargePages()>
c0010822:	83 c4 10             	add    esp,0x10
c0010825:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001082c:	74 18                	je     c0010846 <CPU::setupFeatures()+0x8c>
c001082e:	83 ec 0c             	sub    esp,0xc
c0010831:	68 59 1b 02 c0       	push   0xc0021b59
c0010836:	e8 cf a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001083b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001083e:	e8 3b ff ff ff       	call   c001077e <CPU::setupGlobalPages()>
c0010843:	83 c4 10             	add    esp,0x10
c0010846:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001084d:	74 18                	je     c0010867 <CPU::setupFeatures()+0xad>
c001084f:	83 ec 0c             	sub    esp,0xc
c0010852:	68 6b 1b 02 c0       	push   0xc0021b6b
c0010857:	e8 ae a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001085c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001085f:	e8 dc fe ff ff       	call   c0010740 <CPU::setupPAT()>
c0010864:	83 c4 10             	add    esp,0x10
c0010867:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001086e:	74 11                	je     c0010881 <CPU::setupFeatures()+0xc7>
c0010870:	c7 44 24 10 74 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021b74
c0010878:	83 c4 08             	add    esp,0x8
c001087b:	5b                   	pop    ebx
c001087c:	e9 89 a0 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c0010881:	83 c4 08             	add    esp,0x8
c0010884:	5b                   	pop    ebx
c0010885:	c3                   	ret    

c0010886 <CPU::open(int, int, void*)>:
c0010886:	55                   	push   ebp
c0010887:	57                   	push   edi
c0010888:	56                   	push   esi
c0010889:	53                   	push   ebx
c001088a:	83 ec 18             	sub    esp,0x18
c001088d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010891:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010895:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010899:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001089f:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c00108a5:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c00108ab:	50                   	push   eax
c00108ac:	e8 2d 6b ff ff       	call   c00073de <GDT::setup()>
c00108b1:	83 c4 0c             	add    esp,0xc
c00108b4:	6a 00                	push   0x0
c00108b6:	68 ef be ad de       	push   0xdeadbeef
c00108bb:	55                   	push   ebp
c00108bc:	e8 af 86 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c00108c1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00108c4:	e8 87 86 ff ff       	call   c0008f50 <TSS::flush()>
c00108c9:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00108cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00108d2:	e8 6b 6d ff ff       	call   c0007642 <IDT::setup()>
c00108d7:	b8 00 04 00 00       	mov    eax,0x400
c00108dc:	0f 23 f8             	mov    db7,eax
c00108df:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00108e9:	e8 f4 74 ff ff       	call   c0007de2 <Phys::allocatePage()>
c00108ee:	83 c4 10             	add    esp,0x10
c00108f1:	85 f6                	test   esi,esi
c00108f3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00108f9:	89 38                	mov    DWORD PTR [eax],edi
c00108fb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010901:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010904:	74 10                	je     c0010916 <CPU::open(int, int, void*)+0x90>
c0010906:	50                   	push   eax
c0010907:	50                   	push   eax
c0010908:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001090e:	56                   	push   esi
c001090f:	e8 78 8f ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010914:	eb 0d                	jmp    c0010923 <CPU::open(int, int, void*)+0x9d>
c0010916:	83 ec 0c             	sub    esp,0xc
c0010919:	68 7e 1b 02 c0       	push   0xc0021b7e
c001091e:	e8 4e 08 00 00       	call   c0011171 <KePanic(char const*)>
c0010923:	83 c4 10             	add    esp,0x10
c0010926:	83 ec 0c             	sub    esp,0xc
c0010929:	68 8c 1b 02 c0       	push   0xc0021b8c
c001092e:	e8 69 01 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c0010933:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010936:	e8 07 f7 ff ff       	call   c0010042 <CPU::detectFeatures()>
c001093b:	c7 04 24 af 1b 02 c0 	mov    DWORD PTR [esp],0xc0021baf
c0010942:	e8 55 01 00 00       	call   c0010a9c <KeSetBootMessage(char const*)>
c0010947:	e8 e7 71 00 00       	call   c0017b33 <HalInitialise()>
c001094c:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010951:	83 e0 10             	and    eax,0x10
c0010954:	83 f8 01             	cmp    eax,0x1
c0010957:	19 c0                	sbb    eax,eax
c0010959:	83 e0 46             	and    eax,0x46
c001095c:	83 c0 1e             	add    eax,0x1e
c001095f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010962:	e8 c2 d6 ff ff       	call   c000e029 <setupTimer(int)>
c0010967:	83 c4 10             	add    esp,0x10
c001096a:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010971:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010977:	74 0c                	je     c0010985 <CPU::open(int, int, void*)+0xff>
c0010979:	83 ec 0c             	sub    esp,0xc
c001097c:	53                   	push   ebx
c001097d:	e8 38 fe ff ff       	call   c00107ba <CPU::setupFeatures()>
c0010982:	83 c4 10             	add    esp,0x10
c0010985:	83 c4 0c             	add    esp,0xc
c0010988:	31 c0                	xor    eax,eax
c001098a:	5b                   	pop    ebx
c001098b:	5e                   	pop    esi
c001098c:	5f                   	pop    edi
c001098d:	5d                   	pop    ebp
c001098e:	c3                   	ret    

c001098f <KeInitialiseAtexit()>:
c001098f:	83 ec 10             	sub    esp,0x10
c0010992:	68 00 01 00 00       	push   0x100
c0010997:	6a 00                	push   0x0
c0010999:	68 20 9b 02 c0       	push   0xc0029b20
c001099e:	c7 05 00 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a00,0x0
c00109a8:	e8 43 fb fe ff       	call   c00004f0 <memset>
c00109ad:	83 c4 1c             	add    esp,0x1c
c00109b0:	c3                   	ret    

c00109b1 <KeRegisterAtexit(void (*)(void*), void*)>:
c00109b1:	a1 00 9a 02 c0       	mov    eax,ds:0xc0029a00
c00109b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00109ba:	89 14 85 20 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64e0],edx
c00109c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00109c5:	89 14 85 20 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65e0],edx
c00109cc:	40                   	inc    eax
c00109cd:	a3 00 9a 02 c0       	mov    ds:0xc0029a00,eax
c00109d2:	83 f8 3f             	cmp    eax,0x3f
c00109d5:	7e 0d                	jle    c00109e4 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c00109d7:	c7 44 24 04 f0 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021bf0
c00109df:	e9 8d 07 00 00       	jmp    c0011171 <KePanic(char const*)>
c00109e4:	c3                   	ret    

c00109e5 <KeExecuteAtexit()>:
c00109e5:	53                   	push   ebx
c00109e6:	31 db                	xor    ebx,ebx
c00109e8:	83 ec 08             	sub    esp,0x8
c00109eb:	39 1d 00 9a 02 c0    	cmp    DWORD PTR ds:0xc0029a00,ebx
c00109f1:	7e 28                	jle    c0010a1b <KeExecuteAtexit()+0x36>
c00109f3:	8b 04 9d 20 9b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd64e0]
c00109fa:	85 c0                	test   eax,eax
c00109fc:	74 1a                	je     c0010a18 <KeExecuteAtexit()+0x33>
c00109fe:	83 ec 0c             	sub    esp,0xc
c0010a01:	ff 34 9d 20 9a 02 c0 	push   DWORD PTR [ebx*4-0x3ffd65e0]
c0010a08:	ff d0                	call   eax
c0010a0a:	c7 04 9d 20 9b 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd64e0],0x0
c0010a15:	83 c4 10             	add    esp,0x10
c0010a18:	43                   	inc    ebx
c0010a19:	eb d0                	jmp    c00109eb <KeExecuteAtexit()+0x6>
c0010a1b:	83 c4 08             	add    esp,0x8
c0010a1e:	5b                   	pop    ebx
c0010a1f:	c3                   	ret    

c0010a20 <KeDisplaySplashScreen()>:
c0010a20:	55                   	push   ebp
c0010a21:	bd 05 00 00 00       	mov    ebp,0x5
c0010a26:	57                   	push   edi
c0010a27:	bf 0a 00 00 00       	mov    edi,0xa
c0010a2c:	56                   	push   esi
c0010a2d:	31 f6                	xor    esi,esi
c0010a2f:	53                   	push   ebx
c0010a30:	31 db                	xor    ebx,ebx
c0010a32:	83 ec 0c             	sub    esp,0xc
c0010a35:	0f b6 96 c0 2f 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdd040]
c0010a3c:	85 d2                	test   edx,edx
c0010a3e:	89 d0                	mov    eax,edx
c0010a40:	74 52                	je     c0010a94 <KeDisplaySplashScreen()+0x74>
c0010a42:	80 bb f6 2f 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdd00a],0xdb
c0010a49:	75 13                	jne    c0010a5e <KeDisplaySplashScreen()+0x3e>
c0010a4b:	0f b6 8b f5 2f 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdd00b]
c0010a52:	83 e1 fe             	and    ecx,0xfffffffe
c0010a55:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010a5b:	75 01                	jne    c0010a5e <KeDisplaySplashScreen()+0x3e>
c0010a5d:	47                   	inc    edi
c0010a5e:	83 fa 0d             	cmp    edx,0xd
c0010a61:	74 28                	je     c0010a8b <KeDisplaySplashScreen()+0x6b>
c0010a63:	83 fa 0a             	cmp    edx,0xa
c0010a66:	75 0a                	jne    c0010a72 <KeDisplaySplashScreen()+0x52>
c0010a68:	45                   	inc    ebp
c0010a69:	bf 0a 00 00 00       	mov    edi,0xa
c0010a6e:	31 db                	xor    ebx,ebx
c0010a70:	eb 19                	jmp    c0010a8b <KeDisplaySplashScreen()+0x6b>
c0010a72:	83 ec 0c             	sub    esp,0xc
c0010a75:	0f be c0             	movsx  eax,al
c0010a78:	55                   	push   ebp
c0010a79:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010a7c:	43                   	inc    ebx
c0010a7d:	52                   	push   edx
c0010a7e:	6a 00                	push   0x0
c0010a80:	6a 0e                	push   0xe
c0010a82:	50                   	push   eax
c0010a83:	e8 28 7d 00 00       	call   c00187b0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010a88:	83 c4 20             	add    esp,0x20
c0010a8b:	46                   	inc    esi
c0010a8c:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010a92:	75 a1                	jne    c0010a35 <KeDisplaySplashScreen()+0x15>
c0010a94:	83 c4 0c             	add    esp,0xc
c0010a97:	5b                   	pop    ebx
c0010a98:	5e                   	pop    esi
c0010a99:	5f                   	pop    edi
c0010a9a:	5d                   	pop    ebp
c0010a9b:	c3                   	ret    

c0010a9c <KeSetBootMessage(char const*)>:
c0010a9c:	57                   	push   edi
c0010a9d:	56                   	push   esi
c0010a9e:	53                   	push   ebx
c0010a9f:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010aa5:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010aac:	68 9e 00 00 00       	push   0x9e
c0010ab1:	6a 00                	push   0x0
c0010ab3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010ab7:	56                   	push   esi
c0010ab8:	e8 33 fa fe ff       	call   c00004f0 <memset>
c0010abd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ac0:	e8 bb fa fe ff       	call   c0000580 <strlen>
c0010ac5:	ba 50 00 00 00       	mov    edx,0x50
c0010aca:	83 c4 10             	add    esp,0x10
c0010acd:	31 c9                	xor    ecx,ecx
c0010acf:	29 c2                	sub    edx,eax
c0010ad1:	83 e2 fe             	and    edx,0xfffffffe
c0010ad4:	01 f2                	add    edx,esi
c0010ad6:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010adb:	84 c0                	test   al,al
c0010add:	74 0a                	je     c0010ae9 <KeSetBootMessage(char const*)+0x4d>
c0010adf:	80 cc 0f             	or     ah,0xf
c0010ae2:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010ae6:	41                   	inc    ecx
c0010ae7:	eb ed                	jmp    c0010ad6 <KeSetBootMessage(char const*)+0x3a>
c0010ae9:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010aee:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010af3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010af5:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010afb:	5b                   	pop    ebx
c0010afc:	5e                   	pop    esi
c0010afd:	5f                   	pop    edi
c0010afe:	c3                   	ret    
c0010aff:	90                   	nop

c0010b00 <Krnl::handlePowerButton()>:
c0010b00:	83 ec 0c             	sub    esp,0xc
c0010b03:	e8 c4 06 00 00       	call   c00111cc <KeHandlePowerButton()>
c0010b08:	90                   	nop
c0010b09:	83 c4 0c             	add    esp,0xc
c0010b0c:	c3                   	ret    
c0010b0d:	8d 76 00             	lea    esi,[esi+0x0]

c0010b10 <Krnl::handleSleepButton()>:
c0010b10:	83 ec 0c             	sub    esp,0xc
c0010b13:	e8 e9 06 00 00       	call   c0011201 <KeHandleSleepButton()>
c0010b18:	90                   	nop
c0010b19:	83 c4 0c             	add    esp,0xc
c0010b1c:	c3                   	ret    
c0010b1d:	90                   	nop

c0010b1e <EnvVarContainer::getEnv(char const*)>:
c0010b1e:	57                   	push   edi
c0010b1f:	56                   	push   esi
c0010b20:	53                   	push   ebx
c0010b21:	31 db                	xor    ebx,ebx
c0010b23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b27:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010b29:	7e 2b                	jle    c0010b56 <EnvVarContainer::getEnv(char const*)+0x38>
c0010b2b:	50                   	push   eax
c0010b2c:	50                   	push   eax
c0010b2d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010b30:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010b37:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010b3a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010b3e:	e8 3d fc fe ff       	call   c0000780 <strcmp>
c0010b43:	83 c4 10             	add    esp,0x10
c0010b46:	85 c0                	test   eax,eax
c0010b48:	75 09                	jne    c0010b53 <EnvVarContainer::getEnv(char const*)+0x35>
c0010b4a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010b4d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010b51:	eb 05                	jmp    c0010b58 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010b53:	43                   	inc    ebx
c0010b54:	eb d1                	jmp    c0010b27 <EnvVarContainer::getEnv(char const*)+0x9>
c0010b56:	31 c0                	xor    eax,eax
c0010b58:	5b                   	pop    ebx
c0010b59:	5e                   	pop    esi
c0010b5a:	5f                   	pop    edi
c0010b5b:	c3                   	ret    

c0010b5c <EnvVarContainer::setEnv(char const*, char const*)>:
c0010b5c:	55                   	push   ebp
c0010b5d:	57                   	push   edi
c0010b5e:	56                   	push   esi
c0010b5f:	53                   	push   ebx
c0010b60:	83 ec 28             	sub    esp,0x28
c0010b63:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010b67:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010b6b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010b6f:	56                   	push   esi
c0010b70:	e8 0b fa fe ff       	call   c0000580 <strlen>
c0010b75:	40                   	inc    eax
c0010b76:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b79:	e8 55 6f ff ff       	call   c0007ad3 <malloc>
c0010b7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010b85:	e8 f6 f9 fe ff       	call   c0000580 <strlen>
c0010b8a:	40                   	inc    eax
c0010b8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b8e:	e8 40 6f ff ff       	call   c0007ad3 <malloc>
c0010b93:	89 34 24             	mov    DWORD PTR [esp],esi
c0010b96:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b9a:	e8 e1 f9 fe ff       	call   c0000580 <strlen>
c0010b9f:	83 c4 0c             	add    esp,0xc
c0010ba2:	40                   	inc    eax
c0010ba3:	50                   	push   eax
c0010ba4:	6a 00                	push   0x0
c0010ba6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010baa:	e8 41 f9 fe ff       	call   c00004f0 <memset>
c0010baf:	89 34 24             	mov    DWORD PTR [esp],esi
c0010bb2:	e8 c9 f9 fe ff       	call   c0000580 <strlen>
c0010bb7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010bbb:	8d 48 01             	lea    ecx,[eax+0x1]
c0010bbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bc3:	89 de                	mov    esi,ebx
c0010bc5:	e8 b6 f9 fe ff       	call   c0000580 <strlen>
c0010bca:	83 c4 0c             	add    esp,0xc
c0010bcd:	40                   	inc    eax
c0010bce:	50                   	push   eax
c0010bcf:	6a 00                	push   0x0
c0010bd1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010bd5:	e8 16 f9 fe ff       	call   c00004f0 <memset>
c0010bda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bdd:	e8 9e f9 fe ff       	call   c0000580 <strlen>
c0010be2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010be6:	8d 48 01             	lea    ecx,[eax+0x1]
c0010be9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010beb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010bee:	40                   	inc    eax
c0010bef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010bf2:	c1 e0 03             	shl    eax,0x3
c0010bf5:	5a                   	pop    edx
c0010bf6:	59                   	pop    ecx
c0010bf7:	50                   	push   eax
c0010bf8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010bfb:	e8 bf 6e ff ff       	call   c0007abf <realloc>
c0010c00:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010c03:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010c07:	b9 08 00 00 00       	mov    ecx,0x8
c0010c0c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010c0f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010c13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c15:	83 c4 2c             	add    esp,0x2c
c0010c18:	5b                   	pop    ebx
c0010c19:	5e                   	pop    esi
c0010c1a:	5f                   	pop    edi
c0010c1b:	5d                   	pop    ebp
c0010c1c:	c3                   	ret    
c0010c1d:	90                   	nop

c0010c1e <EnvVarContainer::deleteEnv(char const*)>:
c0010c1e:	c3                   	ret    
c0010c1f:	90                   	nop

c0010c20 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010c20:	55                   	push   ebp
c0010c21:	57                   	push   edi
c0010c22:	56                   	push   esi
c0010c23:	53                   	push   ebx
c0010c24:	81 ec 38 01 00 00    	sub    esp,0x138
c0010c2a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010c31:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010c38:	68 14 01 00 00       	push   0x114
c0010c3d:	e8 91 6e ff ff       	call   c0007ad3 <malloc>
c0010c42:	83 c4 0c             	add    esp,0xc
c0010c45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010c48:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010c4f:	89 c3                	mov    ebx,eax
c0010c51:	50                   	push   eax
c0010c52:	e8 91 aa ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c0010c57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c5a:	e8 09 ae ff ff       	call   c000ba68 <File::exists()>
c0010c5f:	83 c4 10             	add    esp,0x10
c0010c62:	84 c0                	test   al,al
c0010c64:	75 31                	jne    c0010c97 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010c66:	50                   	push   eax
c0010c67:	50                   	push   eax
c0010c68:	6a 12                	push   0x12
c0010c6a:	53                   	push   ebx
c0010c6b:	e8 34 ab ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c0010c70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c72:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010c75:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c78:	e8 03 f9 fe ff       	call   c0000580 <strlen>
c0010c7d:	5a                   	pop    edx
c0010c7e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010c82:	52                   	push   edx
c0010c83:	31 d2                	xor    edx,edx
c0010c85:	56                   	push   esi
c0010c86:	52                   	push   edx
c0010c87:	50                   	push   eax
c0010c88:	53                   	push   ebx
c0010c89:	ff d7                	call   edi
c0010c8b:	83 c4 14             	add    esp,0x14
c0010c8e:	53                   	push   ebx
c0010c8f:	e8 6e ab ff ff       	call   c000b802 <File::close()>
c0010c94:	83 c4 10             	add    esp,0x10
c0010c97:	56                   	push   esi
c0010c98:	31 f6                	xor    esi,esi
c0010c9a:	68 00 01 00 00       	push   0x100
c0010c9f:	6a 00                	push   0x0
c0010ca1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010ca5:	50                   	push   eax
c0010ca6:	e8 45 f8 fe ff       	call   c00004f0 <memset>
c0010cab:	5f                   	pop    edi
c0010cac:	58                   	pop    eax
c0010cad:	6a 01                	push   0x1
c0010caf:	53                   	push   ebx
c0010cb0:	e8 ef aa ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c0010cb5:	83 c4 10             	add    esp,0x10
c0010cb8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010cc0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010cc8:	83 ec 0c             	sub    esp,0xc
c0010ccb:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010ccf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cd1:	52                   	push   edx
c0010cd2:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0010cd6:	51                   	push   ecx
c0010cd7:	6a 00                	push   0x0
c0010cd9:	6a 01                	push   0x1
c0010cdb:	53                   	push   ebx
c0010cdc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010cdf:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010ce4:	83 c4 20             	add    esp,0x20
c0010ce7:	85 c0                	test   eax,eax
c0010ce9:	89 c1                	mov    ecx,eax
c0010ceb:	0f 84 36 01 00 00    	je     c0010e27 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010cf1:	83 f8 0d             	cmp    eax,0xd
c0010cf4:	0f 84 22 01 00 00    	je     c0010e1c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010cfa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010cff:	0f 84 f0 00 00 00    	je     c0010df5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010d05:	83 f8 0a             	cmp    eax,0xa
c0010d08:	74 13                	je     c0010d1d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010d0a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010d0f:	74 0c                	je     c0010d1d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010d11:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010d17:	0f 8e f6 00 00 00    	jle    c0010e13 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010d1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d21:	83 ec 0c             	sub    esp,0xc
c0010d24:	8d 78 01             	lea    edi,[eax+0x1]
c0010d27:	57                   	push   edi
c0010d28:	e8 a6 6d ff ff       	call   c0007ad3 <malloc>
c0010d2d:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010d31:	8d 56 04             	lea    edx,[esi+0x4]
c0010d34:	89 14 24             	mov    DWORD PTR [esp],edx
c0010d37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010d3b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010d3f:	e8 8f 6d ff ff       	call   c0007ad3 <malloc>
c0010d44:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010d48:	83 c4 0c             	add    esp,0xc
c0010d4b:	57                   	push   edi
c0010d4c:	6a 00                	push   0x0
c0010d4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010d52:	e8 99 f7 fe ff       	call   c00004f0 <memset>
c0010d57:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010d5b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010d5f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010d63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d65:	83 c4 0c             	add    esp,0xc
c0010d68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010d6c:	52                   	push   edx
c0010d6d:	6a 00                	push   0x0
c0010d6f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010d73:	e8 78 f7 fe ff       	call   c00004f0 <memset>
c0010d78:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010d7c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010d80:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d83:	e8 f8 f7 fe ff       	call   c0000580 <strlen>
c0010d88:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010d8c:	89 c1                	mov    ecx,eax
c0010d8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d90:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010d93:	83 c4 10             	add    esp,0x10
c0010d96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010d99:	40                   	inc    eax
c0010d9a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010d9d:	85 d2                	test   edx,edx
c0010d9f:	75 0c                	jne    c0010dad <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010da1:	83 ec 0c             	sub    esp,0xc
c0010da4:	6a 08                	push   0x8
c0010da6:	e8 28 6d ff ff       	call   c0007ad3 <malloc>
c0010dab:	eb 0c                	jmp    c0010db9 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010dad:	51                   	push   ecx
c0010dae:	51                   	push   ecx
c0010daf:	c1 e0 03             	shl    eax,0x3
c0010db2:	50                   	push   eax
c0010db3:	52                   	push   edx
c0010db4:	e8 06 6d ff ff       	call   c0007abf <realloc>
c0010db9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010dbc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010dbf:	83 c4 10             	add    esp,0x10
c0010dc2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010dc5:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010dc9:	b9 08 00 00 00       	mov    ecx,0x8
c0010dce:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010dd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010dd4:	50                   	push   eax
c0010dd5:	31 f6                	xor    esi,esi
c0010dd7:	68 00 01 00 00       	push   0x100
c0010ddc:	6a 00                	push   0x0
c0010dde:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010de2:	50                   	push   eax
c0010de3:	e8 08 f7 fe ff       	call   c00004f0 <memset>
c0010de8:	83 c4 10             	add    esp,0x10
c0010deb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010df3:	eb 27                	jmp    c0010e1c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010df5:	83 f8 3d             	cmp    eax,0x3d
c0010df8:	74 1e                	je     c0010e18 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010dfa:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e00:	7f 07                	jg     c0010e09 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010e02:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0010e06:	46                   	inc    esi
c0010e07:	eb 13                	jmp    c0010e1c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e09:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010e11:	eb 09                	jmp    c0010e1c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e13:	83 f8 3d             	cmp    eax,0x3d
c0010e16:	75 ea                	jne    c0010e02 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010e18:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010e1c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e21:	0f 85 99 fe ff ff    	jne    c0010cc0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010e27:	83 ec 0c             	sub    esp,0xc
c0010e2a:	53                   	push   ebx
c0010e2b:	e8 d2 a9 ff ff       	call   c000b802 <File::close()>
c0010e30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e38:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010e3e:	5b                   	pop    ebx
c0010e3f:	5e                   	pop    esi
c0010e40:	5f                   	pop    edi
c0010e41:	5d                   	pop    ebp
c0010e42:	c3                   	ret    
c0010e43:	90                   	nop

c0010e44 <EnvVarContainer::__loadSystem()>:
c0010e44:	83 ec 10             	sub    esp,0x10
c0010e47:	68 20 31 02 c0       	push   0xc0023120
c0010e4c:	68 09 1c 02 c0       	push   0xc0021c09
c0010e51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e55:	e8 c6 fd ff ff       	call   c0010c20 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010e5a:	83 c4 1c             	add    esp,0x1c
c0010e5d:	c3                   	ret    

c0010e5e <EnvVarContainer::__loadUser()>:
c0010e5e:	c3                   	ret    
c0010e5f:	90                   	nop

c0010e60 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010e60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e64:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010e6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010e75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e80:	90                   	nop
c0010e81:	c3                   	ret    

c0010e82 <EnvVarContainer::~EnvVarContainer()>:
c0010e82:	83 ec 0c             	sub    esp,0xc
c0010e85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8c:	85 c0                	test   eax,eax
c0010e8e:	74 1d                	je     c0010ead <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e94:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e96:	85 c0                	test   eax,eax
c0010e98:	74 13                	je     c0010ead <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea1:	83 ec 0c             	sub    esp,0xc
c0010ea4:	50                   	push   eax
c0010ea5:	e8 39 6c ff ff       	call   c0007ae3 <free>
c0010eaa:	83 c4 10             	add    esp,0x10
c0010ead:	90                   	nop
c0010eae:	83 c4 0c             	add    esp,0xc
c0010eb1:	c3                   	ret    

c0010eb2 <KeGetEnv(Process*, char const*)>:
c0010eb2:	53                   	push   ebx
c0010eb3:	83 ec 08             	sub    esp,0x8
c0010eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eba:	39 05 90 a4 02 c0    	cmp    DWORD PTR ds:0xc002a490,eax
c0010ec0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ec4:	74 04                	je     c0010eca <KeGetEnv(Process*, char const*)+0x18>
c0010ec6:	85 c0                	test   eax,eax
c0010ec8:	75 0b                	jne    c0010ed5 <KeGetEnv(Process*, char const*)+0x23>
c0010eca:	a1 20 9c 02 c0       	mov    eax,ds:0xc0029c20
c0010ecf:	85 c0                	test   eax,eax
c0010ed1:	75 19                	jne    c0010eec <KeGetEnv(Process*, char const*)+0x3a>
c0010ed3:	eb 27                	jmp    c0010efc <KeGetEnv(Process*, char const*)+0x4a>
c0010ed5:	52                   	push   edx
c0010ed6:	52                   	push   edx
c0010ed7:	53                   	push   ebx
c0010ed8:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010ede:	e8 3b fc ff ff       	call   c0010b1e <EnvVarContainer::getEnv(char const*)>
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	85 c0                	test   eax,eax
c0010ee8:	75 28                	jne    c0010f12 <KeGetEnv(Process*, char const*)+0x60>
c0010eea:	eb de                	jmp    c0010eca <KeGetEnv(Process*, char const*)+0x18>
c0010eec:	52                   	push   edx
c0010eed:	52                   	push   edx
c0010eee:	53                   	push   ebx
c0010eef:	50                   	push   eax
c0010ef0:	e8 29 fc ff ff       	call   c0010b1e <EnvVarContainer::getEnv(char const*)>
c0010ef5:	83 c4 10             	add    esp,0x10
c0010ef8:	85 c0                	test   eax,eax
c0010efa:	75 16                	jne    c0010f12 <KeGetEnv(Process*, char const*)+0x60>
c0010efc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010f00:	a1 24 9c 02 c0       	mov    eax,ds:0xc0029c24
c0010f05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010f09:	83 c4 08             	add    esp,0x8
c0010f0c:	5b                   	pop    ebx
c0010f0d:	e9 0c fc ff ff       	jmp    c0010b1e <EnvVarContainer::getEnv(char const*)>
c0010f12:	83 c4 08             	add    esp,0x8
c0010f15:	5b                   	pop    ebx
c0010f16:	c3                   	ret    

c0010f17 <KeSetEnvSystem(char const*, char const*)>:
c0010f17:	83 ec 10             	sub    esp,0x10
c0010f1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f22:	ff 35 24 9c 02 c0    	push   DWORD PTR ds:0xc0029c24
c0010f28:	e8 2f fc ff ff       	call   c0010b5c <EnvVarContainer::setEnv(char const*, char const*)>
c0010f2d:	83 c4 1c             	add    esp,0x1c
c0010f30:	c3                   	ret    

c0010f31 <KeSetEnvUser(char const*, char const*)>:
c0010f31:	a1 20 9c 02 c0       	mov    eax,ds:0xc0029c20
c0010f36:	85 c0                	test   eax,eax
c0010f38:	74 15                	je     c0010f4f <KeSetEnvUser(char const*, char const*)+0x1e>
c0010f3a:	83 ec 10             	sub    esp,0x10
c0010f3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f45:	50                   	push   eax
c0010f46:	e8 11 fc ff ff       	call   c0010b5c <EnvVarContainer::setEnv(char const*, char const*)>
c0010f4b:	83 c4 1c             	add    esp,0x1c
c0010f4e:	c3                   	ret    
c0010f4f:	c3                   	ret    

c0010f50 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0010f50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f54:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010f5e:	e9 f9 fb ff ff       	jmp    c0010b5c <EnvVarContainer::setEnv(char const*, char const*)>

c0010f63 <KeDeleteEnvSystem(char const*)>:
c0010f63:	c3                   	ret    

c0010f64 <KeDeleteEnvUser(char const*)>:
c0010f64:	c3                   	ret    

c0010f65 <KeDeleteEnvProcess(Process*, char const*)>:
c0010f65:	c3                   	ret    

c0010f66 <KeNewProcessEnv(Process*)>:
c0010f66:	83 ec 28             	sub    esp,0x28
c0010f69:	6a 0c                	push   0xc
c0010f6b:	e8 63 6b ff ff       	call   c0007ad3 <malloc>
c0010f70:	5a                   	pop    edx
c0010f71:	59                   	pop    ecx
c0010f72:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f76:	50                   	push   eax
c0010f77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f7b:	e8 e0 fe ff ff       	call   c0010e60 <EnvVarContainer::EnvVarContainer(Process*)>
c0010f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f84:	83 c4 2c             	add    esp,0x2c
c0010f87:	c3                   	ret    

c0010f88 <KeCopyProcessEnv(Process*, Process*)>:
c0010f88:	57                   	push   edi
c0010f89:	56                   	push   esi
c0010f8a:	53                   	push   ebx
c0010f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8f:	83 ec 0c             	sub    esp,0xc
c0010f92:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010f98:	6a 0c                	push   0xc
c0010f9a:	e8 34 6b ff ff       	call   c0007ad3 <malloc>
c0010f9f:	89 c3                	mov    ebx,eax
c0010fa1:	58                   	pop    eax
c0010fa2:	5a                   	pop    edx
c0010fa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fa7:	53                   	push   ebx
c0010fa8:	e8 b3 fe ff ff       	call   c0010e60 <EnvVarContainer::EnvVarContainer(Process*)>
c0010fad:	8b 07                	mov    eax,DWORD PTR [edi]
c0010faf:	89 03                	mov    DWORD PTR [ebx],eax
c0010fb1:	c1 e0 03             	shl    eax,0x3
c0010fb4:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fb7:	e8 17 6b ff ff       	call   c0007ad3 <malloc>
c0010fbc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010fbf:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010fc1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010fc4:	89 c7                	mov    edi,eax
c0010fc6:	c1 e1 03             	shl    ecx,0x3
c0010fc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fcb:	83 c4 10             	add    esp,0x10
c0010fce:	89 d8                	mov    eax,ebx
c0010fd0:	5b                   	pop    ebx
c0010fd1:	5e                   	pop    esi
c0010fd2:	5f                   	pop    edi
c0010fd3:	c3                   	ret    

c0010fd4 <KeLoadSystemEnv()>:
c0010fd4:	53                   	push   ebx
c0010fd5:	83 ec 14             	sub    esp,0x14
c0010fd8:	6a 0c                	push   0xc
c0010fda:	e8 f4 6a ff ff       	call   c0007ad3 <malloc>
c0010fdf:	89 c3                	mov    ebx,eax
c0010fe1:	58                   	pop    eax
c0010fe2:	5a                   	pop    edx
c0010fe3:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0010fe9:	53                   	push   ebx
c0010fea:	e8 71 fe ff ff       	call   c0010e60 <EnvVarContainer::EnvVarContainer(Process*)>
c0010fef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ff2:	89 1d 24 9c 02 c0    	mov    DWORD PTR ds:0xc0029c24,ebx
c0010ff8:	e8 47 fe ff ff       	call   c0010e44 <EnvVarContainer::__loadSystem()>
c0010ffd:	83 c4 18             	add    esp,0x18
c0011000:	5b                   	pop    ebx
c0011001:	c3                   	ret    

c0011002 <KeLoadUserEnv()>:
c0011002:	53                   	push   ebx
c0011003:	83 ec 14             	sub    esp,0x14
c0011006:	6a 0c                	push   0xc
c0011008:	e8 c6 6a ff ff       	call   c0007ad3 <malloc>
c001100d:	89 c3                	mov    ebx,eax
c001100f:	58                   	pop    eax
c0011010:	5a                   	pop    edx
c0011011:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0011017:	53                   	push   ebx
c0011018:	e8 43 fe ff ff       	call   c0010e60 <EnvVarContainer::EnvVarContainer(Process*)>
c001101d:	89 1d 20 9c 02 c0    	mov    DWORD PTR ds:0xc0029c20,ebx
c0011023:	83 c4 18             	add    esp,0x18
c0011026:	5b                   	pop    ebx
c0011027:	c3                   	ret    

c0011028 <KeFlushEnv()>:
c0011028:	c3                   	ret    

c0011029 <KeGetProcessTotalEnvCount(Process*)>:
c0011029:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001102d:	8b 15 20 9c 02 c0    	mov    edx,DWORD PTR ds:0xc0029c20
c0011033:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011039:	a1 24 9c 02 c0       	mov    eax,ds:0xc0029c24
c001103e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011040:	03 01                	add    eax,DWORD PTR [ecx]
c0011042:	85 d2                	test   edx,edx
c0011044:	74 02                	je     c0011048 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011046:	03 02                	add    eax,DWORD PTR [edx]
c0011048:	c3                   	ret    

c0011049 <KeGetProcessEnvPair(Process*, int)>:
c0011049:	57                   	push   edi
c001104a:	56                   	push   esi
c001104b:	8b 35 20 9c 02 c0    	mov    esi,DWORD PTR ds:0xc0029c20
c0011051:	53                   	push   ebx
c0011052:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011056:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001105a:	85 f6                	test   esi,esi
c001105c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011060:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011066:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011068:	75 16                	jne    c0011080 <KeGetProcessEnvPair(Process*, int)+0x37>
c001106a:	39 c2                	cmp    edx,eax
c001106c:	7c 16                	jl     c0011084 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001106e:	8b 0d 24 9c 02 c0    	mov    ecx,DWORD PTR ds:0xc0029c24
c0011074:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011076:	01 c6                	add    esi,eax
c0011078:	39 d6                	cmp    esi,edx
c001107a:	7e 3c                	jle    c00110b8 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001107c:	29 c2                	sub    edx,eax
c001107e:	eb 04                	jmp    c0011084 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011080:	39 c2                	cmp    edx,eax
c0011082:	7d 05                	jge    c0011089 <KeGetProcessEnvPair(Process*, int)+0x40>
c0011084:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011087:	eb 20                	jmp    c00110a9 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011089:	8b 3e                	mov    edi,DWORD PTR [esi]
c001108b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001108e:	39 d1                	cmp    ecx,edx
c0011090:	7e 04                	jle    c0011096 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011092:	29 c2                	sub    edx,eax
c0011094:	eb 10                	jmp    c00110a6 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011096:	8b 35 24 9c 02 c0    	mov    esi,DWORD PTR ds:0xc0029c24
c001109c:	03 0e                	add    ecx,DWORD PTR [esi]
c001109e:	39 d1                	cmp    ecx,edx
c00110a0:	7e 16                	jle    c00110b8 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00110a2:	29 c2                	sub    edx,eax
c00110a4:	29 fa                	sub    edx,edi
c00110a6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00110a9:	8d 14 d0             	lea    edx,[eax+edx*8]
c00110ac:	8b 02                	mov    eax,DWORD PTR [edx]
c00110ae:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00110b1:	89 03                	mov    DWORD PTR [ebx],eax
c00110b3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00110b6:	eb 1d                	jmp    c00110d5 <KeGetProcessEnvPair(Process*, int)+0x8c>
c00110b8:	83 ec 0c             	sub    esp,0xc
c00110bb:	68 2b 1c 02 c0       	push   0xc0021c2b
c00110c0:	e8 ac 00 00 00       	call   c0011171 <KePanic(char const*)>
c00110c5:	83 c4 10             	add    esp,0x10
c00110c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00110ce:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00110d5:	89 d8                	mov    eax,ebx
c00110d7:	5b                   	pop    ebx
c00110d8:	5e                   	pop    esi
c00110d9:	5f                   	pop    edi
c00110da:	c2 04 00             	ret    0x4

c00110dd <CPU::current()>:
c00110dd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00110e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110e8:	c3                   	ret    

c00110e9 <operator new(unsigned long)>:
c00110e9:	e9 e5 69 ff ff       	jmp    c0007ad3 <malloc>

c00110ee <operator delete(void*)>:
c00110ee:	e9 00 6a ff ff       	jmp    c0007af3 <rfree>

c00110f3 <disableIRQs()>:
c00110f3:	fa                   	cli    
c00110f4:	c3                   	ret    

c00110f5 <enableIRQs()>:
c00110f5:	fb                   	sti    
c00110f6:	c3                   	ret    

c00110f7 <lockScheduler()>:
c00110f7:	fa                   	cli    
c00110f8:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00110fe:	c3                   	ret    

c00110ff <unlockScheduler()>:
c00110ff:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011104:	48                   	dec    eax
c0011105:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001110a:	75 01                	jne    c001110d <unlockScheduler()+0xe>
c001110c:	fb                   	sti    
c001110d:	c3                   	ret    

c001110e <lockStuff()>:
c001110e:	fa                   	cli    
c001110f:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0011115:	ff 05 64 a4 02 c0    	inc    DWORD PTR ds:0xc002a464
c001111b:	c3                   	ret    

c001111c <unlockStuff()>:
c001111c:	83 ec 0c             	sub    esp,0xc
c001111f:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0011124:	48                   	dec    eax
c0011125:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c001112a:	75 18                	jne    c0011144 <unlockStuff()+0x28>
c001112c:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c0011133:	74 0f                	je     c0011144 <unlockStuff()+0x28>
c0011135:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c001113f:	e8 30 49 00 00       	call   c0015a74 <schedule()>
c0011144:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011149:	48                   	dec    eax
c001114a:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001114f:	75 01                	jne    c0011152 <unlockStuff()+0x36>
c0011151:	fb                   	sti    
c0011152:	83 c4 0c             	add    esp,0xc
c0011155:	c3                   	ret    

c0011156 <Virt::getAKernelVAS()>:
c0011156:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001115b:	c3                   	ret    

c001115c <__not_memcpy>:
c001115c:	57                   	push   edi
c001115d:	56                   	push   esi
c001115e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011162:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011166:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001116a:	89 c7                	mov    edi,eax
c001116c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001116e:	5e                   	pop    esi
c001116f:	5f                   	pop    edi
c0011170:	c3                   	ret    

c0011171 <KePanic(char const*)>:
c0011171:	c6 05 28 9c 02 c0 01 	mov    BYTE PTR ds:0xc0029c28,0x1
c0011178:	e9 87 68 00 00       	jmp    c0017a04 <HalPanic(char const*)>

c001117d <KePowerThread(void*)>:
c001117d:	83 ec 0c             	sub    esp,0xc
c0011180:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011185:	48                   	dec    eax
c0011186:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001118b:	75 01                	jne    c001118e <KePowerThread(void*)+0x11>
c001118d:	fb                   	sti    
c001118e:	c6 05 40 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c40,0x0
c0011195:	83 ec 0c             	sub    esp,0xc
c0011198:	6a 0a                	push   0xa
c001119a:	e8 05 4c 00 00       	call   c0015da4 <sleep(unsigned int)>
c001119f:	83 c4 10             	add    esp,0x10
c00111a2:	83 05 84 9c 02 c0 0a 	add    DWORD PTR ds:0xc0029c84,0xa
c00111a9:	eb e3                	jmp    c001118e <KePowerThread(void*)+0x11>

c00111ab <KeChangePowerSettings(PowerSettings)>:
c00111ab:	57                   	push   edi
c00111ac:	b9 09 00 00 00       	mov    ecx,0x9
c00111b1:	56                   	push   esi
c00111b2:	bf 60 9c 02 c0       	mov    edi,0xc0029c60
c00111b7:	fc                   	cld    
c00111b8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00111bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00111be:	5e                   	pop    esi
c00111bf:	5f                   	pop    edi
c00111c0:	c3                   	ret    

c00111c1 <KeUserIOReceived()>:
c00111c1:	c7 05 84 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c84,0x0
c00111cb:	c3                   	ret    

c00111cc <KeHandlePowerButton()>:
c00111cc:	83 ec 0c             	sub    esp,0xc
c00111cf:	a1 60 9c 02 c0       	mov    eax,ds:0xc0029c60
c00111d4:	83 f8 02             	cmp    eax,0x2
c00111d7:	75 10                	jne    c00111e9 <KeHandlePowerButton()+0x1d>
c00111d9:	83 ec 0c             	sub    esp,0xc
c00111dc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00111e2:	e8 63 5f ff ff       	call   c000714a <Computer::shutdown()>
c00111e7:	eb 11                	jmp    c00111fa <KeHandlePowerButton()+0x2e>
c00111e9:	48                   	dec    eax
c00111ea:	75 11                	jne    c00111fd <KeHandlePowerButton()+0x31>
c00111ec:	83 ec 0c             	sub    esp,0xc
c00111ef:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00111f5:	e8 80 5f ff ff       	call   c000717a <Computer::sleep()>
c00111fa:	83 c4 10             	add    esp,0x10
c00111fd:	83 c4 0c             	add    esp,0xc
c0011200:	c3                   	ret    

c0011201 <KeHandleSleepButton()>:
c0011201:	83 ec 0c             	sub    esp,0xc
c0011204:	a1 64 9c 02 c0       	mov    eax,ds:0xc0029c64
c0011209:	83 f8 02             	cmp    eax,0x2
c001120c:	75 10                	jne    c001121e <KeHandleSleepButton()+0x1d>
c001120e:	83 ec 0c             	sub    esp,0xc
c0011211:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011217:	e8 2e 5f ff ff       	call   c000714a <Computer::shutdown()>
c001121c:	eb 11                	jmp    c001122f <KeHandleSleepButton()+0x2e>
c001121e:	48                   	dec    eax
c001121f:	75 11                	jne    c0011232 <KeHandleSleepButton()+0x31>
c0011221:	83 ec 0c             	sub    esp,0xc
c0011224:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001122a:	e8 4b 5f ff ff       	call   c000717a <Computer::sleep()>
c001122f:	83 c4 10             	add    esp,0x10
c0011232:	83 c4 0c             	add    esp,0xc
c0011235:	c3                   	ret    

c0011236 <KeSetupPowerManager()>:
c0011236:	83 ec 0c             	sub    esp,0xc
c0011239:	68 f0 00 00 00       	push   0xf0
c001123e:	6a 00                	push   0x0
c0011240:	68 7d 11 01 c0       	push   0xc001117d
c0011245:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001124b:	c7 05 84 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c84,0x0
c0011255:	c6 05 40 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c40,0x0
c001125c:	e8 c7 45 00 00       	call   c0015828 <Process::createThread(void (*)(void*), void*, int)>
c0011261:	c7 05 60 9c 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0029c60,0x2
c001126b:	c7 05 64 9c 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029c64,0x1
c0011275:	c7 05 68 9c 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0029c68,0x3
c001127f:	c7 05 6c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c6c,0x0
c0011289:	c7 05 78 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c78,0x0
c0011293:	c7 05 70 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c70,0x0
c001129d:	c7 05 7c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c7c,0x0
c00112a7:	c7 05 74 9c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029c74,0x3c
c00112b1:	c7 05 80 9c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029c80,0x3c
c00112bb:	83 c4 1c             	add    esp,0x1c
c00112be:	c3                   	ret    

c00112bf <KeRand()>:
c00112bf:	69 05 88 9c 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0029c88,0x2875
c00112c9:	69 0d 8c 9c 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0029c8c,0xa2e7b175
c00112d3:	53                   	push   ebx
c00112d4:	01 c1                	add    ecx,eax
c00112d6:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00112db:	f7 25 88 9c 02 c0    	mul    DWORD PTR ds:0xc0029c88
c00112e1:	01 ca                	add    edx,ecx
c00112e3:	05 ef 04 b5 00       	add    eax,0xb504ef
c00112e8:	a3 88 9c 02 c0       	mov    ds:0xc0029c88,eax
c00112ed:	83 d2 00             	adc    edx,0x0
c00112f0:	0f b7 da             	movzx  ebx,dx
c00112f3:	89 1d 8c 9c 02 c0    	mov    DWORD PTR ds:0xc0029c8c,ebx
c00112f9:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00112fd:	5b                   	pop    ebx
c00112fe:	c3                   	ret    

c00112ff <KeSeedRand(unsigned int)>:
c00112ff:	53                   	push   ebx
c0011300:	83 ec 08             	sub    esp,0x8
c0011303:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011307:	e8 17 6a 00 00       	call   c0017d23 <HalGetRand()>
c001130c:	c7 05 8c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c8c,0x0
c0011316:	31 d8                	xor    eax,ebx
c0011318:	a3 88 9c 02 c0       	mov    ds:0xc0029c88,eax
c001131d:	e8 9d ff ff ff       	call   c00112bf <KeRand()>
c0011322:	83 c4 08             	add    esp,0x8
c0011325:	5b                   	pop    ebx
c0011326:	eb 97                	jmp    c00112bf <KeRand()>

c0011328 <KeInitRand()>:
c0011328:	83 ec 0c             	sub    esp,0xc
c001132b:	e8 e8 67 00 00       	call   c0017b18 <HalQueryPerformanceCounter()>
c0011330:	0f 20 da             	mov    edx,cr3
c0011333:	0f 22 da             	mov    cr3,edx
c0011336:	0f 20 da             	mov    edx,cr3
c0011339:	0f 22 da             	mov    cr3,edx
c001133c:	0f 20 da             	mov    edx,cr3
c001133f:	0f 22 da             	mov    cr3,edx
c0011342:	0f 20 da             	mov    edx,cr3
c0011345:	0f 22 da             	mov    cr3,edx
c0011348:	83 ec 0c             	sub    esp,0xc
c001134b:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011350:	50                   	push   eax
c0011351:	e8 a9 ff ff ff       	call   c00112ff <KeSeedRand(unsigned int)>
c0011356:	83 c4 1c             	add    esp,0x1c
c0011359:	c3                   	ret    
c001135a:	66 90                	xchg   ax,ax

c001135c <KeResolveCompatibilitySymbol(char*)>:
c001135c:	83 ec 0c             	sub    esp,0xc
c001135f:	83 ec 08             	sub    esp,0x8
c0011362:	68 45 1c 02 c0       	push   0xc0021c45
c0011367:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001136b:	e8 10 f4 fe ff       	call   c0000780 <strcmp>
c0011370:	83 c4 10             	add    esp,0x10
c0011373:	85 c0                	test   eax,eax
c0011375:	0f 94 c0             	sete   al
c0011378:	0f b6 c0             	movzx  eax,al
c001137b:	85 c0                	test   eax,eax
c001137d:	74 0d                	je     c001138c <KeResolveCompatibilitySymbol(char*)+0x30>
c001137f:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0011384:	e9 8b 01 00 00       	jmp    c0011514 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011389:	8d 76 00             	lea    esi,[esi+0x0]
c001138c:	83 ec 08             	sub    esp,0x8
c001138f:	68 4e 1c 02 c0       	push   0xc0021c4e
c0011394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011398:	e8 e3 f3 fe ff       	call   c0000780 <strcmp>
c001139d:	83 c4 10             	add    esp,0x10
c00113a0:	85 c0                	test   eax,eax
c00113a2:	0f 94 c0             	sete   al
c00113a5:	0f b6 c0             	movzx  eax,al
c00113a8:	85 c0                	test   eax,eax
c00113aa:	74 0c                	je     c00113b8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00113ac:	b8 30 f1 01 c0       	mov    eax,0xc001f130
c00113b1:	e9 5e 01 00 00       	jmp    c0011514 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00113b6:	66 90                	xchg   ax,ax
c00113b8:	83 ec 08             	sub    esp,0x8
c00113bb:	68 58 1c 02 c0       	push   0xc0021c58
c00113c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113c4:	e8 b7 f3 fe ff       	call   c0000780 <strcmp>
c00113c9:	83 c4 10             	add    esp,0x10
c00113cc:	85 c0                	test   eax,eax
c00113ce:	0f 94 c0             	sete   al
c00113d1:	0f b6 c0             	movzx  eax,al
c00113d4:	85 c0                	test   eax,eax
c00113d6:	74 0c                	je     c00113e4 <KeResolveCompatibilitySymbol(char*)+0x88>
c00113d8:	b8 64 ee 01 c0       	mov    eax,0xc001ee64
c00113dd:	e9 32 01 00 00       	jmp    c0011514 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00113e2:	66 90                	xchg   ax,ax
c00113e4:	83 ec 08             	sub    esp,0x8
c00113e7:	68 61 1c 02 c0       	push   0xc0021c61
c00113ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113f0:	e8 8b f3 fe ff       	call   c0000780 <strcmp>
c00113f5:	83 c4 10             	add    esp,0x10
c00113f8:	85 c0                	test   eax,eax
c00113fa:	0f 94 c0             	sete   al
c00113fd:	0f b6 c0             	movzx  eax,al
c0011400:	85 c0                	test   eax,eax
c0011402:	74 0c                	je     c0011410 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011404:	b8 71 11 01 c0       	mov    eax,0xc0011171
c0011409:	e9 06 01 00 00       	jmp    c0011514 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001140e:	66 90                	xchg   ax,ax
c0011410:	83 ec 08             	sub    esp,0x8
c0011413:	68 74 1c 02 c0       	push   0xc0021c74
c0011418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001141c:	e8 5f f3 fe ff       	call   c0000780 <strcmp>
c0011421:	83 c4 10             	add    esp,0x10
c0011424:	85 c0                	test   eax,eax
c0011426:	0f 94 c0             	sete   al
c0011429:	0f b6 c0             	movzx  eax,al
c001142c:	85 c0                	test   eax,eax
c001142e:	74 0c                	je     c001143c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011430:	b8 9c 0a 01 c0       	mov    eax,0xc0010a9c
c0011435:	e9 da 00 00 00       	jmp    c0011514 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001143a:	66 90                	xchg   ax,ax
c001143c:	83 ec 08             	sub    esp,0x8
c001143f:	68 91 1c 02 c0       	push   0xc0021c91
c0011444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011448:	e8 33 f3 fe ff       	call   c0000780 <strcmp>
c001144d:	83 c4 10             	add    esp,0x10
c0011450:	85 c0                	test   eax,eax
c0011452:	0f 94 c0             	sete   al
c0011455:	0f b6 c0             	movzx  eax,al
c0011458:	85 c0                	test   eax,eax
c001145a:	74 0c                	je     c0011468 <KeResolveCompatibilitySymbol(char*)+0x10c>
c001145c:	b8 30 f2 01 c0       	mov    eax,0xc001f230
c0011461:	e9 ae 00 00 00       	jmp    c0011514 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011466:	66 90                	xchg   ax,ax
c0011468:	83 ec 08             	sub    esp,0x8
c001146b:	68 9b 1c 02 c0       	push   0xc0021c9b
c0011470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011474:	e8 07 f3 fe ff       	call   c0000780 <strcmp>
c0011479:	83 c4 10             	add    esp,0x10
c001147c:	85 c0                	test   eax,eax
c001147e:	0f 94 c0             	sete   al
c0011481:	0f b6 c0             	movzx  eax,al
c0011484:	85 c0                	test   eax,eax
c0011486:	74 0c                	je     c0011494 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011488:	b8 b0 ef 01 c0       	mov    eax,0xc001efb0
c001148d:	e9 82 00 00 00       	jmp    c0011514 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011492:	66 90                	xchg   ax,ax
c0011494:	83 ec 08             	sub    esp,0x8
c0011497:	68 a4 1c 02 c0       	push   0xc0021ca4
c001149c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114a0:	e8 db f2 fe ff       	call   c0000780 <strcmp>
c00114a5:	83 c4 10             	add    esp,0x10
c00114a8:	85 c0                	test   eax,eax
c00114aa:	0f 94 c0             	sete   al
c00114ad:	0f b6 c0             	movzx  eax,al
c00114b0:	85 c0                	test   eax,eax
c00114b2:	74 08                	je     c00114bc <KeResolveCompatibilitySymbol(char*)+0x160>
c00114b4:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00114b9:	eb 59                	jmp    c0011514 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114bb:	90                   	nop
c00114bc:	83 ec 08             	sub    esp,0x8
c00114bf:	68 bc 1c 02 c0       	push   0xc0021cbc
c00114c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114c8:	e8 b3 f2 fe ff       	call   c0000780 <strcmp>
c00114cd:	83 c4 10             	add    esp,0x10
c00114d0:	85 c0                	test   eax,eax
c00114d2:	0f 94 c0             	sete   al
c00114d5:	0f b6 c0             	movzx  eax,al
c00114d8:	85 c0                	test   eax,eax
c00114da:	74 08                	je     c00114e4 <KeResolveCompatibilitySymbol(char*)+0x188>
c00114dc:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00114e1:	eb 31                	jmp    c0011514 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114e3:	90                   	nop
c00114e4:	83 ec 08             	sub    esp,0x8
c00114e7:	68 c9 1c 02 c0       	push   0xc0021cc9
c00114ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114f0:	e8 8b f2 fe ff       	call   c0000780 <strcmp>
c00114f5:	83 c4 10             	add    esp,0x10
c00114f8:	85 c0                	test   eax,eax
c00114fa:	0f 94 c0             	sete   al
c00114fd:	0f b6 c0             	movzx  eax,al
c0011500:	85 c0                	test   eax,eax
c0011502:	74 08                	je     c001150c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011504:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011509:	eb 09                	jmp    c0011514 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001150b:	90                   	nop
c001150c:	b8 00 00 00 00       	mov    eax,0x0
c0011511:	8d 76 00             	lea    esi,[esi+0x0]
c0011514:	83 c4 0c             	add    esp,0xc
c0011517:	c3                   	ret    

c0011518 <KiSigKill(int)>:
c0011518:	83 ec 0c             	sub    esp,0xc
c001151b:	6a 00                	push   0x0
c001151d:	6a 00                	push   0x0
c001151f:	6a ff                	push   0xffffffff
c0011521:	6a 01                	push   0x1
c0011523:	e8 2a 2b 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011528:	83 c4 1c             	add    esp,0x1c
c001152b:	c3                   	ret    

c001152c <KiDefaultSignalHandlerIgnore(int)>:
c001152c:	c3                   	ret    

c001152d <KiDefaultSignalHandlerPause(int)>:
c001152d:	57                   	push   edi
c001152e:	b9 07 00 00 00       	mov    ecx,0x7
c0011533:	56                   	push   esi
c0011534:	be 12 1d 02 c0       	mov    esi,0xc0021d12
c0011539:	83 ec 24             	sub    esp,0x24
c001153c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011540:	fc                   	cld    
c0011541:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011543:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011547:	50                   	push   eax
c0011548:	6a 00                	push   0x0
c001154a:	6a 00                	push   0x0
c001154c:	6a 27                	push   0x27
c001154e:	e8 ff 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011553:	83 c4 34             	add    esp,0x34
c0011556:	5e                   	pop    esi
c0011557:	5f                   	pop    edi
c0011558:	c3                   	ret    

c0011559 <KiDefaultSignalHandlerResume(int)>:
c0011559:	57                   	push   edi
c001155a:	b9 1d 00 00 00       	mov    ecx,0x1d
c001155f:	56                   	push   esi
c0011560:	be 2e 1d 02 c0       	mov    esi,0xc0021d2e
c0011565:	83 ec 24             	sub    esp,0x24
c0011568:	8d 7c 24 03          	lea    edi,[esp+0x3]
c001156c:	fc                   	cld    
c001156d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001156f:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011573:	50                   	push   eax
c0011574:	6a 00                	push   0x0
c0011576:	6a 00                	push   0x0
c0011578:	6a 27                	push   0x27
c001157a:	e8 d3 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001157f:	83 c4 34             	add    esp,0x34
c0011582:	5e                   	pop    esi
c0011583:	5f                   	pop    edi
c0011584:	c3                   	ret    

c0011585 <KeDeinitSignals(SigHandlerBlock*)>:
c0011585:	e9 59 65 ff ff       	jmp    c0007ae3 <free>

c001158a <KeInitSignals()>:
c001158a:	53                   	push   ebx
c001158b:	83 ec 14             	sub    esp,0x14
c001158e:	68 c8 00 00 00       	push   0xc8
c0011593:	e8 3b 65 ff ff       	call   c0007ad3 <malloc>
c0011598:	83 c4 0c             	add    esp,0xc
c001159b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00115a5:	89 c3                	mov    ebx,eax
c00115a7:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00115b1:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00115b7:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c00115bb:	6a 20                	push   0x20
c00115bd:	6a 00                	push   0x0
c00115bf:	50                   	push   eax
c00115c0:	e8 2b ef fe ff       	call   c00004f0 <memset>
c00115c5:	83 c4 0c             	add    esp,0xc
c00115c8:	6a 44                	push   0x44
c00115ca:	6a 00                	push   0x0
c00115cc:	53                   	push   ebx
c00115cd:	e8 1e ef fe ff       	call   c00004f0 <memset>
c00115d2:	83 c4 18             	add    esp,0x18
c00115d5:	89 d8                	mov    eax,ebx
c00115d7:	5b                   	pop    ebx
c00115d8:	c3                   	ret    

c00115d9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00115d9:	53                   	push   ebx
c00115da:	b8 01 00 00 00       	mov    eax,0x1
c00115df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00115e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00115e7:	83 f9 10             	cmp    ecx,0x10
c00115ea:	7f 21                	jg     c001160d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00115ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115f0:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00115f3:	89 03                	mov    DWORD PTR [ebx],eax
c00115f5:	b8 01 00 00 00       	mov    eax,0x1
c00115fa:	d3 e0                	shl    eax,cl
c00115fc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011600:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011603:	31 c0                	xor    eax,eax
c0011605:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001160d:	5b                   	pop    ebx
c001160e:	c3                   	ret    

c001160f <KeRaiseSignal(SigHandlerBlock*, int)>:
c001160f:	55                   	push   ebp
c0011610:	57                   	push   edi
c0011611:	bf 08 00 00 00       	mov    edi,0x8
c0011616:	56                   	push   esi
c0011617:	53                   	push   ebx
c0011618:	83 ec 18             	sub    esp,0x18
c001161b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001161f:	68 4b 1d 02 c0       	push   0xc0021d4b
c0011624:	e8 e1 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011629:	83 c4 10             	add    esp,0x10
c001162c:	31 c9                	xor    ecx,ecx
c001162e:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011635:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c001163b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001163f:	99                   	cdq    
c0011640:	f7 ff                	idiv   edi
c0011642:	8d 42 24             	lea    eax,[edx+0x24]
c0011645:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011649:	85 f6                	test   esi,esi
c001164b:	75 1a                	jne    c0011667 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c001164d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011651:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011655:	50                   	push   eax
c0011656:	50                   	push   eax
c0011657:	52                   	push   edx
c0011658:	68 5c 1d 02 c0       	push   0xc0021d5c
c001165d:	e8 a8 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011662:	83 c4 10             	add    esp,0x10
c0011665:	eb 1b                	jmp    c0011682 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011667:	41                   	inc    ecx
c0011668:	83 f9 08             	cmp    ecx,0x8
c001166b:	75 ce                	jne    c001163b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c001166d:	83 ec 0c             	sub    esp,0xc
c0011670:	be 01 00 00 00       	mov    esi,0x1
c0011675:	68 7d 1d 02 c0       	push   0xc0021d7d
c001167a:	e8 8b 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001167f:	83 c4 10             	add    esp,0x10
c0011682:	83 c4 0c             	add    esp,0xc
c0011685:	89 f0                	mov    eax,esi
c0011687:	5b                   	pop    ebx
c0011688:	5e                   	pop    esi
c0011689:	5f                   	pop    edi
c001168a:	5d                   	pop    ebp
c001168b:	c3                   	ret    

c001168c <KeCheckSignal(SigHandlerBlock*, int*)>:
c001168c:	55                   	push   ebp
c001168d:	57                   	push   edi
c001168e:	56                   	push   esi
c001168f:	53                   	push   ebx
c0011690:	51                   	push   ecx
c0011691:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011695:	85 db                	test   ebx,ebx
c0011697:	0f 84 bc 00 00 00    	je     c0011759 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001169d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00116a4:	0f 84 af 00 00 00    	je     c0011759 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00116aa:	31 c9                	xor    ecx,ecx
c00116ac:	bf 08 00 00 00       	mov    edi,0x8
c00116b1:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00116b7:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00116ba:	99                   	cdq    
c00116bb:	f7 ff                	idiv   edi
c00116bd:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00116c4:	85 ed                	test   ebp,ebp
c00116c6:	0f 84 9e 00 00 00    	je     c001176a <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00116cc:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00116d2:	89 e9                	mov    ecx,ebp
c00116d4:	bf 01 00 00 00       	mov    edi,0x1
c00116d9:	d3 e7                	shl    edi,cl
c00116db:	31 c9                	xor    ecx,ecx
c00116dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00116e0:	b8 01 00 00 00       	mov    eax,0x1
c00116e5:	d3 e0                	shl    eax,cl
c00116e7:	85 04 24             	test   DWORD PTR [esp],eax
c00116ea:	74 06                	je     c00116f2 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00116ec:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00116f0:	75 67                	jne    c0011759 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00116f2:	41                   	inc    ecx
c00116f3:	83 f9 11             	cmp    ecx,0x11
c00116f6:	75 e8                	jne    c00116e0 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00116f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00116fb:	46                   	inc    esi
c00116fc:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011702:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001170d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011714:	09 f8                	or     eax,edi
c0011716:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c001171c:	31 c0                	xor    eax,eax
c001171e:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011726:	74 09                	je     c0011731 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011728:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001172f:	eb 06                	jmp    c0011737 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011731:	40                   	inc    eax
c0011732:	83 f8 08             	cmp    eax,0x8
c0011735:	75 e7                	jne    c001171e <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011737:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001173b:	83 fd 09             	cmp    ebp,0x9
c001173e:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011741:	89 2a                	mov    DWORD PTR [edx],ebp
c0011743:	75 07                	jne    c001174c <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011745:	b8 18 15 01 c0       	mov    eax,0xc0011518
c001174a:	eb 31                	jmp    c001177d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001174c:	83 f8 01             	cmp    eax,0x1
c001174f:	75 0c                	jne    c001175d <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011751:	f7 d7                	not    edi
c0011753:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011759:	31 c0                	xor    eax,eax
c001175b:	eb 20                	jmp    c001177d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001175d:	85 c0                	test   eax,eax
c001175f:	75 1c                	jne    c001177d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011761:	8b 04 ad 80 31 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdce80]
c0011768:	eb 13                	jmp    c001177d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001176a:	41                   	inc    ecx
c001176b:	46                   	inc    esi
c001176c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011772:	83 f9 08             	cmp    ecx,0x8
c0011775:	0f 85 36 ff ff ff    	jne    c00116b1 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c001177b:	eb dc                	jmp    c0011759 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001177d:	5a                   	pop    edx
c001177e:	5b                   	pop    ebx
c001177f:	5e                   	pop    esi
c0011780:	5f                   	pop    edi
c0011781:	5d                   	pop    ebp
c0011782:	c3                   	ret    

c0011783 <KiCheckSignalZ>:
c0011783:	83 ec 10             	sub    esp,0x10
c0011786:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001178a:	50                   	push   eax
c001178b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011790:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011793:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011799:	e8 ee fe ff ff       	call   c001168c <KeCheckSignal(SigHandlerBlock*, int*)>
c001179e:	5a                   	pop    edx
c001179f:	31 d2                	xor    edx,edx
c00117a1:	59                   	pop    ecx
c00117a2:	85 c0                	test   eax,eax
c00117a4:	74 19                	je     c00117bf <KiCheckSignalZ+0x3c>
c00117a6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00117ac:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00117af:	89 02                	mov    DWORD PTR [edx],eax
c00117b1:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00117b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117bc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00117bf:	89 d0                	mov    eax,edx
c00117c1:	83 c4 10             	add    esp,0x10
c00117c4:	c3                   	ret    

c00117c5 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00117c5:	56                   	push   esi
c00117c6:	53                   	push   ebx
c00117c7:	bb 01 00 00 00       	mov    ebx,0x1
c00117cc:	52                   	push   edx
c00117cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00117d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00117d5:	d3 e3                	shl    ebx,cl
c00117d7:	83 f9 10             	cmp    ecx,0x10
c00117da:	7f 08                	jg     c00117e4 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00117dc:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00117e2:	75 10                	jne    c00117f4 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00117e4:	83 ec 0c             	sub    esp,0xc
c00117e7:	68 8e 1d 02 c0       	push   0xc0021d8e
c00117ec:	e8 80 f9 ff ff       	call   c0011171 <KePanic(char const*)>
c00117f1:	83 c4 10             	add    esp,0x10
c00117f4:	f7 d3                	not    ebx
c00117f6:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00117fc:	58                   	pop    eax
c00117fd:	5b                   	pop    ebx
c00117fe:	5e                   	pop    esi
c00117ff:	c3                   	ret    

c0011800 <KiFinishSignalZ>:
c0011800:	53                   	push   ebx
c0011801:	83 ec 10             	sub    esp,0x10
c0011804:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011808:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001180b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011810:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011813:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011819:	e8 a7 ff ff ff       	call   c00117c5 <KeCompleteSignal(SigHandlerBlock*, int)>
c001181e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011824:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001182b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011832:	83 c4 18             	add    esp,0x18
c0011835:	5b                   	pop    ebx
c0011836:	c3                   	ret    

c0011837 <SysSeekDir(regs*)>:
c0011837:	31 c0                	xor    eax,eax
c0011839:	31 d2                	xor    edx,edx
c001183b:	c3                   	ret    

c001183c <SysTellDir(regs*)>:
c001183c:	31 c0                	xor    eax,eax
c001183e:	31 d2                	xor    edx,edx
c0011840:	c3                   	ret    

c0011841 <SysVerify(regs*)>:
c0011841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011845:	31 d2                	xor    edx,edx
c0011847:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001184a:	c3                   	ret    

c001184b <SysGetArgc(regs*)>:
c001184b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011850:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011853:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011859:	89 c2                	mov    edx,eax
c001185b:	c1 fa 1f             	sar    edx,0x1f
c001185e:	c3                   	ret    

c001185f <SysTTYName(regs*)>:
c001185f:	b8 01 00 00 00       	mov    eax,0x1
c0011864:	31 d2                	xor    edx,edx
c0011866:	c3                   	ret    

c0011867 <SysFormatDisk(regs*)>:
c0011867:	56                   	push   esi
c0011868:	53                   	push   ebx
c0011869:	83 ec 04             	sub    esp,0x4
c001186c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011870:	8b 1d 64 70 02 c0    	mov    ebx,DWORD PTR ds:0xc0027064
c0011876:	eb 2a                	jmp    c00118a2 <SysFormatDisk(regs*)+0x3b>
c0011878:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001187b:	83 ec 0c             	sub    esp,0xc
c001187e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011881:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011883:	51                   	push   ecx
c0011884:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011887:	51                   	push   ecx
c0011888:	50                   	push   eax
c0011889:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c0011890:	50                   	push   eax
c0011891:	53                   	push   ebx
c0011892:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011895:	83 c4 20             	add    esp,0x20
c0011898:	83 f8 08             	cmp    eax,0x8
c001189b:	89 c1                	mov    ecx,eax
c001189d:	75 14                	jne    c00118b3 <SysFormatDisk(regs*)+0x4c>
c001189f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00118a2:	85 db                	test   ebx,ebx
c00118a4:	75 d2                	jne    c0011878 <SysFormatDisk(regs*)+0x11>
c00118a6:	b8 03 00 00 00       	mov    eax,0x3
c00118ab:	31 d2                	xor    edx,edx
c00118ad:	83 c4 04             	add    esp,0x4
c00118b0:	5b                   	pop    ebx
c00118b1:	5e                   	pop    esi
c00118b2:	c3                   	ret    
c00118b3:	85 c0                	test   eax,eax
c00118b5:	74 13                	je     c00118ca <SysFormatDisk(regs*)+0x63>
c00118b7:	31 d2                	xor    edx,edx
c00118b9:	83 f9 09             	cmp    ecx,0x9
c00118bc:	b8 01 00 00 00       	mov    eax,0x1
c00118c1:	74 ea                	je     c00118ad <SysFormatDisk(regs*)+0x46>
c00118c3:	b8 02 00 00 00       	mov    eax,0x2
c00118c8:	eb e1                	jmp    c00118ab <SysFormatDisk(regs*)+0x44>
c00118ca:	31 c0                	xor    eax,eax
c00118cc:	eb dd                	jmp    c00118ab <SysFormatDisk(regs*)+0x44>

c00118ce <SysSetDiskVolumeLabel(regs*)>:
c00118ce:	56                   	push   esi
c00118cf:	53                   	push   ebx
c00118d0:	83 ec 04             	sub    esp,0x4
c00118d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00118d7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00118da:	83 f8 19             	cmp    eax,0x19
c00118dd:	77 33                	ja     c0011912 <SysSetDiskVolumeLabel(regs*)+0x44>
c00118df:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c00118e6:	85 c9                	test   ecx,ecx
c00118e8:	74 28                	je     c0011912 <SysSetDiskVolumeLabel(regs*)+0x44>
c00118ea:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00118ed:	85 db                	test   ebx,ebx
c00118ef:	74 21                	je     c0011912 <SysSetDiskVolumeLabel(regs*)+0x44>
c00118f1:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00118f7:	85 d2                	test   edx,edx
c00118f9:	74 17                	je     c0011912 <SysSetDiskVolumeLabel(regs*)+0x44>
c00118fb:	8b 32                	mov    esi,DWORD PTR [edx]
c00118fd:	53                   	push   ebx
c00118fe:	50                   	push   eax
c00118ff:	51                   	push   ecx
c0011900:	52                   	push   edx
c0011901:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011904:	83 c4 10             	add    esp,0x10
c0011907:	83 c4 04             	add    esp,0x4
c001190a:	5b                   	pop    ebx
c001190b:	5e                   	pop    esi
c001190c:	89 c2                	mov    edx,eax
c001190e:	c1 fa 1f             	sar    edx,0x1f
c0011911:	c3                   	ret    
c0011912:	83 c4 04             	add    esp,0x4
c0011915:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001191a:	5b                   	pop    ebx
c001191b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011920:	5e                   	pop    esi
c0011921:	c3                   	ret    

c0011922 <SysGetDiskVolumeLabel(regs*)>:
c0011922:	57                   	push   edi
c0011923:	56                   	push   esi
c0011924:	53                   	push   ebx
c0011925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011929:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001192c:	83 fa 19             	cmp    edx,0x19
c001192f:	77 3c                	ja     c001196d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011931:	8b 0c 95 e0 94 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6b20]
c0011938:	85 c9                	test   ecx,ecx
c001193a:	74 31                	je     c001196d <SysGetDiskVolumeLabel(regs*)+0x4b>
c001193c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001193f:	85 db                	test   ebx,ebx
c0011941:	74 2a                	je     c001196d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011943:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011946:	85 f6                	test   esi,esi
c0011948:	74 23                	je     c001196d <SysGetDiskVolumeLabel(regs*)+0x4b>
c001194a:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011950:	85 c0                	test   eax,eax
c0011952:	74 19                	je     c001196d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011954:	83 ec 0c             	sub    esp,0xc
c0011957:	8b 38                	mov    edi,DWORD PTR [eax]
c0011959:	56                   	push   esi
c001195a:	53                   	push   ebx
c001195b:	52                   	push   edx
c001195c:	51                   	push   ecx
c001195d:	50                   	push   eax
c001195e:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011961:	83 c4 20             	add    esp,0x20
c0011964:	5b                   	pop    ebx
c0011965:	5e                   	pop    esi
c0011966:	89 c2                	mov    edx,eax
c0011968:	c1 fa 1f             	sar    edx,0x1f
c001196b:	5f                   	pop    edi
c001196c:	c3                   	ret    
c001196d:	5b                   	pop    ebx
c001196e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011973:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011978:	5e                   	pop    esi
c0011979:	5f                   	pop    edi
c001197a:	c3                   	ret    

c001197b <SysShutdown(regs*)>:
c001197b:	57                   	push   edi
c001197c:	56                   	push   esi
c001197d:	83 ec 04             	sub    esp,0x4
c0011980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011984:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011987:	85 c0                	test   eax,eax
c0011989:	74 1e                	je     c00119a9 <SysShutdown(regs*)+0x2e>
c001198b:	83 f8 01             	cmp    eax,0x1
c001198e:	74 5f                	je     c00119ef <SysShutdown(regs*)+0x74>
c0011990:	83 f8 02             	cmp    eax,0x2
c0011993:	be ff ff ff ff       	mov    esi,0xffffffff
c0011998:	bf ff ff ff ff       	mov    edi,0xffffffff
c001199d:	74 32                	je     c00119d1 <SysShutdown(regs*)+0x56>
c001199f:	83 c4 04             	add    esp,0x4
c00119a2:	89 f0                	mov    eax,esi
c00119a4:	5e                   	pop    esi
c00119a5:	89 fa                	mov    edx,edi
c00119a7:	5f                   	pop    edi
c00119a8:	c3                   	ret    
c00119a9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00119ae:	be ff ff ff ff       	mov    esi,0xffffffff
c00119b3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00119b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00119ba:	6a 00                	push   0x0
c00119bc:	6a 00                	push   0x0
c00119be:	6a 00                	push   0x0
c00119c0:	50                   	push   eax
c00119c1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00119c4:	83 c4 10             	add    esp,0x10
c00119c7:	89 f0                	mov    eax,esi
c00119c9:	83 c4 04             	add    esp,0x4
c00119cc:	89 fa                	mov    edx,edi
c00119ce:	5e                   	pop    esi
c00119cf:	5f                   	pop    edi
c00119d0:	c3                   	ret    
c00119d1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00119d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00119d8:	6a 00                	push   0x0
c00119da:	6a 00                	push   0x0
c00119dc:	6a 01                	push   0x1
c00119de:	50                   	push   eax
c00119df:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00119e2:	83 c4 10             	add    esp,0x10
c00119e5:	89 f0                	mov    eax,esi
c00119e7:	83 c4 04             	add    esp,0x4
c00119ea:	89 fa                	mov    edx,edi
c00119ec:	5e                   	pop    esi
c00119ed:	5f                   	pop    edi
c00119ee:	c3                   	ret    
c00119ef:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c00119f4:	85 c0                	test   eax,eax
c00119f6:	74 02                	je     c00119fa <SysShutdown(regs*)+0x7f>
c00119f8:	ff d0                	call   eax
c00119fa:	31 f6                	xor    esi,esi
c00119fc:	83 c4 04             	add    esp,0x4
c00119ff:	89 f0                	mov    eax,esi
c0011a01:	31 ff                	xor    edi,edi
c0011a03:	5e                   	pop    esi
c0011a04:	89 fa                	mov    edx,edi
c0011a06:	5f                   	pop    edi
c0011a07:	c3                   	ret    

c0011a08 <SysRealpath(regs*)>:
c0011a08:	53                   	push   ebx
c0011a09:	83 ec 08             	sub    esp,0x8
c0011a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a10:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011a13:	85 c9                	test   ecx,ecx
c0011a15:	74 37                	je     c0011a4e <SysRealpath(regs*)+0x46>
c0011a17:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011a1a:	31 d2                	xor    edx,edx
c0011a1c:	b8 01 00 00 00       	mov    eax,0x1
c0011a21:	85 db                	test   ebx,ebx
c0011a23:	75 05                	jne    c0011a2a <SysRealpath(regs*)+0x22>
c0011a25:	83 c4 08             	add    esp,0x8
c0011a28:	5b                   	pop    ebx
c0011a29:	c3                   	ret    
c0011a2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a2f:	83 ec 04             	sub    esp,0x4
c0011a32:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a35:	05 0c 01 00 00       	add    eax,0x10c
c0011a3a:	50                   	push   eax
c0011a3b:	51                   	push   ecx
c0011a3c:	53                   	push   ebx
c0011a3d:	e8 ca 9a ff ff       	call   c000b50c <Fs::standardiseFiles(char*, char const*, char const*)>
c0011a42:	83 c4 10             	add    esp,0x10
c0011a45:	31 c0                	xor    eax,eax
c0011a47:	31 d2                	xor    edx,edx
c0011a49:	83 c4 08             	add    esp,0x8
c0011a4c:	5b                   	pop    ebx
c0011a4d:	c3                   	ret    
c0011a4e:	b8 01 00 00 00       	mov    eax,0x1
c0011a53:	31 d2                	xor    edx,edx
c0011a55:	eb f2                	jmp    c0011a49 <SysRealpath(regs*)+0x41>

c0011a57 <SysReadDir(regs*)>:
c0011a57:	53                   	push   ebx
c0011a58:	83 ec 18             	sub    esp,0x18
c0011a5b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a5f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011a62:	83 f8 02             	cmp    eax,0x2
c0011a65:	76 4f                	jbe    c0011ab6 <SysReadDir(regs*)+0x5f>
c0011a67:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011a6e:	77 52                	ja     c0011ac2 <SysReadDir(regs*)+0x6b>
c0011a70:	83 ec 0c             	sub    esp,0xc
c0011a73:	50                   	push   eax
c0011a74:	e8 22 7a ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011a79:	83 c4 10             	add    esp,0x10
c0011a7c:	85 c0                	test   eax,eax
c0011a7e:	74 42                	je     c0011ac2 <SysReadDir(regs*)+0x6b>
c0011a80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011a88:	83 ec 0c             	sub    esp,0xc
c0011a8b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011a8f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a91:	51                   	push   ecx
c0011a92:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011a95:	51                   	push   ecx
c0011a96:	6a 00                	push   0x0
c0011a98:	68 10 01 00 00       	push   0x110
c0011a9d:	50                   	push   eax
c0011a9e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011aa1:	83 c4 20             	add    esp,0x20
c0011aa4:	85 c0                	test   eax,eax
c0011aa6:	89 c1                	mov    ecx,eax
c0011aa8:	74 27                	je     c0011ad1 <SysReadDir(regs*)+0x7a>
c0011aaa:	31 d2                	xor    edx,edx
c0011aac:	83 f9 07             	cmp    ecx,0x7
c0011aaf:	b8 02 00 00 00       	mov    eax,0x2
c0011ab4:	75 16                	jne    c0011acc <SysReadDir(regs*)+0x75>
c0011ab6:	b8 01 00 00 00       	mov    eax,0x1
c0011abb:	31 d2                	xor    edx,edx
c0011abd:	83 c4 18             	add    esp,0x18
c0011ac0:	5b                   	pop    ebx
c0011ac1:	c3                   	ret    
c0011ac2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ac7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011acc:	83 c4 18             	add    esp,0x18
c0011acf:	5b                   	pop    ebx
c0011ad0:	c3                   	ret    
c0011ad1:	31 c0                	xor    eax,eax
c0011ad3:	31 d2                	xor    edx,edx
c0011ad5:	eb e6                	jmp    c0011abd <SysReadDir(regs*)+0x66>

c0011ad7 <SysIsATTY(regs*)>:
c0011ad7:	83 ec 0c             	sub    esp,0xc
c0011ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ade:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ae1:	83 f8 02             	cmp    eax,0x2
c0011ae4:	76 07                	jbe    c0011aed <SysIsATTY(regs*)+0x16>
c0011ae6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011aeb:	75 26                	jne    c0011b13 <SysIsATTY(regs*)+0x3c>
c0011aed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011af2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011af5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011afb:	85 c0                	test   eax,eax
c0011afd:	74 24                	je     c0011b23 <SysIsATTY(regs*)+0x4c>
c0011aff:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b01:	83 ec 0c             	sub    esp,0xc
c0011b04:	50                   	push   eax
c0011b05:	ff 12                	call   DWORD PTR [edx]
c0011b07:	83 c4 10             	add    esp,0x10
c0011b0a:	31 d2                	xor    edx,edx
c0011b0c:	83 c4 0c             	add    esp,0xc
c0011b0f:	0f b6 c0             	movzx  eax,al
c0011b12:	c3                   	ret    
c0011b13:	83 ec 0c             	sub    esp,0xc
c0011b16:	50                   	push   eax
c0011b17:	e8 7f 79 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011b1c:	83 c4 10             	add    esp,0x10
c0011b1f:	85 c0                	test   eax,eax
c0011b21:	75 dc                	jne    c0011aff <SysIsATTY(regs*)+0x28>
c0011b23:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b28:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b2d:	83 c4 0c             	add    esp,0xc
c0011b30:	c3                   	ret    

c0011b31 <SysSeek(regs*)>:
c0011b31:	56                   	push   esi
c0011b32:	53                   	push   ebx
c0011b33:	83 ec 04             	sub    esp,0x4
c0011b36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b3a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011b3d:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011b40:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011b46:	77 33                	ja     c0011b7b <SysSeek(regs*)+0x4a>
c0011b48:	83 ec 0c             	sub    esp,0xc
c0011b4b:	51                   	push   ecx
c0011b4c:	e8 4a 79 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011b51:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011b54:	83 c4 0c             	add    esp,0xc
c0011b57:	31 db                	xor    ebx,ebx
c0011b59:	53                   	push   ebx
c0011b5a:	51                   	push   ecx
c0011b5b:	50                   	push   eax
c0011b5c:	e8 01 9d ff ff       	call   c000b862 <File::seek(unsigned long long)>
c0011b61:	83 c4 10             	add    esp,0x10
c0011b64:	85 c0                	test   eax,eax
c0011b66:	0f 95 c0             	setne  al
c0011b69:	31 d2                	xor    edx,edx
c0011b6b:	0f b6 c0             	movzx  eax,al
c0011b6e:	f7 d8                	neg    eax
c0011b70:	83 d2 00             	adc    edx,0x0
c0011b73:	83 c4 04             	add    esp,0x4
c0011b76:	5b                   	pop    ebx
c0011b77:	f7 da                	neg    edx
c0011b79:	5e                   	pop    esi
c0011b7a:	c3                   	ret    
c0011b7b:	83 c4 04             	add    esp,0x4
c0011b7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b83:	5b                   	pop    ebx
c0011b84:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b89:	5e                   	pop    esi
c0011b8a:	c3                   	ret    

c0011b8b <SysTell(regs*)>:
c0011b8b:	53                   	push   ebx
c0011b8c:	83 ec 08             	sub    esp,0x8
c0011b8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b93:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b96:	83 f8 02             	cmp    eax,0x2
c0011b99:	76 4e                	jbe    c0011be9 <SysTell(regs*)+0x5e>
c0011b9b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011ba0:	76 19                	jbe    c0011bbb <SysTell(regs*)+0x30>
c0011ba2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ba5:	31 d2                	xor    edx,edx
c0011ba7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011bad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bb4:	83 c4 08             	add    esp,0x8
c0011bb7:	31 c0                	xor    eax,eax
c0011bb9:	5b                   	pop    ebx
c0011bba:	c3                   	ret    
c0011bbb:	83 ec 0c             	sub    esp,0xc
c0011bbe:	50                   	push   eax
c0011bbf:	e8 d7 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011bc4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011bc7:	5a                   	pop    edx
c0011bc8:	59                   	pop    ecx
c0011bc9:	53                   	push   ebx
c0011bca:	50                   	push   eax
c0011bcb:	e8 3e 9d ff ff       	call   c000b90e <File::tell(unsigned long long*)>
c0011bd0:	83 c4 10             	add    esp,0x10
c0011bd3:	85 c0                	test   eax,eax
c0011bd5:	0f 95 c0             	setne  al
c0011bd8:	31 d2                	xor    edx,edx
c0011bda:	0f b6 c0             	movzx  eax,al
c0011bdd:	f7 d8                	neg    eax
c0011bdf:	83 d2 00             	adc    edx,0x0
c0011be2:	83 c4 08             	add    esp,0x8
c0011be5:	5b                   	pop    ebx
c0011be6:	f7 da                	neg    edx
c0011be8:	c3                   	ret    
c0011be9:	83 c4 08             	add    esp,0x8
c0011bec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bf1:	5b                   	pop    ebx
c0011bf2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bf7:	c3                   	ret    

c0011bf8 <SysSize(regs*)>:
c0011bf8:	53                   	push   ebx
c0011bf9:	83 ec 18             	sub    esp,0x18
c0011bfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c00:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c03:	83 f8 02             	cmp    eax,0x2
c0011c06:	76 54                	jbe    c0011c5c <SysSize(regs*)+0x64>
c0011c08:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c0d:	76 19                	jbe    c0011c28 <SysSize(regs*)+0x30>
c0011c0f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c12:	31 d2                	xor    edx,edx
c0011c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c1a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c21:	83 c4 18             	add    esp,0x18
c0011c24:	31 c0                	xor    eax,eax
c0011c26:	5b                   	pop    ebx
c0011c27:	c3                   	ret    
c0011c28:	83 ec 0c             	sub    esp,0xc
c0011c2b:	50                   	push   eax
c0011c2c:	e8 6a 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c31:	83 c4 0c             	add    esp,0xc
c0011c34:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011c38:	52                   	push   edx
c0011c39:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c3c:	52                   	push   edx
c0011c3d:	50                   	push   eax
c0011c3e:	e8 63 9e ff ff       	call   c000baa6 <File::stat(unsigned long long*, bool*)>
c0011c43:	83 c4 10             	add    esp,0x10
c0011c46:	85 c0                	test   eax,eax
c0011c48:	0f 95 c0             	setne  al
c0011c4b:	31 d2                	xor    edx,edx
c0011c4d:	0f b6 c0             	movzx  eax,al
c0011c50:	f7 d8                	neg    eax
c0011c52:	83 d2 00             	adc    edx,0x0
c0011c55:	83 c4 18             	add    esp,0x18
c0011c58:	5b                   	pop    ebx
c0011c59:	f7 da                	neg    edx
c0011c5b:	c3                   	ret    
c0011c5c:	83 c4 18             	add    esp,0x18
c0011c5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c64:	5b                   	pop    ebx
c0011c65:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c6a:	c3                   	ret    

c0011c6b <SysSizeFromFilename(regs*)>:
c0011c6b:	57                   	push   edi
c0011c6c:	56                   	push   esi
c0011c6d:	53                   	push   ebx
c0011c6e:	83 ec 10             	sub    esp,0x10
c0011c71:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011c75:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011c78:	83 fb 02             	cmp    ebx,0x2
c0011c7b:	0f 86 83 00 00 00    	jbe    c0011d04 <SysSizeFromFilename(regs*)+0x99>
c0011c81:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011c87:	76 1b                	jbe    c0011ca4 <SysSizeFromFilename(regs*)+0x39>
c0011c89:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011c8c:	31 d2                	xor    edx,edx
c0011c8e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c9b:	83 c4 10             	add    esp,0x10
c0011c9e:	31 c0                	xor    eax,eax
c0011ca0:	5b                   	pop    ebx
c0011ca1:	5e                   	pop    esi
c0011ca2:	5f                   	pop    edi
c0011ca3:	c3                   	ret    
c0011ca4:	83 ec 0c             	sub    esp,0xc
c0011ca7:	68 14 01 00 00       	push   0x114
c0011cac:	e8 22 5e ff ff       	call   c0007ad3 <malloc>
c0011cb1:	83 c4 0c             	add    esp,0xc
c0011cb4:	89 c7                	mov    edi,eax
c0011cb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cbb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cbe:	50                   	push   eax
c0011cbf:	53                   	push   ebx
c0011cc0:	57                   	push   edi
c0011cc1:	e8 22 9a ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c0011cc6:	83 c4 0c             	add    esp,0xc
c0011cc9:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011ccd:	50                   	push   eax
c0011cce:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011cd1:	52                   	push   edx
c0011cd2:	57                   	push   edi
c0011cd3:	e8 ce 9d ff ff       	call   c000baa6 <File::stat(unsigned long long*, bool*)>
c0011cd8:	83 c4 10             	add    esp,0x10
c0011cdb:	85 ff                	test   edi,edi
c0011cdd:	89 c3                	mov    ebx,eax
c0011cdf:	74 0c                	je     c0011ced <SysSizeFromFilename(regs*)+0x82>
c0011ce1:	8b 07                	mov    eax,DWORD PTR [edi]
c0011ce3:	83 ec 0c             	sub    esp,0xc
c0011ce6:	57                   	push   edi
c0011ce7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011cea:	83 c4 10             	add    esp,0x10
c0011ced:	31 c0                	xor    eax,eax
c0011cef:	85 db                	test   ebx,ebx
c0011cf1:	0f 95 c0             	setne  al
c0011cf4:	31 d2                	xor    edx,edx
c0011cf6:	f7 d8                	neg    eax
c0011cf8:	83 d2 00             	adc    edx,0x0
c0011cfb:	83 c4 10             	add    esp,0x10
c0011cfe:	5b                   	pop    ebx
c0011cff:	f7 da                	neg    edx
c0011d01:	5e                   	pop    esi
c0011d02:	5f                   	pop    edi
c0011d03:	c3                   	ret    
c0011d04:	83 c4 10             	add    esp,0x10
c0011d07:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d0c:	5b                   	pop    ebx
c0011d0d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d12:	5e                   	pop    esi
c0011d13:	5f                   	pop    edi
c0011d14:	c3                   	ret    

c0011d15 <SysClose(regs*)>:
c0011d15:	53                   	push   ebx
c0011d16:	83 ec 08             	sub    esp,0x8
c0011d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d1d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d20:	83 f8 02             	cmp    eax,0x2
c0011d23:	76 41                	jbe    c0011d66 <SysClose(regs*)+0x51>
c0011d25:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011d2b:	83 fa 01             	cmp    edx,0x1
c0011d2e:	76 2d                	jbe    c0011d5d <SysClose(regs*)+0x48>
c0011d30:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d35:	77 2f                	ja     c0011d66 <SysClose(regs*)+0x51>
c0011d37:	83 ec 0c             	sub    esp,0xc
c0011d3a:	50                   	push   eax
c0011d3b:	e8 5b 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011d40:	89 04 24             	mov    DWORD PTR [esp],eax
c0011d43:	89 c3                	mov    ebx,eax
c0011d45:	e8 b8 9a ff ff       	call   c000b802 <File::close()>
c0011d4a:	83 c4 10             	add    esp,0x10
c0011d4d:	85 db                	test   ebx,ebx
c0011d4f:	74 0c                	je     c0011d5d <SysClose(regs*)+0x48>
c0011d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d53:	83 ec 0c             	sub    esp,0xc
c0011d56:	53                   	push   ebx
c0011d57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d5a:	83 c4 10             	add    esp,0x10
c0011d5d:	83 c4 08             	add    esp,0x8
c0011d60:	31 c0                	xor    eax,eax
c0011d62:	5b                   	pop    ebx
c0011d63:	31 d2                	xor    edx,edx
c0011d65:	c3                   	ret    
c0011d66:	83 c4 08             	add    esp,0x8
c0011d69:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d6e:	5b                   	pop    ebx
c0011d6f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d74:	c3                   	ret    

c0011d75 <SysOpenDir(regs*)>:
c0011d75:	56                   	push   esi
c0011d76:	53                   	push   ebx
c0011d77:	83 ec 04             	sub    esp,0x4
c0011d7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d7e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011d81:	85 c9                	test   ecx,ecx
c0011d83:	74 5d                	je     c0011de2 <SysOpenDir(regs*)+0x6d>
c0011d85:	83 ec 0c             	sub    esp,0xc
c0011d88:	68 14 01 00 00       	push   0x114
c0011d8d:	e8 41 5d ff ff       	call   c0007ad3 <malloc>
c0011d92:	83 c4 0c             	add    esp,0xc
c0011d95:	89 c6                	mov    esi,eax
c0011d97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d9c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d9f:	50                   	push   eax
c0011da0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011da3:	52                   	push   edx
c0011da4:	56                   	push   esi
c0011da5:	e8 ba 9e ff ff       	call   c000bc64 <Directory::Directory(char const*, Process*)>
c0011daa:	83 c4 10             	add    esp,0x10
c0011dad:	85 f6                	test   esi,esi
c0011daf:	74 31                	je     c0011de2 <SysOpenDir(regs*)+0x6d>
c0011db1:	83 ec 0c             	sub    esp,0xc
c0011db4:	56                   	push   esi
c0011db5:	e8 66 9f ff ff       	call   c000bd20 <Directory::open()>
c0011dba:	83 c4 10             	add    esp,0x10
c0011dbd:	85 c0                	test   eax,eax
c0011dbf:	75 21                	jne    c0011de2 <SysOpenDir(regs*)+0x6d>
c0011dc1:	83 ec 0c             	sub    esp,0xc
c0011dc4:	56                   	push   esi
c0011dc5:	e8 d4 73 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0011dca:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011dcd:	83 c4 10             	add    esp,0x10
c0011dd0:	89 02                	mov    DWORD PTR [edx],eax
c0011dd2:	c1 f8 1f             	sar    eax,0x1f
c0011dd5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011dd8:	83 c4 04             	add    esp,0x4
c0011ddb:	31 c0                	xor    eax,eax
c0011ddd:	5b                   	pop    ebx
c0011dde:	31 d2                	xor    edx,edx
c0011de0:	5e                   	pop    esi
c0011de1:	c3                   	ret    
c0011de2:	83 c4 04             	add    esp,0x4
c0011de5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dea:	5b                   	pop    ebx
c0011deb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011df0:	5e                   	pop    esi
c0011df1:	c3                   	ret    

c0011df2 <SysMakeDir(regs*)>:
c0011df2:	56                   	push   esi
c0011df3:	53                   	push   ebx
c0011df4:	83 ec 10             	sub    esp,0x10
c0011df7:	68 14 01 00 00       	push   0x114
c0011dfc:	e8 d2 5c ff ff       	call   c0007ad3 <malloc>
c0011e01:	83 c4 0c             	add    esp,0xc
c0011e04:	89 c3                	mov    ebx,eax
c0011e06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e0b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e0e:	50                   	push   eax
c0011e0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e13:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011e16:	52                   	push   edx
c0011e17:	53                   	push   ebx
c0011e18:	e8 47 9e ff ff       	call   c000bc64 <Directory::Directory(char const*, Process*)>
c0011e1d:	83 c4 10             	add    esp,0x10
c0011e20:	85 db                	test   ebx,ebx
c0011e22:	74 2c                	je     c0011e50 <SysMakeDir(regs*)+0x5e>
c0011e24:	83 ec 0c             	sub    esp,0xc
c0011e27:	53                   	push   ebx
c0011e28:	e8 d3 a0 ff ff       	call   c000bf00 <Directory::create()>
c0011e2d:	89 c6                	mov    esi,eax
c0011e2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e37:	83 c4 10             	add    esp,0x10
c0011e3a:	31 c0                	xor    eax,eax
c0011e3c:	85 f6                	test   esi,esi
c0011e3e:	0f 95 c0             	setne  al
c0011e41:	31 d2                	xor    edx,edx
c0011e43:	f7 d8                	neg    eax
c0011e45:	83 d2 00             	adc    edx,0x0
c0011e48:	83 c4 04             	add    esp,0x4
c0011e4b:	5b                   	pop    ebx
c0011e4c:	f7 da                	neg    edx
c0011e4e:	5e                   	pop    esi
c0011e4f:	c3                   	ret    
c0011e50:	83 c4 04             	add    esp,0x4
c0011e53:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e58:	5b                   	pop    ebx
c0011e59:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e5e:	5e                   	pop    esi
c0011e5f:	c3                   	ret    

c0011e60 <SysCloseDir(regs*)>:
c0011e60:	53                   	push   ebx
c0011e61:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e66:	83 ec 08             	sub    esp,0x8
c0011e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e6d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011e70:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e75:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011e78:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0011e7e:	77 2a                	ja     c0011eaa <SysCloseDir(regs*)+0x4a>
c0011e80:	83 ec 0c             	sub    esp,0xc
c0011e83:	51                   	push   ecx
c0011e84:	e8 12 76 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011e89:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e8c:	89 c3                	mov    ebx,eax
c0011e8e:	e8 e9 9e ff ff       	call   c000bd7c <Directory::close()>
c0011e93:	83 c4 10             	add    esp,0x10
c0011e96:	85 db                	test   ebx,ebx
c0011e98:	74 0c                	je     c0011ea6 <SysCloseDir(regs*)+0x46>
c0011e9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e9c:	83 ec 0c             	sub    esp,0xc
c0011e9f:	53                   	push   ebx
c0011ea0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ea3:	83 c4 10             	add    esp,0x10
c0011ea6:	31 c0                	xor    eax,eax
c0011ea8:	31 d2                	xor    edx,edx
c0011eaa:	83 c4 08             	add    esp,0x8
c0011ead:	5b                   	pop    ebx
c0011eae:	c3                   	ret    

c0011eaf <SysWait(regs*)>:
c0011eaf:	83 ec 10             	sub    esp,0x10
c0011eb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011eb6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011eb9:	52                   	push   edx
c0011eba:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011ebd:	51                   	push   ecx
c0011ebe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ec1:	50                   	push   eax
c0011ec2:	e8 e5 3d 00 00       	call   c0015cac <waitTask(int, int*, int)>
c0011ec7:	83 c4 1c             	add    esp,0x1c
c0011eca:	89 c2                	mov    edx,eax
c0011ecc:	c1 fa 1f             	sar    edx,0x1f
c0011ecf:	c3                   	ret    

c0011ed0 <SysNotImpl(regs*)>:
c0011ed0:	83 ec 18             	sub    esp,0x18
c0011ed3:	68 9f 1d 02 c0       	push   0xc0021d9f
c0011ed8:	e8 94 f2 ff ff       	call   c0011171 <KePanic(char const*)>
c0011edd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ee2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ee7:	83 c4 1c             	add    esp,0x1c
c0011eea:	c3                   	ret    

c0011eeb <SysPanic(regs*)>:
c0011eeb:	83 ec 18             	sub    esp,0x18
c0011eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ef2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011ef5:	50                   	push   eax
c0011ef6:	e8 76 f2 ff ff       	call   c0011171 <KePanic(char const*)>
c0011efb:	b8 01 00 00 00       	mov    eax,0x1
c0011f00:	31 d2                	xor    edx,edx
c0011f02:	83 c4 1c             	add    esp,0x1c
c0011f05:	c3                   	ret    

c0011f06 <SysRmdir(regs*)>:
c0011f06:	56                   	push   esi
c0011f07:	53                   	push   ebx
c0011f08:	83 ec 10             	sub    esp,0x10
c0011f0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f0f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011f12:	68 14 01 00 00       	push   0x114
c0011f17:	e8 b7 5b ff ff       	call   c0007ad3 <malloc>
c0011f1c:	83 c4 0c             	add    esp,0xc
c0011f1f:	89 c3                	mov    ebx,eax
c0011f21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f26:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f29:	50                   	push   eax
c0011f2a:	56                   	push   esi
c0011f2b:	53                   	push   ebx
c0011f2c:	e8 b7 97 ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c0011f31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f34:	e8 39 9a ff ff       	call   c000b972 <File::unlink()>
c0011f39:	83 c4 10             	add    esp,0x10
c0011f3c:	85 db                	test   ebx,ebx
c0011f3e:	89 c6                	mov    esi,eax
c0011f40:	74 0c                	je     c0011f4e <SysRmdir(regs*)+0x48>
c0011f42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f44:	83 ec 0c             	sub    esp,0xc
c0011f47:	53                   	push   ebx
c0011f48:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f4b:	83 c4 10             	add    esp,0x10
c0011f4e:	31 c0                	xor    eax,eax
c0011f50:	85 f6                	test   esi,esi
c0011f52:	0f 95 c0             	setne  al
c0011f55:	31 d2                	xor    edx,edx
c0011f57:	f7 d8                	neg    eax
c0011f59:	83 d2 00             	adc    edx,0x0
c0011f5c:	83 c4 04             	add    esp,0x4
c0011f5f:	5b                   	pop    ebx
c0011f60:	f7 da                	neg    edx
c0011f62:	5e                   	pop    esi
c0011f63:	c3                   	ret    

c0011f64 <SysUnlink(regs*)>:
c0011f64:	56                   	push   esi
c0011f65:	53                   	push   ebx
c0011f66:	83 ec 10             	sub    esp,0x10
c0011f69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f6d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011f70:	68 14 01 00 00       	push   0x114
c0011f75:	e8 59 5b ff ff       	call   c0007ad3 <malloc>
c0011f7a:	83 c4 0c             	add    esp,0xc
c0011f7d:	89 c3                	mov    ebx,eax
c0011f7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f84:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f87:	50                   	push   eax
c0011f88:	56                   	push   esi
c0011f89:	53                   	push   ebx
c0011f8a:	e8 59 97 ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c0011f8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f92:	e8 db 99 ff ff       	call   c000b972 <File::unlink()>
c0011f97:	83 c4 10             	add    esp,0x10
c0011f9a:	85 db                	test   ebx,ebx
c0011f9c:	89 c6                	mov    esi,eax
c0011f9e:	74 0c                	je     c0011fac <SysUnlink(regs*)+0x48>
c0011fa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fa2:	83 ec 0c             	sub    esp,0xc
c0011fa5:	53                   	push   ebx
c0011fa6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011fa9:	83 c4 10             	add    esp,0x10
c0011fac:	31 c0                	xor    eax,eax
c0011fae:	85 f6                	test   esi,esi
c0011fb0:	0f 95 c0             	setne  al
c0011fb3:	31 d2                	xor    edx,edx
c0011fb5:	f7 d8                	neg    eax
c0011fb7:	83 d2 00             	adc    edx,0x0
c0011fba:	83 c4 04             	add    esp,0x4
c0011fbd:	5b                   	pop    ebx
c0011fbe:	f7 da                	neg    edx
c0011fc0:	5e                   	pop    esi
c0011fc1:	c3                   	ret    

c0011fc2 <SysGetArgv(regs*)>:
c0011fc2:	83 ec 0c             	sub    esp,0xc
c0011fc5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011fc9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011fcc:	85 c0                	test   eax,eax
c0011fce:	78 2c                	js     c0011ffc <SysGetArgv(regs*)+0x3a>
c0011fd0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011fd6:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011fd9:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011fdf:	7d 1b                	jge    c0011ffc <SysGetArgv(regs*)+0x3a>
c0011fe1:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011fe8:	85 c0                	test   eax,eax
c0011fea:	74 18                	je     c0012004 <SysGetArgv(regs*)+0x42>
c0011fec:	83 ec 08             	sub    esp,0x8
c0011fef:	50                   	push   eax
c0011ff0:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011ff3:	50                   	push   eax
c0011ff4:	e8 57 e6 fe ff       	call   c0000650 <strcpy>
c0011ff9:	83 c4 10             	add    esp,0x10
c0011ffc:	31 c0                	xor    eax,eax
c0011ffe:	31 d2                	xor    edx,edx
c0012000:	83 c4 0c             	add    esp,0xc
c0012003:	c3                   	ret    
c0012004:	b8 01 00 00 00       	mov    eax,0x1
c0012009:	31 d2                	xor    edx,edx
c001200b:	83 c4 0c             	add    esp,0xc
c001200e:	c3                   	ret    

c001200f <SysUSleep(regs*)>:
c001200f:	83 ec 1c             	sub    esp,0x1c
c0012012:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012016:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012019:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001201c:	6a 00                	push   0x0
c001201e:	6a 64                	push   0x64
c0012020:	52                   	push   edx
c0012021:	50                   	push   eax
c0012022:	e8 09 d1 00 00       	call   c001f130 <__udivdi3>
c0012027:	83 c4 14             	add    esp,0x14
c001202a:	50                   	push   eax
c001202b:	e8 60 3d 00 00       	call   c0015d90 <milliTenthSleep(unsigned int)>
c0012030:	31 c0                	xor    eax,eax
c0012032:	31 d2                	xor    edx,edx
c0012034:	83 c4 1c             	add    esp,0x1c
c0012037:	c3                   	ret    

c0012038 <SysSpawn(regs*)>:
c0012038:	56                   	push   esi
c0012039:	53                   	push   ebx
c001203a:	83 ec 04             	sub    esp,0x4
c001203d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012041:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012044:	85 f6                	test   esi,esi
c0012046:	75 0a                	jne    c0012052 <SysSpawn(regs*)+0x1a>
c0012048:	83 c4 04             	add    esp,0x4
c001204b:	31 c0                	xor    eax,eax
c001204d:	5b                   	pop    ebx
c001204e:	31 d2                	xor    edx,edx
c0012050:	5e                   	pop    esi
c0012051:	c3                   	ret    
c0012052:	83 ec 0c             	sub    esp,0xc
c0012055:	68 24 07 00 00       	push   0x724
c001205a:	e8 74 5a ff ff       	call   c0007ad3 <malloc>
c001205f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012062:	83 c4 10             	add    esp,0x10
c0012065:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012068:	89 c6                	mov    esi,eax
c001206a:	31 c0                	xor    eax,eax
c001206c:	85 c9                	test   ecx,ecx
c001206e:	75 08                	jne    c0012078 <SysSpawn(regs*)+0x40>
c0012070:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012075:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012078:	52                   	push   edx
c0012079:	50                   	push   eax
c001207a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001207d:	50                   	push   eax
c001207e:	56                   	push   esi
c001207f:	e8 74 33 00 00       	call   c00153f8 <Process::Process(char const*, Process*, char**)>
c0012084:	83 c4 10             	add    esp,0x10
c0012087:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001208e:	75 b8                	jne    c0012048 <SysSpawn(regs*)+0x10>
c0012090:	83 ec 0c             	sub    esp,0xc
c0012093:	56                   	push   esi
c0012094:	e8 97 38 00 00       	call   c0015930 <Process::createUserThread()>
c0012099:	8b 06                	mov    eax,DWORD PTR [esi]
c001209b:	83 c4 10             	add    esp,0x10
c001209e:	83 c4 04             	add    esp,0x4
c00120a1:	5b                   	pop    ebx
c00120a2:	89 c2                	mov    edx,eax
c00120a4:	c1 fa 1f             	sar    edx,0x1f
c00120a7:	5e                   	pop    esi
c00120a8:	c3                   	ret    

c00120a9 <SysGetEnv(regs*)>:
c00120a9:	57                   	push   edi
c00120aa:	56                   	push   esi
c00120ab:	53                   	push   ebx
c00120ac:	83 ec 1c             	sub    esp,0x1c
c00120af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120b4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00120b8:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00120bb:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00120be:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00120c1:	51                   	push   ecx
c00120c2:	e8 62 ef ff ff       	call   c0011029 <KeGetProcessTotalEnvCount(Process*)>
c00120c7:	83 c4 10             	add    esp,0x10
c00120ca:	39 c7                	cmp    edi,eax
c00120cc:	7c 12                	jl     c00120e0 <SysGetEnv(regs*)+0x37>
c00120ce:	31 c0                	xor    eax,eax
c00120d0:	31 d2                	xor    edx,edx
c00120d2:	85 f6                	test   esi,esi
c00120d4:	74 03                	je     c00120d9 <SysGetEnv(regs*)+0x30>
c00120d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00120d9:	83 c4 10             	add    esp,0x10
c00120dc:	5b                   	pop    ebx
c00120dd:	5e                   	pop    esi
c00120de:	5f                   	pop    edi
c00120df:	c3                   	ret    
c00120e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00120e4:	83 ec 04             	sub    esp,0x4
c00120e7:	57                   	push   edi
c00120e8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00120ee:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00120f1:	57                   	push   edi
c00120f2:	50                   	push   eax
c00120f3:	e8 51 ef ff ff       	call   c0011049 <KeGetProcessEnvPair(Process*, int)>
c00120f8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012103:	83 c4 0c             	add    esp,0xc
c0012106:	85 d2                	test   edx,edx
c0012108:	75 23                	jne    c001212d <SysGetEnv(regs*)+0x84>
c001210a:	83 ec 0c             	sub    esp,0xc
c001210d:	50                   	push   eax
c001210e:	e8 6d e4 fe ff       	call   c0000580 <strlen>
c0012113:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012116:	89 c3                	mov    ebx,eax
c0012118:	e8 63 e4 fe ff       	call   c0000580 <strlen>
c001211d:	83 c4 10             	add    esp,0x10
c0012120:	31 d2                	xor    edx,edx
c0012122:	83 c4 10             	add    esp,0x10
c0012125:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012129:	5b                   	pop    ebx
c001212a:	5e                   	pop    esi
c001212b:	5f                   	pop    edi
c001212c:	c3                   	ret    
c001212d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012130:	83 ec 08             	sub    esp,0x8
c0012133:	50                   	push   eax
c0012134:	56                   	push   esi
c0012135:	e8 16 e5 fe ff       	call   c0000650 <strcpy>
c001213a:	58                   	pop    eax
c001213b:	5a                   	pop    edx
c001213c:	68 b9 1d 02 c0       	push   0xc0021db9
c0012141:	56                   	push   esi
c0012142:	e8 29 e7 fe ff       	call   c0000870 <strcat>
c0012147:	59                   	pop    ecx
c0012148:	5b                   	pop    ebx
c0012149:	57                   	push   edi
c001214a:	56                   	push   esi
c001214b:	e8 20 e7 fe ff       	call   c0000870 <strcat>
c0012150:	83 c4 10             	add    esp,0x10
c0012153:	31 c0                	xor    eax,eax
c0012155:	83 c4 10             	add    esp,0x10
c0012158:	31 d2                	xor    edx,edx
c001215a:	5b                   	pop    ebx
c001215b:	5e                   	pop    esi
c001215c:	5f                   	pop    edi
c001215d:	c3                   	ret    

c001215e <SysSetFatAttrib(regs*)>:
c001215e:	57                   	push   edi
c001215f:	56                   	push   esi
c0012160:	53                   	push   ebx
c0012161:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012165:	83 ec 0c             	sub    esp,0xc
c0012168:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001216b:	68 14 01 00 00       	push   0x114
c0012170:	e8 5e 59 ff ff       	call   c0007ad3 <malloc>
c0012175:	83 c4 0c             	add    esp,0xc
c0012178:	89 c3                	mov    ebx,eax
c001217a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001217f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012182:	50                   	push   eax
c0012183:	57                   	push   edi
c0012184:	53                   	push   ebx
c0012185:	e8 5e 95 ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c001218a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001218d:	83 c4 0c             	add    esp,0xc
c0012190:	0f b6 d4             	movzx  edx,ah
c0012193:	0f b6 c0             	movzx  eax,al
c0012196:	52                   	push   edx
c0012197:	50                   	push   eax
c0012198:	53                   	push   ebx
c0012199:	e8 6e 98 ff ff       	call   c000ba0c <File::chfatattr(unsigned char, unsigned char)>
c001219e:	83 c4 10             	add    esp,0x10
c00121a1:	85 db                	test   ebx,ebx
c00121a3:	89 c6                	mov    esi,eax
c00121a5:	74 0c                	je     c00121b3 <SysSetFatAttrib(regs*)+0x55>
c00121a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121a9:	83 ec 0c             	sub    esp,0xc
c00121ac:	53                   	push   ebx
c00121ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00121b0:	83 c4 10             	add    esp,0x10
c00121b3:	5b                   	pop    ebx
c00121b4:	31 c0                	xor    eax,eax
c00121b6:	85 f6                	test   esi,esi
c00121b8:	0f 95 c0             	setne  al
c00121bb:	31 d2                	xor    edx,edx
c00121bd:	5e                   	pop    esi
c00121be:	f7 d8                	neg    eax
c00121c0:	83 d2 00             	adc    edx,0x0
c00121c3:	f7 da                	neg    edx
c00121c5:	5f                   	pop    edi
c00121c6:	c3                   	ret    

c00121c7 <SysPipe(regs*)>:
c00121c7:	57                   	push   edi
c00121c8:	56                   	push   esi
c00121c9:	53                   	push   ebx
c00121ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121ce:	83 ec 0c             	sub    esp,0xc
c00121d1:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00121d4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00121d7:	6a 20                	push   0x20
c00121d9:	e8 f5 58 ff ff       	call   c0007ad3 <malloc>
c00121de:	89 c3                	mov    ebx,eax
c00121e0:	58                   	pop    eax
c00121e1:	5a                   	pop    edx
c00121e2:	68 00 50 00 00       	push   0x5000
c00121e7:	53                   	push   ebx
c00121e8:	e8 51 62 ff ff       	call   c000843e <Pipe::Pipe(int)>
c00121ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121f0:	e8 a9 6f ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00121f5:	89 07                	mov    DWORD PTR [edi],eax
c00121f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121fa:	e8 9f 6f ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00121ff:	83 c4 10             	add    esp,0x10
c0012202:	31 d2                	xor    edx,edx
c0012204:	89 06                	mov    DWORD PTR [esi],eax
c0012206:	31 c0                	xor    eax,eax
c0012208:	5b                   	pop    ebx
c0012209:	5e                   	pop    esi
c001220a:	5f                   	pop    edi
c001220b:	c3                   	ret    

c001220c <SysGetUnixTime(regs*)>:
c001220c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0012211:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012217:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001221b:	e9 26 9f ff ff       	jmp    c000c146 <Clock::timeInSecondsLocal()>

c0012220 <string_ends_with(char const*, char const*)>:
c0012220:	57                   	push   edi
c0012221:	56                   	push   esi
c0012222:	53                   	push   ebx
c0012223:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012227:	83 ec 0c             	sub    esp,0xc
c001222a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001222e:	53                   	push   ebx
c001222f:	e8 4c e3 fe ff       	call   c0000580 <strlen>
c0012234:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012237:	89 c6                	mov    esi,eax
c0012239:	e8 42 e3 fe ff       	call   c0000580 <strlen>
c001223e:	83 c4 10             	add    esp,0x10
c0012241:	31 d2                	xor    edx,edx
c0012243:	39 c6                	cmp    esi,eax
c0012245:	7d 06                	jge    c001224d <string_ends_with(char const*, char const*)+0x2d>
c0012247:	5b                   	pop    ebx
c0012248:	89 d0                	mov    eax,edx
c001224a:	5e                   	pop    esi
c001224b:	5f                   	pop    edi
c001224c:	c3                   	ret    
c001224d:	83 ec 08             	sub    esp,0x8
c0012250:	29 c6                	sub    esi,eax
c0012252:	57                   	push   edi
c0012253:	01 f3                	add    ebx,esi
c0012255:	53                   	push   ebx
c0012256:	e8 25 e5 fe ff       	call   c0000780 <strcmp>
c001225b:	83 c4 10             	add    esp,0x10
c001225e:	31 d2                	xor    edx,edx
c0012260:	5b                   	pop    ebx
c0012261:	5e                   	pop    esi
c0012262:	85 c0                	test   eax,eax
c0012264:	5f                   	pop    edi
c0012265:	0f 94 c2             	sete   dl
c0012268:	89 d0                	mov    eax,edx
c001226a:	c3                   	ret    

c001226b <SysOpen(regs*)>:
c001226b:	56                   	push   esi
c001226c:	53                   	push   ebx
c001226d:	81 ec 04 01 00 00    	sub    esp,0x104
c0012273:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001227a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001227d:	85 c0                	test   eax,eax
c001227f:	0f 84 c5 01 00 00    	je     c001244a <SysOpen(regs*)+0x1df>
c0012285:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012288:	85 c0                	test   eax,eax
c001228a:	0f 84 ba 01 00 00    	je     c001244a <SysOpen(regs*)+0x1df>
c0012290:	83 ec 04             	sub    esp,0x4
c0012293:	68 bb 1d 02 c0       	push   0xc0021dbb
c0012298:	50                   	push   eax
c0012299:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001229d:	56                   	push   esi
c001229e:	e8 69 92 ff ff       	call   c000b50c <Fs::standardiseFiles(char*, char const*, char const*)>
c00122a3:	89 34 24             	mov    DWORD PTR [esp],esi
c00122a6:	e8 d5 e2 fe ff       	call   c0000580 <strlen>
c00122ab:	83 c4 10             	add    esp,0x10
c00122ae:	83 e8 01             	sub    eax,0x1
c00122b1:	74 29                	je     c00122dc <SysOpen(regs*)+0x71>
c00122b3:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00122b7:	83 fa 2e             	cmp    edx,0x2e
c00122ba:	74 1c                	je     c00122d8 <SysOpen(regs*)+0x6d>
c00122bc:	83 fa 3a             	cmp    edx,0x3a
c00122bf:	74 17                	je     c00122d8 <SysOpen(regs*)+0x6d>
c00122c1:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00122c5:	83 e8 01             	sub    eax,0x1
c00122c8:	74 12                	je     c00122dc <SysOpen(regs*)+0x71>
c00122ca:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00122ce:	83 fa 3a             	cmp    edx,0x3a
c00122d1:	74 05                	je     c00122d8 <SysOpen(regs*)+0x6d>
c00122d3:	83 fa 2e             	cmp    edx,0x2e
c00122d6:	75 e9                	jne    c00122c1 <SysOpen(regs*)+0x56>
c00122d8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00122dc:	83 ec 08             	sub    esp,0x8
c00122df:	68 bf 1d 02 c0       	push   0xc0021dbf
c00122e4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00122e7:	50                   	push   eax
c00122e8:	e8 33 ff ff ff       	call   c0012220 <string_ends_with(char const*, char const*)>
c00122ed:	83 c4 10             	add    esp,0x10
c00122f0:	85 c0                	test   eax,eax
c00122f2:	74 1d                	je     c0012311 <SysOpen(regs*)+0xa6>
c00122f4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122f7:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00122fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012304:	81 c4 04 01 00 00    	add    esp,0x104
c001230a:	31 c0                	xor    eax,eax
c001230c:	5b                   	pop    ebx
c001230d:	31 d2                	xor    edx,edx
c001230f:	5e                   	pop    esi
c0012310:	c3                   	ret    
c0012311:	83 ec 08             	sub    esp,0x8
c0012314:	68 c4 1d 02 c0       	push   0xc0021dc4
c0012319:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001231c:	50                   	push   eax
c001231d:	e8 fe fe ff ff       	call   c0012220 <string_ends_with(char const*, char const*)>
c0012322:	83 c4 10             	add    esp,0x10
c0012325:	85 c0                	test   eax,eax
c0012327:	75 cb                	jne    c00122f4 <SysOpen(regs*)+0x89>
c0012329:	83 ec 08             	sub    esp,0x8
c001232c:	68 c0 1d 02 c0       	push   0xc0021dc0
c0012331:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012334:	50                   	push   eax
c0012335:	e8 46 e4 fe ff       	call   c0000780 <strcmp>
c001233a:	83 c4 10             	add    esp,0x10
c001233d:	85 c0                	test   eax,eax
c001233f:	74 b3                	je     c00122f4 <SysOpen(regs*)+0x89>
c0012341:	83 ec 08             	sub    esp,0x8
c0012344:	68 bf 1d 02 c0       	push   0xc0021dbf
c0012349:	56                   	push   esi
c001234a:	e8 d1 fe ff ff       	call   c0012220 <string_ends_with(char const*, char const*)>
c001234f:	83 c4 10             	add    esp,0x10
c0012352:	85 c0                	test   eax,eax
c0012354:	75 9e                	jne    c00122f4 <SysOpen(regs*)+0x89>
c0012356:	83 ec 08             	sub    esp,0x8
c0012359:	68 c9 1d 02 c0       	push   0xc0021dc9
c001235e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012361:	50                   	push   eax
c0012362:	e8 b9 fe ff ff       	call   c0012220 <string_ends_with(char const*, char const*)>
c0012367:	83 c4 10             	add    esp,0x10
c001236a:	85 c0                	test   eax,eax
c001236c:	0f 85 eb 00 00 00    	jne    c001245d <SysOpen(regs*)+0x1f2>
c0012372:	83 ec 08             	sub    esp,0x8
c0012375:	68 ce 1d 02 c0       	push   0xc0021dce
c001237a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001237d:	50                   	push   eax
c001237e:	e8 9d fe ff ff       	call   c0012220 <string_ends_with(char const*, char const*)>
c0012383:	83 c4 10             	add    esp,0x10
c0012386:	85 c0                	test   eax,eax
c0012388:	0f 85 cf 00 00 00    	jne    c001245d <SysOpen(regs*)+0x1f2>
c001238e:	83 ec 08             	sub    esp,0x8
c0012391:	68 ca 1d 02 c0       	push   0xc0021dca
c0012396:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012399:	51                   	push   ecx
c001239a:	e8 e1 e3 fe ff       	call   c0000780 <strcmp>
c001239f:	83 c4 10             	add    esp,0x10
c00123a2:	85 c0                	test   eax,eax
c00123a4:	0f 84 b3 00 00 00    	je     c001245d <SysOpen(regs*)+0x1f2>
c00123aa:	83 ec 08             	sub    esp,0x8
c00123ad:	68 c9 1d 02 c0       	push   0xc0021dc9
c00123b2:	56                   	push   esi
c00123b3:	e8 68 fe ff ff       	call   c0012220 <string_ends_with(char const*, char const*)>
c00123b8:	83 c4 10             	add    esp,0x10
c00123bb:	85 c0                	test   eax,eax
c00123bd:	0f 85 9a 00 00 00    	jne    c001245d <SysOpen(regs*)+0x1f2>
c00123c3:	83 ec 0c             	sub    esp,0xc
c00123c6:	68 14 01 00 00       	push   0x114
c00123cb:	e8 03 57 ff ff       	call   c0007ad3 <malloc>
c00123d0:	83 c4 0c             	add    esp,0xc
c00123d3:	89 c6                	mov    esi,eax
c00123d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123dd:	50                   	push   eax
c00123de:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123e1:	52                   	push   edx
c00123e2:	56                   	push   esi
c00123e3:	e8 00 93 ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	85 f6                	test   esi,esi
c00123ed:	74 5b                	je     c001244a <SysOpen(regs*)+0x1df>
c00123ef:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00123f2:	0f b6 c2             	movzx  eax,dl
c00123f5:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00123f8:	89 d0                	mov    eax,edx
c00123fa:	83 e0 01             	and    eax,0x1
c00123fd:	f6 c2 02             	test   dl,0x2
c0012400:	74 03                	je     c0012405 <SysOpen(regs*)+0x19a>
c0012402:	83 c8 02             	or     eax,0x2
c0012405:	f6 c2 04             	test   dl,0x4
c0012408:	74 03                	je     c001240d <SysOpen(regs*)+0x1a2>
c001240a:	83 c8 04             	or     eax,0x4
c001240d:	f6 c2 08             	test   dl,0x8
c0012410:	74 03                	je     c0012415 <SysOpen(regs*)+0x1aa>
c0012412:	83 c8 0a             	or     eax,0xa
c0012415:	80 e2 10             	and    dl,0x10
c0012418:	74 03                	je     c001241d <SysOpen(regs*)+0x1b2>
c001241a:	83 c8 12             	or     eax,0x12
c001241d:	83 ec 08             	sub    esp,0x8
c0012420:	50                   	push   eax
c0012421:	56                   	push   esi
c0012422:	e8 7d 93 ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c0012427:	83 c4 10             	add    esp,0x10
c001242a:	85 c0                	test   eax,eax
c001242c:	75 1c                	jne    c001244a <SysOpen(regs*)+0x1df>
c001242e:	83 ec 0c             	sub    esp,0xc
c0012431:	56                   	push   esi
c0012432:	e8 67 6d ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012437:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001243a:	83 c4 10             	add    esp,0x10
c001243d:	89 02                	mov    DWORD PTR [edx],eax
c001243f:	c1 f8 1f             	sar    eax,0x1f
c0012442:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012445:	e9 ba fe ff ff       	jmp    c0012304 <SysOpen(regs*)+0x99>
c001244a:	81 c4 04 01 00 00    	add    esp,0x104
c0012450:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012455:	5b                   	pop    ebx
c0012456:	ba ff ff ff ff       	mov    edx,0xffffffff
c001245b:	5e                   	pop    esi
c001245c:	c3                   	ret    
c001245d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012460:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012466:	e9 92 fe ff ff       	jmp    c00122fd <SysOpen(regs*)+0x92>

c001246b <KeSystemCall(regs*, void*)>:
c001246b:	53                   	push   ebx
c001246c:	83 ec 08             	sub    esp,0x8
c001246f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012473:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012476:	83 f8 3b             	cmp    eax,0x3b
c0012479:	77 16                	ja     c0012491 <KeSystemCall(regs*, void*)+0x26>
c001247b:	8b 14 85 e0 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce20]
c0012482:	85 d2                	test   edx,edx
c0012484:	74 0b                	je     c0012491 <KeSystemCall(regs*, void*)+0x26>
c0012486:	83 ec 0c             	sub    esp,0xc
c0012489:	53                   	push   ebx
c001248a:	ff d2                	call   edx
c001248c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001248f:	eb 0d                	jmp    c001249e <KeSystemCall(regs*, void*)+0x33>
c0012491:	52                   	push   edx
c0012492:	52                   	push   edx
c0012493:	50                   	push   eax
c0012494:	68 d3 1d 02 c0       	push   0xc0021dd3
c0012499:	e8 6c 84 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001249e:	83 c4 10             	add    esp,0x10
c00124a1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00124a6:	83 c4 08             	add    esp,0x8
c00124a9:	31 d2                	xor    edx,edx
c00124ab:	5b                   	pop    ebx
c00124ac:	c3                   	ret    
c00124ad:	66 90                	xchg   ax,ax
c00124af:	90                   	nop

c00124b0 <KeSwitchEndian16(unsigned short)>:
c00124b0:	83 ec 04             	sub    esp,0x4
c00124b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00124b7:	66 89 04 24          	mov    WORD PTR [esp],ax
c00124bb:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00124bf:	c1 f8 08             	sar    eax,0x8
c00124c2:	89 c2                	mov    edx,eax
c00124c4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00124c8:	c1 e0 08             	shl    eax,0x8
c00124cb:	09 d0                	or     eax,edx
c00124cd:	83 c4 04             	add    esp,0x4
c00124d0:	c3                   	ret    
c00124d1:	8d 76 00             	lea    esi,[esi+0x0]

c00124d4 <KeSwitchEndian32(unsigned int)>:
c00124d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124d8:	c1 e8 18             	shr    eax,0x18
c00124db:	89 c2                	mov    edx,eax
c00124dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124e1:	c1 e0 08             	shl    eax,0x8
c00124e4:	25 00 00 ff 00       	and    eax,0xff0000
c00124e9:	09 c2                	or     edx,eax
c00124eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124ef:	c1 e8 08             	shr    eax,0x8
c00124f2:	25 00 ff 00 00       	and    eax,0xff00
c00124f7:	09 c2                	or     edx,eax
c00124f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124fd:	c1 e0 18             	shl    eax,0x18
c0012500:	09 d0                	or     eax,edx
c0012502:	c3                   	ret    
c0012503:	90                   	nop

c0012504 <EthernetCRC32(unsigned char*, int)>:
c0012504:	83 ec 10             	sub    esp,0x10
c0012507:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001250c:	75 0a                	jne    c0012518 <EthernetCRC32(unsigned char*, int)+0x14>
c001250e:	b8 00 00 00 00       	mov    eax,0x0
c0012513:	e9 8c 00 00 00       	jmp    c00125a4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012518:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001251d:	7f 09                	jg     c0012528 <EthernetCRC32(unsigned char*, int)+0x24>
c001251f:	b8 00 00 00 00       	mov    eax,0x0
c0012524:	eb 7e                	jmp    c00125a4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012526:	66 90                	xchg   ax,ax
c0012528:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012530:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012538:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001253c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012540:	7d 5a                	jge    c001259c <EthernetCRC32(unsigned char*, int)+0x98>
c0012542:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012546:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001254a:	01 d0                	add    eax,edx
c001254c:	8a 00                	mov    al,BYTE PTR [eax]
c001254e:	0f b6 c0             	movzx  eax,al
c0012551:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012555:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001255d:	8d 76 00             	lea    esi,[esi+0x0]
c0012560:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012565:	7f 2d                	jg     c0012594 <EthernetCRC32(unsigned char*, int)+0x90>
c0012567:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001256b:	83 e0 01             	and    eax,0x1
c001256e:	74 10                	je     c0012580 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012574:	d1 e8                	shr    eax,1
c0012576:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001257b:	eb 0b                	jmp    c0012588 <EthernetCRC32(unsigned char*, int)+0x84>
c001257d:	8d 76 00             	lea    esi,[esi+0x0]
c0012580:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012584:	d1 e8                	shr    eax,1
c0012586:	66 90                	xchg   ax,ax
c0012588:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001258c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012591:	eb cd                	jmp    c0012560 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012593:	90                   	nop
c0012594:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012599:	eb 9d                	jmp    c0012538 <EthernetCRC32(unsigned char*, int)+0x34>
c001259b:	90                   	nop
c001259c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125a0:	f7 d0                	not    eax
c00125a2:	66 90                	xchg   ax,ax
c00125a4:	83 c4 10             	add    esp,0x10
c00125a7:	c3                   	ret    

c00125a8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c00125a8:	83 ec 2c             	sub    esp,0x2c
c00125ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125af:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00125b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00125c3:	0f b7 c0             	movzx  eax,ax
c00125c6:	3d 06 08 00 00       	cmp    eax,0x806
c00125cb:	75 13                	jne    c00125e0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c00125cd:	83 ec 0c             	sub    esp,0xc
c00125d0:	68 e7 1d 02 c0       	push   0xc0021de7
c00125d5:	e8 30 83 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00125da:	83 c4 10             	add    esp,0x10
c00125dd:	eb 25                	jmp    c0012604 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00125df:	90                   	nop
c00125e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00125e7:	0f b7 c0             	movzx  eax,ax
c00125ea:	3d 00 08 00 00       	cmp    eax,0x800
c00125ef:	75 13                	jne    c0012604 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00125f1:	83 ec 0c             	sub    esp,0xc
c00125f4:	68 fd 1d 02 c0       	push   0xc0021dfd
c00125f9:	e8 0c 83 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00125fe:	83 c4 10             	add    esp,0x10
c0012601:	8d 76 00             	lea    esi,[esi+0x0]
c0012604:	90                   	nop
c0012605:	83 c4 2c             	add    esp,0x2c
c0012608:	c3                   	ret    

c0012609 <CmOpen(char const*)>:
c0012609:	57                   	push   edi
c001260a:	56                   	push   esi
c001260b:	53                   	push   ebx
c001260c:	83 ec 1c             	sub    esp,0x1c
c001260f:	6a 30                	push   0x30
c0012611:	e8 bd 54 ff ff       	call   c0007ad3 <malloc>
c0012616:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001261d:	89 c3                	mov    ebx,eax
c001261f:	e8 af 54 ff ff       	call   c0007ad3 <malloc>
c0012624:	83 c4 0c             	add    esp,0xc
c0012627:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001262d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012631:	89 c6                	mov    esi,eax
c0012633:	50                   	push   eax
c0012634:	e8 af 90 ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c0012639:	83 c4 0c             	add    esp,0xc
c001263c:	89 33                	mov    DWORD PTR [ebx],esi
c001263e:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012642:	50                   	push   eax
c0012643:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012647:	50                   	push   eax
c0012648:	56                   	push   esi
c0012649:	e8 58 94 ff ff       	call   c000baa6 <File::stat(unsigned long long*, bool*)>
c001264e:	5a                   	pop    edx
c001264f:	59                   	pop    ecx
c0012650:	6a 01                	push   0x1
c0012652:	ff 33                	push   DWORD PTR [ebx]
c0012654:	e8 4b 91 ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c0012659:	5e                   	pop    esi
c001265a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001265e:	e8 70 54 ff ff       	call   c0007ad3 <malloc>
c0012663:	5a                   	pop    edx
c0012664:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012668:	89 c7                	mov    edi,eax
c001266a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001266c:	8b 10                	mov    edx,DWORD PTR [eax]
c001266e:	56                   	push   esi
c001266f:	57                   	push   edi
c0012670:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012674:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012678:	50                   	push   eax
c0012679:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001267c:	83 c4 14             	add    esp,0x14
c001267f:	ff 33                	push   DWORD PTR [ebx]
c0012681:	e8 7c 91 ff ff       	call   c000b802 <File::close()>
c0012686:	59                   	pop    ecx
c0012687:	58                   	pop    eax
c0012688:	6a 13                	push   0x13
c001268a:	ff 33                	push   DWORD PTR [ebx]
c001268c:	e8 13 91 ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c0012691:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012693:	8b 10                	mov    edx,DWORD PTR [eax]
c0012695:	89 34 24             	mov    DWORD PTR [esp],esi
c0012698:	57                   	push   edi
c0012699:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001269d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126a1:	50                   	push   eax
c00126a2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00126a5:	83 c4 14             	add    esp,0x14
c00126a8:	57                   	push   edi
c00126a9:	e8 35 54 ff ff       	call   c0007ae3 <free>
c00126ae:	83 c4 10             	add    esp,0x10
c00126b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00126b4:	75 10                	jne    c00126c6 <CmOpen(char const*)+0xbd>
c00126b6:	83 ec 0c             	sub    esp,0xc
c00126b9:	68 12 1e 02 c0       	push   0xc0021e12
c00126be:	e8 ae ea ff ff       	call   c0011171 <KePanic(char const*)>
c00126c3:	83 c4 10             	add    esp,0x10
c00126c6:	50                   	push   eax
c00126c7:	6a 00                	push   0x0
c00126c9:	6a 00                	push   0x0
c00126cb:	ff 33                	push   DWORD PTR [ebx]
c00126cd:	8d 7b 05             	lea    edi,[ebx+0x5]
c00126d0:	e8 8d 91 ff ff       	call   c000b862 <File::seek(unsigned long long)>
c00126d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00126d9:	89 34 24             	mov    DWORD PTR [esp],esi
c00126dc:	57                   	push   edi
c00126dd:	6a 00                	push   0x0
c00126df:	6a 2b                	push   0x2b
c00126e1:	50                   	push   eax
c00126e2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00126e5:	83 c4 1c             	add    esp,0x1c
c00126e8:	6a 00                	push   0x0
c00126ea:	6a 00                	push   0x0
c00126ec:	ff 33                	push   DWORD PTR [ebx]
c00126ee:	e8 6f 91 ff ff       	call   c000b862 <File::seek(unsigned long long)>
c00126f3:	83 c4 0c             	add    esp,0xc
c00126f6:	6a 08                	push   0x8
c00126f8:	68 23 1e 02 c0       	push   0xc0021e23
c00126fd:	57                   	push   edi
c00126fe:	e8 7d dc fe ff       	call   c0000380 <memcmp>
c0012703:	83 c4 10             	add    esp,0x10
c0012706:	85 c0                	test   eax,eax
c0012708:	74 10                	je     c001271a <CmOpen(char const*)+0x111>
c001270a:	83 ec 0c             	sub    esp,0xc
c001270d:	68 2c 1e 02 c0       	push   0xc0021e2c
c0012712:	e8 5a ea ff ff       	call   c0011171 <KePanic(char const*)>
c0012717:	83 c4 10             	add    esp,0x10
c001271a:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c001271e:	83 c4 10             	add    esp,0x10
c0012721:	89 d8                	mov    eax,ebx
c0012723:	5b                   	pop    ebx
c0012724:	5e                   	pop    esi
c0012725:	5f                   	pop    edi
c0012726:	c3                   	ret    

c0012727 <CmClose(Reghive_Tag*)>:
c0012727:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001272b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001272f:	74 0b                	je     c001273c <CmClose(Reghive_Tag*)+0x15>
c0012731:	8b 00                	mov    eax,DWORD PTR [eax]
c0012733:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012737:	e9 c6 90 ff ff       	jmp    c000b802 <File::close()>
c001273c:	c3                   	ret    

c001273d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c001273d:	53                   	push   ebx
c001273e:	83 ec 18             	sub    esp,0x18
c0012741:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012745:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012749:	74 29                	je     c0012774 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001274b:	50                   	push   eax
c001274c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012751:	99                   	cdq    
c0012752:	52                   	push   edx
c0012753:	50                   	push   eax
c0012754:	ff 33                	push   DWORD PTR [ebx]
c0012756:	e8 07 91 ff ff       	call   c000b862 <File::seek(unsigned long long)>
c001275b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001275d:	5a                   	pop    edx
c001275e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012762:	8b 10                	mov    edx,DWORD PTR [eax]
c0012764:	51                   	push   ecx
c0012765:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012769:	6a 00                	push   0x0
c001276b:	6a 2b                	push   0x2b
c001276d:	50                   	push   eax
c001276e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012771:	83 c4 20             	add    esp,0x20
c0012774:	83 c4 18             	add    esp,0x18
c0012777:	5b                   	pop    ebx
c0012778:	c3                   	ret    

c0012779 <CmGetString(Reghive_Tag*, int, char*)>:
c0012779:	55                   	push   ebp
c001277a:	57                   	push   edi
c001277b:	56                   	push   esi
c001277c:	53                   	push   ebx
c001277d:	31 db                	xor    ebx,ebx
c001277f:	83 ec 70             	sub    esp,0x70
c0012782:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012786:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c001278d:	50                   	push   eax
c001278e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012795:	55                   	push   ebp
c0012796:	e8 a2 ff ff ff       	call   c001273d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001279b:	83 c4 10             	add    esp,0x10
c001279e:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00127a3:	c1 e0 08             	shl    eax,0x8
c00127a6:	89 c2                	mov    edx,eax
c00127a8:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00127ad:	09 d0                	or     eax,edx
c00127af:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00127b4:	c1 e0 08             	shl    eax,0x8
c00127b7:	09 d0                	or     eax,edx
c00127b9:	74 25                	je     c00127e0 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00127bb:	52                   	push   edx
c00127bc:	8d 54 24 39          	lea    edx,[esp+0x39]
c00127c0:	52                   	push   edx
c00127c1:	6b fb 0d             	imul   edi,ebx,0xd
c00127c4:	50                   	push   eax
c00127c5:	55                   	push   ebp
c00127c6:	e8 72 ff ff ff       	call   c001273d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127cb:	8d 74 24 49          	lea    esi,[esp+0x49]
c00127cf:	b9 27 00 00 00       	mov    ecx,0x27
c00127d4:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00127db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00127dd:	83 c4 10             	add    esp,0x10
c00127e0:	83 c3 03             	add    ebx,0x3
c00127e3:	83 fb 15             	cmp    ebx,0x15
c00127e6:	75 b6                	jne    c001279e <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00127e8:	83 c4 6c             	add    esp,0x6c
c00127eb:	5b                   	pop    ebx
c00127ec:	5e                   	pop    esi
c00127ed:	5f                   	pop    edi
c00127ee:	5d                   	pop    ebp
c00127ef:	c3                   	ret    

c00127f0 <CmEnterDirectory(Reghive_Tag*, int)>:
c00127f0:	83 ec 40             	sub    esp,0x40
c00127f3:	8d 44 24 09          	lea    eax,[esp+0x9]
c00127f7:	50                   	push   eax
c00127f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00127fc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012800:	e8 38 ff ff ff       	call   c001273d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012805:	83 c4 10             	add    esp,0x10
c0012808:	83 c8 ff             	or     eax,0xffffffff
c001280b:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012810:	75 19                	jne    c001282b <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012812:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012817:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001281c:	c1 e0 08             	shl    eax,0x8
c001281f:	09 c2                	or     edx,eax
c0012821:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012826:	c1 e0 10             	shl    eax,0x10
c0012829:	09 d0                	or     eax,edx
c001282b:	83 c4 3c             	add    esp,0x3c
c001282e:	c3                   	ret    

c001282f <CmGetNext(Reghive_Tag*, int)>:
c001282f:	83 ec 40             	sub    esp,0x40
c0012832:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012836:	50                   	push   eax
c0012837:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001283b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001283f:	e8 f9 fe ff ff       	call   c001273d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012844:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012849:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c001284e:	c1 e0 08             	shl    eax,0x8
c0012851:	09 c2                	or     edx,eax
c0012853:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012858:	83 c4 4c             	add    esp,0x4c
c001285b:	c1 e0 10             	shl    eax,0x10
c001285e:	09 d0                	or     eax,edx
c0012860:	c3                   	ret    

c0012861 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012861:	53                   	push   ebx
c0012862:	83 ec 18             	sub    esp,0x18
c0012865:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012869:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001286d:	74 29                	je     c0012898 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001286f:	50                   	push   eax
c0012870:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012875:	99                   	cdq    
c0012876:	52                   	push   edx
c0012877:	50                   	push   eax
c0012878:	ff 33                	push   DWORD PTR [ebx]
c001287a:	e8 e3 8f ff ff       	call   c000b862 <File::seek(unsigned long long)>
c001287f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012881:	5a                   	pop    edx
c0012882:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012886:	8b 10                	mov    edx,DWORD PTR [eax]
c0012888:	51                   	push   ecx
c0012889:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001288d:	6a 00                	push   0x0
c001288f:	6a 2b                	push   0x2b
c0012891:	50                   	push   eax
c0012892:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012895:	83 c4 20             	add    esp,0x20
c0012898:	83 c4 18             	add    esp,0x18
c001289b:	5b                   	pop    ebx
c001289c:	c3                   	ret    

c001289d <CmFreeExtent(Reghive_Tag*, int)>:
c001289d:	53                   	push   ebx
c001289e:	83 ec 3c             	sub    esp,0x3c
c00128a1:	6a 2b                	push   0x2b
c00128a3:	6a 00                	push   0x0
c00128a5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00128a9:	53                   	push   ebx
c00128aa:	e8 41 dc fe ff       	call   c00004f0 <memset>
c00128af:	83 c4 0c             	add    esp,0xc
c00128b2:	53                   	push   ebx
c00128b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128bb:	e8 a1 ff ff ff       	call   c0012861 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00128c0:	83 c4 48             	add    esp,0x48
c00128c3:	5b                   	pop    ebx
c00128c4:	c3                   	ret    

c00128c5 <CmUpdateHeader(Reghive_Tag*)>:
c00128c5:	83 ec 0c             	sub    esp,0xc
c00128c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128cc:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00128d0:	74 10                	je     c00128e2 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c00128d2:	52                   	push   edx
c00128d3:	8d 50 05             	lea    edx,[eax+0x5]
c00128d6:	52                   	push   edx
c00128d7:	6a 00                	push   0x0
c00128d9:	50                   	push   eax
c00128da:	e8 82 ff ff ff       	call   c0012861 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00128df:	83 c4 10             	add    esp,0x10
c00128e2:	83 c4 0c             	add    esp,0xc
c00128e5:	c3                   	ret    

c00128e6 <CmExpand(Reghive_Tag*, int)>:
c00128e6:	55                   	push   ebp
c00128e7:	57                   	push   edi
c00128e8:	83 cf ff             	or     edi,0xffffffff
c00128eb:	56                   	push   esi
c00128ec:	53                   	push   ebx
c00128ed:	83 ec 3c             	sub    esp,0x3c
c00128f0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00128f4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00128f8:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00128fc:	74 59                	je     c0012957 <CmExpand(Reghive_Tag*, int)+0x71>
c00128fe:	50                   	push   eax
c00128ff:	31 d2                	xor    edx,edx
c0012901:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012905:	31 ff                	xor    edi,edi
c0012907:	52                   	push   edx
c0012908:	50                   	push   eax
c0012909:	ff 33                	push   DWORD PTR [ebx]
c001290b:	e8 52 8f ff ff       	call   c000b862 <File::seek(unsigned long long)>
c0012910:	83 c4 0c             	add    esp,0xc
c0012913:	6a 2b                	push   0x2b
c0012915:	6a 00                	push   0x0
c0012917:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c001291b:	55                   	push   ebp
c001291c:	e8 cf db fe ff       	call   c00004f0 <memset>
c0012921:	83 c4 10             	add    esp,0x10
c0012924:	39 f7                	cmp    edi,esi
c0012926:	7d 1b                	jge    c0012943 <CmExpand(Reghive_Tag*, int)+0x5d>
c0012928:	8b 03                	mov    eax,DWORD PTR [ebx]
c001292a:	83 ec 0c             	sub    esp,0xc
c001292d:	47                   	inc    edi
c001292e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012932:	8b 10                	mov    edx,DWORD PTR [eax]
c0012934:	51                   	push   ecx
c0012935:	55                   	push   ebp
c0012936:	6a 00                	push   0x0
c0012938:	6a 2b                	push   0x2b
c001293a:	50                   	push   eax
c001293b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001293e:	83 c4 20             	add    esp,0x20
c0012941:	eb e1                	jmp    c0012924 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012943:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012946:	83 ec 0c             	sub    esp,0xc
c0012949:	01 fe                	add    esi,edi
c001294b:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c001294e:	53                   	push   ebx
c001294f:	e8 71 ff ff ff       	call   c00128c5 <CmUpdateHeader(Reghive_Tag*)>
c0012954:	83 c4 10             	add    esp,0x10
c0012957:	83 c4 3c             	add    esp,0x3c
c001295a:	89 f8                	mov    eax,edi
c001295c:	5b                   	pop    ebx
c001295d:	5e                   	pop    esi
c001295e:	5f                   	pop    edi
c001295f:	5d                   	pop    ebp
c0012960:	c3                   	ret    

c0012961 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012961:	55                   	push   ebp
c0012962:	57                   	push   edi
c0012963:	56                   	push   esi
c0012964:	53                   	push   ebx
c0012965:	83 cb ff             	or     ebx,0xffffffff
c0012968:	83 ec 1c             	sub    esp,0x1c
c001296b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001296f:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012973:	74 68                	je     c00129dd <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012975:	51                   	push   ecx
c0012976:	be 2b 00 00 00       	mov    esi,0x2b
c001297b:	6a 00                	push   0x0
c001297d:	31 ff                	xor    edi,edi
c001297f:	6a 00                	push   0x0
c0012981:	31 db                	xor    ebx,ebx
c0012983:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012986:	e8 d7 8e ff ff       	call   c000b862 <File::seek(unsigned long long)>
c001298b:	83 c4 10             	add    esp,0x10
c001298e:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012991:	76 3b                	jbe    c00129ce <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012993:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012996:	83 ec 0c             	sub    esp,0xc
c0012999:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001299d:	8b 10                	mov    edx,DWORD PTR [eax]
c001299f:	51                   	push   ecx
c00129a0:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c00129a4:	51                   	push   ecx
c00129a5:	6a 00                	push   0x0
c00129a7:	6a 01                	push   0x1
c00129a9:	50                   	push   eax
c00129aa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00129ad:	83 c4 20             	add    esp,0x20
c00129b0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00129b5:	74 26                	je     c00129dd <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00129b7:	52                   	push   edx
c00129b8:	43                   	inc    ebx
c00129b9:	57                   	push   edi
c00129ba:	56                   	push   esi
c00129bb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00129be:	e8 9f 8e ff ff       	call   c000b862 <File::seek(unsigned long long)>
c00129c3:	83 c6 2b             	add    esi,0x2b
c00129c6:	83 d7 00             	adc    edi,0x0
c00129c9:	83 c4 10             	add    esp,0x10
c00129cc:	eb c0                	jmp    c001298e <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00129ce:	50                   	push   eax
c00129cf:	50                   	push   eax
c00129d0:	6a 40                	push   0x40
c00129d2:	55                   	push   ebp
c00129d3:	e8 0e ff ff ff       	call   c00128e6 <CmExpand(Reghive_Tag*, int)>
c00129d8:	83 c4 10             	add    esp,0x10
c00129db:	89 c3                	mov    ebx,eax
c00129dd:	83 c4 1c             	add    esp,0x1c
c00129e0:	89 d8                	mov    eax,ebx
c00129e2:	5b                   	pop    ebx
c00129e3:	5e                   	pop    esi
c00129e4:	5f                   	pop    edi
c00129e5:	5d                   	pop    ebp
c00129e6:	c3                   	ret    

c00129e7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00129e7:	55                   	push   ebp
c00129e8:	57                   	push   edi
c00129e9:	56                   	push   esi
c00129ea:	53                   	push   ebx
c00129eb:	81 ec 88 00 00 00    	sub    esp,0x88
c00129f1:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00129f8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00129ff:	e8 5d ff ff ff       	call   c0012961 <CmFindUnusedExtent(Reghive_Tag*)>
c0012a04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a08:	83 c4 0c             	add    esp,0xc
c0012a0b:	6a 2b                	push   0x2b
c0012a0d:	6a 00                	push   0x0
c0012a0f:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012a13:	55                   	push   ebp
c0012a14:	e8 d7 da fe ff       	call   c00004f0 <memset>
c0012a19:	83 c4 10             	add    esp,0x10
c0012a1c:	85 db                	test   ebx,ebx
c0012a1e:	74 12                	je     c0012a32 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012a20:	51                   	push   ecx
c0012a21:	55                   	push   ebp
c0012a22:	53                   	push   ebx
c0012a23:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012a2a:	e8 0e fd ff ff       	call   c001273d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a2f:	83 c4 10             	add    esp,0x10
c0012a32:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012a36:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012a3d:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012a42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a44:	85 db                	test   ebx,ebx
c0012a46:	74 49                	je     c0012a91 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012a48:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012a4d:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012a52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a56:	c1 e0 08             	shl    eax,0x8
c0012a59:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012a5f:	09 c8                	or     eax,ecx
c0012a61:	74 11                	je     c0012a74 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012a63:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012a67:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012a6b:	c1 e8 10             	shr    eax,0x10
c0012a6e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012a72:	eb 0f                	jmp    c0012a83 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012a74:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012a79:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012a7e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012a83:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012a87:	c1 ea 08             	shr    edx,0x8
c0012a8a:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012a8f:	eb 0f                	jmp    c0012aa0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012a91:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012a96:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012a9b:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012aa0:	52                   	push   edx
c0012aa1:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012aa5:	50                   	push   eax
c0012aa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012aaa:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ab1:	e8 ab fd ff ff       	call   c0012861 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ab6:	83 c4 10             	add    esp,0x10
c0012ab9:	85 db                	test   ebx,ebx
c0012abb:	74 12                	je     c0012acf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012abd:	50                   	push   eax
c0012abe:	55                   	push   ebp
c0012abf:	53                   	push   ebx
c0012ac0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ac7:	e8 95 fd ff ff       	call   c0012861 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012acc:	83 c4 10             	add    esp,0x10
c0012acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ad3:	83 c4 7c             	add    esp,0x7c
c0012ad6:	5b                   	pop    ebx
c0012ad7:	5e                   	pop    esi
c0012ad8:	5f                   	pop    edi
c0012ad9:	5d                   	pop    ebp
c0012ada:	c3                   	ret    

c0012adb <CmSetString(Reghive_Tag*, int, char const*)>:
c0012adb:	55                   	push   ebp
c0012adc:	57                   	push   edi
c0012add:	56                   	push   esi
c0012ade:	53                   	push   ebx
c0012adf:	bb 27 00 00 00       	mov    ebx,0x27
c0012ae4:	81 ec 88 00 00 00    	sub    esp,0x88
c0012aea:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012af1:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012af8:	e8 83 da fe ff       	call   c0000580 <strlen>
c0012afd:	8d 48 26             	lea    ecx,[eax+0x26]
c0012b00:	89 c8                	mov    eax,ecx
c0012b02:	99                   	cdq    
c0012b03:	f7 fb                	idiv   ebx
c0012b05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b09:	83 c4 10             	add    esp,0x10
c0012b0c:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012b12:	7e 10                	jle    c0012b24 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012b14:	83 ec 0c             	sub    esp,0xc
c0012b17:	68 3d 1e 02 c0       	push   0xc0021e3d
c0012b1c:	e8 50 e6 ff ff       	call   c0011171 <KePanic(char const*)>
c0012b21:	83 c4 10             	add    esp,0x10
c0012b24:	53                   	push   ebx
c0012b25:	31 ed                	xor    ebp,ebp
c0012b27:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012b2b:	53                   	push   ebx
c0012b2c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b33:	57                   	push   edi
c0012b34:	e8 04 fc ff ff       	call   c001273d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b39:	83 c4 10             	add    esp,0x10
c0012b3c:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012b40:	89 f0                	mov    eax,esi
c0012b42:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012b46:	c1 e0 08             	shl    eax,0x8
c0012b49:	09 c6                	or     esi,eax
c0012b4b:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012b4f:	c1 e6 08             	shl    esi,0x8
c0012b52:	09 c6                	or     esi,eax
c0012b54:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012b58:	7e 72                	jle    c0012bcc <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012b5a:	85 f6                	test   esi,esi
c0012b5c:	75 25                	jne    c0012b83 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012b5e:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012b63:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012b67:	50                   	push   eax
c0012b68:	6a 00                	push   0x0
c0012b6a:	6a 00                	push   0x0
c0012b6c:	57                   	push   edi
c0012b6d:	e8 75 fe ff ff       	call   c00129e7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012b72:	83 c4 10             	add    esp,0x10
c0012b75:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012b78:	89 c6                	mov    esi,eax
c0012b7a:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012b7d:	c1 f8 10             	sar    eax,0x10
c0012b80:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012b83:	51                   	push   ecx
c0012b84:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012b88:	52                   	push   edx
c0012b89:	56                   	push   esi
c0012b8a:	57                   	push   edi
c0012b8b:	e8 ad fb ff ff       	call   c001273d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b90:	83 c4 0c             	add    esp,0xc
c0012b93:	6a 27                	push   0x27
c0012b95:	6a 00                	push   0x0
c0012b97:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012b9b:	51                   	push   ecx
c0012b9c:	e8 4f d9 fe ff       	call   c00004f0 <memset>
c0012ba1:	6b c5 27             	imul   eax,ebp,0x27
c0012ba4:	83 c4 0c             	add    esp,0xc
c0012ba7:	6a 27                	push   0x27
c0012ba9:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012bb0:	50                   	push   eax
c0012bb1:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012bb5:	51                   	push   ecx
c0012bb6:	e8 d5 da fe ff       	call   c0000690 <strncpy>
c0012bbb:	83 c4 0c             	add    esp,0xc
c0012bbe:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012bc2:	52                   	push   edx
c0012bc3:	56                   	push   esi
c0012bc4:	57                   	push   edi
c0012bc5:	e8 97 fc ff ff       	call   c0012861 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012bca:	eb 19                	jmp    c0012be5 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012bcc:	85 f6                	test   esi,esi
c0012bce:	74 18                	je     c0012be8 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012bd0:	52                   	push   edx
c0012bd1:	52                   	push   edx
c0012bd2:	56                   	push   esi
c0012bd3:	57                   	push   edi
c0012bd4:	e8 c4 fc ff ff       	call   c001289d <CmFreeExtent(Reghive_Tag*, int)>
c0012bd9:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012bdd:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012be1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012be5:	83 c4 10             	add    esp,0x10
c0012be8:	45                   	inc    ebp
c0012be9:	83 c3 03             	add    ebx,0x3
c0012bec:	83 fd 07             	cmp    ebp,0x7
c0012bef:	0f 85 47 ff ff ff    	jne    c0012b3c <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012bf5:	50                   	push   eax
c0012bf6:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012bfa:	50                   	push   eax
c0012bfb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c02:	57                   	push   edi
c0012c03:	e8 59 fc ff ff       	call   c0012861 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c08:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012c0e:	5b                   	pop    ebx
c0012c0f:	5e                   	pop    esi
c0012c10:	5f                   	pop    edi
c0012c11:	5d                   	pop    ebp
c0012c12:	c3                   	ret    

c0012c13 <CmGetMatch(char*, char*, bool, bool*)>:
c0012c13:	56                   	push   esi
c0012c14:	53                   	push   ebx
c0012c15:	50                   	push   eax
c0012c16:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012c1b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012c1f:	74 25                	je     c0012c46 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012c21:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012c24:	31 db                	xor    ebx,ebx
c0012c26:	50                   	push   eax
c0012c27:	50                   	push   eax
c0012c28:	8d 04 9d e0 32 02 c0 	lea    eax,[ebx*4-0x3ffdcd20]
c0012c2f:	50                   	push   eax
c0012c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c34:	e8 47 db fe ff       	call   c0000780 <strcmp>
c0012c39:	83 c4 10             	add    esp,0x10
c0012c3c:	85 c0                	test   eax,eax
c0012c3e:	74 2e                	je     c0012c6e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012c40:	43                   	inc    ebx
c0012c41:	83 fb 3f             	cmp    ebx,0x3f
c0012c44:	75 e0                	jne    c0012c26 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012c46:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012c49:	31 db                	xor    ebx,ebx
c0012c4b:	51                   	push   ecx
c0012c4c:	51                   	push   ecx
c0012c4d:	8d 04 9d e0 32 02 c0 	lea    eax,[ebx*4-0x3ffdcd20]
c0012c54:	50                   	push   eax
c0012c55:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c59:	e8 22 db fe ff       	call   c0000780 <strcmp>
c0012c5e:	83 c4 10             	add    esp,0x10
c0012c61:	85 c0                	test   eax,eax
c0012c63:	74 09                	je     c0012c6e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012c65:	43                   	inc    ebx
c0012c66:	83 fb 3f             	cmp    ebx,0x3f
c0012c69:	75 e0                	jne    c0012c4b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012c6b:	83 cb ff             	or     ebx,0xffffffff
c0012c6e:	5a                   	pop    edx
c0012c6f:	89 d8                	mov    eax,ebx
c0012c71:	5b                   	pop    ebx
c0012c72:	5e                   	pop    esi
c0012c73:	c3                   	ret    

c0012c74 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012c74:	55                   	push   ebp
c0012c75:	31 c0                	xor    eax,eax
c0012c77:	57                   	push   edi
c0012c78:	56                   	push   esi
c0012c79:	53                   	push   ebx
c0012c7a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012c7e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012c82:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012c86:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012c8a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012c8c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012c8f:	83 fd 1f             	cmp    ebp,0x1f
c0012c92:	7f 0b                	jg     c0012c9f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012c94:	0f b6 c2             	movzx  eax,dl
c0012c97:	d3 e0                	shl    eax,cl
c0012c99:	09 07                	or     DWORD PTR [edi],eax
c0012c9b:	b0 01                	mov    al,0x1
c0012c9d:	01 33                	add    DWORD PTR [ebx],esi
c0012c9f:	5b                   	pop    ebx
c0012ca0:	5e                   	pop    esi
c0012ca1:	5f                   	pop    edi
c0012ca2:	5d                   	pop    ebp
c0012ca3:	c3                   	ret    

c0012ca4 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012ca4:	57                   	push   edi
c0012ca5:	56                   	push   esi
c0012ca6:	53                   	push   ebx
c0012ca7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012cab:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012caf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012cb3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012cb7:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012cb9:	7c 17                	jl     c0012cd2 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012cbb:	8b 17                	mov    edx,DWORD PTR [edi]
c0012cbd:	b8 01 00 00 00       	mov    eax,0x1
c0012cc2:	d3 e0                	shl    eax,cl
c0012cc4:	48                   	dec    eax
c0012cc5:	21 d0                	and    eax,edx
c0012cc7:	d3 ea                	shr    edx,cl
c0012cc9:	89 17                	mov    DWORD PTR [edi],edx
c0012ccb:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012ccd:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012cd0:	eb 05                	jmp    c0012cd7 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012cd2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012cd5:	31 c0                	xor    eax,eax
c0012cd7:	5b                   	pop    ebx
c0012cd8:	5e                   	pop    esi
c0012cd9:	5f                   	pop    edi
c0012cda:	c3                   	ret    

c0012cdb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012cdb:	83 ec 40             	sub    esp,0x40
c0012cde:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ce2:	50                   	push   eax
c0012ce3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ce7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ceb:	e8 4d fa ff ff       	call   c001273d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012cf0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012cf4:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012cf8:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012cfc:	89 10                	mov    DWORD PTR [eax],edx
c0012cfe:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012d01:	83 c4 4c             	add    esp,0x4c
c0012d04:	c3                   	ret    

c0012d05 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012d05:	55                   	push   ebp
c0012d06:	57                   	push   edi
c0012d07:	56                   	push   esi
c0012d08:	53                   	push   ebx
c0012d09:	83 ec 40             	sub    esp,0x40
c0012d0c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012d10:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012d14:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012d18:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012d1c:	53                   	push   ebx
c0012d1d:	56                   	push   esi
c0012d1e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012d22:	e8 16 fa ff ff       	call   c001273d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d27:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012d2b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012d2f:	83 c4 0c             	add    esp,0xc
c0012d32:	53                   	push   ebx
c0012d33:	56                   	push   esi
c0012d34:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012d38:	e8 24 fb ff ff       	call   c0012861 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d3d:	83 c4 4c             	add    esp,0x4c
c0012d40:	5b                   	pop    ebx
c0012d41:	5e                   	pop    esi
c0012d42:	5f                   	pop    edi
c0012d43:	5d                   	pop    ebp
c0012d44:	c3                   	ret    

c0012d45 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012d45:	55                   	push   ebp
c0012d46:	57                   	push   edi
c0012d47:	56                   	push   esi
c0012d48:	31 f6                	xor    esi,esi
c0012d4a:	53                   	push   ebx
c0012d4b:	31 db                	xor    ebx,ebx
c0012d4d:	83 ec 40             	sub    esp,0x40
c0012d50:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012d58:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012d60:	6a 12                	push   0x12
c0012d62:	68 ee 00 00 00       	push   0xee
c0012d67:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012d6b:	e8 80 d7 fe ff       	call   c00004f0 <memset>
c0012d70:	83 c4 10             	add    esp,0x10
c0012d73:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012d77:	6a 08                	push   0x8
c0012d79:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d7d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012d81:	50                   	push   eax
c0012d82:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012d86:	55                   	push   ebp
c0012d87:	57                   	push   edi
c0012d88:	e8 e7 fe ff ff       	call   c0012c74 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012d8d:	83 c4 10             	add    esp,0x10
c0012d90:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012d94:	50                   	push   eax
c0012d95:	6a 06                	push   0x6
c0012d97:	55                   	push   ebp
c0012d98:	57                   	push   edi
c0012d99:	e8 06 ff ff ff       	call   c0012ca4 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012d9e:	83 c4 10             	add    esp,0x10
c0012da1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012da6:	74 07                	je     c0012daf <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012da8:	46                   	inc    esi
c0012da9:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012dad:	eb e1                	jmp    c0012d90 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012daf:	43                   	inc    ebx
c0012db0:	83 fb 12             	cmp    ebx,0x12
c0012db3:	75 c2                	jne    c0012d77 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012db5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012db9:	31 f6                	xor    esi,esi
c0012dbb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012dbe:	50                   	push   eax
c0012dbf:	50                   	push   eax
c0012dc0:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012dc5:	46                   	inc    esi
c0012dc6:	8d 04 85 e0 32 02 c0 	lea    eax,[eax*4-0x3ffdcd20]
c0012dcd:	50                   	push   eax
c0012dce:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012dd2:	e8 99 da fe ff       	call   c0000870 <strcat>
c0012dd7:	83 c4 10             	add    esp,0x10
c0012dda:	83 fe 18             	cmp    esi,0x18
c0012ddd:	75 df                	jne    c0012dbe <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012ddf:	83 c4 3c             	add    esp,0x3c
c0012de2:	31 c0                	xor    eax,eax
c0012de4:	5b                   	pop    ebx
c0012de5:	5e                   	pop    esi
c0012de6:	5f                   	pop    edi
c0012de7:	5d                   	pop    ebp
c0012de8:	c3                   	ret    

c0012de9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012de9:	83 ec 40             	sub    esp,0x40
c0012dec:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012df0:	50                   	push   eax
c0012df1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012df5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012df9:	e8 3f f9 ff ff       	call   c001273d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012dfe:	58                   	pop    eax
c0012dff:	5a                   	pop    edx
c0012e00:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012e04:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012e08:	50                   	push   eax
c0012e09:	e8 37 ff ff ff       	call   c0012d45 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012e0e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012e13:	83 c4 4c             	add    esp,0x4c
c0012e16:	c3                   	ret    

c0012e17 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012e17:	55                   	push   ebp
c0012e18:	57                   	push   edi
c0012e19:	56                   	push   esi
c0012e1a:	53                   	push   ebx
c0012e1b:	31 db                	xor    ebx,ebx
c0012e1d:	83 ec 70             	sub    esp,0x70
c0012e20:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012e27:	6a 30                	push   0x30
c0012e29:	6a 00                	push   0x0
c0012e2b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012e2f:	56                   	push   esi
c0012e30:	e8 bb d6 fe ff       	call   c00004f0 <memset>
c0012e35:	83 c4 10             	add    esp,0x10
c0012e38:	83 ec 0c             	sub    esp,0xc
c0012e3b:	57                   	push   edi
c0012e3c:	e8 3f d7 fe ff       	call   c0000580 <strlen>
c0012e41:	83 c4 10             	add    esp,0x10
c0012e44:	39 d8                	cmp    eax,ebx
c0012e46:	76 16                	jbe    c0012e5e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012e48:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012e4c:	83 ec 0c             	sub    esp,0xc
c0012e4f:	50                   	push   eax
c0012e50:	e8 0b db fe ff       	call   c0000960 <toupper>
c0012e55:	83 c4 10             	add    esp,0x10
c0012e58:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012e5b:	43                   	inc    ebx
c0012e5c:	eb da                	jmp    c0012e38 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012e5e:	52                   	push   edx
c0012e5f:	31 db                	xor    ebx,ebx
c0012e61:	6a 18                	push   0x18
c0012e63:	31 ff                	xor    edi,edi
c0012e65:	6a 3f                	push   0x3f
c0012e67:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e6b:	50                   	push   eax
c0012e6c:	e8 7f d6 fe ff       	call   c00004f0 <memset>
c0012e71:	83 c4 10             	add    esp,0x10
c0012e74:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012e78:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012e7c:	84 c0                	test   al,al
c0012e7e:	0f 84 af 00 00 00    	je     c0012f33 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012e84:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012e88:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e8b:	83 ec 0c             	sub    esp,0xc
c0012e8e:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012e93:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012e97:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012e9b:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0012ea0:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012ea4:	56                   	push   esi
c0012ea5:	e8 d6 d6 fe ff       	call   c0000580 <strlen>
c0012eaa:	83 c4 10             	add    esp,0x10
c0012ead:	85 c0                	test   eax,eax
c0012eaf:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012eb3:	74 0b                	je     c0012ec0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012eb5:	50                   	push   eax
c0012eb6:	6a 01                	push   0x1
c0012eb8:	56                   	push   esi
c0012eb9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012ebd:	50                   	push   eax
c0012ebe:	eb 0a                	jmp    c0012eca <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012ec0:	50                   	push   eax
c0012ec1:	6a 00                	push   0x0
c0012ec3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012ec7:	50                   	push   eax
c0012ec8:	6a 00                	push   0x0
c0012eca:	e8 44 fd ff ff       	call   c0012c13 <CmGetMatch(char*, char*, bool, bool*)>
c0012ecf:	83 c4 10             	add    esp,0x10
c0012ed2:	83 f8 ff             	cmp    eax,0xffffffff
c0012ed5:	75 1a                	jne    c0012ef1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012ed7:	83 ec 0c             	sub    esp,0xc
c0012eda:	68 52 1e 02 c0       	push   0xc0021e52
c0012edf:	e8 8d e2 ff ff       	call   c0011171 <KePanic(char const*)>
c0012ee4:	83 c4 10             	add    esp,0x10
c0012ee7:	b8 02 00 00 00       	mov    eax,0x2
c0012eec:	e9 bb 00 00 00       	jmp    c0012fac <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012ef1:	83 ff 18             	cmp    edi,0x18
c0012ef4:	75 1a                	jne    c0012f10 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012ef6:	83 ec 0c             	sub    esp,0xc
c0012ef9:	68 67 1e 02 c0       	push   0xc0021e67
c0012efe:	e8 6e e2 ff ff       	call   c0011171 <KePanic(char const*)>
c0012f03:	83 c4 10             	add    esp,0x10
c0012f06:	b8 01 00 00 00       	mov    eax,0x1
c0012f0b:	e9 9c 00 00 00       	jmp    c0012fac <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012f10:	47                   	inc    edi
c0012f11:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f16:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012f1a:	0f 45 dd             	cmovne ebx,ebp
c0012f1d:	83 ec 0c             	sub    esp,0xc
c0012f20:	56                   	push   esi
c0012f21:	e8 5a d6 fe ff       	call   c0000580 <strlen>
c0012f26:	83 c4 10             	add    esp,0x10
c0012f29:	85 c0                	test   eax,eax
c0012f2b:	74 06                	je     c0012f33 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012f2d:	43                   	inc    ebx
c0012f2e:	e9 41 ff ff ff       	jmp    c0012e74 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012f33:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012f3b:	31 db                	xor    ebx,ebx
c0012f3d:	31 ff                	xor    edi,edi
c0012f3f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012f47:	50                   	push   eax
c0012f48:	6a 12                	push   0x12
c0012f4a:	68 ee 00 00 00       	push   0xee
c0012f4f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012f56:	e8 95 d5 fe ff       	call   c00004f0 <memset>
c0012f5b:	83 c4 10             	add    esp,0x10
c0012f5e:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012f62:	83 fb 17             	cmp    ebx,0x17
c0012f65:	7e 26                	jle    c0012f8d <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012f67:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f6b:	50                   	push   eax
c0012f6c:	6a 08                	push   0x8
c0012f6e:	55                   	push   ebp
c0012f6f:	56                   	push   esi
c0012f70:	e8 2f fd ff ff       	call   c0012ca4 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012f75:	83 c4 10             	add    esp,0x10
c0012f78:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f7d:	74 26                	je     c0012fa5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0012f7f:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012f86:	4b                   	dec    ebx
c0012f87:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012f8a:	47                   	inc    edi
c0012f8b:	eb 1c                	jmp    c0012fa9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012f8d:	6a 06                	push   0x6
c0012f8f:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012f94:	50                   	push   eax
c0012f95:	55                   	push   ebp
c0012f96:	56                   	push   esi
c0012f97:	e8 d8 fc ff ff       	call   c0012c74 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012f9c:	83 c4 10             	add    esp,0x10
c0012f9f:	84 c0                	test   al,al
c0012fa1:	75 06                	jne    c0012fa9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012fa3:	eb c2                	jmp    c0012f67 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012fa5:	31 c0                	xor    eax,eax
c0012fa7:	eb 03                	jmp    c0012fac <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012fa9:	43                   	inc    ebx
c0012faa:	eb b2                	jmp    c0012f5e <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0012fac:	83 c4 6c             	add    esp,0x6c
c0012faf:	5b                   	pop    ebx
c0012fb0:	5e                   	pop    esi
c0012fb1:	5f                   	pop    edi
c0012fb2:	5d                   	pop    ebp
c0012fb3:	c3                   	ret    

c0012fb4 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012fb4:	53                   	push   ebx
c0012fb5:	83 ec 3c             	sub    esp,0x3c
c0012fb8:	6a 2b                	push   0x2b
c0012fba:	6a 00                	push   0x0
c0012fbc:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012fc0:	53                   	push   ebx
c0012fc1:	e8 2a d5 fe ff       	call   c00004f0 <memset>
c0012fc6:	58                   	pop    eax
c0012fc7:	5a                   	pop    edx
c0012fc8:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012fcc:	50                   	push   eax
c0012fcd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012fd1:	e8 41 fe ff ff       	call   c0012e17 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012fd6:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012fdb:	83 c4 0c             	add    esp,0xc
c0012fde:	6a 15                	push   0x15
c0012fe0:	6a 00                	push   0x0
c0012fe2:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012fe6:	50                   	push   eax
c0012fe7:	e8 04 d5 fe ff       	call   c00004f0 <memset>
c0012fec:	53                   	push   ebx
c0012fed:	6a 00                	push   0x0
c0012fef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012ff3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012ff7:	e8 eb f9 ff ff       	call   c00129e7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012ffc:	83 c4 58             	add    esp,0x58
c0012fff:	5b                   	pop    ebx
c0013000:	c3                   	ret    

c0013001 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013001:	56                   	push   esi
c0013002:	53                   	push   ebx
c0013003:	83 ec 48             	sub    esp,0x48
c0013006:	6a 12                	push   0x12
c0013008:	68 ff 00 00 00       	push   0xff
c001300d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013011:	56                   	push   esi
c0013012:	e8 d9 d4 fe ff       	call   c00004f0 <memset>
c0013017:	5a                   	pop    edx
c0013018:	59                   	pop    ecx
c0013019:	56                   	push   esi
c001301a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001301e:	e8 f4 fd ff ff       	call   c0012e17 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013023:	83 c4 10             	add    esp,0x10
c0013026:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001302a:	85 db                	test   ebx,ebx
c001302c:	74 42                	je     c0013070 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001302e:	50                   	push   eax
c001302f:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013033:	50                   	push   eax
c0013034:	53                   	push   ebx
c0013035:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013039:	e8 ff f6 ff ff       	call   c001273d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001303e:	83 c4 0c             	add    esp,0xc
c0013041:	6a 12                	push   0x12
c0013043:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013047:	50                   	push   eax
c0013048:	56                   	push   esi
c0013049:	e8 32 d3 fe ff       	call   c0000380 <memcmp>
c001304e:	83 c4 10             	add    esp,0x10
c0013051:	85 c0                	test   eax,eax
c0013053:	74 1e                	je     c0013073 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013055:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c001305a:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001305f:	c1 e3 08             	shl    ebx,0x8
c0013062:	09 d8                	or     eax,ebx
c0013064:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013069:	c1 e3 10             	shl    ebx,0x10
c001306c:	09 c3                	or     ebx,eax
c001306e:	eb ba                	jmp    c001302a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013070:	83 cb ff             	or     ebx,0xffffffff
c0013073:	83 c4 44             	add    esp,0x44
c0013076:	89 d8                	mov    eax,ebx
c0013078:	5b                   	pop    ebx
c0013079:	5e                   	pop    esi
c001307a:	c3                   	ret    

c001307b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001307b:	57                   	push   edi
c001307c:	56                   	push   esi
c001307d:	53                   	push   ebx
c001307e:	83 ec 34             	sub    esp,0x34
c0013081:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013085:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013089:	6a 2b                	push   0x2b
c001308b:	6a 00                	push   0x0
c001308d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013091:	53                   	push   ebx
c0013092:	e8 59 d4 fe ff       	call   c00004f0 <memset>
c0013097:	58                   	pop    eax
c0013098:	5a                   	pop    edx
c0013099:	8d 44 24 11          	lea    eax,[esp+0x11]
c001309d:	50                   	push   eax
c001309e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00130a2:	e8 70 fd ff ff       	call   c0012e17 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00130a7:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c00130ab:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00130af:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00130b3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00130b7:	53                   	push   ebx
c00130b8:	6a 00                	push   0x0
c00130ba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130c2:	e8 20 f9 ff ff       	call   c00129e7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00130c7:	83 c4 50             	add    esp,0x50
c00130ca:	5b                   	pop    ebx
c00130cb:	5e                   	pop    esi
c00130cc:	5f                   	pop    edi
c00130cd:	c3                   	ret    

c00130ce <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00130ce:	55                   	push   ebp
c00130cf:	57                   	push   edi
c00130d0:	56                   	push   esi
c00130d1:	53                   	push   ebx
c00130d2:	83 ec 40             	sub    esp,0x40
c00130d5:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00130d9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00130dd:	6a 2b                	push   0x2b
c00130df:	6a 00                	push   0x0
c00130e1:	8d 74 24 11          	lea    esi,[esp+0x11]
c00130e5:	56                   	push   esi
c00130e6:	e8 05 d4 fe ff       	call   c00004f0 <memset>
c00130eb:	5f                   	pop    edi
c00130ec:	89 ef                	mov    edi,ebp
c00130ee:	58                   	pop    eax
c00130ef:	8d 44 24 11          	lea    eax,[esp+0x11]
c00130f3:	50                   	push   eax
c00130f4:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00130f8:	e8 1a fd ff ff       	call   c0012e17 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00130fd:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013102:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013107:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001310c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013111:	83 c4 10             	add    esp,0x10
c0013114:	85 ed                	test   ebp,ebp
c0013116:	74 14                	je     c001312c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013118:	51                   	push   ecx
c0013119:	51                   	push   ecx
c001311a:	57                   	push   edi
c001311b:	53                   	push   ebx
c001311c:	e8 0e f7 ff ff       	call   c001282f <CmGetNext(Reghive_Tag*, int)>
c0013121:	83 c4 10             	add    esp,0x10
c0013124:	85 c0                	test   eax,eax
c0013126:	74 04                	je     c001312c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013128:	89 c7                	mov    edi,eax
c001312a:	eb e8                	jmp    c0013114 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001312c:	56                   	push   esi
c001312d:	6a 00                	push   0x0
c001312f:	57                   	push   edi
c0013130:	53                   	push   ebx
c0013131:	e8 b1 f8 ff ff       	call   c00129e7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013136:	83 c4 0c             	add    esp,0xc
c0013139:	56                   	push   esi
c001313a:	50                   	push   eax
c001313b:	89 c7                	mov    edi,eax
c001313d:	53                   	push   ebx
c001313e:	e8 fa f5 ff ff       	call   c001273d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013143:	58                   	pop    eax
c0013144:	5a                   	pop    edx
c0013145:	6a 6c                	push   0x6c
c0013147:	6a 00                	push   0x0
c0013149:	6a 00                	push   0x0
c001314b:	68 78 1e 02 c0       	push   0xc0021e78
c0013150:	57                   	push   edi
c0013151:	53                   	push   ebx
c0013152:	e8 24 ff ff ff       	call   c001307b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013157:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001315b:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001315f:	c1 e8 10             	shr    eax,0x10
c0013162:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013166:	83 c4 1c             	add    esp,0x1c
c0013169:	56                   	push   esi
c001316a:	57                   	push   edi
c001316b:	53                   	push   ebx
c001316c:	e8 f0 f6 ff ff       	call   c0012861 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013171:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013176:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001317b:	c1 e0 08             	shl    eax,0x8
c001317e:	09 c2                	or     edx,eax
c0013180:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013185:	83 c4 4c             	add    esp,0x4c
c0013188:	5b                   	pop    ebx
c0013189:	5e                   	pop    esi
c001318a:	c1 e0 10             	shl    eax,0x10
c001318d:	09 d0                	or     eax,edx
c001318f:	5f                   	pop    edi
c0013190:	5d                   	pop    ebp
c0013191:	c3                   	ret    

c0013192 <zStrtok(char*, char const*)>:
c0013192:	55                   	push   ebp
c0013193:	57                   	push   edi
c0013194:	56                   	push   esi
c0013195:	53                   	push   ebx
c0013196:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001319a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001319e:	85 db                	test   ebx,ebx
c00131a0:	74 2f                	je     c00131d1 <zStrtok(char*, char const*)+0x3f>
c00131a2:	85 c0                	test   eax,eax
c00131a4:	75 09                	jne    c00131af <zStrtok(char*, char const*)+0x1d>
c00131a6:	a1 90 9c 02 c0       	mov    eax,ds:0xc0029c90
c00131ab:	85 c0                	test   eax,eax
c00131ad:	74 50                	je     c00131ff <zStrtok(char*, char const*)+0x6d>
c00131af:	31 c9                	xor    ecx,ecx
c00131b1:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00131b5:	74 03                	je     c00131ba <zStrtok(char*, char const*)+0x28>
c00131b7:	41                   	inc    ecx
c00131b8:	eb f7                	jmp    c00131b1 <zStrtok(char*, char const*)+0x1f>
c00131ba:	31 d2                	xor    edx,edx
c00131bc:	39 ca                	cmp    edx,ecx
c00131be:	74 15                	je     c00131d5 <zStrtok(char*, char const*)+0x43>
c00131c0:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00131c4:	8d 3c 10             	lea    edi,[eax+edx*1]
c00131c7:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00131ca:	39 ee                	cmp    esi,ebp
c00131cc:	74 13                	je     c00131e1 <zStrtok(char*, char const*)+0x4f>
c00131ce:	42                   	inc    edx
c00131cf:	eb eb                	jmp    c00131bc <zStrtok(char*, char const*)+0x2a>
c00131d1:	31 c0                	xor    eax,eax
c00131d3:	eb 2a                	jmp    c00131ff <zStrtok(char*, char const*)+0x6d>
c00131d5:	c7 05 90 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c90,0x0
c00131df:	eb 1e                	jmp    c00131ff <zStrtok(char*, char const*)+0x6d>
c00131e1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00131e4:	39 ce                	cmp    esi,ecx
c00131e6:	75 0a                	jne    c00131f2 <zStrtok(char*, char const*)+0x60>
c00131e8:	40                   	inc    eax
c00131e9:	a3 90 9c 02 c0       	mov    ds:0xc0029c90,eax
c00131ee:	89 d8                	mov    eax,ebx
c00131f0:	eb 0d                	jmp    c00131ff <zStrtok(char*, char const*)+0x6d>
c00131f2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00131f5:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00131f9:	89 15 90 9c 02 c0    	mov    DWORD PTR ds:0xc0029c90,edx
c00131ff:	5b                   	pop    ebx
c0013200:	5e                   	pop    esi
c0013201:	5f                   	pop    edi
c0013202:	5d                   	pop    ebp
c0013203:	c3                   	ret    

c0013204 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013204:	57                   	push   edi
c0013205:	56                   	push   esi
c0013206:	53                   	push   ebx
c0013207:	81 ec 08 01 00 00    	sub    esp,0x108
c001320d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013214:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001321b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001321f:	53                   	push   ebx
c0013220:	e8 2b d4 fe ff       	call   c0000650 <strcpy>
c0013225:	59                   	pop    ecx
c0013226:	5e                   	pop    esi
c0013227:	68 dc 21 02 c0       	push   0xc00221dc
c001322c:	53                   	push   ebx
c001322d:	bb 01 00 00 00       	mov    ebx,0x1
c0013232:	e8 5b ff ff ff       	call   c0013192 <zStrtok(char*, char const*)>
c0013237:	83 c4 10             	add    esp,0x10
c001323a:	85 c0                	test   eax,eax
c001323c:	74 3b                	je     c0013279 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001323e:	52                   	push   edx
c001323f:	50                   	push   eax
c0013240:	6a 01                	push   0x1
c0013242:	57                   	push   edi
c0013243:	e8 b9 fd ff ff       	call   c0013001 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013248:	59                   	pop    ecx
c0013249:	5e                   	pop    esi
c001324a:	89 c3                	mov    ebx,eax
c001324c:	68 dc 21 02 c0       	push   0xc00221dc
c0013251:	6a 00                	push   0x0
c0013253:	e8 3a ff ff ff       	call   c0013192 <zStrtok(char*, char const*)>
c0013258:	83 c4 10             	add    esp,0x10
c001325b:	85 c0                	test   eax,eax
c001325d:	89 c6                	mov    esi,eax
c001325f:	74 18                	je     c0013279 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013261:	52                   	push   edx
c0013262:	52                   	push   edx
c0013263:	53                   	push   ebx
c0013264:	57                   	push   edi
c0013265:	e8 86 f5 ff ff       	call   c00127f0 <CmEnterDirectory(Reghive_Tag*, int)>
c001326a:	83 c4 10             	add    esp,0x10
c001326d:	83 f8 ff             	cmp    eax,0xffffffff
c0013270:	89 c3                	mov    ebx,eax
c0013272:	74 05                	je     c0013279 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013274:	50                   	push   eax
c0013275:	56                   	push   esi
c0013276:	53                   	push   ebx
c0013277:	eb c9                	jmp    c0013242 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013279:	81 c4 00 01 00 00    	add    esp,0x100
c001327f:	89 d8                	mov    eax,ebx
c0013281:	5b                   	pop    ebx
c0013282:	5e                   	pop    esi
c0013283:	5f                   	pop    edi
c0013284:	c3                   	ret    

c0013285 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013285:	55                   	push   ebp
c0013286:	57                   	push   edi
c0013287:	56                   	push   esi
c0013288:	53                   	push   ebx
c0013289:	83 ec 5c             	sub    esp,0x5c
c001328c:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013290:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013294:	85 db                	test   ebx,ebx
c0013296:	0f 8e 84 00 00 00    	jle    c0013320 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001329c:	57                   	push   edi
c001329d:	31 ed                	xor    ebp,ebp
c001329f:	6a 32                	push   0x32
c00132a1:	6a 00                	push   0x0
c00132a3:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00132a7:	57                   	push   edi
c00132a8:	e8 43 d2 fe ff       	call   c00004f0 <memset>
c00132ad:	83 c4 0c             	add    esp,0xc
c00132b0:	57                   	push   edi
c00132b1:	53                   	push   ebx
c00132b2:	56                   	push   esi
c00132b3:	e8 31 fb ff ff       	call   c0012de9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00132b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132bc:	83 c4 10             	add    esp,0x10
c00132bf:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00132c3:	7d 13                	jge    c00132d8 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00132c5:	83 ec 0c             	sub    esp,0xc
c00132c8:	45                   	inc    ebp
c00132c9:	68 83 25 02 c0       	push   0xc0022583
c00132ce:	e8 37 76 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00132d3:	83 c4 10             	add    esp,0x10
c00132d6:	eb e7                	jmp    c00132bf <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00132d8:	51                   	push   ecx
c00132d9:	57                   	push   edi
c00132da:	53                   	push   ebx
c00132db:	68 7e 1e 02 c0       	push   0xc0021e7e
c00132e0:	e8 25 76 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00132e5:	83 c4 10             	add    esp,0x10
c00132e8:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00132ed:	75 1e                	jne    c001330d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00132ef:	52                   	push   edx
c00132f0:	52                   	push   edx
c00132f1:	53                   	push   ebx
c00132f2:	56                   	push   esi
c00132f3:	e8 f8 f4 ff ff       	call   c00127f0 <CmEnterDirectory(Reghive_Tag*, int)>
c00132f8:	83 c4 0c             	add    esp,0xc
c00132fb:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00132ff:	8d 51 04             	lea    edx,[ecx+0x4]
c0013302:	52                   	push   edx
c0013303:	50                   	push   eax
c0013304:	56                   	push   esi
c0013305:	e8 7b ff ff ff       	call   c0013285 <CmDisplayTree(Reghive_Tag*, int, int)>
c001330a:	83 c4 10             	add    esp,0x10
c001330d:	50                   	push   eax
c001330e:	50                   	push   eax
c001330f:	53                   	push   ebx
c0013310:	56                   	push   esi
c0013311:	e8 19 f5 ff ff       	call   c001282f <CmGetNext(Reghive_Tag*, int)>
c0013316:	83 c4 10             	add    esp,0x10
c0013319:	89 c3                	mov    ebx,eax
c001331b:	e9 74 ff ff ff       	jmp    c0013294 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013320:	83 c4 5c             	add    esp,0x5c
c0013323:	5b                   	pop    ebx
c0013324:	5e                   	pop    esi
c0013325:	5f                   	pop    edi
c0013326:	5d                   	pop    ebp
c0013327:	c3                   	ret    

c0013328 <CmSplitFinalSlashInPlace(char*)>:
c0013328:	53                   	push   ebx
c0013329:	83 ec 14             	sub    esp,0x14
c001332c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013330:	53                   	push   ebx
c0013331:	e8 4a d2 fe ff       	call   c0000580 <strlen>
c0013336:	83 c4 10             	add    esp,0x10
c0013339:	48                   	dec    eax
c001333a:	85 c0                	test   eax,eax
c001333c:	74 15                	je     c0013353 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001333e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013342:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013345:	75 09                	jne    c0013350 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013347:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001334a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001334e:	eb 05                	jmp    c0013355 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013350:	48                   	dec    eax
c0013351:	eb e7                	jmp    c001333a <CmSplitFinalSlashInPlace(char*)+0x12>
c0013353:	31 c0                	xor    eax,eax
c0013355:	83 c4 08             	add    esp,0x8
c0013358:	5b                   	pop    ebx
c0013359:	c3                   	ret    

c001335a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001335a:	55                   	push   ebp
c001335b:	57                   	push   edi
c001335c:	56                   	push   esi
c001335d:	53                   	push   ebx
c001335e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013364:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c001336b:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c001336e:	8d 43 01             	lea    eax,[ebx+0x1]
c0013371:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013375:	89 f0                	mov    eax,esi
c0013377:	3c 40                	cmp    al,0x40
c0013379:	75 1b                	jne    c0013396 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c001337b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001337e:	85 c0                	test   eax,eax
c0013380:	74 08                	je     c001338a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013382:	83 f8 3a             	cmp    eax,0x3a
c0013385:	74 03                	je     c001338a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013387:	43                   	inc    ebx
c0013388:	eb f1                	jmp    c001337b <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c001338a:	85 c0                	test   eax,eax
c001338c:	0f 84 45 01 00 00    	je     c00134d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013392:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013395:	43                   	inc    ebx
c0013396:	50                   	push   eax
c0013397:	6a 40                	push   0x40
c0013399:	6a 00                	push   0x0
c001339b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001339f:	50                   	push   eax
c00133a0:	e8 4b d1 fe ff       	call   c00004f0 <memset>
c00133a5:	89 f1                	mov    ecx,esi
c00133a7:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00133ae:	31 c0                	xor    eax,eax
c00133b0:	83 c4 10             	add    esp,0x10
c00133b3:	0f be f1             	movsx  esi,cl
c00133b6:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00133b9:	85 d2                	test   edx,edx
c00133bb:	89 d1                	mov    ecx,edx
c00133bd:	0f 84 14 01 00 00    	je     c00134d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00133c3:	3d c7 00 00 00       	cmp    eax,0xc7
c00133c8:	0f 8f 09 01 00 00    	jg     c00134d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00133ce:	83 fa 0a             	cmp    edx,0xa
c00133d1:	0f 85 f1 00 00 00    	jne    c00134c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c00133d7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00133dc:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00133e1:	89 c8                	mov    eax,ecx
c00133e3:	a8 df                	test   al,0xdf
c00133e5:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00133ea:	83 f9 23             	cmp    ecx,0x23
c00133ed:	0f 94 c2             	sete   dl
c00133f0:	89 d5                	mov    ebp,edx
c00133f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00133f6:	09 ea                	or     edx,ebp
c00133f8:	80 e2 01             	and    dl,0x1
c00133fb:	75 47                	jne    c0013444 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00133fd:	83 e8 09             	sub    eax,0x9
c0013400:	3c 01                	cmp    al,0x1
c0013402:	76 40                	jbe    c0013444 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013404:	83 f9 5b             	cmp    ecx,0x5b
c0013407:	75 42                	jne    c001344b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013409:	83 fe 40             	cmp    esi,0x40
c001340c:	75 36                	jne    c0013444 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001340e:	83 ec 0c             	sub    esp,0xc
c0013411:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013415:	55                   	push   ebp
c0013416:	e8 65 d1 fe ff       	call   c0000580 <strlen>
c001341b:	83 c4 10             	add    esp,0x10
c001341e:	83 f8 3f             	cmp    eax,0x3f
c0013421:	0f 87 b0 00 00 00    	ja     c00134d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013427:	50                   	push   eax
c0013428:	50                   	push   eax
c0013429:	55                   	push   ebp
c001342a:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c001342e:	55                   	push   ebp
c001342f:	e8 1c d2 fe ff       	call   c0000650 <strcpy>
c0013434:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013437:	e8 44 d1 fe ff       	call   c0000580 <strlen>
c001343c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013441:	83 c4 10             	add    esp,0x10
c0013444:	31 d2                	xor    edx,edx
c0013446:	e9 84 00 00 00       	jmp    c00134cf <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c001344b:	83 fe 40             	cmp    esi,0x40
c001344e:	74 06                	je     c0013456 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0013450:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013454:	eb 19                	jmp    c001346f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013456:	51                   	push   ecx
c0013457:	51                   	push   ecx
c0013458:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001345c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013460:	50                   	push   eax
c0013461:	e8 1a d3 fe ff       	call   c0000780 <strcmp>
c0013466:	83 c4 10             	add    esp,0x10
c0013469:	85 c0                	test   eax,eax
c001346b:	75 d7                	jne    c0013444 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001346d:	eb e1                	jmp    c0013450 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c001346f:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0013472:	85 c9                	test   ecx,ecx
c0013474:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013479:	83 f9 3d             	cmp    ecx,0x3d
c001347c:	0f 94 c0             	sete   al
c001347f:	89 c5                	mov    ebp,eax
c0013481:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013485:	09 e8                	or     eax,ebp
c0013487:	a8 01                	test   al,0x1
c0013489:	89 c5                	mov    ebp,eax
c001348b:	75 03                	jne    c0013490 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c001348d:	42                   	inc    edx
c001348e:	eb df                	jmp    c001346f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013490:	85 c9                	test   ecx,ecx
c0013492:	74 43                	je     c00134d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013494:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013498:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001349b:	52                   	push   edx
c001349c:	52                   	push   edx
c001349d:	8d 44 24 60          	lea    eax,[esp+0x60]
c00134a1:	50                   	push   eax
c00134a2:	53                   	push   ebx
c00134a3:	e8 d8 d2 fe ff       	call   c0000780 <strcmp>
c00134a8:	83 c4 10             	add    esp,0x10
c00134ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00134af:	85 c0                	test   eax,eax
c00134b1:	75 91                	jne    c0013444 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00134b3:	50                   	push   eax
c00134b4:	42                   	inc    edx
c00134b5:	50                   	push   eax
c00134b6:	52                   	push   edx
c00134b7:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00134be:	e8 8d d1 fe ff       	call   c0000650 <strcpy>
c00134c3:	83 c4 10             	add    esp,0x10
c00134c6:	eb 11                	jmp    c00134d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c00134c8:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00134cc:	8d 50 01             	lea    edx,[eax+0x1]
c00134cf:	47                   	inc    edi
c00134d0:	89 d0                	mov    eax,edx
c00134d2:	e9 df fe ff ff       	jmp    c00133b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c00134d7:	31 ed                	xor    ebp,ebp
c00134d9:	81 c4 2c 01 00 00    	add    esp,0x12c
c00134df:	89 e8                	mov    eax,ebp
c00134e1:	5b                   	pop    ebx
c00134e2:	5e                   	pop    esi
c00134e3:	5f                   	pop    edi
c00134e4:	5d                   	pop    ebp
c00134e5:	c3                   	ret    

c00134e6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00134e6:	57                   	push   edi
c00134e7:	56                   	push   esi
c00134e8:	53                   	push   ebx
c00134e9:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00134ef:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00134f6:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00134fd:	53                   	push   ebx
c00134fe:	e8 7d d0 fe ff       	call   c0000580 <strlen>
c0013503:	89 34 24             	mov    DWORD PTR [esp],esi
c0013506:	89 c7                	mov    edi,eax
c0013508:	e8 73 d0 fe ff       	call   c0000580 <strlen>
c001350d:	83 c4 10             	add    esp,0x10
c0013510:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013514:	3d ff 00 00 00       	cmp    eax,0xff
c0013519:	0f 87 d3 00 00 00    	ja     c00135f2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001351f:	57                   	push   edi
c0013520:	57                   	push   edi
c0013521:	56                   	push   esi
c0013522:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013526:	56                   	push   esi
c0013527:	e8 24 d1 fe ff       	call   c0000650 <strcpy>
c001352c:	58                   	pop    eax
c001352d:	5a                   	pop    edx
c001352e:	68 dc 21 02 c0       	push   0xc00221dc
c0013533:	56                   	push   esi
c0013534:	e8 37 d3 fe ff       	call   c0000870 <strcat>
c0013539:	59                   	pop    ecx
c001353a:	5f                   	pop    edi
c001353b:	53                   	push   ebx
c001353c:	56                   	push   esi
c001353d:	e8 2e d3 fe ff       	call   c0000870 <strcat>
c0013542:	58                   	pop    eax
c0013543:	5a                   	pop    edx
c0013544:	68 88 1e 02 c0       	push   0xc0021e88
c0013549:	56                   	push   esi
c001354a:	e8 21 d3 fe ff       	call   c0000870 <strcat>
c001354f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013556:	e8 78 45 ff ff       	call   c0007ad3 <malloc>
c001355b:	83 c4 0c             	add    esp,0xc
c001355e:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0013564:	56                   	push   esi
c0013565:	50                   	push   eax
c0013566:	89 c3                	mov    ebx,eax
c0013568:	e8 7b 81 ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c001356d:	83 c4 10             	add    esp,0x10
c0013570:	85 db                	test   ebx,ebx
c0013572:	74 7e                	je     c00135f2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013574:	51                   	push   ecx
c0013575:	51                   	push   ecx
c0013576:	6a 01                	push   0x1
c0013578:	53                   	push   ebx
c0013579:	e8 26 82 ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c001357e:	83 c4 10             	add    esp,0x10
c0013581:	85 c0                	test   eax,eax
c0013583:	74 08                	je     c001358d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013585:	83 ec 0c             	sub    esp,0xc
c0013588:	8b 03                	mov    eax,DWORD PTR [ebx]
c001358a:	53                   	push   ebx
c001358b:	eb 5f                	jmp    c00135ec <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001358d:	52                   	push   edx
c001358e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013592:	50                   	push   eax
c0013593:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013597:	50                   	push   eax
c0013598:	53                   	push   ebx
c0013599:	e8 08 85 ff ff       	call   c000baa6 <File::stat(unsigned long long*, bool*)>
c001359e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00135a2:	83 c4 10             	add    esp,0x10
c00135a5:	89 c1                	mov    ecx,eax
c00135a7:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00135ab:	74 31                	je     c00135de <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00135ad:	83 ec 0c             	sub    esp,0xc
c00135b0:	50                   	push   eax
c00135b1:	e8 1d 45 ff ff       	call   c0007ad3 <malloc>
c00135b6:	89 c6                	mov    esi,eax
c00135b8:	58                   	pop    eax
c00135b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135bb:	8d 54 24 20          	lea    edx,[esp+0x20]
c00135bf:	52                   	push   edx
c00135c0:	56                   	push   esi
c00135c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00135c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00135c9:	53                   	push   ebx
c00135ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00135cd:	83 c4 20             	add    esp,0x20
c00135d0:	85 c0                	test   eax,eax
c00135d2:	75 0a                	jne    c00135de <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00135d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135d8:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00135dc:	74 18                	je     c00135f6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00135de:	83 ec 0c             	sub    esp,0xc
c00135e1:	53                   	push   ebx
c00135e2:	e8 1b 82 ff ff       	call   c000b802 <File::close()>
c00135e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00135ef:	83 c4 10             	add    esp,0x10
c00135f2:	31 c0                	xor    eax,eax
c00135f4:	eb 3b                	jmp    c0013631 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00135f6:	83 ec 0c             	sub    esp,0xc
c00135f9:	53                   	push   ebx
c00135fa:	e8 03 82 ff ff       	call   c000b802 <File::close()>
c00135ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013601:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013604:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013607:	83 c4 0c             	add    esp,0xc
c001360a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013611:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013618:	56                   	push   esi
c0013619:	e8 3c fd ff ff       	call   c001335a <Reg::findLineFromLoadedData(char*, char*, char*)>
c001361e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013621:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013625:	e8 b9 44 ff ff       	call   c0007ae3 <free>
c001362a:	83 c4 10             	add    esp,0x10
c001362d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013631:	81 c4 20 01 00 00    	add    esp,0x120
c0013637:	5b                   	pop    ebx
c0013638:	5e                   	pop    esi
c0013639:	5f                   	pop    edi
c001363a:	c3                   	ret    

c001363b <Reg::getLine(char*, char*, char*)>:
c001363b:	57                   	push   edi
c001363c:	56                   	push   esi
c001363d:	53                   	push   ebx
c001363e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013646:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001364a:	57                   	push   edi
c001364b:	56                   	push   esi
c001364c:	53                   	push   ebx
c001364d:	68 8d 1e 02 c0       	push   0xc0021e8d
c0013652:	e8 8f fe ff ff       	call   c00134e6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013657:	83 c4 10             	add    esp,0x10
c001365a:	84 c0                	test   al,al
c001365c:	75 10                	jne    c001366e <Reg::getLine(char*, char*, char*)+0x33>
c001365e:	57                   	push   edi
c001365f:	56                   	push   esi
c0013660:	53                   	push   ebx
c0013661:	68 b2 1e 02 c0       	push   0xc0021eb2
c0013666:	e8 7b fe ff ff       	call   c00134e6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001366b:	83 c4 10             	add    esp,0x10
c001366e:	5b                   	pop    ebx
c001366f:	5e                   	pop    esi
c0013670:	5f                   	pop    edi
c0013671:	c3                   	ret    

c0013672 <Reg::readInt(char*, char*, int*)>:
c0013672:	55                   	push   ebp
c0013673:	57                   	push   edi
c0013674:	56                   	push   esi
c0013675:	53                   	push   ebx
c0013676:	81 ec f0 00 00 00    	sub    esp,0xf0
c001367c:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013680:	55                   	push   ebp
c0013681:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013688:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001368f:	e8 a7 ff ff ff       	call   c001363b <Reg::getLine(char*, char*, char*)>
c0013694:	83 c4 10             	add    esp,0x10
c0013697:	84 c0                	test   al,al
c0013699:	0f 84 b6 00 00 00    	je     c0013755 <Reg::readInt(char*, char*, int*)+0xe3>
c001369f:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00136a4:	83 fa 2b             	cmp    edx,0x2b
c00136a7:	74 0c                	je     c00136b5 <Reg::readInt(char*, char*, int*)+0x43>
c00136a9:	83 fa 2d             	cmp    edx,0x2d
c00136ac:	75 0e                	jne    c00136bc <Reg::readInt(char*, char*, int*)+0x4a>
c00136ae:	ba 01 00 00 00       	mov    edx,0x1
c00136b3:	eb 0b                	jmp    c00136c0 <Reg::readInt(char*, char*, int*)+0x4e>
c00136b5:	ba 01 00 00 00       	mov    edx,0x1
c00136ba:	eb 02                	jmp    c00136be <Reg::readInt(char*, char*, int*)+0x4c>
c00136bc:	31 d2                	xor    edx,edx
c00136be:	31 c0                	xor    eax,eax
c00136c0:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00136c5:	be 0a 00 00 00       	mov    esi,0xa
c00136ca:	75 21                	jne    c00136ed <Reg::readInt(char*, char*, int*)+0x7b>
c00136cc:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00136d1:	83 f9 78             	cmp    ecx,0x78
c00136d4:	75 0a                	jne    c00136e0 <Reg::readInt(char*, char*, int*)+0x6e>
c00136d6:	83 c2 02             	add    edx,0x2
c00136d9:	be 10 00 00 00       	mov    esi,0x10
c00136de:	eb 0d                	jmp    c00136ed <Reg::readInt(char*, char*, int*)+0x7b>
c00136e0:	83 f9 62             	cmp    ecx,0x62
c00136e3:	75 08                	jne    c00136ed <Reg::readInt(char*, char*, int*)+0x7b>
c00136e5:	83 c2 02             	add    edx,0x2
c00136e8:	be 02 00 00 00       	mov    esi,0x2
c00136ed:	01 d5                	add    ebp,edx
c00136ef:	31 d2                	xor    edx,edx
c00136f1:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00136f5:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00136f9:	85 c9                	test   ecx,ecx
c00136fb:	0f 94 c3             	sete   bl
c00136fe:	83 f9 0d             	cmp    ecx,0xd
c0013701:	89 df                	mov    edi,ebx
c0013703:	0f 94 c3             	sete   bl
c0013706:	09 df                	or     edi,ebx
c0013708:	89 fb                	mov    ebx,edi
c001370a:	83 e7 01             	and    edi,0x1
c001370d:	75 35                	jne    c0013744 <Reg::readInt(char*, char*, int*)+0xd2>
c001370f:	0f af d6             	imul   edx,esi
c0013712:	83 fe 10             	cmp    esi,0x10
c0013715:	75 26                	jne    c001373d <Reg::readInt(char*, char*, int*)+0xcb>
c0013717:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001371b:	83 ef 41             	sub    edi,0x41
c001371e:	89 fb                	mov    ebx,edi
c0013720:	80 fb 05             	cmp    bl,0x5
c0013723:	77 06                	ja     c001372b <Reg::readInt(char*, char*, int*)+0xb9>
c0013725:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013729:	eb 16                	jmp    c0013741 <Reg::readInt(char*, char*, int*)+0xcf>
c001372b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001372f:	83 eb 61             	sub    ebx,0x61
c0013732:	80 fb 05             	cmp    bl,0x5
c0013735:	77 06                	ja     c001373d <Reg::readInt(char*, char*, int*)+0xcb>
c0013737:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c001373b:	eb 04                	jmp    c0013741 <Reg::readInt(char*, char*, int*)+0xcf>
c001373d:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013741:	45                   	inc    ebp
c0013742:	eb ad                	jmp    c00136f1 <Reg::readInt(char*, char*, int*)+0x7f>
c0013744:	84 c0                	test   al,al
c0013746:	74 02                	je     c001374a <Reg::readInt(char*, char*, int*)+0xd8>
c0013748:	f7 da                	neg    edx
c001374a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013751:	89 10                	mov    DWORD PTR [eax],edx
c0013753:	88 d8                	mov    al,bl
c0013755:	81 c4 ec 00 00 00    	add    esp,0xec
c001375b:	5b                   	pop    ebx
c001375c:	5e                   	pop    esi
c001375d:	5f                   	pop    edi
c001375e:	5d                   	pop    ebp
c001375f:	c3                   	ret    

c0013760 <Reg::readString(char*, char*, char*, int)>:
c0013760:	57                   	push   edi
c0013761:	56                   	push   esi
c0013762:	53                   	push   ebx
c0013763:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013769:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001376d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013774:	57                   	push   edi
c0013775:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001377c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013783:	e8 b3 fe ff ff       	call   c001363b <Reg::getLine(char*, char*, char*)>
c0013788:	83 c4 10             	add    esp,0x10
c001378b:	84 c0                	test   al,al
c001378d:	89 c6                	mov    esi,eax
c001378f:	74 44                	je     c00137d5 <Reg::readString(char*, char*, char*, int)+0x75>
c0013791:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013798:	31 c0                	xor    eax,eax
c001379a:	4a                   	dec    edx
c001379b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001379e:	84 c9                	test   cl,cl
c00137a0:	74 0f                	je     c00137b1 <Reg::readString(char*, char*, char*, int)+0x51>
c00137a2:	39 c2                	cmp    edx,eax
c00137a4:	7e 0b                	jle    c00137b1 <Reg::readString(char*, char*, char*, int)+0x51>
c00137a6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00137a9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00137ae:	40                   	inc    eax
c00137af:	eb ea                	jmp    c001379b <Reg::readString(char*, char*, char*, int)+0x3b>
c00137b1:	83 ec 0c             	sub    esp,0xc
c00137b4:	53                   	push   ebx
c00137b5:	e8 c6 cd fe ff       	call   c0000580 <strlen>
c00137ba:	83 c4 10             	add    esp,0x10
c00137bd:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00137c2:	75 11                	jne    c00137d5 <Reg::readString(char*, char*, char*, int)+0x75>
c00137c4:	83 ec 0c             	sub    esp,0xc
c00137c7:	53                   	push   ebx
c00137c8:	e8 b3 cd fe ff       	call   c0000580 <strlen>
c00137cd:	83 c4 10             	add    esp,0x10
c00137d0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00137d5:	81 c4 d0 00 00 00    	add    esp,0xd0
c00137db:	89 f0                	mov    eax,esi
c00137dd:	5b                   	pop    ebx
c00137de:	5e                   	pop    esi
c00137df:	5f                   	pop    edi
c00137e0:	c3                   	ret    

c00137e1 <Reg::readBool(char*, char*, bool*)>:
c00137e1:	83 ec 20             	sub    esp,0x20
c00137e4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00137e8:	50                   	push   eax
c00137e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137f1:	e8 7c fe ff ff       	call   c0013672 <Reg::readInt(char*, char*, int*)>
c00137f6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00137fa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00137ff:	0f 95 02             	setne  BYTE PTR [edx]
c0013802:	83 c4 2c             	add    esp,0x2c
c0013805:	c3                   	ret    

c0013806 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013806:	53                   	push   ebx
c0013807:	83 ec 1c             	sub    esp,0x1c
c001380a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001380e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013812:	50                   	push   eax
c0013813:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013817:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001381b:	e8 c1 ff ff ff       	call   c00137e1 <Reg::readBool(char*, char*, bool*)>
c0013820:	83 c4 10             	add    esp,0x10
c0013823:	84 c0                	test   al,al
c0013825:	74 04                	je     c001382b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013827:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001382b:	83 c4 18             	add    esp,0x18
c001382e:	88 d8                	mov    al,bl
c0013830:	5b                   	pop    ebx
c0013831:	c3                   	ret    

c0013832 <Reg::readIntWithDefault(char*, char*, int)>:
c0013832:	53                   	push   ebx
c0013833:	83 ec 1c             	sub    esp,0x1c
c0013836:	8d 44 24 10          	lea    eax,[esp+0x10]
c001383a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001383e:	50                   	push   eax
c001383f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013843:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013847:	e8 26 fe ff ff       	call   c0013672 <Reg::readInt(char*, char*, int*)>
c001384c:	83 c4 10             	add    esp,0x10
c001384f:	84 c0                	test   al,al
c0013851:	74 04                	je     c0013857 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013853:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013857:	83 c4 18             	add    esp,0x18
c001385a:	89 d8                	mov    eax,ebx
c001385c:	5b                   	pop    ebx
c001385d:	c3                   	ret    

c001385e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001385e:	57                   	push   edi
c001385f:	56                   	push   esi
c0013860:	53                   	push   ebx
c0013861:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013865:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013869:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001386d:	56                   	push   esi
c001386e:	57                   	push   edi
c001386f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013877:	e8 e4 fe ff ff       	call   c0013760 <Reg::readString(char*, char*, char*, int)>
c001387c:	83 c4 10             	add    esp,0x10
c001387f:	84 c0                	test   al,al
c0013881:	75 16                	jne    c0013899 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013883:	50                   	push   eax
c0013884:	56                   	push   esi
c0013885:	6a 00                	push   0x0
c0013887:	57                   	push   edi
c0013888:	e8 63 cc fe ff       	call   c00004f0 <memset>
c001388d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013890:	89 de                	mov    esi,ebx
c0013892:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013894:	83 c4 10             	add    esp,0x10
c0013897:	89 df                	mov    edi,ebx
c0013899:	5b                   	pop    ebx
c001389a:	89 f8                	mov    eax,edi
c001389c:	5e                   	pop    esi
c001389d:	5f                   	pop    edi
c001389e:	c3                   	ret    

c001389f <SysEject(regs*)>:
c001389f:	83 ec 0c             	sub    esp,0xc
c00138a2:	83 ca ff             	or     edx,0xffffffff
c00138a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00138ac:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00138b1:	83 e9 41             	sub    ecx,0x41
c00138b4:	83 f9 19             	cmp    ecx,0x19
c00138b7:	77 18                	ja     c00138d1 <SysEject(regs*)+0x32>
c00138b9:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c00138c0:	85 c9                	test   ecx,ecx
c00138c2:	74 0d                	je     c00138d1 <SysEject(regs*)+0x32>
c00138c4:	83 ec 0c             	sub    esp,0xc
c00138c7:	51                   	push   ecx
c00138c8:	e8 ab a0 ff ff       	call   c000d978 <LogicalDisk::eject()>
c00138cd:	83 c4 10             	add    esp,0x10
c00138d0:	99                   	cdq    
c00138d1:	83 c4 0c             	add    esp,0xc
c00138d4:	c3                   	ret    

c00138d5 <SysExit(regs*)>:
c00138d5:	83 ec 18             	sub    esp,0x18
c00138d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00138dc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00138df:	e8 10 2b 00 00       	call   c00163f4 <terminateTask(int)>
c00138e4:	83 c8 ff             	or     eax,0xffffffff
c00138e7:	83 c4 1c             	add    esp,0x1c
c00138ea:	89 c2                	mov    edx,eax
c00138ec:	c3                   	ret    

c00138ed <SysGetCwd(regs*)>:
c00138ed:	83 ec 10             	sub    esp,0x10
c00138f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00138f4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00138f7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00138fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138ff:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013902:	e8 b1 7b ff ff       	call   c000b4b8 <Fs::getcwd(Process*, char*, int)>
c0013907:	83 c4 1c             	add    esp,0x1c
c001390a:	99                   	cdq    
c001390b:	c3                   	ret    

c001390c <SysGetPID(regs*)>:
c001390c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013911:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013914:	8b 00                	mov    eax,DWORD PTR [eax]
c0013916:	99                   	cdq    
c0013917:	c3                   	ret    

c0013918 <SysGetRAMData(regs*)>:
c0013918:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013922:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013928:	99                   	cdq    
c0013929:	f7 f9                	idiv   ecx
c001392b:	c1 e0 18             	shl    eax,0x18
c001392e:	09 c8                	or     eax,ecx
c0013930:	99                   	cdq    
c0013931:	c3                   	ret    

c0013932 <SysGetVGAPtr(regs*)>:
c0013932:	55                   	push   ebp
c0013933:	57                   	push   edi
c0013934:	56                   	push   esi
c0013935:	53                   	push   ebx
c0013936:	83 ec 18             	sub    esp,0x18
c0013939:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001393d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013940:	e8 7b 25 00 00       	call   c0015ec0 <Thr::processFromPID(int)>
c0013945:	83 c4 10             	add    esp,0x10
c0013948:	89 c1                	mov    ecx,eax
c001394a:	b8 01 00 00 00       	mov    eax,0x1
c001394f:	85 c9                	test   ecx,ecx
c0013951:	74 57                	je     c00139aa <SysGetVGAPtr(regs*)+0x78>
c0013953:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013957:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001395d:	74 0c                	je     c001396b <SysGetVGAPtr(regs*)+0x39>
c001395f:	83 ec 0c             	sub    esp,0xc
c0013962:	55                   	push   ebp
c0013963:	e8 07 4e ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013968:	83 c4 10             	add    esp,0x10
c001396b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001396e:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013973:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013976:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013978:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001397b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001397e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013984:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013987:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001398a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013990:	50                   	push   eax
c0013991:	50                   	push   eax
c0013992:	68 cd 1e 02 c0       	push   0xc0021ecd
c0013997:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001399a:	05 a8 0f 00 00       	add    eax,0xfa8
c001399f:	50                   	push   eax
c00139a0:	e8 ab cc fe ff       	call   c0000650 <strcpy>
c00139a5:	83 c4 10             	add    esp,0x10
c00139a8:	31 c0                	xor    eax,eax
c00139aa:	83 c4 0c             	add    esp,0xc
c00139ad:	31 d2                	xor    edx,edx
c00139af:	5b                   	pop    ebx
c00139b0:	5e                   	pop    esi
c00139b1:	5f                   	pop    edi
c00139b2:	5d                   	pop    ebp
c00139b3:	c3                   	ret    

c00139b4 <SysKill(regs*)>:
c00139b4:	53                   	push   ebx
c00139b5:	83 ec 08             	sub    esp,0x8
c00139b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139bc:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00139c0:	75 16                	jne    c00139d8 <SysKill(regs*)+0x24>
c00139c2:	83 ec 0c             	sub    esp,0xc
c00139c5:	68 d7 1e 02 c0       	push   0xc0021ed7
c00139ca:	e8 a2 d7 ff ff       	call   c0011171 <KePanic(char const*)>
c00139cf:	83 c4 10             	add    esp,0x10
c00139d2:	e9 89 00 00 00       	jmp    c0013a60 <SysKill(regs*)+0xac>
c00139d7:	90                   	nop
c00139d8:	83 ec 0c             	sub    esp,0xc
c00139db:	68 84 a4 02 c0       	push   0xc002a484
c00139e0:	e8 37 bd 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00139e5:	8d 76 00             	lea    esi,[esi+0x0]
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	85 c0                	test   eax,eax
c00139ed:	74 19                	je     c0013a08 <SysKill(regs*)+0x54>
c00139ef:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00139f2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00139f5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00139f7:	74 33                	je     c0013a2c <SysKill(regs*)+0x78>
c00139f9:	52                   	push   edx
c00139fa:	52                   	push   edx
c00139fb:	50                   	push   eax
c00139fc:	68 84 a4 02 c0       	push   0xc002a484
c0013a01:	e8 36 c0 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013a06:	eb e0                	jmp    c00139e8 <SysKill(regs*)+0x34>
c0013a08:	83 ec 0c             	sub    esp,0xc
c0013a0b:	68 78 a4 02 c0       	push   0xc002a478
c0013a10:	e8 07 bd 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a15:	8d 76 00             	lea    esi,[esi+0x0]
c0013a18:	83 c4 10             	add    esp,0x10
c0013a1b:	85 c0                	test   eax,eax
c0013a1d:	74 41                	je     c0013a60 <SysKill(regs*)+0xac>
c0013a1f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013a22:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a25:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013a27:	75 27                	jne    c0013a50 <SysKill(regs*)+0x9c>
c0013a29:	8d 76 00             	lea    esi,[esi+0x0]
c0013a2c:	51                   	push   ecx
c0013a2d:	51                   	push   ecx
c0013a2e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013a31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a39:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013a3f:	e8 cb db ff ff       	call   c001160f <KeRaiseSignal(SigHandlerBlock*, int)>
c0013a44:	83 c4 10             	add    esp,0x10
c0013a47:	31 c0                	xor    eax,eax
c0013a49:	31 d2                	xor    edx,edx
c0013a4b:	eb 1b                	jmp    c0013a68 <SysKill(regs*)+0xb4>
c0013a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a50:	52                   	push   edx
c0013a51:	52                   	push   edx
c0013a52:	50                   	push   eax
c0013a53:	68 78 a4 02 c0       	push   0xc002a478
c0013a58:	e8 df bf 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013a5d:	eb b9                	jmp    c0013a18 <SysKill(regs*)+0x64>
c0013a5f:	90                   	nop
c0013a60:	83 c8 ff             	or     eax,0xffffffff
c0013a63:	89 c2                	mov    edx,eax
c0013a65:	8d 76 00             	lea    esi,[esi+0x0]
c0013a68:	83 c4 08             	add    esp,0x8
c0013a6b:	5b                   	pop    ebx
c0013a6c:	c3                   	ret    

c0013a6d <SysLoadDLL(regs*)>:
c0013a6d:	56                   	push   esi
c0013a6e:	31 d2                	xor    edx,edx
c0013a70:	53                   	push   ebx
c0013a71:	b8 01 00 00 00       	mov    eax,0x1
c0013a76:	51                   	push   ecx
c0013a77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a7b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013a7f:	0f 84 8c 00 00 00    	je     c0013b11 <SysLoadDLL(regs*)+0xa4>
c0013a85:	83 ec 0c             	sub    esp,0xc
c0013a88:	68 14 01 00 00       	push   0x114
c0013a8d:	e8 41 40 ff ff       	call   c0007ad3 <malloc>
c0013a92:	83 c4 0c             	add    esp,0xc
c0013a95:	89 c3                	mov    ebx,eax
c0013a97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a9c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013a9f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013aa2:	53                   	push   ebx
c0013aa3:	e8 40 7c ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c0013aa8:	83 c4 10             	add    esp,0x10
c0013aab:	31 d2                	xor    edx,edx
c0013aad:	85 db                	test   ebx,ebx
c0013aaf:	b8 02 00 00 00       	mov    eax,0x2
c0013ab4:	74 5b                	je     c0013b11 <SysLoadDLL(regs*)+0xa4>
c0013ab6:	83 ec 0c             	sub    esp,0xc
c0013ab9:	53                   	push   ebx
c0013aba:	e8 a9 7f ff ff       	call   c000ba68 <File::exists()>
c0013abf:	83 c4 10             	add    esp,0x10
c0013ac2:	84 c0                	test   al,al
c0013ac4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ac6:	75 11                	jne    c0013ad9 <SysLoadDLL(regs*)+0x6c>
c0013ac8:	83 ec 0c             	sub    esp,0xc
c0013acb:	53                   	push   ebx
c0013acc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013acf:	83 c4 10             	add    esp,0x10
c0013ad2:	b8 03 00 00 00       	mov    eax,0x3
c0013ad7:	eb 36                	jmp    c0013b0f <SysLoadDLL(regs*)+0xa2>
c0013ad9:	83 ec 0c             	sub    esp,0xc
c0013adc:	53                   	push   ebx
c0013add:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ae0:	58                   	pop    eax
c0013ae1:	5a                   	pop    edx
c0013ae2:	6a 00                	push   0x0
c0013ae4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013ae7:	e8 1c 15 00 00       	call   c0015008 <Thr::loadDLL(char const*, bool)>
c0013aec:	83 c4 10             	add    esp,0x10
c0013aef:	31 d2                	xor    edx,edx
c0013af1:	89 c1                	mov    ecx,eax
c0013af3:	b8 04 00 00 00       	mov    eax,0x4
c0013af8:	85 c9                	test   ecx,ecx
c0013afa:	74 15                	je     c0013b11 <SysLoadDLL(regs*)+0xa4>
c0013afc:	53                   	push   ebx
c0013afd:	53                   	push   ebx
c0013afe:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013b04:	51                   	push   ecx
c0013b05:	e8 3e 17 00 00       	call   c0015248 <Thr::executeDLL(unsigned long, void*)>
c0013b0a:	83 c4 10             	add    esp,0x10
c0013b0d:	31 c0                	xor    eax,eax
c0013b0f:	31 d2                	xor    edx,edx
c0013b11:	59                   	pop    ecx
c0013b12:	5b                   	pop    ebx
c0013b13:	5e                   	pop    esi
c0013b14:	c3                   	ret    

c0013b15 <SysRead(regs*)>:
c0013b15:	57                   	push   edi
c0013b16:	56                   	push   esi
c0013b17:	53                   	push   ebx
c0013b18:	83 ec 10             	sub    esp,0x10
c0013b1b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013b1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b22:	83 f8 02             	cmp    eax,0x2
c0013b25:	77 10                	ja     c0013b37 <SysRead(regs*)+0x22>
c0013b27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b2c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b2f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013b35:	eb 0e                	jmp    c0013b45 <SysRead(regs*)+0x30>
c0013b37:	83 ec 0c             	sub    esp,0xc
c0013b3a:	50                   	push   eax
c0013b3b:	e8 5b 59 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013b40:	83 c4 10             	add    esp,0x10
c0013b43:	89 c1                	mov    ecx,eax
c0013b45:	83 c8 ff             	or     eax,0xffffffff
c0013b48:	85 c9                	test   ecx,ecx
c0013b4a:	89 c2                	mov    edx,eax
c0013b4c:	74 28                	je     c0013b76 <SysRead(regs*)+0x61>
c0013b4e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013b56:	83 ec 0c             	sub    esp,0xc
c0013b59:	31 ff                	xor    edi,edi
c0013b5b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b5f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b61:	52                   	push   edx
c0013b62:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013b65:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013b68:	57                   	push   edi
c0013b69:	56                   	push   esi
c0013b6a:	51                   	push   ecx
c0013b6b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013b72:	83 c4 20             	add    esp,0x20
c0013b75:	99                   	cdq    
c0013b76:	83 c4 10             	add    esp,0x10
c0013b79:	5b                   	pop    ebx
c0013b7a:	5e                   	pop    esi
c0013b7b:	5f                   	pop    edi
c0013b7c:	c3                   	ret    

c0013b7d <SysRegisterSignal(regs*)>:
c0013b7d:	83 ec 18             	sub    esp,0x18
c0013b80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b84:	6a 00                	push   0x0
c0013b86:	6a 00                	push   0x0
c0013b88:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013b8b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013b8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b93:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b96:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013b9c:	e8 38 da ff ff       	call   c00115d9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013ba1:	83 c4 2c             	add    esp,0x2c
c0013ba4:	99                   	cdq    
c0013ba5:	c3                   	ret    

c0013ba6 <SysRegistryGetTypeFromPath(regs*)>:
c0013ba6:	57                   	push   edi
c0013ba7:	56                   	push   esi
c0013ba8:	53                   	push   ebx
c0013ba9:	81 ec 38 01 00 00    	sub    esp,0x138
c0013baf:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013bb6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013bb9:	68 f8 1e 02 c0       	push   0xc0021ef8
c0013bbe:	e8 47 6d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013bc3:	5a                   	pop    edx
c0013bc4:	59                   	pop    ecx
c0013bc5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013bc8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013bcb:	e8 34 f6 ff ff       	call   c0013204 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013bd0:	5f                   	pop    edi
c0013bd1:	5a                   	pop    edx
c0013bd2:	89 c6                	mov    esi,eax
c0013bd4:	50                   	push   eax
c0013bd5:	68 18 1f 02 c0       	push   0xc0021f18
c0013bda:	e8 2b 6d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013bdf:	83 c4 10             	add    esp,0x10
c0013be2:	85 f6                	test   esi,esi
c0013be4:	74 28                	je     c0013c0e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013be6:	50                   	push   eax
c0013be7:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013beb:	57                   	push   edi
c0013bec:	56                   	push   esi
c0013bed:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013bf0:	e8 f4 f1 ff ff       	call   c0012de9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013bf5:	83 c4 0c             	add    esp,0xc
c0013bf8:	57                   	push   edi
c0013bf9:	50                   	push   eax
c0013bfa:	89 c3                	mov    ebx,eax
c0013bfc:	68 20 1f 02 c0       	push   0xc0021f20
c0013c01:	e8 04 6d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013c06:	89 d8                	mov    eax,ebx
c0013c08:	83 c4 10             	add    esp,0x10
c0013c0b:	99                   	cdq    
c0013c0c:	eb 05                	jmp    c0013c13 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013c0e:	83 c8 ff             	or     eax,0xffffffff
c0013c11:	89 c2                	mov    edx,eax
c0013c13:	81 c4 30 01 00 00    	add    esp,0x130
c0013c19:	5b                   	pop    ebx
c0013c1a:	5e                   	pop    esi
c0013c1b:	5f                   	pop    edi
c0013c1c:	c3                   	ret    

c0013c1d <SysRegistryReadExtent(regs*)>:
c0013c1d:	83 ec 1c             	sub    esp,0x1c
c0013c20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c24:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013c27:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013c2a:	85 c0                	test   eax,eax
c0013c2c:	79 1f                	jns    c0013c4d <SysRegistryReadExtent(regs*)+0x30>
c0013c2e:	52                   	push   edx
c0013c2f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013c34:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013c38:	52                   	push   edx
c0013c39:	50                   	push   eax
c0013c3a:	51                   	push   ecx
c0013c3b:	e8 9b f0 ff ff       	call   c0012cdb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013c40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c44:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013c48:	83 c4 10             	add    esp,0x10
c0013c4b:	eb 14                	jmp    c0013c61 <SysRegistryReadExtent(regs*)+0x44>
c0013c4d:	83 ec 04             	sub    esp,0x4
c0013c50:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013c53:	50                   	push   eax
c0013c54:	51                   	push   ecx
c0013c55:	e8 1f eb ff ff       	call   c0012779 <CmGetString(Reghive_Tag*, int, char*)>
c0013c5a:	83 c4 10             	add    esp,0x10
c0013c5d:	31 c0                	xor    eax,eax
c0013c5f:	31 d2                	xor    edx,edx
c0013c61:	83 c4 1c             	add    esp,0x1c
c0013c64:	c3                   	ret    

c0013c65 <SysRegistryPathToExtentLookup(regs*)>:
c0013c65:	53                   	push   ebx
c0013c66:	83 ec 10             	sub    esp,0x10
c0013c69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c6d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c70:	68 36 1f 02 c0       	push   0xc0021f36
c0013c75:	e8 90 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013c7a:	58                   	pop    eax
c0013c7b:	5a                   	pop    edx
c0013c7c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c7f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c82:	e8 7d f5 ff ff       	call   c0013204 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013c87:	83 c4 18             	add    esp,0x18
c0013c8a:	5b                   	pop    ebx
c0013c8b:	99                   	cdq    
c0013c8c:	c3                   	ret    

c0013c8d <SysRegistryEnterDirectory(regs*)>:
c0013c8d:	53                   	push   ebx
c0013c8e:	83 ec 10             	sub    esp,0x10
c0013c91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c95:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013c98:	68 59 1f 02 c0       	push   0xc0021f59
c0013c9d:	e8 68 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013ca2:	58                   	pop    eax
c0013ca3:	5a                   	pop    edx
c0013ca4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ca7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013caa:	e8 41 eb ff ff       	call   c00127f0 <CmEnterDirectory(Reghive_Tag*, int)>
c0013caf:	83 c4 18             	add    esp,0x18
c0013cb2:	5b                   	pop    ebx
c0013cb3:	99                   	cdq    
c0013cb4:	c3                   	ret    

c0013cb5 <SysRegistryGetNext(regs*)>:
c0013cb5:	53                   	push   ebx
c0013cb6:	83 ec 10             	sub    esp,0x10
c0013cb9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cbd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013cc0:	68 77 1f 02 c0       	push   0xc0021f77
c0013cc5:	e8 40 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013cca:	58                   	pop    eax
c0013ccb:	5a                   	pop    edx
c0013ccc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ccf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013cd2:	e8 58 eb ff ff       	call   c001282f <CmGetNext(Reghive_Tag*, int)>
c0013cd7:	83 c4 18             	add    esp,0x18
c0013cda:	5b                   	pop    ebx
c0013cdb:	99                   	cdq    
c0013cdc:	c3                   	ret    

c0013cdd <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013cdd:	57                   	push   edi
c0013cde:	56                   	push   esi
c0013cdf:	53                   	push   ebx
c0013ce0:	81 ec 34 01 00 00    	sub    esp,0x134
c0013ce6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013ced:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013cf1:	57                   	push   edi
c0013cf2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013cf5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013cf8:	e8 ec f0 ff ff       	call   c0012de9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013cfd:	89 c3                	mov    ebx,eax
c0013cff:	58                   	pop    eax
c0013d00:	5a                   	pop    edx
c0013d01:	57                   	push   edi
c0013d02:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013d05:	e8 46 c9 fe ff       	call   c0000650 <strcpy>
c0013d0a:	81 c4 40 01 00 00    	add    esp,0x140
c0013d10:	89 d8                	mov    eax,ebx
c0013d12:	5b                   	pop    ebx
c0013d13:	99                   	cdq    
c0013d14:	5e                   	pop    esi
c0013d15:	5f                   	pop    edi
c0013d16:	c3                   	ret    

c0013d17 <SysRegistryOpen(regs*)>:
c0013d17:	83 ec 18             	sub    esp,0x18
c0013d1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d1e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d21:	e8 e3 e8 ff ff       	call   c0012609 <CmOpen(char const*)>
c0013d26:	83 c4 1c             	add    esp,0x1c
c0013d29:	99                   	cdq    
c0013d2a:	c3                   	ret    

c0013d2b <SysRegistryClose(regs*)>:
c0013d2b:	83 ec 18             	sub    esp,0x18
c0013d2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d32:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d35:	e8 ed e9 ff ff       	call   c0012727 <CmClose(Reghive_Tag*)>
c0013d3a:	31 c0                	xor    eax,eax
c0013d3c:	31 d2                	xor    edx,edx
c0013d3e:	83 c4 1c             	add    esp,0x1c
c0013d41:	c3                   	ret    

c0013d42 <SysSbrk(regs*)>:
c0013d42:	56                   	push   esi
c0013d43:	53                   	push   ebx
c0013d44:	50                   	push   eax
c0013d45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d4e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d51:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013d54:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013d5a:	85 db                	test   ebx,ebx
c0013d5c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013d5f:	74 02                	je     c0013d63 <SysSbrk(regs*)+0x21>
c0013d61:	79 06                	jns    c0013d69 <SysSbrk(regs*)+0x27>
c0013d63:	89 f0                	mov    eax,esi
c0013d65:	31 d2                	xor    edx,edx
c0013d67:	eb 2a                	jmp    c0013d93 <SysSbrk(regs*)+0x51>
c0013d69:	83 c8 ff             	or     eax,0xffffffff
c0013d6c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013d72:	89 c2                	mov    edx,eax
c0013d74:	77 1d                	ja     c0013d93 <SysSbrk(regs*)+0x51>
c0013d76:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013d7c:	50                   	push   eax
c0013d7d:	68 07 0c 00 00       	push   0xc07
c0013d82:	c1 ea 0c             	shr    edx,0xc
c0013d85:	52                   	push   edx
c0013d86:	51                   	push   ecx
c0013d87:	e8 7a 60 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0013d8c:	89 f0                	mov    eax,esi
c0013d8e:	31 d2                	xor    edx,edx
c0013d90:	83 c4 10             	add    esp,0x10
c0013d93:	59                   	pop    ecx
c0013d94:	5b                   	pop    ebx
c0013d95:	5e                   	pop    esi
c0013d96:	c3                   	ret    

c0013d97 <SysSetCwd(regs*)>:
c0013d97:	83 ec 14             	sub    esp,0x14
c0013d9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d9e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013da1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013da6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013da9:	e8 59 7d ff ff       	call   c000bb07 <Fs::setcwd(Process*, char*)>
c0013dae:	83 c4 1c             	add    esp,0x1c
c0013db1:	99                   	cdq    
c0013db2:	c3                   	ret    

c0013db3 <SysSetTime(regs*)>:
c0013db3:	55                   	push   ebp
c0013db4:	31 c9                	xor    ecx,ecx
c0013db6:	57                   	push   edi
c0013db7:	bd 0c 00 00 00       	mov    ebp,0xc
c0013dbc:	56                   	push   esi
c0013dbd:	53                   	push   ebx
c0013dbe:	31 db                	xor    ebx,ebx
c0013dc0:	83 ec 10             	sub    esp,0x10
c0013dc3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013dc7:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013dca:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013dcd:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013dd0:	89 c2                	mov    edx,eax
c0013dd2:	c1 e8 05             	shr    eax,0x5
c0013dd5:	83 e2 1f             	and    edx,0x1f
c0013dd8:	42                   	inc    edx
c0013dd9:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013ddf:	c1 e7 10             	shl    edi,0x10
c0013de2:	88 d1                	mov    cl,dl
c0013de4:	31 d2                	xor    edx,edx
c0013de6:	f7 f5                	div    ebp
c0013de8:	89 dd                	mov    ebp,ebx
c0013dea:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013df0:	88 d5                	mov    ch,dl
c0013df2:	31 d2                	xor    edx,edx
c0013df4:	0f b7 c1             	movzx  eax,cx
c0013df7:	09 f8                	or     eax,edi
c0013df9:	bf 3c 00 00 00       	mov    edi,0x3c
c0013dfe:	89 c1                	mov    ecx,eax
c0013e00:	89 f0                	mov    eax,esi
c0013e02:	f7 f7                	div    edi
c0013e04:	c1 e2 10             	shl    edx,0x10
c0013e07:	09 d5                	or     ebp,edx
c0013e09:	31 d2                	xor    edx,edx
c0013e0b:	f7 f7                	div    edi
c0013e0d:	89 eb                	mov    ebx,ebp
c0013e0f:	bf 10 0e 00 00       	mov    edi,0xe10
c0013e14:	89 f0                	mov    eax,esi
c0013e16:	88 d7                	mov    bh,dl
c0013e18:	31 d2                	xor    edx,edx
c0013e1a:	f7 f7                	div    edi
c0013e1c:	bf 18 00 00 00       	mov    edi,0x18
c0013e21:	31 d2                	xor    edx,edx
c0013e23:	f7 f7                	div    edi
c0013e25:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013e2a:	88 d3                	mov    bl,dl
c0013e2c:	53                   	push   ebx
c0013e2d:	51                   	push   ecx
c0013e2e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013e34:	e8 d3 84 ff ff       	call   c000c30c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013e39:	83 c4 1c             	add    esp,0x1c
c0013e3c:	31 d2                	xor    edx,edx
c0013e3e:	5b                   	pop    ebx
c0013e3f:	5e                   	pop    esi
c0013e40:	83 f0 01             	xor    eax,0x1
c0013e43:	5f                   	pop    edi
c0013e44:	0f b6 c0             	movzx  eax,al
c0013e47:	5d                   	pop    ebp
c0013e48:	c3                   	ret    

c0013e49 <SysTimezone(regs*)>:
c0013e49:	53                   	push   ebx
c0013e4a:	83 ec 08             	sub    esp,0x8
c0013e4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e51:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013e55:	75 17                	jne    c0013e6e <SysTimezone(regs*)+0x25>
c0013e57:	83 ec 0c             	sub    esp,0xc
c0013e5a:	68 8e 1f 02 c0       	push   0xc0021f8e
c0013e5f:	e8 a6 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e64:	83 c8 ff             	or     eax,0xffffffff
c0013e67:	83 c4 10             	add    esp,0x10
c0013e6a:	89 c2                	mov    edx,eax
c0013e6c:	eb 20                	jmp    c0013e8e <SysTimezone(regs*)+0x45>
c0013e6e:	83 ec 0c             	sub    esp,0xc
c0013e71:	68 a3 1f 02 c0       	push   0xc0021fa3
c0013e76:	e8 8f 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e7b:	58                   	pop    eax
c0013e7c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e7f:	e8 ec 81 ff ff       	call   c000c070 <User::loadClockSettings(int)>
c0013e84:	83 c4 10             	add    esp,0x10
c0013e87:	b8 01 00 00 00       	mov    eax,0x1
c0013e8c:	31 d2                	xor    edx,edx
c0013e8e:	83 c4 08             	add    esp,0x8
c0013e91:	5b                   	pop    ebx
c0013e92:	c3                   	ret    

c0013e93 <SysTruncate(regs*)>:
c0013e93:	55                   	push   ebp
c0013e94:	57                   	push   edi
c0013e95:	31 ff                	xor    edi,edi
c0013e97:	56                   	push   esi
c0013e98:	53                   	push   ebx
c0013e99:	83 ec 0c             	sub    esp,0xc
c0013e9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ea0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013ea3:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013ea7:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013eaa:	89 ce                	mov    esi,ecx
c0013eac:	0f 84 9a 00 00 00    	je     c0013f4c <SysTruncate(regs*)+0xb9>
c0013eb2:	83 ec 0c             	sub    esp,0xc
c0013eb5:	68 14 01 00 00       	push   0x114
c0013eba:	e8 14 3c ff ff       	call   c0007ad3 <malloc>
c0013ebf:	83 c4 0c             	add    esp,0xc
c0013ec2:	89 c3                	mov    ebx,eax
c0013ec4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ec9:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013ecc:	55                   	push   ebp
c0013ecd:	53                   	push   ebx
c0013ece:	e8 15 78 ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c0013ed3:	83 c4 10             	add    esp,0x10
c0013ed6:	31 d2                	xor    edx,edx
c0013ed8:	85 db                	test   ebx,ebx
c0013eda:	b8 03 00 00 00       	mov    eax,0x3
c0013edf:	0f 84 a2 00 00 00    	je     c0013f87 <SysTruncate(regs*)+0xf4>
c0013ee5:	51                   	push   ecx
c0013ee6:	51                   	push   ecx
c0013ee7:	6a 02                	push   0x2
c0013ee9:	53                   	push   ebx
c0013eea:	e8 b5 78 ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c0013eef:	83 c4 10             	add    esp,0x10
c0013ef2:	85 c0                	test   eax,eax
c0013ef4:	74 13                	je     c0013f09 <SysTruncate(regs*)+0x76>
c0013ef6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ef8:	83 ec 0c             	sub    esp,0xc
c0013efb:	53                   	push   ebx
c0013efc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013eff:	83 c4 10             	add    esp,0x10
c0013f02:	b8 04 00 00 00       	mov    eax,0x4
c0013f07:	eb 7c                	jmp    c0013f85 <SysTruncate(regs*)+0xf2>
c0013f09:	52                   	push   edx
c0013f0a:	57                   	push   edi
c0013f0b:	56                   	push   esi
c0013f0c:	53                   	push   ebx
c0013f0d:	e8 a6 79 ff ff       	call   c000b8b8 <File::truncate(unsigned long long)>
c0013f12:	83 c4 10             	add    esp,0x10
c0013f15:	85 c0                	test   eax,eax
c0013f17:	74 1b                	je     c0013f34 <SysTruncate(regs*)+0xa1>
c0013f19:	83 ec 0c             	sub    esp,0xc
c0013f1c:	53                   	push   ebx
c0013f1d:	e8 e0 78 ff ff       	call   c000b802 <File::close()>
c0013f22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f2a:	83 c4 10             	add    esp,0x10
c0013f2d:	b8 05 00 00 00       	mov    eax,0x5
c0013f32:	eb 51                	jmp    c0013f85 <SysTruncate(regs*)+0xf2>
c0013f34:	83 ec 0c             	sub    esp,0xc
c0013f37:	53                   	push   ebx
c0013f38:	e8 c5 78 ff ff       	call   c000b802 <File::close()>
c0013f3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f42:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f45:	83 c4 10             	add    esp,0x10
c0013f48:	31 c0                	xor    eax,eax
c0013f4a:	eb 39                	jmp    c0013f85 <SysTruncate(regs*)+0xf2>
c0013f4c:	31 d2                	xor    edx,edx
c0013f4e:	83 fd 02             	cmp    ebp,0x2
c0013f51:	b8 01 00 00 00       	mov    eax,0x1
c0013f56:	7e 2f                	jle    c0013f87 <SysTruncate(regs*)+0xf4>
c0013f58:	83 ec 0c             	sub    esp,0xc
c0013f5b:	51                   	push   ecx
c0013f5c:	e8 3a 55 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013f61:	83 c4 10             	add    esp,0x10
c0013f64:	31 d2                	xor    edx,edx
c0013f66:	89 c1                	mov    ecx,eax
c0013f68:	b8 02 00 00 00       	mov    eax,0x2
c0013f6d:	85 c9                	test   ecx,ecx
c0013f6f:	74 16                	je     c0013f87 <SysTruncate(regs*)+0xf4>
c0013f71:	50                   	push   eax
c0013f72:	57                   	push   edi
c0013f73:	56                   	push   esi
c0013f74:	51                   	push   ecx
c0013f75:	e8 3e 79 ff ff       	call   c000b8b8 <File::truncate(unsigned long long)>
c0013f7a:	83 c4 10             	add    esp,0x10
c0013f7d:	85 c0                	test   eax,eax
c0013f7f:	0f 95 c0             	setne  al
c0013f82:	0f b6 c0             	movzx  eax,al
c0013f85:	31 d2                	xor    edx,edx
c0013f87:	83 c4 0c             	add    esp,0xc
c0013f8a:	5b                   	pop    ebx
c0013f8b:	5e                   	pop    esi
c0013f8c:	5f                   	pop    edi
c0013f8d:	5d                   	pop    ebp
c0013f8e:	c3                   	ret    

c0013f8f <SysWrite(regs*)>:
c0013f8f:	57                   	push   edi
c0013f90:	56                   	push   esi
c0013f91:	53                   	push   ebx
c0013f92:	83 ec 10             	sub    esp,0x10
c0013f95:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013f99:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f9c:	83 f8 02             	cmp    eax,0x2
c0013f9f:	77 10                	ja     c0013fb1 <SysWrite(regs*)+0x22>
c0013fa1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fa6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fa9:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013faf:	eb 0e                	jmp    c0013fbf <SysWrite(regs*)+0x30>
c0013fb1:	83 ec 0c             	sub    esp,0xc
c0013fb4:	50                   	push   eax
c0013fb5:	e8 e1 54 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013fba:	83 c4 10             	add    esp,0x10
c0013fbd:	89 c1                	mov    ecx,eax
c0013fbf:	83 c8 ff             	or     eax,0xffffffff
c0013fc2:	85 c9                	test   ecx,ecx
c0013fc4:	89 c2                	mov    edx,eax
c0013fc6:	74 28                	je     c0013ff0 <SysWrite(regs*)+0x61>
c0013fc8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fd0:	83 ec 0c             	sub    esp,0xc
c0013fd3:	31 ff                	xor    edi,edi
c0013fd5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013fd9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013fdb:	52                   	push   edx
c0013fdc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013fdf:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013fe2:	57                   	push   edi
c0013fe3:	56                   	push   esi
c0013fe4:	51                   	push   ecx
c0013fe5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013fe8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013fec:	83 c4 20             	add    esp,0x20
c0013fef:	99                   	cdq    
c0013ff0:	83 c4 10             	add    esp,0x10
c0013ff3:	5b                   	pop    ebx
c0013ff4:	5e                   	pop    esi
c0013ff5:	5f                   	pop    edi
c0013ff6:	c3                   	ret    

c0013ff7 <SysWsbe(regs*)>:
c0013ff7:	57                   	push   edi
c0013ff8:	b9 0b 00 00 00       	mov    ecx,0xb
c0013ffd:	56                   	push   esi
c0013ffe:	be e2 1f 02 c0       	mov    esi,0xc0021fe2
c0014003:	53                   	push   ebx
c0014004:	83 ec 30             	sub    esp,0x30
c0014007:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001400b:	fc                   	cld    
c001400c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001400e:	83 ec 0c             	sub    esp,0xc
c0014011:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014015:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001401a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001401d:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014023:	8b 06                	mov    eax,DWORD PTR [esi]
c0014025:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014028:	57                   	push   edi
c0014029:	e8 52 c5 fe ff       	call   c0000580 <strlen>
c001402e:	5a                   	pop    edx
c001402f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014033:	52                   	push   edx
c0014034:	31 d2                	xor    edx,edx
c0014036:	57                   	push   edi
c0014037:	52                   	push   edx
c0014038:	50                   	push   eax
c0014039:	56                   	push   esi
c001403a:	ff d3                	call   ebx
c001403c:	83 c4 14             	add    esp,0x14
c001403f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014043:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014046:	e8 a9 23 00 00       	call   c00163f4 <terminateTask(int)>
c001404b:	83 c4 40             	add    esp,0x40
c001404e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014053:	5b                   	pop    ebx
c0014054:	31 d2                	xor    edx,edx
c0014056:	5e                   	pop    esi
c0014057:	5f                   	pop    edi
c0014058:	c3                   	ret    

c0014059 <SysYield(regs*)>:
c0014059:	83 ec 0c             	sub    esp,0xc
c001405c:	fa                   	cli    
c001405d:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0014063:	e8 0c 1a 00 00       	call   c0015a74 <schedule()>
c0014068:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001406d:	48                   	dec    eax
c001406e:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0014073:	75 01                	jne    c0014076 <SysYield(regs*)+0x1d>
c0014075:	fb                   	sti    
c0014076:	31 c0                	xor    eax,eax
c0014078:	31 d2                	xor    edx,edx
c001407a:	83 c4 0c             	add    esp,0xc
c001407d:	c3                   	ret    

c001407e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001407e:	55                   	push   ebp
c001407f:	57                   	push   edi
c0014080:	56                   	push   esi
c0014081:	53                   	push   ebx
c0014082:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014088:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014093:	74 3b                	je     c00140d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014095:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001409d:	74 31                	je     c00140d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001409f:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00140a7:	75 27                	jne    c00140d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00140a9:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00140b0:	05 00 10 00 00       	add    eax,0x1000
c00140b5:	89 c2                	mov    edx,eax
c00140b7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00140bc:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00140c3:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00140c9:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00140d0:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00140d7:	83 ec 0c             	sub    esp,0xc
c00140da:	6a 01                	push   0x1
c00140dc:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00140e2:	e8 0e 55 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c00140e7:	83 c4 10             	add    esp,0x10
c00140ea:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00140f0:	89 c3                	mov    ebx,eax
c00140f2:	0f 86 26 01 00 00    	jbe    c001421e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00140f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014100:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014107:	c1 ee 0c             	shr    esi,0xc
c001410a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001410e:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014115:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001411c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014120:	29 ef                	sub    edi,ebp
c0014122:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0014126:	0f 83 f9 00 00 00    	jae    c0014225 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c001412c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014132:	b8 00 10 00 00       	mov    eax,0x1000
c0014137:	0f 47 f8             	cmova  edi,eax
c001413a:	83 ec 0c             	sub    esp,0xc
c001413d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014144:	31 d2                	xor    edx,edx
c0014146:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014148:	8d 44 24 28          	lea    eax,[esp+0x28]
c001414c:	50                   	push   eax
c001414d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014151:	56                   	push   esi
c0014152:	52                   	push   edx
c0014153:	57                   	push   edi
c0014154:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001415b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001415e:	83 c4 20             	add    esp,0x20
c0014161:	85 c0                	test   eax,eax
c0014163:	75 06                	jne    c001416b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014165:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014169:	74 13                	je     c001417e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001416b:	83 ec 0c             	sub    esp,0xc
c001416e:	53                   	push   ebx
c001416f:	e8 95 57 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014174:	83 c4 10             	add    esp,0x10
c0014177:	31 c0                	xor    eax,eax
c0014179:	e9 7c 01 00 00       	jmp    c00142fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c001417e:	fa                   	cli    
c001417f:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0014185:	e8 58 3c ff ff       	call   c0007de2 <Phys::allocatePage()>
c001418a:	6a 07                	push   0x7
c001418c:	53                   	push   ebx
c001418d:	50                   	push   eax
c001418e:	89 c7                	mov    edi,eax
c0014190:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014195:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014198:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001419e:	e8 5b 5b ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00141a3:	83 c4 0c             	add    esp,0xc
c00141a6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00141ad:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141b3:	6a 00                	push   0x0
c00141b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141bd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141c3:	e8 9c 59 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00141c8:	58                   	pop    eax
c00141c9:	5a                   	pop    edx
c00141ca:	68 07 0c 00 00       	push   0xc07
c00141cf:	55                   	push   ebp
c00141d0:	57                   	push   edi
c00141d1:	89 df                	mov    edi,ebx
c00141d3:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00141da:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141e0:	6a 00                	push   0x0
c00141e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141ea:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141f0:	e8 6d 5d ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00141f5:	b9 00 10 00 00       	mov    ecx,0x1000
c00141fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141fc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0014201:	83 c4 20             	add    esp,0x20
c0014204:	48                   	dec    eax
c0014205:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001420a:	85 c0                	test   eax,eax
c001420c:	75 01                	jne    c001420f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c001420e:	fb                   	sti    
c001420f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014213:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014219:	e9 f0 fe ff ff       	jmp    c001410e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001421e:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014225:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001422c:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014232:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014238:	0f 86 ae 00 00 00    	jbe    c00142ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001423e:	fa                   	cli    
c001423f:	51                   	push   ecx
c0014240:	31 ff                	xor    edi,edi
c0014242:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014249:	c1 ee 0c             	shr    esi,0xc
c001424c:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0014252:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014258:	6a 00                	push   0x0
c001425a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001425f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014262:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014268:	e8 f7 58 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c001426d:	83 c4 10             	add    esp,0x10
c0014270:	e8 6d 3b ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014275:	47                   	inc    edi
c0014276:	6a 07                	push   0x7
c0014278:	53                   	push   ebx
c0014279:	50                   	push   eax
c001427a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001427e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014284:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014287:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001428d:	e8 6c 5a ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0014292:	58                   	pop    eax
c0014293:	5a                   	pop    edx
c0014294:	68 07 0c 00 00       	push   0xc07
c0014299:	55                   	push   ebp
c001429a:	81 c5 00 10 00 00    	add    ebp,0x1000
c00142a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142a4:	50                   	push   eax
c00142a5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00142ac:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142b2:	6a 00                	push   0x0
c00142b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142bc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142c2:	e8 9b 5c ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00142c7:	83 c4 1c             	add    esp,0x1c
c00142ca:	68 00 10 00 00       	push   0x1000
c00142cf:	6a 00                	push   0x0
c00142d1:	53                   	push   ebx
c00142d2:	e8 19 c2 fe ff       	call   c00004f0 <memset>
c00142d7:	83 c4 10             	add    esp,0x10
c00142da:	39 fe                	cmp    esi,edi
c00142dc:	77 92                	ja     c0014270 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00142de:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00142e3:	48                   	dec    eax
c00142e4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00142e9:	75 01                	jne    c00142ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00142eb:	fb                   	sti    
c00142ec:	83 ec 0c             	sub    esp,0xc
c00142ef:	53                   	push   ebx
c00142f0:	e8 14 56 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00142f5:	83 c4 10             	add    esp,0x10
c00142f8:	b0 01                	mov    al,0x1
c00142fa:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014300:	5b                   	pop    ebx
c0014301:	5e                   	pop    esi
c0014302:	5f                   	pop    edi
c0014303:	5d                   	pop    ebp
c0014304:	c3                   	ret    

c0014305 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014305:	55                   	push   ebp
c0014306:	57                   	push   edi
c0014307:	56                   	push   esi
c0014308:	53                   	push   ebx
c0014309:	83 ec 48             	sub    esp,0x48
c001430c:	68 14 01 00 00       	push   0x114
c0014311:	e8 bd 37 ff ff       	call   c0007ad3 <malloc>
c0014316:	83 c4 0c             	add    esp,0xc
c0014319:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001431d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014321:	89 c7                	mov    edi,eax
c0014323:	50                   	push   eax
c0014324:	e8 bf 73 ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c0014329:	58                   	pop    eax
c001432a:	5a                   	pop    edx
c001432b:	6a 01                	push   0x1
c001432d:	57                   	push   edi
c001432e:	e8 71 74 ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c0014333:	83 c4 10             	add    esp,0x10
c0014336:	85 c0                	test   eax,eax
c0014338:	0f 85 4c 01 00 00    	jne    c001448a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001433e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014346:	83 ec 0c             	sub    esp,0xc
c0014349:	6a 34                	push   0x34
c001434b:	e8 83 37 ff ff       	call   c0007ad3 <malloc>
c0014350:	89 c3                	mov    ebx,eax
c0014352:	58                   	pop    eax
c0014353:	8b 07                	mov    eax,DWORD PTR [edi]
c0014355:	8d 74 24 38          	lea    esi,[esp+0x38]
c0014359:	56                   	push   esi
c001435a:	53                   	push   ebx
c001435b:	6a 00                	push   0x0
c001435d:	6a 34                	push   0x34
c001435f:	57                   	push   edi
c0014360:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014363:	83 c4 20             	add    esp,0x20
c0014366:	85 c0                	test   eax,eax
c0014368:	0f 85 1c 01 00 00    	jne    c001448a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001436e:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014374:	0f 85 10 01 00 00    	jne    c001448a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001437a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001437d:	85 c0                	test   eax,eax
c001437f:	0f 84 05 01 00 00    	je     c001448a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014385:	31 d2                	xor    edx,edx
c0014387:	55                   	push   ebp
c0014388:	52                   	push   edx
c0014389:	50                   	push   eax
c001438a:	57                   	push   edi
c001438b:	e8 d2 74 ff ff       	call   c000b862 <File::seek(unsigned long long)>
c0014390:	83 c4 10             	add    esp,0x10
c0014393:	85 c0                	test   eax,eax
c0014395:	0f 85 ef 00 00 00    	jne    c001448a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001439b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001439e:	83 ec 0c             	sub    esp,0xc
c00143a1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00143a5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00143a9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00143ad:	0f af c2             	imul   eax,edx
c00143b0:	50                   	push   eax
c00143b1:	e8 1d 37 ff ff       	call   c0007ad3 <malloc>
c00143b6:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00143b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00143bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00143bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00143c3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00143c7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00143cb:	0f af c2             	imul   eax,edx
c00143ce:	99                   	cdq    
c00143cf:	52                   	push   edx
c00143d0:	50                   	push   eax
c00143d1:	57                   	push   edi
c00143d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00143d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00143d8:	83 c4 20             	add    esp,0x20
c00143db:	85 c0                	test   eax,eax
c00143dd:	0f 84 a7 00 00 00    	je     c001448a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143e3:	31 d2                	xor    edx,edx
c00143e5:	51                   	push   ecx
c00143e6:	52                   	push   edx
c00143e7:	50                   	push   eax
c00143e8:	57                   	push   edi
c00143e9:	e8 74 74 ff ff       	call   c000b862 <File::seek(unsigned long long)>
c00143ee:	83 c4 10             	add    esp,0x10
c00143f1:	85 c0                	test   eax,eax
c00143f3:	0f 85 91 00 00 00    	jne    c001448a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143f9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00143fd:	83 ec 0c             	sub    esp,0xc
c0014400:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014404:	0f af c2             	imul   eax,edx
c0014407:	50                   	push   eax
c0014408:	e8 c6 36 ff ff       	call   c0007ad3 <malloc>
c001440d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001440f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014412:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001441a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001441e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014422:	0f af c2             	imul   eax,edx
c0014425:	99                   	cdq    
c0014426:	52                   	push   edx
c0014427:	50                   	push   eax
c0014428:	57                   	push   edi
c0014429:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001442c:	83 c4 20             	add    esp,0x20
c001442f:	31 c9                	xor    ecx,ecx
c0014431:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014439:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c001443d:	0f b7 e9             	movzx  ebp,cx
c0014440:	0f 83 86 00 00 00    	jae    c00144cc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014446:	c1 e5 05             	shl    ebp,0x5
c0014449:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c001444d:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014451:	75 73                	jne    c00144c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014453:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001445a:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c001445d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014461:	52                   	push   edx
c0014462:	31 d2                	xor    edx,edx
c0014464:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014467:	52                   	push   edx
c0014468:	50                   	push   eax
c0014469:	57                   	push   edi
c001446a:	e8 f3 73 ff ff       	call   c000b862 <File::seek(unsigned long long)>
c001446f:	83 c4 10             	add    esp,0x10
c0014472:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014476:	85 c0                	test   eax,eax
c0014478:	74 17                	je     c0014491 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c001447a:	83 ec 0c             	sub    esp,0xc
c001447d:	68 0e 20 02 c0       	push   0xc002200e
c0014482:	e8 83 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014487:	83 c4 10             	add    esp,0x10
c001448a:	31 c0                	xor    eax,eax
c001448c:	e9 8b 00 00 00       	jmp    c001451c <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014491:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014495:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014498:	83 ec 0c             	sub    esp,0xc
c001449b:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c001449e:	50                   	push   eax
c001449f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144a3:	56                   	push   esi
c00144a4:	57                   	push   edi
c00144a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00144a9:	e8 d0 fb ff ff       	call   c001407e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00144ae:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00144b2:	83 c4 20             	add    esp,0x20
c00144b5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00144b9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00144bd:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c00144c2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00144c6:	41                   	inc    ecx
c00144c7:	e9 6d ff ff ff       	jmp    c0014439 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00144cc:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00144d0:	83 ec 0c             	sub    esp,0xc
c00144d3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00144d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144db:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c00144e1:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c00144e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00144ec:	05 00 10 00 00       	add    eax,0x1000
c00144f1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00144f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144f8:	e8 e6 35 ff ff       	call   c0007ae3 <free>
c00144fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014500:	e8 de 35 ff ff       	call   c0007ae3 <free>
c0014505:	58                   	pop    eax
c0014506:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001450a:	e8 d4 35 ff ff       	call   c0007ae3 <free>
c001450f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014512:	e8 eb 72 ff ff       	call   c000b802 <File::close()>
c0014517:	83 c4 10             	add    esp,0x10
c001451a:	b0 01                	mov    al,0x1
c001451c:	83 c4 3c             	add    esp,0x3c
c001451f:	5b                   	pop    ebx
c0014520:	5e                   	pop    esi
c0014521:	5f                   	pop    edi
c0014522:	5d                   	pop    ebp
c0014523:	c3                   	ret    

c0014524 <Thr::runtimeReferenceHelper()>:
c0014524:	83 ec 18             	sub    esp,0x18
c0014527:	68 16 20 02 c0       	push   0xc0022016
c001452c:	e8 d9 63 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014531:	fa                   	cli    
c0014532:	83 c4 10             	add    esp,0x10
c0014535:	eb fe                	jmp    c0014535 <Thr::runtimeReferenceHelper()+0x11>

c0014537 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014537:	57                   	push   edi
c0014538:	56                   	push   esi
c0014539:	53                   	push   ebx
c001453a:	31 db                	xor    ebx,ebx
c001453c:	39 1d 40 a4 02 c0    	cmp    DWORD PTR ds:0xc002a440,ebx
c0014542:	7e 3c                	jle    c0014580 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014544:	8b 34 9d c0 a3 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd5c40]
c001454b:	31 ff                	xor    edi,edi
c001454d:	39 3c 9d c0 a2 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd5d40],edi
c0014554:	7e 27                	jle    c001457d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014556:	50                   	push   eax
c0014557:	50                   	push   eax
c0014558:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001455c:	8b 06                	mov    eax,DWORD PTR [esi]
c001455e:	03 04 9d 40 a3 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd5cc0]
c0014565:	50                   	push   eax
c0014566:	e8 15 c2 fe ff       	call   c0000780 <strcmp>
c001456b:	83 c4 10             	add    esp,0x10
c001456e:	85 c0                	test   eax,eax
c0014570:	75 05                	jne    c0014577 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014572:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014575:	eb 0b                	jmp    c0014582 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014577:	83 c6 10             	add    esi,0x10
c001457a:	47                   	inc    edi
c001457b:	eb d0                	jmp    c001454d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001457d:	43                   	inc    ebx
c001457e:	eb bc                	jmp    c001453c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014580:	31 c0                	xor    eax,eax
c0014582:	5b                   	pop    ebx
c0014583:	5e                   	pop    esi
c0014584:	5f                   	pop    edi
c0014585:	c3                   	ret    

c0014586 <Thr::loadKernelSymbolTable(char const*)>:
c0014586:	55                   	push   ebp
c0014587:	57                   	push   edi
c0014588:	56                   	push   esi
c0014589:	53                   	push   ebx
c001458a:	83 ec 68             	sub    esp,0x68
c001458d:	68 14 01 00 00       	push   0x114
c0014592:	8b 35 90 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a490
c0014598:	e8 36 35 ff ff       	call   c0007ad3 <malloc>
c001459d:	83 c4 0c             	add    esp,0xc
c00145a0:	56                   	push   esi
c00145a1:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00145a5:	89 c3                	mov    ebx,eax
c00145a7:	50                   	push   eax
c00145a8:	e8 3b 71 ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c00145ad:	5e                   	pop    esi
c00145ae:	5f                   	pop    edi
c00145af:	6a 01                	push   0x1
c00145b1:	53                   	push   ebx
c00145b2:	e8 ed 71 ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c00145b7:	83 c4 10             	add    esp,0x10
c00145ba:	85 c0                	test   eax,eax
c00145bc:	74 0a                	je     c00145c8 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00145be:	83 ec 0c             	sub    esp,0xc
c00145c1:	68 38 20 02 c0       	push   0xc0022038
c00145c6:	eb 34                	jmp    c00145fc <Thr::loadKernelSymbolTable(char const*)+0x76>
c00145c8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00145d0:	83 ec 0c             	sub    esp,0xc
c00145d3:	6a 34                	push   0x34
c00145d5:	e8 f9 34 ff ff       	call   c0007ad3 <malloc>
c00145da:	59                   	pop    ecx
c00145db:	8d 74 24 34          	lea    esi,[esp+0x34]
c00145df:	89 c7                	mov    edi,eax
c00145e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145e3:	56                   	push   esi
c00145e4:	57                   	push   edi
c00145e5:	6a 00                	push   0x0
c00145e7:	6a 34                	push   0x34
c00145e9:	53                   	push   ebx
c00145ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145ed:	83 c4 20             	add    esp,0x20
c00145f0:	85 c0                	test   eax,eax
c00145f2:	74 17                	je     c001460b <Thr::loadKernelSymbolTable(char const*)+0x85>
c00145f4:	83 ec 0c             	sub    esp,0xc
c00145f7:	68 4f 20 02 c0       	push   0xc002204f
c00145fc:	e8 70 cb ff ff       	call   c0011171 <KePanic(char const*)>
c0014601:	83 c4 10             	add    esp,0x10
c0014604:	31 c0                	xor    eax,eax
c0014606:	e9 31 02 00 00       	jmp    c001483c <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001460b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014611:	75 e1                	jne    c00145f4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014613:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014616:	85 c0                	test   eax,eax
c0014618:	74 da                	je     c00145f4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001461a:	52                   	push   edx
c001461b:	31 d2                	xor    edx,edx
c001461d:	52                   	push   edx
c001461e:	50                   	push   eax
c001461f:	53                   	push   ebx
c0014620:	e8 3d 72 ff ff       	call   c000b862 <File::seek(unsigned long long)>
c0014625:	83 c4 10             	add    esp,0x10
c0014628:	85 c0                	test   eax,eax
c001462a:	75 c8                	jne    c00145f4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001462c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014630:	83 ec 0c             	sub    esp,0xc
c0014633:	31 ed                	xor    ebp,ebp
c0014635:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014639:	0f af c2             	imul   eax,edx
c001463c:	50                   	push   eax
c001463d:	e8 91 34 ff ff       	call   c0007ad3 <malloc>
c0014642:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014644:	89 34 24             	mov    DWORD PTR [esp],esi
c0014647:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001464b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001464f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014653:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014657:	0f af c2             	imul   eax,edx
c001465a:	99                   	cdq    
c001465b:	52                   	push   edx
c001465c:	50                   	push   eax
c001465d:	53                   	push   ebx
c001465e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014661:	83 c4 20             	add    esp,0x20
c0014664:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001466c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014674:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001467c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014684:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014688:	0f b7 f5             	movzx  esi,bp
c001468b:	0f 83 a7 00 00 00    	jae    c0014738 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014691:	6b f6 28             	imul   esi,esi,0x28
c0014694:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014698:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001469b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001469f:	50                   	push   eax
c00146a0:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00146a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00146a8:	8b 16                	mov    edx,DWORD PTR [esi]
c00146aa:	6b c0 28             	imul   eax,eax,0x28
c00146ad:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00146b1:	89 d0                	mov    eax,edx
c00146b3:	31 d2                	xor    edx,edx
c00146b5:	52                   	push   edx
c00146b6:	50                   	push   eax
c00146b7:	53                   	push   ebx
c00146b8:	e8 a5 71 ff ff       	call   c000b862 <File::seek(unsigned long long)>
c00146bd:	83 c4 0c             	add    esp,0xc
c00146c0:	6a 20                	push   0x20
c00146c2:	6a 00                	push   0x0
c00146c4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00146c8:	52                   	push   edx
c00146c9:	e8 22 be fe ff       	call   c00004f0 <memset>
c00146ce:	58                   	pop    eax
c00146cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146d1:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00146d5:	51                   	push   ecx
c00146d6:	8d 54 24 40          	lea    edx,[esp+0x40]
c00146da:	52                   	push   edx
c00146db:	6a 00                	push   0x0
c00146dd:	6a 1f                	push   0x1f
c00146df:	53                   	push   ebx
c00146e0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00146e3:	83 c4 18             	add    esp,0x18
c00146e6:	68 66 20 02 c0       	push   0xc0022066
c00146eb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00146ef:	52                   	push   edx
c00146f0:	e8 8b c0 fe ff       	call   c0000780 <strcmp>
c00146f5:	83 c4 10             	add    esp,0x10
c00146f8:	85 c0                	test   eax,eax
c00146fa:	75 0f                	jne    c001470b <Thr::loadKernelSymbolTable(char const*)+0x185>
c00146fc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00146ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014703:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014707:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001470b:	50                   	push   eax
c001470c:	50                   	push   eax
c001470d:	68 6e 20 02 c0       	push   0xc002206e
c0014712:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014716:	50                   	push   eax
c0014717:	e8 64 c0 fe ff       	call   c0000780 <strcmp>
c001471c:	83 c4 10             	add    esp,0x10
c001471f:	85 c0                	test   eax,eax
c0014721:	75 0f                	jne    c0014732 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014723:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014726:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001472a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001472e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014732:	45                   	inc    ebp
c0014733:	e9 4c ff ff ff       	jmp    c0014684 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014738:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001473d:	75 10                	jne    c001474f <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001473f:	83 ec 0c             	sub    esp,0xc
c0014742:	68 76 20 02 c0       	push   0xc0022076
c0014747:	e8 25 ca ff ff       	call   c0011171 <KePanic(char const*)>
c001474c:	83 c4 10             	add    esp,0x10
c001474f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014754:	75 10                	jne    c0014766 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014756:	83 ec 0c             	sub    esp,0xc
c0014759:	68 76 20 02 c0       	push   0xc0022076
c001475e:	e8 0e ca ff ff       	call   c0011171 <KePanic(char const*)>
c0014763:	83 c4 10             	add    esp,0x10
c0014766:	50                   	push   eax
c0014767:	31 d2                	xor    edx,edx
c0014769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476d:	52                   	push   edx
c001476e:	50                   	push   eax
c001476f:	53                   	push   ebx
c0014770:	e8 ed 70 ff ff       	call   c000b862 <File::seek(unsigned long long)>
c0014775:	5a                   	pop    edx
c0014776:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001477a:	e8 54 33 ff ff       	call   c0007ad3 <malloc>
c001477f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014783:	31 c9                	xor    ecx,ecx
c0014785:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014789:	8b 03                	mov    eax,DWORD PTR [ebx]
c001478b:	5e                   	pop    esi
c001478c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014790:	55                   	push   ebp
c0014791:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014795:	51                   	push   ecx
c0014796:	52                   	push   edx
c0014797:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001479b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001479f:	53                   	push   ebx
c00147a0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147a3:	83 c4 14             	add    esp,0x14
c00147a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00147aa:	e8 24 33 ff ff       	call   c0007ad3 <malloc>
c00147af:	89 c6                	mov    esi,eax
c00147b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147b3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00147b6:	56                   	push   esi
c00147b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00147bb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00147bf:	51                   	push   ecx
c00147c0:	52                   	push   edx
c00147c1:	53                   	push   ebx
c00147c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147c9:	83 c4 1c             	add    esp,0x1c
c00147cc:	8b 15 40 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a440
c00147d2:	c1 e8 04             	shr    eax,0x4
c00147d5:	89 04 95 c0 a2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5d40],eax
c00147dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147e0:	31 d2                	xor    edx,edx
c00147e2:	52                   	push   edx
c00147e3:	50                   	push   eax
c00147e4:	53                   	push   ebx
c00147e5:	e8 78 70 ff ff       	call   c000b862 <File::seek(unsigned long long)>
c00147ea:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00147ec:	31 d2                	xor    edx,edx
c00147ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00147f1:	56                   	push   esi
c00147f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00147f6:	52                   	push   edx
c00147f7:	50                   	push   eax
c00147f8:	53                   	push   ebx
c00147f9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147fc:	83 c4 14             	add    esp,0x14
c00147ff:	53                   	push   ebx
c0014800:	e8 fd 6f ff ff       	call   c000b802 <File::close()>
c0014805:	5d                   	pop    ebp
c0014806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001480a:	e8 d4 32 ff ff       	call   c0007ae3 <free>
c001480f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014812:	e8 cc 32 ff ff       	call   c0007ae3 <free>
c0014817:	a1 40 a4 02 c0       	mov    eax,ds:0xc002a440
c001481c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014820:	83 c4 10             	add    esp,0x10
c0014823:	89 34 85 40 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5cc0],esi
c001482a:	8d 50 01             	lea    edx,[eax+0x1]
c001482d:	89 0c 85 c0 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5c40],ecx
c0014834:	b0 01                	mov    al,0x1
c0014836:	89 15 40 a4 02 c0    	mov    DWORD PTR ds:0xc002a440,edx
c001483c:	83 c4 5c             	add    esp,0x5c
c001483f:	5b                   	pop    ebx
c0014840:	5e                   	pop    esi
c0014841:	5f                   	pop    edi
c0014842:	5d                   	pop    ebp
c0014843:	c3                   	ret    

c0014844 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014844:	55                   	push   ebp
c0014845:	57                   	push   edi
c0014846:	56                   	push   esi
c0014847:	53                   	push   ebx
c0014848:	81 ec 68 03 00 00    	sub    esp,0x368
c001484e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014855:	8b 35 90 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a490
c001485b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001485f:	68 14 01 00 00       	push   0x114
c0014864:	e8 6a 32 ff ff       	call   c0007ad3 <malloc>
c0014869:	83 c4 0c             	add    esp,0xc
c001486c:	56                   	push   esi
c001486d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014874:	50                   	push   eax
c0014875:	89 c3                	mov    ebx,eax
c0014877:	e8 6c 6e ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c001487c:	5f                   	pop    edi
c001487d:	5d                   	pop    ebp
c001487e:	6a 01                	push   0x1
c0014880:	53                   	push   ebx
c0014881:	e8 1e 6f ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c0014886:	83 c4 10             	add    esp,0x10
c0014889:	85 c0                	test   eax,eax
c001488b:	0f 85 b3 06 00 00    	jne    c0014f44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014891:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014899:	83 ec 0c             	sub    esp,0xc
c001489c:	6a 34                	push   0x34
c001489e:	e8 30 32 ff ff       	call   c0007ad3 <malloc>
c00148a3:	5e                   	pop    esi
c00148a4:	8d 74 24 54          	lea    esi,[esp+0x54]
c00148a8:	89 c5                	mov    ebp,eax
c00148aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148ac:	56                   	push   esi
c00148ad:	55                   	push   ebp
c00148ae:	6a 00                	push   0x0
c00148b0:	6a 34                	push   0x34
c00148b2:	53                   	push   ebx
c00148b3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148b6:	83 c4 20             	add    esp,0x20
c00148b9:	85 c0                	test   eax,eax
c00148bb:	0f 85 83 06 00 00    	jne    c0014f44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148c1:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c00148c8:	0f 85 76 06 00 00    	jne    c0014f44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148ce:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00148d1:	85 c0                	test   eax,eax
c00148d3:	0f 84 6b 06 00 00    	je     c0014f44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148d9:	31 d2                	xor    edx,edx
c00148db:	51                   	push   ecx
c00148dc:	52                   	push   edx
c00148dd:	50                   	push   eax
c00148de:	53                   	push   ebx
c00148df:	e8 7e 6f ff ff       	call   c000b862 <File::seek(unsigned long long)>
c00148e4:	83 c4 10             	add    esp,0x10
c00148e7:	85 c0                	test   eax,eax
c00148e9:	0f 85 55 06 00 00    	jne    c0014f44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148ef:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00148f2:	83 ec 0c             	sub    esp,0xc
c00148f5:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00148f9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00148fd:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014901:	0f af c2             	imul   eax,edx
c0014904:	50                   	push   eax
c0014905:	e8 c9 31 ff ff       	call   c0007ad3 <malloc>
c001490a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001490c:	89 34 24             	mov    DWORD PTR [esp],esi
c001490f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014917:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001491b:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001491f:	0f af c2             	imul   eax,edx
c0014922:	99                   	cdq    
c0014923:	52                   	push   edx
c0014924:	50                   	push   eax
c0014925:	53                   	push   ebx
c0014926:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014929:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001492c:	83 c4 20             	add    esp,0x20
c001492f:	85 c0                	test   eax,eax
c0014931:	0f 84 0d 06 00 00    	je     c0014f44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014937:	52                   	push   edx
c0014938:	31 d2                	xor    edx,edx
c001493a:	52                   	push   edx
c001493b:	50                   	push   eax
c001493c:	53                   	push   ebx
c001493d:	e8 20 6f ff ff       	call   c000b862 <File::seek(unsigned long long)>
c0014942:	83 c4 10             	add    esp,0x10
c0014945:	85 c0                	test   eax,eax
c0014947:	0f 85 f7 05 00 00    	jne    c0014f44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001494d:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014951:	83 ec 0c             	sub    esp,0xc
c0014954:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014958:	0f af c2             	imul   eax,edx
c001495b:	50                   	push   eax
c001495c:	e8 72 31 ff ff       	call   c0007ad3 <malloc>
c0014961:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014963:	89 34 24             	mov    DWORD PTR [esp],esi
c0014966:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001496a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001496e:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014972:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014976:	0f af c2             	imul   eax,edx
c0014979:	99                   	cdq    
c001497a:	52                   	push   edx
c001497b:	50                   	push   eax
c001497c:	53                   	push   ebx
c001497d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014980:	83 c4 20             	add    esp,0x20
c0014983:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014989:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001498c:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014990:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014994:	73 78                	jae    c0014a0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014996:	c1 e7 05             	shl    edi,0x5
c0014999:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001499d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00149a0:	75 63                	jne    c0014a05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c00149a2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00149a5:	31 d2                	xor    edx,edx
c00149a7:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c00149aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149ae:	50                   	push   eax
c00149af:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00149b2:	52                   	push   edx
c00149b3:	50                   	push   eax
c00149b4:	53                   	push   ebx
c00149b5:	e8 a8 6e ff ff       	call   c000b862 <File::seek(unsigned long long)>
c00149ba:	83 c4 10             	add    esp,0x10
c00149bd:	85 c0                	test   eax,eax
c00149bf:	0f 85 7f 05 00 00    	jne    c0014f44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00149c5:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00149cc:	83 ec 0c             	sub    esp,0xc
c00149cf:	31 d2                	xor    edx,edx
c00149d1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00149d5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00149d7:	01 c6                	add    esi,eax
c00149d9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00149e0:	50                   	push   eax
c00149e1:	56                   	push   esi
c00149e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149e6:	52                   	push   edx
c00149e7:	50                   	push   eax
c00149e8:	53                   	push   ebx
c00149e9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149ec:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00149ef:	83 c4 1c             	add    esp,0x1c
c00149f2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00149f5:	50                   	push   eax
c00149f6:	6a 00                	push   0x0
c00149f8:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00149fc:	56                   	push   esi
c00149fd:	e8 ee ba fe ff       	call   c00004f0 <memset>
c0014a02:	83 c4 10             	add    esp,0x10
c0014a05:	66 ff 04 24          	inc    WORD PTR [esp]
c0014a09:	e9 7b ff ff ff       	jmp    c0014989 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014a0e:	50                   	push   eax
c0014a0f:	68 00 01 00 00       	push   0x100
c0014a14:	6a 00                	push   0x0
c0014a16:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014a1a:	50                   	push   eax
c0014a1b:	e8 d0 ba fe ff       	call   c00004f0 <memset>
c0014a20:	83 c4 0c             	add    esp,0xc
c0014a23:	68 00 01 00 00       	push   0x100
c0014a28:	6a 00                	push   0x0
c0014a2a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014a31:	50                   	push   eax
c0014a32:	e8 b9 ba fe ff       	call   c00004f0 <memset>
c0014a37:	83 c4 10             	add    esp,0x10
c0014a3a:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014a41:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014a48:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014a50:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014a58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014a60:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014a68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a6c:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014a70:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014a75:	0f 83 16 01 00 00    	jae    c0014b91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014a7b:	6b ff 28             	imul   edi,edi,0x28
c0014a7e:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014a82:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014a85:	51                   	push   ecx
c0014a86:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014a8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014a8e:	8b 07                	mov    eax,DWORD PTR [edi]
c0014a90:	6b d2 28             	imul   edx,edx,0x28
c0014a93:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014a97:	31 d2                	xor    edx,edx
c0014a99:	52                   	push   edx
c0014a9a:	50                   	push   eax
c0014a9b:	53                   	push   ebx
c0014a9c:	e8 c1 6d ff ff       	call   c000b862 <File::seek(unsigned long long)>
c0014aa1:	83 c4 0c             	add    esp,0xc
c0014aa4:	6a 20                	push   0x20
c0014aa6:	6a 00                	push   0x0
c0014aa8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014aaf:	51                   	push   ecx
c0014ab0:	e8 3b ba fe ff       	call   c00004f0 <memset>
c0014ab5:	58                   	pop    eax
c0014ab6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ab8:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014abc:	52                   	push   edx
c0014abd:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014ac4:	51                   	push   ecx
c0014ac5:	6a 00                	push   0x0
c0014ac7:	6a 1f                	push   0x1f
c0014ac9:	53                   	push   ebx
c0014aca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014acd:	83 c4 1c             	add    esp,0x1c
c0014ad0:	6a 09                	push   0x9
c0014ad2:	68 90 20 02 c0       	push   0xc0022090
c0014ad7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014ade:	51                   	push   ecx
c0014adf:	e8 9c b8 fe ff       	call   c0000380 <memcmp>
c0014ae4:	83 c4 10             	add    esp,0x10
c0014ae7:	85 c0                	test   eax,eax
c0014ae9:	75 1a                	jne    c0014b05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014aeb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014aee:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014af1:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014af5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014af8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014aff:	89 d0                	mov    eax,edx
c0014b01:	40                   	inc    eax
c0014b02:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b05:	52                   	push   edx
c0014b06:	6a 09                	push   0x9
c0014b08:	68 9a 20 02 c0       	push   0xc002209a
c0014b0d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b14:	50                   	push   eax
c0014b15:	e8 66 b8 fe ff       	call   c0000380 <memcmp>
c0014b1a:	83 c4 10             	add    esp,0x10
c0014b1d:	85 c0                	test   eax,eax
c0014b1f:	75 1a                	jne    c0014b3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014b21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014b24:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014b27:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014b2b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b2e:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014b35:	89 c8                	mov    eax,ecx
c0014b37:	40                   	inc    eax
c0014b38:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b3b:	50                   	push   eax
c0014b3c:	50                   	push   eax
c0014b3d:	68 66 20 02 c0       	push   0xc0022066
c0014b42:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b49:	50                   	push   eax
c0014b4a:	e8 31 bc fe ff       	call   c0000780 <strcmp>
c0014b4f:	83 c4 10             	add    esp,0x10
c0014b52:	85 c0                	test   eax,eax
c0014b54:	75 0b                	jne    c0014b61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014b56:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014b5a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b61:	50                   	push   eax
c0014b62:	50                   	push   eax
c0014b63:	68 6e 20 02 c0       	push   0xc002206e
c0014b68:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b6f:	50                   	push   eax
c0014b70:	e8 0b bc fe ff       	call   c0000780 <strcmp>
c0014b75:	83 c4 10             	add    esp,0x10
c0014b78:	85 c0                	test   eax,eax
c0014b7a:	75 0b                	jne    c0014b87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014b7c:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014b80:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b87:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014b8c:	e9 d7 fe ff ff       	jmp    c0014a68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014b91:	50                   	push   eax
c0014b92:	31 d2                	xor    edx,edx
c0014b94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b98:	52                   	push   edx
c0014b99:	50                   	push   eax
c0014b9a:	53                   	push   ebx
c0014b9b:	e8 c2 6c ff ff       	call   c000b862 <File::seek(unsigned long long)>
c0014ba0:	58                   	pop    eax
c0014ba1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ba5:	e8 29 2f ff ff       	call   c0007ad3 <malloc>
c0014baa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014bac:	31 d2                	xor    edx,edx
c0014bae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014bb2:	58                   	pop    eax
c0014bb3:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014bb7:	56                   	push   esi
c0014bb8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014bbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bc0:	52                   	push   edx
c0014bc1:	50                   	push   eax
c0014bc2:	53                   	push   ebx
c0014bc3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014bc6:	83 c4 14             	add    esp,0x14
c0014bc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bcd:	e8 01 2f ff ff       	call   c0007ad3 <malloc>
c0014bd2:	31 d2                	xor    edx,edx
c0014bd4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014bd8:	83 c4 0c             	add    esp,0xc
c0014bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bdf:	52                   	push   edx
c0014be0:	50                   	push   eax
c0014be1:	53                   	push   ebx
c0014be2:	e8 7b 6c ff ff       	call   c000b862 <File::seek(unsigned long long)>
c0014be7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014be9:	31 d2                	xor    edx,edx
c0014beb:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014bf2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014bf6:	52                   	push   edx
c0014bf7:	50                   	push   eax
c0014bf8:	53                   	push   ebx
c0014bf9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014bfc:	83 c4 20             	add    esp,0x20
c0014bff:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014c04:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c0c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014c10:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014c14:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014c17:	0f 84 2b 03 00 00    	je     c0014f48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014c1d:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014c24:	31 d2                	xor    edx,edx
c0014c26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c2a:	c1 e8 03             	shr    eax,0x3
c0014c2d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014c31:	51                   	push   ecx
c0014c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c36:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014c3a:	52                   	push   edx
c0014c3b:	50                   	push   eax
c0014c3c:	53                   	push   ebx
c0014c3d:	e8 20 6c ff ff       	call   c000b862 <File::seek(unsigned long long)>
c0014c42:	5e                   	pop    esi
c0014c43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c47:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014c4e:	e8 80 2e ff ff       	call   c0007ad3 <malloc>
c0014c53:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c55:	31 d2                	xor    edx,edx
c0014c57:	89 c7                	mov    edi,eax
c0014c59:	58                   	pop    eax
c0014c5a:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014c5e:	50                   	push   eax
c0014c5f:	57                   	push   edi
c0014c60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c64:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014c6b:	52                   	push   edx
c0014c6c:	50                   	push   eax
c0014c6d:	53                   	push   ebx
c0014c6e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c71:	83 c4 20             	add    esp,0x20
c0014c74:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014c7c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014c80:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014c84:	0f 8d a5 02 00 00    	jge    c0014f2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014c8a:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014c8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c93:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014c96:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014c9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c9e:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014ca2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ca6:	c1 e8 08             	shr    eax,0x8
c0014ca9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014cad:	89 c2                	mov    edx,eax
c0014caf:	c1 e2 04             	shl    edx,0x4
c0014cb2:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014cb6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014cb9:	85 f6                	test   esi,esi
c0014cbb:	0f 85 cf 00 00 00    	jne    c0014d90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014cc1:	83 ec 0c             	sub    esp,0xc
c0014cc4:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014cc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ccc:	03 02                	add    eax,DWORD PTR [edx]
c0014cce:	50                   	push   eax
c0014ccf:	e8 63 f8 ff ff       	call   c0014537 <Thr::getAddressOfKernelSymbol(char const*)>
c0014cd4:	83 c4 10             	add    esp,0x10
c0014cd7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014cdb:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014ce0:	85 c0                	test   eax,eax
c0014ce2:	89 c6                	mov    esi,eax
c0014ce4:	0f 85 a6 00 00 00    	jne    c0014d90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014cea:	83 ec 0c             	sub    esp,0xc
c0014ced:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014cf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cf5:	03 02                	add    eax,DWORD PTR [edx]
c0014cf7:	50                   	push   eax
c0014cf8:	e8 5f c6 ff ff       	call   c001135c <KeResolveCompatibilitySymbol(char*)>
c0014cfd:	83 c4 10             	add    esp,0x10
c0014d00:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014d04:	85 c0                	test   eax,eax
c0014d06:	89 c6                	mov    esi,eax
c0014d08:	0f 85 82 00 00 00    	jne    c0014d90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014d0e:	50                   	push   eax
c0014d0f:	50                   	push   eax
c0014d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d14:	03 02                	add    eax,DWORD PTR [edx]
c0014d16:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014d1a:	50                   	push   eax
c0014d1b:	68 a4 20 02 c0       	push   0xc00220a4
c0014d20:	e8 e5 5b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014d25:	58                   	pop    eax
c0014d26:	5a                   	pop    edx
c0014d27:	68 be 20 02 c0       	push   0xc00220be
c0014d2c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d33:	51                   	push   ecx
c0014d34:	e8 17 b9 fe ff       	call   c0000650 <strcpy>
c0014d39:	59                   	pop    ecx
c0014d3a:	58                   	pop    eax
c0014d3b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d43:	03 02                	add    eax,DWORD PTR [edx]
c0014d45:	50                   	push   eax
c0014d46:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d4d:	51                   	push   ecx
c0014d4e:	e8 1d bb fe ff       	call   c0000870 <strcat>
c0014d53:	58                   	pop    eax
c0014d54:	5a                   	pop    edx
c0014d55:	68 54 21 02 c0       	push   0xc0022154
c0014d5a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d61:	51                   	push   ecx
c0014d62:	e8 09 bb fe ff       	call   c0000870 <strcat>
c0014d67:	83 c4 10             	add    esp,0x10
c0014d6a:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014d6f:	0f 84 77 01 00 00    	je     c0014eec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014d75:	83 ec 0c             	sub    esp,0xc
c0014d78:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d7f:	51                   	push   ecx
c0014d80:	e8 ec c3 ff ff       	call   c0011171 <KePanic(char const*)>
c0014d85:	83 c4 10             	add    esp,0x10
c0014d88:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014d8c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014d90:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014d95:	83 f8 01             	cmp    eax,0x1
c0014d98:	0f 85 9b 00 00 00    	jne    c0014e39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014d9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014da2:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014da9:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014dad:	01 d0                	add    eax,edx
c0014daf:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014db7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014dbb:	0f 94 c0             	sete   al
c0014dbe:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014dc6:	0f 94 c1             	sete   cl
c0014dc9:	09 c1                	or     ecx,eax
c0014dcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014dcf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014dd4:	0f b6 c9             	movzx  ecx,cl
c0014dd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dd9:	74 41                	je     c0014e1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014ddb:	8d 14 06             	lea    edx,[esi+eax*1]
c0014dde:	85 c9                	test   ecx,ecx
c0014de0:	75 15                	jne    c0014df7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014de2:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014de6:	66 83 f8 0c          	cmp    ax,0xc
c0014dea:	76 05                	jbe    c0014df1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014dec:	b8 0c 00 00 00       	mov    eax,0xc
c0014df1:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014df5:	76 37                	jbe    c0014e2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014df7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014dfc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014e00:	0f 84 e6 00 00 00    	je     c0014eec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014e06:	83 ec 0c             	sub    esp,0xc
c0014e09:	68 d5 20 02 c0       	push   0xc00220d5
c0014e0e:	e8 5e c3 ff ff       	call   c0011171 <KePanic(char const*)>
c0014e13:	83 c4 10             	add    esp,0x10
c0014e16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014e1a:	eb 12                	jmp    c0014e2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e1c:	01 c2                	add    edx,eax
c0014e1e:	85 c9                	test   ecx,ecx
c0014e20:	75 0c                	jne    c0014e2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e22:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014e26:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014e2a:	77 02                	ja     c0014e2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e2c:	01 f2                	add    edx,esi
c0014e2e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e32:	89 10                	mov    DWORD PTR [eax],edx
c0014e34:	e9 ed 00 00 00       	jmp    c0014f26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014e39:	83 f8 02             	cmp    eax,0x2
c0014e3c:	0f 85 81 00 00 00    	jne    c0014ec3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014e42:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014e49:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014e4d:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014e51:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014e59:	74 21                	je     c0014e7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014e5b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014e63:	74 17                	je     c0014e7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014e65:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014e69:	ba 0a 00 00 00       	mov    edx,0xa
c0014e6e:	83 f9 0e             	cmp    ecx,0xe
c0014e71:	77 03                	ja     c0014e76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014e73:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014e76:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014e7a:	76 1f                	jbe    c0014e9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014e7c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014e81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e85:	74 65                	je     c0014eec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014e87:	83 ec 0c             	sub    esp,0xc
c0014e8a:	68 f1 20 02 c0       	push   0xc00220f1
c0014e8f:	e8 dd c2 ff ff       	call   c0011171 <KePanic(char const*)>
c0014e94:	83 c4 10             	add    esp,0x10
c0014e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e9b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ea0:	8b 10                	mov    edx,DWORD PTR [eax]
c0014ea2:	74 15                	je     c0014eb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014ea4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014ea8:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014eaf:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014eb3:	01 d1                	add    ecx,edx
c0014eb5:	01 ce                	add    esi,ecx
c0014eb7:	eb 06                	jmp    c0014ebf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014eb9:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014ebd:	01 d6                	add    esi,edx
c0014ebf:	89 30                	mov    DWORD PTR [eax],esi
c0014ec1:	eb 63                	jmp    c0014f26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014ec3:	56                   	push   esi
c0014ec4:	56                   	push   esi
c0014ec5:	50                   	push   eax
c0014ec6:	68 0d 21 02 c0       	push   0xc002210d
c0014ecb:	e8 3a 5a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014ed0:	83 c4 10             	add    esp,0x10
c0014ed3:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014ed8:	74 12                	je     c0014eec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014eda:	83 ec 0c             	sub    esp,0xc
c0014edd:	68 18 21 02 c0       	push   0xc0022118
c0014ee2:	e8 8a c2 ff ff       	call   c0011171 <KePanic(char const*)>
c0014ee7:	83 c4 10             	add    esp,0x10
c0014eea:	eb 3a                	jmp    c0014f26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014eec:	83 ec 0c             	sub    esp,0xc
c0014eef:	53                   	push   ebx
c0014ef0:	e8 0d 69 ff ff       	call   c000b802 <File::close()>
c0014ef5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ef7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014efa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014efd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f00:	e8 de 2b ff ff       	call   c0007ae3 <free>
c0014f05:	59                   	pop    ecx
c0014f06:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f0a:	e8 d4 2b ff ff       	call   c0007ae3 <free>
c0014f0f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f12:	e8 cc 2b ff ff       	call   c0007ae3 <free>
c0014f17:	5b                   	pop    ebx
c0014f18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f1c:	e8 c2 2b ff ff       	call   c0007ae3 <free>
c0014f21:	83 c4 10             	add    esp,0x10
c0014f24:	eb 1e                	jmp    c0014f44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f26:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0014f2a:	e9 4d fd ff ff       	jmp    c0014c7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0014f2f:	83 ec 0c             	sub    esp,0xc
c0014f32:	57                   	push   edi
c0014f33:	e8 ab 2b ff ff       	call   c0007ae3 <free>
c0014f38:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014f3c:	83 c4 10             	add    esp,0x10
c0014f3f:	e9 cc fc ff ff       	jmp    c0014c10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0014f44:	31 c0                	xor    eax,eax
c0014f46:	eb 32                	jmp    c0014f7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014f48:	83 ec 0c             	sub    esp,0xc
c0014f4b:	53                   	push   ebx
c0014f4c:	e8 b1 68 ff ff       	call   c000b802 <File::close()>
c0014f51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f56:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f59:	58                   	pop    eax
c0014f5a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f5e:	e8 80 2b ff ff       	call   c0007ae3 <free>
c0014f63:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f66:	e8 78 2b ff ff       	call   c0007ae3 <free>
c0014f6b:	5a                   	pop    edx
c0014f6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f70:	e8 6e 2b ff ff       	call   c0007ae3 <free>
c0014f75:	83 c4 10             	add    esp,0x10
c0014f78:	b0 01                	mov    al,0x1
c0014f7a:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014f80:	5b                   	pop    ebx
c0014f81:	5e                   	pop    esi
c0014f82:	5f                   	pop    edi
c0014f83:	5d                   	pop    ebp
c0014f84:	c3                   	ret    

c0014f85 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014f85:	56                   	push   esi
c0014f86:	31 d2                	xor    edx,edx
c0014f88:	53                   	push   ebx
c0014f89:	8b 1d a0 9c 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ca0
c0014f8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014f93:	39 d3                	cmp    ebx,edx
c0014f95:	7e 1b                	jle    c0014fb2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014f97:	8b 04 95 c0 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6140]
c0014f9e:	39 c8                	cmp    eax,ecx
c0014fa0:	77 0d                	ja     c0014faf <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014fa2:	8b 34 95 c0 9c 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6340]
c0014fa9:	01 c6                	add    esi,eax
c0014fab:	39 ce                	cmp    esi,ecx
c0014fad:	77 05                	ja     c0014fb4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014faf:	42                   	inc    edx
c0014fb0:	eb e1                	jmp    c0014f93 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014fb2:	31 c0                	xor    eax,eax
c0014fb4:	5b                   	pop    ebx
c0014fb5:	5e                   	pop    esi
c0014fb6:	c3                   	ret    

c0014fb7 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014fb7:	53                   	push   ebx
c0014fb8:	8b 1d a0 9c 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ca0
c0014fbe:	31 c0                	xor    eax,eax
c0014fc0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014fc4:	39 c3                	cmp    ebx,eax
c0014fc6:	7e 22                	jle    c0014fea <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014fc8:	8b 14 85 c0 9e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6140]
c0014fcf:	39 ca                	cmp    edx,ecx
c0014fd1:	77 14                	ja     c0014fe7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014fd3:	03 14 85 c0 9c 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6340]
c0014fda:	39 ca                	cmp    edx,ecx
c0014fdc:	76 09                	jbe    c0014fe7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014fde:	8b 04 85 c0 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f40]
c0014fe5:	eb 05                	jmp    c0014fec <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014fe7:	40                   	inc    eax
c0014fe8:	eb da                	jmp    c0014fc4 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014fea:	31 c0                	xor    eax,eax
c0014fec:	5b                   	pop    ebx
c0014fed:	c3                   	ret    

c0014fee <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014fee:	53                   	push   ebx
c0014fef:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014ff3:	53                   	push   ebx
c0014ff4:	e8 8c ff ff ff       	call   c0014f85 <Thr::getDriverBaseFromAddress(unsigned long)>
c0014ff9:	5a                   	pop    edx
c0014ffa:	31 d2                	xor    edx,edx
c0014ffc:	85 c0                	test   eax,eax
c0014ffe:	74 04                	je     c0015004 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015000:	89 da                	mov    edx,ebx
c0015002:	29 c2                	sub    edx,eax
c0015004:	5b                   	pop    ebx
c0015005:	89 d0                	mov    eax,edx
c0015007:	c3                   	ret    

c0015008 <Thr::loadDLL(char const*, bool)>:
c0015008:	55                   	push   ebp
c0015009:	57                   	push   edi
c001500a:	56                   	push   esi
c001500b:	53                   	push   ebx
c001500c:	81 ec 34 01 00 00    	sub    esp,0x134
c0015012:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015019:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0015020:	56                   	push   esi
c0015021:	68 30 21 02 c0       	push   0xc0022130
c0015026:	e8 df 58 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001502b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015032:	e8 9c 2a ff ff       	call   c0007ad3 <malloc>
c0015037:	83 c4 0c             	add    esp,0xc
c001503a:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0015040:	56                   	push   esi
c0015041:	50                   	push   eax
c0015042:	89 c3                	mov    ebx,eax
c0015044:	e8 9f 66 ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c0015049:	83 c4 10             	add    esp,0x10
c001504c:	85 db                	test   ebx,ebx
c001504e:	75 3c                	jne    c001508c <Thr::loadDLL(char const*, bool)+0x84>
c0015050:	89 e8                	mov    eax,ebp
c0015052:	84 c0                	test   al,al
c0015054:	0f 84 e1 01 00 00    	je     c001523b <Thr::loadDLL(char const*, bool)+0x233>
c001505a:	50                   	push   eax
c001505b:	50                   	push   eax
c001505c:	68 41 21 02 c0       	push   0xc0022141
c0015061:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015065:	57                   	push   edi
c0015066:	e8 e5 b5 fe ff       	call   c0000650 <strcpy>
c001506b:	58                   	pop    eax
c001506c:	5a                   	pop    edx
c001506d:	56                   	push   esi
c001506e:	57                   	push   edi
c001506f:	e8 fc b7 fe ff       	call   c0000870 <strcat>
c0015074:	59                   	pop    ecx
c0015075:	58                   	pop    eax
c0015076:	68 54 21 02 c0       	push   0xc0022154
c001507b:	57                   	push   edi
c001507c:	e8 ef b7 fe ff       	call   c0000870 <strcat>
c0015081:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015084:	e8 e8 c0 ff ff       	call   c0011171 <KePanic(char const*)>
c0015089:	83 c4 10             	add    esp,0x10
c001508c:	50                   	push   eax
c001508d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015091:	50                   	push   eax
c0015092:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015096:	50                   	push   eax
c0015097:	53                   	push   ebx
c0015098:	e8 09 6a ff ff       	call   c000baa6 <File::stat(unsigned long long*, bool*)>
c001509d:	83 c4 10             	add    esp,0x10
c00150a0:	85 db                	test   ebx,ebx
c00150a2:	74 0c                	je     c00150b0 <Thr::loadDLL(char const*, bool)+0xa8>
c00150a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150a6:	83 ec 0c             	sub    esp,0xc
c00150a9:	53                   	push   ebx
c00150aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150ad:	83 c4 10             	add    esp,0x10
c00150b0:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00150b5:	75 0a                	jne    c00150c1 <Thr::loadDLL(char const*, bool)+0xb9>
c00150b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00150bb:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00150bf:	75 3e                	jne    c00150ff <Thr::loadDLL(char const*, bool)+0xf7>
c00150c1:	89 e8                	mov    eax,ebp
c00150c3:	31 db                	xor    ebx,ebx
c00150c5:	84 c0                	test   al,al
c00150c7:	0f 84 6e 01 00 00    	je     c001523b <Thr::loadDLL(char const*, bool)+0x233>
c00150cd:	50                   	push   eax
c00150ce:	50                   	push   eax
c00150cf:	68 41 21 02 c0       	push   0xc0022141
c00150d4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00150d8:	53                   	push   ebx
c00150d9:	e8 72 b5 fe ff       	call   c0000650 <strcpy>
c00150de:	58                   	pop    eax
c00150df:	5a                   	pop    edx
c00150e0:	56                   	push   esi
c00150e1:	53                   	push   ebx
c00150e2:	e8 89 b7 fe ff       	call   c0000870 <strcat>
c00150e7:	59                   	pop    ecx
c00150e8:	5f                   	pop    edi
c00150e9:	68 54 21 02 c0       	push   0xc0022154
c00150ee:	53                   	push   ebx
c00150ef:	e8 7c b7 fe ff       	call   c0000870 <strcat>
c00150f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150f7:	e8 75 c0 ff ff       	call   c0011171 <KePanic(char const*)>
c00150fc:	83 c4 10             	add    esp,0x10
c00150ff:	53                   	push   ebx
c0015100:	6a 03                	push   0x3
c0015102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015106:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001510a:	05 ff 0f 00 00       	add    eax,0xfff
c001510f:	83 d2 00             	adc    edx,0x0
c0015112:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015116:	50                   	push   eax
c0015117:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001511d:	e8 e4 4c ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0015122:	89 c3                	mov    ebx,eax
c0015124:	58                   	pop    eax
c0015125:	5a                   	pop    edx
c0015126:	53                   	push   ebx
c0015127:	68 b2 07 02 c0       	push   0xc00207b2
c001512c:	e8 d9 57 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015131:	89 34 24             	mov    DWORD PTR [esp],esi
c0015134:	e8 47 b4 fe ff       	call   c0000580 <strlen>
c0015139:	8b 3d a0 9c 02 c0    	mov    edi,DWORD PTR ds:0xc0029ca0
c001513f:	40                   	inc    eax
c0015140:	89 04 24             	mov    DWORD PTR [esp],eax
c0015143:	e8 8b 29 ff ff       	call   c0007ad3 <malloc>
c0015148:	59                   	pop    ecx
c0015149:	89 04 bd c0 a0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd5f40],eax
c0015150:	a1 a0 9c 02 c0       	mov    eax,ds:0xc0029ca0
c0015155:	5f                   	pop    edi
c0015156:	56                   	push   esi
c0015157:	ff 34 85 c0 a0 02 c0 	push   DWORD PTR [eax*4-0x3ffd5f40]
c001515e:	e8 ed b4 fe ff       	call   c0000650 <strcpy>
c0015163:	a1 a0 9c 02 c0       	mov    eax,ds:0xc0029ca0
c0015168:	89 1c 85 c0 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6140],ebx
c001516f:	8d 50 01             	lea    edx,[eax+0x1]
c0015172:	89 15 a0 9c 02 c0    	mov    DWORD PTR ds:0xc0029ca0,edx
c0015178:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001517c:	83 c4 0c             	add    esp,0xc
c001517f:	6a 01                	push   0x1
c0015181:	53                   	push   ebx
c0015182:	56                   	push   esi
c0015183:	89 14 85 c0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6340],edx
c001518a:	e8 b5 f6 ff ff       	call   c0014844 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001518f:	83 c4 10             	add    esp,0x10
c0015192:	89 c7                	mov    edi,eax
c0015194:	89 f8                	mov    eax,edi
c0015196:	83 f0 01             	xor    eax,0x1
c0015199:	84 c0                	test   al,al
c001519b:	74 18                	je     c00151b5 <Thr::loadDLL(char const*, bool)+0x1ad>
c001519d:	89 e8                	mov    eax,ebp
c001519f:	84 c0                	test   al,al
c00151a1:	74 12                	je     c00151b5 <Thr::loadDLL(char const*, bool)+0x1ad>
c00151a3:	83 ec 0c             	sub    esp,0xc
c00151a6:	68 56 21 02 c0       	push   0xc0022156
c00151ab:	e8 c1 bf ff ff       	call   c0011171 <KePanic(char const*)>
c00151b0:	83 c4 10             	add    esp,0x10
c00151b3:	eb 06                	jmp    c00151bb <Thr::loadDLL(char const*, bool)+0x1b3>
c00151b5:	89 f8                	mov    eax,edi
c00151b7:	84 c0                	test   al,al
c00151b9:	75 10                	jne    c00151cb <Thr::loadDLL(char const*, bool)+0x1c3>
c00151bb:	83 ec 0c             	sub    esp,0xc
c00151be:	68 75 21 02 c0       	push   0xc0022175
c00151c3:	e8 a9 bf ff ff       	call   c0011171 <KePanic(char const*)>
c00151c8:	83 c4 10             	add    esp,0x10
c00151cb:	31 f6                	xor    esi,esi
c00151cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00151d5:	05 ff 0f 00 00       	add    eax,0xfff
c00151da:	83 d2 00             	adc    edx,0x0
c00151dd:	0f ac d0 0c          	shrd   eax,edx,0xc
c00151e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00151e5:	c1 ea 0c             	shr    edx,0xc
c00151e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00151ec:	ba 00 00 00 00       	mov    edx,0x0
c00151f1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00151f5:	89 d0                	mov    eax,edx
c00151f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00151fb:	73 32                	jae    c001522f <Thr::loadDLL(char const*, bool)+0x227>
c00151fd:	50                   	push   eax
c00151fe:	50                   	push   eax
c00151ff:	89 f0                	mov    eax,esi
c0015201:	c1 e0 0c             	shl    eax,0xc
c0015204:	01 d8                	add    eax,ebx
c0015206:	50                   	push   eax
c0015207:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001520d:	e8 d8 46 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0015212:	83 c4 10             	add    esp,0x10
c0015215:	8b 00                	mov    eax,DWORD PTR [eax]
c0015217:	a8 60                	test   al,0x60
c0015219:	75 11                	jne    c001522c <Thr::loadDLL(char const*, bool)+0x224>
c001521b:	83 ec 0c             	sub    esp,0xc
c001521e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015223:	50                   	push   eax
c0015224:	e8 50 2b ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0015229:	83 c4 10             	add    esp,0x10
c001522c:	46                   	inc    esi
c001522d:	eb 9e                	jmp    c00151cd <Thr::loadDLL(char const*, bool)+0x1c5>
c001522f:	89 f8                	mov    eax,edi
c0015231:	84 c0                	test   al,al
c0015233:	b8 00 00 00 00       	mov    eax,0x0
c0015238:	0f 44 d8             	cmove  ebx,eax
c001523b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015241:	89 d8                	mov    eax,ebx
c0015243:	5b                   	pop    ebx
c0015244:	5e                   	pop    esi
c0015245:	5f                   	pop    edi
c0015246:	5d                   	pop    ebp
c0015247:	c3                   	ret    

c0015248 <Thr::executeDLL(unsigned long, void*)>:
c0015248:	56                   	push   esi
c0015249:	53                   	push   ebx
c001524a:	52                   	push   edx
c001524b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001524f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015253:	85 db                	test   ebx,ebx
c0015255:	75 10                	jne    c0015267 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015257:	83 ec 0c             	sub    esp,0xc
c001525a:	68 91 21 02 c0       	push   0xc0022191
c001525f:	e8 0d bf ff ff       	call   c0011171 <KePanic(char const*)>
c0015264:	83 c4 10             	add    esp,0x10
c0015267:	50                   	push   eax
c0015268:	50                   	push   eax
c0015269:	53                   	push   ebx
c001526a:	68 bb 21 02 c0       	push   0xc00221bb
c001526f:	e8 96 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015274:	89 d8                	mov    eax,ebx
c0015276:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001527a:	83 c4 14             	add    esp,0x14
c001527d:	5b                   	pop    ebx
c001527e:	5e                   	pop    esi
c001527f:	ff e0                	jmp    eax
c0015281:	66 90                	xchg   ax,ax
c0015283:	90                   	nop

c0015284 <userModeEntryPoint(void*)>:
c0015284:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015289:	83 e8 01             	sub    eax,0x1
c001528c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015291:	75 01                	jne    c0015294 <userModeEntryPoint(void*)+0x10>
c0015293:	fb                   	sti    
c0015294:	fb                   	sti    
c0015295:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001529a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001529d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00152a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152a7:	e9 93 af fe ff       	jmp    c000023f <goToUsermode>

c00152ac <changeTSS>:
c00152ac:	83 ec 14             	sub    esp,0x14
c00152af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152b4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00152b7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00152bc:	c1 e2 15             	shl    edx,0x15
c00152bf:	29 d0                	sub    eax,edx
c00152c1:	50                   	push   eax
c00152c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00152c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152cd:	05 7c 11 00 00       	add    eax,0x117c
c00152d2:	50                   	push   eax
c00152d3:	e8 64 3c ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c00152d8:	83 c4 1c             	add    esp,0x1c
c00152db:	c3                   	ret    

c00152dc <switchToThread(ThreadControlBlock*)>:
c00152dc:	57                   	push   edi
c00152dd:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c00152e3:	56                   	push   esi
c00152e4:	53                   	push   ebx
c00152e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00152e9:	85 c9                	test   ecx,ecx
c00152eb:	0f 85 8b 00 00 00    	jne    c001537c <switchToThread(ThreadControlBlock*)+0xa0>
c00152f1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00152f5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00152fb:	74 7b                	je     c0015378 <switchToThread(ThreadControlBlock*)+0x9c>
c00152fd:	b8 00 04 00 00       	mov    eax,0x400
c0015302:	29 d0                	sub    eax,edx
c0015304:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015307:	d1 f8                	sar    eax,1
c0015309:	01 d0                	add    eax,edx
c001530b:	90                   	nop
c001530c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001530f:	e8 04 28 00 00       	call   c0017b18 <HalQueryPerformanceCounter()>
c0015314:	a3 a8 a4 02 c0       	mov    ds:0xc002a4a8,eax
c0015319:	89 c6                	mov    esi,eax
c001531b:	89 d7                	mov    edi,edx
c001531d:	2b 35 98 a4 02 c0    	sub    esi,DWORD PTR ds:0xc002a498
c0015323:	a3 98 a4 02 c0       	mov    ds:0xc002a498,eax
c0015328:	1b 3d 9c a4 02 c0    	sbb    edi,DWORD PTR ds:0xc002a49c
c001532e:	89 35 a0 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a0,esi
c0015334:	89 15 ac a4 02 c0    	mov    DWORD PTR ds:0xc002a4ac,edx
c001533a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015340:	89 15 9c a4 02 c0    	mov    DWORD PTR ds:0xc002a49c,edx
c0015346:	89 3d a4 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a4,edi
c001534c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001534f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015352:	01 c6                	add    esi,eax
c0015354:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015357:	11 d7                	adc    edi,edx
c0015359:	83 ec 0c             	sub    esp,0xc
c001535c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001535f:	53                   	push   ebx
c0015360:	e8 12 af fe ff       	call   c0000277 <switchToThreadASM>
c0015365:	0f 20 c0             	mov    eax,cr0
c0015368:	83 c8 08             	or     eax,0x8
c001536b:	0f 22 c0             	mov    cr0,eax
c001536e:	83 c4 10             	add    esp,0x10
c0015371:	5b                   	pop    ebx
c0015372:	5e                   	pop    esi
c0015373:	5f                   	pop    edi
c0015374:	c3                   	ret    
c0015375:	8d 76 00             	lea    esi,[esi+0x0]
c0015378:	31 c0                	xor    eax,eax
c001537a:	eb 90                	jmp    c001530c <switchToThread(ThreadControlBlock*)+0x30>
c001537c:	5b                   	pop    ebx
c001537d:	c7 05 60 a4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x1
c0015387:	5e                   	pop    esi
c0015388:	5f                   	pop    edi
c0015389:	c3                   	ret    
c001538a:	66 90                	xchg   ax,ax

c001538c <Process::addArgs(char**)>:
c001538c:	57                   	push   edi
c001538d:	56                   	push   esi
c001538e:	53                   	push   ebx
c001538f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015393:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015397:	85 f6                	test   esi,esi
c0015399:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00153a3:	74 4f                	je     c00153f4 <Process::addArgs(char**)+0x68>
c00153a5:	8b 06                	mov    eax,DWORD PTR [esi]
c00153a7:	85 c0                	test   eax,eax
c00153a9:	74 49                	je     c00153f4 <Process::addArgs(char**)+0x68>
c00153ab:	31 db                	xor    ebx,ebx
c00153ad:	8d 76 00             	lea    esi,[esi+0x0]
c00153b0:	83 ec 0c             	sub    esp,0xc
c00153b3:	50                   	push   eax
c00153b4:	e8 c7 b1 fe ff       	call   c0000580 <strlen>
c00153b9:	83 c0 01             	add    eax,0x1
c00153bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00153bf:	e8 0f 27 ff ff       	call   c0007ad3 <malloc>
c00153c4:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c00153cb:	5a                   	pop    edx
c00153cc:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00153cf:	83 c3 01             	add    ebx,0x1
c00153d2:	59                   	pop    ecx
c00153d3:	52                   	push   edx
c00153d4:	50                   	push   eax
c00153d5:	e8 76 b2 fe ff       	call   c0000650 <strcpy>
c00153da:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c00153e0:	83 c4 10             	add    esp,0x10
c00153e3:	83 c1 01             	add    ecx,0x1
c00153e6:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c00153ec:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00153ef:	85 c0                	test   eax,eax
c00153f1:	75 bd                	jne    c00153b0 <Process::addArgs(char**)+0x24>
c00153f3:	90                   	nop
c00153f4:	5b                   	pop    ebx
c00153f5:	5e                   	pop    esi
c00153f6:	5f                   	pop    edi
c00153f7:	c3                   	ret    

c00153f8 <Process::Process(char const*, Process*, char**)>:
c00153f8:	56                   	push   esi
c00153f9:	53                   	push   ebx
c00153fa:	83 ec 14             	sub    esp,0x14
c00153fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015401:	05 0c 02 00 00       	add    eax,0x20c
c0015406:	bb 07 00 00 00       	mov    ebx,0x7
c001540b:	89 c6                	mov    esi,eax
c001540d:	8d 76 00             	lea    esi,[esi+0x0]
c0015410:	85 db                	test   ebx,ebx
c0015412:	78 14                	js     c0015428 <Process::Process(char const*, Process*, char**)+0x30>
c0015414:	83 ec 0c             	sub    esp,0xc
c0015417:	56                   	push   esi
c0015418:	e8 2b a6 00 00       	call   c001fa48 <ThreadControlBlock::ThreadControlBlock()>
c001541d:	83 c4 10             	add    esp,0x10
c0015420:	83 c6 5f             	add    esi,0x5f
c0015423:	83 eb 01             	sub    ebx,0x1
c0015426:	eb e8                	jmp    c0015410 <Process::Process(char const*, Process*, char**)+0x18>
c0015428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001542c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015433:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015437:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001543e:	83 ec 0c             	sub    esp,0xc
c0015441:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015445:	e8 1c bb ff ff       	call   c0010f66 <KeNewProcessEnv(Process*)>
c001544a:	83 c4 10             	add    esp,0x10
c001544d:	89 c2                	mov    edx,eax
c001544f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015453:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015459:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001545d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015466:	a1 e0 33 02 c0       	mov    eax,ds:0xc00233e0
c001546b:	8d 50 01             	lea    edx,[eax+0x1]
c001546e:	89 15 e0 33 02 c0    	mov    DWORD PTR ds:0xc00233e0,edx
c0015474:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015478:	89 02                	mov    DWORD PTR [edx],eax
c001547a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015482:	83 ec 0c             	sub    esp,0xc
c0015485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015489:	e8 45 26 ff ff       	call   c0007ad3 <malloc>
c001548e:	83 c4 10             	add    esp,0x10
c0015491:	89 c3                	mov    ebx,eax
c0015493:	83 ec 08             	sub    esp,0x8
c0015496:	6a 00                	push   0x0
c0015498:	53                   	push   ebx
c0015499:	e8 b4 4b ff ff       	call   c000a052 <VAS::VAS(bool)>
c001549e:	83 c4 10             	add    esp,0x10
c00154a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154a5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00154ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154af:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00154b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00154c1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00154c7:	e8 be c0 ff ff       	call   c001158a <KeInitSignals()>
c00154cc:	89 c2                	mov    edx,eax
c00154ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154d2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00154d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00154e2:	85 c0                	test   eax,eax
c00154e4:	74 42                	je     c0015528 <Process::Process(char const*, Process*, char**)+0x130>
c00154e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154ea:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00154f0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00154f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154fa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015504:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001550a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015514:	05 0c 01 00 00       	add    eax,0x10c
c0015519:	83 ec 08             	sub    esp,0x8
c001551c:	52                   	push   edx
c001551d:	50                   	push   eax
c001551e:	e8 2d b1 fe ff       	call   c0000650 <strcpy>
c0015523:	83 c4 10             	add    esp,0x10
c0015526:	eb 64                	jmp    c001558c <Process::Process(char const*, Process*, char**)+0x194>
c0015528:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015530:	83 ec 0c             	sub    esp,0xc
c0015533:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015537:	e8 97 25 ff ff       	call   c0007ad3 <malloc>
c001553c:	83 c4 10             	add    esp,0x10
c001553f:	89 c3                	mov    ebx,eax
c0015541:	83 ec 08             	sub    esp,0x8
c0015544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015548:	53                   	push   ebx
c0015549:	e8 1e 37 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c001554e:	83 c4 10             	add    esp,0x10
c0015551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015555:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001555b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001555f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015565:	83 ec 0c             	sub    esp,0xc
c0015568:	50                   	push   eax
c0015569:	e8 ac 2f ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c001556e:	83 c4 10             	add    esp,0x10
c0015571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015575:	05 0c 01 00 00       	add    eax,0x10c
c001557a:	83 ec 08             	sub    esp,0x8
c001557d:	68 da 21 02 c0       	push   0xc00221da
c0015582:	50                   	push   eax
c0015583:	e8 c8 b0 fe ff       	call   c0000650 <strcpy>
c0015588:	83 c4 10             	add    esp,0x10
c001558b:	90                   	nop
c001558c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015590:	83 c0 0c             	add    eax,0xc
c0015593:	83 ec 08             	sub    esp,0x8
c0015596:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001559a:	50                   	push   eax
c001559b:	e8 b0 b0 fe ff       	call   c0000650 <strcpy>
c00155a0:	83 c4 10             	add    esp,0x10
c00155a3:	83 ec 08             	sub    esp,0x8
c00155a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00155aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155ae:	e8 d9 fd ff ff       	call   c001538c <Process::addArgs(char**)>
c00155b3:	83 c4 10             	add    esp,0x10
c00155b6:	83 ec 08             	sub    esp,0x8
c00155b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155c1:	e8 3f ed ff ff       	call   c0014305 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00155c6:	83 c4 10             	add    esp,0x10
c00155c9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00155cd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00155d1:	83 f0 01             	xor    eax,0x1
c00155d4:	88 c2                	mov    dl,al
c00155d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155da:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00155e0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00155e5:	83 ec 04             	sub    esp,0x4
c00155e8:	50                   	push   eax
c00155e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155ed:	68 34 22 02 c0       	push   0xc0022234
c00155f2:	e8 13 53 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00155f7:	83 c4 10             	add    esp,0x10
c00155fa:	90                   	nop
c00155fb:	83 c4 14             	add    esp,0x14
c00155fe:	5b                   	pop    ebx
c00155ff:	5e                   	pop    esi
c0015600:	c3                   	ret    
c0015601:	90                   	nop
c0015602:	66 90                	xchg   ax,ax

c0015604 <Process::Process(bool, char const*, Process*, char**)>:
c0015604:	56                   	push   esi
c0015605:	53                   	push   ebx
c0015606:	83 ec 24             	sub    esp,0x24
c0015609:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001560d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015611:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015615:	05 0c 02 00 00       	add    eax,0x20c
c001561a:	bb 07 00 00 00       	mov    ebx,0x7
c001561f:	89 c6                	mov    esi,eax
c0015621:	8d 76 00             	lea    esi,[esi+0x0]
c0015624:	85 db                	test   ebx,ebx
c0015626:	78 14                	js     c001563c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015628:	83 ec 0c             	sub    esp,0xc
c001562b:	56                   	push   esi
c001562c:	e8 17 a4 00 00       	call   c001fa48 <ThreadControlBlock::ThreadControlBlock()>
c0015631:	83 c4 10             	add    esp,0x10
c0015634:	83 c6 5f             	add    esi,0x5f
c0015637:	83 eb 01             	sub    ebx,0x1
c001563a:	eb e8                	jmp    c0015624 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001563c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015640:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015647:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001564b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015652:	83 ec 0c             	sub    esp,0xc
c0015655:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015659:	e8 08 b9 ff ff       	call   c0010f66 <KeNewProcessEnv(Process*)>
c001565e:	83 c4 10             	add    esp,0x10
c0015661:	89 c2                	mov    edx,eax
c0015663:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015667:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001566d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015671:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001567a:	a1 e0 33 02 c0       	mov    eax,ds:0xc00233e0
c001567f:	8d 50 01             	lea    edx,[eax+0x1]
c0015682:	89 15 e0 33 02 c0    	mov    DWORD PTR ds:0xc00233e0,edx
c0015688:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001568c:	89 02                	mov    DWORD PTR [edx],eax
c001568e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015696:	83 ec 0c             	sub    esp,0xc
c0015699:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001569d:	e8 31 24 ff ff       	call   c0007ad3 <malloc>
c00156a2:	83 c4 10             	add    esp,0x10
c00156a5:	89 c3                	mov    ebx,eax
c00156a7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00156ac:	83 ec 08             	sub    esp,0x8
c00156af:	50                   	push   eax
c00156b0:	53                   	push   ebx
c00156b1:	e8 9c 49 ff ff       	call   c000a052 <VAS::VAS(bool)>
c00156b6:	83 c4 10             	add    esp,0x10
c00156b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156bd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00156c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156c7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00156d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156d5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00156d9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00156df:	e8 a6 be ff ff       	call   c001158a <KeInitSignals()>
c00156e4:	89 c2                	mov    edx,eax
c00156e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156ea:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00156f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156f4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156fa:	85 c0                	test   eax,eax
c00156fc:	74 42                	je     c0015740 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00156fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015702:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015708:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001570e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015712:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015718:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001571c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015722:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015728:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001572c:	05 0c 01 00 00       	add    eax,0x10c
c0015731:	83 ec 08             	sub    esp,0x8
c0015734:	52                   	push   edx
c0015735:	50                   	push   eax
c0015736:	e8 15 af fe ff       	call   c0000650 <strcpy>
c001573b:	83 c4 10             	add    esp,0x10
c001573e:	eb 64                	jmp    c00157a4 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015740:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015748:	83 ec 0c             	sub    esp,0xc
c001574b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001574f:	e8 7f 23 ff ff       	call   c0007ad3 <malloc>
c0015754:	83 c4 10             	add    esp,0x10
c0015757:	89 c3                	mov    ebx,eax
c0015759:	83 ec 08             	sub    esp,0x8
c001575c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015760:	53                   	push   ebx
c0015761:	e8 06 35 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015766:	83 c4 10             	add    esp,0x10
c0015769:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001576d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015773:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015777:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001577d:	83 ec 0c             	sub    esp,0xc
c0015780:	50                   	push   eax
c0015781:	e8 94 2d ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015786:	83 c4 10             	add    esp,0x10
c0015789:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001578d:	05 0c 01 00 00       	add    eax,0x10c
c0015792:	83 ec 08             	sub    esp,0x8
c0015795:	68 da 21 02 c0       	push   0xc00221da
c001579a:	50                   	push   eax
c001579b:	e8 b0 ae fe ff       	call   c0000650 <strcpy>
c00157a0:	83 c4 10             	add    esp,0x10
c00157a3:	90                   	nop
c00157a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157a8:	83 c0 0c             	add    eax,0xc
c00157ab:	83 ec 08             	sub    esp,0x8
c00157ae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00157b2:	50                   	push   eax
c00157b3:	e8 98 ae fe ff       	call   c0000650 <strcpy>
c00157b8:	83 c4 10             	add    esp,0x10
c00157bb:	83 ec 08             	sub    esp,0x8
c00157be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00157c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00157c6:	e8 c1 fb ff ff       	call   c001538c <Process::addArgs(char**)>
c00157cb:	83 c4 10             	add    esp,0x10
c00157ce:	90                   	nop
c00157cf:	83 c4 24             	add    esp,0x24
c00157d2:	5b                   	pop    ebx
c00157d3:	5e                   	pop    esi
c00157d4:	c3                   	ret    
c00157d5:	8d 76 00             	lea    esi,[esi+0x0]

c00157d8 <taskStartupFunction>:
c00157d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157dd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00157e0:	c3                   	ret    
c00157e1:	90                   	nop
c00157e2:	66 90                	xchg   ax,ax

c00157e4 <Semaphore::Semaphore(int)>:
c00157e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00157ec:	89 10                	mov    DWORD PTR [eax],edx
c00157ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00157f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015808:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001580f:	90                   	nop
c0015810:	c3                   	ret    
c0015811:	90                   	nop
c0015812:	66 90                	xchg   ax,ax

c0015814 <Mutex::Mutex()>:
c0015814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015818:	6a 01                	push   0x1
c001581a:	50                   	push   eax
c001581b:	e8 c4 ff ff ff       	call   c00157e4 <Semaphore::Semaphore(int)>
c0015820:	83 c4 08             	add    esp,0x8
c0015823:	90                   	nop
c0015824:	c3                   	ret    
c0015825:	90                   	nop
c0015826:	66 90                	xchg   ax,ax

c0015828 <Process::createThread(void (*)(void*), void*, int)>:
c0015828:	57                   	push   edi
c0015829:	31 c9                	xor    ecx,ecx
c001582b:	56                   	push   esi
c001582c:	53                   	push   ebx
c001582d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015831:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015838:	89 f2                	mov    edx,esi
c001583a:	66 90                	xchg   ax,ax
c001583c:	0f b7 c2             	movzx  eax,dx
c001583f:	80 e2 01             	and    dl,0x1
c0015842:	74 14                	je     c0015858 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015844:	d1 f8                	sar    eax,1
c0015846:	83 c1 01             	add    ecx,0x1
c0015849:	83 f9 10             	cmp    ecx,0x10
c001584c:	89 c2                	mov    edx,eax
c001584e:	75 ec                	jne    c001583c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015850:	31 db                	xor    ebx,ebx
c0015852:	89 d8                	mov    eax,ebx
c0015854:	5b                   	pop    ebx
c0015855:	5e                   	pop    esi
c0015856:	5f                   	pop    edi
c0015857:	c3                   	ret    
c0015858:	b8 01 00 00 00       	mov    eax,0x1
c001585d:	d3 e0                	shl    eax,cl
c001585f:	09 c6                	or     esi,eax
c0015861:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015868:	8d 04 49             	lea    eax,[ecx+ecx*2]
c001586b:	c1 e0 05             	shl    eax,0x5
c001586e:	29 c8                	sub    eax,ecx
c0015870:	01 d8                	add    eax,ebx
c0015872:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015879:	75 0d                	jne    c0015888 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001587b:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015885:	8d 76 00             	lea    esi,[esi+0x0]
c0015888:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001588e:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015891:	83 ec 0c             	sub    esp,0xc
c0015894:	c1 e6 05             	shl    esi,0x5
c0015897:	29 ce                	sub    esi,ecx
c0015899:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001589c:	8d 04 33             	lea    eax,[ebx+esi*1]
c001589f:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00158a5:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c00158ab:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00158b1:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c00158b8:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00158be:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00158c2:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00158c8:	89 ca                	mov    edx,ecx
c00158ca:	f7 da                	neg    edx
c00158cc:	c1 e2 15             	shl    edx,0x15
c00158cf:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00158d5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00158db:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00158df:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00158e9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00158ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00158f3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00158f9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015903:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001590d:	68 00 01 00 00       	push   0x100
c0015912:	e8 bc 21 ff ff       	call   c0007ad3 <malloc>
c0015917:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001591a:	58                   	pop    eax
c001591b:	5a                   	pop    edx
c001591c:	53                   	push   ebx
c001591d:	68 84 a4 02 c0       	push   0xc002a484
c0015922:	e8 b9 9e 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015927:	83 c4 10             	add    esp,0x10
c001592a:	89 d8                	mov    eax,ebx
c001592c:	5b                   	pop    ebx
c001592d:	5e                   	pop    esi
c001592e:	5f                   	pop    edi
c001592f:	c3                   	ret    

c0015930 <Process::createUserThread()>:
c0015930:	83 ec 0c             	sub    esp,0xc
c0015933:	68 80 00 00 00       	push   0x80
c0015938:	6a 00                	push   0x0
c001593a:	68 84 52 01 c0       	push   0xc0015284
c001593f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015943:	50                   	push   eax
c0015944:	e8 df fe ff ff       	call   c0015828 <Process::createThread(void (*)(void*), void*, int)>
c0015949:	83 c4 1c             	add    esp,0x1c
c001594c:	c3                   	ret    
c001594d:	8d 76 00             	lea    esi,[esi+0x0]

c0015950 <setupMultitasking(void (*)())>:
c0015950:	56                   	push   esi
c0015951:	53                   	push   ebx
c0015952:	83 ec 04             	sub    esp,0x4
c0015955:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015959:	eb 11                	jmp    c001596c <setupMultitasking(void (*)())+0x1c>
c001595b:	90                   	nop
c001595c:	83 ec 0c             	sub    esp,0xc
c001595f:	68 84 a4 02 c0       	push   0xc002a484
c0015964:	e8 bb 9d 00 00       	call   c001f724 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015969:	83 c4 10             	add    esp,0x10
c001596c:	83 ec 0c             	sub    esp,0xc
c001596f:	68 84 a4 02 c0       	push   0xc002a484
c0015974:	e8 87 9d 00 00       	call   c001f700 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015979:	83 c4 10             	add    esp,0x10
c001597c:	84 c0                	test   al,al
c001597e:	74 dc                	je     c001595c <setupMultitasking(void (*)())+0xc>
c0015980:	83 ec 0c             	sub    esp,0xc
c0015983:	68 24 07 00 00       	push   0x724
c0015988:	e8 46 21 ff ff       	call   c0007ad3 <malloc>
c001598d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015994:	6a 00                	push   0x0
c0015996:	68 de 21 02 c0       	push   0xc00221de
c001599b:	6a 01                	push   0x1
c001599d:	50                   	push   eax
c001599e:	89 c3                	mov    ebx,eax
c00159a0:	e8 5f fc ff ff       	call   c0015604 <Process::Process(bool, char const*, Process*, char**)>
c00159a5:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00159ab:	83 c4 14             	add    esp,0x14
c00159ae:	89 1d 90 a4 02 c0    	mov    DWORD PTR ds:0xc002a490,ebx
c00159b4:	50                   	push   eax
c00159b5:	e8 b5 2d ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c00159ba:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00159c1:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00159cb:	83 c8 01             	or     eax,0x1
c00159ce:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00159d5:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00159db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00159de:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00159e8:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00159ee:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00159f8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00159fe:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015a08:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015a12:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015a18:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015a1e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015a28:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015a32:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015a39:	e8 95 20 ff ff       	call   c0007ad3 <malloc>
c0015a3e:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015a44:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015a4a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015a50:	5a                   	pop    edx
c0015a51:	59                   	pop    ecx
c0015a52:	68 da 21 02 c0       	push   0xc00221da
c0015a57:	50                   	push   eax
c0015a58:	e8 f3 ab fe ff       	call   c0000650 <strcpy>
c0015a5d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015a64:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015a68:	83 c4 14             	add    esp,0x14
c0015a6b:	5b                   	pop    ebx
c0015a6c:	5e                   	pop    esi
c0015a6d:	e9 f7 a7 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015a72:	66 90                	xchg   ax,ax

c0015a74 <schedule()>:
c0015a74:	8b 15 64 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a464
c0015a7a:	85 d2                	test   edx,edx
c0015a7c:	74 0e                	je     c0015a8c <schedule()+0x18>
c0015a7e:	c7 05 60 a4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x1
c0015a88:	c3                   	ret    
c0015a89:	8d 76 00             	lea    esi,[esi+0x0]
c0015a8c:	53                   	push   ebx
c0015a8d:	83 ec 14             	sub    esp,0x14
c0015a90:	68 84 a4 02 c0       	push   0xc002a484
c0015a95:	e8 66 9c 00 00       	call   c001f700 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a9a:	83 c4 10             	add    esp,0x10
c0015a9d:	84 c0                	test   al,al
c0015a9f:	75 3f                	jne    c0015ae0 <schedule()+0x6c>
c0015aa1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aa6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015aa9:	83 fa 01             	cmp    edx,0x1
c0015aac:	74 3a                	je     c0015ae8 <schedule()+0x74>
c0015aae:	66 90                	xchg   ax,ax
c0015ab0:	83 ec 0c             	sub    esp,0xc
c0015ab3:	68 84 a4 02 c0       	push   0xc002a484
c0015ab8:	e8 5f 9c 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015abd:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0015ac4:	89 c3                	mov    ebx,eax
c0015ac6:	e8 59 9c 00 00       	call   c001f724 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015acb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015ad2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ad5:	e8 02 f8 ff ff       	call   c00152dc <switchToThread(ThreadControlBlock*)>
c0015ada:	83 c4 10             	add    esp,0x10
c0015add:	8d 76 00             	lea    esi,[esi+0x0]
c0015ae0:	83 c4 08             	add    esp,0x8
c0015ae3:	5b                   	pop    ebx
c0015ae4:	c3                   	ret    
c0015ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ae8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015aef:	83 ec 08             	sub    esp,0x8
c0015af2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015af7:	50                   	push   eax
c0015af8:	68 84 a4 02 c0       	push   0xc002a484
c0015afd:	e8 de 9c 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b02:	83 c4 10             	add    esp,0x10
c0015b05:	eb a9                	jmp    c0015ab0 <schedule()+0x3c>
c0015b07:	90                   	nop

c0015b08 <Semaphore::tryAcquire()>:
c0015b08:	53                   	push   ebx
c0015b09:	83 ec 08             	sub    esp,0x8
c0015b0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b10:	fa                   	cli    
c0015b11:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0015b17:	8d 42 01             	lea    eax,[edx+0x1]
c0015b1a:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015b1f:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015b24:	8d 58 01             	lea    ebx,[eax+0x1]
c0015b27:	89 1d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ebx
c0015b2d:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015b30:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015b32:	7c 2c                	jl     c0015b60 <Semaphore::tryAcquire()+0x58>
c0015b34:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015b39:	85 c0                	test   eax,eax
c0015b3b:	75 0b                	jne    c0015b48 <Semaphore::tryAcquire()+0x40>
c0015b3d:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015b42:	85 c0                	test   eax,eax
c0015b44:	75 5a                	jne    c0015ba0 <Semaphore::tryAcquire()+0x98>
c0015b46:	66 90                	xchg   ax,ax
c0015b48:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015b4e:	31 c0                	xor    eax,eax
c0015b50:	85 d2                	test   edx,edx
c0015b52:	75 04                	jne    c0015b58 <Semaphore::tryAcquire()+0x50>
c0015b54:	fb                   	sti    
c0015b55:	8d 76 00             	lea    esi,[esi+0x0]
c0015b58:	83 c4 08             	add    esp,0x8
c0015b5b:	5b                   	pop    ebx
c0015b5c:	c3                   	ret    
c0015b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b60:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015b65:	83 c3 01             	add    ebx,0x1
c0015b68:	85 c0                	test   eax,eax
c0015b6a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015b6d:	75 21                	jne    c0015b90 <Semaphore::tryAcquire()+0x88>
c0015b6f:	8b 0d 60 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a460
c0015b75:	85 c9                	test   ecx,ecx
c0015b77:	74 17                	je     c0015b90 <Semaphore::tryAcquire()+0x88>
c0015b79:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015b83:	e8 ec fe ff ff       	call   c0015a74 <schedule()>
c0015b88:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015b8d:	8d 50 ff             	lea    edx,[eax-0x1]
c0015b90:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015b96:	85 d2                	test   edx,edx
c0015b98:	b0 01                	mov    al,0x1
c0015b9a:	75 bc                	jne    c0015b58 <Semaphore::tryAcquire()+0x50>
c0015b9c:	eb b6                	jmp    c0015b54 <Semaphore::tryAcquire()+0x4c>
c0015b9e:	66 90                	xchg   ax,ax
c0015ba0:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015baa:	e8 c5 fe ff ff       	call   c0015a74 <schedule()>
c0015baf:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015bb4:	8d 50 ff             	lea    edx,[eax-0x1]
c0015bb7:	31 c0                	xor    eax,eax
c0015bb9:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015bbf:	85 d2                	test   edx,edx
c0015bc1:	75 95                	jne    c0015b58 <Semaphore::tryAcquire()+0x50>
c0015bc3:	eb 8f                	jmp    c0015b54 <Semaphore::tryAcquire()+0x4c>
c0015bc5:	90                   	nop
c0015bc6:	66 90                	xchg   ax,ax

c0015bc8 <Semaphore::assertLocked(char const*)>:
c0015bc8:	83 ec 0c             	sub    esp,0xc
c0015bcb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015bcf:	fa                   	cli    
c0015bd0:	8b 0d 68 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a468
c0015bd6:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015bdb:	83 c1 01             	add    ecx,0x1
c0015bde:	89 0d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ecx
c0015be4:	8d 48 01             	lea    ecx,[eax+0x1]
c0015be7:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015bed:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015bef:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015bf2:	7c 28                	jl     c0015c1c <Semaphore::assertLocked(char const*)+0x54>
c0015bf4:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015bf9:	85 c0                	test   eax,eax
c0015bfb:	75 0b                	jne    c0015c08 <Semaphore::assertLocked(char const*)+0x40>
c0015bfd:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015c02:	85 c0                	test   eax,eax
c0015c04:	75 32                	jne    c0015c38 <Semaphore::assertLocked(char const*)+0x70>
c0015c06:	66 90                	xchg   ax,ax
c0015c08:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c0d:	83 e8 01             	sub    eax,0x1
c0015c10:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c15:	75 01                	jne    c0015c18 <Semaphore::assertLocked(char const*)+0x50>
c0015c17:	fb                   	sti    
c0015c18:	83 c4 0c             	add    esp,0xc
c0015c1b:	c3                   	ret    
c0015c1c:	83 ec 0c             	sub    esp,0xc
c0015c1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015c23:	52                   	push   edx
c0015c24:	e8 48 b5 ff ff       	call   c0011171 <KePanic(char const*)>
c0015c29:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015c2e:	83 c4 10             	add    esp,0x10
c0015c31:	83 e8 01             	sub    eax,0x1
c0015c34:	eb be                	jmp    c0015bf4 <Semaphore::assertLocked(char const*)+0x2c>
c0015c36:	66 90                	xchg   ax,ax
c0015c38:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015c42:	e8 2d fe ff ff       	call   c0015a74 <schedule()>
c0015c47:	eb bf                	jmp    c0015c08 <Semaphore::assertLocked(char const*)+0x40>
c0015c49:	8d 76 00             	lea    esi,[esi+0x0]

c0015c4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015c4c:	83 ec 0c             	sub    esp,0xc
c0015c4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c58:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015c5b:	e8 14 fe ff ff       	call   c0015a74 <schedule()>
c0015c60:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c65:	83 e8 01             	sub    eax,0x1
c0015c68:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c6d:	75 01                	jne    c0015c70 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015c6f:	fb                   	sti    
c0015c70:	83 c4 0c             	add    esp,0xc
c0015c73:	c3                   	ret    

c0015c74 <blockTask(TaskState)>:
c0015c74:	83 ec 0c             	sub    esp,0xc
c0015c77:	fa                   	cli    
c0015c78:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c81:	83 c0 01             	add    eax,0x1
c0015c84:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c8e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015c91:	e8 de fd ff ff       	call   c0015a74 <schedule()>
c0015c96:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c9b:	83 e8 01             	sub    eax,0x1
c0015c9e:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015ca3:	75 03                	jne    c0015ca8 <blockTask(TaskState)+0x34>
c0015ca5:	fb                   	sti    
c0015ca6:	66 90                	xchg   ax,ax
c0015ca8:	83 c4 0c             	add    esp,0xc
c0015cab:	c3                   	ret    

c0015cac <waitTask(int, int*, int)>:
c0015cac:	83 ec 18             	sub    esp,0x18
c0015caf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015cb8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015cbb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015cbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cc4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015cc7:	6a 07                	push   0x7
c0015cc9:	e8 a6 ff ff ff       	call   c0015c74 <blockTask(TaskState)>
c0015cce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cd3:	83 c4 10             	add    esp,0x10
c0015cd6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015cd9:	85 d2                	test   edx,edx
c0015cdb:	74 0b                	je     c0015ce8 <waitTask(int, int*, int)+0x3c>
c0015cdd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015ce0:	89 02                	mov    DWORD PTR [edx],eax
c0015ce2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ce7:	90                   	nop
c0015ce8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015ceb:	83 c4 0c             	add    esp,0xc
c0015cee:	c3                   	ret    
c0015cef:	90                   	nop

c0015cf0 <milliTenthSleepUntil(unsigned int)>:
c0015cf0:	83 ec 0c             	sub    esp,0xc
c0015cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cf7:	39 05 4c 95 02 c0    	cmp    DWORD PTR ds:0xc002954c,eax
c0015cfd:	76 05                	jbe    c0015d04 <milliTenthSleepUntil(unsigned int)+0x14>
c0015cff:	90                   	nop
c0015d00:	83 c4 0c             	add    esp,0xc
c0015d03:	c3                   	ret    
c0015d04:	fa                   	cli    
c0015d05:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0015d0b:	83 ec 08             	sub    esp,0x8
c0015d0e:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c0015d14:	83 c2 01             	add    edx,0x1
c0015d17:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015d1d:	83 c1 01             	add    ecx,0x1
c0015d20:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015d26:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015d2c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015d2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d34:	50                   	push   eax
c0015d35:	68 78 a4 02 c0       	push   0xc002a478
c0015d3a:	e8 a1 9a 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d3f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015d46:	e8 29 ff ff ff       	call   c0015c74 <blockTask(TaskState)>
c0015d4b:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015d50:	83 c4 10             	add    esp,0x10
c0015d53:	83 e8 01             	sub    eax,0x1
c0015d56:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015d5b:	85 c0                	test   eax,eax
c0015d5d:	75 09                	jne    c0015d68 <milliTenthSleepUntil(unsigned int)+0x78>
c0015d5f:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015d64:	85 c0                	test   eax,eax
c0015d66:	75 14                	jne    c0015d7c <milliTenthSleepUntil(unsigned int)+0x8c>
c0015d68:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015d6d:	83 e8 01             	sub    eax,0x1
c0015d70:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015d75:	75 89                	jne    c0015d00 <milliTenthSleepUntil(unsigned int)+0x10>
c0015d77:	fb                   	sti    
c0015d78:	83 c4 0c             	add    esp,0xc
c0015d7b:	c3                   	ret    
c0015d7c:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015d86:	e8 e9 fc ff ff       	call   c0015a74 <schedule()>
c0015d8b:	eb db                	jmp    c0015d68 <milliTenthSleepUntil(unsigned int)+0x78>
c0015d8d:	8d 76 00             	lea    esi,[esi+0x0]

c0015d90 <milliTenthSleep(unsigned int)>:
c0015d90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d94:	a1 4c 95 02 c0       	mov    eax,ds:0xc002954c
c0015d99:	01 c2                	add    edx,eax
c0015d9b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015d9f:	e9 4c ff ff ff       	jmp    c0015cf0 <milliTenthSleepUntil(unsigned int)>

c0015da4 <sleep(unsigned int)>:
c0015da4:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015dac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015db0:	eb de                	jmp    c0015d90 <milliTenthSleep(unsigned int)>
c0015db2:	66 90                	xchg   ax,ax

c0015db4 <Semaphore::acquire()>:
c0015db4:	83 ec 0c             	sub    esp,0xc
c0015db7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015dbb:	fa                   	cli    
c0015dbc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015dc1:	83 c0 01             	add    eax,0x1
c0015dc4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015dc9:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015dce:	8d 48 01             	lea    ecx,[eax+0x1]
c0015dd1:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015dd7:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015dda:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015ddc:	7d 2e                	jge    c0015e0c <Semaphore::acquire()+0x58>
c0015dde:	83 c1 01             	add    ecx,0x1
c0015de1:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015de4:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015de9:	85 c0                	test   eax,eax
c0015deb:	75 0b                	jne    c0015df8 <Semaphore::acquire()+0x44>
c0015ded:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015df2:	85 c0                	test   eax,eax
c0015df4:	75 66                	jne    c0015e5c <Semaphore::acquire()+0xa8>
c0015df6:	66 90                	xchg   ax,ax
c0015df8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015dfd:	83 e8 01             	sub    eax,0x1
c0015e00:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015e05:	75 01                	jne    c0015e08 <Semaphore::acquire()+0x54>
c0015e07:	fb                   	sti    
c0015e08:	83 c4 0c             	add    esp,0xc
c0015e0b:	c3                   	ret    
c0015e0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e11:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015e18:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015e1b:	85 c9                	test   ecx,ecx
c0015e1d:	74 51                	je     c0015e70 <Semaphore::acquire()+0xbc>
c0015e1f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015e22:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e28:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015e2b:	90                   	nop
c0015e2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e31:	83 ec 0c             	sub    esp,0xc
c0015e34:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015e37:	68 60 22 02 c0       	push   0xc0022260
c0015e3c:	e8 c9 4a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015e41:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015e48:	e8 27 fe ff ff       	call   c0015c74 <blockTask(TaskState)>
c0015e4d:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015e52:	83 c4 10             	add    esp,0x10
c0015e55:	83 e8 01             	sub    eax,0x1
c0015e58:	eb 8a                	jmp    c0015de4 <Semaphore::acquire()+0x30>
c0015e5a:	66 90                	xchg   ax,ax
c0015e5c:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015e66:	e8 09 fc ff ff       	call   c0015a74 <schedule()>
c0015e6b:	eb 8b                	jmp    c0015df8 <Semaphore::acquire()+0x44>
c0015e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0015e70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e75:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015e78:	eb b2                	jmp    c0015e2c <Semaphore::acquire()+0x78>
c0015e7a:	66 90                	xchg   ax,ax

c0015e7c <taskReturned>:
c0015e7c:	83 ec 18             	sub    esp,0x18
c0015e7f:	68 80 22 02 c0       	push   0xc0022280
c0015e84:	e8 e8 b2 ff ff       	call   c0011171 <KePanic(char const*)>
c0015e89:	83 c4 10             	add    esp,0x10
c0015e8c:	83 ec 0c             	sub    esp,0xc
c0015e8f:	6a 02                	push   0x2
c0015e91:	e8 de fd ff ff       	call   c0015c74 <blockTask(TaskState)>
c0015e96:	fa                   	cli    
c0015e97:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015e9c:	83 c0 01             	add    eax,0x1
c0015e9f:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015ea4:	e8 cb fb ff ff       	call   c0015a74 <schedule()>
c0015ea9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015eae:	83 c4 10             	add    esp,0x10
c0015eb1:	83 e8 01             	sub    eax,0x1
c0015eb4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015eb9:	85 c0                	test   eax,eax
c0015ebb:	75 cf                	jne    c0015e8c <taskReturned+0x10>
c0015ebd:	fb                   	sti    
c0015ebe:	eb cc                	jmp    c0015e8c <taskReturned+0x10>

c0015ec0 <Thr::processFromPID(int)>:
c0015ec0:	57                   	push   edi
c0015ec1:	56                   	push   esi
c0015ec2:	53                   	push   ebx
c0015ec3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ec7:	fa                   	cli    
c0015ec8:	8b 0d 68 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a468
c0015ece:	83 ec 0c             	sub    esp,0xc
c0015ed1:	68 84 a4 02 c0       	push   0xc002a484
c0015ed6:	83 c1 01             	add    ecx,0x1
c0015ed9:	89 0d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ecx
c0015edf:	e8 38 98 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ee4:	83 c4 10             	add    esp,0x10
c0015ee7:	89 c7                	mov    edi,eax
c0015ee9:	eb 15                	jmp    c0015f00 <Thr::processFromPID(int)+0x40>
c0015eeb:	90                   	nop
c0015eec:	83 ec 0c             	sub    esp,0xc
c0015eef:	68 84 a4 02 c0       	push   0xc002a484
c0015ef4:	e8 23 98 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ef9:	83 c4 10             	add    esp,0x10
c0015efc:	39 f8                	cmp    eax,edi
c0015efe:	74 50                	je     c0015f50 <Thr::processFromPID(int)+0x90>
c0015f00:	83 ec 0c             	sub    esp,0xc
c0015f03:	68 84 a4 02 c0       	push   0xc002a484
c0015f08:	e8 0f 98 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f0d:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0015f14:	89 c3                	mov    ebx,eax
c0015f16:	e8 09 98 00 00       	call   c001f724 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f1b:	58                   	pop    eax
c0015f1c:	5a                   	pop    edx
c0015f1d:	53                   	push   ebx
c0015f1e:	68 84 a4 02 c0       	push   0xc002a484
c0015f23:	e8 b8 98 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f28:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f2b:	83 c4 10             	add    esp,0x10
c0015f2e:	39 30                	cmp    DWORD PTR [eax],esi
c0015f30:	75 ba                	jne    c0015eec <Thr::processFromPID(int)+0x2c>
c0015f32:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f37:	83 e8 01             	sub    eax,0x1
c0015f3a:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015f3f:	74 0b                	je     c0015f4c <Thr::processFromPID(int)+0x8c>
c0015f41:	8d 76 00             	lea    esi,[esi+0x0]
c0015f44:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f47:	90                   	nop
c0015f48:	5b                   	pop    ebx
c0015f49:	5e                   	pop    esi
c0015f4a:	5f                   	pop    edi
c0015f4b:	c3                   	ret    
c0015f4c:	fb                   	sti    
c0015f4d:	eb f5                	jmp    c0015f44 <Thr::processFromPID(int)+0x84>
c0015f4f:	90                   	nop
c0015f50:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f55:	8d 50 ff             	lea    edx,[eax-0x1]
c0015f58:	31 c0                	xor    eax,eax
c0015f5a:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015f60:	85 d2                	test   edx,edx
c0015f62:	75 e4                	jne    c0015f48 <Thr::processFromPID(int)+0x88>
c0015f64:	fb                   	sti    
c0015f65:	5b                   	pop    ebx
c0015f66:	5e                   	pop    esi
c0015f67:	5f                   	pop    edi
c0015f68:	c3                   	ret    
c0015f69:	8d 76 00             	lea    esi,[esi+0x0]

c0015f6c <unblockTask(ThreadControlBlock*)>:
c0015f6c:	53                   	push   ebx
c0015f6d:	83 ec 08             	sub    esp,0x8
c0015f70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f74:	fa                   	cli    
c0015f75:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f7a:	83 c0 01             	add    eax,0x1
c0015f7d:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015f82:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015f85:	85 c0                	test   eax,eax
c0015f87:	74 67                	je     c0015ff0 <unblockTask(ThreadControlBlock*)+0x84>
c0015f89:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015f8c:	83 f8 01             	cmp    eax,0x1
c0015f8f:	74 37                	je     c0015fc8 <unblockTask(ThreadControlBlock*)+0x5c>
c0015f91:	83 ec 0c             	sub    esp,0xc
c0015f94:	68 84 a4 02 c0       	push   0xc002a484
c0015f99:	e8 7e 97 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f9e:	83 c4 10             	add    esp,0x10
c0015fa1:	85 c0                	test   eax,eax
c0015fa3:	75 1b                	jne    c0015fc0 <unblockTask(ThreadControlBlock*)+0x54>
c0015fa5:	eb 5d                	jmp    c0016004 <unblockTask(ThreadControlBlock*)+0x98>
c0015fa7:	90                   	nop
c0015fa8:	83 ec 08             	sub    esp,0x8
c0015fab:	50                   	push   eax
c0015fac:	68 84 a4 02 c0       	push   0xc002a484
c0015fb1:	e8 86 9a 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015fb6:	83 c4 10             	add    esp,0x10
c0015fb9:	85 c0                	test   eax,eax
c0015fbb:	74 47                	je     c0016004 <unblockTask(ThreadControlBlock*)+0x98>
c0015fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0015fc0:	39 c3                	cmp    ebx,eax
c0015fc2:	75 e4                	jne    c0015fa8 <unblockTask(ThreadControlBlock*)+0x3c>
c0015fc4:	eb 12                	jmp    c0015fd8 <unblockTask(ThreadControlBlock*)+0x6c>
c0015fc6:	66 90                	xchg   ax,ax
c0015fc8:	83 ec 0c             	sub    esp,0xc
c0015fcb:	68 fc 21 02 c0       	push   0xc00221fc
c0015fd0:	e8 35 49 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015fd5:	83 c4 10             	add    esp,0x10
c0015fd8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015fdd:	83 e8 01             	sub    eax,0x1
c0015fe0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015fe5:	75 01                	jne    c0015fe8 <unblockTask(ThreadControlBlock*)+0x7c>
c0015fe7:	fb                   	sti    
c0015fe8:	83 c4 08             	add    esp,0x8
c0015feb:	5b                   	pop    ebx
c0015fec:	c3                   	ret    
c0015fed:	8d 76 00             	lea    esi,[esi+0x0]
c0015ff0:	83 ec 0c             	sub    esp,0xc
c0015ff3:	68 e5 21 02 c0       	push   0xc00221e5
c0015ff8:	e8 0d 49 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015ffd:	83 c4 10             	add    esp,0x10
c0016000:	eb d6                	jmp    c0015fd8 <unblockTask(ThreadControlBlock*)+0x6c>
c0016002:	66 90                	xchg   ax,ax
c0016004:	83 ec 08             	sub    esp,0x8
c0016007:	53                   	push   ebx
c0016008:	68 84 a4 02 c0       	push   0xc002a484
c001600d:	e8 ce 97 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016012:	83 c4 10             	add    esp,0x10
c0016015:	eb c1                	jmp    c0015fd8 <unblockTask(ThreadControlBlock*)+0x6c>
c0016017:	90                   	nop

c0016018 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016018:	55                   	push   ebp
c0016019:	57                   	push   edi
c001601a:	56                   	push   esi
c001601b:	53                   	push   ebx
c001601c:	83 ec 1c             	sub    esp,0x1c
c001601f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016023:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016026:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c001602c:	85 ed                	test   ebp,ebp
c001602e:	7e 28                	jle    c0016058 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016030:	31 f6                	xor    esi,esi
c0016032:	66 90                	xchg   ax,ax
c0016034:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001603b:	83 ec 0c             	sub    esp,0xc
c001603e:	83 c6 01             	add    esi,0x1
c0016041:	57                   	push   edi
c0016042:	e8 9c 1a ff ff       	call   c0007ae3 <free>
c0016047:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001604a:	83 c4 10             	add    esp,0x10
c001604d:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016053:	7f df                	jg     c0016034 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016055:	8d 76 00             	lea    esi,[esi+0x0]
c0016058:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016062:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016067:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001606a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001606d:	d3 c0                	rol    eax,cl
c001606f:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016076:	21 c8                	and    eax,ecx
c0016078:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001607f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016082:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001608a:	89 f7                	mov    edi,esi
c001608c:	0f 85 72 01 00 00    	jne    c0016204 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016092:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016098:	85 ed                	test   ebp,ebp
c001609a:	74 1c                	je     c00160b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c001609c:	83 ec 0c             	sub    esp,0xc
c001609f:	55                   	push   ebp
c00160a0:	e8 dd ad ff ff       	call   c0010e82 <EnvVarContainer::~EnvVarContainer()>
c00160a5:	59                   	pop    ecx
c00160a6:	5e                   	pop    esi
c00160a7:	6a 0c                	push   0xc
c00160a9:	55                   	push   ebp
c00160aa:	e8 5d 47 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00160af:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00160b2:	83 c4 10             	add    esp,0x10
c00160b5:	89 f7                	mov    edi,esi
c00160b7:	90                   	nop
c00160b8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00160be:	85 c0                	test   eax,eax
c00160c0:	0f 84 b2 00 00 00    	je     c0016178 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00160c6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00160c9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00160cd:	31 c9                	xor    ecx,ecx
c00160cf:	eb 17                	jmp    c00160e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00160d1:	8d 76 00             	lea    esi,[esi+0x0]
c00160d4:	83 c1 01             	add    ecx,0x1
c00160d7:	83 f9 10             	cmp    ecx,0x10
c00160da:	0f 84 98 00 00 00    	je     c0016178 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00160e0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00160e6:	66 90                	xchg   ax,ax
c00160e8:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00160ef:	d3 fa                	sar    edx,cl
c00160f1:	80 e2 01             	and    dl,0x1
c00160f4:	74 de                	je     c00160d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00160f6:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00160f9:	c1 e2 05             	shl    edx,0x5
c00160fc:	29 ca                	sub    edx,ecx
c00160fe:	01 d0                	add    eax,edx
c0016100:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016106:	83 fd 07             	cmp    ebp,0x7
c0016109:	75 c9                	jne    c00160d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001610b:	05 40 02 00 00       	add    eax,0x240
c0016110:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016113:	83 fd ff             	cmp    ebp,0xffffffff
c0016116:	0f 8c f0 00 00 00    	jl     c001620c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001611c:	0f 84 ae 01 00 00    	je     c00162d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016122:	85 ed                	test   ebp,ebp
c0016124:	0f 84 92 01 00 00    	je     c00162bc <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c001612a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001612c:	75 a6                	jne    c00160d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001612e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016132:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016138:	01 d0                	add    eax,edx
c001613a:	66 90                	xchg   ax,ax
c001613c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016140:	83 ec 0c             	sub    esp,0xc
c0016143:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016149:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001614c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016152:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016159:	50                   	push   eax
c001615a:	e8 0d fe ff ff       	call   c0015f6c <unblockTask(ThreadControlBlock*)>
c001615f:	83 c4 10             	add    esp,0x10
c0016162:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016165:	89 f7                	mov    edi,esi
c0016167:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001616b:	83 c1 01             	add    ecx,0x1
c001616e:	83 f9 10             	cmp    ecx,0x10
c0016171:	0f 85 69 ff ff ff    	jne    c00160e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016177:	90                   	nop
c0016178:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001617e:	85 c0                	test   eax,eax
c0016180:	74 62                	je     c00161e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016182:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016188:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001618e:	74 54                	je     c00161e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016190:	83 ec 0c             	sub    esp,0xc
c0016193:	68 84 a4 02 c0       	push   0xc002a484
c0016198:	e8 7f 95 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001619d:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c00161a4:	89 c7                	mov    edi,eax
c00161a6:	e8 55 95 00 00       	call   c001f700 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00161ab:	83 c4 10             	add    esp,0x10
c00161ae:	84 c0                	test   al,al
c00161b0:	0f 84 ce 00 00 00    	je     c0016284 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00161b6:	66 90                	xchg   ax,ax
c00161b8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161bb:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00161c1:	85 d2                	test   edx,edx
c00161c3:	74 0f                	je     c00161d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00161c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00161c7:	83 ec 0c             	sub    esp,0xc
c00161ca:	52                   	push   edx
c00161cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161ce:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161d1:	83 c4 10             	add    esp,0x10
c00161d4:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00161de:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00161e1:	8d 76 00             	lea    esi,[esi+0x0]
c00161e4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00161ea:	85 db                	test   ebx,ebx
c00161ec:	74 16                	je     c0016204 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00161ee:	83 ec 0c             	sub    esp,0xc
c00161f1:	53                   	push   ebx
c00161f2:	e8 99 39 ff ff       	call   c0009b90 <VAS::~VAS()>
c00161f7:	58                   	pop    eax
c00161f8:	5a                   	pop    edx
c00161f9:	6a 14                	push   0x14
c00161fb:	53                   	push   ebx
c00161fc:	e8 0b 46 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0016201:	83 c4 10             	add    esp,0x10
c0016204:	83 c4 1c             	add    esp,0x1c
c0016207:	5b                   	pop    ebx
c0016208:	5e                   	pop    esi
c0016209:	5f                   	pop    edi
c001620a:	5d                   	pop    ebp
c001620b:	c3                   	ret    
c001620c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016210:	83 ec 0c             	sub    esp,0xc
c0016213:	68 b4 22 02 c0       	push   0xc00222b4
c0016218:	e8 54 af ff ff       	call   c0011171 <KePanic(char const*)>
c001621d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016220:	83 c4 10             	add    esp,0x10
c0016223:	89 f7                	mov    edi,esi
c0016225:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016229:	e9 a6 fe ff ff       	jmp    c00160d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001622e:	66 90                	xchg   ax,ax
c0016230:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016236:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c001623c:	75 1e                	jne    c001625c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001623e:	83 ec 0c             	sub    esp,0xc
c0016241:	68 1c 23 02 c0       	push   0xc002231c
c0016246:	e8 bf 46 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001624b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016252:	e8 1d fa ff ff       	call   c0015c74 <blockTask(TaskState)>
c0016257:	83 c4 10             	add    esp,0x10
c001625a:	66 90                	xchg   ax,ax
c001625c:	83 ec 08             	sub    esp,0x8
c001625f:	56                   	push   esi
c0016260:	68 84 a4 02 c0       	push   0xc002a484
c0016265:	e8 76 95 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001626a:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0016271:	e8 a6 94 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016276:	83 c4 10             	add    esp,0x10
c0016279:	39 f8                	cmp    eax,edi
c001627b:	0f 84 37 ff ff ff    	je     c00161b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016281:	8d 76 00             	lea    esi,[esi+0x0]
c0016284:	83 ec 0c             	sub    esp,0xc
c0016287:	68 84 a4 02 c0       	push   0xc002a484
c001628c:	e8 8b 94 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016291:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0016298:	89 c6                	mov    esi,eax
c001629a:	e8 85 94 00 00       	call   c001f724 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001629f:	83 c4 10             	add    esp,0x10
c00162a2:	39 f3                	cmp    ebx,esi
c00162a4:	74 b6                	je     c001625c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00162a6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00162a9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162ac:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00162b2:	75 a8                	jne    c001625c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00162b4:	e9 77 ff ff ff       	jmp    c0016230 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00162b9:	8d 76 00             	lea    esi,[esi+0x0]
c00162bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00162c0:	83 ec 0c             	sub    esp,0xc
c00162c3:	68 e8 22 02 c0       	push   0xc00222e8
c00162c8:	e9 4b ff ff ff       	jmp    c0016218 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00162cd:	8d 76 00             	lea    esi,[esi+0x0]
c00162d0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00162d4:	8b 36                	mov    esi,DWORD PTR [esi]
c00162d6:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00162d9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162dc:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00162e2:	01 d7                	add    edi,edx
c00162e4:	89 f8                	mov    eax,edi
c00162e6:	e9 51 fe ff ff       	jmp    c001613c <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00162eb:	90                   	nop

c00162ec <cleanerTaskFunction(void*)>:
c00162ec:	53                   	push   ebx
c00162ed:	83 ec 08             	sub    esp,0x8
c00162f0:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00162f5:	83 e8 01             	sub    eax,0x1
c00162f8:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00162fd:	75 01                	jne    c0016300 <cleanerTaskFunction(void*)+0x14>
c00162ff:	fb                   	sti    
c0016300:	fa                   	cli    
c0016301:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016306:	80 3d 4c a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a44c,0x0
c001630d:	8d 50 01             	lea    edx,[eax+0x1]
c0016310:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0016316:	0f 84 c4 00 00 00    	je     c00163e0 <cleanerTaskFunction(void*)+0xf4>
c001631c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016321:	85 c0                	test   eax,eax
c0016323:	75 03                	jne    c0016328 <cleanerTaskFunction(void*)+0x3c>
c0016325:	fb                   	sti    
c0016326:	66 90                	xchg   ax,ax
c0016328:	c6 05 4c a4 02 c0 00 	mov    BYTE PTR ds:0xc002a44c,0x0
c001632f:	fa                   	cli    
c0016330:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0016336:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c001633c:	83 c2 01             	add    edx,0x1
c001633f:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0016345:	83 c1 01             	add    ecx,0x1
c0016348:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c001634e:	fa                   	cli    
c001634f:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c0016355:	83 c3 01             	add    ebx,0x1
c0016358:	89 1d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ebx
c001635e:	eb 28                	jmp    c0016388 <cleanerTaskFunction(void*)+0x9c>
c0016360:	83 ec 0c             	sub    esp,0xc
c0016363:	68 6c a4 02 c0       	push   0xc002a46c
c0016368:	e8 af 93 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001636d:	c7 04 24 6c a4 02 c0 	mov    DWORD PTR [esp],0xc002a46c
c0016374:	89 c3                	mov    ebx,eax
c0016376:	e8 a9 93 00 00       	call   c001f724 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001637b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001637e:	e8 95 fc ff ff       	call   c0016018 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016383:	83 c4 10             	add    esp,0x10
c0016386:	66 90                	xchg   ax,ax
c0016388:	83 ec 0c             	sub    esp,0xc
c001638b:	68 6c a4 02 c0       	push   0xc002a46c
c0016390:	e8 6b 93 00 00       	call   c001f700 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016395:	83 c4 10             	add    esp,0x10
c0016398:	84 c0                	test   al,al
c001639a:	74 c4                	je     c0016360 <cleanerTaskFunction(void*)+0x74>
c001639c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00163a1:	83 e8 01             	sub    eax,0x1
c00163a4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00163a9:	75 01                	jne    c00163ac <cleanerTaskFunction(void*)+0xc0>
c00163ab:	fb                   	sti    
c00163ac:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c00163b1:	83 e8 01             	sub    eax,0x1
c00163b4:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c00163b9:	0f 85 31 ff ff ff    	jne    c00162f0 <cleanerTaskFunction(void*)+0x4>
c00163bf:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c00163c4:	85 c0                	test   eax,eax
c00163c6:	0f 84 24 ff ff ff    	je     c00162f0 <cleanerTaskFunction(void*)+0x4>
c00163cc:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c00163d6:	e8 99 f6 ff ff       	call   c0015a74 <schedule()>
c00163db:	e9 10 ff ff ff       	jmp    c00162f0 <cleanerTaskFunction(void*)+0x4>
c00163e0:	83 ec 0c             	sub    esp,0xc
c00163e3:	6a 02                	push   0x2
c00163e5:	e8 62 f8 ff ff       	call   c0015c4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00163ea:	83 c4 10             	add    esp,0x10
c00163ed:	e9 36 ff ff ff       	jmp    c0016328 <cleanerTaskFunction(void*)+0x3c>
c00163f2:	66 90                	xchg   ax,ax

c00163f4 <terminateTask(int)>:
c00163f4:	83 ec 14             	sub    esp,0x14
c00163f7:	fa                   	cli    
c00163f8:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c00163fe:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c0016404:	83 c2 01             	add    edx,0x1
c0016407:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c001640d:	83 c1 01             	add    ecx,0x1
c0016410:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0016416:	fa                   	cli    
c0016417:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001641c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016420:	83 c0 01             	add    eax,0x1
c0016423:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016428:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001642d:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016430:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016435:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016438:	50                   	push   eax
c0016439:	68 6c a4 02 c0       	push   0xc002a46c
c001643e:	e8 9d 93 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016443:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016448:	83 c4 10             	add    esp,0x10
c001644b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016452:	a1 48 a4 02 c0       	mov    eax,ds:0xc002a448
c0016457:	85 c0                	test   eax,eax
c0016459:	74 65                	je     c00164c0 <terminateTask(int)+0xcc>
c001645b:	c6 05 4c a4 02 c0 01 	mov    BYTE PTR ds:0xc002a44c,0x1
c0016462:	83 ec 0c             	sub    esp,0xc
c0016465:	50                   	push   eax
c0016466:	e8 01 fb ff ff       	call   c0015f6c <unblockTask(ThreadControlBlock*)>
c001646b:	83 c4 10             	add    esp,0x10
c001646e:	66 90                	xchg   ax,ax
c0016470:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016475:	83 e8 01             	sub    eax,0x1
c0016478:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001647d:	75 01                	jne    c0016480 <terminateTask(int)+0x8c>
c001647f:	fb                   	sti    
c0016480:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0016485:	83 e8 01             	sub    eax,0x1
c0016488:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c001648d:	75 09                	jne    c0016498 <terminateTask(int)+0xa4>
c001648f:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c0016496:	75 3c                	jne    c00164d4 <terminateTask(int)+0xe0>
c0016498:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001649d:	83 e8 01             	sub    eax,0x1
c00164a0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00164a5:	75 01                	jne    c00164a8 <terminateTask(int)+0xb4>
c00164a7:	fb                   	sti    
c00164a8:	fa                   	cli    
c00164a9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00164ae:	83 c0 01             	add    eax,0x1
c00164b1:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00164b6:	66 90                	xchg   ax,ax
c00164b8:	e8 b7 f5 ff ff       	call   c0015a74 <schedule()>
c00164bd:	eb d9                	jmp    c0016498 <terminateTask(int)+0xa4>
c00164bf:	90                   	nop
c00164c0:	83 ec 0c             	sub    esp,0xc
c00164c3:	68 13 22 02 c0       	push   0xc0022213
c00164c8:	e8 3d 44 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00164cd:	83 c4 10             	add    esp,0x10
c00164d0:	eb 9e                	jmp    c0016470 <terminateTask(int)+0x7c>
c00164d2:	66 90                	xchg   ax,ax
c00164d4:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c00164de:	eb d8                	jmp    c00164b8 <terminateTask(int)+0xc4>

c00164e0 <Thr::terminateFromIRQ(int)>:
c00164e0:	83 ec 18             	sub    esp,0x18
c00164e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164e7:	50                   	push   eax
c00164e8:	e8 07 ff ff ff       	call   c00163f4 <terminateTask(int)>
c00164ed:	90                   	nop
c00164ee:	66 90                	xchg   ax,ax

c00164f0 <Semaphore::release()>:
c00164f0:	83 ec 0c             	sub    esp,0xc
c00164f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164f7:	fa                   	cli    
c00164f8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00164fd:	83 c0 01             	add    eax,0x1
c0016500:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016505:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c001650a:	8d 48 01             	lea    ecx,[eax+0x1]
c001650d:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0016513:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016516:	85 c9                	test   ecx,ecx
c0016518:	74 42                	je     c001655c <Semaphore::release()+0x6c>
c001651a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001651d:	83 ec 0c             	sub    esp,0xc
c0016520:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016523:	51                   	push   ecx
c0016524:	e8 43 fa ff ff       	call   c0015f6c <unblockTask(ThreadControlBlock*)>
c0016529:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c001652e:	83 c4 10             	add    esp,0x10
c0016531:	83 e8 01             	sub    eax,0x1
c0016534:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0016539:	85 c0                	test   eax,eax
c001653b:	75 0b                	jne    c0016548 <Semaphore::release()+0x58>
c001653d:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0016542:	85 c0                	test   eax,eax
c0016544:	75 22                	jne    c0016568 <Semaphore::release()+0x78>
c0016546:	66 90                	xchg   ax,ax
c0016548:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001654d:	83 e8 01             	sub    eax,0x1
c0016550:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016555:	75 01                	jne    c0016558 <Semaphore::release()+0x68>
c0016557:	fb                   	sti    
c0016558:	83 c4 0c             	add    esp,0xc
c001655b:	c3                   	ret    
c001655c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001655f:	83 e9 01             	sub    ecx,0x1
c0016562:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016565:	eb cd                	jmp    c0016534 <Semaphore::release()+0x44>
c0016567:	90                   	nop
c0016568:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0016572:	e8 fd f4 ff ff       	call   c0015a74 <schedule()>
c0016577:	eb cf                	jmp    c0016548 <Semaphore::release()+0x58>
c0016579:	8d 76 00             	lea    esi,[esi+0x0]

c001657c <__static_initialization_and_destruction_0(int, int)>:
c001657c:	83 ec 0c             	sub    esp,0xc
c001657f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016584:	0f 85 8e 00 00 00    	jne    c0016618 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001658a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016592:	0f 85 80 00 00 00    	jne    c0016618 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016598:	83 ec 0c             	sub    esp,0xc
c001659b:	68 84 a4 02 c0       	push   0xc002a484
c00165a0:	e8 ef 94 00 00       	call   c001fa94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00165a5:	83 c4 10             	add    esp,0x10
c00165a8:	83 ec 04             	sub    esp,0x4
c00165ab:	68 ec 2e 02 c0       	push   0xc0022eec
c00165b0:	68 84 a4 02 c0       	push   0xc002a484
c00165b5:	68 44 fa 01 c0       	push   0xc001fa44
c00165ba:	e8 fd 41 ff ff       	call   c000a7bc <__cxa_atexit>
c00165bf:	83 c4 10             	add    esp,0x10
c00165c2:	83 ec 0c             	sub    esp,0xc
c00165c5:	68 78 a4 02 c0       	push   0xc002a478
c00165ca:	e8 c5 94 00 00       	call   c001fa94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00165cf:	83 c4 10             	add    esp,0x10
c00165d2:	83 ec 04             	sub    esp,0x4
c00165d5:	68 ec 2e 02 c0       	push   0xc0022eec
c00165da:	68 78 a4 02 c0       	push   0xc002a478
c00165df:	68 44 fa 01 c0       	push   0xc001fa44
c00165e4:	e8 d3 41 ff ff       	call   c000a7bc <__cxa_atexit>
c00165e9:	83 c4 10             	add    esp,0x10
c00165ec:	83 ec 0c             	sub    esp,0xc
c00165ef:	68 6c a4 02 c0       	push   0xc002a46c
c00165f4:	e8 9b 94 00 00       	call   c001fa94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00165f9:	83 c4 10             	add    esp,0x10
c00165fc:	83 ec 04             	sub    esp,0x4
c00165ff:	68 ec 2e 02 c0       	push   0xc0022eec
c0016604:	68 6c a4 02 c0       	push   0xc002a46c
c0016609:	68 44 fa 01 c0       	push   0xc001fa44
c001660e:	e8 a9 41 ff ff       	call   c000a7bc <__cxa_atexit>
c0016613:	83 c4 10             	add    esp,0x10
c0016616:	66 90                	xchg   ax,ax
c0016618:	90                   	nop
c0016619:	83 c4 0c             	add    esp,0xc
c001661c:	c3                   	ret    
c001661d:	8d 76 00             	lea    esi,[esi+0x0]

c0016620 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016620:	83 ec 0c             	sub    esp,0xc
c0016623:	83 ec 08             	sub    esp,0x8
c0016626:	68 ff ff 00 00       	push   0xffff
c001662b:	6a 01                	push   0x1
c001662d:	e8 4a ff ff ff       	call   c001657c <__static_initialization_and_destruction_0(int, int)>
c0016632:	83 c4 10             	add    esp,0x10
c0016635:	83 c4 0c             	add    esp,0xc
c0016638:	c3                   	ret    

c0016639 <Vm::inbv(unsigned short)>:
c0016639:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001663d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016642:	75 06                	jne    c001664a <Vm::inbv(unsigned short)+0x11>
c0016644:	a0 cc a4 02 c0       	mov    al,ds:0xc002a4cc
c0016649:	c3                   	ret    
c001664a:	ec                   	in     al,dx
c001664b:	c3                   	ret    

c001664c <Vm::outbv(unsigned short, unsigned char)>:
c001664c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016650:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016654:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016659:	75 25                	jne    c0016680 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001665b:	8b 0d cc a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a4cc
c0016661:	88 81 e0 a4 02 c0    	mov    BYTE PTR [ecx-0x3ffd5b20],al
c0016667:	8d 51 01             	lea    edx,[ecx+0x1]
c001666a:	89 15 cc a4 02 c0    	mov    DWORD PTR ds:0xc002a4cc,edx
c0016670:	83 fa 20             	cmp    edx,0x20
c0016673:	75 0c                	jne    c0016681 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016675:	c7 05 cc a4 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x1f
c001667f:	c3                   	ret    
c0016680:	ee                   	out    dx,al
c0016681:	c3                   	ret    

c0016682 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016682:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016687:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001668c:	c1 e0 04             	shl    eax,0x4
c001668f:	01 d0                	add    eax,edx
c0016691:	c3                   	ret    

c0016692 <Vm::getSegment(unsigned int)>:
c0016692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016696:	c1 e8 10             	shr    eax,0x10
c0016699:	c3                   	ret    

c001669a <Vm::getOffset(unsigned int)>:
c001669a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001669e:	c3                   	ret    

c001669f <Vm::mainloop2()>:
c001669f:	83 ec 18             	sub    esp,0x18
c00166a2:	fa                   	cli    
c00166a3:	6a 02                	push   0x2
c00166a5:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00166ab:	c6 05 c5 a4 02 c0 01 	mov    BYTE PTR ds:0xc002a4c5,0x1
c00166b2:	e8 95 f5 ff ff       	call   c0015c4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00166b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166bc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00166c0:	52                   	push   edx
c00166c1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00166c5:	52                   	push   edx
c00166c6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00166ca:	52                   	push   edx
c00166cb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00166cf:	50                   	push   eax
c00166d0:	e8 3a 9b fe ff       	call   c000020f <goToVM86>
c00166d5:	83 c4 2c             	add    esp,0x2c
c00166d8:	c3                   	ret    

c00166d9 <Vm::mainVm8086Loop(void*)>:
c00166d9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00166de:	48                   	dec    eax
c00166df:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00166e4:	75 01                	jne    c00166e7 <Vm::mainVm8086Loop(void*)+0xe>
c00166e6:	fb                   	sti    
c00166e7:	eb b6                	jmp    c001669f <Vm::mainloop2()>

c00166e9 <Vm::mainloop3(unsigned long)>:
c00166e9:	83 ec 18             	sub    esp,0x18
c00166ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166f0:	fa                   	cli    
c00166f1:	6a 02                	push   0x2
c00166f3:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00166f9:	c6 05 c4 a4 02 c0 01 	mov    BYTE PTR ds:0xc002a4c4,0x1
c0016700:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c0016705:	e8 42 f5 ff ff       	call   c0015c4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001670a:	83 c4 1c             	add    esp,0x1c
c001670d:	eb 90                	jmp    c001669f <Vm::mainloop2()>

c001670f <Vm::initialise8086()>:
c001670f:	83 ec 0c             	sub    esp,0xc
c0016712:	68 80 00 00 00       	push   0x80
c0016717:	6a 00                	push   0x0
c0016719:	68 d9 66 01 c0       	push   0xc00166d9
c001671e:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0016724:	e8 ff f0 ff ff       	call   c0015828 <Process::createThread(void (*)(void*), void*, int)>
c0016729:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016730:	68 00 01 00 00       	push   0x100
c0016735:	6a 00                	push   0x0
c0016737:	6a 00                	push   0x0
c0016739:	a3 c8 a4 02 c0       	mov    ds:0xc002a4c8,eax
c001673e:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0016743:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016749:	e8 ba 37 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001674e:	83 c4 2c             	add    esp,0x2c
c0016751:	c3                   	ret    

c0016752 <Vm::finish8086()>:
c0016752:	53                   	push   ebx
c0016753:	83 ec 08             	sub    esp,0x8
c0016756:	fa                   	cli    
c0016757:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001675d:	80 3d c4 a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a4c4,0x0
c0016764:	75 15                	jne    c001677b <Vm::finish8086()+0x29>
c0016766:	e8 09 f3 ff ff       	call   c0015a74 <schedule()>
c001676b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016770:	48                   	dec    eax
c0016771:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016776:	75 de                	jne    c0016756 <Vm::finish8086()+0x4>
c0016778:	fb                   	sti    
c0016779:	eb db                	jmp    c0016756 <Vm::finish8086()+0x4>
c001677b:	c6 05 c4 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c4,0x0
c0016782:	83 ec 0c             	sub    esp,0xc
c0016785:	8b 1d c0 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a4c0
c001678b:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c0016791:	e8 d6 f7 ff ff       	call   c0015f6c <unblockTask(ThreadControlBlock*)>
c0016796:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001679b:	83 c4 10             	add    esp,0x10
c001679e:	8d 50 ff             	lea    edx,[eax-0x1]
c00167a1:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c00167a7:	85 d2                	test   edx,edx
c00167a9:	75 01                	jne    c00167ac <Vm::finish8086()+0x5a>
c00167ab:	fb                   	sti    
c00167ac:	83 c4 08             	add    esp,0x8
c00167af:	89 d8                	mov    eax,ebx
c00167b1:	5b                   	pop    ebx
c00167b2:	c3                   	ret    

c00167b3 <Vm::getOutput8086(unsigned char*)>:
c00167b3:	57                   	push   edi
c00167b4:	8b 0d cc a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a4cc
c00167ba:	56                   	push   esi
c00167bb:	be e0 a4 02 c0       	mov    esi,0xc002a4e0
c00167c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00167c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00167c6:	5e                   	pop    esi
c00167c7:	a1 cc a4 02 c0       	mov    eax,ds:0xc002a4cc
c00167cc:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c00167d6:	5f                   	pop    edi
c00167d7:	c3                   	ret    

c00167d8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00167d8:	55                   	push   ebp
c00167d9:	57                   	push   edi
c00167da:	56                   	push   esi
c00167db:	53                   	push   ebx
c00167dc:	83 ec 0c             	sub    esp,0xc
c00167df:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00167e3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00167e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00167eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00167ef:	fa                   	cli    
c00167f0:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00167f6:	80 3d c5 a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a4c5,0x0
c00167fd:	75 15                	jne    c0016814 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00167ff:	e8 70 f2 ff ff       	call   c0015a74 <schedule()>
c0016804:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016809:	48                   	dec    eax
c001680a:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001680f:	75 de                	jne    c00167ef <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016811:	fb                   	sti    
c0016812:	eb db                	jmp    c00167ef <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016814:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c001681e:	a1 c8 a4 02 c0       	mov    eax,ds:0xc002a4c8
c0016823:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016827:	0f b7 ff             	movzx  edi,di
c001682a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001682e:	0f b7 f6             	movzx  esi,si
c0016831:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016835:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016839:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001683d:	50                   	push   eax
c001683e:	6a 20                	push   0x20
c0016840:	6a 00                	push   0x0
c0016842:	68 e0 a4 02 c0       	push   0xc002a4e0
c0016847:	e8 a4 9c fe ff       	call   c00004f0 <memset>
c001684c:	5a                   	pop    edx
c001684d:	59                   	pop    ecx
c001684e:	57                   	push   edi
c001684f:	56                   	push   esi
c0016850:	e8 2d fe ff ff       	call   c0016682 <Vm::realToLinear(unsigned short, unsigned short)>
c0016855:	83 c4 10             	add    esp,0x10
c0016858:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001685c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016860:	89 c7                	mov    edi,eax
c0016862:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016864:	c6 05 c5 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c5,0x0
c001686b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016870:	48                   	dec    eax
c0016871:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016876:	75 01                	jne    c0016879 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016878:	fb                   	sti    
c0016879:	83 ec 0c             	sub    esp,0xc
c001687c:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c0016882:	e8 e5 f6 ff ff       	call   c0015f6c <unblockTask(ThreadControlBlock*)>
c0016887:	83 c4 1c             	add    esp,0x1c
c001688a:	b0 01                	mov    al,0x1
c001688c:	5b                   	pop    ebx
c001688d:	5e                   	pop    esi
c001688e:	5f                   	pop    edi
c001688f:	5d                   	pop    ebp
c0016890:	c3                   	ret    

c0016891 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016891:	55                   	push   ebp
c0016892:	57                   	push   edi
c0016893:	56                   	push   esi
c0016894:	53                   	push   ebx
c0016895:	83 ec 34             	sub    esp,0x34
c0016898:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001689c:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00168a0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00168a4:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c00168a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00168b0:	68 44 23 02 c0       	push   0xc0022344
c00168b5:	e8 50 40 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00168ba:	83 c4 10             	add    esp,0x10
c00168bd:	fa                   	cli    
c00168be:	8a 1d c5 a4 02 c0    	mov    bl,BYTE PTR ds:0xc002a4c5
c00168c4:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00168ca:	84 db                	test   bl,bl
c00168cc:	75 15                	jne    c00168e3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c00168ce:	e8 a1 f1 ff ff       	call   c0015a74 <schedule()>
c00168d3:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00168d8:	48                   	dec    eax
c00168d9:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00168de:	75 dd                	jne    c00168bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00168e0:	fb                   	sti    
c00168e1:	eb da                	jmp    c00168bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00168e3:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c00168ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00168f1:	a1 c8 a4 02 c0       	mov    eax,ds:0xc002a4c8
c00168f6:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00168fa:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00168fe:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016902:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016906:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001690a:	50                   	push   eax
c001690b:	6a 20                	push   0x20
c001690d:	6a 00                	push   0x0
c001690f:	68 e0 a4 02 c0       	push   0xc002a4e0
c0016914:	e8 d7 9b fe ff       	call   c00004f0 <memset>
c0016919:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016920:	e8 ae 11 ff ff       	call   c0007ad3 <malloc>
c0016925:	83 c4 0c             	add    esp,0xc
c0016928:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001692e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016932:	89 c5                	mov    ebp,eax
c0016934:	50                   	push   eax
c0016935:	e8 ae 4d ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c001693a:	83 c4 10             	add    esp,0x10
c001693d:	85 ed                	test   ebp,ebp
c001693f:	75 0a                	jne    c001694b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016941:	83 ec 0c             	sub    esp,0xc
c0016944:	68 66 23 02 c0       	push   0xc0022366
c0016949:	eb 2b                	jmp    c0016976 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c001694b:	50                   	push   eax
c001694c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016950:	50                   	push   eax
c0016951:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016955:	50                   	push   eax
c0016956:	55                   	push   ebp
c0016957:	e8 4a 51 ff ff       	call   c000baa6 <File::stat(unsigned long long*, bool*)>
c001695c:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016960:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016964:	83 c4 10             	add    esp,0x10
c0016967:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001696c:	74 27                	je     c0016995 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c001696e:	83 ec 0c             	sub    esp,0xc
c0016971:	68 7a 23 02 c0       	push   0xc002237a
c0016976:	e8 f6 a7 ff ff       	call   c0011171 <KePanic(char const*)>
c001697b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016980:	83 c4 10             	add    esp,0x10
c0016983:	48                   	dec    eax
c0016984:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016989:	85 c0                	test   eax,eax
c001698b:	75 01                	jne    c001698e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c001698d:	fb                   	sti    
c001698e:	31 db                	xor    ebx,ebx
c0016990:	e9 90 00 00 00       	jmp    c0016a25 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016995:	51                   	push   ecx
c0016996:	51                   	push   ecx
c0016997:	6a 01                	push   0x1
c0016999:	55                   	push   ebp
c001699a:	e8 05 4e ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c001699f:	83 c4 10             	add    esp,0x10
c00169a2:	85 c0                	test   eax,eax
c00169a4:	74 26                	je     c00169cc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c00169a6:	83 ec 0c             	sub    esp,0xc
c00169a9:	68 93 23 02 c0       	push   0xc0022393
c00169ae:	e8 be a7 ff ff       	call   c0011171 <KePanic(char const*)>
c00169b3:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00169b8:	83 c4 10             	add    esp,0x10
c00169bb:	48                   	dec    eax
c00169bc:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00169c1:	85 c0                	test   eax,eax
c00169c3:	75 c9                	jne    c001698e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00169c5:	fb                   	sti    
c00169c6:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00169ca:	eb 59                	jmp    c0016a25 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00169cc:	50                   	push   eax
c00169cd:	0f b7 ff             	movzx  edi,di
c00169d0:	50                   	push   eax
c00169d1:	0f b7 f6             	movzx  esi,si
c00169d4:	57                   	push   edi
c00169d5:	56                   	push   esi
c00169d6:	e8 a7 fc ff ff       	call   c0016682 <Vm::realToLinear(unsigned short, unsigned short)>
c00169db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00169de:	5a                   	pop    edx
c00169df:	8d 74 24 20          	lea    esi,[esp+0x20]
c00169e3:	56                   	push   esi
c00169e4:	50                   	push   eax
c00169e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169ed:	55                   	push   ebp
c00169ee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00169f1:	83 c4 14             	add    esp,0x14
c00169f4:	55                   	push   ebp
c00169f5:	e8 08 4e ff ff       	call   c000b802 <File::close()>
c00169fa:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00169ff:	83 c4 10             	add    esp,0x10
c0016a02:	c6 05 c5 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c5,0x0
c0016a09:	48                   	dec    eax
c0016a0a:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016a0f:	85 c0                	test   eax,eax
c0016a11:	75 01                	jne    c0016a14 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016a13:	fb                   	sti    
c0016a14:	83 ec 0c             	sub    esp,0xc
c0016a17:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c0016a1d:	e8 4a f5 ff ff       	call   c0015f6c <unblockTask(ThreadControlBlock*)>
c0016a22:	83 c4 10             	add    esp,0x10
c0016a25:	83 c4 2c             	add    esp,0x2c
c0016a28:	88 d8                	mov    al,bl
c0016a2a:	5b                   	pop    ebx
c0016a2b:	5e                   	pop    esi
c0016a2c:	5f                   	pop    edi
c0016a2d:	5d                   	pop    ebp
c0016a2e:	c3                   	ret    

c0016a2f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016a2f:	57                   	push   edi
c0016a30:	56                   	push   esi
c0016a31:	53                   	push   ebx
c0016a32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a3a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016a3e:	83 e8 06             	sub    eax,0x6
c0016a41:	0f b7 c0             	movzx  eax,ax
c0016a44:	50                   	push   eax
c0016a45:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016a4a:	50                   	push   eax
c0016a4b:	e8 32 fc ff ff       	call   c0016682 <Vm::realToLinear(unsigned short, unsigned short)>
c0016a50:	5a                   	pop    edx
c0016a51:	59                   	pop    ecx
c0016a52:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016a55:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016a58:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016a5b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016a61:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016a64:	8d 51 02             	lea    edx,[ecx+0x2]
c0016a67:	66 89 10             	mov    WORD PTR [eax],dx
c0016a6a:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016a6e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016a72:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016a76:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016a79:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016a7d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016a83:	89 f1                	mov    ecx,esi
c0016a85:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016a89:	89 f2                	mov    edx,esi
c0016a8b:	0f b6 d6             	movzx  edx,dh
c0016a8e:	0f b6 f1             	movzx  esi,cl
c0016a91:	74 0a                	je     c0016a9d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016a93:	c1 e2 08             	shl    edx,0x8
c0016a96:	09 f2                	or     edx,esi
c0016a98:	80 ce 02             	or     dh,0x2
c0016a9b:	eb 08                	jmp    c0016aa5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016a9d:	c1 e2 08             	shl    edx,0x8
c0016aa0:	09 f2                	or     edx,esi
c0016aa2:	80 e6 fd             	and    dh,0xfd
c0016aa5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016aa9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aae:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016ab2:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016aba:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016abd:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016ac5:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016ac8:	5b                   	pop    ebx
c0016ac9:	5e                   	pop    esi
c0016aca:	5f                   	pop    edi
c0016acb:	c3                   	ret    

c0016acc <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016acc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ad1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ad6:	c1 e0 04             	shl    eax,0x4
c0016ad9:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016adc:	c3                   	ret    

c0016add <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016add:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ae2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ae7:	c1 e0 04             	shl    eax,0x4
c0016aea:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016aee:	c3                   	ret    

c0016aef <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016aef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016af4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016af9:	c1 e0 04             	shl    eax,0x4
c0016afc:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016aff:	c3                   	ret    

c0016b00 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016b00:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b05:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b0a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016b0e:	c1 e0 04             	shl    eax,0x4
c0016b11:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016b14:	c3                   	ret    

c0016b15 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016b15:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b1a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b1f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b23:	c1 e0 04             	shl    eax,0x4
c0016b26:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016b2a:	c3                   	ret    

c0016b2b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016b2b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b30:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b35:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b39:	c1 e0 04             	shl    eax,0x4
c0016b3c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016b3f:	c3                   	ret    

c0016b40 <Vm::faultHandler(regs*)>:
c0016b40:	55                   	push   ebp
c0016b41:	57                   	push   edi
c0016b42:	56                   	push   esi
c0016b43:	53                   	push   ebx
c0016b44:	83 ec 2c             	sub    esp,0x2c
c0016b47:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016b4b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016b4e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016b52:	0f b7 f8             	movzx  edi,ax
c0016b55:	0f b7 c0             	movzx  eax,ax
c0016b58:	52                   	push   edx
c0016b59:	50                   	push   eax
c0016b5a:	e8 23 fb ff ff       	call   c0016682 <Vm::realToLinear(unsigned short, unsigned short)>
c0016b5f:	5a                   	pop    edx
c0016b60:	59                   	pop    ecx
c0016b61:	89 c1                	mov    ecx,eax
c0016b63:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016b66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b6a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016b6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b73:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016b76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b7a:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016b7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b87:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b8b:	e8 f2 fa ff ff       	call   c0016682 <Vm::realToLinear(unsigned short, unsigned short)>
c0016b90:	5e                   	pop    esi
c0016b91:	be 06 00 00 00       	mov    esi,0x6
c0016b96:	5d                   	pop    ebp
c0016b97:	31 ed                	xor    ebp,ebp
c0016b99:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016b9e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016ba1:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016ba7:	0f 84 74 02 00 00    	je     c0016e21 <Vm::faultHandler(regs*)+0x2e1>
c0016bad:	0f 87 94 00 00 00    	ja     c0016c47 <Vm::faultHandler(regs*)+0x107>
c0016bb3:	83 fa 66             	cmp    edx,0x66
c0016bb6:	0f 84 e2 01 00 00    	je     c0016d9e <Vm::faultHandler(regs*)+0x25e>
c0016bbc:	77 47                	ja     c0016c05 <Vm::faultHandler(regs*)+0xc5>
c0016bbe:	83 fa 36             	cmp    edx,0x36
c0016bc1:	0f 84 ca 01 00 00    	je     c0016d91 <Vm::faultHandler(regs*)+0x251>
c0016bc7:	77 1a                	ja     c0016be3 <Vm::faultHandler(regs*)+0xa3>
c0016bc9:	83 fa 26             	cmp    edx,0x26
c0016bcc:	0f 84 98 01 00 00    	je     c0016d6a <Vm::faultHandler(regs*)+0x22a>
c0016bd2:	83 fa 2e             	cmp    edx,0x2e
c0016bd5:	0f 85 27 06 00 00    	jne    c0017202 <Vm::faultHandler(regs*)+0x6c2>
c0016bdb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016bde:	31 f6                	xor    esi,esi
c0016be0:	41                   	inc    ecx
c0016be1:	eb bb                	jmp    c0016b9e <Vm::faultHandler(regs*)+0x5e>
c0016be3:	83 fa 64             	cmp    edx,0x64
c0016be6:	0f 84 8b 01 00 00    	je     c0016d77 <Vm::faultHandler(regs*)+0x237>
c0016bec:	0f 87 92 01 00 00    	ja     c0016d84 <Vm::faultHandler(regs*)+0x244>
c0016bf2:	83 fa 3e             	cmp    edx,0x3e
c0016bf5:	0f 85 07 06 00 00    	jne    c0017202 <Vm::faultHandler(regs*)+0x6c2>
c0016bfb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016bfe:	be 01 00 00 00       	mov    esi,0x1
c0016c03:	eb db                	jmp    c0016be0 <Vm::faultHandler(regs*)+0xa0>
c0016c05:	83 fa 6d             	cmp    edx,0x6d
c0016c08:	0f 84 34 03 00 00    	je     c0016f42 <Vm::faultHandler(regs*)+0x402>
c0016c0e:	77 17                	ja     c0016c27 <Vm::faultHandler(regs*)+0xe7>
c0016c10:	83 fa 67             	cmp    edx,0x67
c0016c13:	0f 84 92 01 00 00    	je     c0016dab <Vm::faultHandler(regs*)+0x26b>
c0016c19:	83 fa 6c             	cmp    edx,0x6c
c0016c1c:	0f 84 b1 02 00 00    	je     c0016ed3 <Vm::faultHandler(regs*)+0x393>
c0016c22:	e9 db 05 00 00       	jmp    c0017202 <Vm::faultHandler(regs*)+0x6c2>
c0016c27:	83 fa 6f             	cmp    edx,0x6f
c0016c2a:	0f 84 40 04 00 00    	je     c0017070 <Vm::faultHandler(regs*)+0x530>
c0016c30:	0f 82 a2 03 00 00    	jb     c0016fd8 <Vm::faultHandler(regs*)+0x498>
c0016c36:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016c3c:	0f 84 76 01 00 00    	je     c0016db8 <Vm::faultHandler(regs*)+0x278>
c0016c42:	e9 bb 05 00 00       	jmp    c0017202 <Vm::faultHandler(regs*)+0x6c2>
c0016c47:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016c4d:	0f 84 57 05 00 00    	je     c00171aa <Vm::faultHandler(regs*)+0x66a>
c0016c53:	0f 87 a9 00 00 00    	ja     c0016d02 <Vm::faultHandler(regs*)+0x1c2>
c0016c59:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016c5f:	0f 84 d6 04 00 00    	je     c001713b <Vm::faultHandler(regs*)+0x5fb>
c0016c65:	77 78                	ja     c0016cdf <Vm::faultHandler(regs*)+0x19f>
c0016c67:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016c6d:	0f 84 0e 02 00 00    	je     c0016e81 <Vm::faultHandler(regs*)+0x341>
c0016c73:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016c79:	0f 85 83 05 00 00    	jne    c0017202 <Vm::faultHandler(regs*)+0x6c2>
c0016c7f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016c83:	89 d1                	mov    ecx,edx
c0016c85:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016c88:	c1 e1 08             	shl    ecx,0x8
c0016c8b:	09 ca                	or     edx,ecx
c0016c8d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016c90:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016c94:	89 d1                	mov    ecx,edx
c0016c96:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016c9a:	c1 e1 08             	shl    ecx,0x8
c0016c9d:	09 ca                	or     edx,ecx
c0016c9f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016ca2:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016ca6:	89 d1                	mov    ecx,edx
c0016ca8:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016cac:	c1 e1 08             	shl    ecx,0x8
c0016caf:	09 ca                	or     edx,ecx
c0016cb1:	81 ca 00 02 02 00    	or     edx,0x20200
c0016cb7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016cba:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016cbe:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016cc4:	d1 e8                	shr    eax,1
c0016cc6:	83 e0 01             	and    eax,0x1
c0016cc9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016ccc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ccf:	83 c0 06             	add    eax,0x6
c0016cd2:	25 ff ff 00 00       	and    eax,0xffff
c0016cd7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016cda:	e9 1f 05 00 00       	jmp    c00171fe <Vm::faultHandler(regs*)+0x6be>
c0016cdf:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016ce5:	0f 84 95 04 00 00    	je     c0017180 <Vm::faultHandler(regs*)+0x640>
c0016ceb:	0f 82 66 04 00 00    	jb     c0017157 <Vm::faultHandler(regs*)+0x617>
c0016cf1:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016cf7:	0f 84 9a 04 00 00    	je     c0017197 <Vm::faultHandler(regs*)+0x657>
c0016cfd:	e9 00 05 00 00       	jmp    c0017202 <Vm::faultHandler(regs*)+0x6c2>
c0016d02:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016d08:	0f 84 dd 04 00 00    	je     c00171eb <Vm::faultHandler(regs*)+0x6ab>
c0016d0e:	77 2e                	ja     c0016d3e <Vm::faultHandler(regs*)+0x1fe>
c0016d10:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016d16:	0f 84 aa 04 00 00    	je     c00171c6 <Vm::faultHandler(regs*)+0x686>
c0016d1c:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016d22:	0f 85 da 04 00 00    	jne    c0017202 <Vm::faultHandler(regs*)+0x6c2>
c0016d28:	50                   	push   eax
c0016d29:	50                   	push   eax
c0016d2a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016d2e:	50                   	push   eax
c0016d2f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016d33:	50                   	push   eax
c0016d34:	e8 13 f9 ff ff       	call   c001664c <Vm::outbv(unsigned short, unsigned char)>
c0016d39:	e9 a5 04 00 00       	jmp    c00171e3 <Vm::faultHandler(regs*)+0x6a3>
c0016d3e:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016d44:	0f 84 6d 01 00 00    	je     c0016eb7 <Vm::faultHandler(regs*)+0x377>
c0016d4a:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016d50:	0f 84 6f 01 00 00    	je     c0016ec5 <Vm::faultHandler(regs*)+0x385>
c0016d56:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016d5c:	0f 85 a0 04 00 00    	jne    c0017202 <Vm::faultHandler(regs*)+0x6c2>
c0016d62:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d65:	e9 76 fe ff ff       	jmp    c0016be0 <Vm::faultHandler(regs*)+0xa0>
c0016d6a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d6d:	be 02 00 00 00       	mov    esi,0x2
c0016d72:	e9 69 fe ff ff       	jmp    c0016be0 <Vm::faultHandler(regs*)+0xa0>
c0016d77:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d7a:	be 03 00 00 00       	mov    esi,0x3
c0016d7f:	e9 5c fe ff ff       	jmp    c0016be0 <Vm::faultHandler(regs*)+0xa0>
c0016d84:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d87:	be 04 00 00 00       	mov    esi,0x4
c0016d8c:	e9 4f fe ff ff       	jmp    c0016be0 <Vm::faultHandler(regs*)+0xa0>
c0016d91:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d94:	be 05 00 00 00       	mov    esi,0x5
c0016d99:	e9 42 fe ff ff       	jmp    c0016be0 <Vm::faultHandler(regs*)+0xa0>
c0016d9e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016da1:	bd 01 00 00 00       	mov    ebp,0x1
c0016da6:	e9 35 fe ff ff       	jmp    c0016be0 <Vm::faultHandler(regs*)+0xa0>
c0016dab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dae:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016db3:	e9 28 fe ff ff       	jmp    c0016be0 <Vm::faultHandler(regs*)+0xa0>
c0016db8:	83 e5 01             	and    ebp,0x1
c0016dbb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016dbe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016dc2:	74 30                	je     c0016df4 <Vm::faultHandler(regs*)+0x2b4>
c0016dc4:	83 e9 04             	sub    ecx,0x4
c0016dc7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016dcd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016dd3:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016dd6:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016dd9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016ddf:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016de3:	0f 84 12 04 00 00    	je     c00171fb <Vm::faultHandler(regs*)+0x6bb>
c0016de9:	80 ce 02             	or     dh,0x2
c0016dec:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016def:	e9 07 04 00 00       	jmp    c00171fb <Vm::faultHandler(regs*)+0x6bb>
c0016df4:	83 e9 02             	sub    ecx,0x2
c0016df7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016dfd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016e00:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016e04:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016e0a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016e0e:	74 05                	je     c0016e15 <Vm::faultHandler(regs*)+0x2d5>
c0016e10:	80 ce 02             	or     dh,0x2
c0016e13:	eb 03                	jmp    c0016e18 <Vm::faultHandler(regs*)+0x2d8>
c0016e15:	80 e6 fd             	and    dh,0xfd
c0016e18:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016e1c:	e9 da 03 00 00       	jmp    c00171fb <Vm::faultHandler(regs*)+0x6bb>
c0016e21:	83 e5 01             	and    ebp,0x1
c0016e24:	74 2a                	je     c0016e50 <Vm::faultHandler(regs*)+0x310>
c0016e26:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e28:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e2e:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e34:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e37:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e39:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e3f:	c1 e8 09             	shr    eax,0x9
c0016e42:	83 e0 01             	and    eax,0x1
c0016e45:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016e48:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e4b:	83 c0 04             	add    eax,0x4
c0016e4e:	eb 24                	jmp    c0016e74 <Vm::faultHandler(regs*)+0x334>
c0016e50:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016e53:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e59:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e5c:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016e5f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e65:	c1 e8 09             	shr    eax,0x9
c0016e68:	83 e0 01             	and    eax,0x1
c0016e6b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016e6e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e71:	83 c0 02             	add    eax,0x2
c0016e74:	25 ff ff 00 00       	and    eax,0xffff
c0016e79:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016e7c:	e9 7a 03 00 00       	jmp    c00171fb <Vm::faultHandler(regs*)+0x6bb>
c0016e81:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016e85:	3d ee 00 00 00       	cmp    eax,0xee
c0016e8a:	75 10                	jne    c0016e9c <Vm::faultHandler(regs*)+0x35c>
c0016e8c:	83 ec 0c             	sub    esp,0xc
c0016e8f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016e92:	e8 52 f8 ff ff       	call   c00166e9 <Vm::mainloop3(unsigned long)>
c0016e97:	e9 4a 03 00 00       	jmp    c00171e6 <Vm::faultHandler(regs*)+0x6a6>
c0016e9c:	83 ec 0c             	sub    esp,0xc
c0016e9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016ea3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ea7:	51                   	push   ecx
c0016ea8:	50                   	push   eax
c0016ea9:	53                   	push   ebx
c0016eaa:	e8 80 fb ff ff       	call   c0016a2f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016eaf:	83 c4 20             	add    esp,0x20
c0016eb2:	e9 47 03 00 00       	jmp    c00171fe <Vm::faultHandler(regs*)+0x6be>
c0016eb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ebc:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016ec0:	e9 36 03 00 00       	jmp    c00171fb <Vm::faultHandler(regs*)+0x6bb>
c0016ec5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eca:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016ece:	e9 28 03 00 00       	jmp    c00171fb <Vm::faultHandler(regs*)+0x6bb>
c0016ed3:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016ed8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016edb:	74 2b                	je     c0016f08 <Vm::faultHandler(regs*)+0x3c8>
c0016edd:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016ee4:	76 22                	jbe    c0016f08 <Vm::faultHandler(regs*)+0x3c8>
c0016ee6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016eea:	50                   	push   eax
c0016eeb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016eef:	50                   	push   eax
c0016ef0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016ef4:	50                   	push   eax
c0016ef5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016ef9:	50                   	push   eax
c0016efa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016efe:	50                   	push   eax
c0016eff:	6a 6c                	push   0x6c
c0016f01:	6a 6c                	push   0x6c
c0016f03:	e9 c0 01 00 00       	jmp    c00170c8 <Vm::faultHandler(regs*)+0x588>
c0016f08:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016f0c:	83 ec 0c             	sub    esp,0xc
c0016f0f:	0f b7 f6             	movzx  esi,si
c0016f12:	50                   	push   eax
c0016f13:	e8 21 f7 ff ff       	call   c0016639 <Vm::inbv(unsigned short)>
c0016f18:	83 c4 0c             	add    esp,0xc
c0016f1b:	0f b6 c0             	movzx  eax,al
c0016f1e:	50                   	push   eax
c0016f1f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016f23:	50                   	push   eax
c0016f24:	56                   	push   esi
c0016f25:	e8 d6 fb ff ff       	call   c0016b00 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016f2a:	83 c4 10             	add    esp,0x10
c0016f2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f30:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016f34:	74 03                	je     c0016f39 <Vm::faultHandler(regs*)+0x3f9>
c0016f36:	48                   	dec    eax
c0016f37:	eb 01                	jmp    c0016f3a <Vm::faultHandler(regs*)+0x3fa>
c0016f39:	40                   	inc    eax
c0016f3a:	0f b7 c0             	movzx  eax,ax
c0016f3d:	e9 8e 00 00 00       	jmp    c0016fd0 <Vm::faultHandler(regs*)+0x490>
c0016f42:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016f47:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016f4a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f4d:	74 29                	je     c0016f78 <Vm::faultHandler(regs*)+0x438>
c0016f4f:	3d ff ff 00 00       	cmp    eax,0xffff
c0016f54:	76 22                	jbe    c0016f78 <Vm::faultHandler(regs*)+0x438>
c0016f56:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016f5a:	50                   	push   eax
c0016f5b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016f5f:	50                   	push   eax
c0016f60:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016f64:	50                   	push   eax
c0016f65:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016f69:	50                   	push   eax
c0016f6a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f6e:	50                   	push   eax
c0016f6f:	6a 6d                	push   0x6d
c0016f71:	6a 6d                	push   0x6d
c0016f73:	e9 50 01 00 00       	jmp    c00170c8 <Vm::faultHandler(regs*)+0x588>
c0016f78:	83 e5 01             	and    ebp,0x1
c0016f7b:	0f b7 c8             	movzx  ecx,ax
c0016f7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016f81:	0f b7 f6             	movzx  esi,si
c0016f84:	74 1e                	je     c0016fa4 <Vm::faultHandler(regs*)+0x464>
c0016f86:	ed                   	in     eax,dx
c0016f87:	55                   	push   ebp
c0016f88:	50                   	push   eax
c0016f89:	51                   	push   ecx
c0016f8a:	56                   	push   esi
c0016f8b:	e8 9b fb ff ff       	call   c0016b2b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016f90:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f93:	83 c4 10             	add    esp,0x10
c0016f96:	8d 50 04             	lea    edx,[eax+0x4]
c0016f99:	83 e8 04             	sub    eax,0x4
c0016f9c:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016fa2:	eb 20                	jmp    c0016fc4 <Vm::faultHandler(regs*)+0x484>
c0016fa4:	66 ed                	in     ax,dx
c0016fa6:	57                   	push   edi
c0016fa7:	0f b7 c0             	movzx  eax,ax
c0016faa:	50                   	push   eax
c0016fab:	51                   	push   ecx
c0016fac:	56                   	push   esi
c0016fad:	e8 63 fb ff ff       	call   c0016b15 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016fb2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fb5:	83 c4 10             	add    esp,0x10
c0016fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0016fbb:	83 e8 02             	sub    eax,0x2
c0016fbe:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016fc4:	25 ff ff 00 00       	and    eax,0xffff
c0016fc9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016fcd:	0f 44 c2             	cmove  eax,edx
c0016fd0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016fd3:	e9 23 02 00 00       	jmp    c00171fb <Vm::faultHandler(regs*)+0x6bb>
c0016fd8:	8d 46 ff             	lea    eax,[esi-0x1]
c0016fdb:	0f b6 f0             	movzx  esi,al
c0016fde:	83 fe 05             	cmp    esi,0x5
c0016fe1:	77 23                	ja     c0017006 <Vm::faultHandler(regs*)+0x4c6>
c0016fe3:	ff 24 b5 08 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddbf8]
c0016fea:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016fef:	eb 15                	jmp    c0017006 <Vm::faultHandler(regs*)+0x4c6>
c0016ff1:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016ff5:	eb 0f                	jmp    c0017006 <Vm::faultHandler(regs*)+0x4c6>
c0016ff7:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016ffb:	eb 09                	jmp    c0017006 <Vm::faultHandler(regs*)+0x4c6>
c0016ffd:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017001:	eb 03                	jmp    c0017006 <Vm::faultHandler(regs*)+0x4c6>
c0017003:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017006:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001700b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001700e:	74 29                	je     c0017039 <Vm::faultHandler(regs*)+0x4f9>
c0017010:	3d ff ff 00 00       	cmp    eax,0xffff
c0017015:	76 22                	jbe    c0017039 <Vm::faultHandler(regs*)+0x4f9>
c0017017:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001701b:	50                   	push   eax
c001701c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017020:	50                   	push   eax
c0017021:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017025:	50                   	push   eax
c0017026:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001702a:	50                   	push   eax
c001702b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001702f:	50                   	push   eax
c0017030:	6a 6e                	push   0x6e
c0017032:	6a 6e                	push   0x6e
c0017034:	e9 8f 00 00 00       	jmp    c00170c8 <Vm::faultHandler(regs*)+0x588>
c0017039:	52                   	push   edx
c001703a:	0f b7 c0             	movzx  eax,ax
c001703d:	52                   	push   edx
c001703e:	50                   	push   eax
c001703f:	57                   	push   edi
c0017040:	e8 87 fa ff ff       	call   c0016acc <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017045:	59                   	pop    ecx
c0017046:	5e                   	pop    esi
c0017047:	0f b6 c0             	movzx  eax,al
c001704a:	50                   	push   eax
c001704b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001704f:	50                   	push   eax
c0017050:	e8 f7 f5 ff ff       	call   c001664c <Vm::outbv(unsigned short, unsigned char)>
c0017055:	83 c4 10             	add    esp,0x10
c0017058:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001705b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001705f:	74 03                	je     c0017064 <Vm::faultHandler(regs*)+0x524>
c0017061:	48                   	dec    eax
c0017062:	eb 01                	jmp    c0017065 <Vm::faultHandler(regs*)+0x525>
c0017064:	40                   	inc    eax
c0017065:	0f b7 c0             	movzx  eax,ax
c0017068:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001706b:	e9 8b 01 00 00       	jmp    c00171fb <Vm::faultHandler(regs*)+0x6bb>
c0017070:	8d 46 ff             	lea    eax,[esi-0x1]
c0017073:	0f b6 f0             	movzx  esi,al
c0017076:	83 fe 05             	cmp    esi,0x5
c0017079:	77 1e                	ja     c0017099 <Vm::faultHandler(regs*)+0x559>
c001707b:	ff 24 b5 20 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddbe0]
c0017082:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017086:	eb 11                	jmp    c0017099 <Vm::faultHandler(regs*)+0x559>
c0017088:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001708b:	eb 0c                	jmp    c0017099 <Vm::faultHandler(regs*)+0x559>
c001708d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017090:	eb 07                	jmp    c0017099 <Vm::faultHandler(regs*)+0x559>
c0017092:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017095:	eb 02                	jmp    c0017099 <Vm::faultHandler(regs*)+0x559>
c0017097:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017099:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001709e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00170a1:	74 37                	je     c00170da <Vm::faultHandler(regs*)+0x59a>
c00170a3:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00170a9:	76 2f                	jbe    c00170da <Vm::faultHandler(regs*)+0x59a>
c00170ab:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00170af:	50                   	push   eax
c00170b0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00170b4:	50                   	push   eax
c00170b5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00170b9:	50                   	push   eax
c00170ba:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00170be:	50                   	push   eax
c00170bf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170c3:	50                   	push   eax
c00170c4:	6a 6f                	push   0x6f
c00170c6:	6a 6f                	push   0x6f
c00170c8:	68 ac 23 02 c0       	push   0xc00223ac
c00170cd:	e8 38 38 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00170d2:	83 c4 20             	add    esp,0x20
c00170d5:	e9 86 01 00 00       	jmp    c0017260 <Vm::faultHandler(regs*)+0x720>
c00170da:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00170dd:	0f b7 d7             	movzx  edx,di
c00170e0:	0f b7 c6             	movzx  eax,si
c00170e3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00170e6:	81 e1 00 04 00 00    	and    ecx,0x400
c00170ec:	83 e5 01             	and    ebp,0x1
c00170ef:	74 1c                	je     c001710d <Vm::faultHandler(regs*)+0x5cd>
c00170f1:	55                   	push   ebp
c00170f2:	55                   	push   ebp
c00170f3:	50                   	push   eax
c00170f4:	52                   	push   edx
c00170f5:	e8 f5 f9 ff ff       	call   c0016aef <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00170fa:	83 c4 10             	add    esp,0x10
c00170fd:	89 fa                	mov    edx,edi
c00170ff:	ef                   	out    dx,eax
c0017100:	8d 46 04             	lea    eax,[esi+0x4]
c0017103:	83 ee 04             	sub    esi,0x4
c0017106:	25 ff ff 00 00       	and    eax,0xffff
c001710b:	eb 1b                	jmp    c0017128 <Vm::faultHandler(regs*)+0x5e8>
c001710d:	55                   	push   ebp
c001710e:	55                   	push   ebp
c001710f:	50                   	push   eax
c0017110:	52                   	push   edx
c0017111:	e8 c7 f9 ff ff       	call   c0016add <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017116:	83 c4 10             	add    esp,0x10
c0017119:	89 fa                	mov    edx,edi
c001711b:	66 ef                	out    dx,ax
c001711d:	8d 46 02             	lea    eax,[esi+0x2]
c0017120:	83 ee 02             	sub    esi,0x2
c0017123:	25 ff ff 00 00       	and    eax,0xffff
c0017128:	81 e6 ff ff 00 00    	and    esi,0xffff
c001712e:	85 c9                	test   ecx,ecx
c0017130:	0f 44 f0             	cmove  esi,eax
c0017133:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017136:	e9 c0 00 00 00       	jmp    c00171fb <Vm::faultHandler(regs*)+0x6bb>
c001713b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017142:	83 ec 0c             	sub    esp,0xc
c0017145:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017149:	50                   	push   eax
c001714a:	e8 ea f4 ff ff       	call   c0016639 <Vm::inbv(unsigned short)>
c001714f:	0f b6 c0             	movzx  eax,al
c0017152:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017155:	eb 3a                	jmp    c0017191 <Vm::faultHandler(regs*)+0x651>
c0017157:	83 e5 01             	and    ebp,0x1
c001715a:	74 07                	je     c0017163 <Vm::faultHandler(regs*)+0x623>
c001715c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017160:	ed                   	in     eax,dx
c0017161:	eb 14                	jmp    c0017177 <Vm::faultHandler(regs*)+0x637>
c0017163:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017166:	66 31 f6             	xor    si,si
c0017169:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001716c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017170:	66 ed                	in     ax,dx
c0017172:	0f b7 c0             	movzx  eax,ax
c0017175:	09 f0                	or     eax,esi
c0017177:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001717a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001717e:	eb 7e                	jmp    c00171fe <Vm::faultHandler(regs*)+0x6be>
c0017180:	52                   	push   edx
c0017181:	52                   	push   edx
c0017182:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017186:	50                   	push   eax
c0017187:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001718b:	50                   	push   eax
c001718c:	e8 bb f4 ff ff       	call   c001664c <Vm::outbv(unsigned short, unsigned char)>
c0017191:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017195:	eb 4f                	jmp    c00171e6 <Vm::faultHandler(regs*)+0x6a6>
c0017197:	83 e5 01             	and    ebp,0x1
c001719a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001719d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171a1:	74 03                	je     c00171a6 <Vm::faultHandler(regs*)+0x666>
c00171a3:	ef                   	out    dx,eax
c00171a4:	eb d4                	jmp    c001717a <Vm::faultHandler(regs*)+0x63a>
c00171a6:	66 ef                	out    dx,ax
c00171a8:	eb d0                	jmp    c001717a <Vm::faultHandler(regs*)+0x63a>
c00171aa:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00171ae:	83 ec 0c             	sub    esp,0xc
c00171b1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00171b8:	50                   	push   eax
c00171b9:	e8 7b f4 ff ff       	call   c0016639 <Vm::inbv(unsigned short)>
c00171be:	0f b6 c0             	movzx  eax,al
c00171c1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00171c4:	eb 1d                	jmp    c00171e3 <Vm::faultHandler(regs*)+0x6a3>
c00171c6:	83 e5 01             	and    ebp,0x1
c00171c9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00171cc:	74 03                	je     c00171d1 <Vm::faultHandler(regs*)+0x691>
c00171ce:	ed                   	in     eax,dx
c00171cf:	eb 0d                	jmp    c00171de <Vm::faultHandler(regs*)+0x69e>
c00171d1:	66 ed                	in     ax,dx
c00171d3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00171d6:	0f b7 c0             	movzx  eax,ax
c00171d9:	66 31 d2             	xor    dx,dx
c00171dc:	09 d0                	or     eax,edx
c00171de:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00171e1:	eb 18                	jmp    c00171fb <Vm::faultHandler(regs*)+0x6bb>
c00171e3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171e6:	83 c4 10             	add    esp,0x10
c00171e9:	eb 13                	jmp    c00171fe <Vm::faultHandler(regs*)+0x6be>
c00171eb:	83 e5 01             	and    ebp,0x1
c00171ee:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00171f1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00171f4:	74 03                	je     c00171f9 <Vm::faultHandler(regs*)+0x6b9>
c00171f6:	ef                   	out    dx,eax
c00171f7:	eb 02                	jmp    c00171fb <Vm::faultHandler(regs*)+0x6bb>
c00171f9:	66 ef                	out    dx,ax
c00171fb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171fe:	b0 01                	mov    al,0x1
c0017200:	eb 60                	jmp    c0017262 <Vm::faultHandler(regs*)+0x722>
c0017202:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017206:	50                   	push   eax
c0017207:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001720b:	50                   	push   eax
c001720c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017210:	50                   	push   eax
c0017211:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017215:	50                   	push   eax
c0017216:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001721a:	50                   	push   eax
c001721b:	52                   	push   edx
c001721c:	52                   	push   edx
c001721d:	68 d9 23 02 c0       	push   0xc00223d9
c0017222:	e8 e3 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017227:	83 c4 20             	add    esp,0x20
c001722a:	83 ec 0c             	sub    esp,0xc
c001722d:	6a 60                	push   0x60
c001722f:	e8 05 f4 ff ff       	call   c0016639 <Vm::inbv(unsigned short)>
c0017234:	83 c4 10             	add    esp,0x10
c0017237:	0f b6 d0             	movzx  edx,al
c001723a:	83 fa 1c             	cmp    edx,0x1c
c001723d:	74 05                	je     c0017244 <Vm::faultHandler(regs*)+0x704>
c001723f:	83 fa 5a             	cmp    edx,0x5a
c0017242:	75 e6                	jne    c001722a <Vm::faultHandler(regs*)+0x6ea>
c0017244:	0f b6 c0             	movzx  eax,al
c0017247:	83 f8 1c             	cmp    eax,0x1c
c001724a:	74 05                	je     c0017251 <Vm::faultHandler(regs*)+0x711>
c001724c:	83 f8 5a             	cmp    eax,0x5a
c001724f:	75 0f                	jne    c0017260 <Vm::faultHandler(regs*)+0x720>
c0017251:	83 ec 0c             	sub    esp,0xc
c0017254:	6a 60                	push   0x60
c0017256:	e8 de f3 ff ff       	call   c0016639 <Vm::inbv(unsigned short)>
c001725b:	83 c4 10             	add    esp,0x10
c001725e:	eb e4                	jmp    c0017244 <Vm::faultHandler(regs*)+0x704>
c0017260:	31 c0                	xor    eax,eax
c0017262:	83 c4 2c             	add    esp,0x2c
c0017265:	5b                   	pop    ebx
c0017266:	5e                   	pop    esi
c0017267:	5f                   	pop    edi
c0017268:	5d                   	pop    ebp
c0017269:	c3                   	ret    

c001726a <noCopro(unsigned long)>:
c001726a:	c3                   	ret    

c001726b <nmiHandler(regs*, void*)>:
c001726b:	83 ec 0c             	sub    esp,0xc
c001726e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017273:	83 ec 0c             	sub    esp,0xc
c0017276:	50                   	push   eax
c0017277:	e8 5a 00 ff ff       	call   c00072d6 <Computer::handleNMI()>
c001727c:	83 c4 10             	add    esp,0x10
c001727f:	90                   	nop
c0017280:	83 c4 0c             	add    esp,0xc
c0017283:	c3                   	ret    

c0017284 <doubleFault(regs*, void*)>:
c0017284:	55                   	push   ebp
c0017285:	89 e5                	mov    ebp,esp
c0017287:	83 ec 08             	sub    esp,0x8
c001728a:	83 ec 0c             	sub    esp,0xc
c001728d:	68 38 24 02 c0       	push   0xc0022438
c0017292:	e8 da 9e ff ff       	call   c0011171 <KePanic(char const*)>
c0017297:	83 c4 10             	add    esp,0x10
c001729a:	90                   	nop
c001729b:	c9                   	leave  
c001729c:	c3                   	ret    

c001729d <displayDebugInfo(regs*)>:
c001729d:	83 ec 1c             	sub    esp,0x1c
c00172a0:	0f 20 c0             	mov    eax,cr0
c00172a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172a7:	0f 20 d0             	mov    eax,cr2
c00172aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00172ae:	0f 20 d8             	mov    eax,cr3
c00172b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172b5:	0f 20 e0             	mov    eax,cr4
c00172b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00172bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172bf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00172c2:	83 ec 08             	sub    esp,0x8
c00172c5:	50                   	push   eax
c00172c6:	68 54 24 02 c0       	push   0xc0022454
c00172cb:	e8 3a 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00172d0:	83 c4 10             	add    esp,0x10
c00172d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172d7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00172da:	83 ec 08             	sub    esp,0x8
c00172dd:	50                   	push   eax
c00172de:	68 45 24 02 c0       	push   0xc0022445
c00172e3:	e8 22 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00172e8:	83 c4 10             	add    esp,0x10
c00172eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172ef:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00172f2:	83 ec 08             	sub    esp,0x8
c00172f5:	50                   	push   eax
c00172f6:	68 50 24 02 c0       	push   0xc0022450
c00172fb:	e8 0a 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017300:	83 c4 10             	add    esp,0x10
c0017303:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017307:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001730a:	83 ec 08             	sub    esp,0x8
c001730d:	50                   	push   eax
c001730e:	68 5f 24 02 c0       	push   0xc002245f
c0017313:	e8 f2 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017318:	83 c4 10             	add    esp,0x10
c001731b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001731f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017322:	83 ec 08             	sub    esp,0x8
c0017325:	50                   	push   eax
c0017326:	68 6a 24 02 c0       	push   0xc002246a
c001732b:	e8 da 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017330:	83 c4 10             	add    esp,0x10
c0017333:	83 ec 08             	sub    esp,0x8
c0017336:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001733a:	68 75 24 02 c0       	push   0xc0022475
c001733f:	e8 c6 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017344:	83 c4 10             	add    esp,0x10
c0017347:	83 ec 08             	sub    esp,0x8
c001734a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001734e:	68 80 24 02 c0       	push   0xc0022480
c0017353:	e8 b2 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017358:	83 c4 10             	add    esp,0x10
c001735b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001735f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017362:	c1 e0 05             	shl    eax,0x5
c0017365:	8d 90 00 34 02 c0    	lea    edx,[eax-0x3ffdcc00]
c001736b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001736f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017372:	83 ec 04             	sub    esp,0x4
c0017375:	52                   	push   edx
c0017376:	50                   	push   eax
c0017377:	68 8b 24 02 c0       	push   0xc002248b
c001737c:	e8 89 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017381:	83 c4 10             	add    esp,0x10
c0017384:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017389:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001738f:	83 ec 0c             	sub    esp,0xc
c0017392:	50                   	push   eax
c0017393:	e8 d7 13 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0017398:	83 c4 10             	add    esp,0x10
c001739b:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00173a0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173a6:	83 ec 08             	sub    esp,0x8
c00173a9:	68 9a 24 02 c0       	push   0xc002249a
c00173ae:	50                   	push   eax
c00173af:	e8 f8 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00173b4:	83 c4 10             	add    esp,0x10
c00173b7:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00173bc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173c2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00173c6:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00173c9:	83 ec 08             	sub    esp,0x8
c00173cc:	52                   	push   edx
c00173cd:	50                   	push   eax
c00173ce:	e8 93 16 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00173d3:	83 c4 10             	add    esp,0x10
c00173d6:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00173db:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173e1:	83 ec 08             	sub    esp,0x8
c00173e4:	68 a8 24 02 c0       	push   0xc00224a8
c00173e9:	50                   	push   eax
c00173ea:	e8 bd 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00173ef:	83 c4 10             	add    esp,0x10
c00173f2:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00173f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173fd:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017402:	8b 12                	mov    edx,DWORD PTR [edx]
c0017404:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017407:	83 c2 0c             	add    edx,0xc
c001740a:	83 ec 08             	sub    esp,0x8
c001740d:	52                   	push   edx
c001740e:	50                   	push   eax
c001740f:	e8 98 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017414:	83 c4 10             	add    esp,0x10
c0017417:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001741c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017422:	83 ec 08             	sub    esp,0x8
c0017425:	68 b1 24 02 c0       	push   0xc00224b1
c001742a:	50                   	push   eax
c001742b:	e8 7c 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017430:	83 c4 10             	add    esp,0x10
c0017433:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017438:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001743e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017442:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017445:	83 ec 08             	sub    esp,0x8
c0017448:	52                   	push   edx
c0017449:	50                   	push   eax
c001744a:	e8 17 16 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001744f:	83 c4 10             	add    esp,0x10
c0017452:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017457:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001745d:	83 ec 08             	sub    esp,0x8
c0017460:	68 b9 24 02 c0       	push   0xc00224b9
c0017465:	50                   	push   eax
c0017466:	e8 41 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001746b:	83 c4 10             	add    esp,0x10
c001746e:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017473:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017479:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001747d:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017480:	83 ec 08             	sub    esp,0x8
c0017483:	52                   	push   edx
c0017484:	50                   	push   eax
c0017485:	e8 dc 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001748a:	83 c4 10             	add    esp,0x10
c001748d:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017492:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017498:	83 ec 08             	sub    esp,0x8
c001749b:	68 c1 24 02 c0       	push   0xc00224c1
c00174a0:	50                   	push   eax
c00174a1:	e8 06 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00174a6:	83 c4 10             	add    esp,0x10
c00174a9:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174ae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174b4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174b8:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00174bb:	83 ec 08             	sub    esp,0x8
c00174be:	52                   	push   edx
c00174bf:	50                   	push   eax
c00174c0:	e8 a1 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00174c5:	83 c4 10             	add    esp,0x10
c00174c8:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174cd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174d3:	83 ec 08             	sub    esp,0x8
c00174d6:	68 c9 24 02 c0       	push   0xc00224c9
c00174db:	50                   	push   eax
c00174dc:	e8 cb 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00174e1:	83 c4 10             	add    esp,0x10
c00174e4:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174e9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174f3:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00174f6:	83 ec 08             	sub    esp,0x8
c00174f9:	52                   	push   edx
c00174fa:	50                   	push   eax
c00174fb:	e8 66 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017500:	83 c4 10             	add    esp,0x10
c0017503:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017508:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001750e:	83 ec 08             	sub    esp,0x8
c0017511:	68 d1 24 02 c0       	push   0xc00224d1
c0017516:	50                   	push   eax
c0017517:	e8 90 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001751c:	83 c4 10             	add    esp,0x10
c001751f:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017524:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001752a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001752e:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017531:	83 ec 08             	sub    esp,0x8
c0017534:	52                   	push   edx
c0017535:	50                   	push   eax
c0017536:	e8 2b 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001753b:	83 c4 10             	add    esp,0x10
c001753e:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017543:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017549:	83 ec 08             	sub    esp,0x8
c001754c:	68 d9 24 02 c0       	push   0xc00224d9
c0017551:	50                   	push   eax
c0017552:	e8 55 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017557:	83 c4 10             	add    esp,0x10
c001755a:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001755f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017565:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017569:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001756c:	83 ec 08             	sub    esp,0x8
c001756f:	52                   	push   edx
c0017570:	50                   	push   eax
c0017571:	e8 f0 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017576:	83 c4 10             	add    esp,0x10
c0017579:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001757e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017584:	83 ec 08             	sub    esp,0x8
c0017587:	68 e1 24 02 c0       	push   0xc00224e1
c001758c:	50                   	push   eax
c001758d:	e8 1a 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017592:	83 c4 10             	add    esp,0x10
c0017595:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001759a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175a0:	83 ec 08             	sub    esp,0x8
c00175a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175a7:	50                   	push   eax
c00175a8:	e8 b9 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175ad:	83 c4 10             	add    esp,0x10
c00175b0:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175bb:	83 ec 08             	sub    esp,0x8
c00175be:	68 ea 24 02 c0       	push   0xc00224ea
c00175c3:	50                   	push   eax
c00175c4:	e8 e3 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175c9:	83 c4 10             	add    esp,0x10
c00175cc:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175d7:	83 ec 08             	sub    esp,0x8
c00175da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00175de:	50                   	push   eax
c00175df:	e8 82 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175e4:	83 c4 10             	add    esp,0x10
c00175e7:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175ec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175f2:	83 ec 08             	sub    esp,0x8
c00175f5:	68 f2 24 02 c0       	push   0xc00224f2
c00175fa:	50                   	push   eax
c00175fb:	e8 ac 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017600:	83 c4 10             	add    esp,0x10
c0017603:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017608:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001760e:	83 ec 08             	sub    esp,0x8
c0017611:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017615:	50                   	push   eax
c0017616:	e8 4b 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001761b:	83 c4 10             	add    esp,0x10
c001761e:	fa                   	cli    
c001761f:	f4                   	hlt    
c0017620:	eb fe                	jmp    c0017620 <displayDebugInfo(regs*)+0x383>

c0017622 <HalSystemIdle()>:
c0017622:	56                   	push   esi
c0017623:	53                   	push   ebx
c0017624:	83 ec 14             	sub    esp,0x14
c0017627:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001762c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017632:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017638:	83 e0 04             	and    eax,0x4
c001763b:	0f b6 c0             	movzx  eax,al
c001763e:	85 c0                	test   eax,eax
c0017640:	0f 95 c0             	setne  al
c0017643:	0f b6 c0             	movzx  eax,al
c0017646:	85 c0                	test   eax,eax
c0017648:	74 4c                	je     c0017696 <HalSystemIdle()+0x74>
c001764a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001764f:	83 ec 08             	sub    esp,0x8
c0017652:	68 e1 00 00 00       	push   0xe1
c0017657:	50                   	push   eax
c0017658:	e8 85 fa fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001765d:	83 c4 10             	add    esp,0x10
c0017660:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017664:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017668:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001766d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017671:	83 e2 02             	and    edx,0x2
c0017674:	89 d3                	mov    ebx,edx
c0017676:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001767a:	83 e2 00             	and    edx,0x0
c001767d:	89 d6                	mov    esi,edx
c001767f:	56                   	push   esi
c0017680:	53                   	push   ebx
c0017681:	68 e1 00 00 00       	push   0xe1
c0017686:	50                   	push   eax
c0017687:	e8 82 fa fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c001768c:	83 c4 10             	add    esp,0x10
c001768f:	e8 00 8b fe ff       	call   c0000194 <doTPAUSE>
c0017694:	eb 01                	jmp    c0017697 <HalSystemIdle()+0x75>
c0017696:	f4                   	hlt    
c0017697:	90                   	nop
c0017698:	83 c4 14             	add    esp,0x14
c001769b:	5b                   	pop    ebx
c001769c:	5e                   	pop    esi
c001769d:	c3                   	ret    

c001769e <displayProgramFault(char const*)>:
c001769e:	83 ec 0c             	sub    esp,0xc
c00176a1:	83 ec 0c             	sub    esp,0xc
c00176a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176a8:	e8 5d 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00176ad:	83 c4 10             	add    esp,0x10
c00176b0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00176b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00176b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00176ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176c0:	85 c0                	test   eax,eax
c00176c2:	74 21                	je     c00176e5 <displayProgramFault(char const*)+0x47>
c00176c4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00176c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00176cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00176ce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176d4:	6a 04                	push   0x4
c00176d6:	6a 0f                	push   0xf
c00176d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176dc:	50                   	push   eax
c00176dd:	e8 3c 14 ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00176e2:	83 c4 10             	add    esp,0x10
c00176e5:	90                   	nop
c00176e6:	83 c4 0c             	add    esp,0xc
c00176e9:	c3                   	ret    

c00176ea <gpFault(regs*, void*)>:
c00176ea:	83 ec 1c             	sub    esp,0x1c
c00176ed:	c7 05 14 a5 02 c0 40 6b 01 c0 	mov    DWORD PTR ds:0xc002a514,0xc0016b40
c00176f7:	a1 14 a5 02 c0       	mov    eax,ds:0xc002a514
c00176fc:	85 c0                	test   eax,eax
c00176fe:	74 1e                	je     c001771e <gpFault(regs*, void*)+0x34>
c0017700:	a1 14 a5 02 c0       	mov    eax,ds:0xc002a514
c0017705:	83 ec 0c             	sub    esp,0xc
c0017708:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001770c:	ff d0                	call   eax
c001770e:	83 c4 10             	add    esp,0x10
c0017711:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017715:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001771a:	85 c0                	test   eax,eax
c001771c:	75 2e                	jne    c001774c <gpFault(regs*, void*)+0x62>
c001771e:	83 ec 0c             	sub    esp,0xc
c0017721:	68 fa 24 02 c0       	push   0xc00224fa
c0017726:	e8 73 ff ff ff       	call   c001769e <displayProgramFault(char const*)>
c001772b:	83 c4 10             	add    esp,0x10
c001772e:	83 ec 0c             	sub    esp,0xc
c0017731:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017735:	e8 63 fb ff ff       	call   c001729d <displayDebugInfo(regs*)>
c001773a:	83 c4 10             	add    esp,0x10
c001773d:	83 ec 0c             	sub    esp,0xc
c0017740:	6a 00                	push   0x0
c0017742:	e8 99 ed ff ff       	call   c00164e0 <Thr::terminateFromIRQ(int)>
c0017747:	83 c4 10             	add    esp,0x10
c001774a:	eb 01                	jmp    c001774d <gpFault(regs*, void*)+0x63>
c001774c:	90                   	nop
c001774d:	83 c4 1c             	add    esp,0x1c
c0017750:	c3                   	ret    

c0017751 <pgFault(regs*, void*)>:
c0017751:	83 ec 1c             	sub    esp,0x1c
c0017754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017758:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001775b:	0f 20 d0             	mov    eax,cr2
c001775e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017766:	83 ec 04             	sub    esp,0x4
c0017769:	52                   	push   edx
c001776a:	50                   	push   eax
c001776b:	68 d8 25 02 c0       	push   0xc00225d8
c0017770:	e8 95 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017775:	83 c4 10             	add    esp,0x10
c0017778:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001777d:	8b 00                	mov    eax,DWORD PTR [eax]
c001777f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017782:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017788:	0f 20 d2             	mov    edx,cr2
c001778b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001778f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017793:	83 ec 08             	sub    esp,0x8
c0017796:	52                   	push   edx
c0017797:	50                   	push   eax
c0017798:	e8 dd 2b ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c001779d:	83 c4 10             	add    esp,0x10
c00177a0:	0f b6 c0             	movzx  eax,al
c00177a3:	85 c0                	test   eax,eax
c00177a5:	75 2e                	jne    c00177d5 <pgFault(regs*, void*)+0x84>
c00177a7:	83 ec 0c             	sub    esp,0xc
c00177aa:	68 13 25 02 c0       	push   0xc0022513
c00177af:	e8 ea fe ff ff       	call   c001769e <displayProgramFault(char const*)>
c00177b4:	83 c4 10             	add    esp,0x10
c00177b7:	83 ec 0c             	sub    esp,0xc
c00177ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177be:	e8 da fa ff ff       	call   c001729d <displayDebugInfo(regs*)>
c00177c3:	83 c4 10             	add    esp,0x10
c00177c6:	83 ec 0c             	sub    esp,0xc
c00177c9:	6a 00                	push   0x0
c00177cb:	e8 10 ed ff ff       	call   c00164e0 <Thr::terminateFromIRQ(int)>
c00177d0:	83 c4 10             	add    esp,0x10
c00177d3:	eb 01                	jmp    c00177d6 <pgFault(regs*, void*)+0x85>
c00177d5:	90                   	nop
c00177d6:	83 c4 1c             	add    esp,0x1c
c00177d9:	c3                   	ret    

c00177da <otherISRHandler(regs*, void*)>:
c00177da:	83 ec 0c             	sub    esp,0xc
c00177dd:	83 ec 0c             	sub    esp,0xc
c00177e0:	68 00 26 02 c0       	push   0xc0022600
c00177e5:	e8 b4 fe ff ff       	call   c001769e <displayProgramFault(char const*)>
c00177ea:	83 c4 10             	add    esp,0x10
c00177ed:	83 ec 0c             	sub    esp,0xc
c00177f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00177f4:	e8 a4 fa ff ff       	call   c001729d <displayDebugInfo(regs*)>
c00177f9:	83 c4 10             	add    esp,0x10
c00177fc:	83 ec 0c             	sub    esp,0xc
c00177ff:	6a 00                	push   0x0
c0017801:	e8 da ec ff ff       	call   c00164e0 <Thr::terminateFromIRQ(int)>
c0017806:	83 c4 10             	add    esp,0x10
c0017809:	90                   	nop
c001780a:	83 c4 0c             	add    esp,0xc
c001780d:	c3                   	ret    

c001780e <opcodeFault(regs*, void*)>:
c001780e:	55                   	push   ebp
c001780f:	89 e5                	mov    ebp,esp
c0017811:	83 ec 08             	sub    esp,0x8
c0017814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017817:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001781a:	83 ec 08             	sub    esp,0x8
c001781d:	50                   	push   eax
c001781e:	68 1e 25 02 c0       	push   0xc002251e
c0017823:	e8 e2 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017828:	83 c4 10             	add    esp,0x10
c001782b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017830:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017836:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001783c:	0f b6 c0             	movzx  eax,al
c001783f:	85 c0                	test   eax,eax
c0017841:	74 21                	je     c0017864 <opcodeFault(regs*, void*)+0x56>
c0017843:	83 ec 0c             	sub    esp,0xc
c0017846:	68 28 26 02 c0       	push   0xc0022628
c001784b:	e8 ba 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017850:	83 c4 10             	add    esp,0x10
c0017853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017856:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017859:	8d 50 19             	lea    edx,[eax+0x19]
c001785c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001785f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017862:	eb 2b                	jmp    c001788f <opcodeFault(regs*, void*)+0x81>
c0017864:	83 ec 0c             	sub    esp,0xc
c0017867:	68 2c 25 02 c0       	push   0xc002252c
c001786c:	e8 2d fe ff ff       	call   c001769e <displayProgramFault(char const*)>
c0017871:	83 c4 10             	add    esp,0x10
c0017874:	83 ec 0c             	sub    esp,0xc
c0017877:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001787a:	e8 1e fa ff ff       	call   c001729d <displayDebugInfo(regs*)>
c001787f:	83 c4 10             	add    esp,0x10
c0017882:	83 ec 0c             	sub    esp,0xc
c0017885:	6a 00                	push   0x0
c0017887:	e8 54 ec ff ff       	call   c00164e0 <Thr::terminateFromIRQ(int)>
c001788c:	83 c4 10             	add    esp,0x10
c001788f:	c9                   	leave  
c0017890:	c3                   	ret    

c0017891 <i386SaveCoprocessor(void*)>:
c0017891:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017895:	83 c0 3f             	add    eax,0x3f
c0017898:	83 e0 c0             	and    eax,0xffffffc0
c001789b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001789f:	ff 25 10 a5 02 c0    	jmp    DWORD PTR ds:0xc002a510

c00178a5 <i386LoadCoprocessor(void*)>:
c00178a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178a9:	83 c0 3f             	add    eax,0x3f
c00178ac:	83 e0 c0             	and    eax,0xffffffc0
c00178af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178b3:	ff 25 0c a5 02 c0    	jmp    DWORD PTR ds:0xc002a50c

c00178b9 <x87EmulHandler(regs*, void*)>:
c00178b9:	53                   	push   ebx
c00178ba:	83 ec 08             	sub    esp,0x8
c00178bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00178c2:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00178c6:	74 10                	je     c00178d8 <x87EmulHandler(regs*, void*)+0x1f>
c00178c8:	83 ec 0c             	sub    esp,0xc
c00178cb:	68 39 25 02 c0       	push   0xc0022539
c00178d0:	e8 9c 98 ff ff       	call   c0011171 <KePanic(char const*)>
c00178d5:	83 c4 10             	add    esp,0x10
c00178d8:	0f 20 c0             	mov    eax,cr0
c00178db:	a8 08                	test   al,0x8
c00178dd:	74 59                	je     c0017938 <x87EmulHandler(regs*, void*)+0x7f>
c00178df:	0f 06                	clts   
c00178e1:	a1 08 a5 02 c0       	mov    eax,ds:0xc002a508
c00178e6:	85 c0                	test   eax,eax
c00178e8:	74 0e                	je     c00178f8 <x87EmulHandler(regs*, void*)+0x3f>
c00178ea:	83 ec 0c             	sub    esp,0xc
c00178ed:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00178f0:	e8 9c ff ff ff       	call   c0017891 <i386SaveCoprocessor(void*)>
c00178f5:	83 c4 10             	add    esp,0x10
c00178f8:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00178fe:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017902:	75 12                	jne    c0017916 <x87EmulHandler(regs*, void*)+0x5d>
c0017904:	83 ec 0c             	sub    esp,0xc
c0017907:	68 40 02 00 00       	push   0x240
c001790c:	e8 c2 01 ff ff       	call   c0007ad3 <malloc>
c0017911:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017914:	eb 10                	jmp    c0017926 <x87EmulHandler(regs*, void*)+0x6d>
c0017916:	a1 08 a5 02 c0       	mov    eax,ds:0xc002a508
c001791b:	83 ec 0c             	sub    esp,0xc
c001791e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017921:	e8 7f ff ff ff       	call   c00178a5 <i386LoadCoprocessor(void*)>
c0017926:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001792b:	83 c4 10             	add    esp,0x10
c001792e:	a3 08 a5 02 c0       	mov    ds:0xc002a508,eax
c0017933:	83 c4 08             	add    esp,0x8
c0017936:	5b                   	pop    ebx
c0017937:	c3                   	ret    
c0017938:	83 ec 0c             	sub    esp,0xc
c001793b:	68 4d 25 02 c0       	push   0xc002254d
c0017940:	e8 c5 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017945:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001794d:	83 c4 18             	add    esp,0x18
c0017950:	5b                   	pop    ebx
c0017951:	e9 8a eb ff ff       	jmp    c00164e0 <Thr::terminateFromIRQ(int)>

c0017956 <HalInitialiseCoprocessor()>:
c0017956:	83 ec 10             	sub    esp,0x10
c0017959:	6a 00                	push   0x0
c001795b:	68 b9 78 01 c0       	push   0xc00178b9
c0017960:	6a 07                	push   0x7
c0017962:	c7 05 08 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a508,0x0
c001796c:	e8 bd 51 ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017971:	e8 aa 70 00 00       	call   c001ea20 <avxDetect>
c0017976:	83 c4 10             	add    esp,0x10
c0017979:	85 c0                	test   eax,eax
c001797b:	74 1c                	je     c0017999 <HalInitialiseCoprocessor()+0x43>
c001797d:	c7 05 10 a5 02 c0 4a ea 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001ea4a
c0017987:	c7 05 0c a5 02 c0 5b ea 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001ea5b
c0017991:	83 c4 0c             	add    esp,0xc
c0017994:	e9 d3 70 00 00       	jmp    c001ea6c <avxInit>
c0017999:	e8 12 74 00 00       	call   c001edb0 <absolutelyNoChanceInHell>
c001799e:	85 c0                	test   eax,eax
c00179a0:	74 1c                	je     c00179be <HalInitialiseCoprocessor()+0x68>
c00179a2:	c7 05 10 a5 02 c0 c8 ed 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001edc8
c00179ac:	c7 05 0c a5 02 c0 d0 ed 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001edd0
c00179b6:	83 c4 0c             	add    esp,0xc
c00179b9:	e9 1a 74 00 00       	jmp    c001edd8 <sseInit>
c00179be:	e8 33 74 00 00       	call   c001edf6 <x87Detect>
c00179c3:	85 c0                	test   eax,eax
c00179c5:	74 1c                	je     c00179e3 <HalInitialiseCoprocessor()+0x8d>
c00179c7:	c7 05 10 a5 02 c0 11 ee 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001ee11
c00179d1:	c7 05 0c a5 02 c0 18 ee 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001ee18
c00179db:	83 c4 0c             	add    esp,0xc
c00179de:	e9 3c 74 00 00       	jmp    c001ee1f <x87Init>
c00179e3:	c7 05 10 a5 02 c0 6a 72 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001726a
c00179ed:	c7 05 0c a5 02 c0 6a 72 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001726a
c00179f7:	0f 20 c0             	mov    eax,cr0
c00179fa:	83 c8 04             	or     eax,0x4
c00179fd:	0f 22 c0             	mov    cr0,eax
c0017a00:	83 c4 0c             	add    esp,0xc
c0017a03:	c3                   	ret    

c0017a04 <HalPanic(char const*)>:
c0017a04:	53                   	push   ebx
c0017a05:	83 ec 10             	sub    esp,0x10
c0017a08:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017a0c:	fa                   	cli    
c0017a0d:	53                   	push   ebx
c0017a0e:	68 63 25 02 c0       	push   0xc0022563
c0017a13:	e8 f2 2e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017a18:	a1 04 a5 02 c0       	mov    eax,ds:0xc002a504
c0017a1d:	83 c4 10             	add    esp,0x10
c0017a20:	85 c0                	test   eax,eax
c0017a22:	74 09                	je     c0017a2d <HalPanic(char const*)+0x29>
c0017a24:	83 ec 0c             	sub    esp,0xc
c0017a27:	53                   	push   ebx
c0017a28:	ff d0                	call   eax
c0017a2a:	83 c4 10             	add    esp,0x10
c0017a2d:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017a32:	85 c0                	test   eax,eax
c0017a34:	0f 84 dc 00 00 00    	je     c0017b16 <HalPanic(char const*)+0x112>
c0017a3a:	52                   	push   edx
c0017a3b:	6a 01                	push   0x1
c0017a3d:	6a 0f                	push   0xf
c0017a3f:	50                   	push   eax
c0017a40:	e8 85 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017a45:	59                   	pop    ecx
c0017a46:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a4c:	e8 69 0d ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017a51:	58                   	pop    eax
c0017a52:	5a                   	pop    edx
c0017a53:	68 64 08 02 c0       	push   0xc0020864
c0017a58:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a5e:	e8 9f 0b ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017a63:	83 c4 0c             	add    esp,0xc
c0017a66:	6a 01                	push   0x1
c0017a68:	6a 0f                	push   0xf
c0017a6a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a70:	e8 55 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017a75:	59                   	pop    ecx
c0017a76:	58                   	pop    eax
c0017a77:	68 7c 25 02 c0       	push   0xc002257c
c0017a7c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a82:	e8 25 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a87:	83 c4 0c             	add    esp,0xc
c0017a8a:	6a 0f                	push   0xf
c0017a8c:	6a 01                	push   0x1
c0017a8e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a94:	e8 31 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017a99:	58                   	pop    eax
c0017a9a:	5a                   	pop    edx
c0017a9b:	68 85 25 02 c0       	push   0xc0022585
c0017aa0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017aa6:	e8 01 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017aab:	83 c4 0c             	add    esp,0xc
c0017aae:	6a 01                	push   0x1
c0017ab0:	6a 0f                	push   0xf
c0017ab2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ab8:	e8 0d 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017abd:	59                   	pop    ecx
c0017abe:	58                   	pop    eax
c0017abf:	68 c9 25 02 c0       	push   0xc00225c9
c0017ac4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017aca:	e8 dd 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017acf:	58                   	pop    eax
c0017ad0:	5a                   	pop    edx
c0017ad1:	68 92 25 02 c0       	push   0xc0022592
c0017ad6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017adc:	e8 cb 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017ae1:	59                   	pop    ecx
c0017ae2:	58                   	pop    eax
c0017ae3:	68 cc 25 02 c0       	push   0xc00225cc
c0017ae8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017aee:	e8 b9 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017af3:	58                   	pop    eax
c0017af4:	5a                   	pop    edx
c0017af5:	53                   	push   ebx
c0017af6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017afc:	e8 ab 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b01:	59                   	pop    ecx
c0017b02:	5b                   	pop    ebx
c0017b03:	68 c9 25 02 c0       	push   0xc00225c9
c0017b08:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b0e:	e8 99 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b13:	83 c4 10             	add    esp,0x10
c0017b16:	eb fe                	jmp    c0017b16 <HalPanic(char const*)+0x112>

c0017b18 <HalQueryPerformanceCounter()>:
c0017b18:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b1d:	31 d2                	xor    edx,edx
c0017b1f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017b25:	31 c0                	xor    eax,eax
c0017b27:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017b2e:	74 02                	je     c0017b32 <HalQueryPerformanceCounter()+0x1a>
c0017b30:	0f 31                	rdtsc  
c0017b32:	c3                   	ret    

c0017b33 <HalInitialise()>:
c0017b33:	53                   	push   ebx
c0017b34:	83 ec 08             	sub    esp,0x8
c0017b37:	e8 29 52 ff ff       	call   c000cd65 <setupINTS()>
c0017b3c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b41:	80 3d 40 98 02 c0 00 	cmp    BYTE PTR ds:0xc0029840,0x0
c0017b48:	75 0f                	jne    c0017b59 <HalInitialise()+0x26>
c0017b4a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017b50:	83 e2 fe             	and    edx,0xfffffffe
c0017b53:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017b59:	c6 05 00 a5 02 c0 00 	mov    BYTE PTR ds:0xc002a500,0x0
c0017b60:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017b66:	83 e2 fe             	and    edx,0xfffffffe
c0017b69:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017b6f:	e8 a0 02 00 00       	call   c0017e14 <picOpen()>
c0017b74:	80 3d 00 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a500,0x0
c0017b7b:	74 0a                	je     c0017b87 <HalInitialise()+0x54>
c0017b7d:	e8 e2 01 00 00       	call   c0017d64 <picDisable()>
c0017b82:	e8 0d 68 00 00       	call   c001e394 <apicOpen()>
c0017b87:	50                   	push   eax
c0017b88:	bb 0f 00 00 00       	mov    ebx,0xf
c0017b8d:	6a 00                	push   0x0
c0017b8f:	68 da 77 01 c0       	push   0xc00177da
c0017b94:	6a 00                	push   0x0
c0017b96:	e8 93 4f ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017b9b:	83 c4 0c             	add    esp,0xc
c0017b9e:	6a 00                	push   0x0
c0017ba0:	68 da 77 01 c0       	push   0xc00177da
c0017ba5:	6a 01                	push   0x1
c0017ba7:	e8 82 4f ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bac:	83 c4 0c             	add    esp,0xc
c0017baf:	6a 00                	push   0x0
c0017bb1:	68 6b 72 01 c0       	push   0xc001726b
c0017bb6:	6a 02                	push   0x2
c0017bb8:	e8 71 4f ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bbd:	83 c4 0c             	add    esp,0xc
c0017bc0:	6a 00                	push   0x0
c0017bc2:	68 da 77 01 c0       	push   0xc00177da
c0017bc7:	6a 03                	push   0x3
c0017bc9:	e8 60 4f ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bce:	83 c4 0c             	add    esp,0xc
c0017bd1:	6a 00                	push   0x0
c0017bd3:	68 da 77 01 c0       	push   0xc00177da
c0017bd8:	6a 04                	push   0x4
c0017bda:	e8 4f 4f ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bdf:	83 c4 0c             	add    esp,0xc
c0017be2:	6a 00                	push   0x0
c0017be4:	68 da 77 01 c0       	push   0xc00177da
c0017be9:	6a 05                	push   0x5
c0017beb:	e8 3e 4f ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bf0:	83 c4 0c             	add    esp,0xc
c0017bf3:	6a 00                	push   0x0
c0017bf5:	68 0e 78 01 c0       	push   0xc001780e
c0017bfa:	6a 06                	push   0x6
c0017bfc:	e8 2d 4f ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c01:	83 c4 0c             	add    esp,0xc
c0017c04:	6a 00                	push   0x0
c0017c06:	68 84 72 01 c0       	push   0xc0017284
c0017c0b:	6a 08                	push   0x8
c0017c0d:	e8 1c 4f ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c12:	83 c4 0c             	add    esp,0xc
c0017c15:	6a 00                	push   0x0
c0017c17:	68 da 77 01 c0       	push   0xc00177da
c0017c1c:	6a 09                	push   0x9
c0017c1e:	e8 0b 4f ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c23:	83 c4 0c             	add    esp,0xc
c0017c26:	6a 00                	push   0x0
c0017c28:	68 da 77 01 c0       	push   0xc00177da
c0017c2d:	6a 0a                	push   0xa
c0017c2f:	e8 fa 4e ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c34:	83 c4 0c             	add    esp,0xc
c0017c37:	6a 00                	push   0x0
c0017c39:	68 da 77 01 c0       	push   0xc00177da
c0017c3e:	6a 0b                	push   0xb
c0017c40:	e8 e9 4e ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c45:	83 c4 0c             	add    esp,0xc
c0017c48:	6a 00                	push   0x0
c0017c4a:	68 ea 76 01 c0       	push   0xc00176ea
c0017c4f:	6a 0d                	push   0xd
c0017c51:	e8 d8 4e ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c56:	83 c4 0c             	add    esp,0xc
c0017c59:	6a 00                	push   0x0
c0017c5b:	68 51 77 01 c0       	push   0xc0017751
c0017c60:	6a 0e                	push   0xe
c0017c62:	e8 c7 4e ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c67:	83 c4 10             	add    esp,0x10
c0017c6a:	50                   	push   eax
c0017c6b:	6a 00                	push   0x0
c0017c6d:	68 da 77 01 c0       	push   0xc00177da
c0017c72:	53                   	push   ebx
c0017c73:	43                   	inc    ebx
c0017c74:	e8 b5 4e ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c79:	83 c4 10             	add    esp,0x10
c0017c7c:	83 fb 1e             	cmp    ebx,0x1e
c0017c7f:	75 e9                	jne    c0017c6a <HalInitialise()+0x137>
c0017c81:	50                   	push   eax
c0017c82:	6a 00                	push   0x0
c0017c84:	68 6b 24 01 c0       	push   0xc001246b
c0017c89:	6a 60                	push   0x60
c0017c8b:	e8 9e 4e ff ff       	call   c000cb2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c90:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017c95:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017c9f:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017ca6:	e8 28 fe fe ff       	call   c0007ad3 <malloc>
c0017cab:	89 04 24             	mov    DWORD PTR [esp],eax
c0017cae:	89 c3                	mov    ebx,eax
c0017cb0:	e8 37 09 00 00       	call   c00185ec <RTC::RTC()>
c0017cb5:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017cbf:	5a                   	pop    edx
c0017cc0:	59                   	pop    ecx
c0017cc1:	53                   	push   ebx
c0017cc2:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017cc8:	e8 2b 49 ff ff       	call   c000c5f8 <Device::addChild(Device*)>
c0017ccd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ccf:	6a 00                	push   0x0
c0017cd1:	6a 00                	push   0x0
c0017cd3:	6a 00                	push   0x0
c0017cd5:	53                   	push   ebx
c0017cd6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017cd9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017cde:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017ce4:	83 c4 28             	add    esp,0x28
c0017ce7:	5b                   	pop    ebx
c0017ce8:	c3                   	ret    

c0017ce9 <HalMakeBeep(int)>:
c0017ce9:	53                   	push   ebx
c0017cea:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017cee:	85 db                	test   ebx,ebx
c0017cf0:	75 07                	jne    c0017cf9 <HalMakeBeep(int)+0x10>
c0017cf2:	e4 61                	in     al,0x61
c0017cf4:	83 e0 fc             	and    eax,0xfffffffc
c0017cf7:	eb 26                	jmp    c0017d1f <HalMakeBeep(int)+0x36>
c0017cf9:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017cfe:	99                   	cdq    
c0017cff:	f7 fb                	idiv   ebx
c0017d01:	89 c1                	mov    ecx,eax
c0017d03:	b0 b6                	mov    al,0xb6
c0017d05:	e6 43                	out    0x43,al
c0017d07:	88 c8                	mov    al,cl
c0017d09:	e6 42                	out    0x42,al
c0017d0b:	89 c8                	mov    eax,ecx
c0017d0d:	c1 e8 08             	shr    eax,0x8
c0017d10:	e6 42                	out    0x42,al
c0017d12:	e4 61                	in     al,0x61
c0017d14:	89 c2                	mov    edx,eax
c0017d16:	83 ca 03             	or     edx,0x3
c0017d19:	38 d0                	cmp    al,dl
c0017d1b:	74 04                	je     c0017d21 <HalMakeBeep(int)+0x38>
c0017d1d:	88 d0                	mov    al,dl
c0017d1f:	e6 61                	out    0x61,al
c0017d21:	5b                   	pop    ebx
c0017d22:	c3                   	ret    

c0017d23 <HalGetRand()>:
c0017d23:	31 c0                	xor    eax,eax
c0017d25:	c3                   	ret    

c0017d26 <HalEndOfInterrupt(int)>:
c0017d26:	80 3d 00 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a500,0x0
c0017d2d:	74 23                	je     c0017d52 <HalEndOfInterrupt(int)+0x2c>
c0017d2f:	83 ec 14             	sub    esp,0x14
c0017d32:	6a 1b                	push   0x1b
c0017d34:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d3a:	e8 a3 f3 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017d3f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017d44:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017d4e:	83 c4 1c             	add    esp,0x1c
c0017d51:	c3                   	ret    
c0017d52:	e9 41 02 00 00       	jmp    c0017f98 <picEOI(int)>

c0017d57 <HalRestart()>:
c0017d57:	c3                   	ret    

c0017d58 <HalShutdown()>:
c0017d58:	c3                   	ret    

c0017d59 <HalSleep()>:
c0017d59:	c3                   	ret    
c0017d5a:	66 90                	xchg   ax,ax

c0017d5c <picIoWait()>:
c0017d5c:	eb 00                	jmp    c0017d5e <picIoWait()+0x2>
c0017d5e:	eb 00                	jmp    c0017d60 <picIoWait()+0x4>
c0017d60:	90                   	nop
c0017d61:	c3                   	ret    
c0017d62:	66 90                	xchg   ax,ax

c0017d64 <picDisable()>:
c0017d64:	83 ec 10             	sub    esp,0x10
c0017d67:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017d6e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017d73:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017d77:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017d7c:	ee                   	out    dx,al
c0017d7d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017d84:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017d89:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017d8d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017d92:	ee                   	out    dx,al
c0017d93:	90                   	nop
c0017d94:	83 c4 10             	add    esp,0x10
c0017d97:	c3                   	ret    

c0017d98 <picGetIRQReg(int)>:
c0017d98:	83 ec 10             	sub    esp,0x10
c0017d9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d9f:	0f b6 c0             	movzx  eax,al
c0017da2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017da9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017dad:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017db1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017db6:	ee                   	out    dx,al
c0017db7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017dbb:	0f b6 c0             	movzx  eax,al
c0017dbe:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017dc5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017dc9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017dcd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017dd2:	ee                   	out    dx,al
c0017dd3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017dda:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017ddf:	89 c2                	mov    edx,eax
c0017de1:	ec                   	in     al,dx
c0017de2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017de6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017dea:	0f b6 c0             	movzx  eax,al
c0017ded:	c1 e0 08             	shl    eax,0x8
c0017df0:	89 c1                	mov    ecx,eax
c0017df2:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017df9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017dfe:	89 c2                	mov    edx,eax
c0017e00:	ec                   	in     al,dx
c0017e01:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017e05:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017e09:	0f b6 c0             	movzx  eax,al
c0017e0c:	09 c8                	or     eax,ecx
c0017e0e:	83 c4 10             	add    esp,0x10
c0017e11:	c3                   	ret    
c0017e12:	66 90                	xchg   ax,ax

c0017e14 <picOpen()>:
c0017e14:	83 ec 50             	sub    esp,0x50
c0017e17:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017e1e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017e23:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017e27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017e2b:	ee                   	out    dx,al
c0017e2c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017e33:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017e38:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017e3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e40:	ee                   	out    dx,al
c0017e41:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017e49:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017e51:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017e58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e5c:	89 c2                	mov    edx,eax
c0017e5e:	ec                   	in     al,dx
c0017e5f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017e63:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017e67:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017e6b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e76:	89 c2                	mov    edx,eax
c0017e78:	ec                   	in     al,dx
c0017e79:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017e7d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017e81:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017e85:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017e8c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017e91:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017e95:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e99:	ee                   	out    dx,al
c0017e9a:	e8 bd fe ff ff       	call   c0017d5c <picIoWait()>
c0017e9f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017ea6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017eab:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017eaf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017eb3:	ee                   	out    dx,al
c0017eb4:	e8 a3 fe ff ff       	call   c0017d5c <picIoWait()>
c0017eb9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017ebd:	0f b6 c0             	movzx  eax,al
c0017ec0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017ec7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017ecb:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017ecf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ed3:	ee                   	out    dx,al
c0017ed4:	e8 83 fe ff ff       	call   c0017d5c <picIoWait()>
c0017ed9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017edd:	0f b6 c0             	movzx  eax,al
c0017ee0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017ee7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017eeb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017eef:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017ef3:	ee                   	out    dx,al
c0017ef4:	e8 63 fe ff ff       	call   c0017d5c <picIoWait()>
c0017ef9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017f00:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017f05:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017f09:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f0d:	ee                   	out    dx,al
c0017f0e:	e8 49 fe ff ff       	call   c0017d5c <picIoWait()>
c0017f13:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017f1a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017f1f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017f23:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017f27:	ee                   	out    dx,al
c0017f28:	e8 2f fe ff ff       	call   c0017d5c <picIoWait()>
c0017f2d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017f34:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017f39:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017f3d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017f41:	ee                   	out    dx,al
c0017f42:	e8 15 fe ff ff       	call   c0017d5c <picIoWait()>
c0017f47:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017f4e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017f53:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017f57:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017f5b:	ee                   	out    dx,al
c0017f5c:	e8 fb fd ff ff       	call   c0017d5c <picIoWait()>
c0017f61:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017f66:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017f6d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017f71:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017f75:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017f79:	ee                   	out    dx,al
c0017f7a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017f7f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017f86:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017f8a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017f8e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017f92:	ee                   	out    dx,al
c0017f93:	90                   	nop
c0017f94:	83 c4 50             	add    esp,0x50
c0017f97:	c3                   	ret    

c0017f98 <picEOI(int)>:
c0017f98:	83 ec 10             	sub    esp,0x10
c0017f9b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017fa0:	75 1e                	jne    c0017fc0 <picEOI(int)+0x28>
c0017fa2:	6a 0b                	push   0xb
c0017fa4:	e8 ef fd ff ff       	call   c0017d98 <picGetIRQReg(int)>
c0017fa9:	83 c4 04             	add    esp,0x4
c0017fac:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0017fb1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0017fb6:	25 80 00 00 00       	and    eax,0x80
c0017fbb:	74 73                	je     c0018030 <picEOI(int)+0x98>
c0017fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0017fc0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017fc5:	75 31                	jne    c0017ff8 <picEOI(int)+0x60>
c0017fc7:	6a 0b                	push   0xb
c0017fc9:	e8 ca fd ff ff       	call   c0017d98 <picGetIRQReg(int)>
c0017fce:	83 c4 04             	add    esp,0x4
c0017fd1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017fd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fda:	98                   	cwde   
c0017fdb:	85 c0                	test   eax,eax
c0017fdd:	78 19                	js     c0017ff8 <picEOI(int)+0x60>
c0017fdf:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0017fe6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0017feb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017fef:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017ff4:	ee                   	out    dx,al
c0017ff5:	eb 3d                	jmp    c0018034 <picEOI(int)+0x9c>
c0017ff7:	90                   	nop
c0017ff8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017ffd:	7e 19                	jle    c0018018 <picEOI(int)+0x80>
c0017fff:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018006:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001800b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001800f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018014:	ee                   	out    dx,al
c0018015:	8d 76 00             	lea    esi,[esi+0x0]
c0018018:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001801f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018024:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018028:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001802d:	ee                   	out    dx,al
c001802e:	eb 04                	jmp    c0018034 <picEOI(int)+0x9c>
c0018030:	90                   	nop
c0018031:	8d 76 00             	lea    esi,[esi+0x0]
c0018034:	83 c4 10             	add    esp,0x10
c0018037:	c3                   	ret    

c0018038 <RTC::open(int, int, void*)>:
c0018038:	31 c0                	xor    eax,eax
c001803a:	c3                   	ret    
c001803b:	90                   	nop

c001803c <RTC::close(int, int, void*)>:
c001803c:	31 c0                	xor    eax,eax
c001803e:	c3                   	ret    
c001803f:	90                   	nop

c0018040 <RTC::timeInSecondsUTC()>:
c0018040:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018044:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001804a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018050:	c3                   	ret    
c0018051:	90                   	nop

c0018052 <RTC::timeInDatetimeUTC()>:
c0018052:	53                   	push   ebx
c0018053:	83 ec 14             	sub    esp,0x14
c0018056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001805a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001805e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018060:	50                   	push   eax
c0018061:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018064:	83 c4 0c             	add    esp,0xc
c0018067:	52                   	push   edx
c0018068:	50                   	push   eax
c0018069:	53                   	push   ebx
c001806a:	e8 fd 42 ff ff       	call   c000c36c <secondsToDatetime(unsigned long long)>
c001806f:	89 d8                	mov    eax,ebx
c0018071:	83 c4 14             	add    esp,0x14
c0018074:	5b                   	pop    ebx
c0018075:	c2 04 00             	ret    0x4

c0018078 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018078:	56                   	push   esi
c0018079:	53                   	push   ebx
c001807a:	83 ec 14             	sub    esp,0x14
c001807d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018081:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018083:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018086:	8d 44 24 08          	lea    eax,[esp+0x8]
c001808a:	52                   	push   edx
c001808b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001808f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018093:	50                   	push   eax
c0018094:	e8 d3 42 ff ff       	call   c000c36c <secondsToDatetime(unsigned long long)>
c0018099:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001809d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00180a9:	89 f0                	mov    eax,esi
c00180ab:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00180af:	83 c4 20             	add    esp,0x20
c00180b2:	5b                   	pop    ebx
c00180b3:	5e                   	pop    esi
c00180b4:	ff e0                	jmp    eax

c00180b6 <RTC::~RTC()>:
c00180b6:	83 ec 0c             	sub    esp,0xc
c00180b9:	ba 68 26 02 c0       	mov    edx,0xc0022668
c00180be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180c2:	89 10                	mov    DWORD PTR [eax],edx
c00180c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180c8:	83 ec 0c             	sub    esp,0xc
c00180cb:	50                   	push   eax
c00180cc:	e8 27 40 ff ff       	call   c000c0f8 <Clock::~Clock()>
c00180d1:	83 c4 10             	add    esp,0x10
c00180d4:	90                   	nop
c00180d5:	83 c4 0c             	add    esp,0xc
c00180d8:	c3                   	ret    
c00180d9:	90                   	nop

c00180da <RTC::~RTC()>:
c00180da:	83 ec 0c             	sub    esp,0xc
c00180dd:	83 ec 0c             	sub    esp,0xc
c00180e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180e4:	e8 cd ff ff ff       	call   c00180b6 <RTC::~RTC()>
c00180e9:	83 c4 10             	add    esp,0x10
c00180ec:	83 ec 08             	sub    esp,0x8
c00180ef:	68 60 01 00 00       	push   0x160
c00180f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180f8:	e8 0f 27 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00180fd:	83 c4 10             	add    esp,0x10
c0018100:	83 c4 0c             	add    esp,0xc
c0018103:	c3                   	ret    

c0018104 <RTC::get_update_in_progress_flag()>:
c0018104:	83 ec 14             	sub    esp,0x14
c0018107:	6a 0a                	push   0xa
c0018109:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001810f:	e8 86 f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018114:	83 c4 1c             	add    esp,0x1c
c0018117:	0f b6 c0             	movzx  eax,al
c001811a:	c1 e8 07             	shr    eax,0x7
c001811d:	c3                   	ret    

c001811e <RTC::completeRTCRefresh()>:
c001811e:	55                   	push   ebp
c001811f:	57                   	push   edi
c0018120:	56                   	push   esi
c0018121:	53                   	push   ebx
c0018122:	83 ec 3c             	sub    esp,0x3c
c0018125:	8b 1d 4c 95 02 c0    	mov    ebx,DWORD PTR ds:0xc002954c
c001812b:	83 ec 0c             	sub    esp,0xc
c001812e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018132:	e8 cd ff ff ff       	call   c0018104 <RTC::get_update_in_progress_flag()>
c0018137:	83 c4 10             	add    esp,0x10
c001813a:	84 c0                	test   al,al
c001813c:	74 0e                	je     c001814c <RTC::completeRTCRefresh()+0x2e>
c001813e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018144:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c001814a:	73 df                	jae    c001812b <RTC::completeRTCRefresh()+0xd>
c001814c:	50                   	push   eax
c001814d:	50                   	push   eax
c001814e:	6a 00                	push   0x0
c0018150:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018156:	e8 3f f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001815b:	89 c7                	mov    edi,eax
c001815d:	58                   	pop    eax
c001815e:	5a                   	pop    edx
c001815f:	6a 02                	push   0x2
c0018161:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018167:	e8 2e f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001816c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018170:	59                   	pop    ecx
c0018171:	5b                   	pop    ebx
c0018172:	6a 04                	push   0x4
c0018174:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001817a:	e8 1b f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001817f:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018183:	5e                   	pop    esi
c0018184:	5d                   	pop    ebp
c0018185:	6a 07                	push   0x7
c0018187:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001818d:	e8 08 f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018192:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018196:	58                   	pop    eax
c0018197:	5a                   	pop    edx
c0018198:	6a 08                	push   0x8
c001819a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181a0:	e8 f5 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181a5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00181a9:	59                   	pop    ecx
c00181aa:	5b                   	pop    ebx
c00181ab:	6a 09                	push   0x9
c00181ad:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181b3:	e8 e2 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181b8:	0f b6 c0             	movzx  eax,al
c00181bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00181bf:	83 c4 10             	add    esp,0x10
c00181c2:	8b 1d 4c 95 02 c0    	mov    ebx,DWORD PTR ds:0xc002954c
c00181c8:	83 ec 0c             	sub    esp,0xc
c00181cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00181cf:	e8 30 ff ff ff       	call   c0018104 <RTC::get_update_in_progress_flag()>
c00181d4:	83 c4 10             	add    esp,0x10
c00181d7:	84 c0                	test   al,al
c00181d9:	74 0e                	je     c00181e9 <RTC::completeRTCRefresh()+0xcb>
c00181db:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00181e1:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c00181e7:	73 df                	jae    c00181c8 <RTC::completeRTCRefresh()+0xaa>
c00181e9:	51                   	push   ecx
c00181ea:	51                   	push   ecx
c00181eb:	6a 00                	push   0x0
c00181ed:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181f3:	e8 a2 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181f8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00181fc:	5b                   	pop    ebx
c00181fd:	5e                   	pop    esi
c00181fe:	6a 02                	push   0x2
c0018200:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018206:	e8 8f ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001820b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001820f:	5d                   	pop    ebp
c0018210:	58                   	pop    eax
c0018211:	6a 04                	push   0x4
c0018213:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018219:	e8 7c ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001821e:	88 c3                	mov    bl,al
c0018220:	58                   	pop    eax
c0018221:	5a                   	pop    edx
c0018222:	6a 07                	push   0x7
c0018224:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001822a:	e8 6b ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001822f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018233:	59                   	pop    ecx
c0018234:	5e                   	pop    esi
c0018235:	6a 08                	push   0x8
c0018237:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001823d:	e8 58 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018242:	5d                   	pop    ebp
c0018243:	89 c6                	mov    esi,eax
c0018245:	58                   	pop    eax
c0018246:	6a 09                	push   0x9
c0018248:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001824e:	e8 47 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018253:	89 f9                	mov    ecx,edi
c0018255:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018259:	83 c4 10             	add    esp,0x10
c001825c:	0f b6 e8             	movzx  ebp,al
c001825f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018264:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001826c:	74 27                	je     c0018295 <RTC::completeRTCRefresh()+0x177>
c001826e:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018272:	89 f0                	mov    eax,esi
c0018274:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018278:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001827c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018280:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018284:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018288:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001828c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018290:	e9 2d ff ff ff       	jmp    c00181c2 <RTC::completeRTCRefresh()+0xa4>
c0018295:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001829a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001829e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00182a2:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c00182a6:	75 c6                	jne    c001826e <RTC::completeRTCRefresh()+0x150>
c00182a8:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00182ad:	89 f1                	mov    ecx,esi
c00182af:	0f b6 fb             	movzx  edi,bl
c00182b2:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00182b6:	0f b6 c9             	movzx  ecx,cl
c00182b9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00182bd:	89 f1                	mov    ecx,esi
c00182bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00182c3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00182c7:	0f 94 c2             	sete   dl
c00182ca:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00182ce:	0f 94 c0             	sete   al
c00182d1:	21 d0                	and    eax,edx
c00182d3:	31 d2                	xor    edx,edx
c00182d5:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00182d9:	0f 94 c2             	sete   dl
c00182dc:	85 c2                	test   edx,eax
c00182de:	74 8e                	je     c001826e <RTC::completeRTCRefresh()+0x150>
c00182e0:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00182e4:	75 88                	jne    c001826e <RTC::completeRTCRefresh()+0x150>
c00182e6:	52                   	push   edx
c00182e7:	52                   	push   edx
c00182e8:	6a 0b                	push   0xb
c00182ea:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182f0:	e8 a5 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182f5:	83 c4 10             	add    esp,0x10
c00182f8:	a8 04                	test   al,0x4
c00182fa:	75 7a                	jne    c0018376 <RTC::completeRTCRefresh()+0x258>
c00182fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018300:	c1 ef 04             	shr    edi,0x4
c0018303:	83 e6 0f             	and    esi,0xf
c0018306:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001830a:	c1 ed 04             	shr    ebp,0x4
c001830d:	6b ed 0a             	imul   ebp,ebp,0xa
c0018310:	c1 ea 04             	shr    edx,0x4
c0018313:	6b d2 0a             	imul   edx,edx,0xa
c0018316:	83 e1 0f             	and    ecx,0xf
c0018319:	01 d1                	add    ecx,edx
c001831b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001831f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018323:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018327:	c1 ea 04             	shr    edx,0x4
c001832a:	6b d2 0a             	imul   edx,edx,0xa
c001832d:	83 e1 0f             	and    ecx,0xf
c0018330:	01 d1                	add    ecx,edx
c0018332:	89 fa                	mov    edx,edi
c0018334:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018338:	83 e2 07             	and    edx,0x7
c001833b:	89 d9                	mov    ecx,ebx
c001833d:	6b d2 0a             	imul   edx,edx,0xa
c0018340:	83 e1 0f             	and    ecx,0xf
c0018343:	83 e3 80             	and    ebx,0xffffff80
c0018346:	01 d1                	add    ecx,edx
c0018348:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001834c:	09 cb                	or     ebx,ecx
c001834e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018352:	c1 ea 04             	shr    edx,0x4
c0018355:	6b d2 0a             	imul   edx,edx,0xa
c0018358:	83 e1 0f             	and    ecx,0xf
c001835b:	01 d1                	add    ecx,edx
c001835d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018361:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018365:	c1 ea 04             	shr    edx,0x4
c0018368:	6b d2 0a             	imul   edx,edx,0xa
c001836b:	01 d6                	add    esi,edx
c001836d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018371:	83 e2 0f             	and    edx,0xf
c0018374:	01 d5                	add    ebp,edx
c0018376:	a8 02                	test   al,0x2
c0018378:	75 15                	jne    c001838f <RTC::completeRTCRefresh()+0x271>
c001837a:	f6 c3 80             	test   bl,0x80
c001837d:	74 10                	je     c001838f <RTC::completeRTCRefresh()+0x271>
c001837f:	83 e3 7f             	and    ebx,0x7f
c0018382:	b9 18 00 00 00       	mov    ecx,0x18
c0018387:	8d 43 0c             	lea    eax,[ebx+0xc]
c001838a:	99                   	cdq    
c001838b:	f7 f9                	idiv   ecx
c001838d:	88 d3                	mov    bl,dl
c001838f:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018395:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c001839b:	77 06                	ja     c00183a3 <RTC::completeRTCRefresh()+0x285>
c001839d:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00183a3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00183a8:	31 c9                	xor    ecx,ecx
c00183aa:	31 d2                	xor    edx,edx
c00183ac:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00183b0:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00183b4:	89 cd                	mov    ebp,ecx
c00183b6:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c00183ba:	c1 e7 10             	shl    edi,0x10
c00183bd:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00183c3:	c1 e0 10             	shl    eax,0x10
c00183c6:	09 c5                	or     ebp,eax
c00183c8:	89 e9                	mov    ecx,ebp
c00183ca:	0f b7 c2             	movzx  eax,dx
c00183cd:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00183d1:	09 f8                	or     eax,edi
c00183d3:	89 c2                	mov    edx,eax
c00183d5:	50                   	push   eax
c00183d6:	50                   	push   eax
c00183d7:	88 d9                	mov    cl,bl
c00183d9:	51                   	push   ecx
c00183da:	52                   	push   edx
c00183db:	e8 07 3e ff ff       	call   c000c1e7 <datetimeToSeconds(datetime_t)>
c00183e0:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00183e4:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00183ea:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00183f0:	83 c4 4c             	add    esp,0x4c
c00183f3:	5b                   	pop    ebx
c00183f4:	5e                   	pop    esi
c00183f5:	5f                   	pop    edi
c00183f6:	5d                   	pop    ebp
c00183f7:	c3                   	ret    

c00183f8 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00183f8:	55                   	push   ebp
c00183f9:	57                   	push   edi
c00183fa:	56                   	push   esi
c00183fb:	53                   	push   ebx
c00183fc:	83 ec 30             	sub    esp,0x30
c00183ff:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018403:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018407:	6a 00                	push   0x0
c0018409:	6a 00                	push   0x0
c001840b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018411:	e8 9c ee fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018416:	83 c4 0c             	add    esp,0xc
c0018419:	6a 00                	push   0x0
c001841b:	6a 02                	push   0x2
c001841d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018423:	e8 8a ee fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018428:	89 f8                	mov    eax,edi
c001842a:	89 f9                	mov    ecx,edi
c001842c:	0f b6 c4             	movzx  eax,ah
c001842f:	31 d2                	xor    edx,edx
c0018431:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018435:	c1 e9 10             	shr    ecx,0x10
c0018438:	89 f0                	mov    eax,esi
c001843a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001843e:	89 f0                	mov    eax,esi
c0018440:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018444:	0f b6 c4             	movzx  eax,ah
c0018447:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001844b:	89 f0                	mov    eax,esi
c001844d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018451:	c1 e8 10             	shr    eax,0x10
c0018454:	b9 64 00 00 00       	mov    ecx,0x64
c0018459:	f7 f1                	div    ecx
c001845b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001845f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018463:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018467:	59                   	pop    ecx
c0018468:	5b                   	pop    ebx
c0018469:	89 fb                	mov    ebx,edi
c001846b:	6a 0b                	push   0xb
c001846d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018473:	e8 22 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018478:	83 c4 10             	add    esp,0x10
c001847b:	a8 04                	test   al,0x4
c001847d:	89 c5                	mov    ebp,eax
c001847f:	75 6e                	jne    c00184ef <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018481:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018485:	31 d2                	xor    edx,edx
c0018487:	0f b6 c1             	movzx  eax,cl
c001848a:	b9 0a 00 00 00       	mov    ecx,0xa
c001848f:	f7 f1                	div    ecx
c0018491:	c1 e0 04             	shl    eax,0x4
c0018494:	09 d0                	or     eax,edx
c0018496:	31 d2                	xor    edx,edx
c0018498:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001849c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00184a1:	f7 f1                	div    ecx
c00184a3:	c1 e0 04             	shl    eax,0x4
c00184a6:	09 d0                	or     eax,edx
c00184a8:	31 d2                	xor    edx,edx
c00184aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00184ae:	0f b6 c3             	movzx  eax,bl
c00184b1:	f7 f1                	div    ecx
c00184b3:	c1 e0 04             	shl    eax,0x4
c00184b6:	09 d0                	or     eax,edx
c00184b8:	31 d2                	xor    edx,edx
c00184ba:	89 c3                	mov    ebx,eax
c00184bc:	89 f0                	mov    eax,esi
c00184be:	0f b6 c0             	movzx  eax,al
c00184c1:	f7 f1                	div    ecx
c00184c3:	c1 e0 04             	shl    eax,0x4
c00184c6:	09 d0                	or     eax,edx
c00184c8:	31 d2                	xor    edx,edx
c00184ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00184ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00184d3:	f7 f1                	div    ecx
c00184d5:	c1 e0 04             	shl    eax,0x4
c00184d8:	09 d0                	or     eax,edx
c00184da:	31 d2                	xor    edx,edx
c00184dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00184e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184e4:	f7 f1                	div    ecx
c00184e6:	c1 e0 04             	shl    eax,0x4
c00184e9:	09 d0                	or     eax,edx
c00184eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184ef:	83 e5 02             	and    ebp,0x2
c00184f2:	75 1e                	jne    c0018512 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00184f4:	0f b6 c3             	movzx  eax,bl
c00184f7:	83 f8 0b             	cmp    eax,0xb
c00184fa:	76 10                	jbe    c001850c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00184fc:	8d 53 f4             	lea    edx,[ebx-0xc]
c00184ff:	84 d2                	test   dl,dl
c0018501:	88 d3                	mov    bl,dl
c0018503:	75 02                	jne    c0018507 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018505:	b3 0c                	mov    bl,0xc
c0018507:	83 cb 80             	or     ebx,0xffffff80
c001850a:	eb 06                	jmp    c0018512 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001850c:	85 c0                	test   eax,eax
c001850e:	75 02                	jne    c0018512 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018510:	b3 0c                	mov    bl,0xc
c0018512:	50                   	push   eax
c0018513:	0f b6 db             	movzx  ebx,bl
c0018516:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001851b:	52                   	push   edx
c001851c:	6a 00                	push   0x0
c001851e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018524:	e8 89 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018529:	83 c4 0c             	add    esp,0xc
c001852c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018531:	50                   	push   eax
c0018532:	6a 02                	push   0x2
c0018534:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001853a:	e8 73 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001853f:	83 c4 0c             	add    esp,0xc
c0018542:	53                   	push   ebx
c0018543:	6a 04                	push   0x4
c0018545:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001854b:	e8 62 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018550:	83 c4 0c             	add    esp,0xc
c0018553:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018558:	52                   	push   edx
c0018559:	6a 07                	push   0x7
c001855b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018561:	e8 4c ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018566:	83 c4 0c             	add    esp,0xc
c0018569:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001856e:	50                   	push   eax
c001856f:	6a 08                	push   0x8
c0018571:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018577:	e8 36 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001857c:	83 c4 0c             	add    esp,0xc
c001857f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018584:	55                   	push   ebp
c0018585:	6a 09                	push   0x9
c0018587:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001858d:	e8 20 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018592:	5a                   	pop    edx
c0018593:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018597:	e8 82 fb ff ff       	call   c001811e <RTC::completeRTCRefresh()>
c001859c:	83 c4 3c             	add    esp,0x3c
c001859f:	b0 01                	mov    al,0x1
c00185a1:	5b                   	pop    ebx
c00185a2:	5e                   	pop    esi
c00185a3:	5f                   	pop    edi
c00185a4:	5d                   	pop    ebp
c00185a5:	c3                   	ret    

c00185a6 <rtcIRQHandler(regs*, void*)>:
c00185a6:	53                   	push   ebx
c00185a7:	83 ec 10             	sub    esp,0x10
c00185aa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00185ae:	6a 0c                	push   0xc
c00185b0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185b6:	e8 df eb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00185bb:	83 c4 10             	add    esp,0x10
c00185be:	a8 80                	test   al,0x80
c00185c0:	74 24                	je     c00185e6 <rtcIRQHandler(regs*, void*)+0x40>
c00185c2:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00185c9:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00185d0:	66 ff 05 18 a5 02 c0 	inc    WORD PTR ds:0xc002a518
c00185d7:	75 0d                	jne    c00185e6 <rtcIRQHandler(regs*, void*)+0x40>
c00185d9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00185dd:	83 c4 08             	add    esp,0x8
c00185e0:	5b                   	pop    ebx
c00185e1:	e9 38 fb ff ff       	jmp    c001811e <RTC::completeRTCRefresh()>
c00185e6:	83 c4 08             	add    esp,0x8
c00185e9:	5b                   	pop    ebx
c00185ea:	c3                   	ret    
c00185eb:	90                   	nop

c00185ec <RTC::RTC()>:
c00185ec:	83 ec 1c             	sub    esp,0x1c
c00185ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185f3:	83 ec 08             	sub    esp,0x8
c00185f6:	68 4b 26 02 c0       	push   0xc002264b
c00185fb:	50                   	push   eax
c00185fc:	e8 c1 3a ff ff       	call   c000c0c2 <Clock::Clock(char const*)>
c0018601:	83 c4 10             	add    esp,0x10
c0018604:	ba 68 26 02 c0       	mov    edx,0xc0022668
c0018609:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001860d:	89 10                	mov    DWORD PTR [eax],edx
c001860f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018613:	83 ec 0c             	sub    esp,0xc
c0018616:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001861a:	6a 01                	push   0x1
c001861c:	68 a6 85 01 c0       	push   0xc00185a6
c0018621:	6a 08                	push   0x8
c0018623:	50                   	push   eax
c0018624:	e8 7b 3f ff ff       	call   c000c5a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018629:	83 c4 20             	add    esp,0x20
c001862c:	89 c2                	mov    edx,eax
c001862e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018632:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018638:	fa                   	cli    
c0018639:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001863e:	83 c0 01             	add    eax,0x1
c0018641:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0018646:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001864b:	83 ec 08             	sub    esp,0x8
c001864e:	6a 0b                	push   0xb
c0018650:	50                   	push   eax
c0018651:	e8 44 eb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018656:	83 c4 10             	add    esp,0x10
c0018659:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001865d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018662:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018666:	83 ca 10             	or     edx,0x10
c0018669:	0f b6 d2             	movzx  edx,dl
c001866c:	83 ec 04             	sub    esp,0x4
c001866f:	52                   	push   edx
c0018670:	6a 0b                	push   0xb
c0018672:	50                   	push   eax
c0018673:	e8 3a ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018678:	83 c4 10             	add    esp,0x10
c001867b:	83 ec 0c             	sub    esp,0xc
c001867e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018682:	e8 97 fa ff ff       	call   c001811e <RTC::completeRTCRefresh()>
c0018687:	83 c4 10             	add    esp,0x10
c001868a:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001868f:	83 e8 01             	sub    eax,0x1
c0018692:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0018697:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001869c:	85 c0                	test   eax,eax
c001869e:	75 01                	jne    c00186a1 <RTC::RTC()+0xb5>
c00186a0:	fb                   	sti    
c00186a1:	90                   	nop
c00186a2:	83 c4 1c             	add    esp,0x1c
c00186a5:	c3                   	ret    
c00186a6:	66 90                	xchg   ax,ax

c00186a8 <HalConsoleScroll(int, int)>:
c00186a8:	83 ec 10             	sub    esp,0x10
c00186ab:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00186b3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00186bb:	90                   	nop
c00186bc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00186c1:	0f 8f e1 00 00 00    	jg     c00187a8 <HalConsoleScroll(int, int)+0x100>
c00186c7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00186cf:	90                   	nop
c00186d0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00186d8:	0f 8f be 00 00 00    	jg     c001879c <HalConsoleScroll(int, int)+0xf4>
c00186de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00186e2:	89 d0                	mov    eax,edx
c00186e4:	c1 e0 02             	shl    eax,0x2
c00186e7:	01 d0                	add    eax,edx
c00186e9:	c1 e0 05             	shl    eax,0x5
c00186ec:	89 c2                	mov    edx,eax
c00186ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00186f2:	01 d0                	add    eax,edx
c00186f4:	89 c2                	mov    edx,eax
c00186f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186fa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00186fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018701:	89 d0                	mov    eax,edx
c0018703:	c1 e0 02             	shl    eax,0x2
c0018706:	01 d0                	add    eax,edx
c0018708:	c1 e0 05             	shl    eax,0x5
c001870b:	89 c2                	mov    edx,eax
c001870d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018711:	01 d0                	add    eax,edx
c0018713:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001871d:	01 d0                	add    eax,edx
c001871f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018721:	88 10                	mov    BYTE PTR [eax],dl
c0018723:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018728:	75 66                	jne    c0018790 <HalConsoleScroll(int, int)+0xe8>
c001872a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001872e:	83 e0 01             	and    eax,0x1
c0018731:	74 39                	je     c001876c <HalConsoleScroll(int, int)+0xc4>
c0018733:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018737:	83 e0 0f             	and    eax,0xf
c001873a:	88 c2                	mov    dl,al
c001873c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018740:	c1 e0 04             	shl    eax,0x4
c0018743:	09 d0                	or     eax,edx
c0018745:	88 c1                	mov    cl,al
c0018747:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001874b:	89 d0                	mov    eax,edx
c001874d:	c1 e0 02             	shl    eax,0x2
c0018750:	01 d0                	add    eax,edx
c0018752:	c1 e0 05             	shl    eax,0x5
c0018755:	89 c2                	mov    edx,eax
c0018757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001875b:	01 d0                	add    eax,edx
c001875d:	89 c2                	mov    edx,eax
c001875f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018763:	01 d0                	add    eax,edx
c0018765:	88 ca                	mov    dl,cl
c0018767:	88 10                	mov    BYTE PTR [eax],dl
c0018769:	eb 25                	jmp    c0018790 <HalConsoleScroll(int, int)+0xe8>
c001876b:	90                   	nop
c001876c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018770:	89 d0                	mov    eax,edx
c0018772:	c1 e0 02             	shl    eax,0x2
c0018775:	01 d0                	add    eax,edx
c0018777:	c1 e0 05             	shl    eax,0x5
c001877a:	89 c2                	mov    edx,eax
c001877c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018780:	01 d0                	add    eax,edx
c0018782:	89 c2                	mov    edx,eax
c0018784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018788:	01 d0                	add    eax,edx
c001878a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001878d:	8d 76 00             	lea    esi,[esi+0x0]
c0018790:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018795:	e9 36 ff ff ff       	jmp    c00186d0 <HalConsoleScroll(int, int)+0x28>
c001879a:	66 90                	xchg   ax,ax
c001879c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00187a1:	e9 16 ff ff ff       	jmp    c00186bc <HalConsoleScroll(int, int)+0x14>
c00187a6:	66 90                	xchg   ax,ax
c00187a8:	90                   	nop
c00187a9:	83 c4 10             	add    esp,0x10
c00187ac:	c3                   	ret    
c00187ad:	8d 76 00             	lea    esi,[esi+0x0]

c00187b0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00187b0:	83 ec 14             	sub    esp,0x14
c00187b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187b7:	88 04 24             	mov    BYTE PTR [esp],al
c00187ba:	8a 04 24             	mov    al,BYTE PTR [esp]
c00187bd:	0f b6 c0             	movzx  eax,al
c00187c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00187c4:	89 d1                	mov    ecx,edx
c00187c6:	83 e1 0f             	and    ecx,0xf
c00187c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00187cd:	c1 e2 04             	shl    edx,0x4
c00187d0:	0f b6 d2             	movzx  edx,dl
c00187d3:	09 ca                	or     edx,ecx
c00187d5:	c1 e2 08             	shl    edx,0x8
c00187d8:	09 d0                	or     eax,edx
c00187da:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00187df:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00187e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00187eb:	89 d0                	mov    eax,edx
c00187ed:	c1 e0 02             	shl    eax,0x2
c00187f0:	01 d0                	add    eax,edx
c00187f2:	c1 e0 04             	shl    eax,0x4
c00187f5:	89 c2                	mov    edx,eax
c00187f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187fb:	01 d0                	add    eax,edx
c00187fd:	d1 e0                	shl    eax,1
c00187ff:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018803:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018807:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001880c:	66 89 10             	mov    WORD PTR [eax],dx
c001880f:	90                   	nop
c0018810:	83 c4 14             	add    esp,0x14
c0018813:	c3                   	ret    

c0018814 <HalConsoleCursorUpdate(int, int)>:
c0018814:	83 ec 20             	sub    esp,0x20
c0018817:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001881b:	89 c2                	mov    edx,eax
c001881d:	c1 e2 02             	shl    edx,0x2
c0018820:	01 d0                	add    eax,edx
c0018822:	c1 e0 04             	shl    eax,0x4
c0018825:	89 c2                	mov    edx,eax
c0018827:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001882b:	01 d0                	add    eax,edx
c001882d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018832:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018839:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001883e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018842:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018846:	ee                   	out    dx,al
c0018847:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001884c:	0f b6 c0             	movzx  eax,al
c001884f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018856:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001885a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001885e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018862:	ee                   	out    dx,al
c0018863:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001886a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001886f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018873:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018877:	ee                   	out    dx,al
c0018878:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001887d:	c1 e8 08             	shr    eax,0x8
c0018880:	0f b6 c0             	movzx  eax,al
c0018883:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001888a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001888e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018892:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018896:	ee                   	out    dx,al
c0018897:	90                   	nop
c0018898:	83 c4 20             	add    esp,0x20
c001889b:	c3                   	ret    

c001889c <FAT::getName()>:
c001889c:	b8 9c 26 02 c0       	mov    eax,0xc002269c
c00188a1:	c3                   	ret    
c00188a2:	66 90                	xchg   ax,ax

c00188a4 <FAT::tell(void*, unsigned long long*)>:
c00188a4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00188a9:	75 09                	jne    c00188b4 <FAT::tell(void*, unsigned long long*)+0x10>
c00188ab:	b8 04 00 00 00       	mov    eax,0x4
c00188b0:	c3                   	ret    
c00188b1:	8d 76 00             	lea    esi,[esi+0x0]
c00188b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00188b9:	75 09                	jne    c00188c4 <FAT::tell(void*, unsigned long long*)+0x20>
c00188bb:	b8 04 00 00 00       	mov    eax,0x4
c00188c0:	c3                   	ret    
c00188c1:	8d 76 00             	lea    esi,[esi+0x0]
c00188c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00188cb:	ba 00 00 00 00       	mov    edx,0x0
c00188d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00188d4:	89 01                	mov    DWORD PTR [ecx],eax
c00188d6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00188d9:	b8 00 00 00 00       	mov    eax,0x0
c00188de:	c3                   	ret    
c00188df:	90                   	nop

c00188e0 <FAT::stat(void*, unsigned long long*)>:
c00188e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00188e5:	75 09                	jne    c00188f0 <FAT::stat(void*, unsigned long long*)+0x10>
c00188e7:	b8 04 00 00 00       	mov    eax,0x4
c00188ec:	c3                   	ret    
c00188ed:	8d 76 00             	lea    esi,[esi+0x0]
c00188f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00188f5:	75 09                	jne    c0018900 <FAT::stat(void*, unsigned long long*)+0x20>
c00188f7:	b8 04 00 00 00       	mov    eax,0x4
c00188fc:	c3                   	ret    
c00188fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018900:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018904:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018907:	ba 00 00 00 00       	mov    edx,0x0
c001890c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018910:	89 01                	mov    DWORD PTR [ecx],eax
c0018912:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018915:	b8 00 00 00 00       	mov    eax,0x0
c001891a:	c3                   	ret    
c001891b:	90                   	nop

c001891c <FAT::~FAT()>:
c001891c:	83 ec 0c             	sub    esp,0xc
c001891f:	ba e8 26 02 c0       	mov    edx,0xc00226e8
c0018924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018928:	89 10                	mov    DWORD PTR [eax],edx
c001892a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001892e:	83 ec 0c             	sub    esp,0xc
c0018931:	50                   	push   eax
c0018932:	e8 4f 2b ff ff       	call   c000b486 <Filesystem::~Filesystem()>
c0018937:	83 c4 10             	add    esp,0x10
c001893a:	90                   	nop
c001893b:	83 c4 0c             	add    esp,0xc
c001893e:	c3                   	ret    
c001893f:	90                   	nop

c0018940 <FAT::~FAT()>:
c0018940:	83 ec 0c             	sub    esp,0xc
c0018943:	83 ec 0c             	sub    esp,0xc
c0018946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001894a:	e8 cd ff ff ff       	call   c001891c <FAT::~FAT()>
c001894f:	83 c4 10             	add    esp,0x10
c0018952:	83 ec 08             	sub    esp,0x8
c0018955:	6a 08                	push   0x8
c0018957:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001895b:	e8 ac 1e ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018960:	83 c4 10             	add    esp,0x10
c0018963:	83 c4 0c             	add    esp,0xc
c0018966:	c3                   	ret    
c0018967:	90                   	nop

c0018968 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018968:	83 ec 1c             	sub    esp,0x1c
c001896b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018972:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018977:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001897b:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018982:	83 f8 ff             	cmp    eax,0xffffffff
c0018985:	75 35                	jne    c00189bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018987:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001898b:	88 c2                	mov    dl,al
c001898d:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018992:	01 d0                	add    eax,edx
c0018994:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018998:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c001899e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189a2:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c00189a9:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c00189ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189b2:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c00189b9:	eb 19                	jmp    c00189d4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00189bb:	90                   	nop
c00189bc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00189c0:	88 c2                	mov    dl,al
c00189c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189c6:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c00189cd:	01 d0                	add    eax,edx
c00189cf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00189d3:	90                   	nop
c00189d4:	83 ec 04             	sub    esp,0x4
c00189d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00189db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00189df:	8d 44 24 15          	lea    eax,[esp+0x15]
c00189e3:	50                   	push   eax
c00189e4:	e8 0a c6 fe ff       	call   c0004ff3 <f_getlabel>
c00189e9:	83 c4 10             	add    esp,0x10
c00189ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00189f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00189f5:	75 09                	jne    c0018a00 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00189f7:	b8 00 00 00 00       	mov    eax,0x0
c00189fc:	eb 0a                	jmp    c0018a08 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00189fe:	66 90                	xchg   ax,ax
c0018a00:	b8 01 00 00 00       	mov    eax,0x1
c0018a05:	8d 76 00             	lea    esi,[esi+0x0]
c0018a08:	83 c4 1c             	add    esp,0x1c
c0018a0b:	c3                   	ret    

c0018a0c <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018a0c:	53                   	push   ebx
c0018a0d:	83 ec 58             	sub    esp,0x58
c0018a10:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018a1c:	b9 00 00 00 00       	mov    ecx,0x0
c0018a21:	b8 3c 00 00 00       	mov    eax,0x3c
c0018a26:	83 e0 f8             	and    eax,0xfffffff8
c0018a29:	89 c3                	mov    ebx,eax
c0018a2b:	b8 00 00 00 00       	mov    eax,0x0
c0018a30:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018a34:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018a38:	83 c0 08             	add    eax,0x8
c0018a3b:	39 d8                	cmp    eax,ebx
c0018a3d:	72 f1                	jb     c0018a30 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018a3f:	01 c2                	add    edx,eax
c0018a41:	89 0a                	mov    DWORD PTR [edx],ecx
c0018a43:	83 c2 04             	add    edx,0x4
c0018a46:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018a4a:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018a51:	83 f8 ff             	cmp    eax,0xffffffff
c0018a54:	75 36                	jne    c0018a8c <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018a56:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018a5a:	88 c2                	mov    dl,al
c0018a5c:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018a61:	01 d0                	add    eax,edx
c0018a63:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a67:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018a6d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018a71:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018a78:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018a7d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018a81:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018a88:	eb 1a                	jmp    c0018aa4 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018a8a:	66 90                	xchg   ax,ax
c0018a8c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018a90:	88 c2                	mov    dl,al
c0018a92:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018a96:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018a9d:	01 d0                	add    eax,edx
c0018a9f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018aa3:	90                   	nop
c0018aa4:	83 ec 08             	sub    esp,0x8
c0018aa7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018aab:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018aaf:	50                   	push   eax
c0018ab0:	e8 bb 7d fe ff       	call   c0000870 <strcat>
c0018ab5:	83 c4 10             	add    esp,0x10
c0018ab8:	83 ec 0c             	sub    esp,0xc
c0018abb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018abf:	50                   	push   eax
c0018ac0:	e8 82 c6 fe ff       	call   c0005147 <f_setlabel>
c0018ac5:	83 c4 10             	add    esp,0x10
c0018ac8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018acc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018ad1:	75 09                	jne    c0018adc <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018ad3:	b8 00 00 00 00       	mov    eax,0x0
c0018ad8:	eb 0a                	jmp    c0018ae4 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018ada:	66 90                	xchg   ax,ax
c0018adc:	b8 01 00 00 00       	mov    eax,0x1
c0018ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ae4:	83 c4 58             	add    esp,0x58
c0018ae7:	5b                   	pop    ebx
c0018ae8:	c3                   	ret    
c0018ae9:	90                   	nop
c0018aea:	66 90                	xchg   ax,ax

c0018aec <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018aec:	83 ec 2c             	sub    esp,0x2c
c0018aef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018af7:	83 ec 08             	sub    esp,0x8
c0018afa:	68 c0 26 02 c0       	push   0xc00226c0
c0018aff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b03:	e8 78 7c fe ff       	call   c0000780 <strcmp>
c0018b08:	83 c4 10             	add    esp,0x10
c0018b0b:	85 c0                	test   eax,eax
c0018b0d:	0f 94 c0             	sete   al
c0018b10:	0f b6 c0             	movzx  eax,al
c0018b13:	85 c0                	test   eax,eax
c0018b15:	74 0d                	je     c0018b24 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018b17:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b1f:	e9 c0 00 00 00       	jmp    c0018be4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b24:	83 ec 08             	sub    esp,0x8
c0018b27:	68 b2 26 02 c0       	push   0xc00226b2
c0018b2c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b30:	e8 4b 7c fe ff       	call   c0000780 <strcmp>
c0018b35:	83 c4 10             	add    esp,0x10
c0018b38:	85 c0                	test   eax,eax
c0018b3a:	0f 94 c0             	sete   al
c0018b3d:	0f b6 c0             	movzx  eax,al
c0018b40:	85 c0                	test   eax,eax
c0018b42:	74 10                	je     c0018b54 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018b44:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b4c:	e9 93 00 00 00       	jmp    c0018be4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b51:	8d 76 00             	lea    esi,[esi+0x0]
c0018b54:	83 ec 08             	sub    esp,0x8
c0018b57:	68 b8 26 02 c0       	push   0xc00226b8
c0018b5c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b60:	e8 1b 7c fe ff       	call   c0000780 <strcmp>
c0018b65:	83 c4 10             	add    esp,0x10
c0018b68:	85 c0                	test   eax,eax
c0018b6a:	0f 94 c0             	sete   al
c0018b6d:	0f b6 c0             	movzx  eax,al
c0018b70:	85 c0                	test   eax,eax
c0018b72:	74 0c                	je     c0018b80 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018b74:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b7c:	eb 66                	jmp    c0018be4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b7e:	66 90                	xchg   ax,ax
c0018b80:	83 ec 08             	sub    esp,0x8
c0018b83:	68 1c ff 01 c0       	push   0xc001ff1c
c0018b88:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b8c:	e8 ef 7b fe ff       	call   c0000780 <strcmp>
c0018b91:	83 c4 10             	add    esp,0x10
c0018b94:	85 c0                	test   eax,eax
c0018b96:	0f 94 c0             	sete   al
c0018b99:	0f b6 c0             	movzx  eax,al
c0018b9c:	85 c0                	test   eax,eax
c0018b9e:	74 0c                	je     c0018bac <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018ba0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018ba8:	eb 3a                	jmp    c0018be4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018baa:	66 90                	xchg   ax,ax
c0018bac:	83 ec 08             	sub    esp,0x8
c0018baf:	68 be 26 02 c0       	push   0xc00226be
c0018bb4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bb8:	e8 c3 7b fe ff       	call   c0000780 <strcmp>
c0018bbd:	83 c4 10             	add    esp,0x10
c0018bc0:	85 c0                	test   eax,eax
c0018bc2:	0f 94 c0             	sete   al
c0018bc5:	0f b6 c0             	movzx  eax,al
c0018bc8:	85 c0                	test   eax,eax
c0018bca:	74 0c                	je     c0018bd8 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018bcc:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018bd4:	eb 0e                	jmp    c0018be4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018bd6:	66 90                	xchg   ax,ax
c0018bd8:	b8 08 00 00 00       	mov    eax,0x8
c0018bdd:	e9 ea 00 00 00       	jmp    c0018ccc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018be2:	66 90                	xchg   ax,ax
c0018be4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018beb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018bf0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018bf4:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018bfb:	83 f8 ff             	cmp    eax,0xffffffff
c0018bfe:	75 34                	jne    c0018c34 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018c00:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c04:	88 c2                	mov    dl,al
c0018c06:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018c0b:	01 d0                	add    eax,edx
c0018c0d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c11:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018c17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c1b:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018c22:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018c27:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018c2b:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018c32:	eb 18                	jmp    c0018c4c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018c34:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c38:	88 c2                	mov    dl,al
c0018c3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c3e:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018c45:	01 d0                	add    eax,edx
c0018c47:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c4b:	90                   	nop
c0018c4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c50:	88 04 24             	mov    BYTE PTR [esp],al
c0018c53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018c57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c5b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018c63:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018c68:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018c70:	83 ec 0c             	sub    esp,0xc
c0018c73:	68 00 20 00 00       	push   0x2000
c0018c78:	e8 56 ee fe ff       	call   c0007ad3 <malloc>
c0018c7d:	83 c4 10             	add    esp,0x10
c0018c80:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018c84:	68 00 20 00 00       	push   0x2000
c0018c89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c8d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c91:	50                   	push   eax
c0018c92:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018c96:	50                   	push   eax
c0018c97:	e8 a8 c7 fe ff       	call   c0005444 <f_mkfs>
c0018c9c:	83 c4 10             	add    esp,0x10
c0018c9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018ca3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018ca8:	75 0a                	jne    c0018cb4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018caa:	b8 00 00 00 00       	mov    eax,0x0
c0018caf:	eb 1b                	jmp    c0018ccc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0018cb4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018cb9:	75 09                	jne    c0018cc4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018cbb:	b8 09 00 00 00       	mov    eax,0x9
c0018cc0:	eb 0a                	jmp    c0018ccc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018cc2:	66 90                	xchg   ax,ax
c0018cc4:	b8 01 00 00 00       	mov    eax,0x1
c0018cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ccc:	83 c4 2c             	add    esp,0x2c
c0018ccf:	c3                   	ret    

c0018cd0 <FAT::tryMount(LogicalDisk*, int)>:
c0018cd0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018cd6:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018cdb:	83 f8 14             	cmp    eax,0x14
c0018cde:	75 18                	jne    c0018cf8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018ce0:	83 ec 0c             	sub    esp,0xc
c0018ce3:	68 c4 26 02 c0       	push   0xc00226c4
c0018ce8:	e8 84 84 ff ff       	call   c0011171 <KePanic(char const*)>
c0018ced:	83 c4 10             	add    esp,0x10
c0018cf0:	b0 00                	mov    al,0x0
c0018cf2:	e9 ed 01 00 00       	jmp    c0018ee4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018cf7:	90                   	nop
c0018cf8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018cff:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018d05:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018d0b:	3d 00 02 00 00       	cmp    eax,0x200
c0018d10:	74 0a                	je     c0018d1c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018d12:	b0 00                	mov    al,0x0
c0018d14:	e9 cb 01 00 00       	jmp    c0018ee4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d19:	8d 76 00             	lea    esi,[esi+0x0]
c0018d1c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018d24:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018d2b:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018d32:	83 f8 ff             	cmp    eax,0xffffffff
c0018d35:	74 09                	je     c0018d40 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018d37:	b0 01                	mov    al,0x1
c0018d39:	e9 a6 01 00 00       	jmp    c0018ee4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d3e:	66 90                	xchg   ax,ax
c0018d40:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018d4a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018d52:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018d59:	88 c2                	mov    dl,al
c0018d5b:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018d60:	01 d0                	add    eax,edx
c0018d62:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018d69:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018d6f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018d76:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018d7d:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018d82:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018d89:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018d90:	83 ec 0c             	sub    esp,0xc
c0018d93:	68 34 02 00 00       	push   0x234
c0018d98:	e8 36 ed fe ff       	call   c0007ad3 <malloc>
c0018d9d:	83 c4 10             	add    esp,0x10
c0018da0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018da7:	83 ec 04             	sub    esp,0x4
c0018daa:	6a 00                	push   0x0
c0018dac:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018db3:	50                   	push   eax
c0018db4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018dbb:	e8 7e ae fe ff       	call   c0003c3e <f_mount>
c0018dc0:	83 c4 10             	add    esp,0x10
c0018dc3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018dca:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018dd2:	74 1c                	je     c0018df0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018dd4:	83 ec 0c             	sub    esp,0xc
c0018dd7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018dde:	e8 10 ed fe ff       	call   c0007af3 <rfree>
c0018de3:	83 c4 10             	add    esp,0x10
c0018de6:	b0 00                	mov    al,0x0
c0018de8:	e9 f7 00 00 00       	jmp    c0018ee4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018ded:	8d 76 00             	lea    esi,[esi+0x0]
c0018df0:	83 ec 04             	sub    esp,0x4
c0018df3:	68 00 01 00 00       	push   0x100
c0018df8:	6a 00                	push   0x0
c0018dfa:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e01:	50                   	push   eax
c0018e02:	e8 e9 76 fe ff       	call   c00004f0 <memset>
c0018e07:	83 c4 10             	add    esp,0x10
c0018e0a:	83 ec 08             	sub    esp,0x8
c0018e0d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e14:	50                   	push   eax
c0018e15:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e1c:	50                   	push   eax
c0018e1d:	e8 4e 7a fe ff       	call   c0000870 <strcat>
c0018e22:	83 c4 10             	add    esp,0x10
c0018e25:	83 ec 08             	sub    esp,0x8
c0018e28:	68 d2 26 02 c0       	push   0xc00226d2
c0018e2d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e34:	50                   	push   eax
c0018e35:	e8 36 7a fe ff       	call   c0000870 <strcat>
c0018e3a:	83 c4 10             	add    esp,0x10
c0018e3d:	83 ec 04             	sub    esp,0x4
c0018e40:	6a 01                	push   0x1
c0018e42:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018e49:	50                   	push   eax
c0018e4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e4e:	50                   	push   eax
c0018e4f:	e8 4c ae fe ff       	call   c0003ca0 <f_open>
c0018e54:	83 c4 10             	add    esp,0x10
c0018e57:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018e5e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018e65:	85 c0                	test   eax,eax
c0018e67:	74 0b                	je     c0018e74 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018e69:	78 31                	js     c0018e9c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018e6b:	83 e8 04             	sub    eax,0x4
c0018e6e:	83 f8 01             	cmp    eax,0x1
c0018e71:	77 29                	ja     c0018e9c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018e73:	90                   	nop
c0018e74:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018e7c:	83 ec 0c             	sub    esp,0xc
c0018e7f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e83:	50                   	push   eax
c0018e84:	e8 c7 b5 fe ff       	call   c0004450 <f_close>
c0018e89:	83 c4 10             	add    esp,0x10
c0018e8c:	90                   	nop
c0018e8d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018e95:	85 c0                	test   eax,eax
c0018e97:	74 43                	je     c0018edc <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018e99:	eb 31                	jmp    c0018ecc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018e9b:	90                   	nop
c0018e9c:	83 ec 0c             	sub    esp,0xc
c0018e9f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018ea6:	e8 48 ec fe ff       	call   c0007af3 <rfree>
c0018eab:	83 c4 10             	add    esp,0x10
c0018eae:	83 ec 04             	sub    esp,0x4
c0018eb1:	6a 00                	push   0x0
c0018eb3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018eba:	50                   	push   eax
c0018ebb:	6a 00                	push   0x0
c0018ebd:	e8 7c ad fe ff       	call   c0003c3e <f_mount>
c0018ec2:	83 c4 10             	add    esp,0x10
c0018ec5:	b0 00                	mov    al,0x0
c0018ec7:	eb 1b                	jmp    c0018ee4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ecc:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018ed1:	83 c0 01             	add    eax,0x1
c0018ed4:	a3 20 a5 02 c0       	mov    ds:0xc002a520,eax
c0018ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0018edc:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018ee3:	90                   	nop
c0018ee4:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018eea:	c3                   	ret    
c0018eeb:	90                   	nop

c0018eec <FAT::allocateSwapfile(char const*, int)>:
c0018eec:	55                   	push   ebp
c0018eed:	57                   	push   edi
c0018eee:	56                   	push   esi
c0018eef:	53                   	push   ebx
c0018ef0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018ef6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018f01:	83 ec 0c             	sub    esp,0xc
c0018f04:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018f0b:	e8 c3 eb fe ff       	call   c0007ad3 <malloc>
c0018f10:	83 c4 10             	add    esp,0x10
c0018f13:	89 c7                	mov    edi,eax
c0018f15:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0018f1a:	83 ec 04             	sub    esp,0x4
c0018f1d:	50                   	push   eax
c0018f1e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018f25:	57                   	push   edi
c0018f26:	e8 bd 27 ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c0018f2b:	83 c4 10             	add    esp,0x10
c0018f2e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018f35:	83 ec 04             	sub    esp,0x4
c0018f38:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018f3c:	50                   	push   eax
c0018f3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f41:	50                   	push   eax
c0018f42:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018f49:	e8 58 2b ff ff       	call   c000baa6 <File::stat(unsigned long long*, bool*)>
c0018f4e:	83 c4 10             	add    esp,0x10
c0018f51:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018f58:	c1 e0 14             	shl    eax,0x14
c0018f5b:	89 c7                	mov    edi,eax
c0018f5d:	89 c5                	mov    ebp,eax
c0018f5f:	c1 fd 1f             	sar    ebp,0x1f
c0018f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f6a:	89 f9                	mov    ecx,edi
c0018f6c:	31 c1                	xor    ecx,eax
c0018f6e:	89 cb                	mov    ebx,ecx
c0018f70:	89 e9                	mov    ecx,ebp
c0018f72:	31 d1                	xor    ecx,edx
c0018f74:	89 ce                	mov    esi,ecx
c0018f76:	89 f0                	mov    eax,esi
c0018f78:	09 d8                	or     eax,ebx
c0018f7a:	0f 84 9c 00 00 00    	je     c001901c <FAT::allocateSwapfile(char const*, int)+0x130>
c0018f80:	83 ec 0c             	sub    esp,0xc
c0018f83:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018f8a:	e8 e3 29 ff ff       	call   c000b972 <File::unlink()>
c0018f8f:	83 c4 10             	add    esp,0x10
c0018f92:	83 ec 08             	sub    esp,0x8
c0018f95:	6a 12                	push   0x12
c0018f97:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018f9e:	e8 01 28 ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c0018fa3:	83 c4 10             	add    esp,0x10
c0018fa6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018fad:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018fb3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018fba:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018fc1:	c1 e0 14             	shl    eax,0x14
c0018fc4:	83 ec 04             	sub    esp,0x4
c0018fc7:	6a 01                	push   0x1
c0018fc9:	50                   	push   eax
c0018fca:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0018fd1:	e8 01 c3 fe ff       	call   c00052d7 <f_expand>
c0018fd6:	83 c4 10             	add    esp,0x10
c0018fd9:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018fe0:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fe2:	83 c0 10             	add    eax,0x10
c0018fe5:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fe7:	83 ec 0c             	sub    esp,0xc
c0018fea:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018fee:	52                   	push   edx
c0018fef:	8d 54 24 30          	lea    edx,[esp+0x30]
c0018ff3:	52                   	push   edx
c0018ff4:	6a 00                	push   0x0
c0018ff6:	68 00 04 00 00       	push   0x400
c0018ffb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019002:	ff d0                	call   eax
c0019004:	83 c4 20             	add    esp,0x20
c0019007:	83 ec 0c             	sub    esp,0xc
c001900a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019011:	e8 ec 27 ff ff       	call   c000b802 <File::close()>
c0019016:	83 c4 10             	add    esp,0x10
c0019019:	8d 76 00             	lea    esi,[esi+0x0]
c001901c:	83 ec 08             	sub    esp,0x8
c001901f:	6a 01                	push   0x1
c0019021:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019028:	e8 77 27 ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c001902d:	83 c4 10             	add    esp,0x10
c0019030:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019037:	8b 00                	mov    eax,DWORD PTR [eax]
c0019039:	83 c0 0c             	add    eax,0xc
c001903c:	8b 00                	mov    eax,DWORD PTR [eax]
c001903e:	83 ec 0c             	sub    esp,0xc
c0019041:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019045:	52                   	push   edx
c0019046:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001904a:	52                   	push   edx
c001904b:	6a 00                	push   0x0
c001904d:	6a 04                	push   0x4
c001904f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019056:	ff d0                	call   eax
c0019058:	83 c4 20             	add    esp,0x20
c001905b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019062:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019068:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001906f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019076:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019079:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019080:	83 ec 0c             	sub    esp,0xc
c0019083:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001908a:	e8 73 27 ff ff       	call   c000b802 <File::close()>
c001908f:	83 c4 10             	add    esp,0x10
c0019092:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019099:	ba 00 00 00 00       	mov    edx,0x0
c001909e:	81 c4 3c 04 00 00    	add    esp,0x43c
c00190a4:	5b                   	pop    ebx
c00190a5:	5e                   	pop    esi
c00190a6:	5f                   	pop    edi
c00190a7:	5d                   	pop    ebp
c00190a8:	c3                   	ret    
c00190a9:	90                   	nop
c00190aa:	66 90                	xchg   ax,ax

c00190ac <FAT::readDir(void*, unsigned long, void*, int*)>:
c00190ac:	57                   	push   edi
c00190ad:	56                   	push   esi
c00190ae:	53                   	push   ebx
c00190af:	81 ec 50 02 00 00    	sub    esp,0x250
c00190b5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00190bd:	74 0d                	je     c00190cc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00190bf:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00190c7:	75 0f                	jne    c00190d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00190c9:	8d 76 00             	lea    esi,[esi+0x0]
c00190cc:	b8 04 00 00 00       	mov    eax,0x4
c00190d1:	e9 3a 01 00 00       	jmp    c0019210 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00190d6:	66 90                	xchg   ax,ax
c00190d8:	83 ec 08             	sub    esp,0x8
c00190db:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00190e2:	50                   	push   eax
c00190e3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00190ea:	e8 2d b6 fe ff       	call   c000471c <f_readdir>
c00190ef:	83 c4 10             	add    esp,0x10
c00190f2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00190f9:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019100:	83 ec 0c             	sub    esp,0xc
c0019103:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001910a:	83 c0 16             	add    eax,0x16
c001910d:	50                   	push   eax
c001910e:	e8 6d 74 fe ff       	call   c0000580 <strlen>
c0019113:	83 c4 10             	add    esp,0x10
c0019116:	ba 00 00 00 00       	mov    edx,0x0
c001911b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001911f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019123:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001912a:	0f b6 c0             	movzx  eax,al
c001912d:	83 e0 10             	and    eax,0x10
c0019130:	74 0a                	je     c001913c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019132:	b8 02 00 00 00       	mov    eax,0x2
c0019137:	eb 0b                	jmp    c0019144 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019139:	8d 76 00             	lea    esi,[esi+0x0]
c001913c:	b8 01 00 00 00       	mov    eax,0x1
c0019141:	8d 76 00             	lea    esi,[esi+0x0]
c0019144:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019148:	83 ec 08             	sub    esp,0x8
c001914b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019152:	83 c0 16             	add    eax,0x16
c0019155:	50                   	push   eax
c0019156:	8d 44 24 14          	lea    eax,[esp+0x14]
c001915a:	83 c0 10             	add    eax,0x10
c001915d:	50                   	push   eax
c001915e:	e8 ed 74 fe ff       	call   c0000650 <strcpy>
c0019163:	83 c4 10             	add    esp,0x10
c0019166:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001916d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019174:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019178:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001917f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019186:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001918d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019194:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001919b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00191a2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00191a9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00191b0:	89 c6                	mov    esi,eax
c00191b2:	89 d7                	mov    edi,edx
c00191b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00191b6:	89 c8                	mov    eax,ecx
c00191b8:	89 fa                	mov    edx,edi
c00191ba:	89 f3                	mov    ebx,esi
c00191bc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00191c3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00191ca:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00191d1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00191d8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00191de:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00191e5:	0f be c0             	movsx  eax,al
c00191e8:	85 c0                	test   eax,eax
c00191ea:	75 08                	jne    c00191f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00191ec:	b8 07 00 00 00       	mov    eax,0x7
c00191f1:	eb 1d                	jmp    c0019210 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00191f3:	90                   	nop
c00191f4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00191fb:	85 c0                	test   eax,eax
c00191fd:	75 09                	jne    c0019208 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00191ff:	b8 00 00 00 00       	mov    eax,0x0
c0019204:	eb 0a                	jmp    c0019210 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019206:	66 90                	xchg   ax,ax
c0019208:	b8 01 00 00 00       	mov    eax,0x1
c001920d:	8d 76 00             	lea    esi,[esi+0x0]
c0019210:	81 c4 50 02 00 00    	add    esp,0x250
c0019216:	5b                   	pop    ebx
c0019217:	5e                   	pop    esi
c0019218:	5f                   	pop    edi
c0019219:	c3                   	ret    
c001921a:	66 90                	xchg   ax,ax

c001921c <FAT::read(void*, unsigned long, void*, int*)>:
c001921c:	83 ec 1c             	sub    esp,0x1c
c001921f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019224:	74 0a                	je     c0019230 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019226:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001922b:	75 0b                	jne    c0019238 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001922d:	8d 76 00             	lea    esi,[esi+0x0]
c0019230:	b8 04 00 00 00       	mov    eax,0x4
c0019235:	eb 41                	jmp    c0019278 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019237:	90                   	nop
c0019238:	8d 44 24 08          	lea    eax,[esp+0x8]
c001923c:	50                   	push   eax
c001923d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019241:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019245:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019249:	e8 15 ad fe ff       	call   c0003f63 <f_read>
c001924e:	83 c4 10             	add    esp,0x10
c0019251:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019255:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019259:	89 c2                	mov    edx,eax
c001925b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001925f:	89 10                	mov    DWORD PTR [eax],edx
c0019261:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019265:	85 c0                	test   eax,eax
c0019267:	75 07                	jne    c0019270 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019269:	b8 00 00 00 00       	mov    eax,0x0
c001926e:	eb 08                	jmp    c0019278 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019270:	b8 01 00 00 00       	mov    eax,0x1
c0019275:	8d 76 00             	lea    esi,[esi+0x0]
c0019278:	83 c4 1c             	add    esp,0x1c
c001927b:	c3                   	ret    

c001927c <FAT::write(void*, unsigned long, void*, int*)>:
c001927c:	83 ec 1c             	sub    esp,0x1c
c001927f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019284:	74 0a                	je     c0019290 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019286:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001928b:	75 0b                	jne    c0019298 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001928d:	8d 76 00             	lea    esi,[esi+0x0]
c0019290:	b8 04 00 00 00       	mov    eax,0x4
c0019295:	eb 41                	jmp    c00192d8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019297:	90                   	nop
c0019298:	8d 44 24 08          	lea    eax,[esp+0x8]
c001929c:	50                   	push   eax
c001929d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00192a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192a9:	e8 96 ae fe ff       	call   c0004144 <f_write>
c00192ae:	83 c4 10             	add    esp,0x10
c00192b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192b9:	89 c2                	mov    edx,eax
c00192bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00192bf:	89 10                	mov    DWORD PTR [eax],edx
c00192c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192c5:	85 c0                	test   eax,eax
c00192c7:	75 07                	jne    c00192d0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00192c9:	b8 00 00 00 00       	mov    eax,0x0
c00192ce:	eb 08                	jmp    c00192d8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00192d0:	b8 01 00 00 00       	mov    eax,0x1
c00192d5:	8d 76 00             	lea    esi,[esi+0x0]
c00192d8:	83 c4 1c             	add    esp,0x1c
c00192db:	c3                   	ret    

c00192dc <FAT::close(void*)>:
c00192dc:	83 ec 1c             	sub    esp,0x1c
c00192df:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00192e4:	75 0a                	jne    c00192f0 <FAT::close(void*)+0x14>
c00192e6:	b8 04 00 00 00       	mov    eax,0x4
c00192eb:	eb 3f                	jmp    c001932c <FAT::close(void*)+0x50>
c00192ed:	8d 76 00             	lea    esi,[esi+0x0]
c00192f0:	83 ec 0c             	sub    esp,0xc
c00192f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192f7:	e8 54 b1 fe ff       	call   c0004450 <f_close>
c00192fc:	83 c4 10             	add    esp,0x10
c00192ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019303:	83 ec 0c             	sub    esp,0xc
c0019306:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001930a:	e8 d4 e7 fe ff       	call   c0007ae3 <free>
c001930f:	83 c4 10             	add    esp,0x10
c0019312:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019316:	85 c0                	test   eax,eax
c0019318:	75 0a                	jne    c0019324 <FAT::close(void*)+0x48>
c001931a:	b8 00 00 00 00       	mov    eax,0x0
c001931f:	eb 0b                	jmp    c001932c <FAT::close(void*)+0x50>
c0019321:	8d 76 00             	lea    esi,[esi+0x0]
c0019324:	b8 01 00 00 00       	mov    eax,0x1
c0019329:	8d 76 00             	lea    esi,[esi+0x0]
c001932c:	83 c4 1c             	add    esp,0x1c
c001932f:	c3                   	ret    

c0019330 <FAT::closeDir(void*)>:
c0019330:	83 ec 1c             	sub    esp,0x1c
c0019333:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019338:	75 0a                	jne    c0019344 <FAT::closeDir(void*)+0x14>
c001933a:	b8 04 00 00 00       	mov    eax,0x4
c001933f:	eb 3f                	jmp    c0019380 <FAT::closeDir(void*)+0x50>
c0019341:	8d 76 00             	lea    esi,[esi+0x0]
c0019344:	83 ec 0c             	sub    esp,0xc
c0019347:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001934b:	e8 aa b3 fe ff       	call   c00046fa <f_closedir>
c0019350:	83 c4 10             	add    esp,0x10
c0019353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019357:	83 ec 0c             	sub    esp,0xc
c001935a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001935e:	e8 80 e7 fe ff       	call   c0007ae3 <free>
c0019363:	83 c4 10             	add    esp,0x10
c0019366:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001936a:	85 c0                	test   eax,eax
c001936c:	75 0a                	jne    c0019378 <FAT::closeDir(void*)+0x48>
c001936e:	b8 00 00 00 00       	mov    eax,0x0
c0019373:	eb 0b                	jmp    c0019380 <FAT::closeDir(void*)+0x50>
c0019375:	8d 76 00             	lea    esi,[esi+0x0]
c0019378:	b8 01 00 00 00       	mov    eax,0x1
c001937d:	8d 76 00             	lea    esi,[esi+0x0]
c0019380:	83 c4 1c             	add    esp,0x1c
c0019383:	c3                   	ret    

c0019384 <FAT::truncate(void*, unsigned long long)>:
c0019384:	83 ec 2c             	sub    esp,0x2c
c0019387:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001938b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001938f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019397:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001939c:	75 0a                	jne    c00193a8 <FAT::truncate(void*, unsigned long long)+0x24>
c001939e:	b8 04 00 00 00       	mov    eax,0x4
c00193a3:	eb 47                	jmp    c00193ec <FAT::truncate(void*, unsigned long long)+0x68>
c00193a5:	8d 76 00             	lea    esi,[esi+0x0]
c00193a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00193ac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00193af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00193b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00193bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00193bf:	83 ec 08             	sub    esp,0x8
c00193c2:	50                   	push   eax
c00193c3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00193c7:	e8 b3 b0 fe ff       	call   c000447f <f_lseek>
c00193cc:	83 c4 10             	add    esp,0x10
c00193cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00193d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00193d7:	85 c0                	test   eax,eax
c00193d9:	75 09                	jne    c00193e4 <FAT::truncate(void*, unsigned long long)+0x60>
c00193db:	b8 00 00 00 00       	mov    eax,0x0
c00193e0:	eb 0a                	jmp    c00193ec <FAT::truncate(void*, unsigned long long)+0x68>
c00193e2:	66 90                	xchg   ax,ax
c00193e4:	b8 01 00 00 00       	mov    eax,0x1
c00193e9:	8d 76 00             	lea    esi,[esi+0x0]
c00193ec:	83 c4 2c             	add    esp,0x2c
c00193ef:	c3                   	ret    

c00193f0 <FAT::seek(void*, unsigned long long)>:
c00193f0:	83 ec 2c             	sub    esp,0x2c
c00193f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00193fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00193ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019403:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019408:	75 0a                	jne    c0019414 <FAT::seek(void*, unsigned long long)+0x24>
c001940a:	b8 04 00 00 00       	mov    eax,0x4
c001940f:	eb 33                	jmp    c0019444 <FAT::seek(void*, unsigned long long)+0x54>
c0019411:	8d 76 00             	lea    esi,[esi+0x0]
c0019414:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019418:	83 ec 08             	sub    esp,0x8
c001941b:	50                   	push   eax
c001941c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019420:	e8 5a b0 fe ff       	call   c000447f <f_lseek>
c0019425:	83 c4 10             	add    esp,0x10
c0019428:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001942c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019430:	85 c0                	test   eax,eax
c0019432:	75 08                	jne    c001943c <FAT::seek(void*, unsigned long long)+0x4c>
c0019434:	b8 00 00 00 00       	mov    eax,0x0
c0019439:	eb 09                	jmp    c0019444 <FAT::seek(void*, unsigned long long)+0x54>
c001943b:	90                   	nop
c001943c:	b8 01 00 00 00       	mov    eax,0x1
c0019441:	8d 76 00             	lea    esi,[esi+0x0]
c0019444:	83 c4 2c             	add    esp,0x2c
c0019447:	c3                   	ret    

c0019448 <fatWrapperReadDisk>:
c0019448:	53                   	push   ebx
c0019449:	83 ec 18             	sub    esp,0x18
c001944c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019450:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019454:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019459:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c0019460:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019464:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019468:	ba 00 00 00 00       	mov    edx,0x0
c001946d:	83 ec 0c             	sub    esp,0xc
c0019470:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019474:	53                   	push   ebx
c0019475:	52                   	push   edx
c0019476:	50                   	push   eax
c0019477:	51                   	push   ecx
c0019478:	e8 65 45 ff ff       	call   c000d9e2 <LogicalDisk::read(unsigned long long, int, void*)>
c001947d:	83 c4 20             	add    esp,0x20
c0019480:	83 c4 18             	add    esp,0x18
c0019483:	5b                   	pop    ebx
c0019484:	c3                   	ret    
c0019485:	8d 76 00             	lea    esi,[esi+0x0]

c0019488 <fatWrapperWriteDisk>:
c0019488:	53                   	push   ebx
c0019489:	83 ec 18             	sub    esp,0x18
c001948c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019490:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019494:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019499:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c00194a0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00194a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00194a8:	ba 00 00 00 00       	mov    edx,0x0
c00194ad:	83 ec 0c             	sub    esp,0xc
c00194b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194b4:	53                   	push   ebx
c00194b5:	52                   	push   edx
c00194b6:	50                   	push   eax
c00194b7:	51                   	push   ecx
c00194b8:	e8 91 45 ff ff       	call   c000da4e <LogicalDisk::write(unsigned long long, int, void*)>
c00194bd:	83 c4 20             	add    esp,0x20
c00194c0:	83 c4 18             	add    esp,0x18
c00194c3:	5b                   	pop    ebx
c00194c4:	c3                   	ret    
c00194c5:	8d 76 00             	lea    esi,[esi+0x0]

c00194c8 <fatWrapperIoctl>:
c00194c8:	53                   	push   ebx
c00194c9:	83 ec 28             	sub    esp,0x28
c00194cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00194d0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00194d4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194d8:	88 d0                	mov    al,dl
c00194da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00194de:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00194e3:	83 f8 02             	cmp    eax,0x2
c00194e6:	75 34                	jne    c001951c <fatWrapperIoctl+0x54>
c00194e8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00194ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00194f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00194f5:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c00194fc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019502:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019508:	89 c2                	mov    edx,eax
c001950a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001950e:	66 89 10             	mov    WORD PTR [eax],dx
c0019511:	b8 00 00 00 00       	mov    eax,0x0
c0019516:	e9 c5 00 00 00       	jmp    c00195e0 <fatWrapperIoctl+0x118>
c001951b:	90                   	nop
c001951c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019521:	83 f8 01             	cmp    eax,0x1
c0019524:	75 6a                	jne    c0019590 <fatWrapperIoctl+0xc8>
c0019526:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001952a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001952e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019533:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c001953a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019540:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019546:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001954c:	89 c8                	mov    eax,ecx
c001954e:	89 da                	mov    edx,ebx
c0019550:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019554:	c1 e0 0a             	shl    eax,0xa
c0019557:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001955c:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c0019563:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019569:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001956f:	89 cb                	mov    ebx,ecx
c0019571:	c1 fb 1f             	sar    ebx,0x1f
c0019574:	53                   	push   ebx
c0019575:	51                   	push   ecx
c0019576:	52                   	push   edx
c0019577:	50                   	push   eax
c0019578:	e8 b3 5b 00 00       	call   c001f130 <__udivdi3>
c001957d:	83 c4 10             	add    esp,0x10
c0019580:	89 c2                	mov    edx,eax
c0019582:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019586:	89 10                	mov    DWORD PTR [eax],edx
c0019588:	b8 00 00 00 00       	mov    eax,0x0
c001958d:	eb 51                	jmp    c00195e0 <fatWrapperIoctl+0x118>
c001958f:	90                   	nop
c0019590:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019595:	85 c0                	test   eax,eax
c0019597:	75 07                	jne    c00195a0 <fatWrapperIoctl+0xd8>
c0019599:	b8 00 00 00 00       	mov    eax,0x0
c001959e:	eb 40                	jmp    c00195e0 <fatWrapperIoctl+0x118>
c00195a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195a5:	83 f8 03             	cmp    eax,0x3
c00195a8:	75 1a                	jne    c00195c4 <fatWrapperIoctl+0xfc>
c00195aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00195b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195b6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00195bc:	b8 00 00 00 00       	mov    eax,0x0
c00195c1:	eb 1d                	jmp    c00195e0 <fatWrapperIoctl+0x118>
c00195c3:	90                   	nop
c00195c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195c9:	83 f8 04             	cmp    eax,0x4
c00195cc:	75 0a                	jne    c00195d8 <fatWrapperIoctl+0x110>
c00195ce:	b8 00 00 00 00       	mov    eax,0x0
c00195d3:	eb 0b                	jmp    c00195e0 <fatWrapperIoctl+0x118>
c00195d5:	8d 76 00             	lea    esi,[esi+0x0]
c00195d8:	b8 04 00 00 00       	mov    eax,0x4
c00195dd:	8d 76 00             	lea    esi,[esi+0x0]
c00195e0:	83 c4 28             	add    esp,0x28
c00195e3:	5b                   	pop    ebx
c00195e4:	c3                   	ret    
c00195e5:	90                   	nop
c00195e6:	66 90                	xchg   ax,ax

c00195e8 <FAT::FAT()>:
c00195e8:	83 ec 1c             	sub    esp,0x1c
c00195eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195ef:	83 ec 0c             	sub    esp,0xc
c00195f2:	50                   	push   eax
c00195f3:	e8 6a 1e ff ff       	call   c000b462 <Filesystem::Filesystem()>
c00195f8:	83 c4 10             	add    esp,0x10
c00195fb:	ba e8 26 02 c0       	mov    edx,0xc00226e8
c0019600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019604:	89 10                	mov    DWORD PTR [eax],edx
c0019606:	c7 05 20 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a520,0x0
c0019610:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019618:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001961d:	7f 19                	jg     c0019638 <FAT::FAT()+0x50>
c001961f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019623:	c7 04 85 40 a5 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5ac0],0xffffffff
c001962e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019633:	eb e3                	jmp    c0019618 <FAT::FAT()+0x30>
c0019635:	8d 76 00             	lea    esi,[esi+0x0]
c0019638:	90                   	nop
c0019639:	83 c4 1c             	add    esp,0x1c
c001963c:	c3                   	ret    
c001963d:	90                   	nop
c001963e:	66 90                	xchg   ax,ax

c0019640 <FAT::fixFilepath(char*)>:
c0019640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019644:	8a 00                	mov    al,BYTE PTR [eax]
c0019646:	0f be c0             	movsx  eax,al
c0019649:	83 f8 40             	cmp    eax,0x40
c001964c:	7e 2e                	jle    c001967c <FAT::fixFilepath(char*)+0x3c>
c001964e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019652:	8a 00                	mov    al,BYTE PTR [eax]
c0019654:	83 e8 41             	sub    eax,0x41
c0019657:	88 c2                	mov    dl,al
c0019659:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001965d:	88 10                	mov    BYTE PTR [eax],dl
c001965f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019663:	8a 00                	mov    al,BYTE PTR [eax]
c0019665:	0f be c0             	movsx  eax,al
c0019668:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c001966f:	83 c0 30             	add    eax,0x30
c0019672:	88 c2                	mov    dl,al
c0019674:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019678:	88 10                	mov    BYTE PTR [eax],dl
c001967a:	66 90                	xchg   ax,ax
c001967c:	90                   	nop
c001967d:	c3                   	ret    
c001967e:	66 90                	xchg   ax,ax

c0019680 <FAT::open(char const*, void**, FileOpenMode)>:
c0019680:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019686:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001968e:	74 0c                	je     c001969c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019690:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019698:	75 0e                	jne    c00196a8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001969a:	66 90                	xchg   ax,ax
c001969c:	b8 04 00 00 00       	mov    eax,0x4
c00196a1:	e9 46 01 00 00       	jmp    c00197ec <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00196a6:	66 90                	xchg   ax,ax
c00196a8:	83 ec 08             	sub    esp,0x8
c00196ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00196b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00196b6:	50                   	push   eax
c00196b7:	e8 94 6f fe ff       	call   c0000650 <strcpy>
c00196bc:	83 c4 10             	add    esp,0x10
c00196bf:	83 ec 08             	sub    esp,0x8
c00196c2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00196c6:	50                   	push   eax
c00196c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00196ce:	e8 6d ff ff ff       	call   c0019640 <FAT::fixFilepath(char*)>
c00196d3:	83 c4 10             	add    esp,0x10
c00196d6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00196de:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00196e5:	83 e0 01             	and    eax,0x1
c00196e8:	74 12                	je     c00196fc <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c00196ea:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00196f1:	83 c8 01             	or     eax,0x1
c00196f4:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00196fb:	90                   	nop
c00196fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019703:	83 e0 04             	and    eax,0x4
c0019706:	74 24                	je     c001972c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019708:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001970f:	83 c8 30             	or     eax,0x30
c0019712:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019719:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019720:	83 c8 02             	or     eax,0x2
c0019723:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001972a:	66 90                	xchg   ax,ax
c001972c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019733:	83 e0 02             	and    eax,0x2
c0019736:	74 14                	je     c001974c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019738:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001973f:	83 c8 02             	or     eax,0x2
c0019742:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019749:	8d 76 00             	lea    esi,[esi+0x0]
c001974c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019753:	83 e0 08             	and    eax,0x8
c0019756:	74 14                	je     c001976c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019758:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001975f:	83 c8 04             	or     eax,0x4
c0019762:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019769:	8d 76 00             	lea    esi,[esi+0x0]
c001976c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019773:	83 e0 10             	and    eax,0x10
c0019776:	74 14                	je     c001978c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019778:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001977f:	83 c8 08             	or     eax,0x8
c0019782:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019789:	8d 76 00             	lea    esi,[esi+0x0]
c001978c:	83 ec 0c             	sub    esp,0xc
c001978f:	68 28 02 00 00       	push   0x228
c0019794:	e8 3a e3 fe ff       	call   c0007ad3 <malloc>
c0019799:	83 c4 10             	add    esp,0x10
c001979c:	89 c2                	mov    edx,eax
c001979e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197a5:	89 10                	mov    DWORD PTR [eax],edx
c00197a7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00197af:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00197b8:	83 ec 04             	sub    esp,0x4
c00197bb:	52                   	push   edx
c00197bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00197c0:	52                   	push   edx
c00197c1:	50                   	push   eax
c00197c2:	e8 d9 a4 fe ff       	call   c0003ca0 <f_open>
c00197c7:	83 c4 10             	add    esp,0x10
c00197ca:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00197d1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00197d9:	74 09                	je     c00197e4 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c00197db:	b8 01 00 00 00       	mov    eax,0x1
c00197e0:	eb 0a                	jmp    c00197ec <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00197e2:	66 90                	xchg   ax,ax
c00197e4:	b8 00 00 00 00       	mov    eax,0x0
c00197e9:	8d 76 00             	lea    esi,[esi+0x0]
c00197ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c00197f2:	c3                   	ret    
c00197f3:	90                   	nop

c00197f4 <FAT::openDir(char const*, void**)>:
c00197f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197fa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019802:	74 0c                	je     c0019810 <FAT::openDir(char const*, void**)+0x1c>
c0019804:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001980c:	75 0e                	jne    c001981c <FAT::openDir(char const*, void**)+0x28>
c001980e:	66 90                	xchg   ax,ax
c0019810:	b8 04 00 00 00       	mov    eax,0x4
c0019815:	e9 82 00 00 00       	jmp    c001989c <FAT::openDir(char const*, void**)+0xa8>
c001981a:	66 90                	xchg   ax,ax
c001981c:	83 ec 08             	sub    esp,0x8
c001981f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019826:	8d 44 24 18          	lea    eax,[esp+0x18]
c001982a:	50                   	push   eax
c001982b:	e8 20 6e fe ff       	call   c0000650 <strcpy>
c0019830:	83 c4 10             	add    esp,0x10
c0019833:	83 ec 08             	sub    esp,0x8
c0019836:	8d 44 24 14          	lea    eax,[esp+0x14]
c001983a:	50                   	push   eax
c001983b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019842:	e8 f9 fd ff ff       	call   c0019640 <FAT::fixFilepath(char*)>
c0019847:	83 c4 10             	add    esp,0x10
c001984a:	83 ec 0c             	sub    esp,0xc
c001984d:	6a 30                	push   0x30
c001984f:	e8 7f e2 fe ff       	call   c0007ad3 <malloc>
c0019854:	83 c4 10             	add    esp,0x10
c0019857:	89 c2                	mov    edx,eax
c0019859:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019860:	89 10                	mov    DWORD PTR [eax],edx
c0019862:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019869:	8b 00                	mov    eax,DWORD PTR [eax]
c001986b:	83 ec 08             	sub    esp,0x8
c001986e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019872:	52                   	push   edx
c0019873:	50                   	push   eax
c0019874:	e8 b6 ad fe ff       	call   c000462f <f_opendir>
c0019879:	83 c4 10             	add    esp,0x10
c001987c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019883:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001988b:	74 07                	je     c0019894 <FAT::openDir(char const*, void**)+0xa0>
c001988d:	b8 01 00 00 00       	mov    eax,0x1
c0019892:	eb 08                	jmp    c001989c <FAT::openDir(char const*, void**)+0xa8>
c0019894:	b8 00 00 00 00       	mov    eax,0x0
c0019899:	8d 76 00             	lea    esi,[esi+0x0]
c001989c:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198a2:	c3                   	ret    
c00198a3:	90                   	nop

c00198a4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00198a4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00198aa:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00198b2:	75 0c                	jne    c00198c0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00198b4:	b8 04 00 00 00       	mov    eax,0x4
c00198b9:	e9 d6 00 00 00       	jmp    c0019994 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00198be:	66 90                	xchg   ax,ax
c00198c0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00198c8:	75 0a                	jne    c00198d4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00198ca:	b8 04 00 00 00       	mov    eax,0x4
c00198cf:	e9 c0 00 00 00       	jmp    c0019994 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00198d4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00198dc:	75 0a                	jne    c00198e8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00198de:	b8 04 00 00 00       	mov    eax,0x4
c00198e3:	e9 ac 00 00 00       	jmp    c0019994 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00198e8:	83 ec 08             	sub    esp,0x8
c00198eb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00198f2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00198f9:	50                   	push   eax
c00198fa:	e8 51 6d fe ff       	call   c0000650 <strcpy>
c00198ff:	83 c4 10             	add    esp,0x10
c0019902:	83 ec 08             	sub    esp,0x8
c0019905:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001990c:	50                   	push   eax
c001990d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019914:	e8 27 fd ff ff       	call   c0019640 <FAT::fixFilepath(char*)>
c0019919:	83 c4 10             	add    esp,0x10
c001991c:	83 ec 08             	sub    esp,0x8
c001991f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019923:	50                   	push   eax
c0019924:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001992b:	50                   	push   eax
c001992c:	e8 7d ae fe ff       	call   c00047ae <f_stat>
c0019931:	83 c4 10             	add    esp,0x10
c0019934:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001993b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019942:	85 c0                	test   eax,eax
c0019944:	74 0a                	je     c0019950 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019946:	83 f8 04             	cmp    eax,0x4
c0019949:	74 39                	je     c0019984 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001994b:	eb 3f                	jmp    c001998c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001994d:	8d 76 00             	lea    esi,[esi+0x0]
c0019950:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019954:	0f b6 c0             	movzx  eax,al
c0019957:	83 e0 10             	and    eax,0x10
c001995a:	0f 95 c2             	setne  dl
c001995d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019964:	88 10                	mov    BYTE PTR [eax],dl
c0019966:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001996a:	ba 00 00 00 00       	mov    edx,0x0
c001996f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019976:	89 01                	mov    DWORD PTR [ecx],eax
c0019978:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001997b:	b8 00 00 00 00       	mov    eax,0x0
c0019980:	eb 12                	jmp    c0019994 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019982:	66 90                	xchg   ax,ax
c0019984:	b8 02 00 00 00       	mov    eax,0x2
c0019989:	eb 09                	jmp    c0019994 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001998b:	90                   	nop
c001998c:	b8 01 00 00 00       	mov    eax,0x1
c0019991:	8d 76 00             	lea    esi,[esi+0x0]
c0019994:	81 c4 2c 02 00 00    	add    esp,0x22c
c001999a:	c3                   	ret    
c001999b:	90                   	nop

c001999c <FAT::unlink(char const*)>:
c001999c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199aa:	75 08                	jne    c00199b4 <FAT::unlink(char const*)+0x18>
c00199ac:	b8 04 00 00 00       	mov    eax,0x4
c00199b1:	eb 61                	jmp    c0019a14 <FAT::unlink(char const*)+0x78>
c00199b3:	90                   	nop
c00199b4:	83 ec 08             	sub    esp,0x8
c00199b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199c2:	50                   	push   eax
c00199c3:	e8 88 6c fe ff       	call   c0000650 <strcpy>
c00199c8:	83 c4 10             	add    esp,0x10
c00199cb:	83 ec 08             	sub    esp,0x8
c00199ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199d2:	50                   	push   eax
c00199d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199da:	e8 61 fc ff ff       	call   c0019640 <FAT::fixFilepath(char*)>
c00199df:	83 c4 10             	add    esp,0x10
c00199e2:	83 ec 0c             	sub    esp,0xc
c00199e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199e9:	50                   	push   eax
c00199ea:	e8 31 b0 fe ff       	call   c0004a20 <f_unlink>
c00199ef:	83 c4 10             	add    esp,0x10
c00199f2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00199f9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019a00:	85 c0                	test   eax,eax
c0019a02:	75 08                	jne    c0019a0c <FAT::unlink(char const*)+0x70>
c0019a04:	b8 00 00 00 00       	mov    eax,0x0
c0019a09:	eb 09                	jmp    c0019a14 <FAT::unlink(char const*)+0x78>
c0019a0b:	90                   	nop
c0019a0c:	b8 01 00 00 00       	mov    eax,0x1
c0019a11:	8d 76 00             	lea    esi,[esi+0x0]
c0019a14:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a1a:	c3                   	ret    
c0019a1b:	90                   	nop

c0019a1c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019a1c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019a22:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019a29:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019a30:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a34:	88 d0                	mov    al,dl
c0019a36:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a3a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019a42:	75 0c                	jne    c0019a50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019a44:	b8 04 00 00 00       	mov    eax,0x4
c0019a49:	e9 7e 01 00 00       	jmp    c0019bcc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019a4e:	66 90                	xchg   ax,ax
c0019a50:	83 ec 08             	sub    esp,0x8
c0019a53:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019a5a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019a5e:	50                   	push   eax
c0019a5f:	e8 ec 6b fe ff       	call   c0000650 <strcpy>
c0019a64:	83 c4 10             	add    esp,0x10
c0019a67:	83 ec 08             	sub    esp,0x8
c0019a6a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019a6e:	50                   	push   eax
c0019a6f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019a76:	e8 c5 fb ff ff       	call   c0019640 <FAT::fixFilepath(char*)>
c0019a7b:	83 c4 10             	add    esp,0x10
c0019a7e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019a86:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019a8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019a93:	83 e0 01             	and    eax,0x1
c0019a96:	74 14                	je     c0019aac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019a98:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019a9f:	83 c8 01             	or     eax,0x1
c0019aa2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0019aac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ab1:	83 e0 02             	and    eax,0x2
c0019ab4:	74 12                	je     c0019ac8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0019ab6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019abd:	83 c8 20             	or     eax,0x20
c0019ac0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019ac7:	90                   	nop
c0019ac8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019acd:	83 e0 04             	and    eax,0x4
c0019ad0:	74 12                	je     c0019ae4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019ad2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019ad9:	83 c8 04             	or     eax,0x4
c0019adc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019ae3:	90                   	nop
c0019ae4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ae9:	83 e0 08             	and    eax,0x8
c0019aec:	74 12                	je     c0019b00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019aee:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019af5:	83 c8 02             	or     eax,0x2
c0019af8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019aff:	90                   	nop
c0019b00:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b05:	83 e0 01             	and    eax,0x1
c0019b08:	74 12                	je     c0019b1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019b0a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b11:	83 c8 01             	or     eax,0x1
c0019b14:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b1b:	90                   	nop
c0019b1c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b21:	83 e0 02             	and    eax,0x2
c0019b24:	74 12                	je     c0019b38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019b26:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b2d:	83 c8 20             	or     eax,0x20
c0019b30:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b37:	90                   	nop
c0019b38:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b3d:	83 e0 04             	and    eax,0x4
c0019b40:	74 12                	je     c0019b54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019b42:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b49:	83 c8 04             	or     eax,0x4
c0019b4c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b53:	90                   	nop
c0019b54:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b59:	83 e0 08             	and    eax,0x8
c0019b5c:	74 12                	je     c0019b70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0019b5e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b65:	83 c8 02             	or     eax,0x2
c0019b68:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b6f:	90                   	nop
c0019b70:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019b77:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b7e:	09 d0                	or     eax,edx
c0019b80:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b87:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019b8f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019b97:	83 ec 04             	sub    esp,0x4
c0019b9a:	52                   	push   edx
c0019b9b:	50                   	push   eax
c0019b9c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ba0:	50                   	push   eax
c0019ba1:	e8 ed b2 fe ff       	call   c0004e93 <f_chmod>
c0019ba6:	83 c4 10             	add    esp,0x10
c0019ba9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019bb0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019bb7:	85 c0                	test   eax,eax
c0019bb9:	75 09                	jne    c0019bc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019bbb:	b8 00 00 00 00       	mov    eax,0x0
c0019bc0:	eb 0a                	jmp    c0019bcc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019bc2:	66 90                	xchg   ax,ax
c0019bc4:	b8 01 00 00 00       	mov    eax,0x1
c0019bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0019bcc:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019bd2:	c3                   	ret    
c0019bd3:	90                   	nop

c0019bd4 <FAT::rename(char const*, char const*)>:
c0019bd4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019bda:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019be2:	74 0c                	je     c0019bf0 <FAT::rename(char const*, char const*)+0x1c>
c0019be4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019bec:	75 0e                	jne    c0019bfc <FAT::rename(char const*, char const*)+0x28>
c0019bee:	66 90                	xchg   ax,ax
c0019bf0:	b8 04 00 00 00       	mov    eax,0x4
c0019bf5:	e9 9e 00 00 00       	jmp    c0019c98 <FAT::rename(char const*, char const*)+0xc4>
c0019bfa:	66 90                	xchg   ax,ax
c0019bfc:	83 ec 08             	sub    esp,0x8
c0019bff:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c06:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c0d:	50                   	push   eax
c0019c0e:	e8 3d 6a fe ff       	call   c0000650 <strcpy>
c0019c13:	83 c4 10             	add    esp,0x10
c0019c16:	83 ec 08             	sub    esp,0x8
c0019c19:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019c20:	50                   	push   eax
c0019c21:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c28:	e8 13 fa ff ff       	call   c0019640 <FAT::fixFilepath(char*)>
c0019c2d:	83 c4 10             	add    esp,0x10
c0019c30:	83 ec 08             	sub    esp,0x8
c0019c33:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019c3a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c3e:	50                   	push   eax
c0019c3f:	e8 0c 6a fe ff       	call   c0000650 <strcpy>
c0019c44:	83 c4 10             	add    esp,0x10
c0019c47:	83 ec 08             	sub    esp,0x8
c0019c4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c4e:	50                   	push   eax
c0019c4f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c56:	e8 e5 f9 ff ff       	call   c0019640 <FAT::fixFilepath(char*)>
c0019c5b:	83 c4 10             	add    esp,0x10
c0019c5e:	83 ec 08             	sub    esp,0x8
c0019c61:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c65:	50                   	push   eax
c0019c66:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c6d:	50                   	push   eax
c0019c6e:	e8 68 b0 fe ff       	call   c0004cdb <f_rename>
c0019c73:	83 c4 10             	add    esp,0x10
c0019c76:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019c7d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019c84:	85 c0                	test   eax,eax
c0019c86:	75 08                	jne    c0019c90 <FAT::rename(char const*, char const*)+0xbc>
c0019c88:	b8 00 00 00 00       	mov    eax,0x0
c0019c8d:	eb 09                	jmp    c0019c98 <FAT::rename(char const*, char const*)+0xc4>
c0019c8f:	90                   	nop
c0019c90:	b8 01 00 00 00       	mov    eax,0x1
c0019c95:	8d 76 00             	lea    esi,[esi+0x0]
c0019c98:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019c9e:	c3                   	ret    
c0019c9f:	90                   	nop

c0019ca0 <FAT::mkdir(char const*)>:
c0019ca0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ca6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019cae:	75 08                	jne    c0019cb8 <FAT::mkdir(char const*)+0x18>
c0019cb0:	b8 04 00 00 00       	mov    eax,0x4
c0019cb5:	eb 61                	jmp    c0019d18 <FAT::mkdir(char const*)+0x78>
c0019cb7:	90                   	nop
c0019cb8:	83 ec 08             	sub    esp,0x8
c0019cbb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cc2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019cc6:	50                   	push   eax
c0019cc7:	e8 84 69 fe ff       	call   c0000650 <strcpy>
c0019ccc:	83 c4 10             	add    esp,0x10
c0019ccf:	83 ec 08             	sub    esp,0x8
c0019cd2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cd6:	50                   	push   eax
c0019cd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cde:	e8 5d f9 ff ff       	call   c0019640 <FAT::fixFilepath(char*)>
c0019ce3:	83 c4 10             	add    esp,0x10
c0019ce6:	83 ec 0c             	sub    esp,0xc
c0019ce9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ced:	50                   	push   eax
c0019cee:	e8 4d ae fe ff       	call   c0004b40 <f_mkdir>
c0019cf3:	83 c4 10             	add    esp,0x10
c0019cf6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019cfd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019d04:	85 c0                	test   eax,eax
c0019d06:	75 08                	jne    c0019d10 <FAT::mkdir(char const*)+0x70>
c0019d08:	b8 00 00 00 00       	mov    eax,0x0
c0019d0d:	eb 09                	jmp    c0019d18 <FAT::mkdir(char const*)+0x78>
c0019d0f:	90                   	nop
c0019d10:	b8 01 00 00 00       	mov    eax,0x1
c0019d15:	8d 76 00             	lea    esi,[esi+0x0]
c0019d18:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d1e:	c3                   	ret    
c0019d1f:	90                   	nop

c0019d20 <FAT::exists(char const*)>:
c0019d20:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019d26:	83 ec 08             	sub    esp,0x8
c0019d29:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d30:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d34:	50                   	push   eax
c0019d35:	e8 16 69 fe ff       	call   c0000650 <strcpy>
c0019d3a:	83 c4 10             	add    esp,0x10
c0019d3d:	83 ec 08             	sub    esp,0x8
c0019d40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019d44:	50                   	push   eax
c0019d45:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d4c:	e8 ef f8 ff ff       	call   c0019640 <FAT::fixFilepath(char*)>
c0019d51:	83 c4 10             	add    esp,0x10
c0019d54:	83 ec 08             	sub    esp,0x8
c0019d57:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019d5e:	50                   	push   eax
c0019d5f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d63:	50                   	push   eax
c0019d64:	e8 45 aa fe ff       	call   c00047ae <f_stat>
c0019d69:	83 c4 10             	add    esp,0x10
c0019d6c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019d73:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019d7a:	85 c0                	test   eax,eax
c0019d7c:	75 06                	jne    c0019d84 <FAT::exists(char const*)+0x64>
c0019d7e:	b0 01                	mov    al,0x1
c0019d80:	eb 06                	jmp    c0019d88 <FAT::exists(char const*)+0x68>
c0019d82:	66 90                	xchg   ax,ax
c0019d84:	b0 00                	mov    al,0x0
c0019d86:	66 90                	xchg   ax,ax
c0019d88:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019d8e:	c3                   	ret    
c0019d8f:	90                   	nop

c0019d90 <isoReadDiscSectorHelper>:
c0019d90:	83 ec 2c             	sub    esp,0x2c
c0019d93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019d97:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019d9b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019da0:	83 e8 41             	sub    eax,0x41
c0019da3:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c0019daa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019dae:	ba 00 00 00 00       	mov    edx,0x0
c0019db3:	83 ec 0c             	sub    esp,0xc
c0019db6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019dba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019dbe:	52                   	push   edx
c0019dbf:	50                   	push   eax
c0019dc0:	51                   	push   ecx
c0019dc1:	e8 1c 3c ff ff       	call   c000d9e2 <LogicalDisk::read(unsigned long long, int, void*)>
c0019dc6:	83 c4 20             	add    esp,0x20
c0019dc9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019dcd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019dd2:	74 0c                	je     c0019de0 <isoReadDiscSectorHelper+0x50>
c0019dd4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dd8:	c1 e0 0b             	shl    eax,0xb
c0019ddb:	eb 0b                	jmp    c0019de8 <isoReadDiscSectorHelper+0x58>
c0019ddd:	8d 76 00             	lea    esi,[esi+0x0]
c0019de0:	b8 00 00 00 00       	mov    eax,0x0
c0019de5:	8d 76 00             	lea    esi,[esi+0x0]
c0019de8:	83 c4 2c             	add    esp,0x2c
c0019deb:	c3                   	ret    

c0019dec <iso_kprintf>:
c0019dec:	83 ec 0c             	sub    esp,0xc
c0019def:	83 ec 08             	sub    esp,0x8
c0019df2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019df6:	68 96 24 02 c0       	push   0xc0022496
c0019dfb:	e8 0a 0b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019e00:	83 c4 10             	add    esp,0x10
c0019e03:	90                   	nop
c0019e04:	83 c4 0c             	add    esp,0xc
c0019e07:	c3                   	ret    

c0019e08 <iso_kprintfd>:
c0019e08:	83 ec 0c             	sub    esp,0xc
c0019e0b:	83 ec 08             	sub    esp,0x8
c0019e0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e12:	68 fa 0c 02 c0       	push   0xc0020cfa
c0019e17:	e8 ee 0a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019e1c:	83 c4 10             	add    esp,0x10
c0019e1f:	90                   	nop
c0019e20:	83 c4 0c             	add    esp,0xc
c0019e23:	c3                   	ret    

c0019e24 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019e24:	b8 08 00 00 00       	mov    eax,0x8
c0019e29:	c3                   	ret    

c0019e2a <ISO9660::truncate(void*, unsigned long long)>:
c0019e2a:	b8 01 00 00 00       	mov    eax,0x1
c0019e2f:	c3                   	ret    

c0019e30 <ISO9660::getName()>:
c0019e30:	b8 4c 27 02 c0       	mov    eax,0xc002274c
c0019e35:	c3                   	ret    

c0019e36 <ISO9660::closeDir(void*)>:
c0019e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e3c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019e3f:	90                   	nop

c0019e40 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019e40:	b8 01 00 00 00       	mov    eax,0x1
c0019e45:	c3                   	ret    

c0019e46 <ISO9660::unlink(char const*)>:
c0019e46:	b8 01 00 00 00       	mov    eax,0x1
c0019e4b:	c3                   	ret    

c0019e4c <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019e4c:	b8 03 00 00 00       	mov    eax,0x3
c0019e51:	c3                   	ret    

c0019e52 <ISO9660::rename(char const*, char const*)>:
c0019e52:	b8 01 00 00 00       	mov    eax,0x1
c0019e57:	c3                   	ret    

c0019e58 <ISO9660::mkdir(char const*)>:
c0019e58:	b8 01 00 00 00       	mov    eax,0x1
c0019e5d:	c3                   	ret    

c0019e5e <ISO9660::~ISO9660()>:
c0019e5e:	83 ec 0c             	sub    esp,0xc
c0019e61:	ba 8c 28 02 c0       	mov    edx,0xc002288c
c0019e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e6a:	89 10                	mov    DWORD PTR [eax],edx
c0019e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e70:	83 ec 0c             	sub    esp,0xc
c0019e73:	50                   	push   eax
c0019e74:	e8 0d 16 ff ff       	call   c000b486 <Filesystem::~Filesystem()>
c0019e79:	83 c4 10             	add    esp,0x10
c0019e7c:	90                   	nop
c0019e7d:	83 c4 0c             	add    esp,0xc
c0019e80:	c3                   	ret    
c0019e81:	90                   	nop

c0019e82 <ISO9660::~ISO9660()>:
c0019e82:	83 ec 0c             	sub    esp,0xc
c0019e85:	83 ec 0c             	sub    esp,0xc
c0019e88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e8c:	e8 cd ff ff ff       	call   c0019e5e <ISO9660::~ISO9660()>
c0019e91:	83 c4 10             	add    esp,0x10
c0019e94:	83 ec 08             	sub    esp,0x8
c0019e97:	6a 08                	push   0x8
c0019e99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e9d:	e8 6a 09 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0019ea2:	83 c4 10             	add    esp,0x10
c0019ea5:	83 c4 0c             	add    esp,0xc
c0019ea8:	c3                   	ret    
c0019ea9:	90                   	nop

c0019eaa <ISO9660::exists(char const*)>:
c0019eaa:	83 ec 18             	sub    esp,0x18
c0019ead:	68 67 27 02 c0       	push   0xc0022767
c0019eb2:	e8 ba 72 ff ff       	call   c0011171 <KePanic(char const*)>
c0019eb7:	31 c0                	xor    eax,eax
c0019eb9:	83 c4 1c             	add    esp,0x1c
c0019ebc:	c3                   	ret    
c0019ebd:	90                   	nop

c0019ebe <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019ebe:	56                   	push   esi
c0019ebf:	53                   	push   ebx
c0019ec0:	53                   	push   ebx
c0019ec1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ec5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019ec9:	85 db                	test   ebx,ebx
c0019ecb:	0f 84 ca 00 00 00    	je     c0019f9b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019ed1:	85 f6                	test   esi,esi
c0019ed3:	0f 84 c2 00 00 00    	je     c0019f9b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019ed9:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019ede:	b8 03 00 00 00       	mov    eax,0x3
c0019ee3:	0f 85 b7 00 00 00    	jne    c0019fa0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019ee9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019eeb:	38 0d 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,cl
c0019ef1:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c0019ef8:	74 1b                	je     c0019f15 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019efa:	85 c0                	test   eax,eax
c0019efc:	74 10                	je     c0019f0e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019efe:	83 ec 0c             	sub    esp,0xc
c0019f01:	68 85 27 02 c0       	push   0xc0022785
c0019f06:	e8 66 72 ff ff       	call   c0011171 <KePanic(char const*)>
c0019f0b:	83 c4 10             	add    esp,0x10
c0019f0e:	8a 03                	mov    al,BYTE PTR [ebx]
c0019f10:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c0019f15:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f18:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c0019f1f:	85 c0                	test   eax,eax
c0019f21:	74 09                	je     c0019f2c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019f23:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019f2a:	74 48                	je     c0019f74 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019f2c:	83 ec 0c             	sub    esp,0xc
c0019f2f:	68 95 27 02 c0       	push   0xc0022795
c0019f34:	e8 d1 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f39:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f3c:	83 c4 10             	add    esp,0x10
c0019f3f:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c0019f46:	85 c0                	test   eax,eax
c0019f48:	74 17                	je     c0019f61 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019f4a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019f51:	83 ec 0c             	sub    esp,0xc
c0019f54:	68 b5 27 02 c0       	push   0xc00227b5
c0019f59:	e8 ac 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f5e:	83 c4 10             	add    esp,0x10
c0019f61:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c0019f68:	83 ec 0c             	sub    esp,0xc
c0019f6b:	50                   	push   eax
c0019f6c:	e8 f6 ca fe ff       	call   c0006a67 <init_percd>
c0019f71:	83 c4 10             	add    esp,0x10
c0019f74:	51                   	push   ecx
c0019f75:	83 c3 03             	add    ebx,0x3
c0019f78:	51                   	push   ecx
c0019f79:	6a 00                	push   0x0
c0019f7b:	53                   	push   ebx
c0019f7c:	e8 a9 c5 fe ff       	call   c000652a <iso_open>
c0019f81:	83 c4 10             	add    esp,0x10
c0019f84:	89 c2                	mov    edx,eax
c0019f86:	b8 01 00 00 00       	mov    eax,0x1
c0019f8b:	83 fa ff             	cmp    edx,0xffffffff
c0019f8e:	74 10                	je     c0019fa0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019f90:	83 c2 32             	add    edx,0x32
c0019f93:	31 c0                	xor    eax,eax
c0019f95:	01 d2                	add    edx,edx
c0019f97:	89 16                	mov    DWORD PTR [esi],edx
c0019f99:	eb 05                	jmp    c0019fa0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019f9b:	b8 04 00 00 00       	mov    eax,0x4
c0019fa0:	5a                   	pop    edx
c0019fa1:	5b                   	pop    ebx
c0019fa2:	5e                   	pop    esi
c0019fa3:	c3                   	ret    

c0019fa4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019fa4:	53                   	push   ebx
c0019fa5:	83 ec 08             	sub    esp,0x8
c0019fa8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019fac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019fb0:	85 c0                	test   eax,eax
c0019fb2:	74 2d                	je     c0019fe1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019fb4:	85 db                	test   ebx,ebx
c0019fb6:	74 29                	je     c0019fe1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019fb8:	52                   	push   edx
c0019fb9:	b9 02 00 00 00       	mov    ecx,0x2
c0019fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fc2:	99                   	cdq    
c0019fc3:	f7 f9                	idiv   ecx
c0019fc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019fc9:	83 e8 32             	sub    eax,0x32
c0019fcc:	50                   	push   eax
c0019fcd:	e8 00 c6 fe ff       	call   c00065d2 <iso_read>
c0019fd2:	83 c4 10             	add    esp,0x10
c0019fd5:	89 03                	mov    DWORD PTR [ebx],eax
c0019fd7:	09 d0                	or     eax,edx
c0019fd9:	0f 94 c0             	sete   al
c0019fdc:	0f b6 c0             	movzx  eax,al
c0019fdf:	eb 05                	jmp    c0019fe6 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0019fe1:	b8 04 00 00 00       	mov    eax,0x4
c0019fe6:	83 c4 08             	add    esp,0x8
c0019fe9:	5b                   	pop    ebx
c0019fea:	c3                   	ret    
c0019feb:	90                   	nop

c0019fec <ISO9660::seek(void*, unsigned long long)>:
c0019fec:	57                   	push   edi
c0019fed:	b8 04 00 00 00       	mov    eax,0x4
c0019ff2:	56                   	push   esi
c0019ff3:	51                   	push   ecx
c0019ff4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019ff8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019ffc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a000:	85 d2                	test   edx,edx
c001a002:	74 26                	je     c001a02a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a004:	89 d0                	mov    eax,edx
c001a006:	b9 02 00 00 00       	mov    ecx,0x2
c001a00b:	6a 00                	push   0x0
c001a00d:	99                   	cdq    
c001a00e:	f7 f9                	idiv   ecx
c001a010:	57                   	push   edi
c001a011:	56                   	push   esi
c001a012:	83 e8 32             	sub    eax,0x32
c001a015:	50                   	push   eax
c001a016:	e8 cd c6 fe ff       	call   c00066e8 <iso_seek>
c001a01b:	83 c4 10             	add    esp,0x10
c001a01e:	31 f0                	xor    eax,esi
c001a020:	31 fa                	xor    edx,edi
c001a022:	09 d0                	or     eax,edx
c001a024:	0f 95 c0             	setne  al
c001a027:	0f b6 c0             	movzx  eax,al
c001a02a:	5a                   	pop    edx
c001a02b:	5e                   	pop    esi
c001a02c:	5f                   	pop    edi
c001a02d:	c3                   	ret    

c001a02e <ISO9660::tell(void*, unsigned long long*)>:
c001a02e:	53                   	push   ebx
c001a02f:	83 ec 08             	sub    esp,0x8
c001a032:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a036:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a03a:	85 c0                	test   eax,eax
c001a03c:	74 24                	je     c001a062 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a03e:	85 db                	test   ebx,ebx
c001a040:	74 20                	je     c001a062 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a042:	b9 02 00 00 00       	mov    ecx,0x2
c001a047:	99                   	cdq    
c001a048:	f7 f9                	idiv   ecx
c001a04a:	83 ec 0c             	sub    esp,0xc
c001a04d:	83 e8 32             	sub    eax,0x32
c001a050:	50                   	push   eax
c001a051:	e8 16 c7 fe ff       	call   c000676c <iso_tell>
c001a056:	83 c4 10             	add    esp,0x10
c001a059:	89 03                	mov    DWORD PTR [ebx],eax
c001a05b:	31 c0                	xor    eax,eax
c001a05d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a060:	eb 05                	jmp    c001a067 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a062:	b8 04 00 00 00       	mov    eax,0x4
c001a067:	83 c4 08             	add    esp,0x8
c001a06a:	5b                   	pop    ebx
c001a06b:	c3                   	ret    

c001a06c <ISO9660::stat(void*, unsigned long long*)>:
c001a06c:	56                   	push   esi
c001a06d:	53                   	push   ebx
c001a06e:	83 ec 10             	sub    esp,0x10
c001a071:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a075:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a079:	68 d9 27 02 c0       	push   0xc00227d9
c001a07e:	e8 87 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a083:	83 c4 10             	add    esp,0x10
c001a086:	85 db                	test   ebx,ebx
c001a088:	74 2a                	je     c001a0b4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a08a:	85 f6                	test   esi,esi
c001a08c:	74 26                	je     c001a0b4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a08e:	89 d8                	mov    eax,ebx
c001a090:	b9 02 00 00 00       	mov    ecx,0x2
c001a095:	99                   	cdq    
c001a096:	83 ec 0c             	sub    esp,0xc
c001a099:	f7 f9                	idiv   ecx
c001a09b:	83 e8 32             	sub    eax,0x32
c001a09e:	50                   	push   eax
c001a09f:	e8 f9 c6 fe ff       	call   c000679d <iso_total>
c001a0a4:	83 c4 10             	add    esp,0x10
c001a0a7:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a0ae:	89 06                	mov    DWORD PTR [esi],eax
c001a0b0:	31 c0                	xor    eax,eax
c001a0b2:	eb 05                	jmp    c001a0b9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a0b4:	b8 04 00 00 00       	mov    eax,0x4
c001a0b9:	5a                   	pop    edx
c001a0ba:	5b                   	pop    ebx
c001a0bb:	5e                   	pop    esi
c001a0bc:	c3                   	ret    
c001a0bd:	90                   	nop

c001a0be <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a0be:	55                   	push   ebp
c001a0bf:	57                   	push   edi
c001a0c0:	56                   	push   esi
c001a0c1:	53                   	push   ebx
c001a0c2:	83 ec 18             	sub    esp,0x18
c001a0c5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a0c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a0cd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a0d1:	68 e1 27 02 c0       	push   0xc00227e1
c001a0d6:	e8 2f 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a0db:	83 c4 10             	add    esp,0x10
c001a0de:	85 ff                	test   edi,edi
c001a0e0:	0f 94 c0             	sete   al
c001a0e3:	85 f6                	test   esi,esi
c001a0e5:	0f 94 c2             	sete   dl
c001a0e8:	09 d0                	or     eax,edx
c001a0ea:	a8 01                	test   al,0x1
c001a0ec:	0f 85 dd 00 00 00    	jne    c001a1cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a0f2:	85 db                	test   ebx,ebx
c001a0f4:	0f 84 d5 00 00 00    	je     c001a1cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a0fa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a0fd:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a103:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a10a:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a111:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a113:	38 0d 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,cl
c001a119:	74 1b                	je     c001a136 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a11b:	85 c0                	test   eax,eax
c001a11d:	74 10                	je     c001a12f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a11f:	83 ec 0c             	sub    esp,0xc
c001a122:	68 85 27 02 c0       	push   0xc0022785
c001a127:	e8 45 70 ff ff       	call   c0011171 <KePanic(char const*)>
c001a12c:	83 c4 10             	add    esp,0x10
c001a12f:	8a 03                	mov    al,BYTE PTR [ebx]
c001a131:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c001a136:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a139:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a140:	85 c0                	test   eax,eax
c001a142:	74 09                	je     c001a14d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a144:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a14b:	74 51                	je     c001a19e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a14d:	83 ec 0c             	sub    esp,0xc
c001a150:	68 e9 27 02 c0       	push   0xc00227e9
c001a155:	e8 b0 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a15a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a15d:	83 c4 10             	add    esp,0x10
c001a160:	83 3c 85 dc 93 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd6c24],0x0
c001a168:	74 21                	je     c001a18b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a16a:	83 ec 0c             	sub    esp,0xc
c001a16d:	68 09 28 02 c0       	push   0xc0022809
c001a172:	e8 93 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a177:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a17a:	83 c4 10             	add    esp,0x10
c001a17d:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a184:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a18b:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a192:	83 ec 0c             	sub    esp,0xc
c001a195:	50                   	push   eax
c001a196:	e8 cc c8 fe ff       	call   c0006a67 <init_percd>
c001a19b:	83 c4 10             	add    esp,0x10
c001a19e:	52                   	push   edx
c001a19f:	83 c3 03             	add    ebx,0x3
c001a1a2:	52                   	push   edx
c001a1a3:	6a 00                	push   0x0
c001a1a5:	53                   	push   ebx
c001a1a6:	e8 7f c3 fe ff       	call   c000652a <iso_open>
c001a1ab:	83 c4 10             	add    esp,0x10
c001a1ae:	83 f8 ff             	cmp    eax,0xffffffff
c001a1b1:	89 c5                	mov    ebp,eax
c001a1b3:	75 21                	jne    c001a1d6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a1b5:	50                   	push   eax
c001a1b6:	50                   	push   eax
c001a1b7:	6a 01                	push   0x1
c001a1b9:	53                   	push   ebx
c001a1ba:	e8 6b c3 fe ff       	call   c000652a <iso_open>
c001a1bf:	83 c4 10             	add    esp,0x10
c001a1c2:	ba 02 00 00 00       	mov    edx,0x2
c001a1c7:	40                   	inc    eax
c001a1c8:	74 2b                	je     c001a1f5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a1ca:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a1cd:	eb 24                	jmp    c001a1f3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a1cf:	ba 04 00 00 00       	mov    edx,0x4
c001a1d4:	eb 1f                	jmp    c001a1f5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a1d6:	83 ec 0c             	sub    esp,0xc
c001a1d9:	50                   	push   eax
c001a1da:	e8 be c5 fe ff       	call   c000679d <iso_total>
c001a1df:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a1e6:	89 07                	mov    DWORD PTR [edi],eax
c001a1e8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a1eb:	e8 c4 c3 fe ff       	call   c00065b4 <iso_close>
c001a1f0:	83 c4 10             	add    esp,0x10
c001a1f3:	31 d2                	xor    edx,edx
c001a1f5:	83 c4 0c             	add    esp,0xc
c001a1f8:	89 d0                	mov    eax,edx
c001a1fa:	5b                   	pop    ebx
c001a1fb:	5e                   	pop    esi
c001a1fc:	5f                   	pop    edi
c001a1fd:	5d                   	pop    ebp
c001a1fe:	c3                   	ret    
c001a1ff:	90                   	nop

c001a200 <ISO9660::close(void*)>:
c001a200:	83 ec 0c             	sub    esp,0xc
c001a203:	b8 04 00 00 00       	mov    eax,0x4
c001a208:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a20c:	85 d2                	test   edx,edx
c001a20e:	74 1b                	je     c001a22b <ISO9660::close(void*)+0x2b>
c001a210:	89 d0                	mov    eax,edx
c001a212:	b9 02 00 00 00       	mov    ecx,0x2
c001a217:	99                   	cdq    
c001a218:	83 ec 0c             	sub    esp,0xc
c001a21b:	f7 f9                	idiv   ecx
c001a21d:	83 e8 32             	sub    eax,0x32
c001a220:	50                   	push   eax
c001a221:	e8 8e c3 fe ff       	call   c00065b4 <iso_close>
c001a226:	83 c4 10             	add    esp,0x10
c001a229:	31 c0                	xor    eax,eax
c001a22b:	83 c4 0c             	add    esp,0xc
c001a22e:	c3                   	ret    
c001a22f:	90                   	nop

c001a230 <ISO9660::openDir(char const*, void**)>:
c001a230:	56                   	push   esi
c001a231:	53                   	push   ebx
c001a232:	50                   	push   eax
c001a233:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a237:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a23b:	85 db                	test   ebx,ebx
c001a23d:	0f 84 bd 00 00 00    	je     c001a300 <ISO9660::openDir(char const*, void**)+0xd0>
c001a243:	85 f6                	test   esi,esi
c001a245:	0f 84 b5 00 00 00    	je     c001a300 <ISO9660::openDir(char const*, void**)+0xd0>
c001a24b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a24d:	38 15 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,dl
c001a253:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a25a:	74 1b                	je     c001a277 <ISO9660::openDir(char const*, void**)+0x47>
c001a25c:	85 c0                	test   eax,eax
c001a25e:	74 10                	je     c001a270 <ISO9660::openDir(char const*, void**)+0x40>
c001a260:	83 ec 0c             	sub    esp,0xc
c001a263:	68 85 27 02 c0       	push   0xc0022785
c001a268:	e8 04 6f ff ff       	call   c0011171 <KePanic(char const*)>
c001a26d:	83 c4 10             	add    esp,0x10
c001a270:	8a 03                	mov    al,BYTE PTR [ebx]
c001a272:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c001a277:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a27a:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a281:	85 c0                	test   eax,eax
c001a283:	74 10                	je     c001a295 <ISO9660::openDir(char const*, void**)+0x65>
c001a285:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a28c:	74 1a                	je     c001a2a8 <ISO9660::openDir(char const*, void**)+0x78>
c001a28e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a295:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a29c:	83 ec 0c             	sub    esp,0xc
c001a29f:	50                   	push   eax
c001a2a0:	e8 c2 c7 fe ff       	call   c0006a67 <init_percd>
c001a2a5:	83 c4 10             	add    esp,0x10
c001a2a8:	50                   	push   eax
c001a2a9:	83 c3 03             	add    ebx,0x3
c001a2ac:	50                   	push   eax
c001a2ad:	6a 01                	push   0x1
c001a2af:	53                   	push   ebx
c001a2b0:	e8 75 c2 fe ff       	call   c000652a <iso_open>
c001a2b5:	83 c4 10             	add    esp,0x10
c001a2b8:	83 f8 ff             	cmp    eax,0xffffffff
c001a2bb:	89 c3                	mov    ebx,eax
c001a2bd:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a2c2:	75 1c                	jne    c001a2e0 <ISO9660::openDir(char const*, void**)+0xb0>
c001a2c4:	53                   	push   ebx
c001a2c5:	53                   	push   ebx
c001a2c6:	68 2d 28 02 c0       	push   0xc002282d
c001a2cb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a2d1:	e8 d6 e7 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a2d6:	83 c4 10             	add    esp,0x10
c001a2d9:	b8 01 00 00 00       	mov    eax,0x1
c001a2de:	eb 25                	jmp    c001a305 <ISO9660::openDir(char const*, void**)+0xd5>
c001a2e0:	51                   	push   ecx
c001a2e1:	01 db                	add    ebx,ebx
c001a2e3:	51                   	push   ecx
c001a2e4:	83 c3 65             	add    ebx,0x65
c001a2e7:	68 40 28 02 c0       	push   0xc0022840
c001a2ec:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a2f2:	e8 b5 e7 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a2f7:	83 c4 10             	add    esp,0x10
c001a2fa:	31 c0                	xor    eax,eax
c001a2fc:	89 1e                	mov    DWORD PTR [esi],ebx
c001a2fe:	eb 05                	jmp    c001a305 <ISO9660::openDir(char const*, void**)+0xd5>
c001a300:	b8 04 00 00 00       	mov    eax,0x4
c001a305:	5a                   	pop    edx
c001a306:	5b                   	pop    ebx
c001a307:	5e                   	pop    esi
c001a308:	c3                   	ret    
c001a309:	90                   	nop

c001a30a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a30a:	55                   	push   ebp
c001a30b:	57                   	push   edi
c001a30c:	56                   	push   esi
c001a30d:	53                   	push   ebx
c001a30e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a314:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a31b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a322:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a329:	85 db                	test   ebx,ebx
c001a32b:	0f 84 e4 00 00 00    	je     c001a415 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a331:	85 ed                	test   ebp,ebp
c001a333:	0f 84 dc 00 00 00    	je     c001a415 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a339:	83 ec 0c             	sub    esp,0xc
c001a33c:	68 53 28 02 c0       	push   0xc0022853
c001a341:	e8 c4 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a346:	89 d8                	mov    eax,ebx
c001a348:	b9 02 00 00 00       	mov    ecx,0x2
c001a34d:	99                   	cdq    
c001a34e:	f7 f9                	idiv   ecx
c001a350:	83 e8 32             	sub    eax,0x32
c001a353:	89 04 24             	mov    DWORD PTR [esp],eax
c001a356:	e8 94 c4 fe ff       	call   c00067ef <iso_readdir>
c001a35b:	83 c4 10             	add    esp,0x10
c001a35e:	85 c0                	test   eax,eax
c001a360:	89 c3                	mov    ebx,eax
c001a362:	75 38                	jne    c001a39c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a364:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a369:	53                   	push   ebx
c001a36a:	53                   	push   ebx
c001a36b:	68 5e 28 02 c0       	push   0xc002285e
c001a370:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a376:	e8 31 e7 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a37b:	83 c4 0c             	add    esp,0xc
c001a37e:	68 10 01 00 00       	push   0x110
c001a383:	6a 00                	push   0x0
c001a385:	57                   	push   edi
c001a386:	e8 65 61 fe ff       	call   c00004f0 <memset>
c001a38b:	83 c4 10             	add    esp,0x10
c001a38e:	b8 01 00 00 00       	mov    eax,0x1
c001a393:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a39a:	eb 7e                	jmp    c001a41a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a39c:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a3a2:	8d 70 08             	lea    esi,[eax+0x8]
c001a3a5:	83 ec 0c             	sub    esp,0xc
c001a3a8:	56                   	push   esi
c001a3a9:	e8 d2 61 fe ff       	call   c0000580 <strlen>
c001a3ae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a3b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a3ba:	83 c4 10             	add    esp,0x10
c001a3bd:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a3c1:	75 0a                	jne    c001a3cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a3c3:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a3c6:	b8 02 00 00 00       	mov    eax,0x2
c001a3cb:	74 05                	je     c001a3d2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a3cd:	b8 01 00 00 00       	mov    eax,0x1
c001a3d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3d6:	50                   	push   eax
c001a3d7:	50                   	push   eax
c001a3d8:	56                   	push   esi
c001a3d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a3dd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a3e1:	50                   	push   eax
c001a3e2:	e8 69 62 fe ff       	call   c0000650 <strcpy>
c001a3e7:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a3ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3f0:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a3f7:	5a                   	pop    edx
c001a3f8:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a3fd:	59                   	pop    ecx
c001a3fe:	68 71 28 02 c0       	push   0xc0022871
c001a403:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a409:	e8 9e e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a40e:	83 c4 10             	add    esp,0x10
c001a411:	31 c0                	xor    eax,eax
c001a413:	eb 05                	jmp    c001a41a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a415:	b8 04 00 00 00       	mov    eax,0x4
c001a41a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a420:	5b                   	pop    ebx
c001a421:	5e                   	pop    esi
c001a422:	5f                   	pop    edi
c001a423:	5d                   	pop    ebp
c001a424:	c3                   	ret    

c001a425 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a425:	57                   	push   edi
c001a426:	56                   	push   esi
c001a427:	53                   	push   ebx
c001a428:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a42c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a430:	39 35 24 a6 02 c0    	cmp    DWORD PTR ds:0xc002a624,esi
c001a436:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a43a:	0f be cb             	movsx  ecx,bl
c001a43d:	75 0b                	jne    c001a44a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a43f:	0f be 05 a0 36 02 c0 	movsx  eax,BYTE PTR ds:0xc00236a0
c001a446:	39 c8                	cmp    eax,ecx
c001a448:	74 47                	je     c001a491 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a44a:	83 ec 0c             	sub    esp,0xc
c001a44d:	31 d2                	xor    edx,edx
c001a44f:	68 40 a6 02 c0       	push   0xc002a640
c001a454:	6a 01                	push   0x1
c001a456:	52                   	push   edx
c001a457:	56                   	push   esi
c001a458:	ff 34 8d dc 93 02 c0 	push   DWORD PTR [ecx*4-0x3ffd6c24]
c001a45f:	e8 7e 35 ff ff       	call   c000d9e2 <LogicalDisk::read(unsigned long long, int, void*)>
c001a464:	83 c4 20             	add    esp,0x20
c001a467:	85 c0                	test   eax,eax
c001a469:	75 0e                	jne    c001a479 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a46b:	89 35 24 a6 02 c0    	mov    DWORD PTR ds:0xc002a624,esi
c001a471:	88 1d a0 36 02 c0    	mov    BYTE PTR ds:0xc00236a0,bl
c001a477:	eb 18                	jmp    c001a491 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a479:	50                   	push   eax
c001a47a:	68 00 08 00 00       	push   0x800
c001a47f:	6a 00                	push   0x0
c001a481:	57                   	push   edi
c001a482:	e8 69 60 fe ff       	call   c00004f0 <memset>
c001a487:	83 c4 10             	add    esp,0x10
c001a48a:	b8 01 00 00 00       	mov    eax,0x1
c001a48f:	eb 0e                	jmp    c001a49f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a491:	be 40 a6 02 c0       	mov    esi,0xc002a640
c001a496:	b9 00 08 00 00       	mov    ecx,0x800
c001a49b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a49d:	31 c0                	xor    eax,eax
c001a49f:	5b                   	pop    ebx
c001a4a0:	5e                   	pop    esi
c001a4a1:	5f                   	pop    edi
c001a4a2:	c3                   	ret    
c001a4a3:	90                   	nop

c001a4a4 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a4a4:	53                   	push   ebx
c001a4a5:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a4ab:	c7 05 24 a6 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a624,0xdeadbeef
c001a4b5:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a4bc:	8d 58 41             	lea    ebx,[eax+0x41]
c001a4bf:	0f be db             	movsx  ebx,bl
c001a4c2:	53                   	push   ebx
c001a4c3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a4c7:	50                   	push   eax
c001a4c8:	6a 10                	push   0x10
c001a4ca:	e8 56 ff ff ff       	call   c001a425 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a4cf:	83 c4 10             	add    esp,0x10
c001a4d2:	31 d2                	xor    edx,edx
c001a4d4:	85 c0                	test   eax,eax
c001a4d6:	75 33                	jne    c001a50b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4d8:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a4dd:	75 2c                	jne    c001a50b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4df:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a4e4:	75 25                	jne    c001a50b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4e6:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a4eb:	75 1e                	jne    c001a50b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4ed:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a4f2:	75 17                	jne    c001a50b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4f4:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a4f9:	75 10                	jne    c001a50b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a4fb:	83 ec 0c             	sub    esp,0xc
c001a4fe:	53                   	push   ebx
c001a4ff:	e8 63 c5 fe ff       	call   c0006a67 <init_percd>
c001a504:	83 c4 10             	add    esp,0x10
c001a507:	40                   	inc    eax
c001a508:	0f 95 c2             	setne  dl
c001a50b:	81 c4 08 08 00 00    	add    esp,0x808
c001a511:	88 d0                	mov    al,dl
c001a513:	5b                   	pop    ebx
c001a514:	c3                   	ret    
c001a515:	90                   	nop

c001a516 <ISO9660::ISO9660()>:
c001a516:	83 ec 0c             	sub    esp,0xc
c001a519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a51d:	83 ec 0c             	sub    esp,0xc
c001a520:	50                   	push   eax
c001a521:	e8 3c 0f ff ff       	call   c000b462 <Filesystem::Filesystem()>
c001a526:	83 c4 10             	add    esp,0x10
c001a529:	ba 8c 28 02 c0       	mov    edx,0xc002288c
c001a52e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a532:	89 10                	mov    DWORD PTR [eax],edx
c001a534:	e8 40 c6 fe ff       	call   c0006b79 <fs_iso9660_init>
c001a539:	90                   	nop
c001a53a:	83 c4 0c             	add    esp,0xc
c001a53d:	c3                   	ret    

c001a53e <SoundCard::beginPlayback()>:
c001a53e:	c7 44 24 04 f0 28 02 c0 	mov    DWORD PTR [esp+0x4],0xc00228f0
c001a546:	e9 26 6c ff ff       	jmp    c0011171 <KePanic(char const*)>
c001a54b:	90                   	nop

c001a54c <SoundCard::stopPlayback()>:
c001a54c:	c7 44 24 04 f0 28 02 c0 	mov    DWORD PTR [esp+0x4],0xc00228f0
c001a554:	e9 18 6c ff ff       	jmp    c0011171 <KePanic(char const*)>
c001a559:	90                   	nop

c001a55a <SoundCard::SoundCard(char const*)>:
c001a55a:	83 ec 1c             	sub    esp,0x1c
c001a55d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a561:	83 ec 08             	sub    esp,0x8
c001a564:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a568:	50                   	push   eax
c001a569:	e8 22 22 ff ff       	call   c000c790 <Device::Device(char const*)>
c001a56e:	83 c4 10             	add    esp,0x10
c001a571:	ba 3c 29 02 c0       	mov    edx,0xc002293c
c001a576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a57a:	89 10                	mov    DWORD PTR [eax],edx
c001a57c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a580:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a58b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a599:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a5a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5a7:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a5b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5b5:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a5bf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a5c7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a5cc:	7f 1a                	jg     c001a5e8 <SoundCard::SoundCard(char const*)+0x8e>
c001a5ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a5d6:	83 c2 54             	add    edx,0x54
c001a5d9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a5e1:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a5e6:	eb df                	jmp    c001a5c7 <SoundCard::SoundCard(char const*)+0x6d>
c001a5e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5ec:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a5f3:	90                   	nop
c001a5f4:	83 c4 1c             	add    esp,0x1c
c001a5f7:	c3                   	ret    

c001a5f8 <SoundCard::~SoundCard()>:
c001a5f8:	83 ec 0c             	sub    esp,0xc
c001a5fb:	ba 3c 29 02 c0       	mov    edx,0xc002293c
c001a600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a604:	89 10                	mov    DWORD PTR [eax],edx
c001a606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a60a:	83 ec 0c             	sub    esp,0xc
c001a60d:	50                   	push   eax
c001a60e:	e8 e7 1e ff ff       	call   c000c4fa <Device::~Device()>
c001a613:	83 c4 10             	add    esp,0x10
c001a616:	90                   	nop
c001a617:	83 c4 0c             	add    esp,0xc
c001a61a:	c3                   	ret    
c001a61b:	90                   	nop

c001a61c <SoundCard::~SoundCard()>:
c001a61c:	83 ec 0c             	sub    esp,0xc
c001a61f:	83 ec 0c             	sub    esp,0xc
c001a622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a626:	e8 cd ff ff ff       	call   c001a5f8 <SoundCard::~SoundCard()>
c001a62b:	83 c4 10             	add    esp,0x10
c001a62e:	83 ec 08             	sub    esp,0x8
c001a631:	68 e8 01 00 00       	push   0x1e8
c001a636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a63a:	e8 cd 01 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a63f:	83 c4 10             	add    esp,0x10
c001a642:	83 c4 0c             	add    esp,0xc
c001a645:	c3                   	ret    

c001a646 <SoundCard::configureRates(int, int, int)>:
c001a646:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a64a:	31 c0                	xor    eax,eax
c001a64c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a653:	75 20                	jne    c001a675 <SoundCard::configureRates(int, int, int)+0x2f>
c001a655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a659:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a65f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a663:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a66d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a673:	b0 01                	mov    al,0x1
c001a675:	c3                   	ret    

c001a676 <SoundCard::getSamples16(int, short*)>:
c001a676:	55                   	push   ebp
c001a677:	57                   	push   edi
c001a678:	31 ff                	xor    edi,edi
c001a67a:	56                   	push   esi
c001a67b:	53                   	push   ebx
c001a67c:	31 db                	xor    ebx,ebx
c001a67e:	83 ec 10             	sub    esp,0x10
c001a681:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a685:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a689:	8d 04 36             	lea    eax,[esi+esi*1]
c001a68c:	50                   	push   eax
c001a68d:	6a 00                	push   0x0
c001a68f:	55                   	push   ebp
c001a690:	e8 5b 5e fe ff       	call   c00004f0 <memset>
c001a695:	83 c4 10             	add    esp,0x10
c001a698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a69c:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a6a3:	85 c0                	test   eax,eax
c001a6a5:	74 1a                	je     c001a6c1 <SoundCard::getSamples16(int, short*)+0x4b>
c001a6a7:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a6ab:	75 14                	jne    c001a6c1 <SoundCard::getSamples16(int, short*)+0x4b>
c001a6ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a6b1:	55                   	push   ebp
c001a6b2:	56                   	push   esi
c001a6b3:	50                   	push   eax
c001a6b4:	e8 f3 02 00 00       	call   c001a9ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a6b9:	83 c4 10             	add    esp,0x10
c001a6bc:	39 c3                	cmp    ebx,eax
c001a6be:	0f 4c d8             	cmovl  ebx,eax
c001a6c1:	47                   	inc    edi
c001a6c2:	83 ff 20             	cmp    edi,0x20
c001a6c5:	75 d1                	jne    c001a698 <SoundCard::getSamples16(int, short*)+0x22>
c001a6c7:	83 c4 0c             	add    esp,0xc
c001a6ca:	89 d8                	mov    eax,ebx
c001a6cc:	5b                   	pop    ebx
c001a6cd:	5e                   	pop    esi
c001a6ce:	5f                   	pop    edi
c001a6cf:	5d                   	pop    ebp
c001a6d0:	c3                   	ret    
c001a6d1:	90                   	nop

c001a6d2 <SoundCard::getSamples32(int, int*)>:
c001a6d2:	55                   	push   ebp
c001a6d3:	57                   	push   edi
c001a6d4:	31 ff                	xor    edi,edi
c001a6d6:	56                   	push   esi
c001a6d7:	31 f6                	xor    esi,esi
c001a6d9:	53                   	push   ebx
c001a6da:	83 ec 10             	sub    esp,0x10
c001a6dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a6e1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a6e5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a6e9:	c1 e0 02             	shl    eax,0x2
c001a6ec:	50                   	push   eax
c001a6ed:	6a 00                	push   0x0
c001a6ef:	55                   	push   ebp
c001a6f0:	e8 fb 5d fe ff       	call   c00004f0 <memset>
c001a6f5:	83 c4 10             	add    esp,0x10
c001a6f8:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a6ff:	85 c0                	test   eax,eax
c001a701:	74 1a                	je     c001a71d <SoundCard::getSamples32(int, int*)+0x4b>
c001a703:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a707:	75 14                	jne    c001a71d <SoundCard::getSamples32(int, int*)+0x4b>
c001a709:	53                   	push   ebx
c001a70a:	55                   	push   ebp
c001a70b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a70f:	50                   	push   eax
c001a710:	e8 67 03 00 00       	call   c001aa7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a715:	83 c4 10             	add    esp,0x10
c001a718:	39 c6                	cmp    esi,eax
c001a71a:	0f 4c f0             	cmovl  esi,eax
c001a71d:	47                   	inc    edi
c001a71e:	83 ff 20             	cmp    edi,0x20
c001a721:	75 d5                	jne    c001a6f8 <SoundCard::getSamples32(int, int*)+0x26>
c001a723:	85 f6                	test   esi,esi
c001a725:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a72c:	75 0f                	jne    c001a73d <SoundCard::getSamples32(int, int*)+0x6b>
c001a72e:	85 c0                	test   eax,eax
c001a730:	74 1b                	je     c001a74d <SoundCard::getSamples32(int, int*)+0x7b>
c001a732:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a734:	83 ec 0c             	sub    esp,0xc
c001a737:	53                   	push   ebx
c001a738:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a73b:	eb 0d                	jmp    c001a74a <SoundCard::getSamples32(int, int*)+0x78>
c001a73d:	85 c0                	test   eax,eax
c001a73f:	75 0c                	jne    c001a74d <SoundCard::getSamples32(int, int*)+0x7b>
c001a741:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a743:	83 ec 0c             	sub    esp,0xc
c001a746:	53                   	push   ebx
c001a747:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a74a:	83 c4 10             	add    esp,0x10
c001a74d:	83 c4 0c             	add    esp,0xc
c001a750:	89 f0                	mov    eax,esi
c001a752:	5b                   	pop    ebx
c001a753:	5e                   	pop    esi
c001a754:	5f                   	pop    edi
c001a755:	5d                   	pop    ebp
c001a756:	c3                   	ret    
c001a757:	90                   	nop

c001a758 <SoundCard::addChannel(SoundPort*)>:
c001a758:	83 ec 0c             	sub    esp,0xc
c001a75b:	31 c0                	xor    eax,eax
c001a75d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a761:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a769:	74 1b                	je     c001a786 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a76b:	40                   	inc    eax
c001a76c:	83 f8 20             	cmp    eax,0x20
c001a76f:	75 f0                	jne    c001a761 <SoundCard::addChannel(SoundPort*)+0x9>
c001a771:	83 ec 0c             	sub    esp,0xc
c001a774:	68 15 29 02 c0       	push   0xc0022915
c001a779:	e8 f3 69 ff ff       	call   c0011171 <KePanic(char const*)>
c001a77e:	83 c4 10             	add    esp,0x10
c001a781:	83 c8 ff             	or     eax,0xffffffff
c001a784:	eb 0b                	jmp    c001a791 <SoundCard::addChannel(SoundPort*)+0x39>
c001a786:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a78a:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a791:	83 c4 0c             	add    esp,0xc
c001a794:	c3                   	ret    
c001a795:	90                   	nop

c001a796 <SoundCard::removeChannel(int)>:
c001a796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a79a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a79e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a7a9:	c3                   	ret    
c001a7aa:	66 90                	xchg   ax,ax

c001a7ac <SoundPort::SoundPort(int, int, int, int)>:
c001a7ac:	83 ec 0c             	sub    esp,0xc
c001a7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7b3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7be:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a7ca:	89 10                	mov    DWORD PTR [eax],edx
c001a7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a7d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7df:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a7e2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a7e7:	75 13                	jne    c001a7fc <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7ed:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7ef:	05 a0 0f 00 00       	add    eax,0xfa0
c001a7f4:	d1 e0                	shl    eax,1
c001a7f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a7fa:	66 90                	xchg   ax,ax
c001a7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a800:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a804:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a80b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a816:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a819:	c1 e0 02             	shl    eax,0x2
c001a81c:	83 ec 0c             	sub    esp,0xc
c001a81f:	50                   	push   eax
c001a820:	e8 ae d2 fe ff       	call   c0007ad3 <malloc>
c001a825:	83 c4 10             	add    esp,0x10
c001a828:	89 c2                	mov    edx,eax
c001a82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a82e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a831:	90                   	nop
c001a832:	83 c4 0c             	add    esp,0xc
c001a835:	c3                   	ret    
c001a836:	66 90                	xchg   ax,ax

c001a838 <SoundPort::~SoundPort()>:
c001a838:	83 ec 0c             	sub    esp,0xc
c001a83b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a83f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a842:	85 c0                	test   eax,eax
c001a844:	74 1e                	je     c001a864 <SoundPort::~SoundPort()+0x2c>
c001a846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a84a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a84d:	83 ec 0c             	sub    esp,0xc
c001a850:	50                   	push   eax
c001a851:	e8 8d d2 fe ff       	call   c0007ae3 <free>
c001a856:	83 c4 10             	add    esp,0x10
c001a859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a85d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a864:	90                   	nop
c001a865:	83 c4 0c             	add    esp,0xc
c001a868:	c3                   	ret    
c001a869:	90                   	nop
c001a86a:	66 90                	xchg   ax,ax

c001a86c <SoundPort::unpause()>:
c001a86c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a870:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a874:	c3                   	ret    
c001a875:	90                   	nop
c001a876:	66 90                	xchg   ax,ax

c001a878 <SoundPort::pause()>:
c001a878:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a87c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a880:	c3                   	ret    
c001a881:	90                   	nop
c001a882:	66 90                	xchg   ax,ax

c001a884 <SoundPort::getBufferUsed()>:
c001a884:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a888:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a88b:	c3                   	ret    

c001a88c <SoundPort::getBufferSize()>:
c001a88c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a890:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a893:	c3                   	ret    

c001a894 <SoundPort::buffer16(short*, int)>:
c001a894:	55                   	push   ebp
c001a895:	57                   	push   edi
c001a896:	56                   	push   esi
c001a897:	53                   	push   ebx
c001a898:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a89c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a8a0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a8a3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a8a6:	74 68                	je     c001a910 <SoundPort::buffer16(short*, int)+0x7c>
c001a8a8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a8ac:	85 c9                	test   ecx,ecx
c001a8ae:	7e 60                	jle    c001a910 <SoundPort::buffer16(short*, int)+0x7c>
c001a8b0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a8b4:	8d 70 01             	lea    esi,[eax+0x1]
c001a8b7:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a8ba:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a8bd:	c1 e1 0f             	shl    ecx,0xf
c001a8c0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a8c3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a8c6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a8c9:	74 4d                	je     c001a918 <SoundPort::buffer16(short*, int)+0x84>
c001a8cb:	31 f6                	xor    esi,esi
c001a8cd:	eb 21                	jmp    c001a8f0 <SoundPort::buffer16(short*, int)+0x5c>
c001a8cf:	90                   	nop
c001a8d0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a8d5:	8d 79 01             	lea    edi,[ecx+0x1]
c001a8d8:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a8db:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a8de:	c1 e3 0f             	shl    ebx,0xf
c001a8e1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a8e4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a8e7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a8ea:	74 1c                	je     c001a908 <SoundPort::buffer16(short*, int)+0x74>
c001a8ec:	89 c6                	mov    esi,eax
c001a8ee:	66 90                	xchg   ax,ax
c001a8f0:	8d 46 01             	lea    eax,[esi+0x1]
c001a8f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a8f7:	75 d7                	jne    c001a8d0 <SoundPort::buffer16(short*, int)+0x3c>
c001a8f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a900:	5b                   	pop    ebx
c001a901:	5e                   	pop    esi
c001a902:	5f                   	pop    edi
c001a903:	5d                   	pop    ebp
c001a904:	c3                   	ret    
c001a905:	8d 76 00             	lea    esi,[esi+0x0]
c001a908:	5b                   	pop    ebx
c001a909:	8d 46 02             	lea    eax,[esi+0x2]
c001a90c:	5e                   	pop    esi
c001a90d:	5f                   	pop    edi
c001a90e:	5d                   	pop    ebp
c001a90f:	c3                   	ret    
c001a910:	5b                   	pop    ebx
c001a911:	31 c0                	xor    eax,eax
c001a913:	5e                   	pop    esi
c001a914:	5f                   	pop    edi
c001a915:	5d                   	pop    ebp
c001a916:	c3                   	ret    
c001a917:	90                   	nop
c001a918:	b8 01 00 00 00       	mov    eax,0x1
c001a91d:	eb e1                	jmp    c001a900 <SoundPort::buffer16(short*, int)+0x6c>
c001a91f:	90                   	nop

c001a920 <SoundPort::buffer32(int*, int)>:
c001a920:	55                   	push   ebp
c001a921:	57                   	push   edi
c001a922:	56                   	push   esi
c001a923:	53                   	push   ebx
c001a924:	83 ec 04             	sub    esp,0x4
c001a927:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a92b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a92f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a933:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a936:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a939:	89 04 24             	mov    DWORD PTR [esp],eax
c001a93c:	74 5a                	je     c001a998 <SoundPort::buffer32(int*, int)+0x78>
c001a93e:	85 c0                	test   eax,eax
c001a940:	7e 56                	jle    c001a998 <SoundPort::buffer32(int*, int)+0x78>
c001a942:	8d 71 01             	lea    esi,[ecx+0x1]
c001a945:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a948:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a94b:	8b 37                	mov    esi,DWORD PTR [edi]
c001a94d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a950:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a953:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a956:	74 4c                	je     c001a9a4 <SoundPort::buffer32(int*, int)+0x84>
c001a958:	31 f6                	xor    esi,esi
c001a95a:	eb 1c                	jmp    c001a978 <SoundPort::buffer32(int*, int)+0x58>
c001a95c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a95f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a962:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a965:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a968:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a96c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a96f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a972:	74 18                	je     c001a98c <SoundPort::buffer32(int*, int)+0x6c>
c001a974:	89 de                	mov    esi,ebx
c001a976:	66 90                	xchg   ax,ax
c001a978:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a97b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a97e:	75 dc                	jne    c001a95c <SoundPort::buffer32(int*, int)+0x3c>
c001a980:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a983:	90                   	nop
c001a984:	83 c4 04             	add    esp,0x4
c001a987:	5b                   	pop    ebx
c001a988:	5e                   	pop    esi
c001a989:	5f                   	pop    edi
c001a98a:	5d                   	pop    ebp
c001a98b:	c3                   	ret    
c001a98c:	8d 46 02             	lea    eax,[esi+0x2]
c001a98f:	83 c4 04             	add    esp,0x4
c001a992:	5b                   	pop    ebx
c001a993:	5e                   	pop    esi
c001a994:	5f                   	pop    edi
c001a995:	5d                   	pop    ebp
c001a996:	c3                   	ret    
c001a997:	90                   	nop
c001a998:	83 c4 04             	add    esp,0x4
c001a99b:	31 c0                	xor    eax,eax
c001a99d:	5b                   	pop    ebx
c001a99e:	5e                   	pop    esi
c001a99f:	5f                   	pop    edi
c001a9a0:	5d                   	pop    ebp
c001a9a1:	c3                   	ret    
c001a9a2:	66 90                	xchg   ax,ax
c001a9a4:	b8 01 00 00 00       	mov    eax,0x1
c001a9a9:	eb d9                	jmp    c001a984 <SoundPort::buffer32(int*, int)+0x64>
c001a9ab:	90                   	nop

c001a9ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001a9ac:	55                   	push   ebp
c001a9ad:	57                   	push   edi
c001a9ae:	56                   	push   esi
c001a9af:	53                   	push   ebx
c001a9b0:	83 ec 0c             	sub    esp,0xc
c001a9b3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a9b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a9bb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a9bf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a9c3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001a9c9:	39 03                	cmp    DWORD PTR [ebx],eax
c001a9cb:	74 13                	je     c001a9e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001a9cd:	83 ec 0c             	sub    esp,0xc
c001a9d0:	68 68 29 02 c0       	push   0xc0022968
c001a9d5:	e8 97 67 ff ff       	call   c0011171 <KePanic(char const*)>
c001a9da:	83 c4 10             	add    esp,0x10
c001a9dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a9e0:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001a9e6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001a9e9:	74 11                	je     c001a9fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001a9eb:	83 ec 0c             	sub    esp,0xc
c001a9ee:	68 a7 29 02 c0       	push   0xc00229a7
c001a9f3:	e8 79 67 ff ff       	call   c0011171 <KePanic(char const*)>
c001a9f8:	83 c4 10             	add    esp,0x10
c001a9fb:	90                   	nop
c001a9fc:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001aa02:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001aa05:	74 11                	je     c001aa18 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001aa07:	83 ec 0c             	sub    esp,0xc
c001aa0a:	68 a7 29 02 c0       	push   0xc00229a7
c001aa0f:	e8 5d 67 ff ff       	call   c0011171 <KePanic(char const*)>
c001aa14:	83 c4 10             	add    esp,0x10
c001aa17:	90                   	nop
c001aa18:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001aa1b:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001aa1f:	85 f6                	test   esi,esi
c001aa21:	7e 2d                	jle    c001aa50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001aa23:	31 c0                	xor    eax,eax
c001aa25:	8d 76 00             	lea    esi,[esi+0x0]
c001aa28:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aa2b:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001aa2e:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001aa34:	85 c9                	test   ecx,ecx
c001aa36:	0f 49 d1             	cmovns edx,ecx
c001aa39:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001aa3d:	c1 fa 0f             	sar    edx,0xf
c001aa40:	01 d1                	add    ecx,edx
c001aa42:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001aa46:	83 c0 01             	add    eax,0x1
c001aa49:	39 f0                	cmp    eax,esi
c001aa4b:	75 db                	jne    c001aa28 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001aa4d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa50:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aa53:	83 ec 04             	sub    esp,0x4
c001aa56:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aa59:	29 f0                	sub    eax,esi
c001aa5b:	c1 e0 02             	shl    eax,0x2
c001aa5e:	50                   	push   eax
c001aa5f:	8d 04 b2             	lea    eax,[edx+esi*4]
c001aa62:	50                   	push   eax
c001aa63:	52                   	push   edx
c001aa64:	e8 67 59 fe ff       	call   c00003d0 <memmove>
c001aa69:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aa6c:	29 f0                	sub    eax,esi
c001aa6e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001aa71:	83 c4 1c             	add    esp,0x1c
c001aa74:	89 f0                	mov    eax,esi
c001aa76:	5b                   	pop    ebx
c001aa77:	5e                   	pop    esi
c001aa78:	5f                   	pop    edi
c001aa79:	5d                   	pop    ebp
c001aa7a:	c3                   	ret    
c001aa7b:	90                   	nop

c001aa7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001aa7c:	55                   	push   ebp
c001aa7d:	57                   	push   edi
c001aa7e:	56                   	push   esi
c001aa7f:	53                   	push   ebx
c001aa80:	83 ec 0c             	sub    esp,0xc
c001aa83:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aa87:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aa8b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001aa8f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001aa93:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001aa99:	39 03                	cmp    DWORD PTR [ebx],eax
c001aa9b:	74 13                	je     c001aab0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001aa9d:	83 ec 0c             	sub    esp,0xc
c001aaa0:	68 88 29 02 c0       	push   0xc0022988
c001aaa5:	e8 c7 66 ff ff       	call   c0011171 <KePanic(char const*)>
c001aaaa:	83 c4 10             	add    esp,0x10
c001aaad:	8d 76 00             	lea    esi,[esi+0x0]
c001aab0:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001aab6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001aab9:	74 11                	je     c001aacc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001aabb:	83 ec 0c             	sub    esp,0xc
c001aabe:	68 c3 29 02 c0       	push   0xc00229c3
c001aac3:	e8 a9 66 ff ff       	call   c0011171 <KePanic(char const*)>
c001aac8:	83 c4 10             	add    esp,0x10
c001aacb:	90                   	nop
c001aacc:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001aad2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001aad5:	74 11                	je     c001aae8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001aad7:	83 ec 0c             	sub    esp,0xc
c001aada:	68 c3 29 02 c0       	push   0xc00229c3
c001aadf:	e8 8d 66 ff ff       	call   c0011171 <KePanic(char const*)>
c001aae4:	83 c4 10             	add    esp,0x10
c001aae7:	90                   	nop
c001aae8:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001aaeb:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001aaef:	85 ff                	test   edi,edi
c001aaf1:	7e 21                	jle    c001ab14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001aaf3:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001aafa:	31 c0                	xor    eax,eax
c001aafc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aaff:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001ab02:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ab05:	01 d5                	add    ebp,edx
c001ab07:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001ab0a:	83 c0 04             	add    eax,0x4
c001ab0d:	39 c1                	cmp    ecx,eax
c001ab0f:	75 eb                	jne    c001aafc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001ab11:	8d 76 00             	lea    esi,[esi+0x0]
c001ab14:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ab17:	83 ec 04             	sub    esp,0x4
c001ab1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab1d:	29 f8                	sub    eax,edi
c001ab1f:	c1 e0 02             	shl    eax,0x2
c001ab22:	50                   	push   eax
c001ab23:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ab26:	50                   	push   eax
c001ab27:	52                   	push   edx
c001ab28:	e8 a3 58 fe ff       	call   c00003d0 <memmove>
c001ab2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ab30:	29 f8                	sub    eax,edi
c001ab32:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ab35:	83 c4 1c             	add    esp,0x1c
c001ab38:	89 f8                	mov    eax,edi
c001ab3a:	5b                   	pop    ebx
c001ab3b:	5e                   	pop    esi
c001ab3c:	5f                   	pop    edi
c001ab3d:	5d                   	pop    ebp
c001ab3e:	c3                   	ret    
c001ab3f:	90                   	nop

c001ab40 <PCI::open(int, int, void*)>:
c001ab40:	83 ec 18             	sub    esp,0x18
c001ab43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab47:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ab4b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ab51:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab53:	50                   	push   eax
c001ab54:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ab57:	31 c0                	xor    eax,eax
c001ab59:	83 c4 1c             	add    esp,0x1c
c001ab5c:	c3                   	ret    
c001ab5d:	90                   	nop

c001ab5e <PCI::close(int, int, void*)>:
c001ab5e:	31 c0                	xor    eax,eax
c001ab60:	c3                   	ret    
c001ab61:	90                   	nop

c001ab62 <PCI::PCI()>:
c001ab62:	83 ec 0c             	sub    esp,0xc
c001ab65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab69:	83 ec 08             	sub    esp,0x8
c001ab6c:	68 df 29 02 c0       	push   0xc00229df
c001ab71:	50                   	push   eax
c001ab72:	e8 dd 13 ff ff       	call   c000bf54 <Bus::Bus(char const*)>
c001ab77:	83 c4 10             	add    esp,0x10
c001ab7a:	ba 88 2a 02 c0       	mov    edx,0xc0022a88
c001ab7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab83:	89 10                	mov    DWORD PTR [eax],edx
c001ab85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab89:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ab93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab97:	a3 40 ae 02 c0       	mov    ds:0xc002ae40,eax
c001ab9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aba0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001aba6:	0f b6 d0             	movzx  edx,al
c001aba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abad:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001abb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abbe:	0f b6 d0             	movzx  edx,al
c001abc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc5:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001abca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abce:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abd4:	8d 50 01             	lea    edx,[eax+0x1]
c001abd7:	88 d1                	mov    cl,dl
c001abd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abdd:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001abe3:	0f b6 d0             	movzx  edx,al
c001abe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abea:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001abee:	83 c9 c0             	or     ecx,0xffffffc0
c001abf1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001abf5:	90                   	nop
c001abf6:	83 c4 0c             	add    esp,0xc
c001abf9:	c3                   	ret    

c001abfa <PCI::readBAR8(unsigned int, int)>:
c001abfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001abfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac02:	f6 c2 01             	test   dl,0x1
c001ac05:	74 07                	je     c001ac0e <PCI::readBAR8(unsigned int, int)+0x14>
c001ac07:	83 e2 fc             	and    edx,0xfffffffc
c001ac0a:	01 c2                	add    edx,eax
c001ac0c:	ec                   	in     al,dx
c001ac0d:	c3                   	ret    
c001ac0e:	83 e2 f0             	and    edx,0xfffffff0
c001ac11:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ac14:	c3                   	ret    
c001ac15:	90                   	nop

c001ac16 <PCI::readBAR16(unsigned int, int)>:
c001ac16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac1e:	f6 c2 01             	test   dl,0x1
c001ac21:	74 08                	je     c001ac2b <PCI::readBAR16(unsigned int, int)+0x15>
c001ac23:	83 e2 fc             	and    edx,0xfffffffc
c001ac26:	01 c2                	add    edx,eax
c001ac28:	66 ed                	in     ax,dx
c001ac2a:	c3                   	ret    
c001ac2b:	83 e2 f0             	and    edx,0xfffffff0
c001ac2e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ac32:	c3                   	ret    
c001ac33:	90                   	nop

c001ac34 <PCI::readBAR32(unsigned int, int)>:
c001ac34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac3c:	f6 c2 01             	test   dl,0x1
c001ac3f:	74 07                	je     c001ac48 <PCI::readBAR32(unsigned int, int)+0x14>
c001ac41:	83 e2 fc             	and    edx,0xfffffffc
c001ac44:	01 c2                	add    edx,eax
c001ac46:	ed                   	in     eax,dx
c001ac47:	c3                   	ret    
c001ac48:	83 e2 f0             	and    edx,0xfffffff0
c001ac4b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ac4e:	c3                   	ret    
c001ac4f:	90                   	nop

c001ac50 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ac50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac5c:	f6 c2 01             	test   dl,0x1
c001ac5f:	74 07                	je     c001ac68 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ac61:	83 e2 fc             	and    edx,0xfffffffc
c001ac64:	01 ca                	add    edx,ecx
c001ac66:	ee                   	out    dx,al
c001ac67:	c3                   	ret    
c001ac68:	83 e2 f0             	and    edx,0xfffffff0
c001ac6b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ac6e:	c3                   	ret    
c001ac6f:	90                   	nop

c001ac70 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ac70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac7c:	f6 c2 01             	test   dl,0x1
c001ac7f:	74 08                	je     c001ac89 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ac81:	83 e2 fc             	and    edx,0xfffffffc
c001ac84:	01 ca                	add    edx,ecx
c001ac86:	66 ef                	out    dx,ax
c001ac88:	c3                   	ret    
c001ac89:	83 e2 f0             	and    edx,0xfffffff0
c001ac8c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ac90:	c3                   	ret    
c001ac91:	90                   	nop

c001ac92 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ac92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac9e:	f6 c2 01             	test   dl,0x1
c001aca1:	74 07                	je     c001acaa <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001aca3:	83 e2 fc             	and    edx,0xfffffffc
c001aca6:	01 ca                	add    edx,ecx
c001aca8:	ef                   	out    dx,eax
c001aca9:	c3                   	ret    
c001acaa:	83 e2 f0             	and    edx,0xfffffff0
c001acad:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001acb0:	c3                   	ret    
c001acb1:	90                   	nop

c001acb2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001acb2:	55                   	push   ebp
c001acb3:	57                   	push   edi
c001acb4:	56                   	push   esi
c001acb5:	53                   	push   ebx
c001acb6:	83 ec 0c             	sub    esp,0xc
c001acb9:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001acbe:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001acc2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001acc6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001acca:	83 fe 07             	cmp    esi,0x7
c001accd:	76 10                	jbe    c001acdf <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001accf:	83 ec 0c             	sub    esp,0xc
c001acd2:	68 e7 29 02 c0       	push   0xc00229e7
c001acd7:	e8 95 64 ff ff       	call   c0011171 <KePanic(char const*)>
c001acdc:	83 c4 10             	add    esp,0x10
c001acdf:	0f b6 db             	movzx  ebx,bl
c001ace2:	83 fb 0f             	cmp    ebx,0xf
c001ace5:	76 10                	jbe    c001acf7 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ace7:	83 ec 0c             	sub    esp,0xc
c001acea:	68 17 2a 02 c0       	push   0xc0022a17
c001acef:	e8 7d 64 ff ff       	call   c0011171 <KePanic(char const*)>
c001acf4:	83 c4 10             	add    esp,0x10
c001acf7:	8d 04 36             	lea    eax,[esi+esi*1]
c001acfa:	ba f8 0c 00 00       	mov    edx,0xcf8
c001acff:	83 c8 f0             	or     eax,0xfffffff0
c001ad02:	ee                   	out    dx,al
c001ad03:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ad08:	89 e8                	mov    eax,ebp
c001ad0a:	ee                   	out    dx,al
c001ad0b:	89 f9                	mov    ecx,edi
c001ad0d:	89 d8                	mov    eax,ebx
c001ad0f:	0f b6 d9             	movzx  ebx,cl
c001ad12:	83 c4 0c             	add    esp,0xc
c001ad15:	c1 e0 08             	shl    eax,0x8
c001ad18:	83 e3 fc             	and    ebx,0xfffffffc
c001ad1b:	09 d8                	or     eax,ebx
c001ad1d:	5b                   	pop    ebx
c001ad1e:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ad23:	5e                   	pop    esi
c001ad24:	5f                   	pop    edi
c001ad25:	5d                   	pop    ebp
c001ad26:	c3                   	ret    
c001ad27:	90                   	nop

c001ad28 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad28:	57                   	push   edi
c001ad29:	56                   	push   esi
c001ad2a:	53                   	push   ebx
c001ad2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad37:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ad3b:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ad41:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad45:	83 ff 01             	cmp    edi,0x1
c001ad48:	75 3f                	jne    c001ad89 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001ad4a:	89 de                	mov    esi,ebx
c001ad4c:	0f b6 c0             	movzx  eax,al
c001ad4f:	c1 e0 10             	shl    eax,0x10
c001ad52:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ad58:	0f b6 c9             	movzx  ecx,cl
c001ad5b:	09 f0                	or     eax,esi
c001ad5d:	c1 e1 08             	shl    ecx,0x8
c001ad60:	0f b6 d2             	movzx  edx,dl
c001ad63:	c1 e2 0b             	shl    edx,0xb
c001ad66:	09 c8                	or     eax,ecx
c001ad68:	09 d0                	or     eax,edx
c001ad6a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad6f:	0d 00 00 00 80       	or     eax,0x80000000
c001ad74:	ef                   	out    dx,eax
c001ad75:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ad7a:	ed                   	in     eax,dx
c001ad7b:	83 e3 02             	and    ebx,0x2
c001ad7e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ad85:	d3 e8                	shr    eax,cl
c001ad87:	eb 44                	jmp    c001adcd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ad89:	83 ff 02             	cmp    edi,0x2
c001ad8c:	75 2d                	jne    c001adbb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001ad8e:	83 ec 0c             	sub    esp,0xc
c001ad91:	0f b6 fb             	movzx  edi,bl
c001ad94:	57                   	push   edi
c001ad95:	0f b6 c9             	movzx  ecx,cl
c001ad98:	51                   	push   ecx
c001ad99:	0f b6 d2             	movzx  edx,dl
c001ad9c:	52                   	push   edx
c001ad9d:	0f b6 c0             	movzx  eax,al
c001ada0:	50                   	push   eax
c001ada1:	56                   	push   esi
c001ada2:	e8 0b ff ff ff       	call   c001acb2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ada7:	89 c2                	mov    edx,eax
c001ada9:	ed                   	in     eax,dx
c001adaa:	83 e3 02             	and    ebx,0x2
c001adad:	83 c4 20             	add    esp,0x20
c001adb0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001adb7:	d3 e8                	shr    eax,cl
c001adb9:	eb 12                	jmp    c001adcd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001adbb:	83 ec 0c             	sub    esp,0xc
c001adbe:	68 47 2a 02 c0       	push   0xc0022a47
c001adc3:	e8 a9 63 ff ff       	call   c0011171 <KePanic(char const*)>
c001adc8:	83 c4 10             	add    esp,0x10
c001adcb:	31 c0                	xor    eax,eax
c001adcd:	5b                   	pop    ebx
c001adce:	5e                   	pop    esi
c001adcf:	5f                   	pop    edi
c001add0:	c3                   	ret    
c001add1:	90                   	nop

c001add2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001add2:	83 ec 18             	sub    esp,0x18
c001add5:	6a 00                	push   0x0
c001add7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001addc:	50                   	push   eax
c001addd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ade2:	50                   	push   eax
c001ade3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ade8:	50                   	push   eax
c001ade9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aded:	e8 36 ff ff ff       	call   c001ad28 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001adf2:	83 c4 2c             	add    esp,0x2c
c001adf5:	c3                   	ret    

c001adf6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001adf6:	83 ec 18             	sub    esp,0x18
c001adf9:	6a 0e                	push   0xe
c001adfb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae00:	50                   	push   eax
c001ae01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae06:	50                   	push   eax
c001ae07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae0c:	50                   	push   eax
c001ae0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae11:	e8 12 ff ff ff       	call   c001ad28 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae16:	83 c4 2c             	add    esp,0x2c
c001ae19:	0f b6 c0             	movzx  eax,al
c001ae1c:	c3                   	ret    
c001ae1d:	90                   	nop

c001ae1e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ae1e:	55                   	push   ebp
c001ae1f:	57                   	push   edi
c001ae20:	56                   	push   esi
c001ae21:	53                   	push   ebx
c001ae22:	83 ec 18             	sub    esp,0x18
c001ae25:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001ae2a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001ae2f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001ae34:	6a 0a                	push   0xa
c001ae36:	56                   	push   esi
c001ae37:	55                   	push   ebp
c001ae38:	57                   	push   edi
c001ae39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae3d:	e8 e6 fe ff ff       	call   c001ad28 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae42:	83 c4 14             	add    esp,0x14
c001ae45:	6a 0a                	push   0xa
c001ae47:	56                   	push   esi
c001ae48:	55                   	push   ebp
c001ae49:	57                   	push   edi
c001ae4a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae4e:	89 c3                	mov    ebx,eax
c001ae50:	0f b6 db             	movzx  ebx,bl
c001ae53:	e8 d0 fe ff ff       	call   c001ad28 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae58:	83 c4 2c             	add    esp,0x2c
c001ae5b:	25 00 ff 00 00       	and    eax,0xff00
c001ae60:	09 d8                	or     eax,ebx
c001ae62:	5b                   	pop    ebx
c001ae63:	5e                   	pop    esi
c001ae64:	5f                   	pop    edi
c001ae65:	5d                   	pop    ebp
c001ae66:	c3                   	ret    
c001ae67:	90                   	nop

c001ae68 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ae68:	83 ec 18             	sub    esp,0x18
c001ae6b:	6a 08                	push   0x8
c001ae6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae72:	50                   	push   eax
c001ae73:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae78:	50                   	push   eax
c001ae79:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae7e:	50                   	push   eax
c001ae7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae83:	e8 a0 fe ff ff       	call   c001ad28 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae88:	83 c4 2c             	add    esp,0x2c
c001ae8b:	0f b6 c4             	movzx  eax,ah
c001ae8e:	c3                   	ret    
c001ae8f:	90                   	nop

c001ae90 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ae90:	83 ec 18             	sub    esp,0x18
c001ae93:	6a 08                	push   0x8
c001ae95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae9a:	50                   	push   eax
c001ae9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aea0:	50                   	push   eax
c001aea1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aea6:	50                   	push   eax
c001aea7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeab:	e8 78 fe ff ff       	call   c001ad28 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aeb0:	83 c4 2c             	add    esp,0x2c
c001aeb3:	c3                   	ret    

c001aeb4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001aeb4:	83 ec 18             	sub    esp,0x18
c001aeb7:	6a 3c                	push   0x3c
c001aeb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aebe:	50                   	push   eax
c001aebf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aec4:	50                   	push   eax
c001aec5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeca:	50                   	push   eax
c001aecb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aecf:	e8 54 fe ff ff       	call   c001ad28 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aed4:	83 c4 2c             	add    esp,0x2c
c001aed7:	c3                   	ret    

c001aed8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001aed8:	83 ec 18             	sub    esp,0x18
c001aedb:	6a 18                	push   0x18
c001aedd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aee2:	50                   	push   eax
c001aee3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aee8:	50                   	push   eax
c001aee9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeee:	50                   	push   eax
c001aeef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aef3:	e8 30 fe ff ff       	call   c001ad28 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aef8:	83 c4 2c             	add    esp,0x2c
c001aefb:	0f b6 c4             	movzx  eax,ah
c001aefe:	c3                   	ret    
c001aeff:	90                   	nop

c001af00 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af00:	55                   	push   ebp
c001af01:	57                   	push   edi
c001af02:	56                   	push   esi
c001af03:	53                   	push   ebx
c001af04:	83 ec 28             	sub    esp,0x28
c001af07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001af0b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001af10:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001af15:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001af1a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001af21:	8d 43 12             	lea    eax,[ebx+0x12]
c001af24:	83 c3 10             	add    ebx,0x10
c001af27:	0f b6 c0             	movzx  eax,al
c001af2a:	0f b6 db             	movzx  ebx,bl
c001af2d:	50                   	push   eax
c001af2e:	51                   	push   ecx
c001af2f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001af33:	57                   	push   edi
c001af34:	55                   	push   ebp
c001af35:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af39:	e8 ea fd ff ff       	call   c001ad28 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af3e:	83 c4 14             	add    esp,0x14
c001af41:	53                   	push   ebx
c001af42:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af46:	51                   	push   ecx
c001af47:	89 c6                	mov    esi,eax
c001af49:	57                   	push   edi
c001af4a:	55                   	push   ebp
c001af4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af4f:	c1 e6 10             	shl    esi,0x10
c001af52:	e8 d1 fd ff ff       	call   c001ad28 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af57:	83 c4 3c             	add    esp,0x3c
c001af5a:	5b                   	pop    ebx
c001af5b:	0f b7 c0             	movzx  eax,ax
c001af5e:	09 f0                	or     eax,esi
c001af60:	5e                   	pop    esi
c001af61:	5f                   	pop    edi
c001af62:	5d                   	pop    ebp
c001af63:	c3                   	ret    

c001af64 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001af64:	55                   	push   ebp
c001af65:	57                   	push   edi
c001af66:	56                   	push   esi
c001af67:	53                   	push   ebx
c001af68:	83 ec 0c             	sub    esp,0xc
c001af6b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001af6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af73:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001af77:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001af7b:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001af81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001af85:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001af89:	83 f9 01             	cmp    ecx,0x1
c001af8c:	75 5d                	jne    c001afeb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001af8e:	0f b6 c8             	movzx  ecx,al
c001af91:	89 f0                	mov    eax,esi
c001af93:	25 fc 00 00 00       	and    eax,0xfc
c001af98:	0f b6 d2             	movzx  edx,dl
c001af9b:	c1 e1 10             	shl    ecx,0x10
c001af9e:	c1 e2 0b             	shl    edx,0xb
c001afa1:	09 c1                	or     ecx,eax
c001afa3:	89 f8                	mov    eax,edi
c001afa5:	0f b6 f8             	movzx  edi,al
c001afa8:	c1 e7 08             	shl    edi,0x8
c001afab:	09 f9                	or     ecx,edi
c001afad:	09 d1                	or     ecx,edx
c001afaf:	ba f8 0c 00 00       	mov    edx,0xcf8
c001afb4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001afba:	89 c8                	mov    eax,ecx
c001afbc:	ef                   	out    dx,eax
c001afbd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001afc2:	ed                   	in     eax,dx
c001afc3:	83 e6 02             	and    esi,0x2
c001afc6:	0f b7 db             	movzx  ebx,bx
c001afc9:	74 0a                	je     c001afd5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001afcb:	c1 e3 10             	shl    ebx,0x10
c001afce:	0f b7 d0             	movzx  edx,ax
c001afd1:	09 d3                	or     ebx,edx
c001afd3:	eb 05                	jmp    c001afda <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001afd5:	66 31 c0             	xor    ax,ax
c001afd8:	09 c3                	or     ebx,eax
c001afda:	ba f8 0c 00 00       	mov    edx,0xcf8
c001afdf:	89 c8                	mov    eax,ecx
c001afe1:	ef                   	out    dx,eax
c001afe2:	ba fc 0c 00 00       	mov    edx,0xcfc
c001afe7:	89 d8                	mov    eax,ebx
c001afe9:	eb 41                	jmp    c001b02c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001afeb:	83 f9 02             	cmp    ecx,0x2
c001afee:	75 45                	jne    c001b035 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001aff0:	89 f1                	mov    ecx,esi
c001aff2:	83 ec 0c             	sub    esp,0xc
c001aff5:	0f b6 f1             	movzx  esi,cl
c001aff8:	89 f9                	mov    ecx,edi
c001affa:	56                   	push   esi
c001affb:	0f b6 f9             	movzx  edi,cl
c001affe:	57                   	push   edi
c001afff:	0f b6 d2             	movzx  edx,dl
c001b002:	52                   	push   edx
c001b003:	0f b6 c0             	movzx  eax,al
c001b006:	50                   	push   eax
c001b007:	55                   	push   ebp
c001b008:	e8 a5 fc ff ff       	call   c001acb2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b00d:	89 c2                	mov    edx,eax
c001b00f:	ed                   	in     eax,dx
c001b010:	83 c4 20             	add    esp,0x20
c001b013:	f6 c2 02             	test   dl,0x2
c001b016:	0f b7 db             	movzx  ebx,bx
c001b019:	74 0c                	je     c001b027 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b01b:	0f b7 c8             	movzx  ecx,ax
c001b01e:	89 d8                	mov    eax,ebx
c001b020:	c1 e0 10             	shl    eax,0x10
c001b023:	09 c8                	or     eax,ecx
c001b025:	eb 05                	jmp    c001b02c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b027:	66 31 c0             	xor    ax,ax
c001b02a:	09 d8                	or     eax,ebx
c001b02c:	ef                   	out    dx,eax
c001b02d:	83 c4 0c             	add    esp,0xc
c001b030:	5b                   	pop    ebx
c001b031:	5e                   	pop    esi
c001b032:	5f                   	pop    edi
c001b033:	5d                   	pop    ebp
c001b034:	c3                   	ret    
c001b035:	c7 44 24 20 47 2a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022a47
c001b03d:	83 c4 0c             	add    esp,0xc
c001b040:	5b                   	pop    ebx
c001b041:	5e                   	pop    esi
c001b042:	5f                   	pop    edi
c001b043:	5d                   	pop    ebp
c001b044:	e9 28 61 ff ff       	jmp    c0011171 <KePanic(char const*)>
c001b049:	90                   	nop

c001b04a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b04a:	55                   	push   ebp
c001b04b:	57                   	push   edi
c001b04c:	56                   	push   esi
c001b04d:	53                   	push   ebx
c001b04e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b054:	80 3d 4c ae 02 c0 00 	cmp    BYTE PTR ds:0xc002ae4c,0x0
c001b05b:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b062:	0f 85 bd 00 00 00    	jne    c001b125 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b068:	83 ec 0c             	sub    esp,0xc
c001b06b:	68 14 01 00 00       	push   0x114
c001b070:	e8 5e ca fe ff       	call   c0007ad3 <malloc>
c001b075:	83 c4 0c             	add    esp,0xc
c001b078:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001b07e:	68 4d 2a 02 c0       	push   0xc0022a4d
c001b083:	50                   	push   eax
c001b084:	89 c3                	mov    ebx,eax
c001b086:	e8 5d 06 ff ff       	call   c000b6e8 <File::File(char const*, Process*)>
c001b08b:	83 c4 10             	add    esp,0x10
c001b08e:	85 db                	test   ebx,ebx
c001b090:	0f 84 6b 02 00 00    	je     c001b301 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b096:	57                   	push   edi
c001b097:	57                   	push   edi
c001b098:	6a 01                	push   0x1
c001b09a:	53                   	push   ebx
c001b09b:	e8 04 07 ff ff       	call   c000b7a4 <File::open(FileOpenMode)>
c001b0a0:	83 c4 10             	add    esp,0x10
c001b0a3:	85 c0                	test   eax,eax
c001b0a5:	0f 85 56 02 00 00    	jne    c001b301 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b0ab:	52                   	push   edx
c001b0ac:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b0b0:	50                   	push   eax
c001b0b1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b0b5:	50                   	push   eax
c001b0b6:	53                   	push   ebx
c001b0b7:	e8 ea 09 ff ff       	call   c000baa6 <File::stat(unsigned long long*, bool*)>
c001b0bc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b0c0:	40                   	inc    eax
c001b0c1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0c4:	e8 0a ca fe ff       	call   c0007ad3 <malloc>
c001b0c9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b0cd:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b0d1:	59                   	pop    ecx
c001b0d2:	a3 48 ae 02 c0       	mov    ds:0xc002ae48,eax
c001b0d7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b0d9:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b0dd:	51                   	push   ecx
c001b0de:	50                   	push   eax
c001b0df:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b0e3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b0e7:	53                   	push   ebx
c001b0e8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b0eb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b0ef:	83 c4 20             	add    esp,0x20
c001b0f2:	89 c8                	mov    eax,ecx
c001b0f4:	99                   	cdq    
c001b0f5:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b0f9:	0f 85 02 02 00 00    	jne    c001b301 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b0ff:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b103:	0f 85 f8 01 00 00    	jne    c001b301 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b109:	83 ec 0c             	sub    esp,0xc
c001b10c:	53                   	push   ebx
c001b10d:	e8 f0 06 ff ff       	call   c000b802 <File::close()>
c001b112:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b116:	83 c4 10             	add    esp,0x10
c001b119:	c6 05 4c ae 02 c0 01 	mov    BYTE PTR ds:0xc002ae4c,0x1
c001b120:	a3 44 ae 02 c0       	mov    ds:0xc002ae44,eax
c001b125:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b12d:	31 c9                	xor    ecx,ecx
c001b12f:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b136:	8b 2d 44 ae 02 c0    	mov    ebp,DWORD PTR ds:0xc002ae44
c001b13c:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b143:	8b 15 48 ae 02 c0    	mov    edx,DWORD PTR ds:0xc002ae48
c001b149:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b14e:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b156:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b15b:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b163:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b167:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b16f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b173:	39 cd                	cmp    ebp,ecx
c001b175:	0f 8e 86 01 00 00    	jle    c001b301 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b17b:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b17e:	d4 40                	aam    0x40
c001b180:	d5 39                	aad    0x39
c001b182:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b186:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b18a:	d4 40                	aam    0x40
c001b18c:	d5 39                	aad    0x39
c001b18e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b192:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b196:	d4 40                	aam    0x40
c001b198:	d5 39                	aad    0x39
c001b19a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b19e:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b1a2:	d4 40                	aam    0x40
c001b1a4:	d5 39                	aad    0x39
c001b1a6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b1aa:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b1ae:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b1b2:	3c 56                	cmp    al,0x56
c001b1b4:	74 47                	je     c001b1fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b1b6:	d4 40                	aam    0x40
c001b1b8:	d5 39                	aad    0x39
c001b1ba:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b1bd:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b1c1:	0f b6 db             	movzx  ebx,bl
c001b1c4:	c1 e3 04             	shl    ebx,0x4
c001b1c7:	d4 40                	aam    0x40
c001b1c9:	d5 39                	aad    0x39
c001b1cb:	83 e8 30             	sub    eax,0x30
c001b1ce:	0f b6 c0             	movzx  eax,al
c001b1d1:	09 c3                	or     ebx,eax
c001b1d3:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b1d7:	c1 e3 04             	shl    ebx,0x4
c001b1da:	d4 40                	aam    0x40
c001b1dc:	d5 39                	aad    0x39
c001b1de:	83 e8 30             	sub    eax,0x30
c001b1e1:	0f b6 c0             	movzx  eax,al
c001b1e4:	09 c3                	or     ebx,eax
c001b1e6:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b1ea:	c1 e3 04             	shl    ebx,0x4
c001b1ed:	d4 40                	aam    0x40
c001b1ef:	d5 39                	aad    0x39
c001b1f1:	83 e8 30             	sub    eax,0x30
c001b1f4:	0f b6 c0             	movzx  eax,al
c001b1f7:	09 c3                	or     ebx,eax
c001b1f9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b1fd:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b201:	80 fb 58             	cmp    bl,0x58
c001b204:	74 49                	je     c001b24f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b206:	88 d8                	mov    al,bl
c001b208:	d4 40                	aam    0x40
c001b20a:	d5 39                	aad    0x39
c001b20c:	83 e8 30             	sub    eax,0x30
c001b20f:	0f b6 f8             	movzx  edi,al
c001b212:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b216:	c1 e7 04             	shl    edi,0x4
c001b219:	d4 40                	aam    0x40
c001b21b:	d5 39                	aad    0x39
c001b21d:	83 e8 30             	sub    eax,0x30
c001b220:	0f b6 c0             	movzx  eax,al
c001b223:	09 c7                	or     edi,eax
c001b225:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b229:	c1 e7 04             	shl    edi,0x4
c001b22c:	d4 40                	aam    0x40
c001b22e:	d5 39                	aad    0x39
c001b230:	83 e8 30             	sub    eax,0x30
c001b233:	0f b6 c0             	movzx  eax,al
c001b236:	09 c7                	or     edi,eax
c001b238:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b23c:	c1 e7 04             	shl    edi,0x4
c001b23f:	d4 40                	aam    0x40
c001b241:	d5 39                	aad    0x39
c001b243:	83 e8 30             	sub    eax,0x30
c001b246:	0f b6 c0             	movzx  eax,al
c001b249:	09 c7                	or     edi,eax
c001b24b:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b24f:	8d 41 10             	lea    eax,[ecx+0x10]
c001b252:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b256:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b25a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b25e:	83 f9 0a             	cmp    ecx,0xa
c001b261:	74 07                	je     c001b26a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b263:	47                   	inc    edi
c001b264:	39 c5                	cmp    ebp,eax
c001b266:	75 16                	jne    c001b27e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b268:	89 e8                	mov    eax,ebp
c001b26a:	83 f9 0a             	cmp    ecx,0xa
c001b26d:	0f 94 c1             	sete   cl
c001b270:	0f b6 c9             	movzx  ecx,cl
c001b273:	01 c1                	add    ecx,eax
c001b275:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b27a:	75 0f                	jne    c001b28b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b27c:	eb 1c                	jmp    c001b29a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b27e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b281:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b285:	40                   	inc    eax
c001b286:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b289:	eb cb                	jmp    c001b256 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b28b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b28f:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b294:	0f 85 d9 fe ff ff    	jne    c001b173 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b29a:	80 fb 58             	cmp    bl,0x58
c001b29d:	74 10                	je     c001b2af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b29f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b2a4:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b2a9:	0f 85 c4 fe ff ff    	jne    c001b173 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b2af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2b7:	83 e8 30             	sub    eax,0x30
c001b2ba:	c1 e0 04             	shl    eax,0x4
c001b2bd:	83 eb 30             	sub    ebx,0x30
c001b2c0:	09 d8                	or     eax,ebx
c001b2c2:	0f b6 c0             	movzx  eax,al
c001b2c5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b2c9:	0f 85 a4 fe ff ff    	jne    c001b173 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b2cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2d3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b2d7:	83 e8 30             	sub    eax,0x30
c001b2da:	c1 e0 04             	shl    eax,0x4
c001b2dd:	83 eb 30             	sub    ebx,0x30
c001b2e0:	09 d8                	or     eax,ebx
c001b2e2:	0f b6 c0             	movzx  eax,al
c001b2e5:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b2e9:	0f 85 84 fe ff ff    	jne    c001b173 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b2ef:	50                   	push   eax
c001b2f0:	50                   	push   eax
c001b2f1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b2f5:	50                   	push   eax
c001b2f6:	56                   	push   esi
c001b2f7:	e8 54 53 fe ff       	call   c0000650 <strcpy>
c001b2fc:	83 c4 10             	add    esp,0x10
c001b2ff:	eb 05                	jmp    c001b306 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b301:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b304:	31 f6                	xor    esi,esi
c001b306:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b30c:	89 f0                	mov    eax,esi
c001b30e:	5b                   	pop    ebx
c001b30f:	5e                   	pop    esi
c001b310:	5f                   	pop    edi
c001b311:	5d                   	pop    ebp
c001b312:	c3                   	ret    
c001b313:	90                   	nop

c001b314 <PCI::checkBus(unsigned char)>:
c001b314:	56                   	push   esi
c001b315:	53                   	push   ebx
c001b316:	31 db                	xor    ebx,ebx
c001b318:	51                   	push   ecx
c001b319:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b31e:	52                   	push   edx
c001b31f:	53                   	push   ebx
c001b320:	43                   	inc    ebx
c001b321:	56                   	push   esi
c001b322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b326:	e8 0f 03 00 00       	call   c001b63a <PCI::checkDevice(unsigned char, unsigned char)>
c001b32b:	83 c4 10             	add    esp,0x10
c001b32e:	83 fb 20             	cmp    ebx,0x20
c001b331:	75 eb                	jne    c001b31e <PCI::checkBus(unsigned char)+0xa>
c001b333:	58                   	pop    eax
c001b334:	5b                   	pop    ebx
c001b335:	5e                   	pop    esi
c001b336:	c3                   	ret    
c001b337:	90                   	nop

c001b338 <PCI::foundDevice(PCIDeviceInfo)>:
c001b338:	55                   	push   ebp
c001b339:	57                   	push   edi
c001b33a:	56                   	push   esi
c001b33b:	53                   	push   ebx
c001b33c:	83 ec 1c             	sub    esp,0x1c
c001b33f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b344:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b348:	3d ff ff 00 00       	cmp    eax,0xffff
c001b34d:	0f 84 63 01 00 00    	je     c001b4b6 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b353:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b358:	66 3d 06 04          	cmp    ax,0x406
c001b35c:	75 2c                	jne    c001b38a <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b35e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b363:	50                   	push   eax
c001b364:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b369:	50                   	push   eax
c001b36a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b36f:	50                   	push   eax
c001b370:	53                   	push   ebx
c001b371:	e8 62 fb ff ff       	call   c001aed8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b376:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b37a:	0f b6 c0             	movzx  eax,al
c001b37d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b381:	83 c4 2c             	add    esp,0x2c
c001b384:	5b                   	pop    ebx
c001b385:	5e                   	pop    esi
c001b386:	5f                   	pop    edi
c001b387:	5d                   	pop    ebp
c001b388:	eb 8a                	jmp    c001b314 <PCI::checkBus(unsigned char)>
c001b38a:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b38f:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b395:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b399:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b39d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b3a1:	85 d2                	test   edx,edx
c001b3a3:	74 34                	je     c001b3d9 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b3a5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b3a8:	85 c9                	test   ecx,ecx
c001b3aa:	74 29                	je     c001b3d5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b3ac:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b3b2:	31 f5                	xor    ebp,esi
c001b3b4:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b3ba:	75 19                	jne    c001b3d5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b3bc:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b3c2:	75 11                	jne    c001b3d5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b3c4:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b3cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b3cf:	0f 84 e1 00 00 00    	je     c001b4b6 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b3d5:	8b 12                	mov    edx,DWORD PTR [edx]
c001b3d7:	eb c8                	jmp    c001b3a1 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b3d9:	3d 01 06 00 00       	cmp    eax,0x601
c001b3de:	75 19                	jne    c001b3f9 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b3e0:	83 ec 0c             	sub    esp,0xc
c001b3e3:	68 64 01 00 00       	push   0x164
c001b3e8:	e8 e6 c6 fe ff       	call   c0007ad3 <malloc>
c001b3ed:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3f0:	89 c5                	mov    ebp,eax
c001b3f2:	e8 ab 0e 00 00       	call   c001c2a2 <SATABus::SATABus()>
c001b3f7:	eb 1e                	jmp    c001b417 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b3f9:	3d 01 01 00 00       	cmp    eax,0x101
c001b3fe:	75 62                	jne    c001b462 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b400:	83 ec 0c             	sub    esp,0xc
c001b403:	68 70 02 00 00       	push   0x270
c001b408:	e8 c6 c6 fe ff       	call   c0007ad3 <malloc>
c001b40d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b410:	89 c5                	mov    ebp,eax
c001b412:	e8 f3 02 00 00       	call   c001b70a <IDE::IDE()>
c001b417:	58                   	pop    eax
c001b418:	5a                   	pop    edx
c001b419:	55                   	push   ebp
c001b41a:	53                   	push   ebx
c001b41b:	e8 d8 11 ff ff       	call   c000c5f8 <Device::addChild(Device*)>
c001b420:	83 ec 1c             	sub    esp,0x1c
c001b423:	b9 09 00 00 00       	mov    ecx,0x9
c001b428:	fc                   	cld    
c001b429:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b42d:	89 e7                	mov    edi,esp
c001b42f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b431:	55                   	push   ebp
c001b432:	e8 07 11 ff ff       	call   c000c53e <Device::preOpenPCI(PCIDeviceInfo)>
c001b437:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b43a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b43e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b446:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b44e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b456:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b459:	83 c4 4c             	add    esp,0x4c
c001b45c:	5b                   	pop    ebx
c001b45d:	5e                   	pop    esi
c001b45e:	5f                   	pop    edi
c001b45f:	5d                   	pop    ebp
c001b460:	ff e0                	jmp    eax
c001b462:	83 ec 0c             	sub    esp,0xc
c001b465:	68 58 01 00 00       	push   0x158
c001b46a:	e8 64 c6 fe ff       	call   c0007ad3 <malloc>
c001b46f:	5a                   	pop    edx
c001b470:	59                   	pop    ecx
c001b471:	68 66 2a 02 c0       	push   0xc0022a66
c001b476:	50                   	push   eax
c001b477:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b47b:	e8 16 14 ff ff       	call   c000c896 <DriverlessDevice::DriverlessDevice(char const*)>
c001b480:	5e                   	pop    esi
c001b481:	5f                   	pop    edi
c001b482:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b486:	50                   	push   eax
c001b487:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b48b:	53                   	push   ebx
c001b48c:	e8 67 11 ff ff       	call   c000c5f8 <Device::addChild(Device*)>
c001b491:	83 c4 10             	add    esp,0x10
c001b494:	b9 09 00 00 00       	mov    ecx,0x9
c001b499:	fc                   	cld    
c001b49a:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b49e:	89 fe                	mov    esi,edi
c001b4a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b4aa:	83 c4 1c             	add    esp,0x1c
c001b4ad:	5b                   	pop    ebx
c001b4ae:	5e                   	pop    esi
c001b4af:	5f                   	pop    edi
c001b4b0:	5d                   	pop    ebp
c001b4b1:	e9 88 10 ff ff       	jmp    c000c53e <Device::preOpenPCI(PCIDeviceInfo)>
c001b4b6:	83 c4 1c             	add    esp,0x1c
c001b4b9:	5b                   	pop    ebx
c001b4ba:	5e                   	pop    esi
c001b4bb:	5f                   	pop    edi
c001b4bc:	5d                   	pop    ebp
c001b4bd:	c3                   	ret    

c001b4be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b4be:	55                   	push   ebp
c001b4bf:	57                   	push   edi
c001b4c0:	56                   	push   esi
c001b4c1:	53                   	push   ebx
c001b4c2:	83 ec 68             	sub    esp,0x68
c001b4c5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b4cc:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b4d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b4d4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b4db:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b4e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b4e4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b4eb:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b4f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b4f4:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b4f9:	6a 0c                	push   0xc
c001b4fb:	57                   	push   edi
c001b4fc:	53                   	push   ebx
c001b4fd:	56                   	push   esi
c001b4fe:	55                   	push   ebp
c001b4ff:	e8 24 f8 ff ff       	call   c001ad28 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b504:	83 c4 20             	add    esp,0x20
c001b507:	57                   	push   edi
c001b508:	53                   	push   ebx
c001b509:	56                   	push   esi
c001b50a:	55                   	push   ebp
c001b50b:	e8 0e f9 ff ff       	call   c001ae1e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b510:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b515:	57                   	push   edi
c001b516:	53                   	push   ebx
c001b517:	56                   	push   esi
c001b518:	55                   	push   ebp
c001b519:	e8 96 f9 ff ff       	call   c001aeb4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b51e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b522:	83 c4 14             	add    esp,0x14
c001b525:	6a 3c                	push   0x3c
c001b527:	57                   	push   edi
c001b528:	53                   	push   ebx
c001b529:	56                   	push   esi
c001b52a:	55                   	push   ebp
c001b52b:	e8 f8 f7 ff ff       	call   c001ad28 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b530:	0f b6 c4             	movzx  eax,ah
c001b533:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b537:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b53b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b53f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b544:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b54a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b550:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b554:	83 c4 20             	add    esp,0x20
c001b557:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b55c:	74 30                	je     c001b58e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b55e:	31 c0                	xor    eax,eax
c001b560:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b564:	7e 28                	jle    c001b58e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b566:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b56e:	39 cb                	cmp    ebx,ecx
c001b570:	75 19                	jne    c001b58b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b572:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b57a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b57e:	75 0b                	jne    c001b58b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b580:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b587:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b58b:	40                   	inc    eax
c001b58c:	eb d2                	jmp    c001b560 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b58e:	31 d2                	xor    edx,edx
c001b590:	83 ec 0c             	sub    esp,0xc
c001b593:	57                   	push   edi
c001b594:	53                   	push   ebx
c001b595:	56                   	push   esi
c001b596:	52                   	push   edx
c001b597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b59b:	55                   	push   ebp
c001b59c:	e8 5f f9 ff ff       	call   c001af00 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b5a5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b5a9:	42                   	inc    edx
c001b5aa:	83 c4 20             	add    esp,0x20
c001b5ad:	83 fa 06             	cmp    edx,0x6
c001b5b0:	75 de                	jne    c001b590 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b5b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5b6:	83 ec 0c             	sub    esp,0xc
c001b5b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b5bd:	c1 e2 08             	shl    edx,0x8
c001b5c0:	0f b6 c4             	movzx  eax,ah
c001b5c3:	09 d0                	or     eax,edx
c001b5c5:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b5ca:	6a 02                	push   0x2
c001b5cc:	57                   	push   edi
c001b5cd:	53                   	push   ebx
c001b5ce:	56                   	push   esi
c001b5cf:	55                   	push   ebp
c001b5d0:	e8 53 f7 ff ff       	call   c001ad28 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5d5:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b5da:	83 c4 20             	add    esp,0x20
c001b5dd:	57                   	push   edi
c001b5de:	53                   	push   ebx
c001b5df:	56                   	push   esi
c001b5e0:	55                   	push   ebp
c001b5e1:	e8 82 f8 ff ff       	call   c001ae68 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b5e6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b5ea:	57                   	push   edi
c001b5eb:	53                   	push   ebx
c001b5ec:	56                   	push   esi
c001b5ed:	55                   	push   ebp
c001b5ee:	e8 df f7 ff ff       	call   c001add2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b5f3:	b9 09 00 00 00       	mov    ecx,0x9
c001b5f8:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b5fd:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b601:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b605:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b609:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b60d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b611:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b615:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b619:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b61d:	83 ec 0c             	sub    esp,0xc
c001b620:	fc                   	cld    
c001b621:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b625:	89 e7                	mov    edi,esp
c001b627:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b629:	55                   	push   ebp
c001b62a:	e8 09 fd ff ff       	call   c001b338 <PCI::foundDevice(PCIDeviceInfo)>
c001b62f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b635:	5b                   	pop    ebx
c001b636:	5e                   	pop    esi
c001b637:	5f                   	pop    edi
c001b638:	5d                   	pop    ebp
c001b639:	c3                   	ret    

c001b63a <PCI::checkDevice(unsigned char, unsigned char)>:
c001b63a:	55                   	push   ebp
c001b63b:	57                   	push   edi
c001b63c:	56                   	push   esi
c001b63d:	53                   	push   ebx
c001b63e:	83 ec 0c             	sub    esp,0xc
c001b641:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b646:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b64b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b64f:	6a 00                	push   0x0
c001b651:	56                   	push   esi
c001b652:	57                   	push   edi
c001b653:	55                   	push   ebp
c001b654:	e8 79 f7 ff ff       	call   c001add2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b659:	6a 00                	push   0x0
c001b65b:	56                   	push   esi
c001b65c:	57                   	push   edi
c001b65d:	55                   	push   ebp
c001b65e:	e8 5b fe ff ff       	call   c001b4be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b663:	83 c4 20             	add    esp,0x20
c001b666:	6a 00                	push   0x0
c001b668:	56                   	push   esi
c001b669:	57                   	push   edi
c001b66a:	55                   	push   ebp
c001b66b:	e8 86 f7 ff ff       	call   c001adf6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b670:	83 c4 10             	add    esp,0x10
c001b673:	a8 80                	test   al,0x80
c001b675:	74 2d                	je     c001b6a4 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b677:	bb 01 00 00 00       	mov    ebx,0x1
c001b67c:	53                   	push   ebx
c001b67d:	56                   	push   esi
c001b67e:	57                   	push   edi
c001b67f:	55                   	push   ebp
c001b680:	e8 4d f7 ff ff       	call   c001add2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b685:	83 c4 10             	add    esp,0x10
c001b688:	0f b7 c0             	movzx  eax,ax
c001b68b:	3d ff ff 00 00       	cmp    eax,0xffff
c001b690:	74 0c                	je     c001b69e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b692:	53                   	push   ebx
c001b693:	56                   	push   esi
c001b694:	57                   	push   edi
c001b695:	55                   	push   ebp
c001b696:	e8 23 fe ff ff       	call   c001b4be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b69b:	83 c4 10             	add    esp,0x10
c001b69e:	43                   	inc    ebx
c001b69f:	83 fb 08             	cmp    ebx,0x8
c001b6a2:	75 d8                	jne    c001b67c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b6a4:	83 c4 0c             	add    esp,0xc
c001b6a7:	5b                   	pop    ebx
c001b6a8:	5e                   	pop    esi
c001b6a9:	5f                   	pop    edi
c001b6aa:	5d                   	pop    ebp
c001b6ab:	c3                   	ret    

c001b6ac <PCI::detect()>:
c001b6ac:	56                   	push   esi
c001b6ad:	53                   	push   ebx
c001b6ae:	53                   	push   ebx
c001b6af:	31 db                	xor    ebx,ebx
c001b6b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6b5:	6a 00                	push   0x0
c001b6b7:	6a 00                	push   0x0
c001b6b9:	6a 00                	push   0x0
c001b6bb:	56                   	push   esi
c001b6bc:	e8 35 f7 ff ff       	call   c001adf6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b6c1:	83 c4 10             	add    esp,0x10
c001b6c4:	a8 80                	test   al,0x80
c001b6c6:	75 21                	jne    c001b6e9 <PCI::detect()+0x3d>
c001b6c8:	51                   	push   ecx
c001b6c9:	51                   	push   ecx
c001b6ca:	6a 00                	push   0x0
c001b6cc:	56                   	push   esi
c001b6cd:	e8 42 fc ff ff       	call   c001b314 <PCI::checkBus(unsigned char)>
c001b6d2:	83 c4 10             	add    esp,0x10
c001b6d5:	eb 2a                	jmp    c001b701 <PCI::detect()+0x55>
c001b6d7:	52                   	push   edx
c001b6d8:	52                   	push   edx
c001b6d9:	53                   	push   ebx
c001b6da:	43                   	inc    ebx
c001b6db:	56                   	push   esi
c001b6dc:	e8 33 fc ff ff       	call   c001b314 <PCI::checkBus(unsigned char)>
c001b6e1:	83 c4 10             	add    esp,0x10
c001b6e4:	83 fb 08             	cmp    ebx,0x8
c001b6e7:	74 18                	je     c001b701 <PCI::detect()+0x55>
c001b6e9:	53                   	push   ebx
c001b6ea:	6a 00                	push   0x0
c001b6ec:	6a 00                	push   0x0
c001b6ee:	56                   	push   esi
c001b6ef:	e8 de f6 ff ff       	call   c001add2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6f4:	83 c4 10             	add    esp,0x10
c001b6f7:	0f b7 c0             	movzx  eax,ax
c001b6fa:	3d ff ff 00 00       	cmp    eax,0xffff
c001b6ff:	74 d6                	je     c001b6d7 <PCI::detect()+0x2b>
c001b701:	58                   	pop    eax
c001b702:	5b                   	pop    ebx
c001b703:	5e                   	pop    esi
c001b704:	c3                   	ret    
c001b705:	90                   	nop

c001b706 <IDE::close(int, int, void*)>:
c001b706:	83 c8 ff             	or     eax,0xffffffff
c001b709:	c3                   	ret    

c001b70a <IDE::IDE()>:
c001b70a:	83 ec 0c             	sub    esp,0xc
c001b70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b711:	83 ec 08             	sub    esp,0x8
c001b714:	68 ac 2a 02 c0       	push   0xc0022aac
c001b719:	50                   	push   eax
c001b71a:	e8 1d 12 ff ff       	call   c000c93c <HardDiskController::HardDiskController(char const*)>
c001b71f:	83 c4 10             	add    esp,0x10
c001b722:	ba 3c 2b 02 c0       	mov    edx,0xc0022b3c
c001b727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b72b:	89 10                	mov    DWORD PTR [eax],edx
c001b72d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b731:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b738:	90                   	nop
c001b739:	83 c4 0c             	add    esp,0xc
c001b73c:	c3                   	ret    
c001b73d:	90                   	nop

c001b73e <IDE::prepareInterrupt(unsigned char)>:
c001b73e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b743:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b747:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b74f:	c3                   	ret    

c001b750 <selectDrive(unsigned char, unsigned char)>:
c001b750:	c3                   	ret    
c001b751:	90                   	nop

c001b752 <IDE::getBase(unsigned char)>:
c001b752:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b757:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b75b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b763:	c3                   	ret    

c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b764:	55                   	push   ebp
c001b765:	57                   	push   edi
c001b766:	56                   	push   esi
c001b767:	53                   	push   ebx
c001b768:	83 ec 1c             	sub    esp,0x1c
c001b76b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b76f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b773:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b777:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b77b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b77e:	80 f9 03             	cmp    cl,0x3
c001b781:	77 4f                	ja     c001b7d2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b783:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b787:	0f b6 f2             	movzx  esi,dl
c001b78a:	0f b6 db             	movzx  ebx,bl
c001b78d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b790:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b795:	80 ca 80             	or     dl,0x80
c001b798:	52                   	push   edx
c001b799:	6a 0c                	push   0xc
c001b79b:	56                   	push   esi
c001b79c:	57                   	push   edi
c001b79d:	e8 c2 ff ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7a2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b7a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7ab:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b7af:	ee                   	out    dx,al
c001b7b0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b7b5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b7b9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b7bd:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b7c5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b7c9:	83 c4 2c             	add    esp,0x2c
c001b7cc:	5b                   	pop    ebx
c001b7cd:	5e                   	pop    esi
c001b7ce:	5f                   	pop    edi
c001b7cf:	5d                   	pop    ebp
c001b7d0:	eb 92                	jmp    c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7d2:	0f b6 cb             	movzx  ecx,bl
c001b7d5:	83 f9 07             	cmp    ecx,0x7
c001b7d8:	77 12                	ja     c001b7ec <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b7da:	0f b6 d2             	movzx  edx,dl
c001b7dd:	0f b6 db             	movzx  ebx,bl
c001b7e0:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001b7e8:	01 da                	add    edx,ebx
c001b7ea:	eb 2f                	jmp    c001b81b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b7ec:	83 f9 0d             	cmp    ecx,0xd
c001b7ef:	77 13                	ja     c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b7f1:	0f b6 d2             	movzx  edx,dl
c001b7f4:	0f b6 db             	movzx  ebx,bl
c001b7f7:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b7fe:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b802:	eb 17                	jmp    c001b81b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b804:	83 f9 15             	cmp    ecx,0x15
c001b807:	77 13                	ja     c001b81c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b809:	0f b6 d2             	movzx  edx,dl
c001b80c:	0f b6 db             	movzx  ebx,bl
c001b80f:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b817:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b81b:	ee                   	out    dx,al
c001b81c:	83 c4 1c             	add    esp,0x1c
c001b81f:	5b                   	pop    ebx
c001b820:	5e                   	pop    esi
c001b821:	5f                   	pop    edi
c001b822:	5d                   	pop    ebp
c001b823:	c3                   	ret    

c001b824 <IDE::read(unsigned char, unsigned char)>:
c001b824:	57                   	push   edi
c001b825:	56                   	push   esi
c001b826:	53                   	push   ebx
c001b827:	83 ec 10             	sub    esp,0x10
c001b82a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b82e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b832:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b836:	8d 42 f8             	lea    eax,[edx-0x8]
c001b839:	3c 03                	cmp    al,0x3
c001b83b:	77 48                	ja     c001b885 <IDE::read(unsigned char, unsigned char)+0x61>
c001b83d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b841:	0f b6 f1             	movzx  esi,cl
c001b844:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001b847:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001b84c:	0c 80                	or     al,0x80
c001b84e:	50                   	push   eax
c001b84f:	6a 0c                	push   0xc
c001b851:	56                   	push   esi
c001b852:	53                   	push   ebx
c001b853:	e8 0c ff ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b858:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b85c:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001b861:	0f b6 d2             	movzx  edx,dl
c001b864:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b868:	ec                   	in     al,dx
c001b869:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b86d:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001b872:	52                   	push   edx
c001b873:	6a 0c                	push   0xc
c001b875:	56                   	push   esi
c001b876:	53                   	push   ebx
c001b877:	e8 e8 fe ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b87c:	83 c4 20             	add    esp,0x20
c001b87f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b883:	eb 4c                	jmp    c001b8d1 <IDE::read(unsigned char, unsigned char)+0xad>
c001b885:	0f b6 f2             	movzx  esi,dl
c001b888:	83 fe 07             	cmp    esi,0x7
c001b88b:	77 12                	ja     c001b89f <IDE::read(unsigned char, unsigned char)+0x7b>
c001b88d:	0f b6 c9             	movzx  ecx,cl
c001b890:	0f b6 d2             	movzx  edx,dl
c001b893:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001b89b:	01 c2                	add    edx,eax
c001b89d:	eb 31                	jmp    c001b8d0 <IDE::read(unsigned char, unsigned char)+0xac>
c001b89f:	83 fe 0d             	cmp    esi,0xd
c001b8a2:	77 13                	ja     c001b8b7 <IDE::read(unsigned char, unsigned char)+0x93>
c001b8a4:	0f b6 c9             	movzx  ecx,cl
c001b8a7:	0f b6 d2             	movzx  edx,dl
c001b8aa:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001b8b1:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b8b5:	eb 19                	jmp    c001b8d0 <IDE::read(unsigned char, unsigned char)+0xac>
c001b8b7:	31 c0                	xor    eax,eax
c001b8b9:	83 fe 15             	cmp    esi,0x15
c001b8bc:	77 13                	ja     c001b8d1 <IDE::read(unsigned char, unsigned char)+0xad>
c001b8be:	0f b6 c9             	movzx  ecx,cl
c001b8c1:	0f b6 d2             	movzx  edx,dl
c001b8c4:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001b8cc:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b8d0:	ec                   	in     al,dx
c001b8d1:	83 c4 10             	add    esp,0x10
c001b8d4:	5b                   	pop    ebx
c001b8d5:	5e                   	pop    esi
c001b8d6:	5f                   	pop    edi
c001b8d7:	c3                   	ret    

c001b8d8 <IDE::waitInterrupt(unsigned char)>:
c001b8d8:	55                   	push   ebp
c001b8d9:	57                   	push   edi
c001b8da:	56                   	push   esi
c001b8db:	53                   	push   ebx
c001b8dc:	31 db                	xor    ebx,ebx
c001b8de:	83 ec 0c             	sub    esp,0xc
c001b8e1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b8e5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b8ea:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b8f2:	89 e8                	mov    eax,ebp
c001b8f4:	84 c0                	test   al,al
c001b8f6:	75 30                	jne    c001b928 <IDE::waitInterrupt(unsigned char)+0x50>
c001b8f8:	50                   	push   eax
c001b8f9:	6a 0c                	push   0xc
c001b8fb:	56                   	push   esi
c001b8fc:	57                   	push   edi
c001b8fd:	e8 22 ff ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001b902:	83 c4 10             	add    esp,0x10
c001b905:	a8 01                	test   al,0x1
c001b907:	75 27                	jne    c001b930 <IDE::waitInterrupt(unsigned char)+0x58>
c001b909:	f6 c3 04             	test   bl,0x4
c001b90c:	75 12                	jne    c001b920 <IDE::waitInterrupt(unsigned char)+0x48>
c001b90e:	83 fb 32             	cmp    ebx,0x32
c001b911:	7e 0d                	jle    c001b920 <IDE::waitInterrupt(unsigned char)+0x48>
c001b913:	83 ec 0c             	sub    esp,0xc
c001b916:	6a 64                	push   0x64
c001b918:	e8 73 a4 ff ff       	call   c0015d90 <milliTenthSleep(unsigned int)>
c001b91d:	83 c4 10             	add    esp,0x10
c001b920:	83 fb 3c             	cmp    ebx,0x3c
c001b923:	74 0b                	je     c001b930 <IDE::waitInterrupt(unsigned char)+0x58>
c001b925:	43                   	inc    ebx
c001b926:	eb c2                	jmp    c001b8ea <IDE::waitInterrupt(unsigned char)+0x12>
c001b928:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b930:	83 c4 0c             	add    esp,0xc
c001b933:	89 e8                	mov    eax,ebp
c001b935:	5b                   	pop    ebx
c001b936:	5e                   	pop    esi
c001b937:	5f                   	pop    edi
c001b938:	5d                   	pop    ebp
c001b939:	c3                   	ret    

c001b93a <ideChannel0IRQHandler(regs*, void*)>:
c001b93a:	83 ec 10             	sub    esp,0x10
c001b93d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b941:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b948:	6a 07                	push   0x7
c001b94a:	6a 00                	push   0x0
c001b94c:	50                   	push   eax
c001b94d:	e8 d2 fe ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001b952:	83 c4 1c             	add    esp,0x1c
c001b955:	c3                   	ret    

c001b956 <ideChannel1IRQHandler(regs*, void*)>:
c001b956:	83 ec 10             	sub    esp,0x10
c001b959:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b95d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b964:	6a 07                	push   0x7
c001b966:	6a 01                	push   0x1
c001b968:	50                   	push   eax
c001b969:	e8 b6 fe ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001b96e:	83 c4 1c             	add    esp,0x1c
c001b971:	c3                   	ret    

c001b972 <IDE::enableIRQs(unsigned char, bool)>:
c001b972:	57                   	push   edi
c001b973:	b8 02 00 00 00       	mov    eax,0x2
c001b978:	56                   	push   esi
c001b979:	53                   	push   ebx
c001b97a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b97f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b983:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b987:	74 02                	je     c001b98b <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b989:	31 c0                	xor    eax,eax
c001b98b:	0f b6 db             	movzx  ebx,bl
c001b98e:	bf 04 00 00 00       	mov    edi,0x4
c001b993:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001b99a:	50                   	push   eax
c001b99b:	6a 0c                	push   0xc
c001b99d:	53                   	push   ebx
c001b99e:	56                   	push   esi
c001b99f:	e8 c0 fd ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9a4:	83 c4 10             	add    esp,0x10
c001b9a7:	50                   	push   eax
c001b9a8:	6a 0c                	push   0xc
c001b9aa:	53                   	push   ebx
c001b9ab:	56                   	push   esi
c001b9ac:	e8 73 fe ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001b9b1:	83 c4 10             	add    esp,0x10
c001b9b4:	4f                   	dec    edi
c001b9b5:	75 f0                	jne    c001b9a7 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001b9b7:	5b                   	pop    ebx
c001b9b8:	5e                   	pop    esi
c001b9b9:	5f                   	pop    edi
c001b9ba:	c3                   	ret    
c001b9bb:	90                   	nop

c001b9bc <IDE::open(int, int, void*)>:
c001b9bc:	55                   	push   ebp
c001b9bd:	57                   	push   edi
c001b9be:	56                   	push   esi
c001b9bf:	53                   	push   ebx
c001b9c0:	83 ec 1c             	sub    esp,0x1c
c001b9c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b9c7:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b9ce:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b9d7:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b9e0:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b9e7:	0f 85 da 02 00 00    	jne    c001bcc7 <IDE::open(int, int, void*)+0x30b>
c001b9ed:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b9f3:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001b9f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9fb:	83 e0 7f             	and    eax,0x7f
c001b9fe:	83 f8 05             	cmp    eax,0x5
c001ba01:	74 05                	je     c001ba08 <IDE::open(int, int, void*)+0x4c>
c001ba03:	83 f8 0f             	cmp    eax,0xf
c001ba06:	75 32                	jne    c001ba3a <IDE::open(int, int, void*)+0x7e>
c001ba08:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ba0e:	83 e0 fc             	and    eax,0xfffffffc
c001ba11:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ba18:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ba1e:	83 e0 fc             	and    eax,0xfffffffc
c001ba21:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ba28:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ba2e:	83 e0 fc             	and    eax,0xfffffffc
c001ba31:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ba38:	eb 14                	jmp    c001ba4e <IDE::open(int, int, void*)+0x92>
c001ba3a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ba44:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ba4e:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001ba55:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ba5a:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ba61:	89 fa                	mov    edx,edi
c001ba63:	89 f1                	mov    ecx,esi
c001ba65:	c1 e1 10             	shl    ecx,0x10
c001ba68:	89 e8                	mov    eax,ebp
c001ba6a:	c1 e0 0b             	shl    eax,0xb
c001ba6d:	09 c1                	or     ecx,eax
c001ba6f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ba76:	c1 e0 08             	shl    eax,0x8
c001ba79:	09 c1                	or     ecx,eax
c001ba7b:	89 c8                	mov    eax,ecx
c001ba7d:	0d 08 00 00 80       	or     eax,0x80000008
c001ba82:	ef                   	out    dx,eax
c001ba83:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ba88:	ed                   	in     eax,dx
c001ba89:	c1 e8 10             	shr    eax,0x10
c001ba8c:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba91:	0f 84 f9 00 00 00    	je     c001bb90 <IDE::open(int, int, void*)+0x1d4>
c001ba97:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ba9d:	89 fa                	mov    edx,edi
c001ba9f:	89 c8                	mov    eax,ecx
c001baa1:	ef                   	out    dx,eax
c001baa2:	b0 fe                	mov    al,0xfe
c001baa4:	ba fc 0c 00 00       	mov    edx,0xcfc
c001baa9:	ee                   	out    dx,al
c001baaa:	89 c8                	mov    eax,ecx
c001baac:	89 fa                	mov    edx,edi
c001baae:	ef                   	out    dx,eax
c001baaf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bab4:	ed                   	in     eax,dx
c001bab5:	3c fe                	cmp    al,0xfe
c001bab7:	0f 85 a4 00 00 00    	jne    c001bb61 <IDE::open(int, int, void*)+0x1a5>
c001babd:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bac3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001baca:	74 30                	je     c001bafc <IDE::open(int, int, void*)+0x140>
c001bacc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bad2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bad6:	83 ec 0c             	sub    esp,0xc
c001bad9:	40                   	inc    eax
c001bada:	0f b6 c0             	movzx  eax,al
c001badd:	50                   	push   eax
c001bade:	55                   	push   ebp
c001badf:	56                   	push   esi
c001bae0:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bae6:	51                   	push   ecx
c001bae7:	e8 a8 3a ff ff       	call   c000f594 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001baec:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001baf1:	83 c4 1c             	add    esp,0x1c
c001baf4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bafa:	eb 0a                	jmp    c001bb06 <IDE::open(int, int, void*)+0x14a>
c001bafc:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bb06:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bb0d:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001bb12:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bb19:	89 ea                	mov    edx,ebp
c001bb1b:	c1 e1 10             	shl    ecx,0x10
c001bb1e:	c1 e0 08             	shl    eax,0x8
c001bb21:	09 c1                	or     ecx,eax
c001bb23:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bb2a:	c1 e0 0b             	shl    eax,0xb
c001bb2d:	09 c1                	or     ecx,eax
c001bb2f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bb35:	89 c8                	mov    eax,ecx
c001bb37:	ef                   	out    dx,eax
c001bb38:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001bb3e:	be fc 0c 00 00       	mov    esi,0xcfc
c001bb43:	89 f2                	mov    edx,esi
c001bb45:	89 f8                	mov    eax,edi
c001bb47:	ee                   	out    dx,al
c001bb48:	89 c8                	mov    eax,ecx
c001bb4a:	89 ea                	mov    edx,ebp
c001bb4c:	ef                   	out    dx,eax
c001bb4d:	89 f2                	mov    edx,esi
c001bb4f:	ed                   	in     eax,dx
c001bb50:	0f b6 c0             	movzx  eax,al
c001bb53:	39 f8                	cmp    eax,edi
c001bb55:	74 49                	je     c001bba0 <IDE::open(int, int, void*)+0x1e4>
c001bb57:	83 ec 0c             	sub    esp,0xc
c001bb5a:	68 c4 2a 02 c0       	push   0xc0022ac4
c001bb5f:	eb 37                	jmp    c001bb98 <IDE::open(int, int, void*)+0x1dc>
c001bb61:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bb6a:	75 1a                	jne    c001bb86 <IDE::open(int, int, void*)+0x1ca>
c001bb6c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bb71:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bb76:	74 05                	je     c001bb7d <IDE::open(int, int, void*)+0x1c1>
c001bb78:	83 c0 80             	add    eax,0xffffff80
c001bb7b:	75 09                	jne    c001bb86 <IDE::open(int, int, void*)+0x1ca>
c001bb7d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bb84:	eb 1a                	jmp    c001bba0 <IDE::open(int, int, void*)+0x1e4>
c001bb86:	83 ec 0c             	sub    esp,0xc
c001bb89:	68 cc 2a 02 c0       	push   0xc0022acc
c001bb8e:	eb 08                	jmp    c001bb98 <IDE::open(int, int, void*)+0x1dc>
c001bb90:	83 ec 0c             	sub    esp,0xc
c001bb93:	68 fd 2a 02 c0       	push   0xc0022afd
c001bb98:	e8 d4 55 ff ff       	call   c0011171 <KePanic(char const*)>
c001bb9d:	83 c4 10             	add    esp,0x10
c001bba0:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bba7:	74 1a                	je     c001bbc3 <IDE::open(int, int, void*)+0x207>
c001bba9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bbaf:	83 e0 fc             	and    eax,0xfffffffc
c001bbb2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bbb9:	83 c0 08             	add    eax,0x8
c001bbbc:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bbc3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bbc9:	89 c2                	mov    edx,eax
c001bbcb:	83 e2 0f             	and    edx,0xf
c001bbce:	83 fa 08             	cmp    edx,0x8
c001bbd1:	75 0a                	jne    c001bbdd <IDE::open(int, int, void*)+0x221>
c001bbd3:	83 e8 02             	sub    eax,0x2
c001bbd6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bbdd:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bbe3:	89 c2                	mov    edx,eax
c001bbe5:	83 e2 0f             	and    edx,0xf
c001bbe8:	83 fa 08             	cmp    edx,0x8
c001bbeb:	75 0a                	jne    c001bbf7 <IDE::open(int, int, void*)+0x23b>
c001bbed:	83 e8 02             	sub    eax,0x2
c001bbf0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bbf7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bbfe:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bc05:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc08:	89 d0                	mov    eax,edx
c001bc0a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc0e:	8d 7a 01             	lea    edi,[edx+0x1]
c001bc11:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bc15:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc19:	83 e1 3f             	and    ecx,0x3f
c001bc1c:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bc20:	89 f9                	mov    ecx,edi
c001bc22:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bc29:	8d 78 02             	lea    edi,[eax+0x2]
c001bc2c:	0f b6 c9             	movzx  ecx,cl
c001bc2f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc32:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bc36:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc3a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bc3e:	83 e2 3f             	and    edx,0x3f
c001bc41:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bc45:	89 f9                	mov    ecx,edi
c001bc47:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bc4d:	8d 78 03             	lea    edi,[eax+0x3]
c001bc50:	0f b6 d1             	movzx  edx,cl
c001bc53:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc56:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bc5a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc5e:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc62:	83 e1 3f             	and    ecx,0x3f
c001bc65:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bc69:	89 f9                	mov    ecx,edi
c001bc6b:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bc71:	8d 78 04             	lea    edi,[eax+0x4]
c001bc74:	0f b6 c9             	movzx  ecx,cl
c001bc77:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc7a:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bc7e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc82:	89 fa                	mov    edx,edi
c001bc84:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bc8a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bc8e:	83 e2 3f             	and    edx,0x3f
c001bc91:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bc95:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bc9c:	66 85 f6             	test   si,si
c001bc9f:	74 65                	je     c001bd06 <IDE::open(int, int, void*)+0x34a>
c001bca1:	89 f9                	mov    ecx,edi
c001bca3:	83 c0 05             	add    eax,0x5
c001bca6:	0f b6 d1             	movzx  edx,cl
c001bca9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bcac:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bcb0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bcb4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bcba:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bcbe:	83 e0 3f             	and    eax,0x3f
c001bcc1:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bcc5:	eb 3f                	jmp    c001bd06 <IDE::open(int, int, void*)+0x34a>
c001bcc7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bcce:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bcd4:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bcdb:	05 06 02 00 00       	add    eax,0x206
c001bce0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bce7:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bcee:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bcf5:	05 06 02 00 00       	add    eax,0x206
c001bcfa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd01:	e9 bd fe ff ff       	jmp    c001bbc3 <IDE::open(int, int, void*)+0x207>
c001bd06:	50                   	push   eax
c001bd07:	50                   	push   eax
c001bd08:	6a 00                	push   0x0
c001bd0a:	53                   	push   ebx
c001bd0b:	e8 2e fa ff ff       	call   c001b73e <IDE::prepareInterrupt(unsigned char)>
c001bd10:	5a                   	pop    edx
c001bd11:	59                   	pop    ecx
c001bd12:	6a 01                	push   0x1
c001bd14:	53                   	push   ebx
c001bd15:	e8 24 fa ff ff       	call   c001b73e <IDE::prepareInterrupt(unsigned char)>
c001bd1a:	83 c4 0c             	add    esp,0xc
c001bd1d:	6a 00                	push   0x0
c001bd1f:	6a 00                	push   0x0
c001bd21:	53                   	push   ebx
c001bd22:	e8 4b fc ff ff       	call   c001b972 <IDE::enableIRQs(unsigned char, bool)>
c001bd27:	83 c4 0c             	add    esp,0xc
c001bd2a:	6a 00                	push   0x0
c001bd2c:	6a 01                	push   0x1
c001bd2e:	53                   	push   ebx
c001bd2f:	e8 3e fc ff ff       	call   c001b972 <IDE::enableIRQs(unsigned char, bool)>
c001bd34:	83 c4 10             	add    esp,0x10
c001bd37:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bd3e:	74 34                	je     c001bd74 <IDE::open(int, int, void*)+0x3b8>
c001bd40:	83 ec 0c             	sub    esp,0xc
c001bd43:	53                   	push   ebx
c001bd44:	6a 01                	push   0x1
c001bd46:	68 3a b9 01 c0       	push   0xc001b93a
c001bd4b:	6a 0e                	push   0xe
c001bd4d:	53                   	push   ebx
c001bd4e:	e8 51 08 ff ff       	call   c000c5a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd53:	83 c4 14             	add    esp,0x14
c001bd56:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bd5c:	53                   	push   ebx
c001bd5d:	6a 01                	push   0x1
c001bd5f:	68 56 b9 01 c0       	push   0xc001b956
c001bd64:	6a 0f                	push   0xf
c001bd66:	53                   	push   ebx
c001bd67:	e8 38 08 ff ff       	call   c000c5a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd6c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bd72:	eb 38                	jmp    c001bdac <IDE::open(int, int, void*)+0x3f0>
c001bd74:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bd7e:	83 ec 0c             	sub    esp,0xc
c001bd81:	53                   	push   ebx
c001bd82:	6a 00                	push   0x0
c001bd84:	68 3a b9 01 c0       	push   0xc001b93a
c001bd89:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bd8f:	53                   	push   ebx
c001bd90:	e8 0f 08 ff ff       	call   c000c5a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd95:	83 c4 14             	add    esp,0x14
c001bd98:	53                   	push   ebx
c001bd99:	6a 00                	push   0x0
c001bd9b:	68 56 b9 01 c0       	push   0xc001b956
c001bda0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bda6:	53                   	push   ebx
c001bda7:	e8 f8 07 ff ff       	call   c000c5a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdac:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdae:	83 c4 20             	add    esp,0x20
c001bdb1:	83 ec 0c             	sub    esp,0xc
c001bdb4:	53                   	push   ebx
c001bdb5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bdb8:	83 c4 0c             	add    esp,0xc
c001bdbb:	6a 07                	push   0x7
c001bdbd:	6a 00                	push   0x0
c001bdbf:	53                   	push   ebx
c001bdc0:	e8 5f fa ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001bdc5:	83 c4 0c             	add    esp,0xc
c001bdc8:	6a 07                	push   0x7
c001bdca:	6a 01                	push   0x1
c001bdcc:	53                   	push   ebx
c001bdcd:	e8 52 fa ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001bdd2:	83 c4 0c             	add    esp,0xc
c001bdd5:	6a 01                	push   0x1
c001bdd7:	6a 00                	push   0x0
c001bdd9:	53                   	push   ebx
c001bdda:	e8 93 fb ff ff       	call   c001b972 <IDE::enableIRQs(unsigned char, bool)>
c001bddf:	83 c4 0c             	add    esp,0xc
c001bde2:	6a 01                	push   0x1
c001bde4:	6a 01                	push   0x1
c001bde6:	53                   	push   ebx
c001bde7:	e8 86 fb ff ff       	call   c001b972 <IDE::enableIRQs(unsigned char, bool)>
c001bdec:	83 c4 2c             	add    esp,0x2c
c001bdef:	31 c0                	xor    eax,eax
c001bdf1:	5b                   	pop    ebx
c001bdf2:	5e                   	pop    esi
c001bdf3:	5f                   	pop    edi
c001bdf4:	5d                   	pop    ebp
c001bdf5:	c3                   	ret    

c001bdf6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bdf6:	55                   	push   ebp
c001bdf7:	57                   	push   edi
c001bdf8:	56                   	push   esi
c001bdf9:	53                   	push   ebx
c001bdfa:	83 ec 1c             	sub    esp,0x1c
c001bdfd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001be01:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be05:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be09:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001be0d:	8d 42 f8             	lea    eax,[edx-0x8]
c001be10:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001be14:	3c 03                	cmp    al,0x3
c001be16:	77 5a                	ja     c001be72 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001be18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001be1c:	0f b6 db             	movzx  ebx,bl
c001be1f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001be23:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001be26:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be2b:	0c 80                	or     al,0x80
c001be2d:	50                   	push   eax
c001be2e:	6a 0c                	push   0xc
c001be30:	53                   	push   ebx
c001be31:	56                   	push   esi
c001be32:	e8 2d f9 ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be3b:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001be40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be44:	0f b6 d2             	movzx  edx,dl
c001be47:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be4b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001be4d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be52:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001be56:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001be5a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be62:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be66:	83 c4 2c             	add    esp,0x2c
c001be69:	5b                   	pop    ebx
c001be6a:	5e                   	pop    esi
c001be6b:	5f                   	pop    edi
c001be6c:	5d                   	pop    ebp
c001be6d:	e9 f2 f8 ff ff       	jmp    c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be72:	0f b6 c2             	movzx  eax,dl
c001be75:	83 f8 07             	cmp    eax,0x7
c001be78:	77 12                	ja     c001be8c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001be7a:	0f b6 db             	movzx  ebx,bl
c001be7d:	0f b6 c2             	movzx  eax,dl
c001be80:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001be88:	01 c2                	add    edx,eax
c001be8a:	eb 2f                	jmp    c001bebb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001be8c:	83 f8 0d             	cmp    eax,0xd
c001be8f:	77 13                	ja     c001bea4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001be91:	0f b6 db             	movzx  ebx,bl
c001be94:	0f b6 d2             	movzx  edx,dl
c001be97:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001be9e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bea2:	eb 17                	jmp    c001bebb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bea4:	83 f8 15             	cmp    eax,0x15
c001bea7:	77 14                	ja     c001bebd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001bea9:	0f b6 db             	movzx  ebx,bl
c001beac:	0f b6 d2             	movzx  edx,dl
c001beaf:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001beb7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bebb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bebd:	83 c4 1c             	add    esp,0x1c
c001bec0:	5b                   	pop    ebx
c001bec1:	5e                   	pop    esi
c001bec2:	5f                   	pop    edi
c001bec3:	5d                   	pop    ebp
c001bec4:	c3                   	ret    
c001bec5:	90                   	nop

c001bec6 <IDE::detect()>:
c001bec6:	55                   	push   ebp
c001bec7:	57                   	push   edi
c001bec8:	56                   	push   esi
c001bec9:	53                   	push   ebx
c001beca:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bed0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bed7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bede:	0f 85 9e 02 00 00    	jne    c001c182 <IDE::detect()+0x2bc>
c001bee4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001beeb:	31 f6                	xor    esi,esi
c001beed:	31 ff                	xor    edi,edi
c001beef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bef7:	89 f8                	mov    eax,edi
c001bef9:	c1 e0 06             	shl    eax,0x6
c001befc:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bf04:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bf0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf10:	c1 e0 04             	shl    eax,0x4
c001bf13:	83 c8 a0             	or     eax,0xffffffa0
c001bf16:	0f b6 c0             	movzx  eax,al
c001bf19:	50                   	push   eax
c001bf1a:	6a 06                	push   0x6
c001bf1c:	56                   	push   esi
c001bf1d:	53                   	push   ebx
c001bf1e:	e8 41 f8 ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf23:	83 c4 0c             	add    esp,0xc
c001bf26:	6a 0c                	push   0xc
c001bf28:	56                   	push   esi
c001bf29:	53                   	push   ebx
c001bf2a:	e8 f5 f8 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001bf2f:	83 c4 0c             	add    esp,0xc
c001bf32:	6a 0c                	push   0xc
c001bf34:	56                   	push   esi
c001bf35:	53                   	push   ebx
c001bf36:	e8 e9 f8 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001bf3b:	83 c4 0c             	add    esp,0xc
c001bf3e:	6a 0c                	push   0xc
c001bf40:	56                   	push   esi
c001bf41:	53                   	push   ebx
c001bf42:	e8 dd f8 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001bf47:	83 c4 0c             	add    esp,0xc
c001bf4a:	6a 0c                	push   0xc
c001bf4c:	56                   	push   esi
c001bf4d:	53                   	push   ebx
c001bf4e:	e8 d1 f8 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001bf53:	68 ec 00 00 00       	push   0xec
c001bf58:	6a 07                	push   0x7
c001bf5a:	56                   	push   esi
c001bf5b:	53                   	push   ebx
c001bf5c:	e8 03 f8 ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf61:	83 c4 1c             	add    esp,0x1c
c001bf64:	6a 0c                	push   0xc
c001bf66:	56                   	push   esi
c001bf67:	53                   	push   ebx
c001bf68:	e8 b7 f8 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001bf6d:	83 c4 0c             	add    esp,0xc
c001bf70:	6a 0c                	push   0xc
c001bf72:	56                   	push   esi
c001bf73:	53                   	push   ebx
c001bf74:	e8 ab f8 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001bf79:	83 c4 0c             	add    esp,0xc
c001bf7c:	6a 0c                	push   0xc
c001bf7e:	56                   	push   esi
c001bf7f:	53                   	push   ebx
c001bf80:	e8 9f f8 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001bf85:	83 c4 0c             	add    esp,0xc
c001bf88:	6a 0c                	push   0xc
c001bf8a:	56                   	push   esi
c001bf8b:	53                   	push   ebx
c001bf8c:	e8 93 f8 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001bf91:	83 c4 0c             	add    esp,0xc
c001bf94:	6a 0c                	push   0xc
c001bf96:	56                   	push   esi
c001bf97:	53                   	push   ebx
c001bf98:	e8 87 f8 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001bf9d:	83 c4 10             	add    esp,0x10
c001bfa0:	84 c0                	test   al,al
c001bfa2:	0f 84 61 01 00 00    	je     c001c109 <IDE::detect()+0x243>
c001bfa8:	31 ed                	xor    ebp,ebp
c001bfaa:	50                   	push   eax
c001bfab:	6a 0c                	push   0xc
c001bfad:	56                   	push   esi
c001bfae:	53                   	push   ebx
c001bfaf:	e8 70 f8 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001bfb4:	83 c4 10             	add    esp,0x10
c001bfb7:	a8 01                	test   al,0x1
c001bfb9:	0f 85 6b 01 00 00    	jne    c001c12a <IDE::detect()+0x264>
c001bfbf:	a8 80                	test   al,0x80
c001bfc1:	75 04                	jne    c001bfc7 <IDE::detect()+0x101>
c001bfc3:	a8 08                	test   al,0x8
c001bfc5:	75 23                	jne    c001bfea <IDE::detect()+0x124>
c001bfc7:	45                   	inc    ebp
c001bfc8:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001bfce:	7e da                	jle    c001bfaa <IDE::detect()+0xe4>
c001bfd0:	83 ec 0c             	sub    esp,0xc
c001bfd3:	6a 32                	push   0x32
c001bfd5:	e8 b6 9d ff ff       	call   c0015d90 <milliTenthSleep(unsigned int)>
c001bfda:	83 c4 10             	add    esp,0x10
c001bfdd:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001bfe3:	75 c5                	jne    c001bfaa <IDE::detect()+0xe4>
c001bfe5:	e9 40 01 00 00       	jmp    c001c12a <IDE::detect()+0x264>
c001bfea:	31 c9                	xor    ecx,ecx
c001bfec:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001bff0:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001bff4:	83 ec 0c             	sub    esp,0xc
c001bff7:	68 80 00 00 00       	push   0x80
c001bffc:	55                   	push   ebp
c001bffd:	6a 00                	push   0x0
c001bfff:	56                   	push   esi
c001c000:	53                   	push   ebx
c001c001:	e8 f0 fd ff ff       	call   c001bdf6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c006:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c00b:	89 f8                	mov    eax,edi
c001c00d:	c1 e0 06             	shl    eax,0x6
c001c010:	01 d8                	add    eax,ebx
c001c012:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c019:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c020:	89 d1                	mov    ecx,edx
c001c022:	89 f2                	mov    edx,esi
c001c024:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c02a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c02e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c034:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c038:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c03f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c047:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c04e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c056:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c05c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c063:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c069:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c06d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c071:	83 c4 20             	add    esp,0x20
c001c074:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c077:	83 c5 02             	add    ebp,0x2
c001c07a:	83 c0 02             	add    eax,0x2
c001c07d:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c083:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c086:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c08c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c090:	75 e2                	jne    c001c074 <IDE::detect()+0x1ae>
c001c092:	89 f8                	mov    eax,edi
c001c094:	c1 e0 06             	shl    eax,0x6
c001c097:	01 d8                	add    eax,ebx
c001c099:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c0a0:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c0a7:	c1 ea 09             	shr    edx,0x9
c001c0aa:	83 e2 01             	and    edx,0x1
c001c0ad:	80 e1 01             	and    cl,0x1
c001c0b0:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c0b6:	75 22                	jne    c001c0da <IDE::detect()+0x214>
c001c0b8:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c0bf:	74 47                	je     c001c108 <IDE::detect()+0x242>
c001c0c1:	83 ec 0c             	sub    esp,0xc
c001c0c4:	68 7c 01 00 00       	push   0x17c
c001c0c9:	e8 05 ba fe ff       	call   c0007ad3 <malloc>
c001c0ce:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0d1:	89 c5                	mov    ebp,eax
c001c0d3:	e8 16 05 00 00       	call   c001c5ee <ATA::ATA()>
c001c0d8:	eb 17                	jmp    c001c0f1 <IDE::detect()+0x22b>
c001c0da:	83 ec 0c             	sub    esp,0xc
c001c0dd:	68 84 01 00 00       	push   0x184
c001c0e2:	e8 ec b9 fe ff       	call   c0007ad3 <malloc>
c001c0e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0ea:	89 c5                	mov    ebp,eax
c001c0ec:	e8 6f 0e 00 00       	call   c001cf60 <ATAPI::ATAPI()>
c001c0f1:	5a                   	pop    edx
c001c0f2:	59                   	pop    ecx
c001c0f3:	55                   	push   ebp
c001c0f4:	53                   	push   ebx
c001c0f5:	e8 fe 04 ff ff       	call   c000c5f8 <Device::addChild(Device*)>
c001c0fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c0fd:	53                   	push   ebx
c001c0fe:	57                   	push   edi
c001c0ff:	6a 00                	push   0x0
c001c101:	55                   	push   ebp
c001c102:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c105:	83 c4 20             	add    esp,0x20
c001c108:	47                   	inc    edi
c001c109:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c10e:	74 0d                	je     c001c11d <IDE::detect()+0x257>
c001c110:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c118:	e9 da fd ff ff       	jmp    c001bef7 <IDE::detect()+0x31>
c001c11d:	4e                   	dec    esi
c001c11e:	74 62                	je     c001c182 <IDE::detect()+0x2bc>
c001c120:	be 01 00 00 00       	mov    esi,0x1
c001c125:	e9 c5 fd ff ff       	jmp    c001beef <IDE::detect()+0x29>
c001c12a:	50                   	push   eax
c001c12b:	6a 04                	push   0x4
c001c12d:	56                   	push   esi
c001c12e:	53                   	push   ebx
c001c12f:	e8 f0 f6 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001c134:	83 c4 0c             	add    esp,0xc
c001c137:	6a 05                	push   0x5
c001c139:	56                   	push   esi
c001c13a:	53                   	push   ebx
c001c13b:	89 c5                	mov    ebp,eax
c001c13d:	e8 e2 f6 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001c142:	89 e9                	mov    ecx,ebp
c001c144:	83 c4 10             	add    esp,0x10
c001c147:	0f b6 e9             	movzx  ebp,cl
c001c14a:	83 fd 14             	cmp    ebp,0x14
c001c14d:	74 2d                	je     c001c17c <IDE::detect()+0x2b6>
c001c14f:	83 fd 69             	cmp    ebp,0x69
c001c152:	75 b5                	jne    c001c109 <IDE::detect()+0x243>
c001c154:	3c 96                	cmp    al,0x96
c001c156:	75 b1                	jne    c001c109 <IDE::detect()+0x243>
c001c158:	68 a1 00 00 00       	push   0xa1
c001c15d:	6a 07                	push   0x7
c001c15f:	56                   	push   esi
c001c160:	53                   	push   ebx
c001c161:	e8 fe f5 ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c166:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c16d:	e8 1e 9c ff ff       	call   c0015d90 <milliTenthSleep(unsigned int)>
c001c172:	83 c4 10             	add    esp,0x10
c001c175:	b1 01                	mov    cl,0x1
c001c177:	e9 70 fe ff ff       	jmp    c001bfec <IDE::detect()+0x126>
c001c17c:	3c eb                	cmp    al,0xeb
c001c17e:	75 cf                	jne    c001c14f <IDE::detect()+0x289>
c001c180:	eb d6                	jmp    c001c158 <IDE::detect()+0x292>
c001c182:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c188:	5b                   	pop    ebx
c001c189:	5e                   	pop    esi
c001c18a:	5f                   	pop    edi
c001c18b:	5d                   	pop    ebp
c001c18c:	c3                   	ret    
c001c18d:	90                   	nop

c001c18e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c18e:	55                   	push   ebp
c001c18f:	57                   	push   edi
c001c190:	56                   	push   esi
c001c191:	53                   	push   ebx
c001c192:	83 ec 1c             	sub    esp,0x1c
c001c195:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c199:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c19d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c1a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c1a9:	88 c3                	mov    bl,al
c001c1ab:	25 ff 00 00 00       	and    eax,0xff
c001c1b0:	0f 84 88 00 00 00    	je     c001c23e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c1b6:	83 ec 0c             	sub    esp,0xc
c001c1b9:	89 c7                	mov    edi,eax
c001c1bb:	68 27 2b 02 c0       	push   0xc0022b27
c001c1c0:	e8 45 e7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c1c5:	83 c4 10             	add    esp,0x10
c001c1c8:	83 ff 01             	cmp    edi,0x1
c001c1cb:	74 6b                	je     c001c238 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c1cd:	83 ff 02             	cmp    edi,0x2
c001c1d0:	75 58                	jne    c001c22a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c1d2:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c1d7:	50                   	push   eax
c001c1d8:	6a 01                	push   0x1
c001c1da:	01 ff                	add    edi,edi
c001c1dc:	09 fe                	or     esi,edi
c001c1de:	89 f0                	mov    eax,esi
c001c1e0:	0f b6 f0             	movzx  esi,al
c001c1e3:	c1 e6 06             	shl    esi,0x6
c001c1e6:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c1ee:	50                   	push   eax
c001c1ef:	55                   	push   ebp
c001c1f0:	e8 2f f6 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001c1f5:	83 c4 10             	add    esp,0x10
c001c1f8:	a8 01                	test   al,0x1
c001c1fa:	74 02                	je     c001c1fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c1fc:	b3 07                	mov    bl,0x7
c001c1fe:	a8 02                	test   al,0x2
c001c200:	74 02                	je     c001c204 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c202:	b3 03                	mov    bl,0x3
c001c204:	a8 04                	test   al,0x4
c001c206:	74 02                	je     c001c20a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c208:	b3 14                	mov    bl,0x14
c001c20a:	a8 08                	test   al,0x8
c001c20c:	74 02                	je     c001c210 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c20e:	b3 03                	mov    bl,0x3
c001c210:	a8 10                	test   al,0x10
c001c212:	74 02                	je     c001c216 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c214:	b3 15                	mov    bl,0x15
c001c216:	a8 20                	test   al,0x20
c001c218:	74 02                	je     c001c21c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c21a:	b3 03                	mov    bl,0x3
c001c21c:	a8 40                	test   al,0x40
c001c21e:	74 02                	je     c001c222 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c220:	b3 16                	mov    bl,0x16
c001c222:	a8 80                	test   al,0x80
c001c224:	74 18                	je     c001c23e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c226:	b3 0d                	mov    bl,0xd
c001c228:	eb 14                	jmp    c001c23e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c22a:	83 ff 03             	cmp    edi,0x3
c001c22d:	74 0d                	je     c001c23c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c22f:	83 ff 04             	cmp    edi,0x4
c001c232:	75 0a                	jne    c001c23e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c234:	b3 08                	mov    bl,0x8
c001c236:	eb 06                	jmp    c001c23e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c238:	b3 13                	mov    bl,0x13
c001c23a:	eb 02                	jmp    c001c23e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c23c:	b3 17                	mov    bl,0x17
c001c23e:	83 c4 1c             	add    esp,0x1c
c001c241:	88 d8                	mov    al,bl
c001c243:	5b                   	pop    ebx
c001c244:	5e                   	pop    esi
c001c245:	5f                   	pop    edi
c001c246:	5d                   	pop    ebp
c001c247:	c3                   	ret    

c001c248 <IDE::polling(unsigned char, unsigned int)>:
c001c248:	57                   	push   edi
c001c249:	56                   	push   esi
c001c24a:	53                   	push   ebx
c001c24b:	bb 04 00 00 00       	mov    ebx,0x4
c001c250:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c254:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c259:	52                   	push   edx
c001c25a:	6a 0c                	push   0xc
c001c25c:	56                   	push   esi
c001c25d:	57                   	push   edi
c001c25e:	e8 c1 f5 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001c263:	83 c4 10             	add    esp,0x10
c001c266:	4b                   	dec    ebx
c001c267:	75 f0                	jne    c001c259 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c269:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c26e:	50                   	push   eax
c001c26f:	6a 0c                	push   0xc
c001c271:	56                   	push   esi
c001c272:	57                   	push   edi
c001c273:	e8 ac f5 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001c278:	83 c4 10             	add    esp,0x10
c001c27b:	a8 01                	test   al,0x1
c001c27d:	75 17                	jne    c001c296 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c27f:	a8 20                	test   al,0x20
c001c281:	75 0f                	jne    c001c292 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c283:	4b                   	dec    ebx
c001c284:	74 10                	je     c001c296 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c286:	a8 80                	test   al,0x80
c001c288:	75 e4                	jne    c001c26e <IDE::polling(unsigned char, unsigned int)+0x26>
c001c28a:	a8 08                	test   al,0x8
c001c28c:	74 e0                	je     c001c26e <IDE::polling(unsigned char, unsigned int)+0x26>
c001c28e:	31 c0                	xor    eax,eax
c001c290:	eb 06                	jmp    c001c298 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c292:	b0 01                	mov    al,0x1
c001c294:	eb 02                	jmp    c001c298 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c296:	b0 02                	mov    al,0x2
c001c298:	5b                   	pop    ebx
c001c299:	5e                   	pop    esi
c001c29a:	5f                   	pop    edi
c001c29b:	c3                   	ret    

c001c29c <SATABus::close(int, int, void*)>:
c001c29c:	31 c0                	xor    eax,eax
c001c29e:	c3                   	ret    
c001c29f:	90                   	nop

c001c2a0 <SATABus::detect()>:
c001c2a0:	c3                   	ret    
c001c2a1:	90                   	nop

c001c2a2 <SATABus::SATABus()>:
c001c2a2:	83 ec 0c             	sub    esp,0xc
c001c2a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a9:	83 ec 08             	sub    esp,0x8
c001c2ac:	68 60 2b 02 c0       	push   0xc0022b60
c001c2b1:	50                   	push   eax
c001c2b2:	e8 85 06 ff ff       	call   c000c93c <HardDiskController::HardDiskController(char const*)>
c001c2b7:	83 c4 10             	add    esp,0x10
c001c2ba:	ba 8c 2b 02 c0       	mov    edx,0xc0022b8c
c001c2bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2c3:	89 10                	mov    DWORD PTR [eax],edx
c001c2c5:	83 ec 0c             	sub    esp,0xc
c001c2c8:	6a 50                	push   0x50
c001c2ca:	e8 e2 bb fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c2cf:	83 c4 10             	add    esp,0x10
c001c2d2:	89 c2                	mov    edx,eax
c001c2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c2de:	83 ec 0c             	sub    esp,0xc
c001c2e1:	6a 50                	push   0x50
c001c2e3:	e8 0d d3 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c2e8:	83 c4 10             	add    esp,0x10
c001c2eb:	89 c2                	mov    edx,eax
c001c2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c2f7:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c2fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c300:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c306:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c30a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c310:	83 ec 0c             	sub    esp,0xc
c001c313:	6a 03                	push   0x3
c001c315:	6a 50                	push   0x50
c001c317:	51                   	push   ecx
c001c318:	52                   	push   edx
c001c319:	50                   	push   eax
c001c31a:	e8 e9 db fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c31f:	83 c4 20             	add    esp,0x20
c001c322:	90                   	nop
c001c323:	83 c4 0c             	add    esp,0xc
c001c326:	c3                   	ret    
c001c327:	90                   	nop

c001c328 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c328:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c32c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c32f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c332:	09 c2                	or     edx,eax
c001c334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c338:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c33e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c340:	31 c0                	xor    eax,eax
c001c342:	c1 e9 08             	shr    ecx,0x8
c001c345:	83 e1 0f             	and    ecx,0xf
c001c348:	39 c8                	cmp    eax,ecx
c001c34a:	74 0a                	je     c001c356 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c34c:	f6 c2 01             	test   dl,0x1
c001c34f:	74 08                	je     c001c359 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c351:	d1 ea                	shr    edx,1
c001c353:	40                   	inc    eax
c001c354:	eb f2                	jmp    c001c348 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c356:	83 c8 ff             	or     eax,0xffffffff
c001c359:	c3                   	ret    

c001c35a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c35a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c35e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c361:	89 c2                	mov    edx,eax
c001c363:	c1 ea 08             	shr    edx,0x8
c001c366:	83 e2 0f             	and    edx,0xf
c001c369:	4a                   	dec    edx
c001c36a:	75 32                	jne    c001c39e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c36c:	83 e0 0f             	and    eax,0xf
c001c36f:	83 f8 03             	cmp    eax,0x3
c001c372:	75 2a                	jne    c001c39e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c374:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c377:	b8 02 00 00 00       	mov    eax,0x2
c001c37c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c382:	74 1c                	je     c001c3a0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c384:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c38a:	b8 04 00 00 00       	mov    eax,0x4
c001c38f:	74 0f                	je     c001c3a0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c391:	31 c0                	xor    eax,eax
c001c393:	83 fa 03             	cmp    edx,0x3
c001c396:	0f 94 c0             	sete   al
c001c399:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c39d:	c3                   	ret    
c001c39e:	31 c0                	xor    eax,eax
c001c3a0:	c3                   	ret    
c001c3a1:	90                   	nop

c001c3a2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c3a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3a6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3a9:	0f ba e2 0f          	bt     edx,0xf
c001c3ad:	72 f7                	jb     c001c3a6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c3af:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3b2:	83 ca 10             	or     edx,0x10
c001c3b5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3b8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3bb:	83 ca 01             	or     edx,0x1
c001c3be:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3c1:	c3                   	ret    

c001c3c2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c3c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3c9:	83 e2 fe             	and    edx,0xfffffffe
c001c3cc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3cf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3d2:	83 e2 ef             	and    edx,0xffffffef
c001c3d5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3d8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3db:	0f ba e2 0e          	bt     edx,0xe
c001c3df:	72 f7                	jb     c001c3d8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c3e1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3e4:	0f ba e2 0f          	bt     edx,0xf
c001c3e8:	72 ee                	jb     c001c3d8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c3ea:	c3                   	ret    
c001c3eb:	90                   	nop

c001c3ec <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c3ec:	55                   	push   ebp
c001c3ed:	57                   	push   edi
c001c3ee:	56                   	push   esi
c001c3ef:	53                   	push   ebx
c001c3f0:	83 ec 1c             	sub    esp,0x1c
c001c3f3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c3f7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c3fb:	53                   	push   ebx
c001c3fc:	57                   	push   edi
c001c3fd:	e8 c0 ff ff ff       	call   c001c3c2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c402:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c406:	83 ec 0c             	sub    esp,0xc
c001c409:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c40f:	c1 e5 0a             	shl    ebp,0xa
c001c412:	01 e8                	add    eax,ebp
c001c414:	89 03                	mov    DWORD PTR [ebx],eax
c001c416:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c418:	68 00 04 00 00       	push   0x400
c001c41d:	6a 00                	push   0x0
c001c41f:	50                   	push   eax
c001c420:	e8 cb 40 fe ff       	call   c00004f0 <memset>
c001c425:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c42b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c42f:	83 c4 1c             	add    esp,0x1c
c001c432:	01 e8                	add    eax,ebp
c001c434:	89 03                	mov    DWORD PTR [ebx],eax
c001c436:	c1 e6 08             	shl    esi,0x8
c001c439:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c440:	81 c6 00 80 00 00    	add    esi,0x8000
c001c446:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c44c:	01 f0                	add    eax,esi
c001c44e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c451:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c454:	68 00 01 00 00       	push   0x100
c001c459:	6a 00                	push   0x0
c001c45b:	50                   	push   eax
c001c45c:	e8 8f 40 fe ff       	call   c00004f0 <memset>
c001c461:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c467:	31 d2                	xor    edx,edx
c001c469:	01 f0                	add    eax,esi
c001c46b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c46e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c475:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001c47b:	01 ee                	add    esi,ebp
c001c47d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c481:	83 c4 10             	add    esp,0x10
c001c484:	c1 e5 0d             	shl    ebp,0xd
c001c487:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001c48d:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001c493:	83 c6 20             	add    esi,0x20
c001c496:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c49a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c4a0:	01 e8                	add    eax,ebp
c001c4a2:	01 d0                	add    eax,edx
c001c4a4:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c4a7:	52                   	push   edx
c001c4a8:	68 00 01 00 00       	push   0x100
c001c4ad:	6a 00                	push   0x0
c001c4af:	50                   	push   eax
c001c4b0:	e8 3b 40 fe ff       	call   c00004f0 <memset>
c001c4b5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c4bb:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001c4c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4c6:	83 c4 10             	add    esp,0x10
c001c4c9:	01 e8                	add    eax,ebp
c001c4cb:	01 d0                	add    eax,edx
c001c4cd:	81 c2 00 01 00 00    	add    edx,0x100
c001c4d3:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c4d6:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001c4dc:	75 af                	jne    c001c48d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001c4de:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c4e5:	50                   	push   eax
c001c4e6:	50                   	push   eax
c001c4e7:	53                   	push   ebx
c001c4e8:	57                   	push   edi
c001c4e9:	e8 b4 fe ff ff       	call   c001c3a2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c4ee:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c4f5:	83 c4 2c             	add    esp,0x2c
c001c4f8:	5b                   	pop    ebx
c001c4f9:	5e                   	pop    esi
c001c4fa:	5f                   	pop    edi
c001c4fb:	5d                   	pop    ebp
c001c4fc:	c3                   	ret    
c001c4fd:	90                   	nop

c001c4fe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c4fe:	55                   	push   ebp
c001c4ff:	57                   	push   edi
c001c500:	56                   	push   esi
c001c501:	53                   	push   ebx
c001c502:	31 db                	xor    ebx,ebx
c001c504:	83 ec 0c             	sub    esp,0xc
c001c507:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c50b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c50f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c512:	f7 c7 01 00 00 00    	test   edi,0x1
c001c518:	74 7a                	je     c001c594 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c51a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c51e:	89 d8                	mov    eax,ebx
c001c520:	c1 e0 07             	shl    eax,0x7
c001c523:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c52a:	55                   	push   ebp
c001c52b:	56                   	push   esi
c001c52c:	e8 29 fe ff ff       	call   c001c35a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c531:	5a                   	pop    edx
c001c532:	59                   	pop    ecx
c001c533:	83 f8 01             	cmp    eax,0x1
c001c536:	75 21                	jne    c001c559 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c538:	50                   	push   eax
c001c539:	53                   	push   ebx
c001c53a:	55                   	push   ebp
c001c53b:	56                   	push   esi
c001c53c:	e8 ab fe ff ff       	call   c001c3ec <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c541:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c548:	e8 86 b5 fe ff       	call   c0007ad3 <malloc>
c001c54d:	89 04 24             	mov    DWORD PTR [esp],eax
c001c550:	89 c5                	mov    ebp,eax
c001c552:	e8 c1 10 00 00       	call   c001d618 <SATA::SATA()>
c001c557:	eb 24                	jmp    c001c57d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c559:	83 f8 04             	cmp    eax,0x4
c001c55c:	75 36                	jne    c001c594 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c55e:	51                   	push   ecx
c001c55f:	53                   	push   ebx
c001c560:	55                   	push   ebp
c001c561:	56                   	push   esi
c001c562:	e8 85 fe ff ff       	call   c001c3ec <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c567:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c56e:	e8 60 b5 fe ff       	call   c0007ad3 <malloc>
c001c573:	89 04 24             	mov    DWORD PTR [esp],eax
c001c576:	89 c5                	mov    ebp,eax
c001c578:	e8 f5 17 00 00       	call   c001dd72 <SATAPI::SATAPI()>
c001c57d:	58                   	pop    eax
c001c57e:	5a                   	pop    edx
c001c57f:	55                   	push   ebp
c001c580:	56                   	push   esi
c001c581:	e8 72 00 ff ff       	call   c000c5f8 <Device::addChild(Device*)>
c001c586:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c589:	56                   	push   esi
c001c58a:	6a 00                	push   0x0
c001c58c:	53                   	push   ebx
c001c58d:	55                   	push   ebp
c001c58e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c591:	83 c4 20             	add    esp,0x20
c001c594:	d1 ef                	shr    edi,1
c001c596:	43                   	inc    ebx
c001c597:	83 fb 20             	cmp    ebx,0x20
c001c59a:	0f 85 72 ff ff ff    	jne    c001c512 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c5a0:	83 c4 0c             	add    esp,0xc
c001c5a3:	5b                   	pop    ebx
c001c5a4:	5e                   	pop    esi
c001c5a5:	5f                   	pop    edi
c001c5a6:	5d                   	pop    ebp
c001c5a7:	c3                   	ret    

c001c5a8 <SATABus::open(int, int, void*)>:
c001c5a8:	83 ec 14             	sub    esp,0x14
c001c5ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5af:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c5b5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c5bb:	52                   	push   edx
c001c5bc:	50                   	push   eax
c001c5bd:	e8 3c ff ff ff       	call   c001c4fe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c5c2:	31 c0                	xor    eax,eax
c001c5c4:	83 c4 1c             	add    esp,0x1c
c001c5c7:	c3                   	ret    

c001c5c8 <ATA::close(int, int, void*)>:
c001c5c8:	83 ec 0c             	sub    esp,0xc
c001c5cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5cf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c5d5:	85 c0                	test   eax,eax
c001c5d7:	74 0c                	je     c001c5e5 <ATA::close(int, int, void*)+0x1d>
c001c5d9:	8b 10                	mov    edx,DWORD PTR [eax]
c001c5db:	83 ec 0c             	sub    esp,0xc
c001c5de:	50                   	push   eax
c001c5df:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c5e2:	83 c4 10             	add    esp,0x10
c001c5e5:	31 c0                	xor    eax,eax
c001c5e7:	83 c4 0c             	add    esp,0xc
c001c5ea:	c3                   	ret    
c001c5eb:	90                   	nop

c001c5ec <ATA::powerSaving(PowerSavingLevel)>:
c001c5ec:	c3                   	ret    
c001c5ed:	90                   	nop

c001c5ee <ATA::ATA()>:
c001c5ee:	83 ec 0c             	sub    esp,0xc
c001c5f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f5:	83 ec 04             	sub    esp,0x4
c001c5f8:	68 00 02 00 00       	push   0x200
c001c5fd:	68 59 2c 02 c0       	push   0xc0022c59
c001c602:	50                   	push   eax
c001c603:	e8 be 03 ff ff       	call   c000c9c6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c608:	83 c4 10             	add    esp,0x10
c001c60b:	ba cc 2b 02 c0       	mov    edx,0xc0022bcc
c001c610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c614:	89 10                	mov    DWORD PTR [eax],edx
c001c616:	90                   	nop
c001c617:	83 c4 0c             	add    esp,0xc
c001c61a:	c3                   	ret    
c001c61b:	90                   	nop

c001c61c <ATA::flush(bool)>:
c001c61c:	53                   	push   ebx
c001c61d:	83 ec 08             	sub    esp,0x8
c001c620:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c625:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c629:	83 f8 01             	cmp    eax,0x1
c001c62c:	19 c0                	sbb    eax,eax
c001c62e:	83 e0 fd             	and    eax,0xfffffffd
c001c631:	05 ea 00 00 00       	add    eax,0xea
c001c636:	50                   	push   eax
c001c637:	6a 07                	push   0x7
c001c639:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c640:	50                   	push   eax
c001c641:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c647:	e8 18 f1 ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c64c:	83 c4 0c             	add    esp,0xc
c001c64f:	6a 00                	push   0x0
c001c651:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c658:	50                   	push   eax
c001c659:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c65f:	e8 e4 fb ff ff       	call   c001c248 <IDE::polling(unsigned char, unsigned int)>
c001c664:	83 c4 18             	add    esp,0x18
c001c667:	5b                   	pop    ebx
c001c668:	c3                   	ret    
c001c669:	90                   	nop

c001c66a <ATA::readyForCommand()>:
c001c66a:	56                   	push   esi
c001c66b:	53                   	push   ebx
c001c66c:	53                   	push   ebx
c001c66d:	31 db                	xor    ebx,ebx
c001c66f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c673:	51                   	push   ecx
c001c674:	6a 0c                	push   0xc
c001c676:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c67d:	50                   	push   eax
c001c67e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c684:	e8 9b f1 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001c689:	83 c4 10             	add    esp,0x10
c001c68c:	a8 88                	test   al,0x88
c001c68e:	74 1f                	je     c001c6af <ATA::readyForCommand()+0x45>
c001c690:	43                   	inc    ebx
c001c691:	83 fb 63             	cmp    ebx,0x63
c001c694:	7e dd                	jle    c001c673 <ATA::readyForCommand()+0x9>
c001c696:	83 ec 0c             	sub    esp,0xc
c001c699:	6a 0a                	push   0xa
c001c69b:	e8 f0 96 ff ff       	call   c0015d90 <milliTenthSleep(unsigned int)>
c001c6a0:	83 c4 10             	add    esp,0x10
c001c6a3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c6a9:	75 c8                	jne    c001c673 <ATA::readyForCommand()+0x9>
c001c6ab:	31 c0                	xor    eax,eax
c001c6ad:	eb 02                	jmp    c001c6b1 <ATA::readyForCommand()+0x47>
c001c6af:	b0 01                	mov    al,0x1
c001c6b1:	5a                   	pop    edx
c001c6b2:	5b                   	pop    ebx
c001c6b3:	5e                   	pop    esi
c001c6b4:	c3                   	ret    
c001c6b5:	90                   	nop

c001c6b6 <ATA::access(unsigned long long, int, void*, bool)>:
c001c6b6:	55                   	push   ebp
c001c6b7:	57                   	push   edi
c001c6b8:	56                   	push   esi
c001c6b9:	53                   	push   ebx
c001c6ba:	83 ec 2c             	sub    esp,0x2c
c001c6bd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c6c1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c6c5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c6c9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c6cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6d1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c6d5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c6d9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c6df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c6e3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c6e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c6ed:	c1 e0 06             	shl    eax,0x6
c001c6f0:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c6f8:	74 5b                	je     c001c755 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001c6fa:	89 fa                	mov    edx,edi
c001c6fc:	89 f0                	mov    eax,esi
c001c6fe:	c1 ea 1c             	shr    edx,0x1c
c001c701:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001c705:	89 d1                	mov    ecx,edx
c001c707:	09 c1                	or     ecx,eax
c001c709:	74 25                	je     c001c730 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c70b:	31 ed                	xor    ebp,ebp
c001c70d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c714:	89 fa                	mov    edx,edi
c001c716:	89 f0                	mov    eax,esi
c001c718:	0f ad d0             	shrd   eax,edx,cl
c001c71b:	d3 ea                	shr    edx,cl
c001c71d:	f6 c1 20             	test   cl,0x20
c001c720:	74 02                	je     c001c724 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c722:	89 d0                	mov    eax,edx
c001c724:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c728:	45                   	inc    ebp
c001c729:	83 fd 06             	cmp    ebp,0x6
c001c72c:	75 df                	jne    c001c70d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c72e:	eb 71                	jmp    c001c7a1 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001c730:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c735:	89 f0                	mov    eax,esi
c001c737:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c73e:	0f ac f8 10          	shrd   eax,edi,0x10
c001c742:	bf 01 00 00 00       	mov    edi,0x1
c001c747:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c74b:	c1 ee 18             	shr    esi,0x18
c001c74e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c753:	eb 53                	jmp    c001c7a8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c755:	6a 00                	push   0x0
c001c757:	6a 3f                	push   0x3f
c001c759:	57                   	push   edi
c001c75a:	56                   	push   esi
c001c75b:	e8 d0 2a 00 00       	call   c001f230 <__umoddi3>
c001c760:	83 c4 10             	add    esp,0x10
c001c763:	40                   	inc    eax
c001c764:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c768:	6a 00                	push   0x0
c001c76a:	68 f0 03 00 00       	push   0x3f0
c001c76f:	57                   	push   edi
c001c770:	56                   	push   esi
c001c771:	e8 ba 29 00 00       	call   c001f130 <__udivdi3>
c001c776:	83 c4 10             	add    esp,0x10
c001c779:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c77e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c785:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c78a:	6a 00                	push   0x0
c001c78c:	6a 3f                	push   0x3f
c001c78e:	57                   	push   edi
c001c78f:	31 ff                	xor    edi,edi
c001c791:	56                   	push   esi
c001c792:	e8 99 29 00 00       	call   c001f130 <__udivdi3>
c001c797:	83 c4 10             	add    esp,0x10
c001c79a:	83 e0 0f             	and    eax,0xf
c001c79d:	89 c6                	mov    esi,eax
c001c79f:	eb 07                	jmp    c001c7a8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c7a1:	31 f6                	xor    esi,esi
c001c7a3:	bf 02 00 00 00       	mov    edi,0x2
c001c7a8:	50                   	push   eax
c001c7a9:	6a 00                	push   0x0
c001c7ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7b2:	50                   	push   eax
c001c7b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c7b7:	e8 b6 f1 ff ff       	call   c001b972 <IDE::enableIRQs(unsigned char, bool)>
c001c7bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7bf:	e8 a6 fe ff ff       	call   c001c66a <ATA::readyForCommand()>
c001c7c4:	83 c4 10             	add    esp,0x10
c001c7c7:	84 c0                	test   al,al
c001c7c9:	75 0a                	jne    c001c7d5 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001c7cb:	be 01 00 00 00       	mov    esi,0x1
c001c7d0:	e9 9b 02 00 00       	jmp    c001ca70 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c7d5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c7db:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c7e1:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c7e8:	c1 e0 04             	shl    eax,0x4
c001c7eb:	09 c6                	or     esi,eax
c001c7ed:	f7 c7 03 00 00 00    	test   edi,0x3
c001c7f3:	75 05                	jne    c001c7fa <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001c7f5:	83 ce a0             	or     esi,0xffffffa0
c001c7f8:	eb 03                	jmp    c001c7fd <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c7fa:	83 ce e0             	or     esi,0xffffffe0
c001c7fd:	89 f0                	mov    eax,esi
c001c7ff:	0f b6 f0             	movzx  esi,al
c001c802:	56                   	push   esi
c001c803:	6a 06                	push   0x6
c001c805:	51                   	push   ecx
c001c806:	52                   	push   edx
c001c807:	e8 58 ef ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c80c:	83 c4 10             	add    esp,0x10
c001c80f:	6a 00                	push   0x0
c001c811:	6a 01                	push   0x1
c001c813:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c81a:	50                   	push   eax
c001c81b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c821:	e8 3e ef ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c826:	89 f8                	mov    eax,edi
c001c828:	83 c4 10             	add    esp,0x10
c001c82b:	0f b6 f0             	movzx  esi,al
c001c82e:	83 fe 02             	cmp    esi,0x2
c001c831:	75 6e                	jne    c001c8a1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c833:	6a 00                	push   0x0
c001c835:	6a 08                	push   0x8
c001c837:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c83e:	50                   	push   eax
c001c83f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c845:	e8 1a ef ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c84a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c84f:	50                   	push   eax
c001c850:	6a 09                	push   0x9
c001c852:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c859:	50                   	push   eax
c001c85a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c860:	e8 ff ee ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c865:	83 c4 20             	add    esp,0x20
c001c868:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c86d:	50                   	push   eax
c001c86e:	6a 0a                	push   0xa
c001c870:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c877:	50                   	push   eax
c001c878:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c87e:	e8 e1 ee ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c883:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c888:	50                   	push   eax
c001c889:	6a 0b                	push   0xb
c001c88b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c892:	50                   	push   eax
c001c893:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c899:	e8 c6 ee ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c89e:	83 c4 20             	add    esp,0x20
c001c8a1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c8a6:	50                   	push   eax
c001c8a7:	6a 02                	push   0x2
c001c8a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8b0:	50                   	push   eax
c001c8b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8b7:	e8 a8 ee ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8bc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c8c1:	50                   	push   eax
c001c8c2:	6a 03                	push   0x3
c001c8c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8cb:	50                   	push   eax
c001c8cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8d2:	e8 8d ee ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8d7:	83 c4 20             	add    esp,0x20
c001c8da:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c8df:	50                   	push   eax
c001c8e0:	6a 04                	push   0x4
c001c8e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8e9:	50                   	push   eax
c001c8ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8f0:	e8 6f ee ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c8fa:	50                   	push   eax
c001c8fb:	6a 05                	push   0x5
c001c8fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c904:	50                   	push   eax
c001c905:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c90b:	e8 54 ee ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c910:	83 c4 20             	add    esp,0x20
c001c913:	83 fe 02             	cmp    esi,0x2
c001c916:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001c91b:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001c920:	85 c9                	test   ecx,ecx
c001c922:	74 07                	je     c001c92b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c924:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c929:	75 47                	jne    c001c972 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001c92b:	89 f8                	mov    eax,edi
c001c92d:	0f b6 f8             	movzx  edi,al
c001c930:	31 c0                	xor    eax,eax
c001c932:	83 ff 02             	cmp    edi,0x2
c001c935:	0f 95 c0             	setne  al
c001c938:	89 c6                	mov    esi,eax
c001c93a:	74 0c                	je     c001c948 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001c93c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c941:	b8 30 00 00 00       	mov    eax,0x30
c001c946:	75 2f                	jne    c001c977 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c948:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c94c:	83 f2 01             	xor    edx,0x1
c001c94f:	85 c9                	test   ecx,ecx
c001c951:	74 09                	je     c001c95c <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001c953:	84 d2                	test   dl,dl
c001c955:	b8 24 00 00 00       	mov    eax,0x24
c001c95a:	75 1b                	jne    c001c977 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c95c:	85 f6                	test   esi,esi
c001c95e:	0f 84 67 fe ff ff    	je     c001c7cb <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c964:	84 d2                	test   dl,dl
c001c966:	b8 20 00 00 00       	mov    eax,0x20
c001c96b:	75 0a                	jne    c001c977 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c96d:	e9 59 fe ff ff       	jmp    c001c7cb <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c972:	b8 34 00 00 00       	mov    eax,0x34
c001c977:	50                   	push   eax
c001c978:	6a 07                	push   0x7
c001c97a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c981:	50                   	push   eax
c001c982:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c988:	e8 d7 ed ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c98d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c991:	83 c4 10             	add    esp,0x10
c001c994:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001c999:	85 f6                	test   esi,esi
c001c99b:	0f 84 b5 00 00 00    	je     c001ca56 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001c9a1:	50                   	push   eax
c001c9a2:	6a 01                	push   0x1
c001c9a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9ab:	50                   	push   eax
c001c9ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9b2:	e8 91 f8 ff ff       	call   c001c248 <IDE::polling(unsigned char, unsigned int)>
c001c9b7:	83 c4 10             	add    esp,0x10
c001c9ba:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c9c0:	0f b6 c0             	movzx  eax,al
c001c9c3:	85 c0                	test   eax,eax
c001c9c5:	74 1f                	je     c001c9e6 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001c9c7:	50                   	push   eax
c001c9c8:	89 c6                	mov    esi,eax
c001c9ca:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c9d1:	0f b6 d2             	movzx  edx,dl
c001c9d4:	50                   	push   eax
c001c9d5:	52                   	push   edx
c001c9d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9dc:	e8 ad f7 ff ff       	call   c001c18e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c9e1:	e9 87 00 00 00       	jmp    c001ca6d <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001c9e6:	85 ed                	test   ebp,ebp
c001c9e8:	74 3b                	je     c001ca25 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001c9ea:	31 ff                	xor    edi,edi
c001c9ec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c9f0:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001c9f4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001c9f9:	50                   	push   eax
c001c9fa:	50                   	push   eax
c001c9fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca02:	50                   	push   eax
c001ca03:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca09:	e8 44 ed ff ff       	call   c001b752 <IDE::getBase(unsigned char)>
c001ca0e:	89 c2                	mov    edx,eax
c001ca10:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001ca15:	66 ef                	out    dx,ax
c001ca17:	47                   	inc    edi
c001ca18:	83 c4 10             	add    esp,0x10
c001ca1b:	81 ff 00 01 00 00    	cmp    edi,0x100
c001ca21:	75 c9                	jne    c001c9ec <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001ca23:	eb 23                	jmp    c001ca48 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001ca25:	51                   	push   ecx
c001ca26:	0f b6 d2             	movzx  edx,dl
c001ca29:	51                   	push   ecx
c001ca2a:	52                   	push   edx
c001ca2b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca31:	e8 1c ed ff ff       	call   c001b752 <IDE::getBase(unsigned char)>
c001ca36:	b9 00 01 00 00       	mov    ecx,0x100
c001ca3b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ca3f:	89 c2                	mov    edx,eax
c001ca41:	fc                   	cld    
c001ca42:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ca45:	83 c4 10             	add    esp,0x10
c001ca48:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ca50:	4e                   	dec    esi
c001ca51:	e9 43 ff ff ff       	jmp    c001c999 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001ca56:	31 f6                	xor    esi,esi
c001ca58:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca5d:	74 11                	je     c001ca70 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001ca5f:	50                   	push   eax
c001ca60:	50                   	push   eax
c001ca61:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001ca66:	50                   	push   eax
c001ca67:	53                   	push   ebx
c001ca68:	e8 af fb ff ff       	call   c001c61c <ATA::flush(bool)>
c001ca6d:	83 c4 10             	add    esp,0x10
c001ca70:	83 c4 2c             	add    esp,0x2c
c001ca73:	89 f0                	mov    eax,esi
c001ca75:	5b                   	pop    ebx
c001ca76:	5e                   	pop    esi
c001ca77:	5f                   	pop    edi
c001ca78:	5d                   	pop    ebp
c001ca79:	c3                   	ret    

c001ca7a <ATA::detectCHS()>:
c001ca7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca7e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ca84:	c1 e0 06             	shl    eax,0x6
c001ca87:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ca8d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ca97:	c7 44 24 04 b0 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022bb0
c001ca9f:	e9 cd 46 ff ff       	jmp    c0011171 <KePanic(char const*)>

c001caa4 <ATA::open(int, int, void*)>:
c001caa4:	53                   	push   ebx
c001caa5:	83 ec 08             	sub    esp,0x8
c001caa8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001caac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cab0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cab4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001caba:	c1 e0 06             	shl    eax,0x6
c001cabd:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cac3:	01 d0                	add    eax,edx
c001cac5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cacc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cad2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cad9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cae3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001caea:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001caf0:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001caf7:	75 0c                	jne    c001cb05 <ATA::open(int, int, void*)+0x61>
c001caf9:	83 ec 0c             	sub    esp,0xc
c001cafc:	53                   	push   ebx
c001cafd:	e8 78 ff ff ff       	call   c001ca7a <ATA::detectCHS()>
c001cb02:	83 c4 10             	add    esp,0x10
c001cb05:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cb0b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cb11:	c1 e0 06             	shl    eax,0x6
c001cb14:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cb1b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cb25:	d1 e8                	shr    eax,1
c001cb27:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cb2d:	6a 04                	push   0x4
c001cb2f:	6a 0c                	push   0xc
c001cb31:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb38:	50                   	push   eax
c001cb39:	52                   	push   edx
c001cb3a:	e8 25 ec ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb3f:	90                   	nop
c001cb40:	90                   	nop
c001cb41:	6a 00                	push   0x0
c001cb43:	6a 0c                	push   0xc
c001cb45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb4c:	50                   	push   eax
c001cb4d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb53:	e8 0c ec ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb58:	83 c4 14             	add    esp,0x14
c001cb5b:	53                   	push   ebx
c001cb5c:	e8 cd fe fe ff       	call   c000ca2e <PhysicalDisk::startCache()>
c001cb61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb64:	e8 11 11 ff ff       	call   c000dc7a <createPartitionsForDisk(PhysicalDisk*)>
c001cb69:	83 c4 18             	add    esp,0x18
c001cb6c:	31 c0                	xor    eax,eax
c001cb6e:	5b                   	pop    ebx
c001cb6f:	c3                   	ret    

c001cb70 <combineCharAndColour(char, unsigned char)>:
c001cb70:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb75:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cb7b:	c1 e0 08             	shl    eax,0x8
c001cb7e:	09 d0                	or     eax,edx
c001cb80:	c3                   	ret    

c001cb81 <combineColours(unsigned char, unsigned char)>:
c001cb81:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb86:	c1 e0 04             	shl    eax,0x4
c001cb89:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cb8d:	c3                   	ret    

c001cb8e <ATA::read(unsigned long long, int, void*)>:
c001cb8e:	55                   	push   ebp
c001cb8f:	57                   	push   edi
c001cb90:	56                   	push   esi
c001cb91:	be 04 00 00 00       	mov    esi,0x4
c001cb96:	53                   	push   ebx
c001cb97:	83 ec 0c             	sub    esp,0xc
c001cb9a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cb9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cba2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cba6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cbaa:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cbad:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cbb3:	0f 87 a1 01 00 00    	ja     c001cd5a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cbb9:	85 c9                	test   ecx,ecx
c001cbbb:	be 06 00 00 00       	mov    esi,0x6
c001cbc0:	0f 84 94 01 00 00    	je     c001cd5a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cbc6:	55                   	push   ebp
c001cbc7:	55                   	push   ebp
c001cbc8:	6a 00                	push   0x0
c001cbca:	51                   	push   ecx
c001cbcb:	53                   	push   ebx
c001cbcc:	52                   	push   edx
c001cbcd:	50                   	push   eax
c001cbce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbd2:	e8 df fa ff ff       	call   c001c6b6 <ATA::access(unsigned long long, int, void*, bool)>
c001cbd7:	83 c4 20             	add    esp,0x20
c001cbda:	85 c0                	test   eax,eax
c001cbdc:	89 c6                	mov    esi,eax
c001cbde:	0f 85 71 01 00 00    	jne    c001cd55 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cbe4:	50                   	push   eax
c001cbe5:	bd 10 27 00 00       	mov    ebp,0x2710
c001cbea:	50                   	push   eax
c001cbeb:	03 1d 54 ae 02 c0    	add    ebx,DWORD PTR ds:0xc002ae54
c001cbf1:	6a 0f                	push   0xf
c001cbf3:	6a 00                	push   0x0
c001cbf5:	89 da                	mov    edx,ebx
c001cbf7:	89 1d 54 ae 02 c0    	mov    DWORD PTR ds:0xc002ae54,ebx
c001cbfd:	e8 7f ff ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001cc02:	59                   	pop    ecx
c001cc03:	b9 0a 00 00 00       	mov    ecx,0xa
c001cc08:	5b                   	pop    ebx
c001cc09:	0f b6 d8             	movzx  ebx,al
c001cc0c:	89 d0                	mov    eax,edx
c001cc0e:	53                   	push   ebx
c001cc0f:	99                   	cdq    
c001cc10:	f7 fd                	idiv   ebp
c001cc12:	99                   	cdq    
c001cc13:	f7 f9                	idiv   ecx
c001cc15:	83 c2 30             	add    edx,0x30
c001cc18:	0f b6 d2             	movzx  edx,dl
c001cc1b:	52                   	push   edx
c001cc1c:	e8 4f ff ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001cc21:	5f                   	pop    edi
c001cc22:	bf e8 03 00 00       	mov    edi,0x3e8
c001cc27:	5a                   	pop    edx
c001cc28:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cc2e:	53                   	push   ebx
c001cc2f:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc34:	99                   	cdq    
c001cc35:	f7 ff                	idiv   edi
c001cc37:	99                   	cdq    
c001cc38:	f7 f9                	idiv   ecx
c001cc3a:	8d 42 30             	lea    eax,[edx+0x30]
c001cc3d:	0f b6 c0             	movzx  eax,al
c001cc40:	50                   	push   eax
c001cc41:	e8 2a ff ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001cc46:	5f                   	pop    edi
c001cc47:	bf 64 00 00 00       	mov    edi,0x64
c001cc4c:	5a                   	pop    edx
c001cc4d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cc53:	53                   	push   ebx
c001cc54:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc59:	99                   	cdq    
c001cc5a:	f7 ff                	idiv   edi
c001cc5c:	99                   	cdq    
c001cc5d:	f7 f9                	idiv   ecx
c001cc5f:	8d 42 30             	lea    eax,[edx+0x30]
c001cc62:	0f b6 c0             	movzx  eax,al
c001cc65:	50                   	push   eax
c001cc66:	e8 05 ff ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001cc6b:	5a                   	pop    edx
c001cc6c:	5a                   	pop    edx
c001cc6d:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cc73:	53                   	push   ebx
c001cc74:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc79:	99                   	cdq    
c001cc7a:	f7 f9                	idiv   ecx
c001cc7c:	99                   	cdq    
c001cc7d:	f7 f9                	idiv   ecx
c001cc7f:	8d 42 30             	lea    eax,[edx+0x30]
c001cc82:	0f b6 c0             	movzx  eax,al
c001cc85:	50                   	push   eax
c001cc86:	e8 e5 fe ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001cc8b:	5a                   	pop    edx
c001cc8c:	5a                   	pop    edx
c001cc8d:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cc93:	53                   	push   ebx
c001cc94:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc99:	99                   	cdq    
c001cc9a:	f7 f9                	idiv   ecx
c001cc9c:	83 c2 30             	add    edx,0x30
c001cc9f:	0f b6 d2             	movzx  edx,dl
c001cca2:	52                   	push   edx
c001cca3:	e8 c8 fe ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001cca8:	5a                   	pop    edx
c001cca9:	5a                   	pop    edx
c001ccaa:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ccb0:	53                   	push   ebx
c001ccb1:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ccb6:	99                   	cdq    
c001ccb7:	f7 fd                	idiv   ebp
c001ccb9:	99                   	cdq    
c001ccba:	f7 f9                	idiv   ecx
c001ccbc:	8d 42 30             	lea    eax,[edx+0x30]
c001ccbf:	0f b6 c0             	movzx  eax,al
c001ccc2:	50                   	push   eax
c001ccc3:	e8 a8 fe ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001ccc8:	5d                   	pop    ebp
c001ccc9:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ccce:	5a                   	pop    edx
c001cccf:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ccd5:	53                   	push   ebx
c001ccd6:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ccdb:	99                   	cdq    
c001ccdc:	f7 fd                	idiv   ebp
c001ccde:	99                   	cdq    
c001ccdf:	f7 f9                	idiv   ecx
c001cce1:	8d 42 30             	lea    eax,[edx+0x30]
c001cce4:	0f b6 c0             	movzx  eax,al
c001cce7:	50                   	push   eax
c001cce8:	e8 83 fe ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001cced:	5d                   	pop    ebp
c001ccee:	5a                   	pop    edx
c001ccef:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ccf5:	53                   	push   ebx
c001ccf6:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ccfb:	99                   	cdq    
c001ccfc:	f7 ff                	idiv   edi
c001ccfe:	99                   	cdq    
c001ccff:	f7 f9                	idiv   ecx
c001cd01:	8d 42 30             	lea    eax,[edx+0x30]
c001cd04:	0f b6 c0             	movzx  eax,al
c001cd07:	50                   	push   eax
c001cd08:	e8 63 fe ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001cd0d:	5f                   	pop    edi
c001cd0e:	5d                   	pop    ebp
c001cd0f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cd15:	53                   	push   ebx
c001cd16:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cd1b:	99                   	cdq    
c001cd1c:	f7 f9                	idiv   ecx
c001cd1e:	99                   	cdq    
c001cd1f:	f7 f9                	idiv   ecx
c001cd21:	8d 42 30             	lea    eax,[edx+0x30]
c001cd24:	0f b6 c0             	movzx  eax,al
c001cd27:	50                   	push   eax
c001cd28:	e8 43 fe ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001cd2d:	5a                   	pop    edx
c001cd2e:	5f                   	pop    edi
c001cd2f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cd35:	53                   	push   ebx
c001cd36:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cd3b:	99                   	cdq    
c001cd3c:	f7 f9                	idiv   ecx
c001cd3e:	83 c2 30             	add    edx,0x30
c001cd41:	0f b6 d2             	movzx  edx,dl
c001cd44:	52                   	push   edx
c001cd45:	e8 26 fe ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001cd4a:	83 c4 10             	add    esp,0x10
c001cd4d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cd53:	eb 05                	jmp    c001cd5a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd55:	be 01 00 00 00       	mov    esi,0x1
c001cd5a:	83 c4 0c             	add    esp,0xc
c001cd5d:	89 f0                	mov    eax,esi
c001cd5f:	5b                   	pop    ebx
c001cd60:	5e                   	pop    esi
c001cd61:	5f                   	pop    edi
c001cd62:	5d                   	pop    ebp
c001cd63:	c3                   	ret    

c001cd64 <ATA::write(unsigned long long, int, void*)>:
c001cd64:	55                   	push   ebp
c001cd65:	57                   	push   edi
c001cd66:	56                   	push   esi
c001cd67:	be 04 00 00 00       	mov    esi,0x4
c001cd6c:	53                   	push   ebx
c001cd6d:	83 ec 0c             	sub    esp,0xc
c001cd70:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd74:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd78:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd7c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd80:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd83:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd89:	0f 87 9c 01 00 00    	ja     c001cf2b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cd8f:	85 c9                	test   ecx,ecx
c001cd91:	be 06 00 00 00       	mov    esi,0x6
c001cd96:	0f 84 8f 01 00 00    	je     c001cf2b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cd9c:	55                   	push   ebp
c001cd9d:	55                   	push   ebp
c001cd9e:	6a 01                	push   0x1
c001cda0:	51                   	push   ecx
c001cda1:	53                   	push   ebx
c001cda2:	52                   	push   edx
c001cda3:	50                   	push   eax
c001cda4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cda8:	e8 09 f9 ff ff       	call   c001c6b6 <ATA::access(unsigned long long, int, void*, bool)>
c001cdad:	83 c4 20             	add    esp,0x20
c001cdb0:	85 c0                	test   eax,eax
c001cdb2:	89 c6                	mov    esi,eax
c001cdb4:	0f 85 6c 01 00 00    	jne    c001cf26 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cdba:	50                   	push   eax
c001cdbb:	bd 10 27 00 00       	mov    ebp,0x2710
c001cdc0:	50                   	push   eax
c001cdc1:	6a 0f                	push   0xf
c001cdc3:	6a 00                	push   0x0
c001cdc5:	01 1d 50 ae 02 c0    	add    DWORD PTR ds:0xc002ae50,ebx
c001cdcb:	e8 b1 fd ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001cdd0:	5a                   	pop    edx
c001cdd1:	59                   	pop    ecx
c001cdd2:	b9 0a 00 00 00       	mov    ecx,0xa
c001cdd7:	0f b6 d8             	movzx  ebx,al
c001cdda:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cddf:	53                   	push   ebx
c001cde0:	99                   	cdq    
c001cde1:	f7 fd                	idiv   ebp
c001cde3:	99                   	cdq    
c001cde4:	f7 f9                	idiv   ecx
c001cde6:	8d 42 30             	lea    eax,[edx+0x30]
c001cde9:	0f b6 c0             	movzx  eax,al
c001cdec:	50                   	push   eax
c001cded:	e8 7e fd ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001cdf2:	5f                   	pop    edi
c001cdf3:	bf e8 03 00 00       	mov    edi,0x3e8
c001cdf8:	5a                   	pop    edx
c001cdf9:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cdff:	53                   	push   ebx
c001ce00:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce05:	99                   	cdq    
c001ce06:	f7 ff                	idiv   edi
c001ce08:	99                   	cdq    
c001ce09:	f7 f9                	idiv   ecx
c001ce0b:	8d 42 30             	lea    eax,[edx+0x30]
c001ce0e:	0f b6 c0             	movzx  eax,al
c001ce11:	50                   	push   eax
c001ce12:	e8 59 fd ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001ce17:	5f                   	pop    edi
c001ce18:	bf 64 00 00 00       	mov    edi,0x64
c001ce1d:	5a                   	pop    edx
c001ce1e:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce24:	53                   	push   ebx
c001ce25:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce2a:	99                   	cdq    
c001ce2b:	f7 ff                	idiv   edi
c001ce2d:	99                   	cdq    
c001ce2e:	f7 f9                	idiv   ecx
c001ce30:	8d 42 30             	lea    eax,[edx+0x30]
c001ce33:	0f b6 c0             	movzx  eax,al
c001ce36:	50                   	push   eax
c001ce37:	e8 34 fd ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001ce3c:	5a                   	pop    edx
c001ce3d:	5a                   	pop    edx
c001ce3e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce44:	53                   	push   ebx
c001ce45:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce4a:	99                   	cdq    
c001ce4b:	f7 f9                	idiv   ecx
c001ce4d:	99                   	cdq    
c001ce4e:	f7 f9                	idiv   ecx
c001ce50:	8d 42 30             	lea    eax,[edx+0x30]
c001ce53:	0f b6 c0             	movzx  eax,al
c001ce56:	50                   	push   eax
c001ce57:	e8 14 fd ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001ce5c:	5a                   	pop    edx
c001ce5d:	5a                   	pop    edx
c001ce5e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce64:	53                   	push   ebx
c001ce65:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce6a:	99                   	cdq    
c001ce6b:	f7 f9                	idiv   ecx
c001ce6d:	83 c2 30             	add    edx,0x30
c001ce70:	0f b6 d2             	movzx  edx,dl
c001ce73:	52                   	push   edx
c001ce74:	e8 f7 fc ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001ce79:	5a                   	pop    edx
c001ce7a:	5a                   	pop    edx
c001ce7b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce81:	53                   	push   ebx
c001ce82:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ce87:	99                   	cdq    
c001ce88:	f7 fd                	idiv   ebp
c001ce8a:	99                   	cdq    
c001ce8b:	f7 f9                	idiv   ecx
c001ce8d:	8d 42 30             	lea    eax,[edx+0x30]
c001ce90:	0f b6 c0             	movzx  eax,al
c001ce93:	50                   	push   eax
c001ce94:	e8 d7 fc ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001ce99:	5d                   	pop    ebp
c001ce9a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce9f:	5a                   	pop    edx
c001cea0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cea6:	53                   	push   ebx
c001cea7:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ceac:	99                   	cdq    
c001cead:	f7 fd                	idiv   ebp
c001ceaf:	99                   	cdq    
c001ceb0:	f7 f9                	idiv   ecx
c001ceb2:	8d 42 30             	lea    eax,[edx+0x30]
c001ceb5:	0f b6 c0             	movzx  eax,al
c001ceb8:	50                   	push   eax
c001ceb9:	e8 b2 fc ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001cebe:	5d                   	pop    ebp
c001cebf:	5a                   	pop    edx
c001cec0:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cec6:	53                   	push   ebx
c001cec7:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cecc:	99                   	cdq    
c001cecd:	f7 ff                	idiv   edi
c001cecf:	99                   	cdq    
c001ced0:	f7 f9                	idiv   ecx
c001ced2:	8d 42 30             	lea    eax,[edx+0x30]
c001ced5:	0f b6 c0             	movzx  eax,al
c001ced8:	50                   	push   eax
c001ced9:	e8 92 fc ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001cede:	5f                   	pop    edi
c001cedf:	5d                   	pop    ebp
c001cee0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cee6:	53                   	push   ebx
c001cee7:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ceec:	99                   	cdq    
c001ceed:	f7 f9                	idiv   ecx
c001ceef:	99                   	cdq    
c001cef0:	f7 f9                	idiv   ecx
c001cef2:	8d 42 30             	lea    eax,[edx+0x30]
c001cef5:	0f b6 c0             	movzx  eax,al
c001cef8:	50                   	push   eax
c001cef9:	e8 72 fc ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001cefe:	5a                   	pop    edx
c001ceff:	5f                   	pop    edi
c001cf00:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf06:	53                   	push   ebx
c001cf07:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cf0c:	99                   	cdq    
c001cf0d:	f7 f9                	idiv   ecx
c001cf0f:	83 c2 30             	add    edx,0x30
c001cf12:	0f b6 d2             	movzx  edx,dl
c001cf15:	52                   	push   edx
c001cf16:	e8 55 fc ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001cf1b:	83 c4 10             	add    esp,0x10
c001cf1e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf24:	eb 05                	jmp    c001cf2b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf26:	be 01 00 00 00       	mov    esi,0x1
c001cf2b:	83 c4 0c             	add    esp,0xc
c001cf2e:	89 f0                	mov    eax,esi
c001cf30:	5b                   	pop    ebx
c001cf31:	5e                   	pop    esi
c001cf32:	5f                   	pop    edi
c001cf33:	5d                   	pop    ebp
c001cf34:	c3                   	ret    
c001cf35:	90                   	nop

c001cf36 <ATAPI::write(unsigned long long, int, void*)>:
c001cf36:	b8 03 00 00 00       	mov    eax,0x3
c001cf3b:	c3                   	ret    

c001cf3c <ATAPI::close(int, int, void*)>:
c001cf3c:	83 ec 0c             	sub    esp,0xc
c001cf3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf43:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf49:	85 c0                	test   eax,eax
c001cf4b:	74 0c                	je     c001cf59 <ATAPI::close(int, int, void*)+0x1d>
c001cf4d:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf4f:	83 ec 0c             	sub    esp,0xc
c001cf52:	50                   	push   eax
c001cf53:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cf56:	83 c4 10             	add    esp,0x10
c001cf59:	31 c0                	xor    eax,eax
c001cf5b:	83 c4 0c             	add    esp,0xc
c001cf5e:	c3                   	ret    
c001cf5f:	90                   	nop

c001cf60 <ATAPI::ATAPI()>:
c001cf60:	83 ec 0c             	sub    esp,0xc
c001cf63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf67:	83 ec 04             	sub    esp,0x4
c001cf6a:	68 00 08 00 00       	push   0x800
c001cf6f:	68 f9 2c 02 c0       	push   0xc0022cf9
c001cf74:	50                   	push   eax
c001cf75:	e8 4c fa fe ff       	call   c000c9c6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cf7a:	83 c4 10             	add    esp,0x10
c001cf7d:	ba 14 2c 02 c0       	mov    edx,0xc0022c14
c001cf82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf86:	89 10                	mov    DWORD PTR [eax],edx
c001cf88:	90                   	nop
c001cf89:	83 c4 0c             	add    esp,0xc
c001cf8c:	c3                   	ret    
c001cf8d:	90                   	nop

c001cf8e <ATAPI::readyForCommand()>:
c001cf8e:	56                   	push   esi
c001cf8f:	53                   	push   ebx
c001cf90:	53                   	push   ebx
c001cf91:	31 db                	xor    ebx,ebx
c001cf93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf97:	51                   	push   ecx
c001cf98:	6a 0c                	push   0xc
c001cf9a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cfa1:	50                   	push   eax
c001cfa2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cfa8:	e8 77 e8 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001cfad:	83 c4 10             	add    esp,0x10
c001cfb0:	a8 88                	test   al,0x88
c001cfb2:	74 25                	je     c001cfd9 <ATAPI::readyForCommand()+0x4b>
c001cfb4:	43                   	inc    ebx
c001cfb5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001cfbb:	7e da                	jle    c001cf97 <ATAPI::readyForCommand()+0x9>
c001cfbd:	83 ec 0c             	sub    esp,0xc
c001cfc0:	68 5e 01 00 00       	push   0x15e
c001cfc5:	e8 c6 8d ff ff       	call   c0015d90 <milliTenthSleep(unsigned int)>
c001cfca:	83 c4 10             	add    esp,0x10
c001cfcd:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001cfd3:	75 c2                	jne    c001cf97 <ATAPI::readyForCommand()+0x9>
c001cfd5:	31 c0                	xor    eax,eax
c001cfd7:	eb 02                	jmp    c001cfdb <ATAPI::readyForCommand()+0x4d>
c001cfd9:	b0 01                	mov    al,0x1
c001cfdb:	5a                   	pop    edx
c001cfdc:	5b                   	pop    ebx
c001cfdd:	5e                   	pop    esi
c001cfde:	c3                   	ret    
c001cfdf:	90                   	nop

c001cfe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cfe0:	55                   	push   ebp
c001cfe1:	57                   	push   edi
c001cfe2:	56                   	push   esi
c001cfe3:	53                   	push   ebx
c001cfe4:	83 ec 20             	sub    esp,0x20
c001cfe7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cfeb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cfef:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001cff3:	6a 01                	push   0x1
c001cff5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cffc:	50                   	push   eax
c001cffd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d003:	e8 6a e9 ff ff       	call   c001b972 <IDE::enableIRQs(unsigned char, bool)>
c001d008:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d00f:	59                   	pop    ecx
c001d010:	5e                   	pop    esi
c001d011:	50                   	push   eax
c001d012:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d018:	e8 21 e7 ff ff       	call   c001b73e <IDE::prepareInterrupt(unsigned char)>
c001d01d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d020:	e8 69 ff ff ff       	call   c001cf8e <ATAPI::readyForCommand()>
c001d025:	83 c4 10             	add    esp,0x10
c001d028:	84 c0                	test   al,al
c001d02a:	75 0a                	jne    c001d036 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d02c:	bb 01 00 00 00       	mov    ebx,0x1
c001d031:	e9 5f 02 00 00       	jmp    c001d295 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d036:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d03c:	c1 e0 04             	shl    eax,0x4
c001d03f:	0f b6 c0             	movzx  eax,al
c001d042:	50                   	push   eax
c001d043:	6a 06                	push   0x6
c001d045:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d04c:	50                   	push   eax
c001d04d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d053:	e8 0c e7 ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d058:	6a 00                	push   0x0
c001d05a:	6a 01                	push   0x1
c001d05c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d063:	50                   	push   eax
c001d064:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d06a:	e8 f5 e6 ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d06f:	83 c4 20             	add    esp,0x20
c001d072:	0f b6 c3             	movzx  eax,bl
c001d075:	50                   	push   eax
c001d076:	0f b6 df             	movzx  ebx,bh
c001d079:	6a 04                	push   0x4
c001d07b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d082:	50                   	push   eax
c001d083:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d089:	e8 d6 e6 ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d08e:	53                   	push   ebx
c001d08f:	6a 05                	push   0x5
c001d091:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d098:	50                   	push   eax
c001d099:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d09f:	e8 c0 e6 ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0a4:	83 c4 20             	add    esp,0x20
c001d0a7:	68 a0 00 00 00       	push   0xa0
c001d0ac:	6a 07                	push   0x7
c001d0ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0b5:	50                   	push   eax
c001d0b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0bc:	e8 a3 e6 ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0c1:	83 c4 0c             	add    esp,0xc
c001d0c4:	6a 01                	push   0x1
c001d0c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0cd:	50                   	push   eax
c001d0ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0d4:	e8 6f f1 ff ff       	call   c001c248 <IDE::polling(unsigned char, unsigned int)>
c001d0d9:	83 c4 10             	add    esp,0x10
c001d0dc:	0f b6 d8             	movzx  ebx,al
c001d0df:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d0e5:	85 db                	test   ebx,ebx
c001d0e7:	74 20                	je     c001d109 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d0e9:	53                   	push   ebx
c001d0ea:	0f b6 c0             	movzx  eax,al
c001d0ed:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d0f4:	52                   	push   edx
c001d0f5:	50                   	push   eax
c001d0f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0fc:	e8 8d f0 ff ff       	call   c001c18e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d101:	83 c4 10             	add    esp,0x10
c001d104:	e9 8c 01 00 00       	jmp    c001d295 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d109:	52                   	push   edx
c001d10a:	0f b6 c0             	movzx  eax,al
c001d10d:	52                   	push   edx
c001d10e:	50                   	push   eax
c001d10f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d115:	e8 38 e6 ff ff       	call   c001b752 <IDE::getBase(unsigned char)>
c001d11a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d11e:	b9 06 00 00 00       	mov    ecx,0x6
c001d123:	89 c2                	mov    edx,eax
c001d125:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d128:	89 e8                	mov    eax,ebp
c001d12a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d12e:	83 c4 10             	add    esp,0x10
c001d131:	0f b6 c0             	movzx  eax,al
c001d134:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d138:	85 db                	test   ebx,ebx
c001d13a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d140:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d147:	0f 84 eb 00 00 00    	je     c001d238 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d14d:	55                   	push   ebp
c001d14e:	55                   	push   ebp
c001d14f:	52                   	push   edx
c001d150:	50                   	push   eax
c001d151:	e8 82 e7 ff ff       	call   c001b8d8 <IDE::waitInterrupt(unsigned char)>
c001d156:	83 c4 10             	add    esp,0x10
c001d159:	84 c0                	test   al,al
c001d15b:	0f 84 cb fe ff ff    	je     c001d02c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d161:	56                   	push   esi
c001d162:	56                   	push   esi
c001d163:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d16a:	50                   	push   eax
c001d16b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d171:	e8 c8 e5 ff ff       	call   c001b73e <IDE::prepareInterrupt(unsigned char)>
c001d176:	83 c4 0c             	add    esp,0xc
c001d179:	6a 04                	push   0x4
c001d17b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d182:	50                   	push   eax
c001d183:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d189:	e8 96 e6 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001d18e:	83 c4 0c             	add    esp,0xc
c001d191:	6a 05                	push   0x5
c001d193:	89 c6                	mov    esi,eax
c001d195:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d19c:	50                   	push   eax
c001d19d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1a3:	e8 7c e6 ff ff       	call   c001b824 <IDE::read(unsigned char, unsigned char)>
c001d1a8:	83 c4 10             	add    esp,0x10
c001d1ab:	0f b6 e8             	movzx  ebp,al
c001d1ae:	89 f0                	mov    eax,esi
c001d1b0:	c1 e5 08             	shl    ebp,0x8
c001d1b3:	0f b6 f0             	movzx  esi,al
c001d1b6:	09 f5                	or     ebp,esi
c001d1b8:	31 f6                	xor    esi,esi
c001d1ba:	d1 fd                	sar    ebp,1
c001d1bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d1c1:	74 5c                	je     c001d21f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d1c3:	39 ee                	cmp    esi,ebp
c001d1c5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d1cb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d1d2:	75 0d                	jne    c001d1e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d1d4:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d1d7:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d1db:	4b                   	dec    ebx
c001d1dc:	e9 57 ff ff ff       	jmp    c001d138 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d1e1:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d1e5:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d1e9:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d1ee:	51                   	push   ecx
c001d1ef:	51                   	push   ecx
c001d1f0:	52                   	push   edx
c001d1f1:	50                   	push   eax
c001d1f2:	e8 5b e5 ff ff       	call   c001b752 <IDE::getBase(unsigned char)>
c001d1f7:	89 c2                	mov    edx,eax
c001d1f9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d1fe:	66 ef                	out    dx,ax
c001d200:	46                   	inc    esi
c001d201:	83 c4 10             	add    esp,0x10
c001d204:	eb bd                	jmp    c001d1c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d206:	51                   	push   ecx
c001d207:	51                   	push   ecx
c001d208:	52                   	push   edx
c001d209:	50                   	push   eax
c001d20a:	e8 43 e5 ff ff       	call   c001b752 <IDE::getBase(unsigned char)>
c001d20f:	89 c2                	mov    edx,eax
c001d211:	66 ed                	in     ax,dx
c001d213:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d217:	83 c4 10             	add    esp,0x10
c001d21a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d21e:	46                   	inc    esi
c001d21f:	39 ee                	cmp    esi,ebp
c001d221:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d227:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d22e:	75 d6                	jne    c001d206 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d230:	01 f6                	add    esi,esi
c001d232:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d236:	eb a3                	jmp    c001d1db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d238:	51                   	push   ecx
c001d239:	51                   	push   ecx
c001d23a:	52                   	push   edx
c001d23b:	50                   	push   eax
c001d23c:	e8 97 e6 ff ff       	call   c001b8d8 <IDE::waitInterrupt(unsigned char)>
c001d241:	83 c4 10             	add    esp,0x10
c001d244:	84 c0                	test   al,al
c001d246:	0f 84 e0 fd ff ff    	je     c001d02c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d24c:	52                   	push   edx
c001d24d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d252:	52                   	push   edx
c001d253:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d25a:	50                   	push   eax
c001d25b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d261:	e8 d8 e4 ff ff       	call   c001b73e <IDE::prepareInterrupt(unsigned char)>
c001d266:	83 c4 10             	add    esp,0x10
c001d269:	50                   	push   eax
c001d26a:	50                   	push   eax
c001d26b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d272:	50                   	push   eax
c001d273:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d279:	e8 d4 e4 ff ff       	call   c001b752 <IDE::getBase(unsigned char)>
c001d27e:	8d 50 07             	lea    edx,[eax+0x7]
c001d281:	ec                   	in     al,dx
c001d282:	83 c4 10             	add    esp,0x10
c001d285:	a8 88                	test   al,0x88
c001d287:	74 0a                	je     c001d293 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d289:	4b                   	dec    ebx
c001d28a:	75 dd                	jne    c001d269 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d28c:	bb 02 00 00 00       	mov    ebx,0x2
c001d291:	eb 02                	jmp    c001d295 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d293:	31 db                	xor    ebx,ebx
c001d295:	83 c4 1c             	add    esp,0x1c
c001d298:	89 d8                	mov    eax,ebx
c001d29a:	5b                   	pop    ebx
c001d29b:	5e                   	pop    esi
c001d29c:	5f                   	pop    edi
c001d29d:	5d                   	pop    ebp
c001d29e:	c3                   	ret    
c001d29f:	90                   	nop

c001d2a0 <ATAPI::diskRemoved()>:
c001d2a0:	53                   	push   ebx
c001d2a1:	83 ec 14             	sub    esp,0x14
c001d2a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d2a8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d2af:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d2b5:	e8 ae 06 ff ff       	call   c000d968 <LogicalDisk::unmount()>
c001d2ba:	58                   	pop    eax
c001d2bb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d2c1:	e8 86 10 ff ff       	call   c000e34c <VCache::writeWriteBuffer()>
c001d2c6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d2cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2d0:	83 c4 18             	add    esp,0x18
c001d2d3:	5b                   	pop    ebx
c001d2d4:	e9 63 10 ff ff       	jmp    c000e33c <VCache::invalidateReadBuffer()>
c001d2d9:	90                   	nop

c001d2da <ATAPI::eject()>:
c001d2da:	57                   	push   edi
c001d2db:	b9 03 00 00 00       	mov    ecx,0x3
c001d2e0:	53                   	push   ebx
c001d2e1:	83 ec 14             	sub    esp,0x14
c001d2e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d2e8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d2ec:	fc                   	cld    
c001d2ed:	31 c0                	xor    eax,eax
c001d2ef:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d2f1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d2f6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d2fb:	50                   	push   eax
c001d2fc:	50                   	push   eax
c001d2fd:	6a 00                	push   0x0
c001d2ff:	6a 00                	push   0x0
c001d301:	6a 00                	push   0x0
c001d303:	6a 02                	push   0x2
c001d305:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d309:	50                   	push   eax
c001d30a:	53                   	push   ebx
c001d30b:	e8 d0 fc ff ff       	call   c001cfe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d310:	83 c4 14             	add    esp,0x14
c001d313:	53                   	push   ebx
c001d314:	e8 87 ff ff ff       	call   c001d2a0 <ATAPI::diskRemoved()>
c001d319:	83 c4 24             	add    esp,0x24
c001d31c:	31 c0                	xor    eax,eax
c001d31e:	5b                   	pop    ebx
c001d31f:	5f                   	pop    edi
c001d320:	c3                   	ret    
c001d321:	90                   	nop

c001d322 <ATAPI::diskInserted()>:
c001d322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d326:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d32d:	c3                   	ret    

c001d32e <ATAPI::detectMedia()>:
c001d32e:	56                   	push   esi
c001d32f:	53                   	push   ebx
c001d330:	83 ec 28             	sub    esp,0x28
c001d333:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d337:	6a 0c                	push   0xc
c001d339:	6a 00                	push   0x0
c001d33b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d33f:	56                   	push   esi
c001d340:	e8 ab 31 fe ff       	call   c00004f0 <memset>
c001d345:	58                   	pop    eax
c001d346:	5a                   	pop    edx
c001d347:	6a 00                	push   0x0
c001d349:	6a 00                	push   0x0
c001d34b:	6a 00                	push   0x0
c001d34d:	6a 00                	push   0x0
c001d34f:	56                   	push   esi
c001d350:	53                   	push   ebx
c001d351:	e8 8a fc ff ff       	call   c001cfe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d356:	83 c4 1c             	add    esp,0x1c
c001d359:	6a 0c                	push   0xc
c001d35b:	6a 00                	push   0x0
c001d35d:	56                   	push   esi
c001d35e:	e8 8d 31 fe ff       	call   c00004f0 <memset>
c001d363:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d368:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d36d:	59                   	pop    ecx
c001d36e:	58                   	pop    eax
c001d36f:	6a 01                	push   0x1
c001d371:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d375:	50                   	push   eax
c001d376:	6a 00                	push   0x0
c001d378:	6a 12                	push   0x12
c001d37a:	56                   	push   esi
c001d37b:	53                   	push   ebx
c001d37c:	e8 5f fc ff ff       	call   c001cfe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d381:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d385:	83 c4 20             	add    esp,0x20
c001d388:	83 e0 7f             	and    eax,0x7f
c001d38b:	83 f8 70             	cmp    eax,0x70
c001d38e:	74 15                	je     c001d3a5 <ATAPI::detectMedia()+0x77>
c001d390:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d397:	75 0c                	jne    c001d3a5 <ATAPI::detectMedia()+0x77>
c001d399:	83 ec 0c             	sub    esp,0xc
c001d39c:	53                   	push   ebx
c001d39d:	e8 80 ff ff ff       	call   c001d322 <ATAPI::diskInserted()>
c001d3a2:	83 c4 10             	add    esp,0x10
c001d3a5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d3a9:	83 e0 0f             	and    eax,0xf
c001d3ac:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d3b1:	0f b6 c0             	movzx  eax,al
c001d3b4:	75 19                	jne    c001d3cf <ATAPI::detectMedia()+0xa1>
c001d3b6:	83 f8 02             	cmp    eax,0x2
c001d3b9:	75 14                	jne    c001d3cf <ATAPI::detectMedia()+0xa1>
c001d3bb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3c2:	74 24                	je     c001d3e8 <ATAPI::detectMedia()+0xba>
c001d3c4:	83 ec 0c             	sub    esp,0xc
c001d3c7:	53                   	push   ebx
c001d3c8:	e8 d3 fe ff ff       	call   c001d2a0 <ATAPI::diskRemoved()>
c001d3cd:	eb 16                	jmp    c001d3e5 <ATAPI::detectMedia()+0xb7>
c001d3cf:	85 c0                	test   eax,eax
c001d3d1:	75 15                	jne    c001d3e8 <ATAPI::detectMedia()+0xba>
c001d3d3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3da:	75 0c                	jne    c001d3e8 <ATAPI::detectMedia()+0xba>
c001d3dc:	83 ec 0c             	sub    esp,0xc
c001d3df:	53                   	push   ebx
c001d3e0:	e8 3d ff ff ff       	call   c001d322 <ATAPI::diskInserted()>
c001d3e5:	83 c4 10             	add    esp,0x10
c001d3e8:	83 c4 24             	add    esp,0x24
c001d3eb:	5b                   	pop    ebx
c001d3ec:	5e                   	pop    esi
c001d3ed:	c3                   	ret    

c001d3ee <ATAPI::open(int, int, void*)>:
c001d3ee:	56                   	push   esi
c001d3ef:	53                   	push   ebx
c001d3f0:	50                   	push   eax
c001d3f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d3f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d3fd:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d403:	c1 e0 06             	shl    eax,0x6
c001d406:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d40c:	01 d0                	add    eax,edx
c001d40e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d415:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d41b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d422:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d42c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d433:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d439:	6a 04                	push   0x4
c001d43b:	6a 0c                	push   0xc
c001d43d:	51                   	push   ecx
c001d43e:	52                   	push   edx
c001d43f:	e8 20 e3 ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d444:	90                   	nop
c001d445:	90                   	nop
c001d446:	6a 00                	push   0x0
c001d448:	6a 0c                	push   0xc
c001d44a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d451:	50                   	push   eax
c001d452:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d458:	e8 07 e3 ff ff       	call   c001b764 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d45d:	83 c4 14             	add    esp,0x14
c001d460:	68 78 01 00 00       	push   0x178
c001d465:	e8 69 a6 fe ff       	call   c0007ad3 <malloc>
c001d46a:	83 c4 0c             	add    esp,0xc
c001d46d:	6a 00                	push   0x0
c001d46f:	68 ff ff ff 7f       	push   0x7fffffff
c001d474:	6a 00                	push   0x0
c001d476:	6a 00                	push   0x0
c001d478:	53                   	push   ebx
c001d479:	68 ab 2d 02 c0       	push   0xc0022dab
c001d47e:	89 c6                	mov    esi,eax
c001d480:	50                   	push   eax
c001d481:	e8 20 03 ff ff       	call   c000d7a6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d486:	83 c4 14             	add    esp,0x14
c001d489:	56                   	push   esi
c001d48a:	e8 d7 03 ff ff       	call   c000d866 <LogicalDisk::assignDriveLetter()>
c001d48f:	5a                   	pop    edx
c001d490:	59                   	pop    ecx
c001d491:	0f be c0             	movsx  eax,al
c001d494:	50                   	push   eax
c001d495:	68 fc 2b 02 c0       	push   0xc0022bfc
c001d49a:	e8 6b d4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d49f:	58                   	pop    eax
c001d4a0:	5a                   	pop    edx
c001d4a1:	56                   	push   esi
c001d4a2:	53                   	push   ebx
c001d4a3:	e8 50 f1 fe ff       	call   c000c5f8 <Device::addChild(Device*)>
c001d4a8:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d4ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4b1:	e8 78 f5 fe ff       	call   c000ca2e <PhysicalDisk::startCache()>
c001d4b6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d4bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4c0:	e8 69 fe ff ff       	call   c001d32e <ATAPI::detectMedia()>
c001d4c5:	83 c4 14             	add    esp,0x14
c001d4c8:	31 c0                	xor    eax,eax
c001d4ca:	5b                   	pop    ebx
c001d4cb:	5e                   	pop    esi
c001d4cc:	c3                   	ret    
c001d4cd:	90                   	nop

c001d4ce <ATAPI::read(unsigned long long, int, void*)>:
c001d4ce:	55                   	push   ebp
c001d4cf:	57                   	push   edi
c001d4d0:	56                   	push   esi
c001d4d1:	53                   	push   ebx
c001d4d2:	83 ec 1c             	sub    esp,0x1c
c001d4d5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d4d9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d4dd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d4e1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d4e8:	74 3c                	je     c001d526 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d4ea:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d4ee:	b9 03 00 00 00       	mov    ecx,0x3
c001d4f3:	fc                   	cld    
c001d4f4:	31 c0                	xor    eax,eax
c001d4f6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d4f8:	89 e8                	mov    eax,ebp
c001d4fa:	0f ce                	bswap  esi
c001d4fc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d500:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d505:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d509:	50                   	push   eax
c001d50a:	50                   	push   eax
c001d50b:	55                   	push   ebp
c001d50c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d510:	c1 e5 0b             	shl    ebp,0xb
c001d513:	6a 00                	push   0x0
c001d515:	55                   	push   ebp
c001d516:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d51a:	50                   	push   eax
c001d51b:	53                   	push   ebx
c001d51c:	e8 bf fa ff ff       	call   c001cfe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d521:	83 c4 20             	add    esp,0x20
c001d524:	eb 1a                	jmp    c001d540 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d526:	83 ec 0c             	sub    esp,0xc
c001d529:	53                   	push   ebx
c001d52a:	e8 ff fd ff ff       	call   c001d32e <ATAPI::detectMedia()>
c001d52f:	83 c4 10             	add    esp,0x10
c001d532:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d539:	75 af                	jne    c001d4ea <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d53b:	b8 02 00 00 00       	mov    eax,0x2
c001d540:	83 c4 1c             	add    esp,0x1c
c001d543:	5b                   	pop    ebx
c001d544:	5e                   	pop    esi
c001d545:	5f                   	pop    edi
c001d546:	5d                   	pop    ebp
c001d547:	c3                   	ret    

c001d548 <SATA::close(int, int, void*)>:
c001d548:	83 ec 0c             	sub    esp,0xc
c001d54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d54f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d555:	85 c0                	test   eax,eax
c001d557:	74 0c                	je     c001d565 <SATA::close(int, int, void*)+0x1d>
c001d559:	8b 10                	mov    edx,DWORD PTR [eax]
c001d55b:	83 ec 0c             	sub    esp,0xc
c001d55e:	50                   	push   eax
c001d55f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d562:	83 c4 10             	add    esp,0x10
c001d565:	31 c0                	xor    eax,eax
c001d567:	83 c4 0c             	add    esp,0xc
c001d56a:	c3                   	ret    
c001d56b:	90                   	nop

c001d56c <SATA::powerSaving(PowerSavingLevel)>:
c001d56c:	c3                   	ret    
c001d56d:	90                   	nop

c001d56e <SATA::open(int, int, void*)>:
c001d56e:	56                   	push   esi
c001d56f:	53                   	push   ebx
c001d570:	50                   	push   eax
c001d571:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d575:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d579:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d583:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d589:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d58d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d597:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d5a1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d5a8:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d5ae:	e8 2f a8 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d5b3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d5b9:	89 c6                	mov    esi,eax
c001d5bb:	e8 22 a8 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d5c0:	81 c6 00 10 00 00    	add    esi,0x1000
c001d5c6:	39 c6                	cmp    esi,eax
c001d5c8:	74 10                	je     c001d5da <SATA::open(int, int, void*)+0x6c>
c001d5ca:	83 ec 0c             	sub    esp,0xc
c001d5cd:	68 44 2c 02 c0       	push   0xc0022c44
c001d5d2:	e8 9a 3b ff ff       	call   c0011171 <KePanic(char const*)>
c001d5d7:	83 c4 10             	add    esp,0x10
c001d5da:	83 ec 0c             	sub    esp,0xc
c001d5dd:	6a 02                	push   0x2
c001d5df:	e8 11 c0 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001d5e4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d5ea:	6a 03                	push   0x3
c001d5ec:	50                   	push   eax
c001d5ed:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d5f3:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d5f9:	e8 00 c7 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001d5fe:	83 c4 14             	add    esp,0x14
c001d601:	53                   	push   ebx
c001d602:	e8 27 f4 fe ff       	call   c000ca2e <PhysicalDisk::startCache()>
c001d607:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d60a:	e8 6b 06 ff ff       	call   c000dc7a <createPartitionsForDisk(PhysicalDisk*)>
c001d60f:	83 c4 14             	add    esp,0x14
c001d612:	31 c0                	xor    eax,eax
c001d614:	5b                   	pop    ebx
c001d615:	5e                   	pop    esi
c001d616:	c3                   	ret    
c001d617:	90                   	nop

c001d618 <SATA::SATA()>:
c001d618:	83 ec 0c             	sub    esp,0xc
c001d61b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d61f:	83 ec 04             	sub    esp,0x4
c001d622:	68 00 02 00 00       	push   0x200
c001d627:	68 58 2c 02 c0       	push   0xc0022c58
c001d62c:	50                   	push   eax
c001d62d:	e8 94 f3 fe ff       	call   c000c9c6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d632:	83 c4 10             	add    esp,0x10
c001d635:	ba c8 2c 02 c0       	mov    edx,0xc0022cc8
c001d63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d63e:	89 10                	mov    DWORD PTR [eax],edx
c001d640:	90                   	nop
c001d641:	83 c4 0c             	add    esp,0xc
c001d644:	c3                   	ret    
c001d645:	90                   	nop

c001d646 <SATA::access(unsigned long long, int, void*, bool)>:
c001d646:	55                   	push   ebp
c001d647:	57                   	push   edi
c001d648:	56                   	push   esi
c001d649:	53                   	push   ebx
c001d64a:	83 ec 2c             	sub    esp,0x2c
c001d64d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d651:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d656:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d65a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d65e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d662:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d666:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d66a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d66e:	7e 10                	jle    c001d680 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001d670:	83 ec 0c             	sub    esp,0xc
c001d673:	68 68 2c 02 c0       	push   0xc0022c68
c001d678:	e8 f4 3a ff ff       	call   c0011171 <KePanic(char const*)>
c001d67d:	83 c4 10             	add    esp,0x10
c001d680:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d686:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001d68c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d692:	89 e8                	mov    eax,ebp
c001d694:	c1 e0 07             	shl    eax,0x7
c001d697:	01 d0                	add    eax,edx
c001d699:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d6a3:	8d 45 02             	lea    eax,[ebp+0x2]
c001d6a6:	51                   	push   ecx
c001d6a7:	c1 e0 07             	shl    eax,0x7
c001d6aa:	51                   	push   ecx
c001d6ab:	01 d0                	add    eax,edx
c001d6ad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d6b1:	50                   	push   eax
c001d6b2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d6b8:	e8 6b ec ff ff       	call   c001c328 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d6bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d6c1:	83 c4 10             	add    esp,0x10
c001d6c4:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001d6c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d6cd:	0f 84 5b 01 00 00    	je     c001d82e <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d6d3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d6d7:	c1 e0 09             	shl    eax,0x9
c001d6da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d6df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d6e3:	74 0e                	je     c001d6f3 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001d6e5:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d6eb:	89 c1                	mov    ecx,eax
c001d6ed:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d6f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d6f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d6f7:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d6fd:	8d 45 02             	lea    eax,[ebp+0x2]
c001d700:	c1 e0 07             	shl    eax,0x7
c001d703:	01 d0                	add    eax,edx
c001d705:	8b 00                	mov    eax,DWORD PTR [eax]
c001d707:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d70d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d713:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d717:	c1 e1 05             	shl    ecx,0x5
c001d71a:	01 c8                	add    eax,ecx
c001d71c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d720:	83 e1 01             	and    ecx,0x1
c001d723:	89 ce                	mov    esi,ecx
c001d725:	8a 08                	mov    cl,BYTE PTR [eax]
c001d727:	c1 e6 06             	shl    esi,0x6
c001d72a:	83 e1 bf             	and    ecx,0xffffffbf
c001d72d:	09 f1                	or     ecx,esi
c001d72f:	88 08                	mov    BYTE PTR [eax],cl
c001d731:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d733:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d739:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d73f:	89 08                	mov    DWORD PTR [eax],ecx
c001d741:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d747:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d74d:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d753:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d756:	50                   	push   eax
c001d757:	68 90 00 00 00       	push   0x90
c001d75c:	6a 00                	push   0x0
c001d75e:	56                   	push   esi
c001d75f:	e8 8c 2d fe ff       	call   c00004f0 <memset>
c001d764:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d76a:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d774:	83 c4 10             	add    esp,0x10
c001d777:	48                   	dec    eax
c001d778:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d77d:	89 c1                	mov    ecx,eax
c001d77f:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d785:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d78a:	09 c8                	or     eax,ecx
c001d78c:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d792:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d798:	83 c8 80             	or     eax,0xffffff80
c001d79b:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d7a1:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d7a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7a8:	25 00 7f 00 00       	and    eax,0x7f00
c001d7ad:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d7b2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d7b7:	66 89 06             	mov    WORD PTR [esi],ax
c001d7ba:	b0 35                	mov    al,0x35
c001d7bc:	75 02                	jne    c001d7c0 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001d7be:	b0 25                	mov    al,0x25
c001d7c0:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d7c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7c7:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d7cb:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d7cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7d3:	c1 e8 10             	shr    eax,0x10
c001d7d6:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d7d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7dd:	c1 e8 18             	shr    eax,0x18
c001d7e0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d7e3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d7e7:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d7ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d7ee:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d7f1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d7f5:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d7f9:	89 ee                	mov    esi,ebp
c001d7fb:	31 c0                	xor    eax,eax
c001d7fd:	c1 e6 07             	shl    esi,0x7
c001d800:	01 d6                	add    esi,edx
c001d802:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d808:	80 e1 88             	and    cl,0x88
c001d80b:	74 0a                	je     c001d817 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d80d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d812:	74 0a                	je     c001d81e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d814:	40                   	inc    eax
c001d815:	eb eb                	jmp    c001d802 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d817:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d81c:	75 17                	jne    c001d835 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d81e:	83 ec 0c             	sub    esp,0xc
c001d821:	68 a1 2c 02 c0       	push   0xc0022ca1
c001d826:	e8 df d0 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d82b:	83 c4 10             	add    esp,0x10
c001d82e:	b8 01 00 00 00       	mov    eax,0x1
c001d833:	eb 5b                	jmp    c001d890 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d835:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d839:	c1 e5 07             	shl    ebp,0x7
c001d83c:	b8 01 00 00 00       	mov    eax,0x1
c001d841:	01 ea                	add    edx,ebp
c001d843:	d3 e0                	shl    eax,cl
c001d845:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d84b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d851:	85 c8                	test   eax,ecx
c001d853:	74 16                	je     c001d86b <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001d855:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d85b:	0f ba e1 1e          	bt     ecx,0x1e
c001d85f:	73 ea                	jae    c001d84b <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001d861:	83 ec 0c             	sub    esp,0xc
c001d864:	68 af 2c 02 c0       	push   0xc0022caf
c001d869:	eb bb                	jmp    c001d826 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d86b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d871:	0f ba e0 1e          	bt     eax,0x1e
c001d875:	72 b7                	jb     c001d82e <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d877:	31 c0                	xor    eax,eax
c001d879:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d87e:	75 10                	jne    c001d890 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d880:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d886:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d88a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d88e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d890:	83 c4 2c             	add    esp,0x2c
c001d893:	5b                   	pop    ebx
c001d894:	5e                   	pop    esi
c001d895:	5f                   	pop    edi
c001d896:	5d                   	pop    ebp
c001d897:	c3                   	ret    

c001d898 <SATA::read(unsigned long long, int, void*)>:
c001d898:	55                   	push   ebp
c001d899:	57                   	push   edi
c001d89a:	56                   	push   esi
c001d89b:	be 04 00 00 00       	mov    esi,0x4
c001d8a0:	53                   	push   ebx
c001d8a1:	83 ec 0c             	sub    esp,0xc
c001d8a4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d8a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d8ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8b0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d8b4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d8b7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d8bd:	0f 87 1a 02 00 00    	ja     c001dadd <SATA::read(unsigned long long, int, void*)+0x245>
c001d8c3:	85 c9                	test   ecx,ecx
c001d8c5:	be 06 00 00 00       	mov    esi,0x6
c001d8ca:	0f 84 0d 02 00 00    	je     c001dadd <SATA::read(unsigned long long, int, void*)+0x245>
c001d8d0:	56                   	push   esi
c001d8d1:	56                   	push   esi
c001d8d2:	6a 00                	push   0x0
c001d8d4:	51                   	push   ecx
c001d8d5:	53                   	push   ebx
c001d8d6:	52                   	push   edx
c001d8d7:	50                   	push   eax
c001d8d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8dc:	e8 65 fd ff ff       	call   c001d646 <SATA::access(unsigned long long, int, void*, bool)>
c001d8e1:	83 c4 20             	add    esp,0x20
c001d8e4:	85 c0                	test   eax,eax
c001d8e6:	89 c6                	mov    esi,eax
c001d8e8:	0f 85 ea 01 00 00    	jne    c001dad8 <SATA::read(unsigned long long, int, void*)+0x240>
c001d8ee:	50                   	push   eax
c001d8ef:	50                   	push   eax
c001d8f0:	6a 0f                	push   0xf
c001d8f2:	6a 00                	push   0x0
c001d8f4:	01 1d 54 ae 02 c0    	add    DWORD PTR ds:0xc002ae54,ebx
c001d8fa:	bb 0a 00 00 00       	mov    ebx,0xa
c001d8ff:	e8 7d f2 ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001d904:	5a                   	pop    edx
c001d905:	59                   	pop    ecx
c001d906:	b9 10 27 00 00       	mov    ecx,0x2710
c001d90b:	0f b6 c0             	movzx  eax,al
c001d90e:	50                   	push   eax
c001d90f:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d914:	99                   	cdq    
c001d915:	f7 f9                	idiv   ecx
c001d917:	99                   	cdq    
c001d918:	f7 fb                	idiv   ebx
c001d91a:	8d 42 30             	lea    eax,[edx+0x30]
c001d91d:	0f b6 c0             	movzx  eax,al
c001d920:	50                   	push   eax
c001d921:	e8 4a f2 ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001d926:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d92c:	5f                   	pop    edi
c001d92d:	5d                   	pop    ebp
c001d92e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d933:	6a 0f                	push   0xf
c001d935:	6a 00                	push   0x0
c001d937:	e8 45 f2 ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001d93c:	5a                   	pop    edx
c001d93d:	59                   	pop    ecx
c001d93e:	0f b6 c0             	movzx  eax,al
c001d941:	50                   	push   eax
c001d942:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d947:	99                   	cdq    
c001d948:	f7 fd                	idiv   ebp
c001d94a:	99                   	cdq    
c001d94b:	f7 fb                	idiv   ebx
c001d94d:	8d 42 30             	lea    eax,[edx+0x30]
c001d950:	0f b6 c0             	movzx  eax,al
c001d953:	50                   	push   eax
c001d954:	e8 17 f2 ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001d959:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d95f:	5f                   	pop    edi
c001d960:	bf 64 00 00 00       	mov    edi,0x64
c001d965:	58                   	pop    eax
c001d966:	6a 0f                	push   0xf
c001d968:	6a 00                	push   0x0
c001d96a:	e8 12 f2 ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001d96f:	5a                   	pop    edx
c001d970:	59                   	pop    ecx
c001d971:	0f b6 c0             	movzx  eax,al
c001d974:	50                   	push   eax
c001d975:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d97a:	99                   	cdq    
c001d97b:	f7 ff                	idiv   edi
c001d97d:	99                   	cdq    
c001d97e:	f7 fb                	idiv   ebx
c001d980:	8d 42 30             	lea    eax,[edx+0x30]
c001d983:	0f b6 c0             	movzx  eax,al
c001d986:	50                   	push   eax
c001d987:	e8 e4 f1 ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001d98c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d992:	58                   	pop    eax
c001d993:	5a                   	pop    edx
c001d994:	6a 0f                	push   0xf
c001d996:	6a 00                	push   0x0
c001d998:	e8 e4 f1 ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001d99d:	59                   	pop    ecx
c001d99e:	5a                   	pop    edx
c001d99f:	0f b6 c0             	movzx  eax,al
c001d9a2:	50                   	push   eax
c001d9a3:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d9a8:	99                   	cdq    
c001d9a9:	f7 fb                	idiv   ebx
c001d9ab:	99                   	cdq    
c001d9ac:	f7 fb                	idiv   ebx
c001d9ae:	8d 42 30             	lea    eax,[edx+0x30]
c001d9b1:	0f b6 c0             	movzx  eax,al
c001d9b4:	50                   	push   eax
c001d9b5:	e8 b6 f1 ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001d9ba:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d9c0:	59                   	pop    ecx
c001d9c1:	58                   	pop    eax
c001d9c2:	6a 0f                	push   0xf
c001d9c4:	6a 00                	push   0x0
c001d9c6:	e8 b6 f1 ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001d9cb:	5a                   	pop    edx
c001d9cc:	59                   	pop    ecx
c001d9cd:	0f b6 c0             	movzx  eax,al
c001d9d0:	50                   	push   eax
c001d9d1:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d9d6:	99                   	cdq    
c001d9d7:	f7 fb                	idiv   ebx
c001d9d9:	83 c2 30             	add    edx,0x30
c001d9dc:	0f b6 d2             	movzx  edx,dl
c001d9df:	52                   	push   edx
c001d9e0:	e8 8b f1 ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001d9e5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d9eb:	58                   	pop    eax
c001d9ec:	5a                   	pop    edx
c001d9ed:	6a 0f                	push   0xf
c001d9ef:	6a 00                	push   0x0
c001d9f1:	e8 8b f1 ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001d9f6:	59                   	pop    ecx
c001d9f7:	b9 10 27 00 00       	mov    ecx,0x2710
c001d9fc:	5a                   	pop    edx
c001d9fd:	0f b6 c0             	movzx  eax,al
c001da00:	50                   	push   eax
c001da01:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da06:	99                   	cdq    
c001da07:	f7 f9                	idiv   ecx
c001da09:	99                   	cdq    
c001da0a:	f7 fb                	idiv   ebx
c001da0c:	8d 42 30             	lea    eax,[edx+0x30]
c001da0f:	0f b6 c0             	movzx  eax,al
c001da12:	50                   	push   eax
c001da13:	e8 58 f1 ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001da18:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001da1e:	59                   	pop    ecx
c001da1f:	58                   	pop    eax
c001da20:	6a 0f                	push   0xf
c001da22:	6a 00                	push   0x0
c001da24:	e8 58 f1 ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001da29:	5a                   	pop    edx
c001da2a:	59                   	pop    ecx
c001da2b:	0f b6 c0             	movzx  eax,al
c001da2e:	50                   	push   eax
c001da2f:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da34:	99                   	cdq    
c001da35:	f7 fd                	idiv   ebp
c001da37:	99                   	cdq    
c001da38:	f7 fb                	idiv   ebx
c001da3a:	8d 42 30             	lea    eax,[edx+0x30]
c001da3d:	0f b6 c0             	movzx  eax,al
c001da40:	50                   	push   eax
c001da41:	e8 2a f1 ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001da46:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001da4c:	5d                   	pop    ebp
c001da4d:	58                   	pop    eax
c001da4e:	6a 0f                	push   0xf
c001da50:	6a 00                	push   0x0
c001da52:	e8 2a f1 ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001da57:	5a                   	pop    edx
c001da58:	59                   	pop    ecx
c001da59:	0f b6 c0             	movzx  eax,al
c001da5c:	50                   	push   eax
c001da5d:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da62:	99                   	cdq    
c001da63:	f7 ff                	idiv   edi
c001da65:	99                   	cdq    
c001da66:	f7 fb                	idiv   ebx
c001da68:	8d 42 30             	lea    eax,[edx+0x30]
c001da6b:	0f b6 c0             	movzx  eax,al
c001da6e:	50                   	push   eax
c001da6f:	e8 fc f0 ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001da74:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001da7a:	5f                   	pop    edi
c001da7b:	5d                   	pop    ebp
c001da7c:	6a 0f                	push   0xf
c001da7e:	6a 00                	push   0x0
c001da80:	e8 fc f0 ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001da85:	5a                   	pop    edx
c001da86:	59                   	pop    ecx
c001da87:	0f b6 c0             	movzx  eax,al
c001da8a:	50                   	push   eax
c001da8b:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da90:	99                   	cdq    
c001da91:	f7 fb                	idiv   ebx
c001da93:	99                   	cdq    
c001da94:	f7 fb                	idiv   ebx
c001da96:	8d 42 30             	lea    eax,[edx+0x30]
c001da99:	0f b6 c0             	movzx  eax,al
c001da9c:	50                   	push   eax
c001da9d:	e8 ce f0 ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001daa2:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001daa8:	5f                   	pop    edi
c001daa9:	5d                   	pop    ebp
c001daaa:	6a 0f                	push   0xf
c001daac:	6a 00                	push   0x0
c001daae:	e8 ce f0 ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001dab3:	5a                   	pop    edx
c001dab4:	59                   	pop    ecx
c001dab5:	0f b6 c0             	movzx  eax,al
c001dab8:	50                   	push   eax
c001dab9:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dabe:	99                   	cdq    
c001dabf:	f7 fb                	idiv   ebx
c001dac1:	83 c2 30             	add    edx,0x30
c001dac4:	0f b6 d2             	movzx  edx,dl
c001dac7:	52                   	push   edx
c001dac8:	e8 a3 f0 ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001dacd:	83 c4 10             	add    esp,0x10
c001dad0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dad6:	eb 05                	jmp    c001dadd <SATA::read(unsigned long long, int, void*)+0x245>
c001dad8:	be 01 00 00 00       	mov    esi,0x1
c001dadd:	83 c4 0c             	add    esp,0xc
c001dae0:	89 f0                	mov    eax,esi
c001dae2:	5b                   	pop    ebx
c001dae3:	5e                   	pop    esi
c001dae4:	5f                   	pop    edi
c001dae5:	5d                   	pop    ebp
c001dae6:	c3                   	ret    
c001dae7:	90                   	nop

c001dae8 <SATA::write(unsigned long long, int, void*)>:
c001dae8:	55                   	push   ebp
c001dae9:	57                   	push   edi
c001daea:	56                   	push   esi
c001daeb:	53                   	push   ebx
c001daec:	83 ec 0c             	sub    esp,0xc
c001daef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001daf3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001daf7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dafb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001daff:	8d 70 ff             	lea    esi,[eax-0x1]
c001db02:	b8 04 00 00 00       	mov    eax,0x4
c001db07:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001db0d:	0f 87 2c 02 00 00    	ja     c001dd3f <SATA::write(unsigned long long, int, void*)+0x257>
c001db13:	85 db                	test   ebx,ebx
c001db15:	b8 06 00 00 00       	mov    eax,0x6
c001db1a:	0f 84 1f 02 00 00    	je     c001dd3f <SATA::write(unsigned long long, int, void*)+0x257>
c001db20:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001db24:	c1 e6 09             	shl    esi,0x9
c001db27:	01 de                	add    esi,ebx
c001db29:	50                   	push   eax
c001db2a:	89 d7                	mov    edi,edx
c001db2c:	50                   	push   eax
c001db2d:	83 c7 01             	add    edi,0x1
c001db30:	6a 01                	push   0x1
c001db32:	89 cd                	mov    ebp,ecx
c001db34:	53                   	push   ebx
c001db35:	83 d5 00             	adc    ebp,0x0
c001db38:	6a 01                	push   0x1
c001db3a:	81 c3 00 02 00 00    	add    ebx,0x200
c001db40:	51                   	push   ecx
c001db41:	52                   	push   edx
c001db42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db46:	e8 fb fa ff ff       	call   c001d646 <SATA::access(unsigned long long, int, void*, bool)>
c001db4b:	83 c4 20             	add    esp,0x20
c001db4e:	39 f3                	cmp    ebx,esi
c001db50:	89 fa                	mov    edx,edi
c001db52:	89 e9                	mov    ecx,ebp
c001db54:	75 d3                	jne    c001db29 <SATA::write(unsigned long long, int, void*)+0x41>
c001db56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001db5a:	bd 10 27 00 00       	mov    ebp,0x2710
c001db5f:	bb 0a 00 00 00       	mov    ebx,0xa
c001db64:	01 05 50 ae 02 c0    	add    DWORD PTR ds:0xc002ae50,eax
c001db6a:	50                   	push   eax
c001db6b:	50                   	push   eax
c001db6c:	6a 0f                	push   0xf
c001db6e:	6a 00                	push   0x0
c001db70:	e8 0c f0 ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001db75:	5a                   	pop    edx
c001db76:	59                   	pop    ecx
c001db77:	0f b6 c0             	movzx  eax,al
c001db7a:	50                   	push   eax
c001db7b:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001db80:	99                   	cdq    
c001db81:	f7 fd                	idiv   ebp
c001db83:	99                   	cdq    
c001db84:	f7 fb                	idiv   ebx
c001db86:	8d 42 30             	lea    eax,[edx+0x30]
c001db89:	0f b6 c0             	movzx  eax,al
c001db8c:	50                   	push   eax
c001db8d:	e8 de ef ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001db92:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001db98:	5e                   	pop    esi
c001db99:	5f                   	pop    edi
c001db9a:	bf e8 03 00 00       	mov    edi,0x3e8
c001db9f:	6a 0f                	push   0xf
c001dba1:	6a 00                	push   0x0
c001dba3:	e8 d9 ef ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001dba8:	5a                   	pop    edx
c001dba9:	59                   	pop    ecx
c001dbaa:	0f b6 c0             	movzx  eax,al
c001dbad:	50                   	push   eax
c001dbae:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dbb3:	99                   	cdq    
c001dbb4:	f7 ff                	idiv   edi
c001dbb6:	99                   	cdq    
c001dbb7:	f7 fb                	idiv   ebx
c001dbb9:	8d 42 30             	lea    eax,[edx+0x30]
c001dbbc:	0f b6 c0             	movzx  eax,al
c001dbbf:	50                   	push   eax
c001dbc0:	e8 ab ef ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001dbc5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dbcb:	5e                   	pop    esi
c001dbcc:	be 64 00 00 00       	mov    esi,0x64
c001dbd1:	58                   	pop    eax
c001dbd2:	6a 0f                	push   0xf
c001dbd4:	6a 00                	push   0x0
c001dbd6:	e8 a6 ef ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001dbdb:	5a                   	pop    edx
c001dbdc:	59                   	pop    ecx
c001dbdd:	0f b6 c0             	movzx  eax,al
c001dbe0:	50                   	push   eax
c001dbe1:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dbe6:	99                   	cdq    
c001dbe7:	f7 fe                	idiv   esi
c001dbe9:	99                   	cdq    
c001dbea:	f7 fb                	idiv   ebx
c001dbec:	8d 42 30             	lea    eax,[edx+0x30]
c001dbef:	0f b6 c0             	movzx  eax,al
c001dbf2:	50                   	push   eax
c001dbf3:	e8 78 ef ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001dbf8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dbfe:	58                   	pop    eax
c001dbff:	5a                   	pop    edx
c001dc00:	6a 0f                	push   0xf
c001dc02:	6a 00                	push   0x0
c001dc04:	e8 78 ef ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001dc09:	59                   	pop    ecx
c001dc0a:	5a                   	pop    edx
c001dc0b:	0f b6 c0             	movzx  eax,al
c001dc0e:	50                   	push   eax
c001dc0f:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dc14:	99                   	cdq    
c001dc15:	f7 fb                	idiv   ebx
c001dc17:	99                   	cdq    
c001dc18:	f7 fb                	idiv   ebx
c001dc1a:	8d 42 30             	lea    eax,[edx+0x30]
c001dc1d:	0f b6 c0             	movzx  eax,al
c001dc20:	50                   	push   eax
c001dc21:	e8 4a ef ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001dc26:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dc2c:	59                   	pop    ecx
c001dc2d:	58                   	pop    eax
c001dc2e:	6a 0f                	push   0xf
c001dc30:	6a 00                	push   0x0
c001dc32:	e8 4a ef ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001dc37:	5a                   	pop    edx
c001dc38:	59                   	pop    ecx
c001dc39:	0f b6 c0             	movzx  eax,al
c001dc3c:	50                   	push   eax
c001dc3d:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dc42:	99                   	cdq    
c001dc43:	f7 fb                	idiv   ebx
c001dc45:	83 c2 30             	add    edx,0x30
c001dc48:	0f b6 d2             	movzx  edx,dl
c001dc4b:	52                   	push   edx
c001dc4c:	e8 1f ef ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001dc51:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dc57:	58                   	pop    eax
c001dc58:	5a                   	pop    edx
c001dc59:	6a 0f                	push   0xf
c001dc5b:	6a 00                	push   0x0
c001dc5d:	e8 1f ef ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001dc62:	59                   	pop    ecx
c001dc63:	5a                   	pop    edx
c001dc64:	0f b6 c0             	movzx  eax,al
c001dc67:	50                   	push   eax
c001dc68:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dc6d:	99                   	cdq    
c001dc6e:	f7 fd                	idiv   ebp
c001dc70:	99                   	cdq    
c001dc71:	f7 fb                	idiv   ebx
c001dc73:	8d 42 30             	lea    eax,[edx+0x30]
c001dc76:	0f b6 c0             	movzx  eax,al
c001dc79:	50                   	push   eax
c001dc7a:	e8 f1 ee ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001dc7f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dc85:	59                   	pop    ecx
c001dc86:	5d                   	pop    ebp
c001dc87:	6a 0f                	push   0xf
c001dc89:	6a 00                	push   0x0
c001dc8b:	e8 f1 ee ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001dc90:	5a                   	pop    edx
c001dc91:	59                   	pop    ecx
c001dc92:	0f b6 c0             	movzx  eax,al
c001dc95:	50                   	push   eax
c001dc96:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dc9b:	99                   	cdq    
c001dc9c:	f7 ff                	idiv   edi
c001dc9e:	99                   	cdq    
c001dc9f:	f7 fb                	idiv   ebx
c001dca1:	8d 42 30             	lea    eax,[edx+0x30]
c001dca4:	0f b6 c0             	movzx  eax,al
c001dca7:	50                   	push   eax
c001dca8:	e8 c3 ee ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001dcad:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dcb3:	5f                   	pop    edi
c001dcb4:	5d                   	pop    ebp
c001dcb5:	6a 0f                	push   0xf
c001dcb7:	6a 00                	push   0x0
c001dcb9:	e8 c3 ee ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001dcbe:	5a                   	pop    edx
c001dcbf:	59                   	pop    ecx
c001dcc0:	0f b6 c0             	movzx  eax,al
c001dcc3:	50                   	push   eax
c001dcc4:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dcc9:	99                   	cdq    
c001dcca:	f7 fe                	idiv   esi
c001dccc:	99                   	cdq    
c001dccd:	f7 fb                	idiv   ebx
c001dccf:	8d 42 30             	lea    eax,[edx+0x30]
c001dcd2:	0f b6 c0             	movzx  eax,al
c001dcd5:	50                   	push   eax
c001dcd6:	e8 95 ee ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001dcdb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dce1:	5e                   	pop    esi
c001dce2:	5f                   	pop    edi
c001dce3:	6a 0f                	push   0xf
c001dce5:	6a 00                	push   0x0
c001dce7:	e8 95 ee ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001dcec:	5d                   	pop    ebp
c001dced:	5a                   	pop    edx
c001dcee:	0f b6 c0             	movzx  eax,al
c001dcf1:	50                   	push   eax
c001dcf2:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dcf7:	99                   	cdq    
c001dcf8:	f7 fb                	idiv   ebx
c001dcfa:	99                   	cdq    
c001dcfb:	f7 fb                	idiv   ebx
c001dcfd:	8d 42 30             	lea    eax,[edx+0x30]
c001dd00:	0f b6 c0             	movzx  eax,al
c001dd03:	50                   	push   eax
c001dd04:	e8 67 ee ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001dd09:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dd0f:	59                   	pop    ecx
c001dd10:	5e                   	pop    esi
c001dd11:	6a 0f                	push   0xf
c001dd13:	6a 00                	push   0x0
c001dd15:	e8 67 ee ff ff       	call   c001cb81 <combineColours(unsigned char, unsigned char)>
c001dd1a:	5f                   	pop    edi
c001dd1b:	5d                   	pop    ebp
c001dd1c:	0f b6 c0             	movzx  eax,al
c001dd1f:	50                   	push   eax
c001dd20:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dd25:	99                   	cdq    
c001dd26:	f7 fb                	idiv   ebx
c001dd28:	83 c2 30             	add    edx,0x30
c001dd2b:	0f b6 d2             	movzx  edx,dl
c001dd2e:	52                   	push   edx
c001dd2f:	e8 3c ee ff ff       	call   c001cb70 <combineCharAndColour(char, unsigned char)>
c001dd34:	83 c4 10             	add    esp,0x10
c001dd37:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dd3d:	31 c0                	xor    eax,eax
c001dd3f:	83 c4 0c             	add    esp,0xc
c001dd42:	5b                   	pop    ebx
c001dd43:	5e                   	pop    esi
c001dd44:	5f                   	pop    edi
c001dd45:	5d                   	pop    ebp
c001dd46:	c3                   	ret    
c001dd47:	90                   	nop

c001dd48 <SATAPI::write(unsigned long long, int, void*)>:
c001dd48:	b8 03 00 00 00       	mov    eax,0x3
c001dd4d:	c3                   	ret    

c001dd4e <SATAPI::close(int, int, void*)>:
c001dd4e:	83 ec 0c             	sub    esp,0xc
c001dd51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd55:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dd5b:	85 c0                	test   eax,eax
c001dd5d:	74 0c                	je     c001dd6b <SATAPI::close(int, int, void*)+0x1d>
c001dd5f:	8b 10                	mov    edx,DWORD PTR [eax]
c001dd61:	83 ec 0c             	sub    esp,0xc
c001dd64:	50                   	push   eax
c001dd65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dd68:	83 c4 10             	add    esp,0x10
c001dd6b:	31 c0                	xor    eax,eax
c001dd6d:	83 c4 0c             	add    esp,0xc
c001dd70:	c3                   	ret    
c001dd71:	90                   	nop

c001dd72 <SATAPI::SATAPI()>:
c001dd72:	83 ec 0c             	sub    esp,0xc
c001dd75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd79:	83 ec 04             	sub    esp,0x4
c001dd7c:	68 00 08 00 00       	push   0x800
c001dd81:	68 f8 2c 02 c0       	push   0xc0022cf8
c001dd86:	50                   	push   eax
c001dd87:	e8 3a ec fe ff       	call   c000c9c6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dd8c:	83 c4 10             	add    esp,0x10
c001dd8f:	ba ec 2d 02 c0       	mov    edx,0xc0022dec
c001dd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd98:	89 10                	mov    DWORD PTR [eax],edx
c001dd9a:	90                   	nop
c001dd9b:	83 c4 0c             	add    esp,0xc
c001dd9e:	c3                   	ret    
c001dd9f:	90                   	nop

c001dda0 <SATAPI::diskRemoved()>:
c001dda0:	c3                   	ret    
c001dda1:	90                   	nop

c001dda2 <SATAPI::diskInserted()>:
c001dda2:	83 ec 18             	sub    esp,0x18
c001dda5:	68 04 2d 02 c0       	push   0xc0022d04
c001ddaa:	e8 5b cb fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001ddaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddb3:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ddba:	83 c4 1c             	add    esp,0x1c
c001ddbd:	c3                   	ret    

c001ddbe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ddbe:	55                   	push   ebp
c001ddbf:	57                   	push   edi
c001ddc0:	56                   	push   esi
c001ddc1:	53                   	push   ebx
c001ddc2:	83 ec 34             	sub    esp,0x34
c001ddc5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ddc9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ddcd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ddd1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ddd5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ddd9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001dddf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dde5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dde9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001ddef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ddf3:	83 c0 02             	add    eax,0x2
c001ddf6:	c1 e0 07             	shl    eax,0x7
c001ddf9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ddfd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de05:	c1 e0 07             	shl    eax,0x7
c001de08:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001de10:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001de1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001de1e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001de24:	e8 ff e4 ff ff       	call   c001c328 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001de29:	83 c4 10             	add    esp,0x10
c001de2c:	89 c2                	mov    edx,eax
c001de2e:	b8 01 00 00 00       	mov    eax,0x1
c001de33:	83 fa ff             	cmp    edx,0xffffffff
c001de36:	0f 84 5f 02 00 00    	je     c001e09b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001de3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001de40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de44:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001de4a:	8b 00                	mov    eax,DWORD PTR [eax]
c001de4c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001de52:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001de58:	89 d1                	mov    ecx,edx
c001de5a:	c1 e1 05             	shl    ecx,0x5
c001de5d:	01 c8                	add    eax,ecx
c001de5f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de61:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001de67:	81 c9 25 00 01 00    	or     ecx,0x10025
c001de6d:	89 08                	mov    DWORD PTR [eax],ecx
c001de6f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001de75:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001de7b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001de81:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001de84:	50                   	push   eax
c001de85:	68 90 00 00 00       	push   0x90
c001de8a:	6a 00                	push   0x0
c001de8c:	53                   	push   ebx
c001de8d:	e8 5e 26 fe ff       	call   c00004f0 <memset>
c001de92:	8d 7b 40             	lea    edi,[ebx+0x40]
c001de95:	b9 0c 00 00 00       	mov    ecx,0xc
c001de9a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001de9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dea0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001dea6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001deaa:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001deae:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001deb4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001deb8:	48                   	dec    eax
c001deb9:	25 ff ff 3f 00       	and    eax,0x3fffff
c001debe:	89 c1                	mov    ecx,eax
c001dec0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001dec6:	25 00 00 c0 ff       	and    eax,0xffc00000
c001decb:	09 c8                	or     eax,ecx
c001decd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001ded3:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001ded9:	83 c8 80             	or     eax,0xffffff80
c001dedc:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001dee2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001dee5:	25 00 7f 00 00       	and    eax,0x7f00
c001deea:	0d 27 80 ff ff       	or     eax,0xffff8027
c001deef:	66 89 03             	mov    WORD PTR [ebx],ax
c001def2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001def6:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001defa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001defe:	c1 e8 10             	shr    eax,0x10
c001df01:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001df04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df08:	c1 e8 18             	shr    eax,0x18
c001df0b:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001df0e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001df12:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001df15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001df19:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001df1c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df20:	83 c4 10             	add    esp,0x10
c001df23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df27:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001df2b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001df2f:	31 c0                	xor    eax,eax
c001df31:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001df37:	80 e1 88             	and    cl,0x88
c001df3a:	74 0a                	je     c001df46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001df3c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df41:	74 0a                	je     c001df4d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001df43:	40                   	inc    eax
c001df44:	eb eb                	jmp    c001df31 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001df46:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df4b:	75 43                	jne    c001df90 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001df4d:	83 ec 0c             	sub    esp,0xc
c001df50:	68 1c 2d 02 c0       	push   0xc0022d1c
c001df55:	e8 b0 c9 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001df5a:	58                   	pop    eax
c001df5b:	5a                   	pop    edx
c001df5c:	68 31 2d 02 c0       	push   0xc0022d31
c001df61:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001df67:	e8 40 ab fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001df6c:	59                   	pop    ecx
c001df6d:	5b                   	pop    ebx
c001df6e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df72:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df78:	e8 45 e4 ff ff       	call   c001c3c2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001df7d:	5e                   	pop    esi
c001df7e:	5f                   	pop    edi
c001df7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df83:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df89:	e8 14 e4 ff ff       	call   c001c3a2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001df8e:	eb 48                	jmp    c001dfd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001df90:	b8 01 00 00 00       	mov    eax,0x1
c001df95:	88 d1                	mov    cl,dl
c001df97:	d3 e0                	shl    eax,cl
c001df99:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001df9e:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001dfa4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dfa8:	89 c7                	mov    edi,eax
c001dfaa:	c1 e3 07             	shl    ebx,0x7
c001dfad:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001dfb1:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001dfb7:	85 c7                	test   edi,eax
c001dfb9:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001dfbf:	0f 84 a3 00 00 00    	je     c001e068 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001dfc5:	0f ba e0 1e          	bt     eax,0x1e
c001dfc9:	73 1a                	jae    c001dfe5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001dfcb:	83 ec 0c             	sub    esp,0xc
c001dfce:	68 43 2d 02 c0       	push   0xc0022d43
c001dfd3:	e8 32 c9 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001dfd8:	83 c4 10             	add    esp,0x10
c001dfdb:	b8 01 00 00 00       	mov    eax,0x1
c001dfe0:	e9 b6 00 00 00       	jmp    c001e09b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001dfe5:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001dfeb:	83 f8 0d             	cmp    eax,0xd
c001dfee:	77 0a                	ja     c001dffa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001dff0:	83 ec 0c             	sub    esp,0xc
c001dff3:	68 c8 00 00 00       	push   0xc8
c001dff8:	eb 28                	jmp    c001e022 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001dffa:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e000:	83 f8 0d             	cmp    eax,0xd
c001e003:	77 0a                	ja     c001e00f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e005:	83 ec 0c             	sub    esp,0xc
c001e008:	68 58 02 00 00       	push   0x258
c001e00d:	eb 13                	jmp    c001e022 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e00f:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e015:	83 f8 06             	cmp    eax,0x6
c001e018:	77 10                	ja     c001e02a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e01a:	83 ec 0c             	sub    esp,0xc
c001e01d:	68 dc 05 00 00       	push   0x5dc
c001e022:	e8 69 7d ff ff       	call   c0015d90 <milliTenthSleep(unsigned int)>
c001e027:	83 c4 10             	add    esp,0x10
c001e02a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e02e:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e031:	75 06                	jne    c001e039 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e033:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e037:	74 15                	je     c001e04e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e039:	83 fe 06             	cmp    esi,0x6
c001e03c:	77 10                	ja     c001e04e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e03e:	83 ec 0c             	sub    esp,0xc
c001e041:	68 c4 09 00 00       	push   0x9c4
c001e046:	e8 45 7d ff ff       	call   c0015d90 <milliTenthSleep(unsigned int)>
c001e04b:	83 c4 10             	add    esp,0x10
c001e04e:	46                   	inc    esi
c001e04f:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e055:	0f 85 56 ff ff ff    	jne    c001dfb1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e05b:	83 ec 0c             	sub    esp,0xc
c001e05e:	68 56 2d 02 c0       	push   0xc0022d56
c001e063:	e9 6b ff ff ff       	jmp    c001dfd3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e068:	0f ba e0 1e          	bt     eax,0x1e
c001e06c:	73 0d                	jae    c001e07b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e06e:	83 ec 0c             	sub    esp,0xc
c001e071:	68 6a 2d 02 c0       	push   0xc0022d6a
c001e076:	e9 58 ff ff ff       	jmp    c001dfd3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e07b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e080:	74 17                	je     c001e099 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e082:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e087:	74 10                	je     c001e099 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e089:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e08f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e093:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e097:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e099:	31 c0                	xor    eax,eax
c001e09b:	83 c4 2c             	add    esp,0x2c
c001e09e:	5b                   	pop    ebx
c001e09f:	5e                   	pop    esi
c001e0a0:	5f                   	pop    edi
c001e0a1:	5d                   	pop    ebp
c001e0a2:	c3                   	ret    
c001e0a3:	90                   	nop

c001e0a4 <SATAPI::eject()>:
c001e0a4:	57                   	push   edi
c001e0a5:	b9 03 00 00 00       	mov    ecx,0x3
c001e0aa:	83 ec 18             	sub    esp,0x18
c001e0ad:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e0b1:	fc                   	cld    
c001e0b2:	31 c0                	xor    eax,eax
c001e0b4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e0b6:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e0bb:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e0c0:	50                   	push   eax
c001e0c1:	6a 00                	push   0x0
c001e0c3:	6a 00                	push   0x0
c001e0c5:	6a 00                	push   0x0
c001e0c7:	6a 00                	push   0x0
c001e0c9:	6a 02                	push   0x2
c001e0cb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0cf:	50                   	push   eax
c001e0d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e0d4:	e8 e5 fc ff ff       	call   c001ddbe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e0d9:	83 c4 38             	add    esp,0x38
c001e0dc:	31 c0                	xor    eax,eax
c001e0de:	5f                   	pop    edi
c001e0df:	c3                   	ret    

c001e0e0 <SATAPI::detectMedia()>:
c001e0e0:	53                   	push   ebx
c001e0e1:	83 ec 14             	sub    esp,0x14
c001e0e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e0e8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e0ee:	e8 59 02 ff ff       	call   c000e34c <VCache::writeWriteBuffer()>
c001e0f3:	59                   	pop    ecx
c001e0f4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e0fa:	e8 3d 02 ff ff       	call   c000e33c <VCache::invalidateReadBuffer()>
c001e0ff:	c7 04 24 7f 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d7f
c001e106:	e8 ff c7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e10b:	83 c4 10             	add    esp,0x10
c001e10e:	31 c0                	xor    eax,eax
c001e110:	8b 14 85 e0 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b20]
c001e117:	85 d2                	test   edx,edx
c001e119:	74 0f                	je     c001e12a <SATAPI::detectMedia()+0x4a>
c001e11b:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e121:	75 07                	jne    c001e12a <SATAPI::detectMedia()+0x4a>
c001e123:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e12a:	40                   	inc    eax
c001e12b:	83 f8 1a             	cmp    eax,0x1a
c001e12e:	75 e0                	jne    c001e110 <SATAPI::detectMedia()+0x30>
c001e130:	83 c4 08             	add    esp,0x8
c001e133:	5b                   	pop    ebx
c001e134:	c3                   	ret    
c001e135:	90                   	nop

c001e136 <SATAPI::open(int, int, void*)>:
c001e136:	56                   	push   esi
c001e137:	53                   	push   ebx
c001e138:	51                   	push   ecx
c001e139:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e13d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e141:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e14b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e151:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e155:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e15f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e169:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e170:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e176:	e8 67 9c fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e17b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e181:	89 c6                	mov    esi,eax
c001e183:	e8 5a 9c fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e188:	81 c6 00 10 00 00    	add    esi,0x1000
c001e18e:	39 c6                	cmp    esi,eax
c001e190:	74 10                	je     c001e1a2 <SATAPI::open(int, int, void*)+0x6c>
c001e192:	83 ec 0c             	sub    esp,0xc
c001e195:	68 94 2d 02 c0       	push   0xc0022d94
c001e19a:	e8 d2 2f ff ff       	call   c0011171 <KePanic(char const*)>
c001e19f:	83 c4 10             	add    esp,0x10
c001e1a2:	83 ec 0c             	sub    esp,0xc
c001e1a5:	6a 02                	push   0x2
c001e1a7:	e8 49 b4 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e1ac:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e1b2:	6a 03                	push   0x3
c001e1b4:	50                   	push   eax
c001e1b5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e1bb:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e1c1:	e8 38 bb fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e1c6:	83 c4 14             	add    esp,0x14
c001e1c9:	68 78 01 00 00       	push   0x178
c001e1ce:	e8 00 99 fe ff       	call   c0007ad3 <malloc>
c001e1d3:	83 c4 0c             	add    esp,0xc
c001e1d6:	6a 00                	push   0x0
c001e1d8:	68 ff ff ff 7f       	push   0x7fffffff
c001e1dd:	6a 00                	push   0x0
c001e1df:	6a 00                	push   0x0
c001e1e1:	53                   	push   ebx
c001e1e2:	68 aa 2d 02 c0       	push   0xc0022daa
c001e1e7:	89 c6                	mov    esi,eax
c001e1e9:	50                   	push   eax
c001e1ea:	e8 b7 f5 fe ff       	call   c000d7a6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e1ef:	83 c4 14             	add    esp,0x14
c001e1f2:	56                   	push   esi
c001e1f3:	e8 6e f6 fe ff       	call   c000d866 <LogicalDisk::assignDriveLetter()>
c001e1f8:	5a                   	pop    edx
c001e1f9:	59                   	pop    ecx
c001e1fa:	0f be c0             	movsx  eax,al
c001e1fd:	50                   	push   eax
c001e1fe:	68 fc 2b 02 c0       	push   0xc0022bfc
c001e203:	e8 02 c7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e208:	58                   	pop    eax
c001e209:	5a                   	pop    edx
c001e20a:	56                   	push   esi
c001e20b:	53                   	push   ebx
c001e20c:	e8 e7 e3 fe ff       	call   c000c5f8 <Device::addChild(Device*)>
c001e211:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e217:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e21a:	e8 0f e8 fe ff       	call   c000ca2e <PhysicalDisk::startCache()>
c001e21f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e226:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e229:	e8 b2 fe ff ff       	call   c001e0e0 <SATAPI::detectMedia()>
c001e22e:	83 c4 14             	add    esp,0x14
c001e231:	31 c0                	xor    eax,eax
c001e233:	5b                   	pop    ebx
c001e234:	5e                   	pop    esi
c001e235:	c3                   	ret    

c001e236 <SATAPI::read(unsigned long long, int, void*)>:
c001e236:	55                   	push   ebp
c001e237:	57                   	push   edi
c001e238:	56                   	push   esi
c001e239:	53                   	push   ebx
c001e23a:	83 ec 3c             	sub    esp,0x3c
c001e23d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e241:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e245:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e249:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e24d:	83 fd 04             	cmp    ebp,0x4
c001e250:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e254:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e258:	7e 10                	jle    c001e26a <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e25a:	83 ec 0c             	sub    esp,0xc
c001e25d:	68 b8 2d 02 c0       	push   0xc0022db8
c001e262:	e8 0a 2f ff ff       	call   c0011171 <KePanic(char const*)>
c001e267:	83 c4 10             	add    esp,0x10
c001e26a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e270:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e276:	51                   	push   ecx
c001e277:	50                   	push   eax
c001e278:	83 c0 02             	add    eax,0x2
c001e27b:	c1 e0 07             	shl    eax,0x7
c001e27e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e284:	50                   	push   eax
c001e285:	52                   	push   edx
c001e286:	e8 61 e1 ff ff       	call   c001c3ec <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e28b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e28f:	b9 03 00 00 00       	mov    ecx,0x3
c001e294:	fc                   	cld    
c001e295:	31 c0                	xor    eax,eax
c001e297:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e299:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e29e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e2a3:	83 c4 0c             	add    esp,0xc
c001e2a6:	6a 00                	push   0x0
c001e2a8:	6a 00                	push   0x0
c001e2aa:	6a 00                	push   0x0
c001e2ac:	6a 00                	push   0x0
c001e2ae:	6a 02                	push   0x2
c001e2b0:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e2b4:	50                   	push   eax
c001e2b5:	53                   	push   ebx
c001e2b6:	e8 03 fb ff ff       	call   c001ddbe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e2bb:	83 c4 20             	add    esp,0x20
c001e2be:	85 c0                	test   eax,eax
c001e2c0:	89 c6                	mov    esi,eax
c001e2c2:	75 46                	jne    c001e30a <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e2c4:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e2c8:	b9 03 00 00 00       	mov    ecx,0x3
c001e2cd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e2cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2d3:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e2d8:	0f c8                	bswap  eax
c001e2da:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e2de:	89 e8                	mov    eax,ebp
c001e2e0:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e2e4:	50                   	push   eax
c001e2e5:	55                   	push   ebp
c001e2e6:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e2ea:	c1 e5 0b             	shl    ebp,0xb
c001e2ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e2f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e2f5:	55                   	push   ebp
c001e2f6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e2fa:	50                   	push   eax
c001e2fb:	53                   	push   ebx
c001e2fc:	e8 bd fa ff ff       	call   c001ddbe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e301:	83 c4 20             	add    esp,0x20
c001e304:	85 c0                	test   eax,eax
c001e306:	89 c6                	mov    esi,eax
c001e308:	74 0c                	je     c001e316 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e30a:	83 ec 0c             	sub    esp,0xc
c001e30d:	53                   	push   ebx
c001e30e:	e8 cd fd ff ff       	call   c001e0e0 <SATAPI::detectMedia()>
c001e313:	83 c4 10             	add    esp,0x10
c001e316:	83 c4 3c             	add    esp,0x3c
c001e319:	89 f0                	mov    eax,esi
c001e31b:	5b                   	pop    ebx
c001e31c:	5e                   	pop    esi
c001e31d:	5f                   	pop    edi
c001e31e:	5d                   	pop    ebp
c001e31f:	c3                   	ret    

c001e320 <IOAPIC::close(int, int, void*)>:
c001e320:	b8 00 00 00 00       	mov    eax,0x0
c001e325:	c3                   	ret    

c001e326 <apicGetBase()>:
c001e326:	55                   	push   ebp
c001e327:	89 e5                	mov    ebp,esp
c001e329:	83 ec 18             	sub    esp,0x18
c001e32c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e331:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e337:	83 e0 08             	and    eax,0x8
c001e33a:	0f b6 c0             	movzx  eax,al
c001e33d:	85 c0                	test   eax,eax
c001e33f:	75 07                	jne    c001e348 <apicGetBase()+0x22>
c001e341:	b8 00 00 00 00       	mov    eax,0x0
c001e346:	eb 21                	jmp    c001e369 <apicGetBase()+0x43>
c001e348:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e34d:	83 ec 08             	sub    esp,0x8
c001e350:	6a 1b                	push   0x1b
c001e352:	50                   	push   eax
c001e353:	e8 8a 8d fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e358:	83 c4 10             	add    esp,0x10
c001e35b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e35e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e361:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e364:	25 00 00 ff ff       	and    eax,0xffff0000
c001e369:	c9                   	leave  
c001e36a:	c3                   	ret    
c001e36b:	90                   	nop

c001e36c <IOAPIC::IOAPIC()>:
c001e36c:	83 ec 0c             	sub    esp,0xc
c001e36f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e373:	83 ec 08             	sub    esp,0x8
c001e376:	68 1c 2e 02 c0       	push   0xc0022e1c
c001e37b:	50                   	push   eax
c001e37c:	e8 0f e4 fe ff       	call   c000c790 <Device::Device(char const*)>
c001e381:	83 c4 10             	add    esp,0x10
c001e384:	ba 2c 2e 02 c0       	mov    edx,0xc0022e2c
c001e389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e38d:	89 10                	mov    DWORD PTR [eax],edx
c001e38f:	90                   	nop
c001e390:	83 c4 0c             	add    esp,0xc
c001e393:	c3                   	ret    

c001e394 <apicOpen()>:
c001e394:	55                   	push   ebp
c001e395:	89 e5                	mov    ebp,esp
c001e397:	53                   	push   ebx
c001e398:	83 ec 34             	sub    esp,0x34
c001e39b:	a0 a0 ae 02 c0       	mov    al,ds:0xc002aea0
c001e3a0:	83 f0 01             	xor    eax,0x1
c001e3a3:	0f b6 c0             	movzx  eax,al
c001e3a6:	85 c0                	test   eax,eax
c001e3a8:	0f 84 a3 00 00 00    	je     c001e451 <apicOpen()+0xbd>
c001e3ae:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e3b2:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c001e3b7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e3bb:	0f b6 c0             	movzx  eax,al
c001e3be:	39 c2                	cmp    edx,eax
c001e3c0:	0f 83 84 00 00 00    	jae    c001e44a <apicOpen()+0xb6>
c001e3c6:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e3cd:	83 ec 0c             	sub    esp,0xc
c001e3d0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e3d3:	e8 fb 96 fe ff       	call   c0007ad3 <malloc>
c001e3d8:	83 c4 10             	add    esp,0x10
c001e3db:	89 c3                	mov    ebx,eax
c001e3dd:	83 ec 0c             	sub    esp,0xc
c001e3e0:	53                   	push   ebx
c001e3e1:	e8 86 ff ff ff       	call   c001e36c <IOAPIC::IOAPIC()>
c001e3e6:	83 c4 10             	add    esp,0x10
c001e3e9:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e3ec:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e3f0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e3f3:	89 14 85 80 ae 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5180],edx
c001e3fa:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c001e3ff:	83 c0 01             	add    eax,0x1
c001e402:	a3 60 ae 02 c0       	mov    ds:0xc002ae60,eax
c001e407:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e40c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e412:	83 ec 08             	sub    esp,0x8
c001e415:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e418:	50                   	push   eax
c001e419:	e8 da e1 fe ff       	call   c000c5f8 <Device::addChild(Device*)>
c001e41e:	83 c4 10             	add    esp,0x10
c001e421:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e424:	8b 00                	mov    eax,DWORD PTR [eax]
c001e426:	83 c0 08             	add    eax,0x8
c001e429:	8b 00                	mov    eax,DWORD PTR [eax]
c001e42b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e42f:	6a 00                	push   0x0
c001e431:	6a 00                	push   0x0
c001e433:	52                   	push   edx
c001e434:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e437:	ff d0                	call   eax
c001e439:	83 c4 10             	add    esp,0x10
c001e43c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e43f:	83 c0 01             	add    eax,0x1
c001e442:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e445:	e9 68 ff ff ff       	jmp    c001e3b2 <apicOpen()+0x1e>
c001e44a:	c6 05 a0 ae 02 c0 01 	mov    BYTE PTR ds:0xc002aea0,0x1
c001e451:	e8 d0 fe ff ff       	call   c001e326 <apicGetBase()>
c001e456:	05 f0 00 00 00       	add    eax,0xf0
c001e45b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e45e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e461:	8b 00                	mov    eax,DWORD PTR [eax]
c001e463:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e466:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e46d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e474:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e477:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e47a:	89 10                	mov    DWORD PTR [eax],edx
c001e47c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e483:	a1 90 97 02 c0       	mov    eax,ds:0xc0029790
c001e488:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e48b:	7d 7c                	jge    c001e509 <apicOpen()+0x175>
c001e48d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e490:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e497:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e49a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e49d:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e4a4:	c1 e8 08             	shr    eax,0x8
c001e4a7:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e4ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4ae:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e4b5:	c1 e8 18             	shr    eax,0x18
c001e4b8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e4bb:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e4bf:	3d ff 00 00 00       	cmp    eax,0xff
c001e4c4:	75 3a                	jne    c001e500 <apicOpen()+0x16c>
c001e4c6:	e8 5b fe ff ff       	call   c001e326 <apicGetBase()>
c001e4cb:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e4cf:	83 fa 01             	cmp    edx,0x1
c001e4d2:	75 07                	jne    c001e4db <apicOpen()+0x147>
c001e4d4:	ba 60 03 00 00       	mov    edx,0x360
c001e4d9:	eb 05                	jmp    c001e4e0 <apicOpen()+0x14c>
c001e4db:	ba 50 03 00 00       	mov    edx,0x350
c001e4e0:	01 d0                	add    eax,edx
c001e4e2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e4e5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e4e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4ea:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e4ed:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e4f4:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e4f8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e4fb:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e4fe:	89 10                	mov    DWORD PTR [eax],edx
c001e500:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e504:	e9 7a ff ff ff       	jmp    c001e483 <apicOpen()+0xef>
c001e509:	90                   	nop
c001e50a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e50d:	c9                   	leave  
c001e50e:	c3                   	ret    
c001e50f:	90                   	nop

c001e510 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e510:	55                   	push   ebp
c001e511:	89 e5                	mov    ebp,esp
c001e513:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e516:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e51c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e51f:	72 1d                	jb     c001e53e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e524:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e52a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e52d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e533:	01 d0                	add    eax,edx
c001e535:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e538:	73 04                	jae    c001e53e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e53a:	b0 01                	mov    al,0x1
c001e53c:	eb 02                	jmp    c001e540 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e53e:	b0 00                	mov    al,0x0
c001e540:	5d                   	pop    ebp
c001e541:	c3                   	ret    

c001e542 <IOAPIC::read(int)>:
c001e542:	55                   	push   ebp
c001e543:	89 e5                	mov    ebp,esp
c001e545:	83 ec 10             	sub    esp,0x10
c001e548:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e54b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e551:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e554:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e557:	0f b6 d0             	movzx  edx,al
c001e55a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e55d:	89 10                	mov    DWORD PTR [eax],edx
c001e55f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e562:	83 c0 10             	add    eax,0x10
c001e565:	8b 00                	mov    eax,DWORD PTR [eax]
c001e567:	c9                   	leave  
c001e568:	c3                   	ret    
c001e569:	90                   	nop

c001e56a <IOAPIC::open(int, int, void*)>:
c001e56a:	55                   	push   ebp
c001e56b:	89 e5                	mov    ebp,esp
c001e56d:	57                   	push   edi
c001e56e:	56                   	push   esi
c001e56f:	53                   	push   ebx
c001e570:	83 ec 04             	sub    esp,0x4
c001e573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e576:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e579:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e57f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e582:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e588:	8b 14 85 80 98 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6780]
c001e58f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e592:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e59b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e5a1:	8b 14 85 00 99 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6700]
c001e5a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5ab:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e5b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5b4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e5ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5bd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e5c3:	0f b6 f0             	movzx  esi,al
c001e5c6:	89 d0                	mov    eax,edx
c001e5c8:	ba 00 00 00 00       	mov    edx,0x0
c001e5cd:	89 c7                	mov    edi,eax
c001e5cf:	83 e7 ff             	and    edi,0xffffffff
c001e5d2:	89 f9                	mov    ecx,edi
c001e5d4:	0f b6 da             	movzx  ebx,dl
c001e5d7:	89 c8                	mov    eax,ecx
c001e5d9:	89 da                	mov    edx,ebx
c001e5db:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e5de:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e5e1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e5e5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e5e9:	83 e0 00             	and    eax,0x0
c001e5ec:	09 d0                	or     eax,edx
c001e5ee:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e5f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5f5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e5fb:	8d 50 01             	lea    edx,[eax+0x1]
c001e5fe:	88 d1                	mov    cl,dl
c001e600:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e603:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e609:	0f b6 d0             	movzx  edx,al
c001e60c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e60f:	83 c2 08             	add    edx,0x8
c001e612:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e616:	0f b6 c9             	movzx  ecx,cl
c001e619:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e61f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e623:	6a 01                	push   0x1
c001e625:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e628:	e8 15 ff ff ff       	call   c001e542 <IOAPIC::read(int)>
c001e62d:	83 c4 08             	add    esp,0x8
c001e630:	c1 f8 10             	sar    eax,0x10
c001e633:	0f b6 c0             	movzx  eax,al
c001e636:	8d 50 01             	lea    edx,[eax+0x1]
c001e639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e63c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e642:	b8 00 00 00 00       	mov    eax,0x0
c001e647:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e64a:	5b                   	pop    ebx
c001e64b:	5e                   	pop    esi
c001e64c:	5f                   	pop    edi
c001e64d:	5d                   	pop    ebp
c001e64e:	c3                   	ret    
c001e64f:	90                   	nop

c001e650 <IOAPIC::write(int, int)>:
c001e650:	55                   	push   ebp
c001e651:	89 e5                	mov    ebp,esp
c001e653:	83 ec 10             	sub    esp,0x10
c001e656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e659:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e65f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e662:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e665:	0f b6 d0             	movzx  edx,al
c001e668:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e66b:	89 10                	mov    DWORD PTR [eax],edx
c001e66d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e670:	8d 50 10             	lea    edx,[eax+0x10]
c001e673:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e676:	89 02                	mov    DWORD PTR [edx],eax
c001e678:	90                   	nop
c001e679:	c9                   	leave  
c001e67a:	c3                   	ret    
c001e67b:	90                   	nop

c001e67c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e67c:	55                   	push   ebp
c001e67d:	89 e5                	mov    ebp,esp
c001e67f:	53                   	push   ebx
c001e680:	83 ec 2c             	sub    esp,0x2c
c001e683:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e686:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e689:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e68c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e68f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e692:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e695:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e698:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e69b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e69e:	88 d8                	mov    al,bl
c001e6a0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e6a3:	88 c8                	mov    al,cl
c001e6a5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e6a8:	88 d0                	mov    al,dl
c001e6aa:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e6ad:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e6b1:	83 c0 08             	add    eax,0x8
c001e6b4:	d1 e0                	shl    eax,1
c001e6b6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e6b9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e6bd:	83 c0 08             	add    eax,0x8
c001e6c0:	d1 e0                	shl    eax,1
c001e6c2:	83 c0 01             	add    eax,0x1
c001e6c5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e6c8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e6cb:	50                   	push   eax
c001e6cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6cf:	e8 6e fe ff ff       	call   c001e542 <IOAPIC::read(int)>
c001e6d4:	83 c4 08             	add    esp,0x8
c001e6d7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e6da:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e6e1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e6e4:	c1 e0 18             	shl    eax,0x18
c001e6e7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e6ea:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e6ed:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e6f0:	52                   	push   edx
c001e6f1:	50                   	push   eax
c001e6f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6f5:	e8 56 ff ff ff       	call   c001e650 <IOAPIC::write(int, int)>
c001e6fa:	83 c4 0c             	add    esp,0xc
c001e6fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e700:	50                   	push   eax
c001e701:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e704:	e8 39 fe ff ff       	call   c001e542 <IOAPIC::read(int)>
c001e709:	83 c4 08             	add    esp,0x8
c001e70c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e70f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e716:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e71d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e724:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e728:	85 c0                	test   eax,eax
c001e72a:	74 09                	je     c001e735 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e72c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e733:	eb 07                	jmp    c001e73c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e735:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e73c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e740:	85 c0                	test   eax,eax
c001e742:	74 09                	je     c001e74d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e744:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e74b:	eb 07                	jmp    c001e754 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e74d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e754:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e75b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e75f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e762:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e765:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e768:	52                   	push   edx
c001e769:	50                   	push   eax
c001e76a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e76d:	e8 de fe ff ff       	call   c001e650 <IOAPIC::write(int, int)>
c001e772:	83 c4 0c             	add    esp,0xc
c001e775:	90                   	nop
c001e776:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e779:	c9                   	leave  
c001e77a:	c3                   	ret    
c001e77b:	90                   	nop

c001e77c <APICTimer::close(int, int, void*)>:
c001e77c:	b8 00 00 00 00       	mov    eax,0x0
c001e781:	c3                   	ret    
c001e782:	66 90                	xchg   ax,ax

c001e784 <apicTimerHandler(regs*, void*)>:
c001e784:	83 ec 0c             	sub    esp,0xc
c001e787:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e78b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e78d:	b8 10 27 00 00       	mov    eax,0x2710
c001e792:	ba 00 00 00 00       	mov    edx,0x0
c001e797:	f7 f1                	div    ecx
c001e799:	83 ec 0c             	sub    esp,0xc
c001e79c:	50                   	push   eax
c001e79d:	e8 c2 f8 fe ff       	call   c000e064 <timerHandler(unsigned int)>
c001e7a2:	83 c4 10             	add    esp,0x10
c001e7a5:	90                   	nop
c001e7a6:	83 c4 0c             	add    esp,0xc
c001e7a9:	c3                   	ret    
c001e7aa:	66 90                	xchg   ax,ax

c001e7ac <APICTimer::open(int, int, void*)>:
c001e7ac:	83 ec 0c             	sub    esp,0xc
c001e7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7b5:	83 c0 24             	add    eax,0x24
c001e7b8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7ba:	83 ec 08             	sub    esp,0x8
c001e7bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7c5:	ff d0                	call   eax
c001e7c7:	83 c4 10             	add    esp,0x10
c001e7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e7d2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7e0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e7e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7ea:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e7f0:	83 ec 0c             	sub    esp,0xc
c001e7f3:	51                   	push   ecx
c001e7f4:	6a 01                	push   0x1
c001e7f6:	68 84 e7 01 c0       	push   0xc001e784
c001e7fb:	52                   	push   edx
c001e7fc:	50                   	push   eax
c001e7fd:	e8 a2 dd fe ff       	call   c000c5a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e802:	83 c4 20             	add    esp,0x20
c001e805:	89 c2                	mov    edx,eax
c001e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e80b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e811:	b8 00 00 00 00       	mov    eax,0x0
c001e816:	83 c4 0c             	add    esp,0xc
c001e819:	c3                   	ret    
c001e81a:	66 90                	xchg   ax,ax

c001e81c <APICTimer::write(int)>:
c001e81c:	83 ec 0c             	sub    esp,0xc
c001e81f:	83 ec 0c             	sub    esp,0xc
c001e822:	68 50 2e 02 c0       	push   0xc0022e50
c001e827:	e8 45 29 ff ff       	call   c0011171 <KePanic(char const*)>
c001e82c:	83 c4 10             	add    esp,0x10
c001e82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e833:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e837:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e83d:	90                   	nop
c001e83e:	83 c4 0c             	add    esp,0xc
c001e841:	c3                   	ret    
c001e842:	66 90                	xchg   ax,ax

c001e844 <APICTimer::APICTimer()>:
c001e844:	83 ec 0c             	sub    esp,0xc
c001e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e84b:	83 ec 08             	sub    esp,0x8
c001e84e:	68 60 2e 02 c0       	push   0xc0022e60
c001e853:	50                   	push   eax
c001e854:	e8 3f f7 fe ff       	call   c000df98 <Timer::Timer(char const*)>
c001e859:	83 c4 10             	add    esp,0x10
c001e85c:	ba 74 2e 02 c0       	mov    edx,0xc0022e74
c001e861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e865:	89 10                	mov    DWORD PTR [eax],edx
c001e867:	90                   	nop
c001e868:	83 c4 0c             	add    esp,0xc
c001e86b:	c3                   	ret    

c001e86c <PIT::write(int)>:
c001e86c:	83 ec 10             	sub    esp,0x10
c001e86f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e873:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e877:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e87d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e881:	a3 a4 ae 02 c0       	mov    ds:0xc002aea4,eax
c001e886:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e88b:	89 c2                	mov    edx,eax
c001e88d:	c1 fa 1f             	sar    edx,0x1f
c001e890:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e894:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e898:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e89f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e8a4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e8a8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e8ad:	ee                   	out    dx,al
c001e8ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8b2:	0f b6 c0             	movzx  eax,al
c001e8b5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e8bc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e8c0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e8c4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e8c9:	ee                   	out    dx,al
c001e8ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8ce:	c1 f8 08             	sar    eax,0x8
c001e8d1:	0f b6 c0             	movzx  eax,al
c001e8d4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e8db:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e8df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e8e3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e8e8:	ee                   	out    dx,al
c001e8e9:	90                   	nop
c001e8ea:	83 c4 10             	add    esp,0x10
c001e8ed:	c3                   	ret    
c001e8ee:	66 90                	xchg   ax,ax

c001e8f0 <pitHandler(regs*, void*)>:
c001e8f0:	83 ec 0c             	sub    esp,0xc
c001e8f3:	8b 0d a4 ae 02 c0    	mov    ecx,DWORD PTR ds:0xc002aea4
c001e8f9:	b8 10 27 00 00       	mov    eax,0x2710
c001e8fe:	89 c2                	mov    edx,eax
c001e900:	c1 fa 1f             	sar    edx,0x1f
c001e903:	f7 f9                	idiv   ecx
c001e905:	83 ec 0c             	sub    esp,0xc
c001e908:	50                   	push   eax
c001e909:	e8 56 f7 fe ff       	call   c000e064 <timerHandler(unsigned int)>
c001e90e:	83 c4 10             	add    esp,0x10
c001e911:	90                   	nop
c001e912:	83 c4 0c             	add    esp,0xc
c001e915:	c3                   	ret    
c001e916:	66 90                	xchg   ax,ax

c001e918 <PIT::open(int, int, void*)>:
c001e918:	83 ec 0c             	sub    esp,0xc
c001e91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e91f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e921:	83 c0 24             	add    eax,0x24
c001e924:	8b 00                	mov    eax,DWORD PTR [eax]
c001e926:	83 ec 08             	sub    esp,0x8
c001e929:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e92d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e931:	ff d0                	call   eax
c001e933:	83 c4 10             	add    esp,0x10
c001e936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93a:	83 ec 0c             	sub    esp,0xc
c001e93d:	6a 00                	push   0x0
c001e93f:	6a 01                	push   0x1
c001e941:	68 f0 e8 01 c0       	push   0xc001e8f0
c001e946:	6a 00                	push   0x0
c001e948:	50                   	push   eax
c001e949:	e8 56 dc fe ff       	call   c000c5a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e94e:	83 c4 20             	add    esp,0x20
c001e951:	89 c2                	mov    edx,eax
c001e953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e957:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e95d:	b8 00 00 00 00       	mov    eax,0x0
c001e962:	83 c4 0c             	add    esp,0xc
c001e965:	c3                   	ret    
c001e966:	66 90                	xchg   ax,ax

c001e968 <PIT::close(int, int, void*)>:
c001e968:	83 ec 0c             	sub    esp,0xc
c001e96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97d:	6a 01                	push   0x1
c001e97f:	68 f0 e8 01 c0       	push   0xc001e8f0
c001e984:	6a 00                	push   0x0
c001e986:	50                   	push   eax
c001e987:	e8 4e dc fe ff       	call   c000c5da <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e98c:	83 c4 10             	add    esp,0x10
c001e98f:	b8 00 00 00 00       	mov    eax,0x0
c001e994:	83 c4 0c             	add    esp,0xc
c001e997:	c3                   	ret    

c001e998 <PIT::PIT()>:
c001e998:	83 ec 0c             	sub    esp,0xc
c001e99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99f:	83 ec 08             	sub    esp,0x8
c001e9a2:	68 9c 2e 02 c0       	push   0xc0022e9c
c001e9a7:	50                   	push   eax
c001e9a8:	e8 eb f5 fe ff       	call   c000df98 <Timer::Timer(char const*)>
c001e9ad:	83 c4 10             	add    esp,0x10
c001e9b0:	ba c4 2e 02 c0       	mov    edx,0xc0022ec4
c001e9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b9:	89 10                	mov    DWORD PTR [eax],edx
c001e9bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9c5:	0f b6 d0             	movzx  edx,al
c001e9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9dd:	0f b6 d0             	movzx  edx,al
c001e9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e9e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9f3:	8d 50 01             	lea    edx,[eax+0x1]
c001e9f6:	88 d1                	mov    cl,dl
c001e9f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9fc:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ea02:	0f b6 d0             	movzx  edx,al
c001ea05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea09:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea0d:	83 e1 3f             	and    ecx,0x3f
c001ea10:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea14:	90                   	nop
c001ea15:	83 c4 0c             	add    esp,0xc
c001ea18:	c3                   	ret    
c001ea19:	66 90                	xchg   ax,ax
c001ea1b:	66 90                	xchg   ax,ax
c001ea1d:	66 90                	xchg   ax,ax
c001ea1f:	90                   	nop

c001ea20 <avxDetect>:
c001ea20:	b8 01 00 00 00       	mov    eax,0x1
c001ea25:	0f a2                	cpuid  
c001ea27:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ea2d:	74 15                	je     c001ea44 <avxDetect.noAVX>
c001ea2f:	b8 01 00 00 00       	mov    eax,0x1
c001ea34:	0f a2                	cpuid  
c001ea36:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ea3c:	74 06                	je     c001ea44 <avxDetect.noAVX>
c001ea3e:	b8 01 00 00 00       	mov    eax,0x1
c001ea43:	c3                   	ret    

c001ea44 <avxDetect.noAVX>:
c001ea44:	b8 00 00 00 00       	mov    eax,0x0
c001ea49:	c3                   	ret    

c001ea4a <avxSave>:
c001ea4a:	53                   	push   ebx
c001ea4b:	52                   	push   edx
c001ea4c:	31 c0                	xor    eax,eax
c001ea4e:	48                   	dec    eax
c001ea4f:	89 c2                	mov    edx,eax
c001ea51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea55:	0f ae 23             	xsave  [ebx]
c001ea58:	5a                   	pop    edx
c001ea59:	5b                   	pop    ebx
c001ea5a:	c3                   	ret    

c001ea5b <avxLoad>:
c001ea5b:	53                   	push   ebx
c001ea5c:	52                   	push   edx
c001ea5d:	31 c0                	xor    eax,eax
c001ea5f:	48                   	dec    eax
c001ea60:	89 c2                	mov    edx,eax
c001ea62:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea66:	0f ae 2b             	xrstor [ebx]
c001ea69:	5a                   	pop    edx
c001ea6a:	5b                   	pop    ebx
c001ea6b:	c3                   	ret    

c001ea6c <avxInit>:
c001ea6c:	e8 67 03 00 00       	call   c001edd8 <sseInit>
c001ea71:	50                   	push   eax
c001ea72:	51                   	push   ecx
c001ea73:	0f 20 e0             	mov    eax,cr4
c001ea76:	0d 00 00 04 00       	or     eax,0x40000
c001ea7b:	0f 22 e0             	mov    cr4,eax
c001ea7e:	31 c9                	xor    ecx,ecx
c001ea80:	0f 01 d0             	xgetbv 
c001ea83:	0d 07 00 00 00       	or     eax,0x7
c001ea88:	0f 01 d1             	xsetbv 
c001ea8b:	59                   	pop    ecx
c001ea8c:	58                   	pop    eax
c001ea8d:	c3                   	ret    

c001ea8e <avxClose>:
c001ea8e:	c3                   	ret    

c001ea8f <wouldSheSayYes>:
c001ea8f:	c3                   	ret    
c001ea90:	49                   	dec    ecx
c001ea91:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ea95:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ea99:	75 20                	jne    c001eabb <isr0+0xb>
c001ea9b:	4e                   	dec    esi
c001ea9c:	79 61                	jns    c001eaff <isr7+0x3>
c001ea9e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001eaa3:	66 90                	xchg   ax,ax
c001eaa5:	66 90                	xchg   ax,ax
c001eaa7:	66 90                	xchg   ax,ax
c001eaa9:	66 90                	xchg   ax,ax
c001eaab:	66 90                	xchg   ax,ax
c001eaad:	66 90                	xchg   ax,ax
c001eaaf:	90                   	nop

c001eab0 <isr0>:
c001eab0:	fa                   	cli    
c001eab1:	68 00 00 00 00       	push   0x0
c001eab6:	68 00 00 00 00       	push   0x0
c001eabb:	e9 56 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eac0 <isr1>:
c001eac0:	fa                   	cli    
c001eac1:	6a 00                	push   0x0
c001eac3:	6a 01                	push   0x1
c001eac5:	e9 4c 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eaca <isr2>:
c001eaca:	fa                   	cli    
c001eacb:	6a 00                	push   0x0
c001eacd:	6a 02                	push   0x2
c001eacf:	e9 42 01 00 00       	jmp    c001ec16 <int_common_stub>

c001ead4 <isr3>:
c001ead4:	fa                   	cli    
c001ead5:	6a 00                	push   0x0
c001ead7:	6a 03                	push   0x3
c001ead9:	e9 38 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eade <isr4>:
c001eade:	fa                   	cli    
c001eadf:	6a 00                	push   0x0
c001eae1:	6a 04                	push   0x4
c001eae3:	e9 2e 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eae8 <isr5>:
c001eae8:	fa                   	cli    
c001eae9:	6a 00                	push   0x0
c001eaeb:	6a 05                	push   0x5
c001eaed:	e9 24 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eaf2 <isr6>:
c001eaf2:	fa                   	cli    
c001eaf3:	6a 00                	push   0x0
c001eaf5:	6a 06                	push   0x6
c001eaf7:	e9 1a 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eafc <isr7>:
c001eafc:	fa                   	cli    
c001eafd:	6a 00                	push   0x0
c001eaff:	6a 07                	push   0x7
c001eb01:	e9 10 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eb06 <isr8>:
c001eb06:	fa                   	cli    
c001eb07:	6a 08                	push   0x8
c001eb09:	e9 08 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eb0e <isr9>:
c001eb0e:	fa                   	cli    
c001eb0f:	6a 00                	push   0x0
c001eb11:	6a 09                	push   0x9
c001eb13:	e9 fe 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb18 <isr10>:
c001eb18:	fa                   	cli    
c001eb19:	6a 0a                	push   0xa
c001eb1b:	e9 f6 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb20 <isr11>:
c001eb20:	fa                   	cli    
c001eb21:	6a 0b                	push   0xb
c001eb23:	e9 ee 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb28 <isr12>:
c001eb28:	fa                   	cli    
c001eb29:	6a 0c                	push   0xc
c001eb2b:	e9 e6 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb30 <isr13>:
c001eb30:	fa                   	cli    
c001eb31:	6a 0d                	push   0xd
c001eb33:	53                   	push   ebx
c001eb34:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb38:	81 fb 06 ed 01 c0    	cmp    ebx,0xc001ed06
c001eb3e:	5b                   	pop    ebx
c001eb3f:	0f 84 c3 01 00 00    	je     c001ed08 <finishSignal2>
c001eb45:	e9 cc 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb4a <isr14>:
c001eb4a:	fa                   	cli    
c001eb4b:	6a 0e                	push   0xe
c001eb4d:	e9 c4 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb52 <isr15>:
c001eb52:	fa                   	cli    
c001eb53:	6a 00                	push   0x0
c001eb55:	6a 0f                	push   0xf
c001eb57:	e9 ba 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb5c <isr16>:
c001eb5c:	fa                   	cli    
c001eb5d:	6a 00                	push   0x0
c001eb5f:	6a 10                	push   0x10
c001eb61:	e9 b0 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb66 <isr17>:
c001eb66:	fa                   	cli    
c001eb67:	6a 00                	push   0x0
c001eb69:	6a 11                	push   0x11
c001eb6b:	e9 a6 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb70 <isr18>:
c001eb70:	fa                   	cli    
c001eb71:	6a 00                	push   0x0
c001eb73:	6a 12                	push   0x12
c001eb75:	e9 9c 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb7a <irq3>:
c001eb7a:	fa                   	cli    
c001eb7b:	6a 00                	push   0x0
c001eb7d:	6a 23                	push   0x23
c001eb7f:	e9 92 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb84 <irq4>:
c001eb84:	fa                   	cli    
c001eb85:	6a 00                	push   0x0
c001eb87:	6a 24                	push   0x24
c001eb89:	e9 88 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb8e <irq5>:
c001eb8e:	fa                   	cli    
c001eb8f:	6a 00                	push   0x0
c001eb91:	6a 25                	push   0x25
c001eb93:	e9 7e 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb98 <irq6>:
c001eb98:	fa                   	cli    
c001eb99:	6a 00                	push   0x0
c001eb9b:	6a 26                	push   0x26
c001eb9d:	e9 74 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eba2 <irq7>:
c001eba2:	fa                   	cli    
c001eba3:	6a 00                	push   0x0
c001eba5:	6a 27                	push   0x27
c001eba7:	e9 6a 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebac <irq8>:
c001ebac:	fa                   	cli    
c001ebad:	6a 00                	push   0x0
c001ebaf:	6a 28                	push   0x28
c001ebb1:	e9 60 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebb6 <irq9>:
c001ebb6:	fa                   	cli    
c001ebb7:	6a 00                	push   0x0
c001ebb9:	6a 29                	push   0x29
c001ebbb:	e9 56 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebc0 <irq10>:
c001ebc0:	fa                   	cli    
c001ebc1:	6a 00                	push   0x0
c001ebc3:	6a 2a                	push   0x2a
c001ebc5:	e9 4c 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebca <irq11>:
c001ebca:	fa                   	cli    
c001ebcb:	6a 00                	push   0x0
c001ebcd:	6a 2b                	push   0x2b
c001ebcf:	e9 42 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebd4 <irq12>:
c001ebd4:	fa                   	cli    
c001ebd5:	6a 00                	push   0x0
c001ebd7:	6a 2c                	push   0x2c
c001ebd9:	e9 38 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebde <irq13>:
c001ebde:	fa                   	cli    
c001ebdf:	6a 00                	push   0x0
c001ebe1:	6a 2d                	push   0x2d
c001ebe3:	e9 2e 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebe8 <irq14>:
c001ebe8:	fa                   	cli    
c001ebe9:	6a 00                	push   0x0
c001ebeb:	6a 2e                	push   0x2e
c001ebed:	e9 24 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebf2 <irq15>:
c001ebf2:	fa                   	cli    
c001ebf3:	6a 00                	push   0x0
c001ebf5:	6a 2f                	push   0x2f
c001ebf7:	e9 1a 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebfc <irq1>:
c001ebfc:	fa                   	cli    
c001ebfd:	6a 00                	push   0x0
c001ebff:	6a 21                	push   0x21
c001ec01:	eb 13                	jmp    c001ec16 <int_common_stub>

c001ec03 <irq2>:
c001ec03:	fa                   	cli    
c001ec04:	6a 00                	push   0x0
c001ec06:	6a 22                	push   0x22
c001ec08:	eb 0c                	jmp    c001ec16 <int_common_stub>

c001ec0a <isr96>:
c001ec0a:	6a 00                	push   0x0
c001ec0c:	6a 60                	push   0x60
c001ec0e:	fb                   	sti    
c001ec0f:	eb 37                	jmp    c001ec48 <syscall_common_stub>

c001ec11 <irq0>:
c001ec11:	fa                   	cli    
c001ec12:	6a 00                	push   0x0
c001ec14:	6a 20                	push   0x20

c001ec16 <int_common_stub>:
c001ec16:	60                   	pusha  
c001ec17:	1e                   	push   ds
c001ec18:	06                   	push   es
c001ec19:	0f a0                	push   fs
c001ec1b:	0f a8                	push   gs
c001ec1d:	66 b8 10 00          	mov    ax,0x10
c001ec21:	66 8e d8             	mov    ds,ax
c001ec24:	66 8e c0             	mov    es,ax
c001ec27:	66 8e e0             	mov    fs,ax
c001ec2a:	66 8e e8             	mov    gs,ax
c001ec2d:	54                   	push   esp
c001ec2e:	fc                   	cld    
c001ec2f:	e8 70 de fe ff       	call   c000caa4 <int_handler>
c001ec34:	81 c4 04 00 00 00    	add    esp,0x4
c001ec3a:	0f a9                	pop    gs
c001ec3c:	0f a1                	pop    fs
c001ec3e:	07                   	pop    es
c001ec3f:	1f                   	pop    ds
c001ec40:	61                   	popa   
c001ec41:	81 c4 08 00 00 00    	add    esp,0x8
c001ec47:	cf                   	iret   

c001ec48 <syscall_common_stub>:
c001ec48:	60                   	pusha  
c001ec49:	1e                   	push   ds
c001ec4a:	06                   	push   es
c001ec4b:	0f a0                	push   fs
c001ec4d:	0f a8                	push   gs
c001ec4f:	66 b8 10 00          	mov    ax,0x10
c001ec53:	66 8e d8             	mov    ds,ax
c001ec56:	66 8e c0             	mov    es,ax
c001ec59:	66 8e e0             	mov    fs,ax
c001ec5c:	66 8e e8             	mov    gs,ax
c001ec5f:	54                   	push   esp
c001ec60:	fc                   	cld    
c001ec61:	e8 3e de fe ff       	call   c000caa4 <int_handler>
c001ec66:	81 c4 04 00 00 00    	add    esp,0x4
c001ec6c:	0f a9                	pop    gs
c001ec6e:	0f a1                	pop    fs
c001ec70:	07                   	pop    es
c001ec71:	1f                   	pop    ds
c001ec72:	e8 0c 2b ff ff       	call   c0011783 <KiCheckSignalZ>
c001ec77:	3d 00 00 00 00       	cmp    eax,0x0
c001ec7c:	0f 84 c0 00 00 00    	je     c001ed42 <skipSignals>
c001ec82:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ec87:	61                   	popa   
c001ec88:	53                   	push   ebx
c001ec89:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ec8f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ec92:	5b                   	pop    ebx
c001ec93:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ec98:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ec9b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ec9e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001eca1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001eca4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001eca7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ecaa:	81 c4 08 00 00 00    	add    esp,0x8
c001ecb0:	5e                   	pop    esi
c001ecb1:	5b                   	pop    ebx
c001ecb2:	59                   	pop    ecx
c001ecb3:	5a                   	pop    edx
c001ecb4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ecb7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ecba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ecbd:	52                   	push   edx
c001ecbe:	51                   	push   ecx
c001ecbf:	53                   	push   ebx
c001ecc0:	56                   	push   esi
c001ecc1:	81 ec 08 00 00 00    	sub    esp,0x8
c001ecc7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ecca:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001eccd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ecd0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ecd3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ecd6:	60                   	pusha  
c001ecd7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ecdd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ece0:	89 e3                	mov    ebx,esp
c001ece2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ece5:	52                   	push   edx
c001ece6:	68 06 ed 01 c0       	push   0xc001ed06
c001eceb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ecee:	89 dc                	mov    esp,ebx
c001ecf0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ecf3:	68 23 00 00 00       	push   0x23
c001ecf8:	51                   	push   ecx
c001ecf9:	68 02 02 00 00       	push   0x202
c001ecfe:	68 1b 00 00 00       	push   0x1b
c001ed03:	ff 36                	push   DWORD PTR [esi]
c001ed05:	cf                   	iret   

c001ed06 <finishSignal>:
c001ed06:	cd 0f                	int    0xf

c001ed08 <finishSignal2>:
c001ed08:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ed0e:	e8 ed 2a ff ff       	call   c0011800 <KiFinishSignalZ>
c001ed13:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ed19:	68 23 00 00 00       	push   0x23
c001ed1e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ed21:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ed24:	68 1b 00 00 00       	push   0x1b
c001ed29:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ed2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed2f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ed32:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ed35:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ed38:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ed3b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ed3e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ed41:	cf                   	iret   

c001ed42 <skipSignals>:
c001ed42:	61                   	popa   
c001ed43:	81 c4 08 00 00 00    	add    esp,0x8
c001ed49:	cf                   	iret   
c001ed4a:	90                   	nop
c001ed4b:	90                   	nop

c001ed4c <irq16>:
c001ed4c:	fa                   	cli    
c001ed4d:	6a 00                	push   0x0
c001ed4f:	6a 30                	push   0x30
c001ed51:	e9 c0 fe ff ff       	jmp    c001ec16 <int_common_stub>

c001ed56 <irq17>:
c001ed56:	fa                   	cli    
c001ed57:	6a 00                	push   0x0
c001ed59:	6a 31                	push   0x31
c001ed5b:	e9 b6 fe ff ff       	jmp    c001ec16 <int_common_stub>

c001ed60 <irq18>:
c001ed60:	fa                   	cli    
c001ed61:	6a 00                	push   0x0
c001ed63:	6a 32                	push   0x32
c001ed65:	e9 ac fe ff ff       	jmp    c001ec16 <int_common_stub>

c001ed6a <irq19>:
c001ed6a:	fa                   	cli    
c001ed6b:	6a 00                	push   0x0
c001ed6d:	6a 33                	push   0x33
c001ed6f:	e9 a2 fe ff ff       	jmp    c001ec16 <int_common_stub>

c001ed74 <irq20>:
c001ed74:	fa                   	cli    
c001ed75:	6a 00                	push   0x0
c001ed77:	6a 34                	push   0x34
c001ed79:	e9 98 fe ff ff       	jmp    c001ec16 <int_common_stub>

c001ed7e <irq21>:
c001ed7e:	fa                   	cli    
c001ed7f:	6a 00                	push   0x0
c001ed81:	6a 35                	push   0x35
c001ed83:	e9 8e fe ff ff       	jmp    c001ec16 <int_common_stub>

c001ed88 <irq22>:
c001ed88:	fa                   	cli    
c001ed89:	6a 00                	push   0x0
c001ed8b:	6a 36                	push   0x36
c001ed8d:	e9 84 fe ff ff       	jmp    c001ec16 <int_common_stub>

c001ed92 <irq23>:
c001ed92:	fa                   	cli    
c001ed93:	6a 00                	push   0x0
c001ed95:	6a 37                	push   0x37
c001ed97:	e9 7a fe ff ff       	jmp    c001ec16 <int_common_stub>
c001ed9c:	66 90                	xchg   ax,ax
c001ed9e:	66 90                	xchg   ax,ax

c001eda0 <i386GetRDRAND>:
c001eda0:	b9 64 00 00 00       	mov    ecx,0x64

c001eda5 <retry>:
c001eda5:	0f c7 f0             	rdrand eax
c001eda8:	72 05                	jb     c001edaf <retry.done>
c001edaa:	e2 f9                	loop   c001eda5 <retry>

c001edac <retry.fail>:
c001edac:	31 c0                	xor    eax,eax
c001edae:	c3                   	ret    

c001edaf <retry.done>:
c001edaf:	c3                   	ret    

c001edb0 <absolutelyNoChanceInHell>:
c001edb0:	b8 01 00 00 00       	mov    eax,0x1
c001edb5:	0f a2                	cpuid  
c001edb7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001edbd:	74 06                	je     c001edc5 <sseDetect.noSSE>
c001edbf:	b8 01 00 00 00       	mov    eax,0x1
c001edc4:	c3                   	ret    

c001edc5 <sseDetect.noSSE>:
c001edc5:	31 c0                	xor    eax,eax
c001edc7:	c3                   	ret    

c001edc8 <sseSave>:
c001edc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edcc:	0f ae 00             	fxsave [eax]
c001edcf:	c3                   	ret    

c001edd0 <sseLoad>:
c001edd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edd4:	0f ae 08             	fxrstor [eax]
c001edd7:	c3                   	ret    

c001edd8 <sseInit>:
c001edd8:	e8 42 00 00 00       	call   c001ee1f <x87Init>
c001eddd:	0f 20 e0             	mov    eax,cr4
c001ede0:	66 0d 00 06          	or     ax,0x600
c001ede4:	0f 22 e0             	mov    cr4,eax
c001ede7:	c3                   	ret    

c001ede8 <sseClose>:
c001ede8:	c3                   	ret    
c001ede9:	66 90                	xchg   ax,ax
c001edeb:	66 90                	xchg   ax,ax
c001eded:	66 90                	xchg   ax,ax
c001edef:	90                   	nop

c001edf0 <value_37F>:
c001edf0:	7f 03                	jg     c001edf5 <value_37A+0x1>

c001edf2 <value_37E>:
c001edf2:	7e 03                	jle    c001edf7 <x87Detect+0x1>

c001edf4 <value_37A>:
c001edf4:	7a 03                	jp     c001edf9 <x87Detect+0x3>

c001edf6 <x87Detect>:
c001edf6:	b8 01 00 00 00       	mov    eax,0x1
c001edfb:	0f a2                	cpuid  
c001edfd:	f7 c2 01 00 00 00    	test   edx,0x1
c001ee03:	74 06                	je     c001ee0b <x87Detect.nox87>
c001ee05:	b8 01 00 00 00       	mov    eax,0x1
c001ee0a:	c3                   	ret    

c001ee0b <x87Detect.nox87>:
c001ee0b:	b8 00 00 00 00       	mov    eax,0x0
c001ee10:	c3                   	ret    

c001ee11 <x87Save>:
c001ee11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee15:	dd 30                	fnsave [eax]
c001ee17:	c3                   	ret    

c001ee18 <x87Load>:
c001ee18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee1c:	dd 20                	frstor [eax]
c001ee1e:	c3                   	ret    

c001ee1f <x87Init>:
c001ee1f:	0f 20 c0             	mov    eax,cr0
c001ee22:	66 25 fb ff          	and    ax,0xfffb
c001ee26:	66 0d 22 00          	or     ax,0x22
c001ee2a:	0f 22 c0             	mov    cr0,eax
c001ee2d:	db e3                	fninit 
c001ee2f:	0f 06                	clts   
c001ee31:	d9 2d f4 ed 01 c0    	fldcw  WORD PTR ds:0xc001edf4
c001ee37:	c3                   	ret    

c001ee38 <x87Close>:
c001ee38:	c3                   	ret    
c001ee39:	66 90                	xchg   ax,ax
c001ee3b:	90                   	nop

c001ee3c <__do_global_ctors_aux>:
c001ee3c:	a1 f0 fd 01 c0       	mov    eax,ds:0xc001fdf0
c001ee41:	83 f8 ff             	cmp    eax,0xffffffff
c001ee44:	74 1a                	je     c001ee60 <__do_global_ctors_aux+0x24>
c001ee46:	55                   	push   ebp
c001ee47:	89 e5                	mov    ebp,esp
c001ee49:	53                   	push   ebx
c001ee4a:	52                   	push   edx
c001ee4b:	bb f0 fd 01 c0       	mov    ebx,0xc001fdf0
c001ee50:	ff d0                	call   eax
c001ee52:	83 eb 04             	sub    ebx,0x4
c001ee55:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ee57:	83 f8 ff             	cmp    eax,0xffffffff
c001ee5a:	75 f4                	jne    c001ee50 <__do_global_ctors_aux+0x14>
c001ee5c:	58                   	pop    eax
c001ee5d:	5b                   	pop    ebx
c001ee5e:	5d                   	pop    ebp
c001ee5f:	c3                   	ret    
c001ee60:	c3                   	ret    
c001ee61:	66 90                	xchg   ax,ax
c001ee63:	90                   	nop

c001ee64 <__divdi3>:
c001ee64:	55                   	push   ebp
c001ee65:	57                   	push   edi
c001ee66:	56                   	push   esi
c001ee67:	53                   	push   ebx
c001ee68:	83 ec 1c             	sub    esp,0x1c
c001ee6b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ee6f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee73:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ee76:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ee7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ee7e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ee82:	85 db                	test   ebx,ebx
c001ee84:	0f 88 8e 00 00 00    	js     c001ef18 <__divdi3+0xb4>
c001ee8a:	89 dd                	mov    ebp,ebx
c001ee8c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ee94:	89 d3                	mov    ebx,edx
c001ee96:	85 d2                	test   edx,edx
c001ee98:	79 0d                	jns    c001eea7 <__divdi3+0x43>
c001ee9a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ee9e:	f7 d8                	neg    eax
c001eea0:	83 d2 00             	adc    edx,0x0
c001eea3:	f7 da                	neg    edx
c001eea5:	89 d3                	mov    ebx,edx
c001eea7:	89 c7                	mov    edi,eax
c001eea9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eeac:	85 db                	test   ebx,ebx
c001eeae:	75 48                	jne    c001eef8 <__divdi3+0x94>
c001eeb0:	39 ef                	cmp    edi,ebp
c001eeb2:	76 24                	jbe    c001eed8 <__divdi3+0x74>
c001eeb4:	89 ea                	mov    edx,ebp
c001eeb6:	f7 f7                	div    edi
c001eeb8:	89 c1                	mov    ecx,eax
c001eeba:	31 f6                	xor    esi,esi
c001eebc:	89 c8                	mov    eax,ecx
c001eebe:	89 f2                	mov    edx,esi
c001eec0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eec4:	85 c9                	test   ecx,ecx
c001eec6:	74 07                	je     c001eecf <__divdi3+0x6b>
c001eec8:	f7 d8                	neg    eax
c001eeca:	83 d2 00             	adc    edx,0x0
c001eecd:	f7 da                	neg    edx
c001eecf:	83 c4 1c             	add    esp,0x1c
c001eed2:	5b                   	pop    ebx
c001eed3:	5e                   	pop    esi
c001eed4:	5f                   	pop    edi
c001eed5:	5d                   	pop    ebp
c001eed6:	c3                   	ret    
c001eed7:	90                   	nop
c001eed8:	85 ff                	test   edi,edi
c001eeda:	75 0b                	jne    c001eee7 <__divdi3+0x83>
c001eedc:	b8 01 00 00 00       	mov    eax,0x1
c001eee1:	31 d2                	xor    edx,edx
c001eee3:	f7 f3                	div    ebx
c001eee5:	89 c7                	mov    edi,eax
c001eee7:	31 d2                	xor    edx,edx
c001eee9:	89 e8                	mov    eax,ebp
c001eeeb:	f7 f7                	div    edi
c001eeed:	89 c6                	mov    esi,eax
c001eeef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eef2:	f7 f7                	div    edi
c001eef4:	89 c1                	mov    ecx,eax
c001eef6:	eb c4                	jmp    c001eebc <__divdi3+0x58>
c001eef8:	39 eb                	cmp    ebx,ebp
c001eefa:	77 3c                	ja     c001ef38 <__divdi3+0xd4>
c001eefc:	0f bd f3             	bsr    esi,ebx
c001eeff:	83 f6 1f             	xor    esi,0x1f
c001ef02:	75 40                	jne    c001ef44 <__divdi3+0xe0>
c001ef04:	39 eb                	cmp    ebx,ebp
c001ef06:	72 09                	jb     c001ef11 <__divdi3+0xad>
c001ef08:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ef0b:	0f 87 97 00 00 00    	ja     c001efa8 <__divdi3+0x144>
c001ef11:	b9 01 00 00 00       	mov    ecx,0x1
c001ef16:	eb a4                	jmp    c001eebc <__divdi3+0x58>
c001ef18:	f7 d9                	neg    ecx
c001ef1a:	83 d3 00             	adc    ebx,0x0
c001ef1d:	f7 db                	neg    ebx
c001ef1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef22:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef26:	89 dd                	mov    ebp,ebx
c001ef28:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ef30:	e9 5f ff ff ff       	jmp    c001ee94 <__divdi3+0x30>
c001ef35:	8d 76 00             	lea    esi,[esi+0x0]
c001ef38:	31 f6                	xor    esi,esi
c001ef3a:	31 c9                	xor    ecx,ecx
c001ef3c:	e9 7b ff ff ff       	jmp    c001eebc <__divdi3+0x58>
c001ef41:	8d 76 00             	lea    esi,[esi+0x0]
c001ef44:	b8 20 00 00 00       	mov    eax,0x20
c001ef49:	29 f0                	sub    eax,esi
c001ef4b:	89 f1                	mov    ecx,esi
c001ef4d:	d3 e3                	shl    ebx,cl
c001ef4f:	89 fa                	mov    edx,edi
c001ef51:	88 c1                	mov    cl,al
c001ef53:	d3 ea                	shr    edx,cl
c001ef55:	09 da                	or     edx,ebx
c001ef57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ef5b:	89 f1                	mov    ecx,esi
c001ef5d:	d3 e7                	shl    edi,cl
c001ef5f:	89 eb                	mov    ebx,ebp
c001ef61:	88 c1                	mov    cl,al
c001ef63:	d3 eb                	shr    ebx,cl
c001ef65:	89 f1                	mov    ecx,esi
c001ef67:	d3 e5                	shl    ebp,cl
c001ef69:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ef6c:	88 c1                	mov    cl,al
c001ef6e:	d3 ea                	shr    edx,cl
c001ef70:	09 d5                	or     ebp,edx
c001ef72:	89 e8                	mov    eax,ebp
c001ef74:	89 da                	mov    edx,ebx
c001ef76:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ef7a:	89 d3                	mov    ebx,edx
c001ef7c:	89 c5                	mov    ebp,eax
c001ef7e:	f7 e7                	mul    edi
c001ef80:	39 d3                	cmp    ebx,edx
c001ef82:	72 18                	jb     c001ef9c <__divdi3+0x138>
c001ef84:	74 0a                	je     c001ef90 <__divdi3+0x12c>
c001ef86:	89 e9                	mov    ecx,ebp
c001ef88:	31 f6                	xor    esi,esi
c001ef8a:	e9 2d ff ff ff       	jmp    c001eebc <__divdi3+0x58>
c001ef8f:	90                   	nop
c001ef90:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001ef93:	89 f1                	mov    ecx,esi
c001ef95:	d3 e7                	shl    edi,cl
c001ef97:	39 c7                	cmp    edi,eax
c001ef99:	73 eb                	jae    c001ef86 <__divdi3+0x122>
c001ef9b:	90                   	nop
c001ef9c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001ef9f:	31 f6                	xor    esi,esi
c001efa1:	e9 16 ff ff ff       	jmp    c001eebc <__divdi3+0x58>
c001efa6:	66 90                	xchg   ax,ax
c001efa8:	31 c9                	xor    ecx,ecx
c001efaa:	e9 0d ff ff ff       	jmp    c001eebc <__divdi3+0x58>
c001efaf:	90                   	nop

c001efb0 <__moddi3>:
c001efb0:	55                   	push   ebp
c001efb1:	57                   	push   edi
c001efb2:	56                   	push   esi
c001efb3:	53                   	push   ebx
c001efb4:	83 ec 2c             	sub    esp,0x2c
c001efb7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001efbb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001efbf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001efc3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001efc7:	85 db                	test   ebx,ebx
c001efc9:	0f 88 85 00 00 00    	js     c001f054 <__moddi3+0xa4>
c001efcf:	89 de                	mov    esi,ebx
c001efd1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001efd9:	89 d7                	mov    edi,edx
c001efdb:	85 d2                	test   edx,edx
c001efdd:	79 09                	jns    c001efe8 <__moddi3+0x38>
c001efdf:	f7 d8                	neg    eax
c001efe1:	83 d2 00             	adc    edx,0x0
c001efe4:	f7 da                	neg    edx
c001efe6:	89 d7                	mov    edi,edx
c001efe8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efec:	89 cd                	mov    ebp,ecx
c001efee:	85 ff                	test   edi,edi
c001eff0:	75 52                	jne    c001f044 <__moddi3+0x94>
c001eff2:	89 c3                	mov    ebx,eax
c001eff4:	39 f0                	cmp    eax,esi
c001eff6:	76 24                	jbe    c001f01c <__moddi3+0x6c>
c001eff8:	89 c8                	mov    eax,ecx
c001effa:	89 f2                	mov    edx,esi
c001effc:	f7 f3                	div    ebx
c001effe:	89 d6                	mov    esi,edx
c001f000:	89 f0                	mov    eax,esi
c001f002:	31 d2                	xor    edx,edx
c001f004:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f008:	85 c9                	test   ecx,ecx
c001f00a:	74 07                	je     c001f013 <__moddi3+0x63>
c001f00c:	f7 d8                	neg    eax
c001f00e:	83 d2 00             	adc    edx,0x0
c001f011:	f7 da                	neg    edx
c001f013:	83 c4 2c             	add    esp,0x2c
c001f016:	5b                   	pop    ebx
c001f017:	5e                   	pop    esi
c001f018:	5f                   	pop    edi
c001f019:	5d                   	pop    ebp
c001f01a:	c3                   	ret    
c001f01b:	90                   	nop
c001f01c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f020:	85 db                	test   ebx,ebx
c001f022:	75 0d                	jne    c001f031 <__moddi3+0x81>
c001f024:	b8 01 00 00 00       	mov    eax,0x1
c001f029:	31 d2                	xor    edx,edx
c001f02b:	f7 f7                	div    edi
c001f02d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f031:	89 f0                	mov    eax,esi
c001f033:	31 d2                	xor    edx,edx
c001f035:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f039:	f7 f7                	div    edi
c001f03b:	89 e8                	mov    eax,ebp
c001f03d:	f7 f7                	div    edi
c001f03f:	89 d6                	mov    esi,edx
c001f041:	eb bd                	jmp    c001f000 <__moddi3+0x50>
c001f043:	90                   	nop
c001f044:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f048:	39 f7                	cmp    edi,esi
c001f04a:	76 20                	jbe    c001f06c <__moddi3+0xbc>
c001f04c:	89 c8                	mov    eax,ecx
c001f04e:	89 f2                	mov    edx,esi
c001f050:	eb b2                	jmp    c001f004 <__moddi3+0x54>
c001f052:	66 90                	xchg   ax,ax
c001f054:	f7 d9                	neg    ecx
c001f056:	83 d3 00             	adc    ebx,0x0
c001f059:	f7 db                	neg    ebx
c001f05b:	89 de                	mov    esi,ebx
c001f05d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f065:	e9 6f ff ff ff       	jmp    c001efd9 <__moddi3+0x29>
c001f06a:	66 90                	xchg   ax,ax
c001f06c:	0f bd c7             	bsr    eax,edi
c001f06f:	83 f0 1f             	xor    eax,0x1f
c001f072:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f076:	75 24                	jne    c001f09c <__moddi3+0xec>
c001f078:	39 f7                	cmp    edi,esi
c001f07a:	72 06                	jb     c001f082 <__moddi3+0xd2>
c001f07c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f080:	77 0c                	ja     c001f08e <__moddi3+0xde>
c001f082:	89 e9                	mov    ecx,ebp
c001f084:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f088:	19 fe                	sbb    esi,edi
c001f08a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f08e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f092:	89 f2                	mov    edx,esi
c001f094:	e9 6b ff ff ff       	jmp    c001f004 <__moddi3+0x54>
c001f099:	8d 76 00             	lea    esi,[esi+0x0]
c001f09c:	b8 20 00 00 00       	mov    eax,0x20
c001f0a1:	89 c2                	mov    edx,eax
c001f0a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f0a7:	29 da                	sub    edx,ebx
c001f0a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f0ad:	88 d9                	mov    cl,bl
c001f0af:	d3 e7                	shl    edi,cl
c001f0b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0b5:	88 d1                	mov    cl,dl
c001f0b7:	d3 e8                	shr    eax,cl
c001f0b9:	09 c7                	or     edi,eax
c001f0bb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f0bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f0c3:	89 d8                	mov    eax,ebx
c001f0c5:	88 d9                	mov    cl,bl
c001f0c7:	d3 e7                	shl    edi,cl
c001f0c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f0cd:	89 f3                	mov    ebx,esi
c001f0cf:	88 d1                	mov    cl,dl
c001f0d1:	d3 eb                	shr    ebx,cl
c001f0d3:	89 c7                	mov    edi,eax
c001f0d5:	88 c1                	mov    cl,al
c001f0d7:	d3 e6                	shl    esi,cl
c001f0d9:	89 e8                	mov    eax,ebp
c001f0db:	88 d1                	mov    cl,dl
c001f0dd:	d3 e8                	shr    eax,cl
c001f0df:	09 f0                	or     eax,esi
c001f0e1:	89 f9                	mov    ecx,edi
c001f0e3:	d3 e5                	shl    ebp,cl
c001f0e5:	89 da                	mov    edx,ebx
c001f0e7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f0eb:	89 d3                	mov    ebx,edx
c001f0ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f0f1:	89 c6                	mov    esi,eax
c001f0f3:	89 d1                	mov    ecx,edx
c001f0f5:	39 d3                	cmp    ebx,edx
c001f0f7:	72 27                	jb     c001f120 <__moddi3+0x170>
c001f0f9:	74 21                	je     c001f11c <__moddi3+0x16c>
c001f0fb:	29 f5                	sub    ebp,esi
c001f0fd:	19 cb                	sbb    ebx,ecx
c001f0ff:	89 de                	mov    esi,ebx
c001f101:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f105:	d3 e6                	shl    esi,cl
c001f107:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f10b:	89 f9                	mov    ecx,edi
c001f10d:	d3 ed                	shr    ebp,cl
c001f10f:	09 ee                	or     esi,ebp
c001f111:	89 f0                	mov    eax,esi
c001f113:	d3 eb                	shr    ebx,cl
c001f115:	89 da                	mov    edx,ebx
c001f117:	e9 e8 fe ff ff       	jmp    c001f004 <__moddi3+0x54>
c001f11c:	39 c5                	cmp    ebp,eax
c001f11e:	73 db                	jae    c001f0fb <__moddi3+0x14b>
c001f120:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f124:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f128:	89 d1                	mov    ecx,edx
c001f12a:	89 c6                	mov    esi,eax
c001f12c:	eb cd                	jmp    c001f0fb <__moddi3+0x14b>
c001f12e:	66 90                	xchg   ax,ax

c001f130 <__udivdi3>:
c001f130:	55                   	push   ebp
c001f131:	57                   	push   edi
c001f132:	56                   	push   esi
c001f133:	53                   	push   ebx
c001f134:	83 ec 1c             	sub    esp,0x1c
c001f137:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f13b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f13f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f143:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f147:	85 d2                	test   edx,edx
c001f149:	75 41                	jne    c001f18c <__udivdi3+0x5c>
c001f14b:	39 f7                	cmp    edi,esi
c001f14d:	76 15                	jbe    c001f164 <__udivdi3+0x34>
c001f14f:	89 e8                	mov    eax,ebp
c001f151:	89 f2                	mov    edx,esi
c001f153:	f7 f7                	div    edi
c001f155:	31 db                	xor    ebx,ebx
c001f157:	89 da                	mov    edx,ebx
c001f159:	83 c4 1c             	add    esp,0x1c
c001f15c:	5b                   	pop    ebx
c001f15d:	5e                   	pop    esi
c001f15e:	5f                   	pop    edi
c001f15f:	5d                   	pop    ebp
c001f160:	c3                   	ret    
c001f161:	8d 76 00             	lea    esi,[esi+0x0]
c001f164:	89 f9                	mov    ecx,edi
c001f166:	85 ff                	test   edi,edi
c001f168:	75 0b                	jne    c001f175 <__udivdi3+0x45>
c001f16a:	b8 01 00 00 00       	mov    eax,0x1
c001f16f:	31 d2                	xor    edx,edx
c001f171:	f7 f7                	div    edi
c001f173:	89 c1                	mov    ecx,eax
c001f175:	31 d2                	xor    edx,edx
c001f177:	89 f0                	mov    eax,esi
c001f179:	f7 f1                	div    ecx
c001f17b:	89 c3                	mov    ebx,eax
c001f17d:	89 e8                	mov    eax,ebp
c001f17f:	f7 f1                	div    ecx
c001f181:	89 da                	mov    edx,ebx
c001f183:	83 c4 1c             	add    esp,0x1c
c001f186:	5b                   	pop    ebx
c001f187:	5e                   	pop    esi
c001f188:	5f                   	pop    edi
c001f189:	5d                   	pop    ebp
c001f18a:	c3                   	ret    
c001f18b:	90                   	nop
c001f18c:	39 f2                	cmp    edx,esi
c001f18e:	77 1c                	ja     c001f1ac <__udivdi3+0x7c>
c001f190:	0f bd da             	bsr    ebx,edx
c001f193:	83 f3 1f             	xor    ebx,0x1f
c001f196:	75 24                	jne    c001f1bc <__udivdi3+0x8c>
c001f198:	39 f2                	cmp    edx,esi
c001f19a:	72 08                	jb     c001f1a4 <__udivdi3+0x74>
c001f19c:	39 ef                	cmp    edi,ebp
c001f19e:	0f 87 84 00 00 00    	ja     c001f228 <__udivdi3+0xf8>
c001f1a4:	b8 01 00 00 00       	mov    eax,0x1
c001f1a9:	eb ac                	jmp    c001f157 <__udivdi3+0x27>
c001f1ab:	90                   	nop
c001f1ac:	31 db                	xor    ebx,ebx
c001f1ae:	31 c0                	xor    eax,eax
c001f1b0:	89 da                	mov    edx,ebx
c001f1b2:	83 c4 1c             	add    esp,0x1c
c001f1b5:	5b                   	pop    ebx
c001f1b6:	5e                   	pop    esi
c001f1b7:	5f                   	pop    edi
c001f1b8:	5d                   	pop    ebp
c001f1b9:	c3                   	ret    
c001f1ba:	66 90                	xchg   ax,ax
c001f1bc:	b8 20 00 00 00       	mov    eax,0x20
c001f1c1:	29 d8                	sub    eax,ebx
c001f1c3:	88 d9                	mov    cl,bl
c001f1c5:	d3 e2                	shl    edx,cl
c001f1c7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f1cb:	89 fa                	mov    edx,edi
c001f1cd:	88 c1                	mov    cl,al
c001f1cf:	d3 ea                	shr    edx,cl
c001f1d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1d5:	09 d1                	or     ecx,edx
c001f1d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f1db:	88 d9                	mov    cl,bl
c001f1dd:	d3 e7                	shl    edi,cl
c001f1df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f1e3:	89 f7                	mov    edi,esi
c001f1e5:	88 c1                	mov    cl,al
c001f1e7:	d3 ef                	shr    edi,cl
c001f1e9:	88 d9                	mov    cl,bl
c001f1eb:	d3 e6                	shl    esi,cl
c001f1ed:	89 ea                	mov    edx,ebp
c001f1ef:	88 c1                	mov    cl,al
c001f1f1:	d3 ea                	shr    edx,cl
c001f1f3:	09 d6                	or     esi,edx
c001f1f5:	89 f0                	mov    eax,esi
c001f1f7:	89 fa                	mov    edx,edi
c001f1f9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f1fd:	89 d7                	mov    edi,edx
c001f1ff:	89 c6                	mov    esi,eax
c001f201:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f205:	39 d7                	cmp    edi,edx
c001f207:	72 13                	jb     c001f21c <__udivdi3+0xec>
c001f209:	74 09                	je     c001f214 <__udivdi3+0xe4>
c001f20b:	89 f0                	mov    eax,esi
c001f20d:	31 db                	xor    ebx,ebx
c001f20f:	e9 43 ff ff ff       	jmp    c001f157 <__udivdi3+0x27>
c001f214:	88 d9                	mov    cl,bl
c001f216:	d3 e5                	shl    ebp,cl
c001f218:	39 c5                	cmp    ebp,eax
c001f21a:	73 ef                	jae    c001f20b <__udivdi3+0xdb>
c001f21c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f21f:	31 db                	xor    ebx,ebx
c001f221:	e9 31 ff ff ff       	jmp    c001f157 <__udivdi3+0x27>
c001f226:	66 90                	xchg   ax,ax
c001f228:	31 c0                	xor    eax,eax
c001f22a:	e9 28 ff ff ff       	jmp    c001f157 <__udivdi3+0x27>
c001f22f:	90                   	nop

c001f230 <__umoddi3>:
c001f230:	55                   	push   ebp
c001f231:	57                   	push   edi
c001f232:	56                   	push   esi
c001f233:	53                   	push   ebx
c001f234:	83 ec 1c             	sub    esp,0x1c
c001f237:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f23b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f23f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f243:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f247:	89 da                	mov    edx,ebx
c001f249:	85 c0                	test   eax,eax
c001f24b:	75 37                	jne    c001f284 <__umoddi3+0x54>
c001f24d:	39 df                	cmp    edi,ebx
c001f24f:	76 13                	jbe    c001f264 <__umoddi3+0x34>
c001f251:	89 f0                	mov    eax,esi
c001f253:	f7 f7                	div    edi
c001f255:	89 d0                	mov    eax,edx
c001f257:	31 d2                	xor    edx,edx
c001f259:	83 c4 1c             	add    esp,0x1c
c001f25c:	5b                   	pop    ebx
c001f25d:	5e                   	pop    esi
c001f25e:	5f                   	pop    edi
c001f25f:	5d                   	pop    ebp
c001f260:	c3                   	ret    
c001f261:	8d 76 00             	lea    esi,[esi+0x0]
c001f264:	89 fd                	mov    ebp,edi
c001f266:	85 ff                	test   edi,edi
c001f268:	75 0b                	jne    c001f275 <__umoddi3+0x45>
c001f26a:	b8 01 00 00 00       	mov    eax,0x1
c001f26f:	31 d2                	xor    edx,edx
c001f271:	f7 f7                	div    edi
c001f273:	89 c5                	mov    ebp,eax
c001f275:	89 d8                	mov    eax,ebx
c001f277:	31 d2                	xor    edx,edx
c001f279:	f7 f5                	div    ebp
c001f27b:	89 f0                	mov    eax,esi
c001f27d:	f7 f5                	div    ebp
c001f27f:	89 d0                	mov    eax,edx
c001f281:	eb d4                	jmp    c001f257 <__umoddi3+0x27>
c001f283:	90                   	nop
c001f284:	89 f1                	mov    ecx,esi
c001f286:	39 d8                	cmp    eax,ebx
c001f288:	76 0a                	jbe    c001f294 <__umoddi3+0x64>
c001f28a:	89 f0                	mov    eax,esi
c001f28c:	83 c4 1c             	add    esp,0x1c
c001f28f:	5b                   	pop    ebx
c001f290:	5e                   	pop    esi
c001f291:	5f                   	pop    edi
c001f292:	5d                   	pop    ebp
c001f293:	c3                   	ret    
c001f294:	0f bd e8             	bsr    ebp,eax
c001f297:	83 f5 1f             	xor    ebp,0x1f
c001f29a:	75 1c                	jne    c001f2b8 <__umoddi3+0x88>
c001f29c:	39 d8                	cmp    eax,ebx
c001f29e:	72 04                	jb     c001f2a4 <__umoddi3+0x74>
c001f2a0:	39 f7                	cmp    edi,esi
c001f2a2:	77 08                	ja     c001f2ac <__umoddi3+0x7c>
c001f2a4:	89 da                	mov    edx,ebx
c001f2a6:	29 fe                	sub    esi,edi
c001f2a8:	19 c2                	sbb    edx,eax
c001f2aa:	89 f1                	mov    ecx,esi
c001f2ac:	89 c8                	mov    eax,ecx
c001f2ae:	83 c4 1c             	add    esp,0x1c
c001f2b1:	5b                   	pop    ebx
c001f2b2:	5e                   	pop    esi
c001f2b3:	5f                   	pop    edi
c001f2b4:	5d                   	pop    ebp
c001f2b5:	c3                   	ret    
c001f2b6:	66 90                	xchg   ax,ax
c001f2b8:	ba 20 00 00 00       	mov    edx,0x20
c001f2bd:	29 ea                	sub    edx,ebp
c001f2bf:	89 e9                	mov    ecx,ebp
c001f2c1:	d3 e0                	shl    eax,cl
c001f2c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2c7:	89 f8                	mov    eax,edi
c001f2c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f2cd:	88 d1                	mov    cl,dl
c001f2cf:	d3 e8                	shr    eax,cl
c001f2d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2d5:	09 c1                	or     ecx,eax
c001f2d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f2db:	89 e9                	mov    ecx,ebp
c001f2dd:	d3 e7                	shl    edi,cl
c001f2df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f2e3:	89 d8                	mov    eax,ebx
c001f2e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2e9:	88 d1                	mov    cl,dl
c001f2eb:	d3 e8                	shr    eax,cl
c001f2ed:	89 c7                	mov    edi,eax
c001f2ef:	89 e9                	mov    ecx,ebp
c001f2f1:	d3 e3                	shl    ebx,cl
c001f2f3:	89 f0                	mov    eax,esi
c001f2f5:	88 d1                	mov    cl,dl
c001f2f7:	d3 e8                	shr    eax,cl
c001f2f9:	09 d8                	or     eax,ebx
c001f2fb:	89 e9                	mov    ecx,ebp
c001f2fd:	d3 e6                	shl    esi,cl
c001f2ff:	89 f3                	mov    ebx,esi
c001f301:	89 fa                	mov    edx,edi
c001f303:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f307:	89 d1                	mov    ecx,edx
c001f309:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f30d:	89 c6                	mov    esi,eax
c001f30f:	89 d7                	mov    edi,edx
c001f311:	39 d1                	cmp    ecx,edx
c001f313:	72 27                	jb     c001f33c <__umoddi3+0x10c>
c001f315:	74 21                	je     c001f338 <__umoddi3+0x108>
c001f317:	89 ca                	mov    edx,ecx
c001f319:	29 f3                	sub    ebx,esi
c001f31b:	19 fa                	sbb    edx,edi
c001f31d:	89 d0                	mov    eax,edx
c001f31f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f323:	d3 e0                	shl    eax,cl
c001f325:	89 e9                	mov    ecx,ebp
c001f327:	d3 eb                	shr    ebx,cl
c001f329:	09 d8                	or     eax,ebx
c001f32b:	d3 ea                	shr    edx,cl
c001f32d:	83 c4 1c             	add    esp,0x1c
c001f330:	5b                   	pop    ebx
c001f331:	5e                   	pop    esi
c001f332:	5f                   	pop    edi
c001f333:	5d                   	pop    ebp
c001f334:	c3                   	ret    
c001f335:	8d 76 00             	lea    esi,[esi+0x0]
c001f338:	39 c3                	cmp    ebx,eax
c001f33a:	73 db                	jae    c001f317 <__umoddi3+0xe7>
c001f33c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f340:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f344:	89 d7                	mov    edi,edx
c001f346:	89 c6                	mov    esi,eax
c001f348:	eb cd                	jmp    c001f317 <__umoddi3+0xe7>

Disassembly of section .init:

c001f34a <_init>:
c001f34a:	55                   	push   ebp
c001f34b:	89 e5                	mov    ebp,esp
c001f34d:	e8 a2 0d fe ff       	call   c00000f4 <frame_dummy>
c001f352:	e8 e5 fa ff ff       	call   c001ee3c <__do_global_ctors_aux>
c001f357:	5d                   	pop    ebp
c001f358:	c3                   	ret    

Disassembly of section .fini:

c001f359 <_fini>:
c001f359:	55                   	push   ebp
c001f35a:	89 e5                	mov    ebp,esp
c001f35c:	e8 23 0d fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f361:	5d                   	pop    ebp
c001f362:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f364 <Computer::~Computer()>:
c001f364:	83 ec 0c             	sub    esp,0xc
c001f367:	ba 74 06 02 c0       	mov    edx,0xc0020674
c001f36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f370:	89 10                	mov    DWORD PTR [eax],edx
c001f372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f376:	83 ec 0c             	sub    esp,0xc
c001f379:	50                   	push   eax
c001f37a:	e8 7b d1 fe ff       	call   c000c4fa <Device::~Device()>
c001f37f:	83 c4 10             	add    esp,0x10
c001f382:	90                   	nop
c001f383:	83 c4 0c             	add    esp,0xc
c001f386:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f388 <Computer::~Computer()>:
c001f388:	83 ec 0c             	sub    esp,0xc
c001f38b:	83 ec 0c             	sub    esp,0xc
c001f38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f392:	e8 cd ff ff ff       	call   c001f364 <Computer::~Computer()>
c001f397:	83 c4 10             	add    esp,0x10
c001f39a:	83 ec 08             	sub    esp,0x8
c001f39d:	68 70 01 00 00       	push   0x170
c001f3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3a6:	e8 61 b4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f3ab:	83 c4 10             	add    esp,0x10
c001f3ae:	83 c4 0c             	add    esp,0xc
c001f3b1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f3b2 <idleCommon()>:
c001f3b2:	83 ec 0c             	sub    esp,0xc
c001f3b5:	fa                   	cli    
c001f3b6:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001f3bc:	e8 b3 66 ff ff       	call   c0015a74 <schedule()>
c001f3c1:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001f3c6:	48                   	dec    eax
c001f3c7:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001f3cc:	75 01                	jne    c001f3cf <idleCommon()+0x1d>
c001f3ce:	fb                   	sti    
c001f3cf:	83 c4 0c             	add    esp,0xc
c001f3d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f3d4 <LinkedList<UnixFile>::~LinkedList()>:
c001f3d4:	90                   	nop
c001f3d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f3d6 <LinkedList<UnixFile>::LinkedList()>:
c001f3d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f3e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f3eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f404:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f40b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f40f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f416:	90                   	nop
c001f417:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f418 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f418:	83 ec 0c             	sub    esp,0xc
c001f41b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f420:	75 10                	jne    c001f432 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f422:	83 ec 0c             	sub    esp,0xc
c001f425:	68 88 08 02 c0       	push   0xc0020888
c001f42a:	e8 42 1d ff ff       	call   c0011171 <KePanic(char const*)>
c001f42f:	83 c4 10             	add    esp,0x10
c001f432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f436:	8b 00                	mov    eax,DWORD PTR [eax]
c001f438:	85 c0                	test   eax,eax
c001f43a:	74 34                	je     c001f470 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f440:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f443:	85 c0                	test   eax,eax
c001f445:	74 29                	je     c001f470 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f44b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f44e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f452:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f459:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f45d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f464:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f467:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f46e:	eb 65                	jmp    c001f4d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f474:	8b 00                	mov    eax,DWORD PTR [eax]
c001f476:	85 c0                	test   eax,eax
c001f478:	75 4b                	jne    c001f4c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f47a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f47e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f481:	85 c0                	test   eax,eax
c001f483:	75 40                	jne    c001f4c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f489:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f48d:	89 10                	mov    DWORD PTR [eax],edx
c001f48f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f493:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f497:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f49e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4a1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4af:	85 c0                	test   eax,eax
c001f4b1:	74 22                	je     c001f4d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4b3:	83 ec 0c             	sub    esp,0xc
c001f4b6:	68 aa 08 02 c0       	push   0xc00208aa
c001f4bb:	e8 b1 1c ff ff       	call   c0011171 <KePanic(char const*)>
c001f4c0:	83 c4 10             	add    esp,0x10
c001f4c3:	eb 10                	jmp    c001f4d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4c5:	83 ec 0c             	sub    esp,0xc
c001f4c8:	68 b4 08 02 c0       	push   0xc00208b4
c001f4cd:	e8 9f 1c ff ff       	call   c0011171 <KePanic(char const*)>
c001f4d2:	83 c4 10             	add    esp,0x10
c001f4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4dc:	8d 50 01             	lea    edx,[eax+0x1]
c001f4df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f4e6:	90                   	nop
c001f4e7:	83 c4 0c             	add    esp,0xc
c001f4ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f4ec <LinkedList<UnixFile>::getFirstElement()>:
c001f4ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f4f4 <LinkedList<UnixFile>::removeFirst()>:
c001f4f4:	83 ec 0c             	sub    esp,0xc
c001f4f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4fd:	85 c0                	test   eax,eax
c001f4ff:	75 12                	jne    c001f513 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f501:	83 ec 0c             	sub    esp,0xc
c001f504:	68 c0 08 02 c0       	push   0xc00208c0
c001f509:	e8 63 1c ff ff       	call   c0011171 <KePanic(char const*)>
c001f50e:	83 c4 10             	add    esp,0x10
c001f511:	eb 7e                	jmp    c001f591 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f517:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f51a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f51d:	85 c0                	test   eax,eax
c001f51f:	74 10                	je     c001f531 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f521:	83 ec 0c             	sub    esp,0xc
c001f524:	68 0b 09 02 c0       	push   0xc002090b
c001f529:	e8 43 1c ff ff       	call   c0011171 <KePanic(char const*)>
c001f52e:	83 c4 10             	add    esp,0x10
c001f531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f535:	8b 00                	mov    eax,DWORD PTR [eax]
c001f537:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f53a:	85 c0                	test   eax,eax
c001f53c:	75 33                	jne    c001f571 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f542:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f54c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f557:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f55a:	83 f8 01             	cmp    eax,0x1
c001f55d:	74 21                	je     c001f580 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f55f:	83 ec 0c             	sub    esp,0xc
c001f562:	68 e4 08 02 c0       	push   0xc00208e4
c001f567:	e8 05 1c ff ff       	call   c0011171 <KePanic(char const*)>
c001f56c:	83 c4 10             	add    esp,0x10
c001f56f:	eb 0f                	jmp    c001f580 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f575:	8b 00                	mov    eax,DWORD PTR [eax]
c001f577:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f57e:	89 10                	mov    DWORD PTR [eax],edx
c001f580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f584:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f587:	8d 50 ff             	lea    edx,[eax-0x1]
c001f58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f591:	83 c4 0c             	add    esp,0xc
c001f594:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f596 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f596:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f59a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f59d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f59e <DriverlessDevice::~DriverlessDevice()>:
c001f59e:	ba 3c 14 02 c0       	mov    edx,0xc002143c
c001f5a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5a7:	89 10                	mov    DWORD PTR [eax],edx
c001f5a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5ad:	50                   	push   eax
c001f5ae:	e8 47 cf fe ff       	call   c000c4fa <Device::~Device()>
c001f5b3:	83 c4 04             	add    esp,0x4
c001f5b6:	90                   	nop
c001f5b7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f5b8 <DriverlessDevice::~DriverlessDevice()>:
c001f5b8:	83 ec 0c             	sub    esp,0xc
c001f5bb:	83 ec 0c             	sub    esp,0xc
c001f5be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5c2:	e8 d7 ff ff ff       	call   c001f59e <DriverlessDevice::~DriverlessDevice()>
c001f5c7:	83 c4 10             	add    esp,0x10
c001f5ca:	83 ec 08             	sub    esp,0x8
c001f5cd:	68 58 01 00 00       	push   0x158
c001f5d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5d6:	e8 31 b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f5db:	83 c4 10             	add    esp,0x10
c001f5de:	83 c4 0c             	add    esp,0xc
c001f5e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f5e2 <LinkedList<Device>::addElement(Device*)>:
c001f5e2:	83 ec 0c             	sub    esp,0xc
c001f5e5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f5ea:	75 10                	jne    c001f5fc <LinkedList<Device>::addElement(Device*)+0x1a>
c001f5ec:	83 ec 0c             	sub    esp,0xc
c001f5ef:	68 88 08 02 c0       	push   0xc0020888
c001f5f4:	e8 78 1b ff ff       	call   c0011171 <KePanic(char const*)>
c001f5f9:	83 c4 10             	add    esp,0x10
c001f5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f600:	8b 00                	mov    eax,DWORD PTR [eax]
c001f602:	85 c0                	test   eax,eax
c001f604:	74 3a                	je     c001f640 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f60a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f60d:	85 c0                	test   eax,eax
c001f60f:	74 2f                	je     c001f640 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f615:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f618:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f61c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f626:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f62a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f62d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f631:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f634:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f63e:	eb 68                	jmp    c001f6a8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f644:	8b 00                	mov    eax,DWORD PTR [eax]
c001f646:	85 c0                	test   eax,eax
c001f648:	75 4e                	jne    c001f698 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f64e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f651:	85 c0                	test   eax,eax
c001f653:	75 43                	jne    c001f698 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f659:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f65d:	89 10                	mov    DWORD PTR [eax],edx
c001f65f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f663:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f667:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f671:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f67b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f67f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f682:	85 c0                	test   eax,eax
c001f684:	74 22                	je     c001f6a8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f686:	83 ec 0c             	sub    esp,0xc
c001f689:	68 aa 08 02 c0       	push   0xc00208aa
c001f68e:	e8 de 1a ff ff       	call   c0011171 <KePanic(char const*)>
c001f693:	83 c4 10             	add    esp,0x10
c001f696:	eb 10                	jmp    c001f6a8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f698:	83 ec 0c             	sub    esp,0xc
c001f69b:	68 b4 08 02 c0       	push   0xc00208b4
c001f6a0:	e8 cc 1a ff ff       	call   c0011171 <KePanic(char const*)>
c001f6a5:	83 c4 10             	add    esp,0x10
c001f6a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6af:	8d 50 01             	lea    edx,[eax+0x1]
c001f6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f6b9:	90                   	nop
c001f6ba:	83 c4 0c             	add    esp,0xc
c001f6bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f6be <LinkedList<Device>::LinkedList()>:
c001f6be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6fe:	90                   	nop
c001f6ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f700 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f704:	8b 00                	mov    eax,DWORD PTR [eax]
c001f706:	85 c0                	test   eax,eax
c001f708:	75 0e                	jne    c001f718 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f70a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f70e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f711:	85 c0                	test   eax,eax
c001f713:	75 03                	jne    c001f718 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f715:	b0 01                	mov    al,0x1
c001f717:	c3                   	ret    
c001f718:	b0 00                	mov    al,0x0
c001f71a:	90                   	nop
c001f71b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f71c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f720:	8b 00                	mov    eax,DWORD PTR [eax]
c001f722:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f724 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f724:	83 ec 0c             	sub    esp,0xc
c001f727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f72b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f72d:	85 c0                	test   eax,eax
c001f72f:	75 17                	jne    c001f748 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f731:	83 ec 0c             	sub    esp,0xc
c001f734:	68 c0 08 02 c0       	push   0xc00208c0
c001f739:	e8 33 1a ff ff       	call   c0011171 <KePanic(char const*)>
c001f73e:	83 c4 10             	add    esp,0x10
c001f741:	e9 96 00 00 00       	jmp    c001f7dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f746:	66 90                	xchg   ax,ax
c001f748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f74f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f752:	85 c0                	test   eax,eax
c001f754:	0f 95 c0             	setne  al
c001f757:	0f b6 c0             	movzx  eax,al
c001f75a:	85 c0                	test   eax,eax
c001f75c:	74 12                	je     c001f770 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f75e:	83 ec 0c             	sub    esp,0xc
c001f761:	68 0b 09 02 c0       	push   0xc002090b
c001f766:	e8 06 1a ff ff       	call   c0011171 <KePanic(char const*)>
c001f76b:	83 c4 10             	add    esp,0x10
c001f76e:	66 90                	xchg   ax,ax
c001f770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f774:	8b 00                	mov    eax,DWORD PTR [eax]
c001f776:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f779:	85 c0                	test   eax,eax
c001f77b:	0f 94 c0             	sete   al
c001f77e:	0f b6 c0             	movzx  eax,al
c001f781:	85 c0                	test   eax,eax
c001f783:	74 33                	je     c001f7b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f789:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f793:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7a1:	83 f8 01             	cmp    eax,0x1
c001f7a4:	74 22                	je     c001f7c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f7a6:	83 ec 0c             	sub    esp,0xc
c001f7a9:	68 e4 08 02 c0       	push   0xc00208e4
c001f7ae:	e8 be 19 ff ff       	call   c0011171 <KePanic(char const*)>
c001f7b3:	83 c4 10             	add    esp,0x10
c001f7b6:	eb 10                	jmp    c001f7c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c5:	89 10                	mov    DWORD PTR [eax],edx
c001f7c7:	90                   	nop
c001f7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7cf:	8d 50 ff             	lea    edx,[eax-0x1]
c001f7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7d9:	8d 76 00             	lea    esi,[esi+0x0]
c001f7dc:	83 c4 0c             	add    esp,0xc
c001f7df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f7e0:	83 ec 0c             	sub    esp,0xc
c001f7e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f7e8:	75 12                	jne    c001f7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f7ea:	83 ec 0c             	sub    esp,0xc
c001f7ed:	68 88 08 02 c0       	push   0xc0020888
c001f7f2:	e8 7a 19 ff ff       	call   c0011171 <KePanic(char const*)>
c001f7f7:	83 c4 10             	add    esp,0x10
c001f7fa:	66 90                	xchg   ax,ax
c001f7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f800:	8b 00                	mov    eax,DWORD PTR [eax]
c001f802:	85 c0                	test   eax,eax
c001f804:	74 36                	je     c001f83c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f80d:	85 c0                	test   eax,eax
c001f80f:	74 2b                	je     c001f83c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f815:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f818:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f81c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f823:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f827:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f831:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f838:	eb 6a                	jmp    c001f8a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f83a:	66 90                	xchg   ax,ax
c001f83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f840:	8b 00                	mov    eax,DWORD PTR [eax]
c001f842:	85 c0                	test   eax,eax
c001f844:	75 4e                	jne    c001f894 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f84d:	85 c0                	test   eax,eax
c001f84f:	75 43                	jne    c001f894 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f855:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f859:	89 10                	mov    DWORD PTR [eax],edx
c001f85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f85f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f86a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f86d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f878:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f87b:	85 c0                	test   eax,eax
c001f87d:	74 25                	je     c001f8a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f87f:	83 ec 0c             	sub    esp,0xc
c001f882:	68 aa 08 02 c0       	push   0xc00208aa
c001f887:	e8 e5 18 ff ff       	call   c0011171 <KePanic(char const*)>
c001f88c:	83 c4 10             	add    esp,0x10
c001f88f:	eb 13                	jmp    c001f8a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f891:	8d 76 00             	lea    esi,[esi+0x0]
c001f894:	83 ec 0c             	sub    esp,0xc
c001f897:	68 b4 08 02 c0       	push   0xc00208b4
c001f89c:	e8 d0 18 ff ff       	call   c0011171 <KePanic(char const*)>
c001f8a1:	83 c4 10             	add    esp,0x10
c001f8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8ab:	8d 50 01             	lea    edx,[eax+0x1]
c001f8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8b5:	90                   	nop
c001f8b6:	83 c4 0c             	add    esp,0xc
c001f8b9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f8bc <ACPI::~ACPI()>:
c001f8bc:	83 ec 0c             	sub    esp,0xc
c001f8bf:	ba 24 1a 02 c0       	mov    edx,0xc0021a24
c001f8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c8:	89 10                	mov    DWORD PTR [eax],edx
c001f8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ce:	83 ec 0c             	sub    esp,0xc
c001f8d1:	50                   	push   eax
c001f8d2:	e8 23 cc fe ff       	call   c000c4fa <Device::~Device()>
c001f8d7:	83 c4 10             	add    esp,0x10
c001f8da:	90                   	nop
c001f8db:	83 c4 0c             	add    esp,0xc
c001f8de:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f8e0 <ACPI::~ACPI()>:
c001f8e0:	83 ec 0c             	sub    esp,0xc
c001f8e3:	83 ec 0c             	sub    esp,0xc
c001f8e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8ea:	e8 cd ff ff ff       	call   c001f8bc <ACPI::~ACPI()>
c001f8ef:	83 c4 10             	add    esp,0x10
c001f8f2:	83 ec 08             	sub    esp,0x8
c001f8f5:	68 64 12 00 00       	push   0x1264
c001f8fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8fe:	e8 09 af fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f903:	83 c4 10             	add    esp,0x10
c001f906:	83 c4 0c             	add    esp,0xc
c001f909:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f90c <LinkedList<Device>::~LinkedList()>:
c001f90c:	90                   	nop
c001f90d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f910 <LinkedList<Device>::isEmpty()>:
c001f910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f914:	8b 00                	mov    eax,DWORD PTR [eax]
c001f916:	85 c0                	test   eax,eax
c001f918:	75 0e                	jne    c001f928 <LinkedList<Device>::isEmpty()+0x18>
c001f91a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f91e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f921:	85 c0                	test   eax,eax
c001f923:	75 03                	jne    c001f928 <LinkedList<Device>::isEmpty()+0x18>
c001f925:	b0 01                	mov    al,0x1
c001f927:	c3                   	ret    
c001f928:	b0 00                	mov    al,0x0
c001f92a:	90                   	nop
c001f92b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f92c <LinkedList<Device>::getFirstElement()>:
c001f92c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f930:	8b 00                	mov    eax,DWORD PTR [eax]
c001f932:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f934 <LinkedList<Device>::removeFirst()>:
c001f934:	83 ec 0c             	sub    esp,0xc
c001f937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f93d:	85 c0                	test   eax,eax
c001f93f:	75 17                	jne    c001f958 <LinkedList<Device>::removeFirst()+0x24>
c001f941:	83 ec 0c             	sub    esp,0xc
c001f944:	68 c0 08 02 c0       	push   0xc00208c0
c001f949:	e8 23 18 ff ff       	call   c0011171 <KePanic(char const*)>
c001f94e:	83 c4 10             	add    esp,0x10
c001f951:	e9 92 00 00 00       	jmp    c001f9e8 <LinkedList<Device>::removeFirst()+0xb4>
c001f956:	66 90                	xchg   ax,ax
c001f958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f95c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f95f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f965:	85 c0                	test   eax,eax
c001f967:	74 13                	je     c001f97c <LinkedList<Device>::removeFirst()+0x48>
c001f969:	83 ec 0c             	sub    esp,0xc
c001f96c:	68 0b 09 02 c0       	push   0xc002090b
c001f971:	e8 fb 17 ff ff       	call   c0011171 <KePanic(char const*)>
c001f976:	83 c4 10             	add    esp,0x10
c001f979:	8d 76 00             	lea    esi,[esi+0x0]
c001f97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f980:	8b 00                	mov    eax,DWORD PTR [eax]
c001f982:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f988:	85 c0                	test   eax,eax
c001f98a:	75 34                	jne    c001f9c0 <LinkedList<Device>::removeFirst()+0x8c>
c001f98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f990:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9a8:	83 f8 01             	cmp    eax,0x1
c001f9ab:	74 27                	je     c001f9d4 <LinkedList<Device>::removeFirst()+0xa0>
c001f9ad:	83 ec 0c             	sub    esp,0xc
c001f9b0:	68 e4 08 02 c0       	push   0xc00208e4
c001f9b5:	e8 b7 17 ff ff       	call   c0011171 <KePanic(char const*)>
c001f9ba:	83 c4 10             	add    esp,0x10
c001f9bd:	eb 15                	jmp    c001f9d4 <LinkedList<Device>::removeFirst()+0xa0>
c001f9bf:	90                   	nop
c001f9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9c6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d0:	89 10                	mov    DWORD PTR [eax],edx
c001f9d2:	66 90                	xchg   ax,ax
c001f9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9db:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9e5:	8d 76 00             	lea    esi,[esi+0x0]
c001f9e8:	83 c4 0c             	add    esp,0xc
c001f9eb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f9ec <CPU::~CPU()>:
c001f9ec:	83 ec 0c             	sub    esp,0xc
c001f9ef:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c001f9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f8:	89 10                	mov    DWORD PTR [eax],edx
c001f9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9fe:	83 ec 0c             	sub    esp,0xc
c001fa01:	50                   	push   eax
c001fa02:	e8 f3 ca fe ff       	call   c000c4fa <Device::~Device()>
c001fa07:	83 c4 10             	add    esp,0x10
c001fa0a:	90                   	nop
c001fa0b:	83 c4 0c             	add    esp,0xc
c001fa0e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fa10 <CPU::~CPU()>:
c001fa10:	83 ec 0c             	sub    esp,0xc
c001fa13:	83 ec 0c             	sub    esp,0xc
c001fa16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa1a:	e8 cd ff ff ff       	call   c001f9ec <CPU::~CPU()>
c001fa1f:	83 c4 10             	add    esp,0x10
c001fa22:	83 ec 08             	sub    esp,0x8
c001fa25:	68 94 11 00 00       	push   0x1194
c001fa2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa2e:	e8 d9 ad fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fa33:	83 c4 10             	add    esp,0x10
c001fa36:	83 c4 0c             	add    esp,0xc
c001fa39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fa3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fa3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa40:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fa43:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fa44 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fa44:	90                   	nop
c001fa45:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fa48 <ThreadControlBlock::ThreadControlBlock()>:
c001fa48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa4c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa57:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fa5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa62:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fa69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa6d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fa74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa78:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fa7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa83:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fa87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa8b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fa8f:	90                   	nop
c001fa90:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fa94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fa94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001faa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fabe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fac9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001facd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fad4:	90                   	nop
c001fad5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fad6 <PCI::~PCI()>:
c001fad6:	83 ec 0c             	sub    esp,0xc
c001fad9:	ba 88 2a 02 c0       	mov    edx,0xc0022a88
c001fade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae2:	89 10                	mov    DWORD PTR [eax],edx
c001fae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae8:	83 ec 0c             	sub    esp,0xc
c001faeb:	50                   	push   eax
c001faec:	e8 9b c4 fe ff       	call   c000bf8c <Bus::~Bus()>
c001faf1:	83 c4 10             	add    esp,0x10
c001faf4:	90                   	nop
c001faf5:	83 c4 0c             	add    esp,0xc
c001faf8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fafa <PCI::~PCI()>:
c001fafa:	83 ec 0c             	sub    esp,0xc
c001fafd:	83 ec 0c             	sub    esp,0xc
c001fb00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb04:	e8 cd ff ff ff       	call   c001fad6 <PCI::~PCI()>
c001fb09:	83 c4 10             	add    esp,0x10
c001fb0c:	83 ec 08             	sub    esp,0x8
c001fb0f:	68 5c 01 00 00       	push   0x15c
c001fb14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb18:	e8 ef ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb1d:	83 c4 10             	add    esp,0x10
c001fb20:	83 c4 0c             	add    esp,0xc
c001fb23:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fb24 <IDE::~IDE()>:
c001fb24:	83 ec 0c             	sub    esp,0xc
c001fb27:	ba 3c 2b 02 c0       	mov    edx,0xc0022b3c
c001fb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb30:	89 10                	mov    DWORD PTR [eax],edx
c001fb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb36:	83 ec 0c             	sub    esp,0xc
c001fb39:	50                   	push   eax
c001fb3a:	e8 35 ce fe ff       	call   c000c974 <HardDiskController::~HardDiskController()>
c001fb3f:	83 c4 10             	add    esp,0x10
c001fb42:	90                   	nop
c001fb43:	83 c4 0c             	add    esp,0xc
c001fb46:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fb48 <IDE::~IDE()>:
c001fb48:	83 ec 0c             	sub    esp,0xc
c001fb4b:	83 ec 0c             	sub    esp,0xc
c001fb4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb52:	e8 cd ff ff ff       	call   c001fb24 <IDE::~IDE()>
c001fb57:	83 c4 10             	add    esp,0x10
c001fb5a:	83 ec 08             	sub    esp,0x8
c001fb5d:	68 70 02 00 00       	push   0x270
c001fb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb66:	e8 a1 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb6b:	83 c4 10             	add    esp,0x10
c001fb6e:	83 c4 0c             	add    esp,0xc
c001fb71:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fb72 <SATABus::~SATABus()>:
c001fb72:	83 ec 0c             	sub    esp,0xc
c001fb75:	ba 8c 2b 02 c0       	mov    edx,0xc0022b8c
c001fb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7e:	89 10                	mov    DWORD PTR [eax],edx
c001fb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb84:	83 ec 0c             	sub    esp,0xc
c001fb87:	50                   	push   eax
c001fb88:	e8 e7 cd fe ff       	call   c000c974 <HardDiskController::~HardDiskController()>
c001fb8d:	83 c4 10             	add    esp,0x10
c001fb90:	90                   	nop
c001fb91:	83 c4 0c             	add    esp,0xc
c001fb94:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fb96 <SATABus::~SATABus()>:
c001fb96:	83 ec 0c             	sub    esp,0xc
c001fb99:	83 ec 0c             	sub    esp,0xc
c001fb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fba0:	e8 cd ff ff ff       	call   c001fb72 <SATABus::~SATABus()>
c001fba5:	83 c4 10             	add    esp,0x10
c001fba8:	83 ec 08             	sub    esp,0x8
c001fbab:	68 64 01 00 00       	push   0x164
c001fbb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbb4:	e8 53 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fbb9:	83 c4 10             	add    esp,0x10
c001fbbc:	83 c4 0c             	add    esp,0xc
c001fbbf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fbc0 <ATA::~ATA()>:
c001fbc0:	83 ec 0c             	sub    esp,0xc
c001fbc3:	ba cc 2b 02 c0       	mov    edx,0xc0022bcc
c001fbc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbcc:	89 10                	mov    DWORD PTR [eax],edx
c001fbce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd2:	83 ec 0c             	sub    esp,0xc
c001fbd5:	50                   	push   eax
c001fbd6:	e8 7b ce fe ff       	call   c000ca56 <PhysicalDisk::~PhysicalDisk()>
c001fbdb:	83 c4 10             	add    esp,0x10
c001fbde:	90                   	nop
c001fbdf:	83 c4 0c             	add    esp,0xc
c001fbe2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fbe4 <ATA::~ATA()>:
c001fbe4:	83 ec 0c             	sub    esp,0xc
c001fbe7:	83 ec 0c             	sub    esp,0xc
c001fbea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbee:	e8 cd ff ff ff       	call   c001fbc0 <ATA::~ATA()>
c001fbf3:	83 c4 10             	add    esp,0x10
c001fbf6:	83 ec 08             	sub    esp,0x8
c001fbf9:	68 7c 01 00 00       	push   0x17c
c001fbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc02:	e8 05 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc07:	83 c4 10             	add    esp,0x10
c001fc0a:	83 c4 0c             	add    esp,0xc
c001fc0d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fc0e <ATAPI::~ATAPI()>:
c001fc0e:	83 ec 0c             	sub    esp,0xc
c001fc11:	ba 14 2c 02 c0       	mov    edx,0xc0022c14
c001fc16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1a:	89 10                	mov    DWORD PTR [eax],edx
c001fc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc20:	83 ec 0c             	sub    esp,0xc
c001fc23:	50                   	push   eax
c001fc24:	e8 2d ce fe ff       	call   c000ca56 <PhysicalDisk::~PhysicalDisk()>
c001fc29:	83 c4 10             	add    esp,0x10
c001fc2c:	90                   	nop
c001fc2d:	83 c4 0c             	add    esp,0xc
c001fc30:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fc32 <ATAPI::~ATAPI()>:
c001fc32:	83 ec 0c             	sub    esp,0xc
c001fc35:	83 ec 0c             	sub    esp,0xc
c001fc38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc3c:	e8 cd ff ff ff       	call   c001fc0e <ATAPI::~ATAPI()>
c001fc41:	83 c4 10             	add    esp,0x10
c001fc44:	83 ec 08             	sub    esp,0x8
c001fc47:	68 84 01 00 00       	push   0x184
c001fc4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc50:	e8 b7 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc55:	83 c4 10             	add    esp,0x10
c001fc58:	83 c4 0c             	add    esp,0xc
c001fc5b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fc5c <SATA::~SATA()>:
c001fc5c:	83 ec 0c             	sub    esp,0xc
c001fc5f:	ba c8 2c 02 c0       	mov    edx,0xc0022cc8
c001fc64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc68:	89 10                	mov    DWORD PTR [eax],edx
c001fc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6e:	83 ec 0c             	sub    esp,0xc
c001fc71:	50                   	push   eax
c001fc72:	e8 df cd fe ff       	call   c000ca56 <PhysicalDisk::~PhysicalDisk()>
c001fc77:	83 c4 10             	add    esp,0x10
c001fc7a:	90                   	nop
c001fc7b:	83 c4 0c             	add    esp,0xc
c001fc7e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fc80 <SATA::~SATA()>:
c001fc80:	83 ec 0c             	sub    esp,0xc
c001fc83:	83 ec 0c             	sub    esp,0xc
c001fc86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc8a:	e8 cd ff ff ff       	call   c001fc5c <SATA::~SATA()>
c001fc8f:	83 c4 10             	add    esp,0x10
c001fc92:	83 ec 08             	sub    esp,0x8
c001fc95:	68 7c 01 00 00       	push   0x17c
c001fc9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc9e:	e8 69 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fca3:	83 c4 10             	add    esp,0x10
c001fca6:	83 c4 0c             	add    esp,0xc
c001fca9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fcaa <SATAPI::~SATAPI()>:
c001fcaa:	83 ec 0c             	sub    esp,0xc
c001fcad:	ba ec 2d 02 c0       	mov    edx,0xc0022dec
c001fcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb6:	89 10                	mov    DWORD PTR [eax],edx
c001fcb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcbc:	83 ec 0c             	sub    esp,0xc
c001fcbf:	50                   	push   eax
c001fcc0:	e8 91 cd fe ff       	call   c000ca56 <PhysicalDisk::~PhysicalDisk()>
c001fcc5:	83 c4 10             	add    esp,0x10
c001fcc8:	90                   	nop
c001fcc9:	83 c4 0c             	add    esp,0xc
c001fccc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fcce <SATAPI::~SATAPI()>:
c001fcce:	83 ec 0c             	sub    esp,0xc
c001fcd1:	83 ec 0c             	sub    esp,0xc
c001fcd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcd8:	e8 cd ff ff ff       	call   c001fcaa <SATAPI::~SATAPI()>
c001fcdd:	83 c4 10             	add    esp,0x10
c001fce0:	83 ec 08             	sub    esp,0x8
c001fce3:	68 84 01 00 00       	push   0x184
c001fce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcec:	e8 1b ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fcf1:	83 c4 10             	add    esp,0x10
c001fcf4:	83 c4 0c             	add    esp,0xc
c001fcf7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fcf8 <IOAPIC::~IOAPIC()>:
c001fcf8:	83 ec 0c             	sub    esp,0xc
c001fcfb:	ba 2c 2e 02 c0       	mov    edx,0xc0022e2c
c001fd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd04:	89 10                	mov    DWORD PTR [eax],edx
c001fd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0a:	83 ec 0c             	sub    esp,0xc
c001fd0d:	50                   	push   eax
c001fd0e:	e8 e7 c7 fe ff       	call   c000c4fa <Device::~Device()>
c001fd13:	83 c4 10             	add    esp,0x10
c001fd16:	90                   	nop
c001fd17:	83 c4 0c             	add    esp,0xc
c001fd1a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fd1c <IOAPIC::~IOAPIC()>:
c001fd1c:	83 ec 0c             	sub    esp,0xc
c001fd1f:	83 ec 0c             	sub    esp,0xc
c001fd22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd26:	e8 cd ff ff ff       	call   c001fcf8 <IOAPIC::~IOAPIC()>
c001fd2b:	83 c4 10             	add    esp,0x10
c001fd2e:	83 ec 08             	sub    esp,0x8
c001fd31:	68 68 01 00 00       	push   0x168
c001fd36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd3a:	e8 cd aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd3f:	83 c4 10             	add    esp,0x10
c001fd42:	83 c4 0c             	add    esp,0xc
c001fd45:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fd48 <APICTimer::~APICTimer()>:
c001fd48:	83 ec 0c             	sub    esp,0xc
c001fd4b:	ba 74 2e 02 c0       	mov    edx,0xc0022e74
c001fd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd54:	89 10                	mov    DWORD PTR [eax],edx
c001fd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5a:	83 ec 0c             	sub    esp,0xc
c001fd5d:	50                   	push   eax
c001fd5e:	e8 6d e2 fe ff       	call   c000dfd0 <Timer::~Timer()>
c001fd63:	83 c4 10             	add    esp,0x10
c001fd66:	90                   	nop
c001fd67:	83 c4 0c             	add    esp,0xc
c001fd6a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fd6c <APICTimer::~APICTimer()>:
c001fd6c:	83 ec 0c             	sub    esp,0xc
c001fd6f:	83 ec 0c             	sub    esp,0xc
c001fd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd76:	e8 cd ff ff ff       	call   c001fd48 <APICTimer::~APICTimer()>
c001fd7b:	83 c4 10             	add    esp,0x10
c001fd7e:	83 ec 08             	sub    esp,0x8
c001fd81:	68 60 01 00 00       	push   0x160
c001fd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd8a:	e8 7d aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd8f:	83 c4 10             	add    esp,0x10
c001fd92:	83 c4 0c             	add    esp,0xc
c001fd95:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fd98 <PIT::~PIT()>:
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	ba c4 2e 02 c0       	mov    edx,0xc0022ec4
c001fda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda4:	89 10                	mov    DWORD PTR [eax],edx
c001fda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdaa:	83 ec 0c             	sub    esp,0xc
c001fdad:	50                   	push   eax
c001fdae:	e8 1d e2 fe ff       	call   c000dfd0 <Timer::~Timer()>
c001fdb3:	83 c4 10             	add    esp,0x10
c001fdb6:	90                   	nop
c001fdb7:	83 c4 0c             	add    esp,0xc
c001fdba:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fdbc <PIT::~PIT()>:
c001fdbc:	83 ec 0c             	sub    esp,0xc
c001fdbf:	83 ec 0c             	sub    esp,0xc
c001fdc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc6:	e8 cd ff ff ff       	call   c001fd98 <PIT::~PIT()>
c001fdcb:	83 c4 10             	add    esp,0x10
c001fdce:	83 ec 08             	sub    esp,0x8
c001fdd1:	68 5c 01 00 00       	push   0x15c
c001fdd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdda:	e8 2d aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fddf:	83 c4 10             	add    esp,0x10
c001fde2:	83 c4 0c             	add    esp,0xc
c001fde5:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be d6 1c 02 c0       	mov    esi,0xc0021cd6
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be f2 1c 02 c0       	mov    esi,0xc0021cf2
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
